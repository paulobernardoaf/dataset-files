<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavutil\hwcontext_qsv.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mfx/mfxvideo.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_PTHREADS</name></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pthread.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_VAAPI</name></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hwcontext_vaapi.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_DXVA2</name></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hwcontext_dxva2.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"buffer.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hwcontext.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hwcontext_internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hwcontext_qsv.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mem.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pixfmt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pixdesc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"time.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>QSVDevicePriv</name> <block>{

<decl_stmt><decl><type><name>AVBufferRef</name> <modifier>*</modifier></type><name>child_device_ctx</name></decl>;</decl_stmt>

}</block></struct></type> <name>QSVDevicePriv</name>;</typedef>

<typedef>typedef <type><struct>struct <name>QSVDeviceContext</name> <block>{

<decl_stmt><decl><type><name>mfxHDL</name></type> <name>handle</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxHandleType</name></type> <name>handle_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxVersion</name></type> <name>ver</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxIMPL</name></type> <name>impl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>AVHWDeviceType</name></name></type> <name>child_device_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>child_pix_fmt</name></decl>;</decl_stmt>

}</block></struct></type> <name>QSVDeviceContext</name>;</typedef>

<typedef>typedef <type><struct>struct <name>QSVFramesContext</name> <block>{

<decl_stmt><decl><type><name>mfxSession</name></type> <name>session_download</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>session_download_init</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxSession</name></type> <name>session_upload</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>session_upload_init</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_PTHREADS</name></expr></cpp:if>

<decl_stmt><decl><type><name>pthread_mutex_t</name></type> <name>session_lock</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pthread_cond_t</name></type> <name>session_cond</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>AVBufferRef</name> <modifier>*</modifier></type><name>child_frames_ref</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxFrameSurface1</name> <modifier>*</modifier></type><name>surfaces_internal</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nb_surfaces_used</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxMemId</name> <modifier>*</modifier></type><name>mem_ids</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxFrameSurface1</name> <modifier>*</modifier><modifier>*</modifier></type><name>surface_ptrs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxExtOpaqueSurfaceAlloc</name></type> <name>opaque_alloc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxExtBuffer</name> <modifier>*</modifier></type><name><name>ext_buffers</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>QSVFramesContext</name>;</typedef>

<struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{

<decl_stmt><decl><type><name>mfxHandleType</name></type> <name>handle_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>AVHWDeviceType</name></name></type> <name>device_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>pix_fmt</name></decl>;</decl_stmt>

}</block> <decl><name><name>supported_handle_types</name><index>[]</index></name> <init>= <expr><block>{

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_VAAPI</name></expr></cpp:if>

<expr><block>{ <expr><name>MFX_HANDLE_VA_DISPLAY</name></expr>, <expr><name>AV_HWDEVICE_TYPE_VAAPI</name></expr>, <expr><name>AV_PIX_FMT_VAAPI</name></expr> }</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_DXVA2</name></expr></cpp:if>

<expr><block>{ <expr><name>MFX_HANDLE_D3D9_DEVICE_MANAGER</name></expr>, <expr><name>AV_HWDEVICE_TYPE_DXVA2</name></expr>, <expr><name>AV_PIX_FMT_DXVA2_VLD</name></expr> }</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr>,

}</block></expr></init></decl>;</struct>

<struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{

<decl_stmt><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>pix_fmt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>fourcc</name></decl>;</decl_stmt>

}</block> <decl><name><name>supported_pixel_formats</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><name>AV_PIX_FMT_NV12</name></expr>, <expr><name>MFX_FOURCC_NV12</name></expr> }</block></expr>,

<expr><block>{ <expr><name>AV_PIX_FMT_BGRA</name></expr>, <expr><name>MFX_FOURCC_RGB4</name></expr> }</block></expr>,

<expr><block>{ <expr><name>AV_PIX_FMT_P010</name></expr>, <expr><name>MFX_FOURCC_P010</name></expr> }</block></expr>,

<expr><block>{ <expr><name>AV_PIX_FMT_PAL8</name></expr>, <expr><name>MFX_FOURCC_P8</name></expr> }</block></expr>,

}</block></expr></init></decl>;</struct>

<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>qsv_fourcc_from_pix_fmt</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>pix_fmt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>supported_pixel_formats</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>supported_pixel_formats</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pix_fmt</name> <operator>==</operator> <name>pix_fmt</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>supported_pixel_formats</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fourcc</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>qsv_device_init</name><parameter_list>(<parameter><decl><type><name>AVHWDeviceContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVQSVDeviceContext</name> <modifier>*</modifier></type><name>hwctx</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>QSVDeviceContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxStatus</name></type> <name>err</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>supported_handle_types</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>handle_type</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>MFXVideoCORE_GetHandle</name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>session</name></name></expr></argument>, <argument><expr><name><name>supported_handle_types</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>handle_type</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <name>MFX_ERR_NONE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>handle_type</name></name> <operator>=</operator> <name><name>supported_handle_types</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>handle_type</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>child_device_type</name></name> <operator>=</operator> <name><name>supported_handle_types</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>device_type</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>child_pix_fmt</name></name> <operator>=</operator> <name><name>supported_handle_types</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pix_fmt</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>handle</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"No supported hw handle could be retrieved "</literal>

<literal type="string">"from the session\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>MFXQueryIMPL</name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>session</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>impl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <name>MFX_ERR_NONE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>MFXQueryVersion</name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>session</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>ver</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>MFX_ERR_NONE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error querying the session attributes\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_UNKNOWN</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>qsv_frames_uninit</name><parameter_list>(<parameter><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>QSVFramesContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>session_download</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>MFXVideoVPP_Close</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>session_download</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MFXClose</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>session_download</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>session_download</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>session_download_init</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>session_upload</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>MFXVideoVPP_Close</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>session_upload</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MFXClose</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>session_upload</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>session_upload</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>session_upload_init</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_PTHREADS</name></expr></cpp:if>

<expr_stmt><expr><call><name>pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>session_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_cond_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>session_cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>mem_ids</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>surface_ptrs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>surfaces_internal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>child_frames_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>qsv_pool_release_dummy</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>AVBufferRef</name> <modifier>*</modifier></type><name>qsv_pool_alloc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator><name>AVHWFramesContext</name><operator>*</operator><operator>)</operator><name>opaque</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>QSVFramesContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVQSVFramesContext</name> <modifier>*</modifier></type><name>hwctx</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>nb_surfaces_used</name></name> <operator>&lt;</operator> <name><name>hwctx</name><operator>-&gt;</operator><name>nb_surfaces</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nb_surfaces_used</name></name><operator>++</operator></expr>;</expr_stmt>

<return>return <expr><call><name>av_buffer_create</name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>surfaces_internal</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_surfaces_used</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>hwctx</name><operator>-&gt;</operator><name>surfaces</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>qsv_pool_release_dummy</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>qsv_init_child_ctx</name><parameter_list>(<parameter><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVQSVFramesContext</name> <modifier>*</modifier></type><name>hwctx</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>QSVFramesContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>QSVDeviceContext</name> <modifier>*</modifier></type><name>device_priv</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>device_ctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVBufferRef</name> <modifier>*</modifier></type><name>child_device_ref</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVBufferRef</name> <modifier>*</modifier></type><name>child_frames_ref</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVHWDeviceContext</name> <modifier>*</modifier></type><name>child_device_ctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>child_frames_ctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>device_priv</name><operator>-&gt;</operator><name>handle</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Cannot create a non-opaque internal surface pool without "</literal>

<literal type="string">"a hardware handle\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>child_device_ref</name> <operator>=</operator> <call><name>av_hwdevice_ctx_alloc</name><argument_list>(<argument><expr><name><name>device_priv</name><operator>-&gt;</operator><name>child_device_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>child_device_ref</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>child_device_ctx</name> <operator>=</operator> <operator>(</operator><name>AVHWDeviceContext</name><operator>*</operator><operator>)</operator><name><name>child_device_ref</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_VAAPI</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>child_device_ctx</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AV_HWDEVICE_TYPE_VAAPI</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>AVVAAPIDeviceContext</name> <modifier>*</modifier></type><name>child_device_hwctx</name> <init>= <expr><name><name>child_device_ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>child_device_hwctx</name><operator>-&gt;</operator><name>display</name></name> <operator>=</operator> <operator>(</operator><name>VADisplay</name><operator>)</operator><name><name>device_priv</name><operator>-&gt;</operator><name>handle</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_DXVA2</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>child_device_ctx</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AV_HWDEVICE_TYPE_DXVA2</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>AVDXVA2DeviceContext</name> <modifier>*</modifier></type><name>child_device_hwctx</name> <init>= <expr><name><name>child_device_ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>child_device_hwctx</name><operator>-&gt;</operator><name>devmgr</name></name> <operator>=</operator> <operator>(</operator><name>IDirect3DDeviceManager9</name><operator>*</operator><operator>)</operator><name><name>device_priv</name><operator>-&gt;</operator><name>handle</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_hwdevice_ctx_init</name><argument_list>(<argument><expr><name>child_device_ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error initializing a child device context\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>child_frames_ref</name> <operator>=</operator> <call><name>av_hwframe_ctx_alloc</name><argument_list>(<argument><expr><name>child_device_ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>child_frames_ref</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>child_frames_ctx</name> <operator>=</operator> <operator>(</operator><name>AVHWFramesContext</name><operator>*</operator><operator>)</operator><name><name>child_frames_ref</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>child_frames_ctx</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name><name>device_priv</name><operator>-&gt;</operator><name>child_pix_fmt</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>child_frames_ctx</name><operator>-&gt;</operator><name>sw_format</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>sw_format</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>child_frames_ctx</name><operator>-&gt;</operator><name>initial_pool_size</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>initial_pool_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>child_frames_ctx</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>child_frames_ctx</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_DXVA2</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>child_device_ctx</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AV_HWDEVICE_TYPE_DXVA2</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>AVDXVA2FramesContext</name> <modifier>*</modifier></type><name>child_frames_hwctx</name> <init>= <expr><name><name>child_frames_ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hwctx</name><operator>-&gt;</operator><name>frame_type</name></name> <operator>&amp;</operator> <name>MFX_MEMTYPE_VIDEO_MEMORY_PROCESSOR_TARGET</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>child_frames_hwctx</name><operator>-&gt;</operator><name>surface_type</name></name> <operator>=</operator> <name>DXVA2_VideoProcessorRenderTarget</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>child_frames_hwctx</name><operator>-&gt;</operator><name>surface_type</name></name> <operator>=</operator> <name>DXVA2_VideoDecoderRenderTarget</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_hwframe_ctx_init</name><argument_list>(<argument><expr><name>child_frames_ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error initializing a child frames context\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_VAAPI</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>child_device_ctx</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AV_HWDEVICE_TYPE_VAAPI</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>AVVAAPIFramesContext</name> <modifier>*</modifier></type><name>child_frames_hwctx</name> <init>= <expr><name><name>child_frames_ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>initial_pool_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>surfaces_internal</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>Data</name><operator>.</operator><name>MemId</name></name> <operator>=</operator> <name><name>child_frames_hwctx</name><operator>-&gt;</operator><name>surface_ids</name></name> <operator>+</operator> <name>i</name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>hwctx</name><operator>-&gt;</operator><name>frame_type</name></name> <operator>=</operator> <name>MFX_MEMTYPE_VIDEO_MEMORY_DECODER_TARGET</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_DXVA2</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>child_device_ctx</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AV_HWDEVICE_TYPE_DXVA2</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>AVDXVA2FramesContext</name> <modifier>*</modifier></type><name>child_frames_hwctx</name> <init>= <expr><name><name>child_frames_ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>initial_pool_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>surfaces_internal</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>Data</name><operator>.</operator><name>MemId</name></name> <operator>=</operator> <operator>(</operator><name>mfxMemId</name><operator>)</operator><name><name>child_frames_hwctx</name><operator>-&gt;</operator><name>surfaces</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name><name>child_frames_hwctx</name><operator>-&gt;</operator><name>surface_type</name></name> <operator>==</operator> <name>DXVA2_VideoProcessorRenderTarget</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>hwctx</name><operator>-&gt;</operator><name>frame_type</name></name> <operator>=</operator> <name>MFX_MEMTYPE_VIDEO_MEMORY_PROCESSOR_TARGET</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>hwctx</name><operator>-&gt;</operator><name>frame_type</name></name> <operator>=</operator> <name>MFX_MEMTYPE_VIDEO_MEMORY_DECODER_TARGET</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>child_frames_ref</name></name> <operator>=</operator> <name>child_frames_ref</name></expr>;</expr_stmt>

<expr_stmt><expr><name>child_frames_ref</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>child_device_ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>child_frames_ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>qsv_init_surface</name><parameter_list>(<parameter><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>mfxFrameSurface1</name> <modifier>*</modifier></type><name>surf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>fourcc</name></decl>;</decl_stmt>

<expr_stmt><expr><name>desc</name> <operator>=</operator> <call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>sw_format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>desc</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>fourcc</name> <operator>=</operator> <call><name>qsv_fourcc_from_pix_fmt</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>sw_format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fourcc</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>surf</name><operator>-&gt;</operator><name>Info</name><operator>.</operator><name>BitDepthLuma</name></name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>depth</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>surf</name><operator>-&gt;</operator><name>Info</name><operator>.</operator><name>BitDepthChroma</name></name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>depth</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>surf</name><operator>-&gt;</operator><name>Info</name><operator>.</operator><name>Shift</name></name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>depth</name> <operator>&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_w</name></name> <operator>&amp;&amp;</operator> <name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_h</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>surf</name><operator>-&gt;</operator><name>Info</name><operator>.</operator><name>ChromaFormat</name></name> <operator>=</operator> <name>MFX_CHROMAFORMAT_YUV420</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_w</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>surf</name><operator>-&gt;</operator><name>Info</name><operator>.</operator><name>ChromaFormat</name></name> <operator>=</operator> <name>MFX_CHROMAFORMAT_YUV422</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>surf</name><operator>-&gt;</operator><name>Info</name><operator>.</operator><name>ChromaFormat</name></name> <operator>=</operator> <name>MFX_CHROMAFORMAT_YUV444</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>surf</name><operator>-&gt;</operator><name>Info</name><operator>.</operator><name>FourCC</name></name> <operator>=</operator> <name>fourcc</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>surf</name><operator>-&gt;</operator><name>Info</name><operator>.</operator><name>Width</name></name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>surf</name><operator>-&gt;</operator><name>Info</name><operator>.</operator><name>CropW</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>surf</name><operator>-&gt;</operator><name>Info</name><operator>.</operator><name>Height</name></name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>surf</name><operator>-&gt;</operator><name>Info</name><operator>.</operator><name>CropH</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>surf</name><operator>-&gt;</operator><name>Info</name><operator>.</operator><name>FrameRateExtN</name></name> <operator>=</operator> <literal type="number">25</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>surf</name><operator>-&gt;</operator><name>Info</name><operator>.</operator><name>FrameRateExtD</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>surf</name><operator>-&gt;</operator><name>Info</name><operator>.</operator><name>PicStruct</name></name> <operator>=</operator> <name>MFX_PICSTRUCT_PROGRESSIVE</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>qsv_init_pool</name><parameter_list>(<parameter><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>fourcc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>QSVFramesContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVQSVFramesContext</name> <modifier>*</modifier></type><name>frames_hwctx</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>initial_pool_size</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"QSV requires a fixed frame pool size\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>surfaces_internal</name></name> <operator>=</operator> <call><name>av_mallocz_array</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>initial_pool_size</name></name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>surfaces_internal</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>surfaces_internal</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>initial_pool_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>qsv_init_surface</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>surfaces_internal</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>frames_hwctx</name><operator>-&gt;</operator><name>frame_type</name></name> <operator>&amp;</operator> <name>MFX_MEMTYPE_OPAQUE_FRAME</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>qsv_init_child_ctx</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>pool_internal</name></name> <operator>=</operator> <call><name>av_buffer_pool_init2</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mfxFrameSurface1</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>qsv_pool_alloc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>pool_internal</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>frames_hwctx</name><operator>-&gt;</operator><name>surfaces</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>surfaces_internal</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frames_hwctx</name><operator>-&gt;</operator><name>nb_surfaces</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>initial_pool_size</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>mfxStatus</name></type> <name>frame_alloc</name><parameter_list>(<parameter><decl><type><name>mfxHDL</name></type> <name>pthis</name></decl></parameter>, <parameter><decl><type><name>mfxFrameAllocRequest</name> <modifier>*</modifier></type><name>req</name></decl></parameter>,

<parameter><decl><type><name>mfxFrameAllocResponse</name> <modifier>*</modifier></type><name>resp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name>pthis</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>QSVFramesContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVQSVFramesContext</name> <modifier>*</modifier></type><name>hwctx</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxFrameInfo</name> <modifier>*</modifier></type><name>i</name> <init>= <expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>Info</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxFrameInfo</name> <modifier>*</modifier></type><name>i1</name> <init>= <expr><operator>&amp;</operator><name><name>hwctx</name><operator>-&gt;</operator><name>surfaces</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>Info</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>req</name><operator>-&gt;</operator><name>Type</name></name> <operator>&amp;</operator> <name>MFX_MEMTYPE_VIDEO_MEMORY_PROCESSOR_TARGET</name><operator>)</operator> <operator>||</operator>

<operator>!</operator><operator>(</operator><name><name>req</name><operator>-&gt;</operator><name>Type</name></name> <operator>&amp;</operator> <operator>(</operator><name>MFX_MEMTYPE_FROM_VPPIN</name> <operator>|</operator> <name>MFX_MEMTYPE_FROM_VPPOUT</name><operator>)</operator><operator>)</operator> <operator>||</operator>

<operator>!</operator><operator>(</operator><name><name>req</name><operator>-&gt;</operator><name>Type</name></name> <operator>&amp;</operator> <name>MFX_MEMTYPE_EXTERNAL_FRAME</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>MFX_ERR_UNSUPPORTED</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>i</name><operator>-&gt;</operator><name>Width</name></name> <operator>&gt;</operator> <name><name>i1</name><operator>-&gt;</operator><name>Width</name></name> <operator>||</operator> <name><name>i</name><operator>-&gt;</operator><name>Height</name></name> <operator>&gt;</operator> <name><name>i1</name><operator>-&gt;</operator><name>Height</name></name> <operator>||</operator>

<name><name>i</name><operator>-&gt;</operator><name>FourCC</name></name> <operator>!=</operator> <name><name>i1</name><operator>-&gt;</operator><name>FourCC</name></name> <operator>||</operator> <name><name>i</name><operator>-&gt;</operator><name>ChromaFormat</name></name> <operator>!=</operator> <name><name>i1</name><operator>-&gt;</operator><name>ChromaFormat</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Mismatching surface properties in an "</literal>

<literal type="string">"allocation request: %dx%d %d %d vs %dx%d %d %d\n"</literal></expr></argument>,

<argument><expr><name><name>i</name><operator>-&gt;</operator><name>Width</name></name></expr></argument>, <argument><expr><name><name>i</name><operator>-&gt;</operator><name>Height</name></name></expr></argument>, <argument><expr><name><name>i</name><operator>-&gt;</operator><name>FourCC</name></name></expr></argument>, <argument><expr><name><name>i</name><operator>-&gt;</operator><name>ChromaFormat</name></name></expr></argument>,

<argument><expr><name><name>i1</name><operator>-&gt;</operator><name>Width</name></name></expr></argument>, <argument><expr><name><name>i1</name><operator>-&gt;</operator><name>Height</name></name></expr></argument>, <argument><expr><name><name>i1</name><operator>-&gt;</operator><name>FourCC</name></name></expr></argument>, <argument><expr><name><name>i1</name><operator>-&gt;</operator><name>ChromaFormat</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>MFX_ERR_UNSUPPORTED</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>resp</name><operator>-&gt;</operator><name>mids</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mem_ids</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>resp</name><operator>-&gt;</operator><name>NumFrameActual</name></name> <operator>=</operator> <name><name>hwctx</name><operator>-&gt;</operator><name>nb_surfaces</name></name></expr>;</expr_stmt>

<return>return <expr><name>MFX_ERR_NONE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>mfxStatus</name></type> <name>frame_free</name><parameter_list>(<parameter><decl><type><name>mfxHDL</name></type> <name>pthis</name></decl></parameter>, <parameter><decl><type><name>mfxFrameAllocResponse</name> <modifier>*</modifier></type><name>resp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>MFX_ERR_NONE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>mfxStatus</name></type> <name>frame_lock</name><parameter_list>(<parameter><decl><type><name>mfxHDL</name></type> <name>pthis</name></decl></parameter>, <parameter><decl><type><name>mfxMemId</name></type> <name>mid</name></decl></parameter>, <parameter><decl><type><name>mfxFrameData</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>MFX_ERR_UNSUPPORTED</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>mfxStatus</name></type> <name>frame_unlock</name><parameter_list>(<parameter><decl><type><name>mfxHDL</name></type> <name>pthis</name></decl></parameter>, <parameter><decl><type><name>mfxMemId</name></type> <name>mid</name></decl></parameter>, <parameter><decl><type><name>mfxFrameData</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>MFX_ERR_UNSUPPORTED</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>mfxStatus</name></type> <name>frame_get_hdl</name><parameter_list>(<parameter><decl><type><name>mfxHDL</name></type> <name>pthis</name></decl></parameter>, <parameter><decl><type><name>mfxMemId</name></type> <name>mid</name></decl></parameter>, <parameter><decl><type><name>mfxHDL</name> <modifier>*</modifier></type><name>hdl</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>hdl</name> <operator>=</operator> <name>mid</name></expr>;</expr_stmt>

<return>return <expr><name>MFX_ERR_NONE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>qsv_init_internal_session</name><parameter_list>(<parameter><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,

<parameter><decl><type><name>mfxSession</name> <modifier>*</modifier></type><name>session</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>upload</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>QSVFramesContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVQSVFramesContext</name> <modifier>*</modifier></type><name>frames_hwctx</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>QSVDeviceContext</name> <modifier>*</modifier></type><name>device_priv</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>device_ctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>opaque</name> <init>= <expr><operator>!</operator><operator>!</operator><operator>(</operator><name><name>frames_hwctx</name><operator>-&gt;</operator><name>frame_type</name></name> <operator>&amp;</operator> <name>MFX_MEMTYPE_OPAQUE_FRAME</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxFrameAllocator</name></type> <name>frame_allocator</name> <init>= <expr><block>{

<expr><operator>.</operator><name>pthis</name> <operator>=</operator> <name>ctx</name></expr>,

<expr><operator>.</operator><name>Alloc</name> <operator>=</operator> <name>frame_alloc</name></expr>,

<expr><operator>.</operator><name>Lock</name> <operator>=</operator> <name>frame_lock</name></expr>,

<expr><operator>.</operator><name>Unlock</name> <operator>=</operator> <name>frame_unlock</name></expr>,

<expr><operator>.</operator><name>GetHDL</name> <operator>=</operator> <name>frame_get_hdl</name></expr>,

<expr><operator>.</operator><name>Free</name> <operator>=</operator> <name>frame_free</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxVideoParam</name></type> <name>par</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxStatus</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>MFXInit</name><argument_list>(<argument><expr><name><name>device_priv</name><operator>-&gt;</operator><name>impl</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>device_priv</name><operator>-&gt;</operator><name>ver</name></name></expr></argument>, <argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>MFX_ERR_NONE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error initializing an internal session\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_UNKNOWN</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>device_priv</name><operator>-&gt;</operator><name>handle</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>MFXVideoCORE_SetHandle</name><argument_list>(<argument><expr><operator>*</operator><name>session</name></expr></argument>, <argument><expr><name><name>device_priv</name><operator>-&gt;</operator><name>handle_type</name></name></expr></argument>,

<argument><expr><name><name>device_priv</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>MFX_ERR_NONE</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_UNKNOWN</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>opaque</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>MFXVideoCORE_SetFrameAllocator</name><argument_list>(<argument><expr><operator>*</operator><name>session</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>frame_allocator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>MFX_ERR_NONE</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_UNKNOWN</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>par</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>par</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>opaque</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>par</name><operator>.</operator><name>ExtParam</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>ext_buffers</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par</name><operator>.</operator><name>NumExtParam</name></name> <operator>=</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>ext_buffers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par</name><operator>.</operator><name>IOPattern</name></name> <operator>=</operator> <ternary><condition><expr><name>upload</name></expr> ?</condition><then> <expr><name>MFX_IOPATTERN_OUT_OPAQUE_MEMORY</name></expr> </then><else>:

<expr><name>MFX_IOPATTERN_IN_OPAQUE_MEMORY</name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>par</name><operator>.</operator><name>IOPattern</name></name> <operator>=</operator> <ternary><condition><expr><name>upload</name></expr> ?</condition><then> <expr><name>MFX_IOPATTERN_OUT_VIDEO_MEMORY</name></expr> </then><else>:

<expr><name>MFX_IOPATTERN_IN_VIDEO_MEMORY</name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>par</name><operator>.</operator><name>IOPattern</name></name> <operator>|=</operator> <ternary><condition><expr><name>upload</name></expr> ?</condition><then> <expr><name>MFX_IOPATTERN_IN_SYSTEM_MEMORY</name></expr> </then><else>:

<expr><name>MFX_IOPATTERN_OUT_SYSTEM_MEMORY</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par</name><operator>.</operator><name>AsyncDepth</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par</name><operator>.</operator><name>vpp</name><operator>.</operator><name>In</name></name> <operator>=</operator> <name><name>frames_hwctx</name><operator>-&gt;</operator><name>surfaces</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>Info</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par</name><operator>.</operator><name>vpp</name><operator>.</operator><name>In</name><operator>.</operator><name>FrameRateExtN</name></name> <operator>=</operator> <literal type="number">25</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par</name><operator>.</operator><name>vpp</name><operator>.</operator><name>In</name><operator>.</operator><name>FrameRateExtD</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par</name><operator>.</operator><name>vpp</name><operator>.</operator><name>Out</name></name> <operator>=</operator> <name><name>par</name><operator>.</operator><name>vpp</name><operator>.</operator><name>In</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>MFXVideoVPP_Init</name><argument_list>(<argument><expr><operator>*</operator><name>session</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>par</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>MFX_ERR_NONE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"Error opening the internal VPP session."</literal>

<literal type="string">"Surface upload/download will not be possible\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MFXClose</name><argument_list>(<argument><expr><operator>*</operator><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>session</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>qsv_frames_init</name><parameter_list>(<parameter><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>QSVFramesContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVQSVFramesContext</name> <modifier>*</modifier></type><name>frames_hwctx</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>opaque</name> <init>= <expr><operator>!</operator><operator>!</operator><operator>(</operator><name><name>frames_hwctx</name><operator>-&gt;</operator><name>frame_type</name></name> <operator>&amp;</operator> <name>MFX_MEMTYPE_OPAQUE_FRAME</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>fourcc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>fourcc</name> <operator>=</operator> <call><name>qsv_fourcc_from_pix_fmt</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>sw_format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fourcc</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unsupported pixel format\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>pool</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>qsv_init_pool</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>fourcc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error creating an internal frame pool\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>opaque</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>surface_ptrs</name></name> <operator>=</operator> <call><name>av_mallocz_array</name><argument_list>(<argument><expr><name><name>frames_hwctx</name><operator>-&gt;</operator><name>nb_surfaces</name></name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>surface_ptrs</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>surface_ptrs</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>frames_hwctx</name><operator>-&gt;</operator><name>nb_surfaces</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>surface_ptrs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>frames_hwctx</name><operator>-&gt;</operator><name>surfaces</name></name> <operator>+</operator> <name>i</name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>opaque_alloc</name><operator>.</operator><name>In</name><operator>.</operator><name>Surfaces</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>surface_ptrs</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>opaque_alloc</name><operator>.</operator><name>In</name><operator>.</operator><name>NumSurface</name></name> <operator>=</operator> <name><name>frames_hwctx</name><operator>-&gt;</operator><name>nb_surfaces</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>opaque_alloc</name><operator>.</operator><name>In</name><operator>.</operator><name>Type</name></name> <operator>=</operator> <name><name>frames_hwctx</name><operator>-&gt;</operator><name>frame_type</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>opaque_alloc</name><operator>.</operator><name>Out</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>opaque_alloc</name><operator>.</operator><name>In</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>opaque_alloc</name><operator>.</operator><name>Header</name><operator>.</operator><name>BufferId</name></name> <operator>=</operator> <name>MFX_EXTBUFF_OPAQUE_SURFACE_ALLOCATION</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>opaque_alloc</name><operator>.</operator><name>Header</name><operator>.</operator><name>BufferSz</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>opaque_alloc</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ext_buffers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>mfxExtBuffer</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>opaque_alloc</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mem_ids</name></name> <operator>=</operator> <call><name>av_mallocz_array</name><argument_list>(<argument><expr><name><name>frames_hwctx</name><operator>-&gt;</operator><name>nb_surfaces</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>mem_ids</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>mem_ids</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>frames_hwctx</name><operator>-&gt;</operator><name>nb_surfaces</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mem_ids</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>frames_hwctx</name><operator>-&gt;</operator><name>surfaces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>Data</name><operator>.</operator><name>MemId</name></name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>session_download</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>session_upload</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>session_download_init</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>session_upload_init</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_PTHREADS</name></expr></cpp:if>

<expr_stmt><expr><call><name>pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>session_lock</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_cond_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>session_cond</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>qsv_get_buffer</name><parameter_list>(<parameter><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>av_buffer_pool_get</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>frame</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>data</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>AV_PIX_FMT_QSV</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>qsv_transfer_get_formats</name><parameter_list>(<parameter><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>AVHWFrameTransferDirection</name></name></type> <name>dir</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>formats</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name> <modifier>*</modifier></type><name>fmts</name></decl>;</decl_stmt>

<expr_stmt><expr><name>fmts</name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>fmts</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fmts</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>fmts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>sw_format</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmts</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>AV_PIX_FMT_NONE</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>formats</name> <operator>=</operator> <name>fmts</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>qsv_frames_derive_from</name><parameter_list>(<parameter><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>dst_ctx</name></decl></parameter>,

<parameter><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>src_ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVQSVFramesContext</name> <modifier>*</modifier></type><name>src_hwctx</name> <init>= <expr><name><name>src_ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>dst_ctx</name><operator>-&gt;</operator><name>device_ctx</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_VAAPI</name></expr></cpp:if>

<case>case <expr><name>AV_HWDEVICE_TYPE_VAAPI</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>AVVAAPIFramesContext</name> <modifier>*</modifier></type><name>dst_hwctx</name> <init>= <expr><name><name>dst_ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dst_hwctx</name><operator>-&gt;</operator><name>surface_ids</name></name> <operator>=</operator> <call><name>av_mallocz_array</name><argument_list>(<argument><expr><name><name>src_hwctx</name><operator>-&gt;</operator><name>nb_surfaces</name></name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>dst_hwctx</name><operator>-&gt;</operator><name>surface_ids</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dst_hwctx</name><operator>-&gt;</operator><name>surface_ids</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>src_hwctx</name><operator>-&gt;</operator><name>nb_surfaces</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst_hwctx</name><operator>-&gt;</operator><name>surface_ids</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator>

<operator>*</operator><operator>(</operator><name>VASurfaceID</name><operator>*</operator><operator>)</operator><name><name>src_hwctx</name><operator>-&gt;</operator><name>surfaces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>Data</name><operator>.</operator><name>MemId</name></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>dst_hwctx</name><operator>-&gt;</operator><name>nb_surfaces</name></name> <operator>=</operator> <name><name>src_hwctx</name><operator>-&gt;</operator><name>nb_surfaces</name></name></expr>;</expr_stmt>

</block_content>}</block>

<break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_DXVA2</name></expr></cpp:if>

<case>case <expr><name>AV_HWDEVICE_TYPE_DXVA2</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>AVDXVA2FramesContext</name> <modifier>*</modifier></type><name>dst_hwctx</name> <init>= <expr><name><name>dst_ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dst_hwctx</name><operator>-&gt;</operator><name>surfaces</name></name> <operator>=</operator> <call><name>av_mallocz_array</name><argument_list>(<argument><expr><name><name>src_hwctx</name><operator>-&gt;</operator><name>nb_surfaces</name></name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>dst_hwctx</name><operator>-&gt;</operator><name>surfaces</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dst_hwctx</name><operator>-&gt;</operator><name>surfaces</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>src_hwctx</name><operator>-&gt;</operator><name>nb_surfaces</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst_hwctx</name><operator>-&gt;</operator><name>surfaces</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator>

<operator>(</operator><name>IDirect3DSurface9</name><operator>*</operator><operator>)</operator><name><name>src_hwctx</name><operator>-&gt;</operator><name>surfaces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>Data</name><operator>.</operator><name>MemId</name></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>dst_hwctx</name><operator>-&gt;</operator><name>nb_surfaces</name></name> <operator>=</operator> <name><name>src_hwctx</name><operator>-&gt;</operator><name>nb_surfaces</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>src_hwctx</name><operator>-&gt;</operator><name>frame_type</name></name> <operator>==</operator> <name>MFX_MEMTYPE_VIDEO_MEMORY_DECODER_TARGET</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst_hwctx</name><operator>-&gt;</operator><name>surface_type</name></name> <operator>=</operator> <name>DXVA2_VideoDecoderRenderTarget</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst_hwctx</name><operator>-&gt;</operator><name>surface_type</name></name> <operator>=</operator> <name>DXVA2_VideoProcessorRenderTarget</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block>

<break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<default>default:</default>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>qsv_map_from</name><parameter_list>(<parameter><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,

<parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>QSVFramesContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxFrameSurface1</name> <modifier>*</modifier></type><name>surf</name> <init>= <expr><operator>(</operator><name>mfxFrameSurface1</name><operator>*</operator><operator>)</operator><name><name>src</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>child_frames_ctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>child_data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>dummy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>child_frames_ref</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>child_frames_ctx</name> <operator>=</operator> <operator>(</operator><name>AVHWFramesContext</name><operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>child_frames_ref</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>child_frames_ctx</name><operator>-&gt;</operator><name>device_ctx</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_VAAPI</name></expr></cpp:if>

<case>case <expr><name>AV_HWDEVICE_TYPE_VAAPI</name></expr>:</case>

<expr_stmt><expr><name>child_data</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name>intptr_t</name><operator>)</operator><operator>*</operator><operator>(</operator><name>VASurfaceID</name><operator>*</operator><operator>)</operator><name><name>surf</name><operator>-&gt;</operator><name>Data</name><operator>.</operator><name>MemId</name></name></expr>;</expr_stmt>

<break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_DXVA2</name></expr></cpp:if>

<case>case <expr><name>AV_HWDEVICE_TYPE_DXVA2</name></expr>:</case>

<expr_stmt><expr><name>child_data</name> <operator>=</operator> <name><name>surf</name><operator>-&gt;</operator><name>Data</name><operator>.</operator><name>MemId</name></name></expr>;</expr_stmt>

<break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<default>default:</default>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name><name>dst</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name><name>child_frames_ctx</name><operator>-&gt;</operator><name>format</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_hwframe_map_create</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>child_frames_ref</name></name></expr></argument>,

<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>child_data</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>desc</name> <operator>=</operator> <call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>desc</name> <operator>&amp;&amp;</operator> <name><name>desc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PIX_FMT_FLAG_HWACCEL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>dummy</name> <operator>=</operator> <call><name>av_frame_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dummy</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>dummy</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>av_buffer_ref</name><argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dummy</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name> <operator>=</operator> <call><name>av_buffer_ref</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>child_frames_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dummy</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>||</operator> <operator>!</operator><name><name>dummy</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>dummy</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name><name>child_frames_ctx</name><operator>-&gt;</operator><name>format</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dummy</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dummy</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dummy</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>child_data</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_hwframe_map</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dummy</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dummy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>qsv_transfer_data_child</name><parameter_list>(<parameter><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>QSVFramesContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>child_frames_ctx</name> <init>= <expr><operator>(</operator><name>AVHWFramesContext</name><operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>child_frames_ref</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>download</name> <init>= <expr><operator>!</operator><operator>!</operator><name><name>src</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxFrameSurface1</name> <modifier>*</modifier></type><name>surf</name> <init>= <expr><operator>(</operator><name>mfxFrameSurface1</name><operator>*</operator><operator>)</operator><operator>(</operator><ternary><condition><expr><name>download</name></expr> ?</condition><then> <expr><name><name>src</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr> </then><else>: <expr><name><name>dst</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>dummy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dummy</name> <operator>=</operator> <call><name>av_frame_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dummy</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>dummy</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name><name>child_frames_ctx</name><operator>-&gt;</operator><name>format</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dummy</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dummy</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dummy</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>download</name></expr> ?</condition><then> <expr><name><name>src</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> </then><else>: <expr><name><name>dst</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dummy</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>surf</name><operator>-&gt;</operator><name>Data</name><operator>.</operator><name>MemId</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dummy</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>child_frames_ref</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <ternary><condition><expr><name>download</name></expr> ?</condition><then> <expr><call><name>av_hwframe_transfer_data</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dummy</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> </then><else>:

<expr><call><name>av_hwframe_transfer_data</name><argument_list>(<argument><expr><name>dummy</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dummy</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dummy</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dummy</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dummy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>map_frame_to_surface</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><name>mfxFrameSurface1</name> <modifier>*</modifier></type><name>surface</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name><name>frame</name><operator>-&gt;</operator><name>format</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_PIX_FMT_NV12</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_P010</name></expr>:</case>

<expr_stmt><expr><name><name>surface</name><operator>-&gt;</operator><name>Data</name><operator>.</operator><name>Y</name></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>surface</name><operator>-&gt;</operator><name>Data</name><operator>.</operator><name>UV</name></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_YUV420P</name></expr>:</case>

<expr_stmt><expr><name><name>surface</name><operator>-&gt;</operator><name>Data</name><operator>.</operator><name>Y</name></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>surface</name><operator>-&gt;</operator><name>Data</name><operator>.</operator><name>U</name></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>surface</name><operator>-&gt;</operator><name>Data</name><operator>.</operator><name>V</name></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_BGRA</name></expr>:</case>

<expr_stmt><expr><name><name>surface</name><operator>-&gt;</operator><name>Data</name><operator>.</operator><name>B</name></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>surface</name><operator>-&gt;</operator><name>Data</name><operator>.</operator><name>G</name></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>surface</name><operator>-&gt;</operator><name>Data</name><operator>.</operator><name>R</name></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>surface</name><operator>-&gt;</operator><name>Data</name><operator>.</operator><name>A</name></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><name>MFX_ERR_UNSUPPORTED</name></expr>;</return>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>surface</name><operator>-&gt;</operator><name>Data</name><operator>.</operator><name>Pitch</name></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>surface</name><operator>-&gt;</operator><name>Data</name><operator>.</operator><name>TimeStamp</name></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>pts</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>qsv_transfer_data_from</name><parameter_list>(<parameter><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>QSVFramesContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxFrameSurface1</name></type> <name>out</name> <init>= <expr><block>{<expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxFrameSurface1</name> <modifier>*</modifier></type><name>in</name> <init>= <expr><operator>(</operator><name>mfxFrameSurface1</name><operator>*</operator><operator>)</operator><name><name>src</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxSyncPoint</name></type> <name>sync</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxStatus</name></type> <name>err</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>session_download_init</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>session_download</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>ret</name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_PTHREADS</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><call><name>pthread_mutex_trylock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>session_lock</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>session_download_init</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>qsv_init_internal_session</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>session_download</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>session_download</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>session_download_init</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_PTHREADS</name></expr></cpp:if>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>session_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_cond_signal</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>session_cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>session_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>session_download_init</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>session_download</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pthread_cond_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>session_cond</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>session_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>session_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>session_download</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>child_frames_ref</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>qsv_transfer_data_child</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Surface download not possible\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>out</name><operator>.</operator><name>Info</name></name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>Info</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>map_frame_to_surface</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>MFXVideoVPP_RunFrameVPPAsync</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>session_download</name></name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>out</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sync</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <name>MFX_WRN_DEVICE_BUSY</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_usleep</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block> while <condition>(<expr><name>err</name> <operator>==</operator> <name>MFX_WRN_DEVICE_BUSY</name></expr>)</condition>;</do>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>!</operator><name>sync</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error downloading the surface\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_UNKNOWN</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>MFXVideoCORE_SyncOperation</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>session_download</name></name></expr></argument>, <argument><expr><name>sync</name></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name>err</name> <operator>==</operator> <name>MFX_WRN_IN_EXECUTION</name></expr>)</condition>;</do>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error synchronizing the operation: %d\n"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_UNKNOWN</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>qsv_transfer_data_to</name><parameter_list>(<parameter><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>QSVFramesContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxFrameSurface1</name></type> <name>in</name> <init>= <expr><block>{<expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxFrameSurface1</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><operator>(</operator><name>mfxFrameSurface1</name><operator>*</operator><operator>)</operator><name><name>dst</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxSyncPoint</name></type> <name>sync</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxStatus</name></type> <name>err</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name></type> <name>tmp_frame</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>src_frame</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>realigned</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>session_upload_init</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>session_upload</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>ret</name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_PTHREADS</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><call><name>pthread_mutex_trylock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>session_lock</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>session_upload_init</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>qsv_init_internal_session</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>session_upload</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>session_upload</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>session_upload_init</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_PTHREADS</name></expr></cpp:if>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>session_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_cond_signal</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>session_cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>session_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>session_upload_init</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>session_upload</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pthread_cond_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>session_cond</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>session_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>session_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>src</name><operator>-&gt;</operator><name>height</name></name> <operator>&amp;</operator> <literal type="number">15</literal> <operator>||</operator> <name><name>src</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">15</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>realigned</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp_frame</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmp_frame</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmp_frame</name><operator>.</operator><name>format</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>format</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmp_frame</name><operator>.</operator><name>width</name></name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmp_frame</name><operator>.</operator><name>height</name></name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_frame_get_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp_frame</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_frame_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp_frame</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_frame_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>src_frame</name> <operator>=</operator> <ternary><condition><expr><name>realigned</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name>tmp_frame</name></expr> </then><else>: <expr><name>src</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>session_upload</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>child_frames_ref</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>qsv_transfer_data_child</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src_frame</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Surface upload not possible\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>in</name><operator>.</operator><name>Info</name></name> <operator>=</operator> <name><name>out</name><operator>-&gt;</operator><name>Info</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>map_frame_to_surface</name><argument_list>(<argument><expr><name>src_frame</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>MFXVideoVPP_RunFrameVPPAsync</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>session_upload</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>in</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sync</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <name>MFX_WRN_DEVICE_BUSY</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_usleep</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block> while <condition>(<expr><name>err</name> <operator>==</operator> <name>MFX_WRN_DEVICE_BUSY</name></expr>)</condition>;</do>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>!</operator><name>sync</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error uploading the surface\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_UNKNOWN</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>MFXVideoCORE_SyncOperation</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>session_upload</name></name></expr></argument>, <argument><expr><name>sync</name></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name>err</name> <operator>==</operator> <name>MFX_WRN_IN_EXECUTION</name></expr>)</condition>;</do>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error synchronizing the operation\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_UNKNOWN</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>realigned</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_frame_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>qsv_frames_derive_to</name><parameter_list>(<parameter><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>dst_ctx</name></decl></parameter>,

<parameter><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>src_ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>QSVFramesContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>dst_ctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVQSVFramesContext</name> <modifier>*</modifier></type><name>dst_hwctx</name> <init>= <expr><name><name>dst_ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>src_ctx</name><operator>-&gt;</operator><name>device_ctx</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_VAAPI</name></expr></cpp:if>

<case>case <expr><name>AV_HWDEVICE_TYPE_VAAPI</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>AVVAAPIFramesContext</name> <modifier>*</modifier></type><name>src_hwctx</name> <init>= <expr><name><name>src_ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>surfaces_internal</name></name> <operator>=</operator> <call><name>av_mallocz_array</name><argument_list>(<argument><expr><name><name>src_hwctx</name><operator>-&gt;</operator><name>nb_surfaces</name></name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>surfaces_internal</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>surfaces_internal</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>src_hwctx</name><operator>-&gt;</operator><name>nb_surfaces</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>qsv_init_surface</name><argument_list>(<argument><expr><name>dst_ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>surfaces_internal</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>surfaces_internal</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>Data</name><operator>.</operator><name>MemId</name></name> <operator>=</operator> <name><name>src_hwctx</name><operator>-&gt;</operator><name>surface_ids</name></name> <operator>+</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>dst_hwctx</name><operator>-&gt;</operator><name>nb_surfaces</name></name> <operator>=</operator> <name><name>src_hwctx</name><operator>-&gt;</operator><name>nb_surfaces</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst_hwctx</name><operator>-&gt;</operator><name>frame_type</name></name> <operator>=</operator> <name>MFX_MEMTYPE_VIDEO_MEMORY_DECODER_TARGET</name></expr>;</expr_stmt>

</block_content>}</block>

<break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_DXVA2</name></expr></cpp:if>

<case>case <expr><name>AV_HWDEVICE_TYPE_DXVA2</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>AVDXVA2FramesContext</name> <modifier>*</modifier></type><name>src_hwctx</name> <init>= <expr><name><name>src_ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>surfaces_internal</name></name> <operator>=</operator> <call><name>av_mallocz_array</name><argument_list>(<argument><expr><name><name>src_hwctx</name><operator>-&gt;</operator><name>nb_surfaces</name></name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>surfaces_internal</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>surfaces_internal</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>src_hwctx</name><operator>-&gt;</operator><name>nb_surfaces</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>qsv_init_surface</name><argument_list>(<argument><expr><name>dst_ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>surfaces_internal</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>surfaces_internal</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>Data</name><operator>.</operator><name>MemId</name></name> <operator>=</operator> <operator>(</operator><name>mfxMemId</name><operator>)</operator><name><name>src_hwctx</name><operator>-&gt;</operator><name>surfaces</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>dst_hwctx</name><operator>-&gt;</operator><name>nb_surfaces</name></name> <operator>=</operator> <name><name>src_hwctx</name><operator>-&gt;</operator><name>nb_surfaces</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>src_hwctx</name><operator>-&gt;</operator><name>surface_type</name></name> <operator>==</operator> <name>DXVA2_VideoProcessorRenderTarget</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst_hwctx</name><operator>-&gt;</operator><name>frame_type</name></name> <operator>=</operator> <name>MFX_MEMTYPE_VIDEO_MEMORY_PROCESSOR_TARGET</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst_hwctx</name><operator>-&gt;</operator><name>frame_type</name></name> <operator>=</operator> <name>MFX_MEMTYPE_VIDEO_MEMORY_DECODER_TARGET</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block>

<break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<default>default:</default>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>dst_hwctx</name><operator>-&gt;</operator><name>surfaces</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>surfaces_internal</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>qsv_map_to</name><parameter_list>(<parameter><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>dst_ctx</name></decl></parameter>,

<parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVQSVFramesContext</name> <modifier>*</modifier></type><name>hwctx</name> <init>= <expr><name><name>dst_ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>err</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>hwctx</name><operator>-&gt;</operator><name>nb_surfaces</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_VAAPI</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><name>VASurfaceID</name><operator>*</operator><operator>)</operator><name><name>hwctx</name><operator>-&gt;</operator><name>surfaces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>Data</name><operator>.</operator><name>MemId</name></name> <operator>==</operator>

<operator>(</operator><name>VASurfaceID</name><operator>)</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name><name>src</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_DXVA2</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>IDirect3DSurface9</name><operator>*</operator><operator>)</operator><name><name>hwctx</name><operator>-&gt;</operator><name>surfaces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>Data</name><operator>.</operator><name>MemId</name></name> <operator>==</operator>

<operator>(</operator><name>IDirect3DSurface9</name><operator>*</operator><operator>)</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name><name>src</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name><name>hwctx</name><operator>-&gt;</operator><name>nb_surfaces</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>dst_ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Trying to map from a surface which "</literal>

<literal type="string">"is not in the mapped frames context.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_hwframe_map_create</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name></expr></argument>,

<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>hwctx</name><operator>-&gt;</operator><name>surfaces</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>qsv_frames_get_constraints</name><parameter_list>(<parameter><decl><type><name>AVHWDeviceContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>hwconfig</name></decl></parameter>,

<parameter><decl><type><name>AVHWFramesConstraints</name> <modifier>*</modifier></type><name>constraints</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>constraints</name><operator>-&gt;</operator><name>valid_sw_formats</name></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>supported_pixel_formats</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>constraints</name><operator>-&gt;</operator><name>valid_sw_formats</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>constraints</name><operator>-&gt;</operator><name>valid_sw_formats</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>supported_pixel_formats</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>constraints</name><operator>-&gt;</operator><name>valid_sw_formats</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>supported_pixel_formats</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pix_fmt</name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>constraints</name><operator>-&gt;</operator><name>valid_sw_formats</name><index>[<expr><call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>supported_pixel_formats</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <name>AV_PIX_FMT_NONE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>constraints</name><operator>-&gt;</operator><name>valid_hw_formats</name></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>constraints</name><operator>-&gt;</operator><name>valid_hw_formats</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>constraints</name><operator>-&gt;</operator><name>valid_hw_formats</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>constraints</name><operator>-&gt;</operator><name>valid_hw_formats</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>AV_PIX_FMT_QSV</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>constraints</name><operator>-&gt;</operator><name>valid_hw_formats</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>AV_PIX_FMT_NONE</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>qsv_device_free</name><parameter_list>(<parameter><decl><type><name>AVHWDeviceContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVQSVDeviceContext</name> <modifier>*</modifier></type><name>hwctx</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>QSVDevicePriv</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>user_opaque</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hwctx</name><operator>-&gt;</operator><name>session</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MFXClose</name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>session</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>child_device_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>priv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>mfxIMPL</name></type> <name>choose_implementation</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>device</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxIMPL</name></type> <name>impl</name></decl>;</decl_stmt>

}</block> <decl><name><name>impl_map</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"auto"</literal></expr>, <expr><name>MFX_IMPL_AUTO</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"sw"</literal></expr>, <expr><name>MFX_IMPL_SOFTWARE</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"hw"</literal></expr>, <expr><name>MFX_IMPL_HARDWARE</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"auto_any"</literal></expr>, <expr><name>MFX_IMPL_AUTO_ANY</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"hw_any"</literal></expr>, <expr><name>MFX_IMPL_HARDWARE_ANY</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"hw2"</literal></expr>, <expr><name>MFX_IMPL_HARDWARE2</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"hw3"</literal></expr>, <expr><name>MFX_IMPL_HARDWARE3</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"hw4"</literal></expr>, <expr><name>MFX_IMPL_HARDWARE4</name></expr> }</block></expr>,

}</block></expr></init></decl>;</struct>

<decl_stmt><decl><type><name>mfxIMPL</name></type> <name>impl</name> <init>= <expr><name>MFX_IMPL_AUTO_ANY</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>device</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>impl_map</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>device</name></expr></argument>, <argument><expr><name><name>impl_map</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>impl</name> <operator>=</operator> <name><name>impl_map</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>impl</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>impl_map</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>impl</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>device</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>impl</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>qsv_device_derive_from_child</name><parameter_list>(<parameter><decl><type><name>AVHWDeviceContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,

<parameter><decl><type><name>mfxIMPL</name></type> <name>implementation</name></decl></parameter>,

<parameter><decl><type><name>AVHWDeviceContext</name> <modifier>*</modifier></type><name>child_device_ctx</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVQSVDeviceContext</name> <modifier>*</modifier></type><name>hwctx</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxVersion</name></type> <name>ver</name> <init>= <expr><block>{ <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxHDL</name></type> <name>handle</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxHandleType</name></type> <name>handle_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxStatus</name></type> <name>err</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>child_device_ctx</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_VAAPI</name></expr></cpp:if>

<case>case <expr><name>AV_HWDEVICE_TYPE_VAAPI</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>AVVAAPIDeviceContext</name> <modifier>*</modifier></type><name>child_device_hwctx</name> <init>= <expr><name><name>child_device_ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>handle_type</name> <operator>=</operator> <name>MFX_HANDLE_VA_DISPLAY</name></expr>;</expr_stmt>

<expr_stmt><expr><name>handle</name> <operator>=</operator> <operator>(</operator><name>mfxHDL</name><operator>)</operator><name><name>child_device_hwctx</name><operator>-&gt;</operator><name>display</name></name></expr>;</expr_stmt>

</block_content>}</block>

<break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_DXVA2</name></expr></cpp:if>

<case>case <expr><name>AV_HWDEVICE_TYPE_DXVA2</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>AVDXVA2DeviceContext</name> <modifier>*</modifier></type><name>child_device_hwctx</name> <init>= <expr><name><name>child_device_ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>handle_type</name> <operator>=</operator> <name>MFX_HANDLE_D3D9_DEVICE_MANAGER</name></expr>;</expr_stmt>

<expr_stmt><expr><name>handle</name> <operator>=</operator> <operator>(</operator><name>mfxHDL</name><operator>)</operator><name><name>child_device_hwctx</name><operator>-&gt;</operator><name>devmgr</name></name></expr>;</expr_stmt>

</block_content>}</block>

<break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<default>default:</default>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></switch>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>MFXInit</name><argument_list>(<argument><expr><name>implementation</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ver</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>hwctx</name><operator>-&gt;</operator><name>session</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>MFX_ERR_NONE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error initializing an MFX session: "</literal>

<literal type="string">"%d.\n"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_UNKNOWN</name></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>MFXQueryVersion</name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>session</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>MFX_ERR_NONE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error querying an MFX session: %d.\n"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_UNKNOWN</name></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>,

<argument><expr><literal type="string">"Initialize MFX session: API version is %d.%d, implementation version is %d.%d\n"</literal></expr></argument>,

<argument><expr><name>MFX_VERSION_MAJOR</name></expr></argument>, <argument><expr><name>MFX_VERSION_MINOR</name></expr></argument>, <argument><expr><name><name>ver</name><operator>.</operator><name>Major</name></name></expr></argument>, <argument><expr><name><name>ver</name><operator>.</operator><name>Minor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MFXClose</name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>session</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>MFXInit</name><argument_list>(<argument><expr><name>implementation</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ver</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>hwctx</name><operator>-&gt;</operator><name>session</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>MFX_ERR_NONE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Error initializing an MFX session: %d.\n"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_UNKNOWN</name></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>MFXVideoCORE_SetHandle</name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>session</name></name></expr></argument>, <argument><expr><name>handle_type</name></expr></argument>, <argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>MFX_ERR_NONE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error setting child device handle: "</literal>

<literal type="string">"%d\n"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_UNKNOWN</name></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>fail</name>:</label>

<if_stmt><if>if <condition>(<expr><name><name>hwctx</name><operator>-&gt;</operator><name>session</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MFXClose</name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>session</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>qsv_device_derive</name><parameter_list>(<parameter><decl><type><name>AVHWDeviceContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,

<parameter><decl><type><name>AVHWDeviceContext</name> <modifier>*</modifier></type><name>child_device_ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>qsv_device_derive_from_child</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>MFX_IMPL_HARDWARE_ANY</name></expr></argument>,

<argument><expr><name>child_device_ctx</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>qsv_device_create</name><parameter_list>(<parameter><decl><type><name>AVHWDeviceContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>device</name></decl></parameter>,

<parameter><decl><type><name>AVDictionary</name> <modifier>*</modifier></type><name>opts</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>QSVDevicePriv</name> <modifier>*</modifier></type><name>priv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>AVHWDeviceType</name></name></type> <name>child_device_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVHWDeviceContext</name> <modifier>*</modifier></type><name>child_device</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVDictionary</name> <modifier>*</modifier></type><name>child_device_opts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVDictionaryEntry</name> <modifier>*</modifier></type><name>e</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxIMPL</name></type> <name>impl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>priv</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>priv</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>priv</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>user_opaque</name></name> <operator>=</operator> <name>priv</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>free</name></name> <operator>=</operator> <name>qsv_device_free</name></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>av_dict_get</name><argument_list>(<argument><expr><name>opts</name></expr></argument>, <argument><expr><literal type="string">"child_device"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>child_device_opts</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>CONFIG_VAAPI</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>child_device_type</name> <operator>=</operator> <name>AV_HWDEVICE_TYPE_VAAPI</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>child_device_opts</name></expr></argument>, <argument><expr><literal type="string">"kernel_driver"</literal></expr></argument>, <argument><expr><literal type="string">"i915"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>child_device_opts</name></expr></argument>, <argument><expr><literal type="string">"driver"</literal></expr></argument>, <argument><expr><literal type="string">"iHD"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>CONFIG_DXVA2</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>child_device_type</name> <operator>=</operator> <name>AV_HWDEVICE_TYPE_DXVA2</name></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"No supported child device type is enabled\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_hwdevice_ctx_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>child_device_ctx</name></name></expr></argument>, <argument><expr><name>child_device_type</name></expr></argument>,

<argument><expr><ternary><condition><expr><name>e</name></expr> ?</condition><then> <expr><name><name>e</name><operator>-&gt;</operator><name>value</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>, <argument><expr><name>child_device_opts</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_dict_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>child_device_opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>child_device</name> <operator>=</operator> <operator>(</operator><name>AVHWDeviceContext</name><operator>*</operator><operator>)</operator><name><name>priv</name><operator>-&gt;</operator><name>child_device_ctx</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>impl</name> <operator>=</operator> <call><name>choose_implementation</name><argument_list>(<argument><expr><name>device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>qsv_device_derive_from_child</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>impl</name></expr></argument>, <argument><expr><name>child_device</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>HWContextType</name></type> <name>ff_hwcontext_type_qsv</name> <init>= <expr><block>{

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AV_HWDEVICE_TYPE_QSV</name></expr>,

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"QSV"</literal></expr>,

<expr><operator>.</operator><name>device_hwctx_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>AVQSVDeviceContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>device_priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>QSVDeviceContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>frames_hwctx_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>AVQSVFramesContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>frames_priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>QSVFramesContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>device_create</name> <operator>=</operator> <name>qsv_device_create</name></expr>,

<expr><operator>.</operator><name>device_derive</name> <operator>=</operator> <name>qsv_device_derive</name></expr>,

<expr><operator>.</operator><name>device_init</name> <operator>=</operator> <name>qsv_device_init</name></expr>,

<expr><operator>.</operator><name>frames_get_constraints</name> <operator>=</operator> <name>qsv_frames_get_constraints</name></expr>,

<expr><operator>.</operator><name>frames_init</name> <operator>=</operator> <name>qsv_frames_init</name></expr>,

<expr><operator>.</operator><name>frames_uninit</name> <operator>=</operator> <name>qsv_frames_uninit</name></expr>,

<expr><operator>.</operator><name>frames_get_buffer</name> <operator>=</operator> <name>qsv_get_buffer</name></expr>,

<expr><operator>.</operator><name>transfer_get_formats</name> <operator>=</operator> <name>qsv_transfer_get_formats</name></expr>,

<expr><operator>.</operator><name>transfer_data_to</name> <operator>=</operator> <name>qsv_transfer_data_to</name></expr>,

<expr><operator>.</operator><name>transfer_data_from</name> <operator>=</operator> <name>qsv_transfer_data_from</name></expr>,

<expr><operator>.</operator><name>map_to</name> <operator>=</operator> <name>qsv_map_to</name></expr>,

<expr><operator>.</operator><name>map_from</name> <operator>=</operator> <name>qsv_map_from</name></expr>,

<expr><operator>.</operator><name>frames_derive_to</name> <operator>=</operator> <name>qsv_frames_derive_to</name></expr>,

<expr><operator>.</operator><name>frames_derive_from</name> <operator>=</operator> <name>qsv_frames_derive_from</name></expr>,

<expr><operator>.</operator><name>pix_fmts</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> enum <name><name>AVPixelFormat</name><index>[]</index></name><operator>)</operator><block>{ <expr><name>AV_PIX_FMT_QSV</name></expr>, <expr><name>AV_PIX_FMT_NONE</name></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
