<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavutil\eval.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avutil.h"</cpp:file></cpp:include>

<typedef>typedef <type><name><name>struct</name> <name>AVExpr</name></name></type> <name>AVExpr</name>;</typedef>

<decl_stmt><decl><type><name>int</name></type> <name>av_expr_parse_and_eval</name><argument_list>(<argument><expr><name>double</name> <operator>*</operator><name>res</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>s</name></expr></argument>,

<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator> <specifier>const</specifier> <operator>*</operator><name>const_names</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>double</name> <operator>*</operator><name>const_values</name></expr></argument>,

<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator> <specifier>const</specifier> <operator>*</operator><name>func1_names</name></expr></argument>, <argument><expr><call><call><name>double</name> <argument_list>(<argument><expr><operator>*</operator> <specifier>const</specifier> <operator>*</operator><name>funcs1</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>double</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator> <specifier>const</specifier> <operator>*</operator><name>func2_names</name></expr></argument>, <argument><expr><call><call><name>double</name> <argument_list>(<argument><expr><operator>*</operator> <specifier>const</specifier> <operator>*</operator><name>funcs2</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>double</name></expr></argument>, <argument><expr><name>double</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>void</name> <operator>*</operator><name>opaque</name></expr></argument>, <argument><expr><name>int</name> <name>log_offset</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><name>log_ctx</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>av_expr_parse</name><argument_list>(<argument><expr><name>AVExpr</name> <operator>*</operator><operator>*</operator><name>expr</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>s</name></expr></argument>,

<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator> <specifier>const</specifier> <operator>*</operator><name>const_names</name></expr></argument>,

<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator> <specifier>const</specifier> <operator>*</operator><name>func1_names</name></expr></argument>, <argument><expr><call><call><name>double</name> <argument_list>(<argument><expr><operator>*</operator> <specifier>const</specifier> <operator>*</operator><name>funcs1</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>double</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator> <specifier>const</specifier> <operator>*</operator><name>func2_names</name></expr></argument>, <argument><expr><call><call><name>double</name> <argument_list>(<argument><expr><operator>*</operator> <specifier>const</specifier> <operator>*</operator><name>funcs2</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>double</name></expr></argument>, <argument><expr><name>double</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>int</name> <name>log_offset</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><name>log_ctx</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>double</name></type> <name>av_expr_eval</name><parameter_list>(<parameter><decl><type><name>AVExpr</name> <modifier>*</modifier></type><name>e</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>double</name> <modifier>*</modifier></type><name>const_values</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>av_expr_count_vars</name><parameter_list>(<parameter><decl><type><name>AVExpr</name> <modifier>*</modifier></type><name>e</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>counter</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>av_expr_count_func</name><parameter_list>(<parameter><decl><type><name>AVExpr</name> <modifier>*</modifier></type><name>e</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>counter</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>arg</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>av_expr_free</name><parameter_list>(<parameter><decl><type><name>AVExpr</name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>double</name></type> <name>av_strtod</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>numstr</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>tail</name></decl></parameter>)</parameter_list>;</function_decl>

</unit>
