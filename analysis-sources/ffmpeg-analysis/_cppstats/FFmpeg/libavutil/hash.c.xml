<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavutil\hash.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hash.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"adler32.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"crc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"md5.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"murmur3.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ripemd.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sha.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sha512.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avstring.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base64.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"error.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"intreadwrite.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mem.h"</cpp:file></cpp:include>

<enum>enum <name>hashtype</name> <block>{

<decl><name>MD5</name></decl>,

<decl><name>MURMUR3</name></decl>,

<decl><name>RIPEMD128</name></decl>,

<decl><name>RIPEMD160</name></decl>,

<decl><name>RIPEMD256</name></decl>,

<decl><name>RIPEMD320</name></decl>,

<decl><name>SHA160</name></decl>,

<decl><name>SHA224</name></decl>,

<decl><name>SHA256</name></decl>,

<decl><name>SHA512_224</name></decl>,

<decl><name>SHA512_256</name></decl>,

<decl><name>SHA384</name></decl>,

<decl><name>SHA512</name></decl>,

<decl><name>CRC32</name></decl>,

<decl><name>ADLER32</name></decl>,

<decl><name>NUM_HASHES</name></decl>

}</block>;</enum>

<typedef>typedef <type><struct>struct <name>AVHashContext</name> <block>{

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>hashtype</name></name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVCRC</name> <modifier>*</modifier></type><name>crctab</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>crc</name></decl>;</decl_stmt>

}</block></struct></type> <name>AVHashContext</name>;</typedef>

<struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>

}</block> <decl><name><name>hashdesc</name><index>[]</index></name> <init>= <expr><block>{

<expr><index>[<expr><name>MD5</name></expr>]</index> <operator>=</operator> <block>{<expr><literal type="string">"MD5"</literal></expr>, <expr><literal type="number">16</literal></expr>}</block></expr>,

<expr><index>[<expr><name>MURMUR3</name></expr>]</index> <operator>=</operator> <block>{<expr><literal type="string">"murmur3"</literal></expr>, <expr><literal type="number">16</literal></expr>}</block></expr>,

<expr><index>[<expr><name>RIPEMD128</name></expr>]</index> <operator>=</operator> <block>{<expr><literal type="string">"RIPEMD128"</literal></expr>, <expr><literal type="number">16</literal></expr>}</block></expr>,

<expr><index>[<expr><name>RIPEMD160</name></expr>]</index> <operator>=</operator> <block>{<expr><literal type="string">"RIPEMD160"</literal></expr>, <expr><literal type="number">20</literal></expr>}</block></expr>,

<expr><index>[<expr><name>RIPEMD256</name></expr>]</index> <operator>=</operator> <block>{<expr><literal type="string">"RIPEMD256"</literal></expr>, <expr><literal type="number">32</literal></expr>}</block></expr>,

<expr><index>[<expr><name>RIPEMD320</name></expr>]</index> <operator>=</operator> <block>{<expr><literal type="string">"RIPEMD320"</literal></expr>, <expr><literal type="number">40</literal></expr>}</block></expr>,

<expr><index>[<expr><name>SHA160</name></expr>]</index> <operator>=</operator> <block>{<expr><literal type="string">"SHA160"</literal></expr>, <expr><literal type="number">20</literal></expr>}</block></expr>,

<expr><index>[<expr><name>SHA224</name></expr>]</index> <operator>=</operator> <block>{<expr><literal type="string">"SHA224"</literal></expr>, <expr><literal type="number">28</literal></expr>}</block></expr>,

<expr><index>[<expr><name>SHA256</name></expr>]</index> <operator>=</operator> <block>{<expr><literal type="string">"SHA256"</literal></expr>, <expr><literal type="number">32</literal></expr>}</block></expr>,

<expr><index>[<expr><name>SHA512_224</name></expr>]</index> <operator>=</operator> <block>{<expr><literal type="string">"SHA512/224"</literal></expr>, <expr><literal type="number">28</literal></expr>}</block></expr>,

<expr><index>[<expr><name>SHA512_256</name></expr>]</index> <operator>=</operator> <block>{<expr><literal type="string">"SHA512/256"</literal></expr>, <expr><literal type="number">32</literal></expr>}</block></expr>,

<expr><index>[<expr><name>SHA384</name></expr>]</index> <operator>=</operator> <block>{<expr><literal type="string">"SHA384"</literal></expr>, <expr><literal type="number">48</literal></expr>}</block></expr>,

<expr><index>[<expr><name>SHA512</name></expr>]</index> <operator>=</operator> <block>{<expr><literal type="string">"SHA512"</literal></expr>, <expr><literal type="number">64</literal></expr>}</block></expr>,

<expr><index>[<expr><name>CRC32</name></expr>]</index> <operator>=</operator> <block>{<expr><literal type="string">"CRC32"</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>,

<expr><index>[<expr><name>ADLER32</name></expr>]</index> <operator>=</operator> <block>{<expr><literal type="string">"adler32"</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>,

}</block></expr></init></decl>;</struct>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>av_hash_names</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>i</name> <operator>&gt;=</operator> <name>NUM_HASHES</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name><name>hashdesc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>av_hash_get_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVHashContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>hashdesc</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>type</name></name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>av_hash_get_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVHashContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>hashdesc</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>type</name></name></expr>]</index></name><operator>.</operator><name>size</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>av_hash_alloc</name><parameter_list>(<parameter><decl><type><name>AVHashContext</name> <modifier>*</modifier><modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVHashContext</name> <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>ctx</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NUM_HASHES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>av_strcasecmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>hashdesc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name>NUM_HASHES</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>res</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>res</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>i</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>MD5</name></expr>:</case> <expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>ctx</name></name> <operator>=</operator> <call><name>av_md5_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>MURMUR3</name></expr>:</case> <expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>ctx</name></name> <operator>=</operator> <call><name>av_murmur3_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>RIPEMD128</name></expr>:</case>

<case>case <expr><name>RIPEMD160</name></expr>:</case>

<case>case <expr><name>RIPEMD256</name></expr>:</case>

<case>case <expr><name>RIPEMD320</name></expr>:</case> <expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>ctx</name></name> <operator>=</operator> <call><name>av_ripemd_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>SHA160</name></expr>:</case>

<case>case <expr><name>SHA224</name></expr>:</case>

<case>case <expr><name>SHA256</name></expr>:</case> <expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>ctx</name></name> <operator>=</operator> <call><name>av_sha_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>SHA512_224</name></expr>:</case>

<case>case <expr><name>SHA512_256</name></expr>:</case>

<case>case <expr><name>SHA384</name></expr>:</case>

<case>case <expr><name>SHA512</name></expr>:</case> <expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>ctx</name></name> <operator>=</operator> <call><name>av_sha512_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>CRC32</name></expr>:</case> <expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>crctab</name></name> <operator>=</operator> <call><name>av_crc_get_table</name><argument_list>(<argument><expr><name>AV_CRC_32_IEEE_LE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ADLER32</name></expr>:</case> <break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <name>ADLER32</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>!=</operator> <name>CRC32</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>res</name><operator>-&gt;</operator><name>ctx</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>ctx</name> <operator>=</operator> <name>res</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>av_hash_init</name><parameter_list>(<parameter><decl><type><name>AVHashContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>MD5</name></expr>:</case> <expr_stmt><expr><call><name>av_md5_init</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>MURMUR3</name></expr>:</case> <expr_stmt><expr><call><name>av_murmur3_init</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>RIPEMD128</name></expr>:</case> <expr_stmt><expr><call><name>av_ripemd_init</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>RIPEMD160</name></expr>:</case> <expr_stmt><expr><call><name>av_ripemd_init</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><literal type="number">160</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>RIPEMD256</name></expr>:</case> <expr_stmt><expr><call><name>av_ripemd_init</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>RIPEMD320</name></expr>:</case> <expr_stmt><expr><call><name>av_ripemd_init</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><literal type="number">320</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>SHA160</name></expr>:</case> <expr_stmt><expr><call><name>av_sha_init</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><literal type="number">160</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>SHA224</name></expr>:</case> <expr_stmt><expr><call><name>av_sha_init</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><literal type="number">224</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>SHA256</name></expr>:</case> <expr_stmt><expr><call><name>av_sha_init</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>SHA512_224</name></expr>:</case> <expr_stmt><expr><call><name>av_sha512_init</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><literal type="number">224</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>SHA512_256</name></expr>:</case> <expr_stmt><expr><call><name>av_sha512_init</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>SHA384</name></expr>:</case> <expr_stmt><expr><call><name>av_sha512_init</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><literal type="number">384</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>SHA512</name></expr>:</case> <expr_stmt><expr><call><name>av_sha512_init</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>CRC32</name></expr>:</case> <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>crc</name></name> <operator>=</operator> <name>UINT32_MAX</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ADLER32</name></expr>:</case> <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>crc</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_CRYPTO_SIZE_T</name></expr></cpp:if>

<decl_stmt><decl><type><name>void</name></type> <name>av_hash_update</name><argument_list>(<argument><expr><name>AVHashContext</name> <operator>*</operator><name>ctx</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><name>src</name></expr></argument>, <argument><expr><name>int</name> <name>len</name></expr></argument>)</argument_list>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<name>void</name> <name>av_hash_update</name><argument_list>(<argument><expr><name>AVHashContext</name> <operator>*</operator><name>ctx</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><name>src</name></expr></argument>, <argument><expr><name>size_t</name> <name>len</name></expr></argument>)</argument_list>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<switch>switch <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>MD5</name></expr>:</case> <expr_stmt><expr><call><name>av_md5_update</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>MURMUR3</name></expr>:</case> <expr_stmt><expr><call><name>av_murmur3_update</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>RIPEMD128</name></expr>:</case>

<case>case <expr><name>RIPEMD160</name></expr>:</case>

<case>case <expr><name>RIPEMD256</name></expr>:</case>

<case>case <expr><name>RIPEMD320</name></expr>:</case> <expr_stmt><expr><call><name>av_ripemd_update</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>SHA160</name></expr>:</case>

<case>case <expr><name>SHA224</name></expr>:</case>

<case>case <expr><name>SHA256</name></expr>:</case> <expr_stmt><expr><call><name>av_sha_update</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>SHA512_224</name></expr>:</case>

<case>case <expr><name>SHA512_256</name></expr>:</case>

<case>case <expr><name>SHA384</name></expr>:</case>

<case>case <expr><name>SHA512</name></expr>:</case> <expr_stmt><expr><call><name>av_sha512_update</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>CRC32</name></expr>:</case> <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>crc</name></name> <operator>=</operator> <call><name>av_crc</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>crctab</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>crc</name></name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ADLER32</name></expr>:</case> <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>crc</name></name> <operator>=</operator> <call><name>av_adler32_update</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>crc</name></name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></decl></decl_stmt>

<function><type><name>void</name></type> <name>av_hash_final</name><parameter_list>(<parameter><decl><type><name>AVHashContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>MD5</name></expr>:</case> <expr_stmt><expr><call><name>av_md5_final</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>MURMUR3</name></expr>:</case> <expr_stmt><expr><call><name>av_murmur3_final</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>RIPEMD128</name></expr>:</case>

<case>case <expr><name>RIPEMD160</name></expr>:</case>

<case>case <expr><name>RIPEMD256</name></expr>:</case>

<case>case <expr><name>RIPEMD320</name></expr>:</case> <expr_stmt><expr><call><name>av_ripemd_final</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>SHA160</name></expr>:</case>

<case>case <expr><name>SHA224</name></expr>:</case>

<case>case <expr><name>SHA256</name></expr>:</case> <expr_stmt><expr><call><name>av_sha_final</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>SHA512_224</name></expr>:</case>

<case>case <expr><name>SHA512_256</name></expr>:</case>

<case>case <expr><name>SHA384</name></expr>:</case>

<case>case <expr><name>SHA512</name></expr>:</case> <expr_stmt><expr><call><name>av_sha512_final</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>CRC32</name></expr>:</case> <expr_stmt><expr><call><name>AV_WB32</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>crc</name></name> <operator>^</operator> <name>UINT32_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ADLER32</name></expr>:</case> <expr_stmt><expr><call><name>AV_WB32</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>crc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>av_hash_final_bin</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>AVHashContext</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>buf</name><index>[<expr><name>AV_HASH_MAX_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>rsize</name> <init>= <expr><call><name>av_hash_get_size</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_hash_final</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><name>rsize</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <name>rsize</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>rsize</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>size</name> <operator>-</operator> <name>rsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>av_hash_final_hex</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>AVHashContext</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>buf</name><index>[<expr><name>AV_HASH_MAX_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>rsize</name> <init>= <expr><call><name>av_hash_get_size</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_hash_final</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>rsize</name></expr></argument>, <argument><expr><name>size</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>size</name> <operator>-</operator> <name>i</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"%02x"</literal></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>av_hash_final_b64</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>AVHashContext</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>buf</name><index>[<expr><name>AV_HASH_MAX_SIZE</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>b64</name><index>[<expr><call><name>AV_BASE64_SIZE</name><argument_list>(<argument><expr><name>AV_HASH_MAX_SIZE</name></expr></argument>)</argument_list></call></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>rsize</name> <init>= <expr><call><name>av_hash_get_size</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>osize</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_hash_final</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_base64_encode</name><argument_list>(<argument><expr><name>b64</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>b64</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>rsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>osize</name> <operator>=</operator> <call><name>AV_BASE64_SIZE</name><argument_list>(<argument><expr><name>rsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>b64</name></expr></argument>, <argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>osize</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <name>osize</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>size</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>av_hash_freep</name><parameter_list>(<parameter><decl><type><name>AVHashContext</name> <modifier>*</modifier><modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ctx</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>ctx</name><operator>)</operator><operator>-&gt;</operator><name>ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
