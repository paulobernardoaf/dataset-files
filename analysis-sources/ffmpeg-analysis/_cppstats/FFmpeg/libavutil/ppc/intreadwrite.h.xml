<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavutil\ppc\intreadwrite.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_XFORM_ASM</name></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_BIGENDIAN</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_RL16</name></cpp:macro> <cpp:value>av_read_bswap16</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_WL16</name></cpp:macro> <cpp:value>av_write_bswap16</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_RL32</name></cpp:macro> <cpp:value>av_read_bswap32</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_WL32</name></cpp:macro> <cpp:value>av_write_bswap32</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_RL64</name></cpp:macro> <cpp:value>av_read_bswap64</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_WL64</name></cpp:macro> <cpp:value>av_write_bswap64</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_RB16</name></cpp:macro> <cpp:value>av_read_bswap16</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_WB16</name></cpp:macro> <cpp:value>av_write_bswap16</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_RB32</name></cpp:macro> <cpp:value>av_read_bswap32</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_WB32</name></cpp:macro> <cpp:value>av_write_bswap32</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_RB64</name></cpp:macro> <cpp:value>av_read_bswap64</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_WB64</name></cpp:macro> <cpp:value>av_write_bswap64</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>uint16_t</name></type> <name>av_read_bswap16</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>v</name></decl>;</decl_stmt>

<asm>__asm__ ("lhbrx %0, %y1" : "=r"(v) : "Z"(*(const uint16_t*)p));</asm>

<return>return <expr><name>v</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>av_write_bswap16</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>v</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<asm>__asm__ ("sthbrx %1, %y0" : "=Z"(*(uint16_t*)p) : "r"(v));</asm>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>uint32_t</name></type> <name>av_read_bswap32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>v</name></decl>;</decl_stmt>

<asm>__asm__ ("lwbrx %0, %y1" : "=r"(v) : "Z"(*(const uint32_t*)p));</asm>

<return>return <expr><name>v</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>av_write_bswap32</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>v</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<asm>__asm__ ("stwbrx %1, %y0" : "=Z"(*(uint32_t*)p) : "r"(v));</asm>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_LDBRX</name></expr></cpp:if>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>uint64_t</name></type> <name>av_read_bswap64</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>v</name></decl>;</decl_stmt>

<asm>__asm__ ("ldbrx %0, %y1" : "=r"(v) : "Z"(*(const uint64_t*)p));</asm>

<return>return <expr><name>v</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>av_write_bswap64</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>v</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<asm>__asm__ ("stdbrx %1, %y0" : "=Z"(*(uint64_t*)p) : "r"(v));</asm>

</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>uint64_t</name></type> <name>av_read_bswap64</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<union>union <block>{ <decl_stmt><decl><type><name>uint64_t</name></type> <name>v</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>uint32_t</name></type> <name><name>hl</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> }</block> <decl><name>v</name></decl>;</union>

<asm>__asm__ ("lwbrx %0, %y2 \n\t"

"lwbrx %1, %y3 \n\t"

: "=&amp;r"(v.hl[1]), "=r"(v.hl[0])

: "Z"(*(const uint32_t*)p), "Z"(*((const uint32_t*)p+1)));</asm>

<return>return <expr><name><name>v</name><operator>.</operator><name>v</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>av_write_bswap64</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>v</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<union>union <block>{ <decl_stmt><decl><type><name>uint64_t</name></type> <name>v</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>uint32_t</name></type> <name><name>hl</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> }</block> <decl><name>vv</name> <init>= <expr><block>{ <expr><name>v</name></expr> }</block></expr></init></decl>;</union>

<asm>__asm__ ("stwbrx %2, %y0 \n\t"

"stwbrx %3, %y1 \n\t"

: "=Z"(*(uint32_t*)p), "=Z"(*((uint32_t*)p+1))

: "r"(vv.hl[1]), "r"(vv.hl[0]));</asm>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
