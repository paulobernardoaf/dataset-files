<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavutil\utils.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avutil.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avassert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"samplefmt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/ffversion.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>av_util_ffversion</name><index>[]</index></name> <init>= <expr><literal type="string">"FFmpeg version "</literal> <name>FFMPEG_VERSION</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>av_version_info</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>FFMPEG_VERSION</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>unsigned</name></type> <name>avutil_version</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>checks_done</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>checks_done</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>LIBAVUTIL_VERSION_INT</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>AV_SAMPLE_FMT_DBLP</name> <operator>==</operator> <literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>AVMEDIA_TYPE_ATTACHMENT</name> <operator>==</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>AV_PICTURE_TYPE_BI</name> <operator>==</operator> <literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>LIBAVUTIL_VERSION_MICRO</name> <operator>&gt;=</operator> <literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>HAVE_MMX2</name> <operator>==</operator> <name>HAVE_MMXEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>size_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><call><name>av_sat_dadd32</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Libavutil has been built with a broken binutils, please upgrade binutils and rebuild\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>llrint</name><argument_list>(<argument><expr><literal type="number">1LL</literal><operator>&lt;&lt;</operator><literal type="number">60</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1LL</literal><operator>&lt;&lt;</operator><literal type="number">60</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Libavutil has been linked to a broken llrint()\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>checks_done</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name>LIBAVUTIL_VERSION_INT</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>avutil_configuration</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>FFMPEG_CONFIGURATION</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>avutil_license</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LICENSE_PREFIX</name></cpp:macro> <cpp:value>"libavutil license: "</cpp:value></cpp:define>

<return>return <expr><operator>&amp;</operator><name>LICENSE_PREFIX</name> <name><name>FFMPEG_LICENSE</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>LICENSE_PREFIX</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>av_get_media_type_string</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVMediaType</name></name></type> <name>media_type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name>media_type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AVMEDIA_TYPE_VIDEO</name></expr>:</case> <return>return <expr><literal type="string">"video"</literal></expr>;</return>

<case>case <expr><name>AVMEDIA_TYPE_AUDIO</name></expr>:</case> <return>return <expr><literal type="string">"audio"</literal></expr>;</return>

<case>case <expr><name>AVMEDIA_TYPE_DATA</name></expr>:</case> <return>return <expr><literal type="string">"data"</literal></expr>;</return>

<case>case <expr><name>AVMEDIA_TYPE_SUBTITLE</name></expr>:</case> <return>return <expr><literal type="string">"subtitle"</literal></expr>;</return>

<case>case <expr><name>AVMEDIA_TYPE_ATTACHMENT</name></expr>:</case> <return>return <expr><literal type="string">"attachment"</literal></expr>;</return>

<default>default:</default> <return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><name>char</name></type> <name>av_get_picture_type_char</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVPictureType</name></name></type> <name>pict_type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name>pict_type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_PICTURE_TYPE_I</name></expr>:</case> <return>return <expr><literal type="char">'I'</literal></expr>;</return>

<case>case <expr><name>AV_PICTURE_TYPE_P</name></expr>:</case> <return>return <expr><literal type="char">'P'</literal></expr>;</return>

<case>case <expr><name>AV_PICTURE_TYPE_B</name></expr>:</case> <return>return <expr><literal type="char">'B'</literal></expr>;</return>

<case>case <expr><name>AV_PICTURE_TYPE_S</name></expr>:</case> <return>return <expr><literal type="char">'S'</literal></expr>;</return>

<case>case <expr><name>AV_PICTURE_TYPE_SI</name></expr>:</case> <return>return <expr><literal type="char">'i'</literal></expr>;</return>

<case>case <expr><name>AV_PICTURE_TYPE_SP</name></expr>:</case> <return>return <expr><literal type="char">'p'</literal></expr>;</return>

<case>case <expr><name>AV_PICTURE_TYPE_BI</name></expr>:</case> <return>return <expr><literal type="char">'b'</literal></expr>;</return>

<default>default:</default> <return>return <expr><literal type="char">'?'</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><name>unsigned</name></type> <name>av_int_list_length_for_size</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>elsize</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>term</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>list</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIST_LENGTH</name><parameter_list>(<parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ type t = term, *l = (type *)list; for (i = 0; l[i] != t; i++); }</cpp:value></cpp:define>

<switch>switch <condition>(<expr><name>elsize</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case> <expr_stmt><expr><call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name>uint16_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">4</literal></expr>:</case> <expr_stmt><expr><call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">8</literal></expr>:</case> <expr_stmt><expr><call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<default>default:</default> <expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><operator>!</operator><literal type="string">"valid element size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<return>return <expr><name>i</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>av_fourcc_make_string</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>fourcc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>orig_buf</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>buf_size</name> <init>= <expr><name>AV_FOURCC_MAX_STRING_SIZE</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c</name> <init>= <expr><name>fourcc</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>print_chr</name> <init>= <expr><operator>(</operator><name>c</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'9'</literal><operator>)</operator> <operator>||</operator>

<operator>(</operator><name>c</name> <operator>&gt;=</operator> <literal type="char">'a'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'z'</literal><operator>)</operator> <operator>||</operator>

<operator>(</operator><name>c</name> <operator>&gt;=</operator> <literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'Z'</literal><operator>)</operator> <operator>||</operator>

<operator>(</operator><name>c</name> <operator>&amp;&amp;</operator> <call><name>strchr</name><argument_list>(<argument><expr><literal type="string">". -_"</literal></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>len</name> <init>= <expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>, <argument><expr><ternary><condition><expr><name>print_chr</name></expr> ?</condition><then> <expr><literal type="string">"%c"</literal></expr> </then><else>: <expr><literal type="string">"[%d]"</literal></expr></else></ternary></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><name>buf_size</name> <operator>=</operator> <ternary><condition><expr><name>buf_size</name> <operator>&gt;</operator> <name>len</name></expr> ?</condition><then> <expr><name>buf_size</name> <operator>-</operator> <name>len</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>fourcc</name> <operator>&gt;&gt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>orig_buf</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>AVRational</name></type> <name>av_get_time_base_q</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name>AVRational</name><operator>)</operator><block>{<expr><literal type="number">1</literal></expr>, <expr><name>AV_TIME_BASE</name></expr>}</block></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>av_assert0_fpu</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_MMX_INLINE</name></expr></cpp:if>

<decl_stmt><decl><type><name>uint16_t</name></type> <name><name>state</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></decl>;</decl_stmt>

<asm>__asm__ <specifier>volatile</specifier> (

"fstenv %0 \n\t"

: "+m" (state)

:

: "memory"

);</asm>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><operator>(</operator><name><name>state</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator> <operator>==</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

</unit>
