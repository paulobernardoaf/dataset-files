<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavutil\hwcontext_vulkan.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pixdesc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avstring.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"imgutils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hwcontext.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hwcontext_internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hwcontext_vulkan.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_LIBDRM</name></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;xf86drm.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;drm_fourcc.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hwcontext_drm.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_VAAPI</name></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;va/va_drmcommon.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hwcontext_vaapi.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_CUDA</name></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hwcontext_cuda_internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cuda_check.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_CU</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>FF_CUDA_CHECK_DL(cuda_cu, cu, x)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><struct>struct <name>VulkanExecCtx</name> <block>{

<decl_stmt><decl><type><name>VkCommandPool</name></type> <name>pool</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkCommandBuffer</name></type> <name>buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkQueue</name></type> <name>queue</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkFence</name></type> <name>fence</name></decl>;</decl_stmt>

}</block></struct></type> <name>VulkanExecCtx</name>;</typedef>

<typedef>typedef <type><struct>struct <name>VulkanDevicePriv</name> <block>{

<decl_stmt><decl><type><name>VkPhysicalDeviceProperties</name></type> <name>props</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkPhysicalDeviceMemoryProperties</name></type> <name>mprops</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkDebugUtilsMessengerEXT</name></type> <name>debug_ctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VulkanExecCtx</name></type> <name>cmd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>extensions</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>use_linear_images</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dev_is_nvidia</name></decl>;</decl_stmt>

}</block></struct></type> <name>VulkanDevicePriv</name>;</typedef>

<typedef>typedef <type><struct>struct <name>VulkanFramesPriv</name> <block>{

<decl_stmt><decl><type><name>VulkanExecCtx</name></type> <name>cmd</name></decl>;</decl_stmt>

}</block></struct></type> <name>VulkanFramesPriv</name>;</typedef>

<typedef>typedef <type><struct>struct <name>AVVkFrameInternal</name> <block>{

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_CUDA</name></expr></cpp:if>

<decl_stmt><decl><type><name>AVBufferRef</name> <modifier>*</modifier></type><name>cuda_fc_ref</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>CUexternalMemory</name></type> <name><name>ext_mem</name><index>[<expr><name>AV_NUM_DATA_POINTERS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CUmipmappedArray</name></type> <name><name>cu_mma</name><index>[<expr><name>AV_NUM_DATA_POINTERS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CUarray</name></type> <name><name>cu_array</name><index>[<expr><name>AV_NUM_DATA_POINTERS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CUexternalSemaphore</name></type> <name><name>cu_sem</name><index>[<expr><name>AV_NUM_DATA_POINTERS</name></expr>]</index></name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></struct></type> <name>AVVkFrameInternal</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VK_LOAD_PFN</name><parameter_list>(<parameter><type><name>inst</name></type></parameter>, <parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>PFN_##name pfn_##name = (PFN_##name) vkGetInstanceProcAddr(inst, #name)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_USAGE_FLAGS</name></cpp:macro> <cpp:value>(VK_IMAGE_USAGE_SAMPLED_BIT | VK_IMAGE_USAGE_STORAGE_BIT | VK_IMAGE_USAGE_TRANSFER_SRC_BIT | VK_IMAGE_USAGE_TRANSFER_DST_BIT)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADD_VAL_TO_LIST</name><parameter_list>(<parameter><type><name>list</name></type></parameter>, <parameter><type><name>count</name></type></parameter>, <parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { list = av_realloc_array(list, sizeof(*list), ++count); if (!list) { err = AVERROR(ENOMEM); goto end; } list[count - 1] = val; } while(0)</cpp:value></cpp:define>

<struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{

<decl_stmt><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>pixfmt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>VkFormat</name></type> <name><name>vkfmts</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

}</block> <decl><name><name>vk_pixfmt_map</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><name>AV_PIX_FMT_GRAY8</name></expr>, <expr><block>{ <expr><name>VK_FORMAT_R8_UNORM</name></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><name>AV_PIX_FMT_GRAY16</name></expr>, <expr><block>{ <expr><name>VK_FORMAT_R16_UNORM</name></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><name>AV_PIX_FMT_GRAYF32</name></expr>, <expr><block>{ <expr><name>VK_FORMAT_R32_SFLOAT</name></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><name>AV_PIX_FMT_NV12</name></expr>, <expr><block>{ <expr><name>VK_FORMAT_R8_UNORM</name></expr>, <expr><name>VK_FORMAT_R8G8_UNORM</name></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><name>AV_PIX_FMT_P010</name></expr>, <expr><block>{ <expr><name>VK_FORMAT_R16_UNORM</name></expr>, <expr><name>VK_FORMAT_R16G16_UNORM</name></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><name>AV_PIX_FMT_P016</name></expr>, <expr><block>{ <expr><name>VK_FORMAT_R16_UNORM</name></expr>, <expr><name>VK_FORMAT_R16G16_UNORM</name></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><name>AV_PIX_FMT_YUV420P</name></expr>, <expr><block>{ <expr><name>VK_FORMAT_R8_UNORM</name></expr>, <expr><name>VK_FORMAT_R8_UNORM</name></expr>, <expr><name>VK_FORMAT_R8_UNORM</name></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><name>AV_PIX_FMT_YUV422P</name></expr>, <expr><block>{ <expr><name>VK_FORMAT_R8_UNORM</name></expr>, <expr><name>VK_FORMAT_R8_UNORM</name></expr>, <expr><name>VK_FORMAT_R8_UNORM</name></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><name>AV_PIX_FMT_YUV444P</name></expr>, <expr><block>{ <expr><name>VK_FORMAT_R8_UNORM</name></expr>, <expr><name>VK_FORMAT_R8_UNORM</name></expr>, <expr><name>VK_FORMAT_R8_UNORM</name></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><name>AV_PIX_FMT_YUV420P16</name></expr>, <expr><block>{ <expr><name>VK_FORMAT_R16_UNORM</name></expr>, <expr><name>VK_FORMAT_R16_UNORM</name></expr>, <expr><name>VK_FORMAT_R16_UNORM</name></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><name>AV_PIX_FMT_YUV422P16</name></expr>, <expr><block>{ <expr><name>VK_FORMAT_R16_UNORM</name></expr>, <expr><name>VK_FORMAT_R16_UNORM</name></expr>, <expr><name>VK_FORMAT_R16_UNORM</name></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><name>AV_PIX_FMT_YUV444P16</name></expr>, <expr><block>{ <expr><name>VK_FORMAT_R16_UNORM</name></expr>, <expr><name>VK_FORMAT_R16_UNORM</name></expr>, <expr><name>VK_FORMAT_R16_UNORM</name></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><name>AV_PIX_FMT_ABGR</name></expr>, <expr><block>{ <expr><name>VK_FORMAT_A8B8G8R8_UNORM_PACK32</name></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><name>AV_PIX_FMT_BGRA</name></expr>, <expr><block>{ <expr><name>VK_FORMAT_B8G8R8A8_UNORM</name></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><name>AV_PIX_FMT_RGBA</name></expr>, <expr><block>{ <expr><name>VK_FORMAT_R8G8B8A8_UNORM</name></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><name>AV_PIX_FMT_RGB24</name></expr>, <expr><block>{ <expr><name>VK_FORMAT_R8G8B8_UNORM</name></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><name>AV_PIX_FMT_BGR24</name></expr>, <expr><block>{ <expr><name>VK_FORMAT_B8G8R8_UNORM</name></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><name>AV_PIX_FMT_RGB48</name></expr>, <expr><block>{ <expr><name>VK_FORMAT_R16G16B16_UNORM</name></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><name>AV_PIX_FMT_RGBA64</name></expr>, <expr><block>{ <expr><name>VK_FORMAT_R16G16B16A16_UNORM</name></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><name>AV_PIX_FMT_RGB565</name></expr>, <expr><block>{ <expr><name>VK_FORMAT_R5G6B5_UNORM_PACK16</name></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><name>AV_PIX_FMT_BGR565</name></expr>, <expr><block>{ <expr><name>VK_FORMAT_B5G6R5_UNORM_PACK16</name></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><name>AV_PIX_FMT_BGR0</name></expr>, <expr><block>{ <expr><name>VK_FORMAT_B8G8R8A8_UNORM</name></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><name>AV_PIX_FMT_0BGR</name></expr>, <expr><block>{ <expr><name>VK_FORMAT_A8B8G8R8_UNORM_PACK32</name></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><name>AV_PIX_FMT_RGB0</name></expr>, <expr><block>{ <expr><name>VK_FORMAT_R8G8B8A8_UNORM</name></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><name>AV_PIX_FMT_GBRPF32</name></expr>, <expr><block>{ <expr><name>VK_FORMAT_R32_SFLOAT</name></expr>, <expr><name>VK_FORMAT_R32_SFLOAT</name></expr>, <expr><name>VK_FORMAT_R32_SFLOAT</name></expr> }</block></expr> }</block></expr>,

}</block></expr></init></decl>;</struct>

<function><type><specifier>const</specifier> <name>VkFormat</name> <modifier>*</modifier></type><name>av_vkfmt_from_pixfmt</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<for>for <control>(<init><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>vk_pixfmt_map</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>vk_pixfmt_map</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pixfmt</name> <operator>==</operator> <name>p</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>vk_pixfmt_map</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>vkfmts</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>pixfmt_is_supported</name><parameter_list>(<parameter><decl><type><name>AVVulkanDeviceContext</name> <modifier>*</modifier></type><name>hwctx</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>p</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>linear</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>VkFormat</name> <modifier>*</modifier></type><name>fmt</name> <init>= <expr><call><name>av_vkfmt_from_pixfmt</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>planes</name> <init>= <expr><call><name>av_pix_fmt_count_planes</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fmt</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>planes</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>VkFormatFeatureFlags</name></type> <name>flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkFormatProperties2</name></type> <name>prop</name> <init>= <expr><block>{

<expr><operator>.</operator><name>sType</name> <operator>=</operator> <name>VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vkGetPhysicalDeviceFormatProperties2</name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>phys_dev</name></name></expr></argument>, <argument><expr><name><name>fmt</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>prop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>flags</name> <operator>=</operator> <ternary><condition><expr><name>linear</name></expr> ?</condition><then> <expr><name><name>prop</name><operator>.</operator><name>formatProperties</name><operator>.</operator><name>linearTilingFeatures</name></name></expr> </then><else>:

<expr><name><name>prop</name><operator>.</operator><name>formatProperties</name><operator>.</operator><name>optimalTilingFeatures</name></name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>DEFAULT_USAGE_FLAGS</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<enum>enum <name>VulkanExtensions</name> <block>{

<decl><name>EXT_EXTERNAL_DMABUF_MEMORY</name> <init>= <expr><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <literal type="number">0</literal></expr></init></decl>, 

<decl><name>EXT_DRM_MODIFIER_FLAGS</name> <init>= <expr><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></init></decl>, 

<decl><name>EXT_EXTERNAL_FD_MEMORY</name> <init>= <expr><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr></init></decl>, 

<decl><name>EXT_EXTERNAL_FD_SEM</name> <init>= <expr><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr></init></decl>, 

<decl><name>EXT_OPTIONAL</name> <init>= <expr><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <literal type="number">62</literal></expr></init></decl>,

<decl><name>EXT_REQUIRED</name> <init>= <expr><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <literal type="number">63</literal></expr></init></decl>,

}</block>;</enum>

<typedef>typedef <type><struct>struct <name>VulkanOptExtension</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>flag</name></decl>;</decl_stmt>

}</block></struct></type> <name>VulkanOptExtension</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>VulkanOptExtension</name></type> <name><name>optional_instance_exts</name><index>[]</index></name> <init>= <expr><block>{

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>VulkanOptExtension</name></type> <name><name>optional_device_exts</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><name>VK_KHR_EXTERNAL_MEMORY_FD_EXTENSION_NAME</name></expr>, <expr><name>EXT_EXTERNAL_FD_MEMORY</name></expr>, }</block></expr>,

<expr><block>{ <expr><name>VK_EXT_EXTERNAL_MEMORY_DMA_BUF_EXTENSION_NAME</name></expr>, <expr><name>EXT_EXTERNAL_DMABUF_MEMORY</name></expr>, }</block></expr>,

<expr><block>{ <expr><name>VK_EXT_IMAGE_DRM_FORMAT_MODIFIER_EXTENSION_NAME</name></expr>, <expr><name>EXT_DRM_MODIFIER_FLAGS</name></expr>, }</block></expr>,

<expr><block>{ <expr><name>VK_KHR_EXTERNAL_SEMAPHORE_FD_EXTENSION_NAME</name></expr>, <expr><name>EXT_EXTERNAL_FD_SEM</name></expr>, }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>vk_ret2str</name><parameter_list>(<parameter><decl><type><name>VkResult</name></type> <name>res</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CASE</name><parameter_list>(<parameter><type><name>VAL</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>case VAL: return #VAL</cpp:value></cpp:define>

<switch>switch <condition>(<expr><name>res</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>CASE</name><argument_list>(<argument><expr><name>VK_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE</name><argument_list>(<argument><expr><name>VK_NOT_READY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE</name><argument_list>(<argument><expr><name>VK_TIMEOUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE</name><argument_list>(<argument><expr><name>VK_EVENT_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE</name><argument_list>(<argument><expr><name>VK_EVENT_RESET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE</name><argument_list>(<argument><expr><name>VK_INCOMPLETE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE</name><argument_list>(<argument><expr><name>VK_ERROR_OUT_OF_HOST_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE</name><argument_list>(<argument><expr><name>VK_ERROR_OUT_OF_DEVICE_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE</name><argument_list>(<argument><expr><name>VK_ERROR_INITIALIZATION_FAILED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE</name><argument_list>(<argument><expr><name>VK_ERROR_DEVICE_LOST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE</name><argument_list>(<argument><expr><name>VK_ERROR_MEMORY_MAP_FAILED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE</name><argument_list>(<argument><expr><name>VK_ERROR_LAYER_NOT_PRESENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE</name><argument_list>(<argument><expr><name>VK_ERROR_EXTENSION_NOT_PRESENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE</name><argument_list>(<argument><expr><name>VK_ERROR_FEATURE_NOT_PRESENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE</name><argument_list>(<argument><expr><name>VK_ERROR_INCOMPATIBLE_DRIVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE</name><argument_list>(<argument><expr><name>VK_ERROR_TOO_MANY_OBJECTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE</name><argument_list>(<argument><expr><name>VK_ERROR_FORMAT_NOT_SUPPORTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE</name><argument_list>(<argument><expr><name>VK_ERROR_FRAGMENTED_POOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE</name><argument_list>(<argument><expr><name>VK_ERROR_SURFACE_LOST_KHR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE</name><argument_list>(<argument><expr><name>VK_ERROR_NATIVE_WINDOW_IN_USE_KHR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE</name><argument_list>(<argument><expr><name>VK_SUBOPTIMAL_KHR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE</name><argument_list>(<argument><expr><name>VK_ERROR_OUT_OF_DATE_KHR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE</name><argument_list>(<argument><expr><name>VK_ERROR_INCOMPATIBLE_DISPLAY_KHR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE</name><argument_list>(<argument><expr><name>VK_ERROR_VALIDATION_FAILED_EXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE</name><argument_list>(<argument><expr><name>VK_ERROR_INVALID_SHADER_NV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE</name><argument_list>(<argument><expr><name>VK_ERROR_OUT_OF_POOL_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE</name><argument_list>(<argument><expr><name>VK_ERROR_INVALID_EXTERNAL_HANDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE</name><argument_list>(<argument><expr><name>VK_ERROR_NOT_PERMITTED_EXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE</name><argument_list>(<argument><expr><name>VK_ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE</name><argument_list>(<argument><expr><name>VK_ERROR_INVALID_DEVICE_ADDRESS_EXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE</name><argument_list>(<argument><expr><name>VK_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<default>default:</default> <return>return <expr><literal type="string">"Unknown error"</literal></expr>;</return>

</block_content>}</block></switch>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CASE</name></cpp:undef>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VkBool32</name></type> <name>vk_dbg_callback</name><parameter_list>(<parameter><decl><type><name>VkDebugUtilsMessageSeverityFlagBitsEXT</name></type> <name>severity</name></decl></parameter>,

<parameter><decl><type><name>VkDebugUtilsMessageTypeFlagsEXT</name></type> <name>messageType</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>VkDebugUtilsMessengerCallbackDataEXT</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>priv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVHWDeviceContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name>priv</name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>severity</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>VK_DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT</name></expr>:</case> <expr_stmt><expr><name>l</name> <operator>=</operator> <name>AV_LOG_VERBOSE</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>VK_DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT</name></expr>:</case> <expr_stmt><expr><name>l</name> <operator>=</operator> <name>AV_LOG_INFO</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>VK_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT</name></expr>:</case> <expr_stmt><expr><name>l</name> <operator>=</operator> <name>AV_LOG_WARNING</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>VK_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT</name></expr>:</case> <expr_stmt><expr><name>l</name> <operator>=</operator> <name>AV_LOG_ERROR</name></expr>;</expr_stmt> <break>break;</break>

<default>default:</default> <expr_stmt><expr><name>l</name> <operator>=</operator> <name>AV_LOG_DEBUG</name></expr>;</expr_stmt> <break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>pMessage</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>data</name><operator>-&gt;</operator><name>cmdBufLabelCount</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><literal type="string">"\t%i: %s\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>pCmdBufLabels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pLabelName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>check_extensions</name><parameter_list>(<parameter><decl><type><name>AVHWDeviceContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dev</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier> <modifier>*</modifier><modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>num</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>debug</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tstr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>extension_names</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VulkanDevicePriv</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVVulkanDeviceContext</name> <modifier>*</modifier></type><name>hwctx</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>found</name></decl>, <decl><type ref="prev"/><name>extensions_found</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mod</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>optional_exts_num</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>sup_ext_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkExtensionProperties</name> <modifier>*</modifier></type><name>sup_ext</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>VulkanOptExtension</name> <modifier>*</modifier></type><name>optional_exts</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dev</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mod</name> <operator>=</operator> <literal type="string">"instance"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>optional_exts</name> <operator>=</operator> <name>optional_instance_exts</name></expr>;</expr_stmt>

<expr_stmt><expr><name>optional_exts_num</name> <operator>=</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>optional_instance_exts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vkEnumerateInstanceExtensionProperties</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sup_ext_count</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sup_ext</name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name>sup_ext_count</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>VkExtensionProperties</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sup_ext</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vkEnumerateInstanceExtensionProperties</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sup_ext_count</name></expr></argument>, <argument><expr><name>sup_ext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>mod</name> <operator>=</operator> <literal type="string">"device"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>optional_exts</name> <operator>=</operator> <name>optional_device_exts</name></expr>;</expr_stmt>

<expr_stmt><expr><name>optional_exts_num</name> <operator>=</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>optional_device_exts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vkEnumerateDeviceExtensionProperties</name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>phys_dev</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>sup_ext_count</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sup_ext</name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name>sup_ext_count</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>VkExtensionProperties</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sup_ext</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vkEnumerateDeviceExtensionProperties</name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>phys_dev</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>sup_ext_count</name></expr></argument>, <argument><expr><name>sup_ext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>optional_exts_num</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>req</name> <init>= <expr><name><name>optional_exts</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>flag</name> <operator>&amp;</operator> <name>EXT_REQUIRED</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>tstr</name> <operator>=</operator> <name><name>optional_exts</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</expr_stmt>

<expr_stmt><expr><name>found</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>sup_ext_count</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>tstr</name></expr></argument>, <argument><expr><name><name>sup_ext</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>extensionName</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>found</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>lvl</name> <init>= <expr><ternary><condition><expr><name>req</name></expr> ?</condition><then> <expr><name>AV_LOG_ERROR</name></expr> </then><else>: <expr><name>AV_LOG_VERBOSE</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>lvl</name></expr></argument>, <argument><expr><literal type="string">"Extension \"%s\" not found!\n"</literal></expr></argument>, <argument><expr><name>tstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>req</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>req</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>extensions</name></name> <operator>|=</operator> <name><name>optional_exts</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>flag</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"Using %s extension \"%s\"\n"</literal></expr></argument>, <argument><expr><name>mod</name></expr></argument>, <argument><expr><name>tstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_VAL_TO_LIST</name><argument_list>(<argument><expr><name>extension_names</name></expr></argument>, <argument><expr><name>extensions_found</name></expr></argument>, <argument><expr><name>tstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>debug</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>dev</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tstr</name> <operator>=</operator> <name>VK_EXT_DEBUG_UTILS_EXTENSION_NAME</name></expr>;</expr_stmt>

<expr_stmt><expr><name>found</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>sup_ext_count</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>tstr</name></expr></argument>, <argument><expr><name><name>sup_ext</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>extensionName</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>found</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ADD_VAL_TO_LIST</name><argument_list>(<argument><expr><name>extension_names</name></expr></argument>, <argument><expr><name>extensions_found</name></expr></argument>, <argument><expr><name>tstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Debug extension \"%s\" not found!\n"</literal></expr></argument>,

<argument><expr><name>tstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>dst</name> <operator>=</operator> <name>extension_names</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>num</name> <operator>=</operator> <name>extensions_found</name></expr>;</expr_stmt>

<label><name>end</name>:</label>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>sup_ext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>create_instance</name><parameter_list>(<parameter><decl><type><name>AVHWDeviceContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>AVDictionary</name> <modifier>*</modifier></type><name>opts</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkResult</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VulkanDevicePriv</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVVulkanDeviceContext</name> <modifier>*</modifier></type><name>hwctx</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVDictionaryEntry</name> <modifier>*</modifier></type><name>debug_opt</name> <init>= <expr><call><name>av_dict_get</name><argument_list>(<argument><expr><name>opts</name></expr></argument>, <argument><expr><literal type="string">"debug"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>debug_mode</name> <init>= <expr><name>debug_opt</name> <operator>&amp;&amp;</operator> <call><name>strtol</name><argument_list>(<argument><expr><name><name>debug_opt</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkApplicationInfo</name></type> <name>application_info</name> <init>= <expr><block>{

<expr><operator>.</operator><name>sType</name> <operator>=</operator> <name>VK_STRUCTURE_TYPE_APPLICATION_INFO</name></expr>,

<expr><operator>.</operator><name>pEngineName</name> <operator>=</operator> <literal type="string">"libavutil"</literal></expr>,

<expr><operator>.</operator><name>apiVersion</name> <operator>=</operator> <name>VK_API_VERSION_1_1</name></expr>,

<expr><operator>.</operator><name>engineVersion</name> <operator>=</operator> <call><name>VK_MAKE_VERSION</name><argument_list>(<argument><expr><name>LIBAVUTIL_VERSION_MAJOR</name></expr></argument>,

<argument><expr><name>LIBAVUTIL_VERSION_MINOR</name></expr></argument>,

<argument><expr><name>LIBAVUTIL_VERSION_MICRO</name></expr></argument>)</argument_list></call></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkInstanceCreateInfo</name></type> <name>inst_props</name> <init>= <expr><block>{

<expr><operator>.</operator><name>sType</name> <operator>=</operator> <name>VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO</name></expr>,

<expr><operator>.</operator><name>pApplicationInfo</name> <operator>=</operator> <operator>&amp;</operator><name>application_info</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>check_extensions</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>inst_props</name><operator>.</operator><name>ppEnabledExtensionNames</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>inst_props</name><operator>.</operator><name>enabledExtensionCount</name></name></expr></argument>, <argument><expr><name>debug_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>debug_mode</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>layers</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="string">"VK_LAYER_LUNARG_standard_validation"</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>inst_props</name><operator>.</operator><name>ppEnabledLayerNames</name></name> <operator>=</operator> <name>layers</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>inst_props</name><operator>.</operator><name>enabledLayerCount</name></name> <operator>=</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>layers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>vkCreateInstance</name><argument_list>(<argument><expr><operator>&amp;</operator><name>inst_props</name></expr></argument>, <argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>alloc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>hwctx</name><operator>-&gt;</operator><name>inst</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>inst_props</name><operator>.</operator><name>ppEnabledExtensionNames</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VK_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Instance creation failure: %s\n"</literal></expr></argument>,

<argument><expr><call><name>vk_ret2str</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_EXTERNAL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>debug_mode</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>VkDebugUtilsMessengerCreateInfoEXT</name></type> <name>dbg</name> <init>= <expr><block>{

<expr><operator>.</operator><name>sType</name> <operator>=</operator> <name>VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT</name></expr>,

<expr><operator>.</operator><name>messageSeverity</name> <operator>=</operator> <name>VK_DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT</name> <operator>|</operator>

<name>VK_DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT</name> <operator>|</operator>

<name>VK_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT</name> <operator>|</operator>

<name>VK_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT</name></expr>,

<expr><operator>.</operator><name>messageType</name> <operator>=</operator> <name>VK_DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT</name> <operator>|</operator>

<name>VK_DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT</name> <operator>|</operator>

<name>VK_DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT</name></expr>,

<expr><operator>.</operator><name>pfnUserCallback</name> <operator>=</operator> <name>vk_dbg_callback</name></expr>,

<expr><operator>.</operator><name>pUserData</name> <operator>=</operator> <name>ctx</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>VK_LOAD_PFN</name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>inst</name></name></expr></argument>, <argument><expr><name>vkCreateDebugUtilsMessengerEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pfn_vkCreateDebugUtilsMessengerEXT</name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>inst</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dbg</name></expr></argument>,

<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>alloc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>debug_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<typedef>typedef <type><struct>struct <name>VulkanDeviceSelection</name> <block>{

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>uuid</name><index>[<expr><name>VK_UUID_SIZE</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>has_uuid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>pci_device</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>vendor_id</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>index</name></decl>;</decl_stmt> 

}</block></struct></type> <name>VulkanDeviceSelection</name>;</typedef>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>vk_dev_type</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>VkPhysicalDeviceType</name></name></type> <name>type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU</name></expr>:</case> <return>return <expr><literal type="string">"integrated"</literal></expr>;</return>

<case>case <expr><name>VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU</name></expr>:</case> <return>return <expr><literal type="string">"discrete"</literal></expr>;</return>

<case>case <expr><name>VK_PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU</name></expr>:</case> <return>return <expr><literal type="string">"virtual"</literal></expr>;</return>

<case>case <expr><name>VK_PHYSICAL_DEVICE_TYPE_CPU</name></expr>:</case> <return>return <expr><literal type="string">"software"</literal></expr>;</return>

<default>default:</default> <return>return <expr><literal type="string">"unknown"</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>find_device</name><parameter_list>(<parameter><decl><type><name>AVHWDeviceContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>VulkanDeviceSelection</name> <modifier>*</modifier></type><name>select</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>choice</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>num</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkResult</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkPhysicalDevice</name> <modifier>*</modifier></type><name>devices</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkPhysicalDeviceIDProperties</name> <modifier>*</modifier></type><name>idp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkPhysicalDeviceProperties2</name> <modifier>*</modifier></type><name>prop</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VulkanDevicePriv</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVVulkanDeviceContext</name> <modifier>*</modifier></type><name>hwctx</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>vkEnumeratePhysicalDevices</name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>inst</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>num</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VK_SUCCESS</name> <operator>||</operator> <operator>!</operator><name>num</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"No devices found: %s!\n"</literal></expr></argument>, <argument><expr><call><name>vk_ret2str</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENODEV</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>devices</name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>VkPhysicalDevice</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>devices</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>vkEnumeratePhysicalDevices</name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>inst</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>num</name></expr></argument>, <argument><expr><name>devices</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VK_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed enumerating devices: %s\n"</literal></expr></argument>,

<argument><expr><call><name>vk_ret2str</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENODEV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>prop</name> <operator>=</operator> <call><name>av_mallocz_array</name><argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>prop</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>prop</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>idp</name> <operator>=</operator> <call><name>av_mallocz_array</name><argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>idp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>idp</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"GPU listing:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>idp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sType</name> <operator>=</operator> <name>VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>prop</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sType</name> <operator>=</operator> <name>VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>prop</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pNext</name> <operator>=</operator> <operator>&amp;</operator><name><name>idp</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vkGetPhysicalDeviceProperties2</name><argument_list>(<argument><expr><name><name>devices</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>prop</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">" %d: %s (%s) (0x%x)\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>,

<argument><expr><name><name>prop</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>properties</name><operator>.</operator><name>deviceName</name></name></expr></argument>,

<argument><expr><call><name>vk_dev_type</name><argument_list>(<argument><expr><name><name>prop</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>properties</name><operator>.</operator><name>deviceType</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>prop</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>properties</name><operator>.</operator><name>deviceID</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>select</name><operator>-&gt;</operator><name>has_uuid</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name><name>idp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>deviceUUID</name></expr></argument>, <argument><expr><name><name>select</name><operator>-&gt;</operator><name>uuid</name></name></expr></argument>, <argument><expr><name>VK_UUID_SIZE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>choice</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unable to find device by given UUID!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENODEV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>select</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"Requested device: %s\n"</literal></expr></argument>, <argument><expr><name><name>select</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><name><name>prop</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>properties</name><operator>.</operator><name>deviceName</name></name></expr></argument>, <argument><expr><name><name>select</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>choice</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unable to find device \"%s\"!\n"</literal></expr></argument>,

<argument><expr><name><name>select</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENODEV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>select</name><operator>-&gt;</operator><name>pci_device</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"Requested device: 0x%x\n"</literal></expr></argument>, <argument><expr><name><name>select</name><operator>-&gt;</operator><name>pci_device</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>select</name><operator>-&gt;</operator><name>pci_device</name></name> <operator>==</operator> <name><name>prop</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>properties</name><operator>.</operator><name>deviceID</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>choice</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unable to find device with PCI ID 0x%x!\n"</literal></expr></argument>,

<argument><expr><name><name>select</name><operator>-&gt;</operator><name>pci_device</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>select</name><operator>-&gt;</operator><name>vendor_id</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"Requested vendor: 0x%x\n"</literal></expr></argument>, <argument><expr><name><name>select</name><operator>-&gt;</operator><name>vendor_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>select</name><operator>-&gt;</operator><name>vendor_id</name></name> <operator>==</operator> <name><name>prop</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>properties</name><operator>.</operator><name>vendorID</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>choice</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unable to find device with Vendor ID 0x%x!\n"</literal></expr></argument>,

<argument><expr><name><name>select</name><operator>-&gt;</operator><name>vendor_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENODEV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>select</name><operator>-&gt;</operator><name>index</name></name> <operator>&lt;</operator> <name>num</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>choice</name> <operator>=</operator> <name><name>select</name><operator>-&gt;</operator><name>index</name></name></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unable to find device with index %i!\n"</literal></expr></argument>,

<argument><expr><name><name>select</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENODEV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></else></if_stmt>

<label><name>end</name>:</label>

<if_stmt><if>if <condition>(<expr><name>choice</name> <operator>&gt;</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>dev_is_nvidia</name></name> <operator>=</operator> <operator>(</operator><name><name>prop</name><index>[<expr><name>choice</name></expr>]</index></name><operator>.</operator><name><name>properties</name><operator>.</operator><name>vendorID</name></name> <operator>==</operator> <literal type="number">0x10de</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hwctx</name><operator>-&gt;</operator><name>phys_dev</name></name> <operator>=</operator> <name><name>devices</name><index>[<expr><name>choice</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>devices</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>prop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>idp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>search_queue_families</name><parameter_list>(<parameter><decl><type><name>AVHWDeviceContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>VkDeviceCreateInfo</name> <modifier>*</modifier></type><name>cd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>num</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkQueueFamilyProperties</name> <modifier>*</modifier></type><name>qs</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVVulkanDeviceContext</name> <modifier>*</modifier></type><name>hwctx</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>graph_index</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>comp_index</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>tx_index</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkDeviceQueueCreateInfo</name> <modifier>*</modifier></type><name>pc</name> <init>= <expr><operator>(</operator><name>VkDeviceQueueCreateInfo</name> <operator>*</operator><operator>)</operator><name><name>cd</name><operator>-&gt;</operator><name>pQueueCreateInfos</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vkGetPhysicalDeviceQueueFamilyProperties</name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>phys_dev</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>num</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>num</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to get queues!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_EXTERNAL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>qs</name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>VkQueueFamilyProperties</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>qs</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vkGetPhysicalDeviceQueueFamilyProperties</name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>phys_dev</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>num</name></expr></argument>, <argument><expr><name>qs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEARCH_FLAGS</name><parameter_list>(<parameter><type><name>expr</name></type></parameter>, <parameter><type><name>out</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (int i = 0; i &lt; num; i++) { const VkQueueFlagBits flags = qs[i].queueFlags; if (expr) { out = i; break; } }</cpp:value></cpp:define>

<macro><name>SEARCH_FLAGS</name><argument_list>(<argument>flags &amp; VK_QUEUE_GRAPHICS_BIT</argument>, <argument>graph_index</argument>)</argument_list></macro>

<macro><name>SEARCH_FLAGS</name><argument_list>(<argument>(flags &amp; VK_QUEUE_COMPUTE_BIT) &amp;&amp; (i != graph_index)</argument>,

<argument>comp_index</argument>)</argument_list></macro>

<macro><name>SEARCH_FLAGS</name><argument_list>(<argument>(flags &amp; VK_QUEUE_TRANSFER_BIT) &amp;&amp; (i != graph_index) &amp;&amp;

(i != comp_index)</argument>, <argument>tx_index</argument>)</argument_list></macro>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SEARCH_FLAGS</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QF_FLAGS</name><parameter_list>(<parameter><type><name>flags</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((flags) &amp; VK_QUEUE_GRAPHICS_BIT ) ? "(graphics) " : "", ((flags) &amp; VK_QUEUE_COMPUTE_BIT ) ? "(compute) " : "", ((flags) &amp; VK_QUEUE_TRANSFER_BIT ) ? "(transfer) " : "", ((flags) &amp; VK_QUEUE_SPARSE_BINDING_BIT) ? "(sparse) " : ""</cpp:value></cpp:define>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"Using queue family %i for graphics, "</literal>

<literal type="string">"flags: %s%s%s%s\n"</literal></expr></argument>, <argument><expr><name>graph_index</name></expr></argument>, <argument><expr><call><name>QF_FLAGS</name><argument_list>(<argument><expr><name><name>qs</name><index>[<expr><name>graph_index</name></expr>]</index></name><operator>.</operator><name>queueFlags</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hwctx</name><operator>-&gt;</operator><name>queue_family_index</name></name> <operator>=</operator> <name>graph_index</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hwctx</name><operator>-&gt;</operator><name>queue_family_tx_index</name></name> <operator>=</operator> <name>graph_index</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hwctx</name><operator>-&gt;</operator><name>queue_family_comp_index</name></name> <operator>=</operator> <name>graph_index</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pc</name><index>[<expr><name><name>cd</name><operator>-&gt;</operator><name>queueCreateInfoCount</name></name><operator>++</operator></expr>]</index></name><operator>.</operator><name>queueFamilyIndex</name> <operator>=</operator> <name>graph_index</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>comp_index</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"Using queue family %i for compute, "</literal>

<literal type="string">"flags: %s%s%s%s\n"</literal></expr></argument>, <argument><expr><name>comp_index</name></expr></argument>, <argument><expr><call><name>QF_FLAGS</name><argument_list>(<argument><expr><name><name>qs</name><index>[<expr><name>comp_index</name></expr>]</index></name><operator>.</operator><name>queueFlags</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hwctx</name><operator>-&gt;</operator><name>queue_family_tx_index</name></name> <operator>=</operator> <name>comp_index</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hwctx</name><operator>-&gt;</operator><name>queue_family_comp_index</name></name> <operator>=</operator> <name>comp_index</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pc</name><index>[<expr><name><name>cd</name><operator>-&gt;</operator><name>queueCreateInfoCount</name></name><operator>++</operator></expr>]</index></name><operator>.</operator><name>queueFamilyIndex</name> <operator>=</operator> <name>comp_index</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>tx_index</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"Using queue family %i for transfers, "</literal>

<literal type="string">"flags: %s%s%s%s\n"</literal></expr></argument>, <argument><expr><name>tx_index</name></expr></argument>, <argument><expr><call><name>QF_FLAGS</name><argument_list>(<argument><expr><name><name>qs</name><index>[<expr><name>tx_index</name></expr>]</index></name><operator>.</operator><name>queueFlags</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hwctx</name><operator>-&gt;</operator><name>queue_family_tx_index</name></name> <operator>=</operator> <name>tx_index</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pc</name><index>[<expr><name><name>cd</name><operator>-&gt;</operator><name>queueCreateInfoCount</name></name><operator>++</operator></expr>]</index></name><operator>.</operator><name>queueFamilyIndex</name> <operator>=</operator> <name>tx_index</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>QF_FLAGS</name></cpp:undef>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>qs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>create_exec_ctx</name><parameter_list>(<parameter><decl><type><name>AVHWDeviceContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>VulkanExecCtx</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>queue_family_index</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VkResult</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVVulkanDeviceContext</name> <modifier>*</modifier></type><name>hwctx</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkCommandPoolCreateInfo</name></type> <name>cqueue_create</name> <init>= <expr><block>{

<expr><operator>.</operator><name>sType</name> <operator>=</operator> <name>VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO</name></expr>,

<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT</name></expr>,

<expr><operator>.</operator><name>queueFamilyIndex</name> <operator>=</operator> <name>queue_family_index</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkCommandBufferAllocateInfo</name></type> <name>cbuf_create</name> <init>= <expr><block>{

<expr><operator>.</operator><name>sType</name> <operator>=</operator> <name>VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO</name></expr>,

<expr><operator>.</operator><name>level</name> <operator>=</operator> <name>VK_COMMAND_BUFFER_LEVEL_PRIMARY</name></expr>,

<expr><operator>.</operator><name>commandBufferCount</name> <operator>=</operator> <literal type="number">1</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkFenceCreateInfo</name></type> <name>fence_spawn</name> <init>= <expr><block>{

<expr><operator>.</operator><name>sType</name> <operator>=</operator> <name>VK_STRUCTURE_TYPE_FENCE_CREATE_INFO</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>vkCreateFence</name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>act_dev</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fence_spawn</name></expr></argument>,

<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>alloc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cmd</name><operator>-&gt;</operator><name>fence</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VK_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to create frame fence: %s\n"</literal></expr></argument>,

<argument><expr><call><name>vk_ret2str</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_EXTERNAL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>vkCreateCommandPool</name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>act_dev</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cqueue_create</name></expr></argument>,

<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>alloc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cmd</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VK_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Command pool creation failure: %s\n"</literal></expr></argument>,

<argument><expr><call><name>vk_ret2str</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_EXTERNAL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>cbuf_create</name><operator>.</operator><name>commandPool</name></name> <operator>=</operator> <name><name>cmd</name><operator>-&gt;</operator><name>pool</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>vkAllocateCommandBuffers</name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>act_dev</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cbuf_create</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cmd</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VK_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Command buffer alloc failure: %s\n"</literal></expr></argument>,

<argument><expr><call><name>vk_ret2str</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_EXTERNAL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vkGetDeviceQueue</name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>act_dev</name></name></expr></argument>, <argument><expr><name><name>cqueue_create</name><operator>.</operator><name>queueFamilyIndex</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>cmd</name><operator>-&gt;</operator><name>queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>free_exec_ctx</name><parameter_list>(<parameter><decl><type><name>AVHWDeviceContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>VulkanExecCtx</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVVulkanDeviceContext</name> <modifier>*</modifier></type><name>hwctx</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cmd</name><operator>-&gt;</operator><name>fence</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vkDestroyFence</name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>act_dev</name></name></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>fence</name></name></expr></argument>, <argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cmd</name><operator>-&gt;</operator><name>buf</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vkFreeCommandBuffers</name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>act_dev</name></name></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cmd</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cmd</name><operator>-&gt;</operator><name>pool</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vkDestroyCommandPool</name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>act_dev</name></name></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vulkan_device_free</name><parameter_list>(<parameter><decl><type><name>AVHWDeviceContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VulkanDevicePriv</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVVulkanDeviceContext</name> <modifier>*</modifier></type><name>hwctx</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free_exec_ctx</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>cmd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vkDestroyDevice</name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>act_dev</name></name></expr></argument>, <argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>debug_ctx</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>VK_LOAD_PFN</name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>inst</name></name></expr></argument>, <argument><expr><name>vkDestroyDebugUtilsMessengerEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pfn_vkDestroyDebugUtilsMessengerEXT</name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>inst</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>debug_ctx</name></name></expr></argument>,

<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vkDestroyInstance</name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>inst</name></name></expr></argument>, <argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vulkan_device_create_internal</name><parameter_list>(<parameter><decl><type><name>AVHWDeviceContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,

<parameter><decl><type><name>VulkanDeviceSelection</name> <modifier>*</modifier></type><name>dev_select</name></decl></parameter>,

<parameter><decl><type><name>AVDictionary</name> <modifier>*</modifier></type><name>opts</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkResult</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVDictionaryEntry</name> <modifier>*</modifier></type><name>opt_d</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VulkanDevicePriv</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVVulkanDeviceContext</name> <modifier>*</modifier></type><name>hwctx</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkDeviceQueueCreateInfo</name></type> <name><name>queue_create_info</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><operator>.</operator><name>sType</name> <operator>=</operator> <name>VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO</name></expr>,

<expr><operator>.</operator><name>pQueuePriorities</name> <operator>=</operator> <operator>(</operator><name><name>float</name> <index>[]</index></name><operator>)</operator><block>{ <expr><literal type="number">1.0f</literal></expr> }</block></expr>,

<expr><operator>.</operator><name>queueCount</name> <operator>=</operator> <literal type="number">1</literal></expr>, }</block></expr>,

<expr><block>{ <expr><operator>.</operator><name>sType</name> <operator>=</operator> <name>VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO</name></expr>,

<expr><operator>.</operator><name>pQueuePriorities</name> <operator>=</operator> <operator>(</operator><name><name>float</name> <index>[]</index></name><operator>)</operator><block>{ <expr><literal type="number">1.0f</literal></expr> }</block></expr>,

<expr><operator>.</operator><name>queueCount</name> <operator>=</operator> <literal type="number">1</literal></expr>, }</block></expr>,

<expr><block>{ <expr><operator>.</operator><name>sType</name> <operator>=</operator> <name>VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO</name></expr>,

<expr><operator>.</operator><name>pQueuePriorities</name> <operator>=</operator> <operator>(</operator><name><name>float</name> <index>[]</index></name><operator>)</operator><block>{ <expr><literal type="number">1.0f</literal></expr> }</block></expr>,

<expr><operator>.</operator><name>queueCount</name> <operator>=</operator> <literal type="number">1</literal></expr>, }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkDeviceCreateInfo</name></type> <name>dev_info</name> <init>= <expr><block>{

<expr><operator>.</operator><name>sType</name> <operator>=</operator> <name>VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO</name></expr>,

<expr><operator>.</operator><name>pQueueCreateInfos</name> <operator>=</operator> <name>queue_create_info</name></expr>,

<expr><operator>.</operator><name>queueCreateInfoCount</name> <operator>=</operator> <literal type="number">0</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>free</name></name> <operator>=</operator> <name>vulkan_device_free</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>create_instance</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>opts</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>find_device</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>dev_select</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vkGetPhysicalDeviceProperties</name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>phys_dev</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>props</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"Using device: %s\n"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>props</name><operator>.</operator><name>deviceName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"Alignments:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">" optimalBufferCopyOffsetAlignment: %li\n"</literal></expr></argument>,

<argument><expr><name><name>p</name><operator>-&gt;</operator><name>props</name><operator>.</operator><name>limits</name><operator>.</operator><name>optimalBufferCopyOffsetAlignment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">" optimalBufferCopyRowPitchAlignment: %li\n"</literal></expr></argument>,

<argument><expr><name><name>p</name><operator>-&gt;</operator><name>props</name><operator>.</operator><name>limits</name><operator>.</operator><name>optimalBufferCopyRowPitchAlignment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">" minMemoryMapAlignment: %li\n"</literal></expr></argument>,

<argument><expr><name><name>p</name><operator>-&gt;</operator><name>props</name><operator>.</operator><name>limits</name><operator>.</operator><name>minMemoryMapAlignment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>search_queue_families</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dev_info</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>check_extensions</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dev_info</name><operator>.</operator><name>ppEnabledExtensionNames</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>dev_info</name><operator>.</operator><name>enabledExtensionCount</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>vkCreateDevice</name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>phys_dev</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dev_info</name></expr></argument>, <argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>alloc</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>hwctx</name><operator>-&gt;</operator><name>act_dev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>dev_info</name><operator>.</operator><name>ppEnabledExtensionNames</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VK_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Device creation failure: %s\n"</literal></expr></argument>,

<argument><expr><call><name>vk_ret2str</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <name>AVERROR_EXTERNAL</name></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>opt_d</name> <operator>=</operator> <call><name>av_dict_get</name><argument_list>(<argument><expr><name>opts</name></expr></argument>, <argument><expr><literal type="string">"linear_images"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>opt_d</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>use_linear_images</name></name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name><name>opt_d</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<label><name>end</name>:</label>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vulkan_device_init</name><parameter_list>(<parameter><decl><type><name>AVHWDeviceContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>queue_num</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVVulkanDeviceContext</name> <modifier>*</modifier></type><name>hwctx</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VulkanDevicePriv</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vkGetPhysicalDeviceQueueFamilyProperties</name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>phys_dev</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>queue_num</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>queue_num</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to get queues!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_EXTERNAL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_QUEUE</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (n &gt;= queue_num) { av_log(ctx, AV_LOG_ERROR, "Invalid %s queue index %i (device has %i queues)!\n", type, n, queue_num); return AVERROR(EINVAL); }</cpp:value></cpp:define>

<macro><name>CHECK_QUEUE</name><argument_list>(<argument><literal type="string">"graphics"</literal></argument>, <argument>hwctx-&gt;queue_family_index</argument>)</argument_list></macro>

<macro><name>CHECK_QUEUE</name><argument_list>(<argument><literal type="string">"upload"</literal></argument>, <argument>hwctx-&gt;queue_family_tx_index</argument>)</argument_list></macro>

<macro><name>CHECK_QUEUE</name><argument_list>(<argument><literal type="string">"compute"</literal></argument>, <argument>hwctx-&gt;queue_family_comp_index</argument>)</argument_list></macro>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CHECK_QUEUE</name></cpp:undef>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>create_exec_ctx</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>cmd</name></name></expr></argument>, <argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>queue_family_tx_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vkGetPhysicalDeviceMemoryProperties</name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>phys_dev</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>mprops</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vulkan_device_create</name><parameter_list>(<parameter><decl><type><name>AVHWDeviceContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>device</name></decl></parameter>,

<parameter><decl><type><name>AVDictionary</name> <modifier>*</modifier></type><name>opts</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VulkanDeviceSelection</name></type> <name>dev_select</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>device</name> <operator>&amp;&amp;</operator> <name><name>device</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dev_select</name><operator>.</operator><name>index</name></name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>device</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>end</name> <operator>==</operator> <name>device</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>dev_select</name><operator>.</operator><name>index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dev_select</name><operator>.</operator><name>name</name></name> <operator>=</operator> <name>device</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>vulkan_device_create_internal</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dev_select</name></expr></argument>, <argument><expr><name>opts</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vulkan_device_derive</name><parameter_list>(<parameter><decl><type><name>AVHWDeviceContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,

<parameter><decl><type><name>AVHWDeviceContext</name> <modifier>*</modifier></type><name>src_ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>av_unused</name> <name>VulkanDeviceSelection</name></type> <name>dev_select</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<switch>switch<condition>(<expr><name><name>src_ctx</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_LIBDRM</name></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_VAAPI</name></expr></cpp:if>

<case>case <expr><name>AV_HWDEVICE_TYPE_VAAPI</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>AVVAAPIDeviceContext</name> <modifier>*</modifier></type><name>src_hwctx</name> <init>= <expr><name><name>src_ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>vendor</name> <init>= <expr><call><name>vaQueryVendorString</name><argument_list>(<argument><expr><name><name>src_hwctx</name><operator>-&gt;</operator><name>display</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>vendor</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unable to get device info from VAAPI!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_EXTERNAL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><name>vendor</name></expr></argument>, <argument><expr><literal type="string">"Intel"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dev_select</name><operator>.</operator><name>vendor_id</name></name> <operator>=</operator> <literal type="number">0x8086</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><name>vendor</name></expr></argument>, <argument><expr><literal type="string">"AMD"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dev_select</name><operator>.</operator><name>vendor_id</name></name> <operator>=</operator> <literal type="number">0x1002</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>vulkan_device_create_internal</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dev_select</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><name>AV_HWDEVICE_TYPE_DRM</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>AVDRMDeviceContext</name> <modifier>*</modifier></type><name>src_hwctx</name> <init>= <expr><name><name>src_ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drmDevice</name> <modifier>*</modifier></type><name>drm_dev_info</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>drmGetDevice</name><argument_list>(<argument><expr><name><name>src_hwctx</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>drm_dev_info</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unable to get device info from DRM fd!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_EXTERNAL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>drm_dev_info</name><operator>-&gt;</operator><name>bustype</name></name> <operator>==</operator> <name>DRM_BUS_PCI</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dev_select</name><operator>.</operator><name>pci_device</name></name> <operator>=</operator> <name><name>drm_dev_info</name><operator>-&gt;</operator><name>deviceinfo</name><operator>.</operator><name>pci</name><operator>-&gt;</operator><name>device_id</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>drmFreeDevice</name><argument_list>(<argument><expr><operator>&amp;</operator><name>drm_dev_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>vulkan_device_create_internal</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dev_select</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_CUDA</name></expr></cpp:if>

<case>case <expr><name>AV_HWDEVICE_TYPE_CUDA</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>AVHWDeviceContext</name> <modifier>*</modifier></type><name>cuda_cu</name> <init>= <expr><name>src_ctx</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCUDADeviceContext</name> <modifier>*</modifier></type><name>src_hwctx</name> <init>= <expr><name><name>src_ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCUDADeviceContextInternal</name> <modifier>*</modifier></type><name>cu_internal</name> <init>= <expr><name><name>src_hwctx</name><operator>-&gt;</operator><name>internal</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CudaFunctions</name> <modifier>*</modifier></type><name>cu</name> <init>= <expr><name><name>cu_internal</name><operator>-&gt;</operator><name>cuda_dl</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>CHECK_CU</name><argument_list>(<argument><expr><call><name><name>cu</name><operator>-&gt;</operator><name>cuDeviceGetUuid</name></name><argument_list>(<argument><expr><operator>(</operator><name>CUuuid</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>dev_select</name><operator>.</operator><name>uuid</name></name></expr></argument>,

<argument><expr><name><name>cu_internal</name><operator>-&gt;</operator><name>cuda_device</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unable to get UUID from CUDA!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_EXTERNAL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>dev_select</name><operator>.</operator><name>has_uuid</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><call><name>vulkan_device_create_internal</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dev_select</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<default>default:</default>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vulkan_frames_get_constraints</name><parameter_list>(<parameter><decl><type><name>AVHWDeviceContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>hwconfig</name></decl></parameter>,

<parameter><decl><type><name>AVHWFramesConstraints</name> <modifier>*</modifier></type><name>constraints</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVVulkanDeviceContext</name> <modifier>*</modifier></type><name>hwctx</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VulkanDevicePriv</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>AV_PIX_FMT_NB</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>count</name> <operator>+=</operator> <call><name>pixfmt_is_supported</name><argument_list>(<argument><expr><name>hwctx</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>use_linear_images</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_CUDA</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>dev_is_nvidia</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>constraints</name><operator>-&gt;</operator><name>valid_sw_formats</name></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name>count</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>enum <name>AVPixelFormat</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>constraints</name><operator>-&gt;</operator><name>valid_sw_formats</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>AV_PIX_FMT_NB</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>pixfmt_is_supported</name><argument_list>(<argument><expr><name>hwctx</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>use_linear_images</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>constraints</name><operator>-&gt;</operator><name>valid_sw_formats</name><index>[<expr><name>count</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_CUDA</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>dev_is_nvidia</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>constraints</name><operator>-&gt;</operator><name>valid_sw_formats</name><index>[<expr><name>count</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>AV_PIX_FMT_CUDA</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>constraints</name><operator>-&gt;</operator><name>valid_sw_formats</name><index>[<expr><name>count</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>AV_PIX_FMT_NONE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>constraints</name><operator>-&gt;</operator><name>min_width</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>constraints</name><operator>-&gt;</operator><name>min_height</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>constraints</name><operator>-&gt;</operator><name>max_width</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>props</name><operator>.</operator><name>limits</name><operator>.</operator><name>maxImageDimension2D</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>constraints</name><operator>-&gt;</operator><name>max_height</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>props</name><operator>.</operator><name>limits</name><operator>.</operator><name>maxImageDimension2D</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>constraints</name><operator>-&gt;</operator><name>valid_hw_formats</name></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>enum <name>AVPixelFormat</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>constraints</name><operator>-&gt;</operator><name>valid_hw_formats</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>constraints</name><operator>-&gt;</operator><name>valid_hw_formats</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>AV_PIX_FMT_VULKAN</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>constraints</name><operator>-&gt;</operator><name>valid_hw_formats</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>AV_PIX_FMT_NONE</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>alloc_mem</name><parameter_list>(<parameter><decl><type><name>AVHWDeviceContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>VkMemoryRequirements</name> <modifier>*</modifier></type><name>req</name></decl></parameter>,

<parameter><decl><type><name>VkMemoryPropertyFlagBits</name></type> <name>req_flags</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>alloc_extension</name></decl></parameter>,

<parameter><decl><type><name>VkMemoryPropertyFlagBits</name> <modifier>*</modifier></type><name>mem_flags</name></decl></parameter>, <parameter><decl><type><name>VkDeviceMemory</name> <modifier>*</modifier></type><name>mem</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VkResult</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VulkanDevicePriv</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVVulkanDeviceContext</name> <modifier>*</modifier></type><name>dev_hwctx</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkMemoryAllocateInfo</name></type> <name>alloc_info</name> <init>= <expr><block>{

<expr><operator>.</operator><name>sType</name> <operator>=</operator> <name>VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO</name></expr>,

<expr><operator>.</operator><name>pNext</name> <operator>=</operator> <name>alloc_extension</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>req_flags</name> <operator>&amp;</operator> <name>VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>props</name><operator>.</operator><name>limits</name><operator>.</operator><name>minMemoryMapAlignment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>alloc_info</name><operator>.</operator><name>allocationSize</name></name> <operator>=</operator> <name><name>req</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p</name><operator>-&gt;</operator><name>mprops</name><operator>.</operator><name>memoryTypeCount</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>req</name><operator>-&gt;</operator><name>memoryTypeBits</name></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>i</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>mprops</name><operator>.</operator><name>memoryTypes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>propertyFlags</name> <operator>&amp;</operator> <name>req_flags</name><operator>)</operator> <operator>!=</operator> <name>req_flags</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>index</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>index</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"No memory type found for flags 0x%x\n"</literal></expr></argument>,

<argument><expr><name>req_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>alloc_info</name><operator>.</operator><name>memoryTypeIndex</name></name> <operator>=</operator> <name>index</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>vkAllocateMemory</name><argument_list>(<argument><expr><name><name>dev_hwctx</name><operator>-&gt;</operator><name>act_dev</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>alloc_info</name></expr></argument>,

<argument><expr><name><name>dev_hwctx</name><operator>-&gt;</operator><name>alloc</name></name></expr></argument>, <argument><expr><name>mem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VK_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to allocate memory: %s\n"</literal></expr></argument>,

<argument><expr><call><name>vk_ret2str</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>mem_flags</name> <operator>|=</operator> <name><name>p</name><operator>-&gt;</operator><name>mprops</name><operator>.</operator><name>memoryTypes</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>propertyFlags</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vulkan_free_internal</name><parameter_list>(<parameter><decl><type><name>AVVkFrameInternal</name> <modifier>*</modifier></type><name>internal</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>internal</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_CUDA</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>internal</name><operator>-&gt;</operator><name>cuda_fc_ref</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>cuda_fc</name> <init>= <expr><operator>(</operator><name>AVHWFramesContext</name> <operator>*</operator><operator>)</operator><name><name>internal</name><operator>-&gt;</operator><name>cuda_fc_ref</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>planes</name> <init>= <expr><call><name>av_pix_fmt_count_planes</name><argument_list>(<argument><expr><name><name>cuda_fc</name><operator>-&gt;</operator><name>sw_format</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVHWDeviceContext</name> <modifier>*</modifier></type><name>cuda_cu</name> <init>= <expr><name><name>cuda_fc</name><operator>-&gt;</operator><name>device_ctx</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCUDADeviceContext</name> <modifier>*</modifier></type><name>cuda_dev</name> <init>= <expr><name><name>cuda_cu</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCUDADeviceContextInternal</name> <modifier>*</modifier></type><name>cu_internal</name> <init>= <expr><name><name>cuda_dev</name><operator>-&gt;</operator><name>internal</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CudaFunctions</name> <modifier>*</modifier></type><name>cu</name> <init>= <expr><name><name>cu_internal</name><operator>-&gt;</operator><name>cuda_dl</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>planes</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>internal</name><operator>-&gt;</operator><name>cu_sem</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>CHECK_CU</name><argument_list>(<argument><expr><call><name><name>cu</name><operator>-&gt;</operator><name>cuDestroyExternalSemaphore</name></name><argument_list>(<argument><expr><name><name>internal</name><operator>-&gt;</operator><name>cu_sem</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>internal</name><operator>-&gt;</operator><name>cu_mma</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>CHECK_CU</name><argument_list>(<argument><expr><call><name><name>cu</name><operator>-&gt;</operator><name>cuMipmappedArrayDestroy</name></name><argument_list>(<argument><expr><name><name>internal</name><operator>-&gt;</operator><name>cu_mma</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>internal</name><operator>-&gt;</operator><name>ext_mem</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>CHECK_CU</name><argument_list>(<argument><expr><call><name><name>cu</name><operator>-&gt;</operator><name>cuDestroyExternalMemory</name></name><argument_list>(<argument><expr><name><name>internal</name><operator>-&gt;</operator><name>ext_mem</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>internal</name><operator>-&gt;</operator><name>cuda_fc_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>internal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vulkan_frame_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVVkFrame</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><operator>(</operator><name>AVVkFrame</name> <operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>hwfc</name> <init>= <expr><name>opaque</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVVulkanDeviceContext</name> <modifier>*</modifier></type><name>hwctx</name> <init>= <expr><name><name>hwfc</name><operator>-&gt;</operator><name>device_ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>planes</name> <init>= <expr><call><name>av_pix_fmt_count_planes</name><argument_list>(<argument><expr><name><name>hwfc</name><operator>-&gt;</operator><name>sw_format</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vulkan_free_internal</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>internal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>planes</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>vkDestroyImage</name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>act_dev</name></name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>img</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vkFreeMemory</name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>act_dev</name></name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>mem</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vkDestroySemaphore</name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>act_dev</name></name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>sem</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>alloc_bind_mem</name><parameter_list>(<parameter><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>hwfc</name></decl></parameter>, <parameter><decl><type><name>AVVkFrame</name> <modifier>*</modifier></type><name>f</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>alloc_pnext</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>alloc_pnext_stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkResult</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVHWDeviceContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>hwfc</name><operator>-&gt;</operator><name>device_ctx</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>planes</name> <init>= <expr><call><name>av_pix_fmt_count_planes</name><argument_list>(<argument><expr><name><name>hwfc</name><operator>-&gt;</operator><name>sw_format</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkBindImageMemoryInfo</name></type> <name><name>bind_info</name><index>[<expr><name>AV_NUM_DATA_POINTERS</name></expr>]</index></name> <init>= <expr><block>{ <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVVulkanDeviceContext</name> <modifier>*</modifier></type><name>hwctx</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>planes</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>use_ded_mem</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkImageMemoryRequirementsInfo2</name></type> <name>req_desc</name> <init>= <expr><block>{

<expr><operator>.</operator><name>sType</name> <operator>=</operator> <name>VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2</name></expr>,

<expr><operator>.</operator><name>image</name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>img</name><index>[<expr><name>i</name></expr>]</index></name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkMemoryDedicatedAllocateInfo</name></type> <name>ded_alloc</name> <init>= <expr><block>{

<expr><operator>.</operator><name>sType</name> <operator>=</operator> <name>VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO</name></expr>,

<expr><operator>.</operator><name>pNext</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>alloc_pnext</name><operator>)</operator> <operator>+</operator> <name>i</name><operator>*</operator><name>alloc_pnext_stride</name><operator>)</operator></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkMemoryDedicatedRequirements</name></type> <name>ded_req</name> <init>= <expr><block>{

<expr><operator>.</operator><name>sType</name> <operator>=</operator> <name>VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkMemoryRequirements2</name></type> <name>req</name> <init>= <expr><block>{

<expr><operator>.</operator><name>sType</name> <operator>=</operator> <name>VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2</name></expr>,

<expr><operator>.</operator><name>pNext</name> <operator>=</operator> <operator>&amp;</operator><name>ded_req</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vkGetImageMemoryRequirements2</name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>act_dev</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req_desc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>use_ded_mem</name> <operator>=</operator> <name><name>ded_req</name><operator>.</operator><name>prefersDedicatedAllocation</name></name> <operator>|</operator>

<name><name>ded_req</name><operator>.</operator><name>requiresDedicatedAllocation</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>use_ded_mem</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ded_alloc</name><operator>.</operator><name>image</name></name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>img</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>alloc_mem</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>req</name><operator>.</operator><name>memoryRequirements</name></name></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>f</name><operator>-&gt;</operator><name>tiling</name></name> <operator>==</operator> <name>VK_IMAGE_TILING_LINEAR</name></expr> ?</condition><then>

<expr><name>VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT</name></expr> </then><else>:

<expr><name>VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT</name></expr></else></ternary></expr></argument>,

<argument><expr><ternary><condition><expr><name>use_ded_mem</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name>ded_alloc</name></expr> </then><else>: <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>ded_alloc</name><operator>.</operator><name>pNext</name></name></expr></else></ternary></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>mem</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>size</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>req</name><operator>.</operator><name>memoryRequirements</name><operator>.</operator><name>size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bind_info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sType</name> <operator>=</operator> <name>VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bind_info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>image</name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>img</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bind_info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>memory</name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>mem</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>vkBindImageMemory2</name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>act_dev</name></name></expr></argument>, <argument><expr><name>planes</name></expr></argument>, <argument><expr><name>bind_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VK_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to bind memory: %s\n"</literal></expr></argument>,

<argument><expr><call><name>vk_ret2str</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_EXTERNAL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<enum>enum <name>PrepMode</name> <block>{

<decl><name>PREP_MODE_WRITE</name></decl>,

<decl><name>PREP_MODE_RO_SHADER</name></decl>,

}</block>;</enum>

<function><type><specifier>static</specifier> <name>int</name></type> <name>prepare_frame</name><parameter_list>(<parameter><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>hwfc</name></decl></parameter>, <parameter><decl><type><name>VulkanExecCtx</name> <modifier>*</modifier></type><name>ectx</name></decl></parameter>,

<parameter><decl><type><name>AVVkFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>PrepMode</name></name></type> <name>pmode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VkResult</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkImageLayout</name></type> <name>new_layout</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkAccessFlags</name></type> <name>new_access</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVHWDeviceContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>hwfc</name><operator>-&gt;</operator><name>device_ctx</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVVulkanDeviceContext</name> <modifier>*</modifier></type><name>hwctx</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>planes</name> <init>= <expr><call><name>av_pix_fmt_count_planes</name><argument_list>(<argument><expr><name><name>hwfc</name><operator>-&gt;</operator><name>sw_format</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkImageMemoryBarrier</name></type> <name><name>img_bar</name><index>[<expr><name>AV_NUM_DATA_POINTERS</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkCommandBufferBeginInfo</name></type> <name>cmd_start</name> <init>= <expr><block>{

<expr><operator>.</operator><name>sType</name> <operator>=</operator> <name>VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO</name></expr>,

<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkSubmitInfo</name></type> <name>s_info</name> <init>= <expr><block>{

<expr><operator>.</operator><name>sType</name> <operator>=</operator> <name>VK_STRUCTURE_TYPE_SUBMIT_INFO</name></expr>,

<expr><operator>.</operator><name>commandBufferCount</name> <operator>=</operator> <literal type="number">1</literal></expr>,

<expr><operator>.</operator><name>pCommandBuffers</name> <operator>=</operator> <operator>&amp;</operator><name><name>ectx</name><operator>-&gt;</operator><name>buf</name></name></expr>,

<expr><operator>.</operator><name>pSignalSemaphores</name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>sem</name></name></expr>,

<expr><operator>.</operator><name>signalSemaphoreCount</name> <operator>=</operator> <name>planes</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>pmode</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>PREP_MODE_WRITE</name></expr>:</case>

<expr_stmt><expr><name>new_layout</name> <operator>=</operator> <name>VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>new_access</name> <operator>=</operator> <name>VK_ACCESS_TRANSFER_WRITE_BIT</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>PREP_MODE_RO_SHADER</name></expr>:</case>

<expr_stmt><expr><name>new_layout</name> <operator>=</operator> <name>VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>new_access</name> <operator>=</operator> <name>VK_ACCESS_TRANSFER_READ_BIT</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>vkBeginCommandBuffer</name><argument_list>(<argument><expr><name><name>ectx</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cmd_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VK_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_EXTERNAL</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>planes</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>img_bar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sType</name> <operator>=</operator> <name>VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>img_bar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>srcAccessMask</name> <operator>=</operator> <literal type="number">0x0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>img_bar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dstAccessMask</name> <operator>=</operator> <name>new_access</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>img_bar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>oldLayout</name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>layout</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>img_bar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>newLayout</name> <operator>=</operator> <name>new_layout</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>img_bar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>srcQueueFamilyIndex</name> <operator>=</operator> <name>VK_QUEUE_FAMILY_IGNORED</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>img_bar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dstQueueFamilyIndex</name> <operator>=</operator> <name>VK_QUEUE_FAMILY_IGNORED</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>img_bar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>image</name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>img</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>img_bar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>subresourceRange</name><operator>.</operator><name>levelCount</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>img_bar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>subresourceRange</name><operator>.</operator><name>layerCount</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>img_bar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>subresourceRange</name><operator>.</operator><name>aspectMask</name></name> <operator>=</operator> <name>VK_IMAGE_ASPECT_COLOR_BIT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>layout</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>img_bar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>newLayout</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>access</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>img_bar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dstAccessMask</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>vkCmdPipelineBarrier</name><argument_list>(<argument><expr><name><name>ectx</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT</name></expr></argument>,

<argument><expr><name>VK_PIPELINE_STAGE_TRANSFER_BIT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>planes</name></expr></argument>, <argument><expr><name>img_bar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>vkEndCommandBuffer</name><argument_list>(<argument><expr><name><name>ectx</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VK_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_EXTERNAL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>vkQueueSubmit</name><argument_list>(<argument><expr><name><name>ectx</name><operator>-&gt;</operator><name>queue</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>s_info</name></expr></argument>, <argument><expr><name><name>ectx</name><operator>-&gt;</operator><name>fence</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VK_SUCCESS</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>AVERROR_EXTERNAL</name></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>vkWaitForFences</name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>act_dev</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ectx</name><operator>-&gt;</operator><name>fence</name></name></expr></argument>, <argument><expr><name>VK_TRUE</name></expr></argument>, <argument><expr><name>UINT64_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vkResetFences</name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>act_dev</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ectx</name><operator>-&gt;</operator><name>fence</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>create_frame</name><parameter_list>(<parameter><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>hwfc</name></decl></parameter>, <parameter><decl><type><name>AVVkFrame</name> <modifier>*</modifier><modifier>*</modifier></type><name>frame</name></decl></parameter>,

<parameter><decl><type><name>VkImageTiling</name></type> <name>tiling</name></decl></parameter>, <parameter><decl><type><name>VkImageUsageFlagBits</name></type> <name>usage</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>create_pnext</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkResult</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVHWDeviceContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>hwfc</name><operator>-&gt;</operator><name>device_ctx</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VulkanDevicePriv</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVVulkanDeviceContext</name> <modifier>*</modifier></type><name>hwctx</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>format</name> <init>= <expr><name><name>hwfc</name><operator>-&gt;</operator><name>sw_format</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>VkFormat</name> <modifier>*</modifier></type><name>img_fmts</name> <init>= <expr><call><name>av_vkfmt_from_pixfmt</name><argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>planes</name> <init>= <expr><call><name>av_pix_fmt_count_planes</name><argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkExportSemaphoreCreateInfo</name></type> <name>ext_sem_info</name> <init>= <expr><block>{

<expr><operator>.</operator><name>sType</name> <operator>=</operator> <name>VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO</name></expr>,

<expr><operator>.</operator><name>handleTypes</name> <operator>=</operator> <name>VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkSemaphoreCreateInfo</name></type> <name>sem_spawn</name> <init>= <expr><block>{

<expr><operator>.</operator><name>sType</name> <operator>=</operator> <name>VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO</name></expr>,

<expr><operator>.</operator><name>pNext</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>extensions</name></name> <operator>&amp;</operator> <name>EXT_EXTERNAL_FD_SEM</name> <operator>?</operator> <operator>&amp;</operator><name>ext_sem_info</name> <operator>:</operator> <name>NULL</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVVkFrame</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><call><name>av_vk_frame_alloc</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>f</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unable to allocate memory for AVVkFrame!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>planes</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>w</name> <init>= <expr><name><name>hwfc</name><operator>-&gt;</operator><name>width</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>h</name> <init>= <expr><name><name>hwfc</name><operator>-&gt;</operator><name>height</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>p_w</name> <init>= <expr><ternary><condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_w</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>w</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>p_h</name> <init>= <expr><ternary><condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_h</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>h</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkImageCreateInfo</name></type> <name>image_create_info</name> <init>= <expr><block>{

<expr><operator>.</operator><name>sType</name> <operator>=</operator> <name>VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO</name></expr>,

<expr><operator>.</operator><name>pNext</name> <operator>=</operator> <name>create_pnext</name></expr>,

<expr><operator>.</operator><name>imageType</name> <operator>=</operator> <name>VK_IMAGE_TYPE_2D</name></expr>,

<expr><operator>.</operator><name>format</name> <operator>=</operator> <name><name>img_fmts</name><index>[<expr><name>i</name></expr>]</index></name></expr>,

<expr><operator>.</operator><name><name>extent</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name>p_w</name></expr>,

<expr><operator>.</operator><name><name>extent</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name>p_h</name></expr>,

<expr><operator>.</operator><name><name>extent</name><operator>.</operator><name>depth</name></name> <operator>=</operator> <literal type="number">1</literal></expr>,

<expr><operator>.</operator><name>mipLevels</name> <operator>=</operator> <literal type="number">1</literal></expr>,

<expr><operator>.</operator><name>arrayLayers</name> <operator>=</operator> <literal type="number">1</literal></expr>,

<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>VK_IMAGE_CREATE_ALIAS_BIT</name></expr>,

<expr><operator>.</operator><name>tiling</name> <operator>=</operator> <name>tiling</name></expr>,

<expr><operator>.</operator><name>initialLayout</name> <operator>=</operator> <name>VK_IMAGE_LAYOUT_UNDEFINED</name></expr>,

<expr><operator>.</operator><name>usage</name> <operator>=</operator> <name>usage</name></expr>,

<expr><operator>.</operator><name>sharingMode</name> <operator>=</operator> <name>VK_SHARING_MODE_EXCLUSIVE</name></expr>,

<expr><operator>.</operator><name>samples</name> <operator>=</operator> <name>VK_SAMPLE_COUNT_1_BIT</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>vkCreateImage</name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>act_dev</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>image_create_info</name></expr></argument>,

<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>alloc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>img</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VK_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Image creation failure: %s\n"</literal></expr></argument>,

<argument><expr><call><name>vk_ret2str</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>vkCreateSemaphore</name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>act_dev</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sem_spawn</name></expr></argument>,

<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>alloc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>sem</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VK_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to create semaphore: %s\n"</literal></expr></argument>,

<argument><expr><call><name>vk_ret2str</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_EXTERNAL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>layout</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>image_create_info</name><operator>.</operator><name>initialLayout</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>access</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0x0</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <literal type="number">0x0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>tiling</name></name> <operator>=</operator> <name>tiling</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>frame</name> <operator>=</operator> <name>f</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>vulkan_frame_free</name><argument_list>(<argument><expr><name>hwfc</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>try_export_flags</name><parameter_list>(<parameter><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>hwfc</name></decl></parameter>,

<parameter><decl><type><name>VkExternalMemoryHandleTypeFlags</name> <modifier>*</modifier></type><name>comp_handle_types</name></decl></parameter>,

<parameter><decl><type><name>VkExternalMemoryHandleTypeFlagBits</name> <modifier>*</modifier></type><name>iexp</name></decl></parameter>,

<parameter><decl><type><name>VkExternalMemoryHandleTypeFlagBits</name></type> <name>exp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VkResult</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVVulkanFramesContext</name> <modifier>*</modifier></type><name>hwctx</name> <init>= <expr><name><name>hwfc</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVVulkanDeviceContext</name> <modifier>*</modifier></type><name>dev_hwctx</name> <init>= <expr><name><name>hwfc</name><operator>-&gt;</operator><name>device_ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkExternalImageFormatProperties</name></type> <name>eprops</name> <init>= <expr><block>{

<expr><operator>.</operator><name>sType</name> <operator>=</operator> <name>VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES_KHR</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkImageFormatProperties2</name></type> <name>props</name> <init>= <expr><block>{

<expr><operator>.</operator><name>sType</name> <operator>=</operator> <name>VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2</name></expr>,

<expr><operator>.</operator><name>pNext</name> <operator>=</operator> <operator>&amp;</operator><name>eprops</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkPhysicalDeviceExternalImageFormatInfo</name></type> <name>enext</name> <init>= <expr><block>{

<expr><operator>.</operator><name>sType</name> <operator>=</operator> <name>VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO</name></expr>,

<expr><operator>.</operator><name>handleType</name> <operator>=</operator> <name>exp</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkPhysicalDeviceImageFormatInfo2</name></type> <name>pinfo</name> <init>= <expr><block>{

<expr><operator>.</operator><name>sType</name> <operator>=</operator> <name>VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2</name></expr>,

<expr><operator>.</operator><name>pNext</name> <operator>=</operator> <operator>!</operator><name>exp</name> <operator>?</operator> <name>NULL</name> <operator>:</operator> <operator>&amp;</operator><name>enext</name></expr>,

<expr><operator>.</operator><name>format</name> <operator>=</operator> <call><name>av_vkfmt_from_pixfmt</name><argument_list>(<argument><expr><name><name>hwfc</name><operator>-&gt;</operator><name>sw_format</name></name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>VK_IMAGE_TYPE_2D</name></expr>,

<expr><operator>.</operator><name>tiling</name> <operator>=</operator> <name><name>hwctx</name><operator>-&gt;</operator><name>tiling</name></name></expr>,

<expr><operator>.</operator><name>usage</name> <operator>=</operator> <name><name>hwctx</name><operator>-&gt;</operator><name>usage</name></name></expr>,

<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>VK_IMAGE_CREATE_ALIAS_BIT</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>vkGetPhysicalDeviceImageFormatProperties2</name><argument_list>(<argument><expr><name><name>dev_hwctx</name><operator>-&gt;</operator><name>phys_dev</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>pinfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>props</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>VK_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>iexp</name> <operator>|=</operator> <name>exp</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>comp_handle_types</name> <operator>|=</operator> <name><name>eprops</name><operator>.</operator><name>externalMemoryProperties</name><operator>.</operator><name>compatibleHandleTypes</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>AVBufferRef</name> <modifier>*</modifier></type><name>vulkan_pool_alloc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVVkFrame</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVBufferRef</name> <modifier>*</modifier></type><name>avbuf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>hwfc</name> <init>= <expr><name>opaque</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVVulkanFramesContext</name> <modifier>*</modifier></type><name>hwctx</name> <init>= <expr><name><name>hwfc</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VulkanDevicePriv</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>hwfc</name><operator>-&gt;</operator><name>device_ctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkExportMemoryAllocateInfo</name></type> <name><name>eminfo</name><index>[<expr><name>AV_NUM_DATA_POINTERS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkExternalMemoryHandleTypeFlags</name></type> <name>e</name> <init>= <expr><literal type="number">0x0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkExternalMemoryImageCreateInfo</name></type> <name>eiinfo</name> <init>= <expr><block>{

<expr><operator>.</operator><name>sType</name> <operator>=</operator> <name>VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO</name></expr>,

<expr><operator>.</operator><name>pNext</name> <operator>=</operator> <name><name>hwctx</name><operator>-&gt;</operator><name>create_pnext</name></name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>extensions</name></name> <operator>&amp;</operator> <name>EXT_EXTERNAL_FD_MEMORY</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>try_export_flags</name><argument_list>(<argument><expr><name>hwfc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>eiinfo</name><operator>.</operator><name>handleTypes</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>e</name></expr></argument>,

<argument><expr><name>VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>extensions</name></name> <operator>&amp;</operator> <name>EXT_EXTERNAL_DMABUF_MEMORY</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>try_export_flags</name><argument_list>(<argument><expr><name>hwfc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>eiinfo</name><operator>.</operator><name>handleTypes</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>e</name></expr></argument>,

<argument><expr><name>VK_EXTERNAL_MEMORY_HANDLE_TYPE_DMA_BUF_BIT_EXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>av_pix_fmt_count_planes</name><argument_list>(<argument><expr><name><name>hwfc</name><operator>-&gt;</operator><name>sw_format</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>eminfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sType</name> <operator>=</operator> <name>VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>eminfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pNext</name> <operator>=</operator> <name><name>hwctx</name><operator>-&gt;</operator><name>alloc_pnext</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>eminfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>handleTypes</name> <operator>=</operator> <name>e</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>create_frame</name><argument_list>(<argument><expr><name>hwfc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>f</name></expr></argument>, <argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>tiling</name></name></expr></argument>, <argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>usage</name></name></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>eiinfo</name><operator>.</operator><name>handleTypes</name></name></expr> ?</condition><then> <expr><operator>&amp;</operator><name>eiinfo</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>alloc_bind_mem</name><argument_list>(<argument><expr><name>hwfc</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>eminfo</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>eminfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>prepare_frame</name><argument_list>(<argument><expr><name>hwfc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>cmd</name></name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>PREP_MODE_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>avbuf</name> <operator>=</operator> <call><name>av_buffer_create</name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>f</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>AVVkFrame</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><name>vulkan_frame_free</name></expr></argument>, <argument><expr><name>hwfc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>avbuf</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<return>return <expr><name>avbuf</name></expr>;</return>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>vulkan_frame_free</name><argument_list>(<argument><expr><name>hwfc</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vulkan_frames_uninit</name><parameter_list>(<parameter><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>hwfc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VulkanFramesPriv</name> <modifier>*</modifier></type><name>fp</name> <init>= <expr><name><name>hwfc</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free_exec_ctx</name><argument_list>(<argument><expr><name><name>hwfc</name><operator>-&gt;</operator><name>device_ctx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fp</name><operator>-&gt;</operator><name>cmd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vulkan_frames_init</name><parameter_list>(<parameter><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>hwfc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVVkFrame</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVVulkanFramesContext</name> <modifier>*</modifier></type><name>hwctx</name> <init>= <expr><name><name>hwfc</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VulkanFramesPriv</name> <modifier>*</modifier></type><name>fp</name> <init>= <expr><name><name>hwfc</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVVulkanDeviceContext</name> <modifier>*</modifier></type><name>dev_hwctx</name> <init>= <expr><name><name>hwfc</name><operator>-&gt;</operator><name>device_ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VulkanDevicePriv</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>hwfc</name><operator>-&gt;</operator><name>device_ctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hwfc</name><operator>-&gt;</operator><name>pool</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>hwctx</name><operator>-&gt;</operator><name>tiling</name></name> <operator>=</operator> <ternary><condition><expr><name><name>hwctx</name><operator>-&gt;</operator><name>tiling</name></name></expr> ?</condition><then> <expr><name><name>hwctx</name><operator>-&gt;</operator><name>tiling</name></name></expr> </then><else>: <expr><ternary><condition><expr><name><name>p</name><operator>-&gt;</operator><name>use_linear_images</name></name></expr> ?</condition><then>

<expr><name>VK_IMAGE_TILING_LINEAR</name></expr> </then><else>: <expr><name>VK_IMAGE_TILING_OPTIMAL</name></expr></else></ternary></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hwctx</name><operator>-&gt;</operator><name>usage</name></name> <operator>|=</operator> <name>DEFAULT_USAGE_FLAGS</name></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>create_exec_ctx</name><argument_list>(<argument><expr><name><name>hwfc</name><operator>-&gt;</operator><name>device_ctx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fp</name><operator>-&gt;</operator><name>cmd</name></name></expr></argument>,

<argument><expr><name><name>dev_hwctx</name><operator>-&gt;</operator><name>queue_family_tx_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>create_frame</name><argument_list>(<argument><expr><name>hwfc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>f</name></expr></argument>, <argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>tiling</name></name></expr></argument>, <argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>usage</name></name></expr></argument>,

<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>create_pnext</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free_exec_ctx</name><argument_list>(<argument><expr><name><name>hwfc</name><operator>-&gt;</operator><name>device_ctx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>cmd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vulkan_frame_free</name><argument_list>(<argument><expr><name>hwfc</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hwfc</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>pool_internal</name></name> <operator>=</operator> <call><name>av_buffer_pool_init2</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>AVVkFrame</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><name>hwfc</name></expr></argument>, <argument><expr><name>vulkan_pool_alloc</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>hwfc</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>pool_internal</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free_exec_ctx</name><argument_list>(<argument><expr><name><name>hwfc</name><operator>-&gt;</operator><name>device_ctx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>cmd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vulkan_get_buffer</name><parameter_list>(<parameter><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>hwfc</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>av_buffer_pool_get</name><argument_list>(<argument><expr><name><name>hwfc</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>frame</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>data</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>AV_PIX_FMT_VULKAN</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>hwfc</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>hwfc</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vulkan_transfer_get_formats</name><parameter_list>(<parameter><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>hwfc</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>AVHWFrameTransferDirection</name></name></type> <name>dir</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>formats</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name> <modifier>*</modifier></type><name>fmts</name> <init>= <expr><call><name>av_malloc_array</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>fmts</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fmts</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>fmts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>hwfc</name><operator>-&gt;</operator><name>sw_format</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmts</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>AV_PIX_FMT_NONE</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>formats</name> <operator>=</operator> <name>fmts</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<typedef>typedef <type><struct>struct <name>VulkanMapping</name> <block>{

<decl_stmt><decl><type><name>AVVkFrame</name> <modifier>*</modifier></type><name>frame</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>

}</block></struct></type> <name>VulkanMapping</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vulkan_unmap_frame</name><parameter_list>(<parameter><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>hwfc</name></decl></parameter>, <parameter><decl><type><name>HWMapDescriptor</name> <modifier>*</modifier></type><name>hwmap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VulkanMapping</name> <modifier>*</modifier></type><name>map</name> <init>= <expr><name><name>hwmap</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVVulkanDeviceContext</name> <modifier>*</modifier></type><name>hwctx</name> <init>= <expr><name><name>hwfc</name><operator>-&gt;</operator><name>device_ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>planes</name> <init>= <expr><call><name>av_pix_fmt_count_planes</name><argument_list>(<argument><expr><name><name>hwfc</name><operator>-&gt;</operator><name>sw_format</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>map</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_HWFRAME_MAP_WRITE</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>!</operator><operator>(</operator><name><name>map</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>VK_MEMORY_PROPERTY_HOST_COHERENT_BIT</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>VkResult</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkMappedMemoryRange</name></type> <name><name>flush_ranges</name><index>[<expr><name>AV_NUM_DATA_POINTERS</name></expr>]</index></name> <init>= <expr><block>{ <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>planes</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>flush_ranges</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sType</name> <operator>=</operator> <name>VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>flush_ranges</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>memory</name> <operator>=</operator> <name><name>map</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>mem</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>flush_ranges</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>=</operator> <name>VK_WHOLE_SIZE</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>vkFlushMappedMemoryRanges</name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>act_dev</name></name></expr></argument>, <argument><expr><name>planes</name></expr></argument>,

<argument><expr><name>flush_ranges</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VK_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwfc</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to flush memory: %s\n"</literal></expr></argument>,

<argument><expr><call><name>vk_ret2str</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>planes</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vkUnmapMemory</name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>act_dev</name></name></expr></argument>, <argument><expr><name><name>map</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>mem</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vulkan_map_frame_to_mem</name><parameter_list>(<parameter><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>hwfc</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VkResult</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>mapped_mem_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVVkFrame</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><operator>(</operator><name>AVVkFrame</name> <operator>*</operator><operator>)</operator><name><name>src</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVVulkanDeviceContext</name> <modifier>*</modifier></type><name>hwctx</name> <init>= <expr><name><name>hwfc</name><operator>-&gt;</operator><name>device_ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>planes</name> <init>= <expr><call><name>av_pix_fmt_count_planes</name><argument_list>(<argument><expr><name><name>hwfc</name><operator>-&gt;</operator><name>sw_format</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VulkanMapping</name> <modifier>*</modifier></type><name>map</name> <init>= <expr><call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>VulkanMapping</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>map</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>src</name><operator>-&gt;</operator><name>format</name></name> <operator>!=</operator> <name>AV_PIX_FMT_VULKAN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwfc</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Cannot map from pixel format %s!\n"</literal></expr></argument>,

<argument><expr><call><name>av_get_pix_fmt_name</name><argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>f</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT</name><operator>)</operator> <operator>||</operator>

<operator>!</operator><operator>(</operator><name><name>f</name><operator>-&gt;</operator><name>tiling</name></name> <operator>==</operator> <name>VK_IMAGE_TILING_LINEAR</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwfc</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unable to map frame, not host visible "</literal>

<literal type="string">"and linear!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>planes</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>vkMapMemory</name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>act_dev</name></name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>mem</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>VK_WHOLE_SIZE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>dst</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VK_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwfc</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to map image memory: %s\n"</literal></expr></argument>,

<argument><expr><call><name>vk_ret2str</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <name>AVERROR_EXTERNAL</name></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>mapped_mem_count</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>AV_HWFRAME_MAP_READ</name><operator>)</operator> <operator>||</operator> <operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>AV_HWFRAME_MAP_OVERWRITE</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>!</operator><operator>(</operator><name><name>f</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>VK_MEMORY_PROPERTY_HOST_COHERENT_BIT</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>VkMappedMemoryRange</name></type> <name><name>map_mem_ranges</name><index>[<expr><name>AV_NUM_DATA_POINTERS</name></expr>]</index></name> <init>= <expr><block>{ <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>planes</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>map_mem_ranges</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sType</name> <operator>=</operator> <name>VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>map_mem_ranges</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>=</operator> <name>VK_WHOLE_SIZE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>map_mem_ranges</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>memory</name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>mem</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>vkInvalidateMappedMemoryRanges</name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>act_dev</name></name></expr></argument>, <argument><expr><name>planes</name></expr></argument>,

<argument><expr><name>map_mem_ranges</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VK_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwfc</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to invalidate memory: %s\n"</literal></expr></argument>,

<argument><expr><call><name>vk_ret2str</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <name>AVERROR_EXTERNAL</name></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>planes</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>VkImageSubresource</name></type> <name>sub</name> <init>= <expr><block>{

<expr><operator>.</operator><name>aspectMask</name> <operator>=</operator> <name>VK_IMAGE_ASPECT_COLOR_BIT</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkSubresourceLayout</name></type> <name>layout</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vkGetImageSubresourceLayout</name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>act_dev</name></name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>img</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sub</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>layout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>layout</name><operator>.</operator><name>rowPitch</name></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>frame</name></name> <operator>=</operator> <name>f</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_hwframe_map_create</name><argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>vulkan_unmap_frame</name></expr></argument>, <argument><expr><name>map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>fail</name>:</label>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>mapped_mem_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vkUnmapMemory</name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>act_dev</name></name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>mem</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_LIBDRM</name></expr></cpp:if>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vulkan_unmap_from</name><parameter_list>(<parameter><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>hwfc</name></decl></parameter>, <parameter><decl><type><name>HWMapDescriptor</name> <modifier>*</modifier></type><name>hwmap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VulkanMapping</name> <modifier>*</modifier></type><name>map</name> <init>= <expr><name><name>hwmap</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVVulkanDeviceContext</name> <modifier>*</modifier></type><name>hwctx</name> <init>= <expr><name><name>hwfc</name><operator>-&gt;</operator><name>device_ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>planes</name> <init>= <expr><call><name>av_pix_fmt_count_planes</name><argument_list>(<argument><expr><name><name>hwfc</name><operator>-&gt;</operator><name>sw_format</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>planes</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>vkDestroyImage</name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>act_dev</name></name></expr></argument>, <argument><expr><name><name>map</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>img</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vkFreeMemory</name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>act_dev</name></name></expr></argument>, <argument><expr><name><name>map</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>mem</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vkDestroySemaphore</name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>act_dev</name></name></expr></argument>, <argument><expr><name><name>map</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>sem</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>map</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name>drm_fourcc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkFormat</name></type> <name>vk_format</name></decl>;</decl_stmt>

}</block> <decl><name><name>vulkan_drm_format_map</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><name>DRM_FORMAT_R8</name></expr>, <expr><name>VK_FORMAT_R8_UNORM</name></expr> }</block></expr>,

<expr><block>{ <expr><name>DRM_FORMAT_R16</name></expr>, <expr><name>VK_FORMAT_R16_UNORM</name></expr> }</block></expr>,

<expr><block>{ <expr><name>DRM_FORMAT_GR88</name></expr>, <expr><name>VK_FORMAT_R8G8_UNORM</name></expr> }</block></expr>,

<expr><block>{ <expr><name>DRM_FORMAT_RG88</name></expr>, <expr><name>VK_FORMAT_R8G8_UNORM</name></expr> }</block></expr>,

<expr><block>{ <expr><name>DRM_FORMAT_GR1616</name></expr>, <expr><name>VK_FORMAT_R16G16_UNORM</name></expr> }</block></expr>,

<expr><block>{ <expr><name>DRM_FORMAT_RG1616</name></expr>, <expr><name>VK_FORMAT_R16G16_UNORM</name></expr> }</block></expr>,

<expr><block>{ <expr><name>DRM_FORMAT_ARGB8888</name></expr>, <expr><name>VK_FORMAT_B8G8R8A8_UNORM</name></expr> }</block></expr>,

<expr><block>{ <expr><name>DRM_FORMAT_XRGB8888</name></expr>, <expr><name>VK_FORMAT_B8G8R8A8_UNORM</name></expr> }</block></expr>,

<expr><block>{ <expr><name>DRM_FORMAT_ABGR8888</name></expr>, <expr><name>VK_FORMAT_R8G8B8A8_UNORM</name></expr> }</block></expr>,

<expr><block>{ <expr><name>DRM_FORMAT_XBGR8888</name></expr>, <expr><name>VK_FORMAT_R8G8B8A8_UNORM</name></expr> }</block></expr>,

}</block></expr></init></decl>;</struct>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>VkFormat</name></type> <name>drm_to_vulkan_fmt</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>drm_fourcc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>vulkan_drm_format_map</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>vulkan_drm_format_map</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>drm_fourcc</name> <operator>==</operator> <name>drm_fourcc</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>vulkan_drm_format_map</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>vk_format</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><name>VK_FORMAT_UNDEFINED</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vulkan_map_from_drm_frame_desc</name><parameter_list>(<parameter><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>hwfc</name></decl></parameter>, <parameter><decl><type><name>AVVkFrame</name> <modifier>*</modifier><modifier>*</modifier></type><name>frame</name></decl></parameter>,

<parameter><decl><type><name>AVDRMFrameDescriptor</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkResult</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVVkFrame</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bind_counts</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVHWDeviceContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>hwfc</name><operator>-&gt;</operator><name>device_ctx</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVVulkanDeviceContext</name> <modifier>*</modifier></type><name>hwctx</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VulkanDevicePriv</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>fmt_desc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>hwfc</name><operator>-&gt;</operator><name>sw_format</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>has_modifiers</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>extensions</name></name> <operator>&amp;</operator> <name>EXT_DRM_MODIFIER_FLAGS</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkSubresourceLayout</name></type> <name><name>plane_data</name><index>[<expr><name>AV_NUM_DATA_POINTERS</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkBindImageMemoryInfo</name></type> <name><name>bind_info</name><index>[<expr><name>AV_NUM_DATA_POINTERS</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkBindImagePlaneMemoryInfo</name></type> <name><name>plane_info</name><index>[<expr><name>AV_NUM_DATA_POINTERS</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkExternalMemoryHandleTypeFlagBits</name></type> <name>htype</name> <init>= <expr><name>VK_EXTERNAL_MEMORY_HANDLE_TYPE_DMA_BUF_BIT_EXT</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>VK_LOAD_PFN</name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>inst</name></name></expr></argument>, <argument><expr><name>vkGetMemoryFdPropertiesKHR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>desc</name><operator>-&gt;</operator><name>nb_layers</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>drm_to_vulkan_fmt</name><argument_list>(<argument><expr><name><name>desc</name><operator>-&gt;</operator><name>layers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>format</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>VK_FORMAT_UNDEFINED</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unsupported DMABUF layer format %#08x!\n"</literal></expr></argument>,

<argument><expr><name><name>desc</name><operator>-&gt;</operator><name>layers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>f</name> <operator>=</operator> <call><name>av_vk_frame_alloc</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unable to allocate memory for AVVkFrame!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>desc</name><operator>-&gt;</operator><name>nb_objects</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>VkMemoryFdPropertiesKHR</name></type> <name>fdmp</name> <init>= <expr><block>{

<expr><operator>.</operator><name>sType</name> <operator>=</operator> <name>VK_STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHR</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkMemoryRequirements</name></type> <name>req</name> <init>= <expr><block>{

<expr><operator>.</operator><name>size</name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>objects</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkImportMemoryFdInfoKHR</name></type> <name>idesc</name> <init>= <expr><block>{

<expr><operator>.</operator><name>sType</name> <operator>=</operator> <name>VK_STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR</name></expr>,

<expr><operator>.</operator><name>handleType</name> <operator>=</operator> <name>htype</name></expr>,

<expr><operator>.</operator><name>fd</name> <operator>=</operator> <call><name>dup</name><argument_list>(<argument><expr><name><name>desc</name><operator>-&gt;</operator><name>objects</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fd</name></expr></argument>)</argument_list></call></expr>,

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>pfn_vkGetMemoryFdPropertiesKHR</name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>act_dev</name></name></expr></argument>, <argument><expr><name>htype</name></expr></argument>,

<argument><expr><name><name>idesc</name><operator>.</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fdmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VK_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwfc</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to get FD properties: %s\n"</literal></expr></argument>,

<argument><expr><call><name>vk_ret2str</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <name>AVERROR_EXTERNAL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>idesc</name><operator>.</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>req</name><operator>.</operator><name>memoryTypeBits</name></name> <operator>=</operator> <name><name>fdmp</name><operator>.</operator><name>memoryTypeBits</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>alloc_mem</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>, <argument><expr><name>VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>idesc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>mem</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>idesc</name><operator>.</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>size</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>objects</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>tiling</name></name> <operator>=</operator> <ternary><condition><expr><name>has_modifiers</name></expr> ?</condition><then> <expr><name>VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT</name></expr> </then><else>:

<expr><ternary><condition><expr><name><name>desc</name><operator>-&gt;</operator><name>objects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>format_modifier</name> <operator>==</operator> <name>DRM_FORMAT_MOD_LINEAR</name></expr> ?</condition><then>

<expr><name>VK_IMAGE_TILING_LINEAR</name></expr> </then><else>: <expr><name>VK_IMAGE_TILING_OPTIMAL</name></expr></else></ternary></expr></else></ternary></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>desc</name><operator>-&gt;</operator><name>nb_layers</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>planes</name> <init>= <expr><name><name>desc</name><operator>-&gt;</operator><name>layers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nb_planes</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>signal_p</name> <init>= <expr><name>has_modifiers</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>planes</name> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkImageDrmFormatModifierExplicitCreateInfoEXT</name></type> <name>drm_info</name> <init>= <expr><block>{

<expr><operator>.</operator><name>sType</name> <operator>=</operator> <name>VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT</name></expr>,

<expr><operator>.</operator><name>drmFormatModifier</name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>objects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>format_modifier</name></expr>,

<expr><operator>.</operator><name>drmFormatModifierPlaneCount</name> <operator>=</operator> <name>planes</name></expr>,

<expr><operator>.</operator><name>pPlaneLayouts</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>VkSubresourceLayout</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>plane_data</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkExternalMemoryImageCreateInfo</name></type> <name>einfo</name> <init>= <expr><block>{

<expr><operator>.</operator><name>sType</name> <operator>=</operator> <name>VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO</name></expr>,

<expr><operator>.</operator><name>pNext</name> <operator>=</operator> <name>has_modifiers</name> <operator>?</operator> <operator>&amp;</operator><name>drm_info</name> <operator>:</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>handleTypes</name> <operator>=</operator> <name>htype</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkSemaphoreCreateInfo</name></type> <name>sem_spawn</name> <init>= <expr><block>{

<expr><operator>.</operator><name>sType</name> <operator>=</operator> <name>VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>p_w</name> <init>= <expr><ternary><condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name><name>hwfc</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>fmt_desc</name><operator>-&gt;</operator><name>log2_chroma_w</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name><name>hwfc</name><operator>-&gt;</operator><name>width</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>p_h</name> <init>= <expr><ternary><condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name><name>hwfc</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name><name>fmt_desc</name><operator>-&gt;</operator><name>log2_chroma_h</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name><name>hwfc</name><operator>-&gt;</operator><name>height</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkImageCreateInfo</name></type> <name>image_create_info</name> <init>= <expr><block>{

<expr><operator>.</operator><name>sType</name> <operator>=</operator> <name>VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO</name></expr>,

<expr><operator>.</operator><name>pNext</name> <operator>=</operator> <operator>&amp;</operator><name>einfo</name></expr>,

<expr><operator>.</operator><name>imageType</name> <operator>=</operator> <name>VK_IMAGE_TYPE_2D</name></expr>,

<expr><operator>.</operator><name>format</name> <operator>=</operator> <call><name>drm_to_vulkan_fmt</name><argument_list>(<argument><expr><name><name>desc</name><operator>-&gt;</operator><name>layers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>format</name></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name><name>extent</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name>p_w</name></expr>,

<expr><operator>.</operator><name><name>extent</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name>p_h</name></expr>,

<expr><operator>.</operator><name><name>extent</name><operator>.</operator><name>depth</name></name> <operator>=</operator> <literal type="number">1</literal></expr>,

<expr><operator>.</operator><name>mipLevels</name> <operator>=</operator> <literal type="number">1</literal></expr>,

<expr><operator>.</operator><name>arrayLayers</name> <operator>=</operator> <literal type="number">1</literal></expr>,

<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>VK_IMAGE_CREATE_ALIAS_BIT</name> <operator>|</operator>

<operator>(</operator><name>signal_p</name> <operator>?</operator> <name>VK_IMAGE_CREATE_DISJOINT_BIT</name> <operator>:</operator> <literal type="number">0x0</literal><operator>)</operator></expr>,

<expr><operator>.</operator><name>tiling</name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>tiling</name></name></expr>,

<expr><operator>.</operator><name>initialLayout</name> <operator>=</operator> <name>VK_IMAGE_LAYOUT_UNDEFINED</name></expr>, 

<expr><operator>.</operator><name>usage</name> <operator>=</operator> <name>DEFAULT_USAGE_FLAGS</name></expr>,

<expr><operator>.</operator><name>sharingMode</name> <operator>=</operator> <name>VK_SHARING_MODE_EXCLUSIVE</name></expr>,

<expr><operator>.</operator><name>samples</name> <operator>=</operator> <name>VK_SAMPLE_COUNT_1_BIT</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>planes</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>plane_data</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>offset</name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>layers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>planes</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>plane_data</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>rowPitch</name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>layers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>planes</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>pitch</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>plane_data</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>plane_data</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>arrayPitch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>plane_data</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>depthPitch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>vkCreateImage</name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>act_dev</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>image_create_info</name></expr></argument>,

<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>alloc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>img</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VK_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Image creation failure: %s\n"</literal></expr></argument>,

<argument><expr><call><name>vk_ret2str</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>vkCreateSemaphore</name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>act_dev</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sem_spawn</name></expr></argument>,

<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>alloc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>sem</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VK_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to create semaphore: %s\n"</literal></expr></argument>,

<argument><expr><call><name>vk_ret2str</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_EXTERNAL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>layout</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>image_create_info</name><operator>.</operator><name>initialLayout</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>access</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0x0</literal></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>planes</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>VkImageAspectFlagBits</name></type> <name>aspect</name> <init>= <expr><ternary><condition><expr><name>j</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>VK_IMAGE_ASPECT_MEMORY_PLANE_0_BIT_EXT</name></expr> </then><else>:

<expr><ternary><condition><expr><name>j</name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name>VK_IMAGE_ASPECT_MEMORY_PLANE_1_BIT_EXT</name></expr> </then><else>:

<expr><name>VK_IMAGE_ASPECT_MEMORY_PLANE_2_BIT_EXT</name></expr></else></ternary></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>plane_info</name><index>[<expr><name>bind_counts</name></expr>]</index></name><operator>.</operator><name>sType</name> <operator>=</operator> <name>VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>plane_info</name><index>[<expr><name>bind_counts</name></expr>]</index></name><operator>.</operator><name>planeAspect</name> <operator>=</operator> <name>aspect</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bind_info</name><index>[<expr><name>bind_counts</name></expr>]</index></name><operator>.</operator><name>sType</name> <operator>=</operator> <name>VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bind_info</name><index>[<expr><name>bind_counts</name></expr>]</index></name><operator>.</operator><name>pNext</name> <operator>=</operator> <ternary><condition><expr><name>signal_p</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>plane_info</name><index>[<expr><name>bind_counts</name></expr>]</index></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bind_info</name><index>[<expr><name>bind_counts</name></expr>]</index></name><operator>.</operator><name>image</name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>img</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bind_info</name><index>[<expr><name>bind_counts</name></expr>]</index></name><operator>.</operator><name>memory</name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>mem</name><index>[<expr><name><name>desc</name><operator>-&gt;</operator><name>layers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>planes</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>object_index</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bind_info</name><index>[<expr><name>bind_counts</name></expr>]</index></name><operator>.</operator><name>memoryOffset</name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>layers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>planes</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name>bind_counts</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>vkBindImageMemory2</name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>act_dev</name></name></expr></argument>, <argument><expr><name>bind_counts</name></expr></argument>, <argument><expr><name>bind_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VK_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to bind memory: %s\n"</literal></expr></argument>,

<argument><expr><call><name>vk_ret2str</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_EXTERNAL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>prepare_frame</name><argument_list>(<argument><expr><name>hwfc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>cmd</name></name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>PREP_MODE_RO_SHADER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>frame</name> <operator>=</operator> <name>f</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>fail</name>:</label>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>desc</name><operator>-&gt;</operator><name>nb_layers</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>vkDestroyImage</name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>act_dev</name></name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>img</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vkDestroySemaphore</name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>act_dev</name></name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>sem</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>desc</name><operator>-&gt;</operator><name>nb_objects</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vkFreeMemory</name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>act_dev</name></name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>mem</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vulkan_map_from_drm</name><parameter_list>(<parameter><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>hwfc</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVVkFrame</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VulkanMapping</name> <modifier>*</modifier></type><name>map</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>vulkan_map_from_drm_frame_desc</name><argument_list>(<argument><expr><name>hwfc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>f</name></expr></argument>,

<argument><expr><operator>(</operator><name>AVDRMFrameDescriptor</name> <operator>*</operator><operator>)</operator><name><name>src</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>f</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>map</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>VulkanMapping</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>map</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>frame</name></name> <operator>=</operator> <name>f</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_hwframe_map_create</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>vulkan_unmap_from</name></expr></argument>, <argument><expr><name>map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwfc</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Mapped DRM object to Vulkan!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>vulkan_frame_free</name><argument_list>(<argument><expr><name><name>hwfc</name><operator>-&gt;</operator><name>device_ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_VAAPI</name></expr></cpp:if>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vulkan_map_from_vaapi</name><parameter_list>(<parameter><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>dst_fc</name></decl></parameter>,

<parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><call><name>av_frame_alloc</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>vaapi_fc</name> <init>= <expr><operator>(</operator><name>AVHWFramesContext</name><operator>*</operator><operator>)</operator><name><name>src</name><operator>-&gt;</operator><name>hw_frames_ctx</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVVAAPIDeviceContext</name> <modifier>*</modifier></type><name>vaapi_ctx</name> <init>= <expr><name><name>vaapi_fc</name><operator>-&gt;</operator><name>device_ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VASurfaceID</name></type> <name>surface_id</name> <init>= <expr><operator>(</operator><name>VASurfaceID</name><operator>)</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name><name>src</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tmp</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vaSyncSurface</name><argument_list>(<argument><expr><name><name>vaapi_ctx</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><name>surface_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>AV_PIX_FMT_DRM_PRIME</name></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>av_hwframe_map</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>vulkan_map_from_drm</name><argument_list>(<argument><expr><name>dst_fc</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_hwframe_map_replace</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_CUDA</name></expr></cpp:if>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vulkan_export_to_cuda</name><parameter_list>(<parameter><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>hwfc</name></decl></parameter>,

<parameter><decl><type><name>AVBufferRef</name> <modifier>*</modifier></type><name>cuda_hwfc</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkResult</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVVkFrame</name> <modifier>*</modifier></type><name>dst_f</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVVkFrameInternal</name> <modifier>*</modifier></type><name>dst_int</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVHWDeviceContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>hwfc</name><operator>-&gt;</operator><name>device_ctx</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVVulkanDeviceContext</name> <modifier>*</modifier></type><name>hwctx</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>planes</name> <init>= <expr><call><name>av_pix_fmt_count_planes</name><argument_list>(<argument><expr><name><name>hwfc</name><operator>-&gt;</operator><name>sw_format</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>hwfc</name><operator>-&gt;</operator><name>sw_format</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>VK_LOAD_PFN</name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>inst</name></name></expr></argument>, <argument><expr><name>vkGetMemoryFdKHR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VK_LOAD_PFN</name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>inst</name></name></expr></argument>, <argument><expr><name>vkGetSemaphoreFdKHR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>cuda_fc</name> <init>= <expr><operator>(</operator><name>AVHWFramesContext</name><operator>*</operator><operator>)</operator><name><name>cuda_hwfc</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVHWDeviceContext</name> <modifier>*</modifier></type><name>cuda_cu</name> <init>= <expr><name><name>cuda_fc</name><operator>-&gt;</operator><name>device_ctx</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCUDADeviceContext</name> <modifier>*</modifier></type><name>cuda_dev</name> <init>= <expr><name><name>cuda_cu</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCUDADeviceContextInternal</name> <modifier>*</modifier></type><name>cu_internal</name> <init>= <expr><name><name>cuda_dev</name><operator>-&gt;</operator><name>internal</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CudaFunctions</name> <modifier>*</modifier></type><name>cu</name> <init>= <expr><name><name>cu_internal</name><operator>-&gt;</operator><name>cuda_dl</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CUarray_format</name></type> <name>cufmt</name> <init>= <expr><ternary><condition><expr><name><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>depth</name> <operator>&gt;</operator> <literal type="number">8</literal></expr> ?</condition><then> <expr><name>CU_AD_FORMAT_UNSIGNED_INT16</name></expr> </then><else>:

<expr><name>CU_AD_FORMAT_UNSIGNED_INT8</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>dst_f</name> <operator>=</operator> <operator>(</operator><name>AVVkFrame</name> <operator>*</operator><operator>)</operator><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dst_int</name> <operator>=</operator> <name><name>dst_f</name><operator>-&gt;</operator><name>internal</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dst_int</name> <operator>||</operator> <operator>!</operator><name><name>dst_int</name><operator>-&gt;</operator><name>cuda_fc_ref</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dst_f</name><operator>-&gt;</operator><name>internal</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst_f</name><operator>-&gt;</operator><name>internal</name></name> <operator>=</operator> <name>dst_int</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>dst_f</name><operator>-&gt;</operator><name>internal</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dst_int</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>dst_int</name><operator>-&gt;</operator><name>cuda_fc_ref</name></name> <operator>=</operator> <call><name>av_buffer_ref</name><argument_list>(<argument><expr><name>cuda_hwfc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dst_int</name><operator>-&gt;</operator><name>cuda_fc_ref</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>planes</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>CUDA_EXTERNAL_MEMORY_MIPMAPPED_ARRAY_DESC</name></type> <name>tex_desc</name> <init>= <expr><block>{

<expr><operator>.</operator><name>offset</name> <operator>=</operator> <literal type="number">0</literal></expr>,

<expr><operator>.</operator><name>arrayDesc</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>Width</name> <operator>=</operator> <name>i</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>?</operator> <call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name><name>hwfc</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_w</name></name></expr></argument>)</argument_list></call>

<operator>:</operator> <name><name>hwfc</name><operator>-&gt;</operator><name>width</name></name></expr>,

<expr><operator>.</operator><name>Height</name> <operator>=</operator> <name>i</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>?</operator> <call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name><name>hwfc</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_h</name></name></expr></argument>)</argument_list></call>

<operator>:</operator> <name><name>hwfc</name><operator>-&gt;</operator><name>height</name></name></expr>,

<expr><operator>.</operator><name>Depth</name> <operator>=</operator> <literal type="number">0</literal></expr>,

<expr><operator>.</operator><name>Format</name> <operator>=</operator> <name>cufmt</name></expr>,

<expr><operator>.</operator><name>NumChannels</name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><name>planes</name> <operator>==</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>i</name><operator>)</operator></expr>,

<expr><operator>.</operator><name>Flags</name> <operator>=</operator> <literal type="number">0</literal></expr>,

}</block></expr>,

<expr><operator>.</operator><name>numLevels</name> <operator>=</operator> <literal type="number">1</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CUDA_EXTERNAL_MEMORY_HANDLE_DESC</name></type> <name>ext_desc</name> <init>= <expr><block>{

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>CU_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD</name></expr>,

<expr><operator>.</operator><name>size</name> <operator>=</operator> <name><name>dst_f</name><operator>-&gt;</operator><name>size</name><index>[<expr><name>i</name></expr>]</index></name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkMemoryGetFdInfoKHR</name></type> <name>export_info</name> <init>= <expr><block>{

<expr><operator>.</operator><name>sType</name> <operator>=</operator> <name>VK_STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR</name></expr>,

<expr><operator>.</operator><name>memory</name> <operator>=</operator> <name><name>dst_f</name><operator>-&gt;</operator><name>mem</name><index>[<expr><name>i</name></expr>]</index></name></expr>,

<expr><operator>.</operator><name>handleType</name> <operator>=</operator> <name>VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT_KHR</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkSemaphoreGetFdInfoKHR</name></type> <name>sem_export</name> <init>= <expr><block>{

<expr><operator>.</operator><name>sType</name> <operator>=</operator> <name>VK_STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR</name></expr>,

<expr><operator>.</operator><name>semaphore</name> <operator>=</operator> <name><name>dst_f</name><operator>-&gt;</operator><name>sem</name><index>[<expr><name>i</name></expr>]</index></name></expr>,

<expr><operator>.</operator><name>handleType</name> <operator>=</operator> <name>VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC</name></type> <name>ext_sem_desc</name> <init>= <expr><block>{

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>pfn_vkGetMemoryFdKHR</name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>act_dev</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>export_info</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>ext_desc</name><operator>.</operator><name>handle</name><operator>.</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VK_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwfc</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unable to export the image as a FD!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <name>AVERROR_EXTERNAL</name></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>CHECK_CU</name><argument_list>(<argument><expr><call><name><name>cu</name><operator>-&gt;</operator><name>cuImportExternalMemory</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dst_int</name><operator>-&gt;</operator><name>ext_mem</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ext_desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <name>AVERROR_EXTERNAL</name></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>CHECK_CU</name><argument_list>(<argument><expr><call><name><name>cu</name><operator>-&gt;</operator><name>cuExternalMemoryGetMappedMipmappedArray</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dst_int</name><operator>-&gt;</operator><name>cu_mma</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>dst_int</name><operator>-&gt;</operator><name>ext_mem</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>tex_desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <name>AVERROR_EXTERNAL</name></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>CHECK_CU</name><argument_list>(<argument><expr><call><name><name>cu</name><operator>-&gt;</operator><name>cuMipmappedArrayGetLevel</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dst_int</name><operator>-&gt;</operator><name>cu_array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>dst_int</name><operator>-&gt;</operator><name>cu_mma</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <name>AVERROR_EXTERNAL</name></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>pfn_vkGetSemaphoreFdKHR</name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>act_dev</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sem_export</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>ext_sem_desc</name><operator>.</operator><name>handle</name><operator>.</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VK_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to export semaphore: %s\n"</literal></expr></argument>,

<argument><expr><call><name>vk_ret2str</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <name>AVERROR_EXTERNAL</name></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>CHECK_CU</name><argument_list>(<argument><expr><call><name><name>cu</name><operator>-&gt;</operator><name>cuImportExternalSemaphore</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dst_int</name><operator>-&gt;</operator><name>cu_sem</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>ext_sem_desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <name>AVERROR_EXTERNAL</name></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>fail</name>:</label>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vulkan_transfer_data_from_cuda</name><parameter_list>(<parameter><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>hwfc</name></decl></parameter>,

<parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkResult</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CUcontext</name></type> <name>dummy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVVkFrame</name> <modifier>*</modifier></type><name>dst_f</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVVkFrameInternal</name> <modifier>*</modifier></type><name>dst_int</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>planes</name> <init>= <expr><call><name>av_pix_fmt_count_planes</name><argument_list>(<argument><expr><name><name>hwfc</name><operator>-&gt;</operator><name>sw_format</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>hwfc</name><operator>-&gt;</operator><name>sw_format</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>cuda_fc</name> <init>= <expr><operator>(</operator><name>AVHWFramesContext</name><operator>*</operator><operator>)</operator><name><name>src</name><operator>-&gt;</operator><name>hw_frames_ctx</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVHWDeviceContext</name> <modifier>*</modifier></type><name>cuda_cu</name> <init>= <expr><name><name>cuda_fc</name><operator>-&gt;</operator><name>device_ctx</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCUDADeviceContext</name> <modifier>*</modifier></type><name>cuda_dev</name> <init>= <expr><name><name>cuda_cu</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCUDADeviceContextInternal</name> <modifier>*</modifier></type><name>cu_internal</name> <init>= <expr><name><name>cuda_dev</name><operator>-&gt;</operator><name>internal</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CudaFunctions</name> <modifier>*</modifier></type><name>cu</name> <init>= <expr><name><name>cu_internal</name><operator>-&gt;</operator><name>cuda_dl</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS</name></type> <name><name>s_w_par</name><index>[<expr><name>AV_NUM_DATA_POINTERS</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS</name></type> <name><name>s_s_par</name><index>[<expr><name>AV_NUM_DATA_POINTERS</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>CHECK_CU</name><argument_list>(<argument><expr><call><name><name>cu</name><operator>-&gt;</operator><name>cuCtxPushCurrent</name></name><argument_list>(<argument><expr><name><name>cuda_dev</name><operator>-&gt;</operator><name>cuda_ctx</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <name>AVERROR_EXTERNAL</name></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>dst_f</name> <operator>=</operator> <operator>(</operator><name>AVVkFrame</name> <operator>*</operator><operator>)</operator><name><name>dst</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>vulkan_export_to_cuda</name><argument_list>(<argument><expr><name>hwfc</name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>dst_int</name> <operator>=</operator> <name><name>dst_f</name><operator>-&gt;</operator><name>internal</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>CHECK_CU</name><argument_list>(<argument><expr><call><name><name>cu</name><operator>-&gt;</operator><name>cuWaitExternalSemaphoresAsync</name></name><argument_list>(<argument><expr><name><name>dst_int</name><operator>-&gt;</operator><name>cu_sem</name></name></expr></argument>, <argument><expr><name>s_w_par</name></expr></argument>,

<argument><expr><name>planes</name></expr></argument>, <argument><expr><name><name>cuda_dev</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <name>AVERROR_EXTERNAL</name></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>planes</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>CUDA_MEMCPY2D</name></type> <name>cpy</name> <init>= <expr><block>{

<expr><operator>.</operator><name>srcMemoryType</name> <operator>=</operator> <name>CU_MEMORYTYPE_DEVICE</name></expr>,

<expr><operator>.</operator><name>srcDevice</name> <operator>=</operator> <operator>(</operator><name>CUdeviceptr</name><operator>)</operator><name><name>src</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr>,

<expr><operator>.</operator><name>srcPitch</name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name></expr>,

<expr><operator>.</operator><name>srcY</name> <operator>=</operator> <literal type="number">0</literal></expr>,

<expr><operator>.</operator><name>dstMemoryType</name> <operator>=</operator> <name>CU_MEMORYTYPE_ARRAY</name></expr>,

<expr><operator>.</operator><name>dstArray</name> <operator>=</operator> <name><name>dst_int</name><operator>-&gt;</operator><name>cu_array</name><index>[<expr><name>i</name></expr>]</index></name></expr>,

<expr><operator>.</operator><name>WidthInBytes</name> <operator>=</operator> <operator>(</operator><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>?</operator> <call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name><name>hwfc</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_w</name></name></expr></argument>)</argument_list></call>

<operator>:</operator> <name><name>hwfc</name><operator>-&gt;</operator><name>width</name></name><operator>)</operator> <operator>*</operator> <name><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>step</name></expr>,

<expr><operator>.</operator><name>Height</name> <operator>=</operator> <name>i</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>?</operator> <call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name><name>hwfc</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_h</name></name></expr></argument>)</argument_list></call>

<operator>:</operator> <name><name>hwfc</name><operator>-&gt;</operator><name>height</name></name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>CHECK_CU</name><argument_list>(<argument><expr><call><name><name>cu</name><operator>-&gt;</operator><name>cuMemcpy2DAsync</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>cpy</name></expr></argument>, <argument><expr><name><name>cuda_dev</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <name>AVERROR_EXTERNAL</name></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>CHECK_CU</name><argument_list>(<argument><expr><call><name><name>cu</name><operator>-&gt;</operator><name>cuSignalExternalSemaphoresAsync</name></name><argument_list>(<argument><expr><name><name>dst_int</name><operator>-&gt;</operator><name>cu_sem</name></name></expr></argument>, <argument><expr><name>s_s_par</name></expr></argument>,

<argument><expr><name>planes</name></expr></argument>, <argument><expr><name><name>cuda_dev</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <name>AVERROR_EXTERNAL</name></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>CHECK_CU</name><argument_list>(<argument><expr><call><name><name>cu</name><operator>-&gt;</operator><name>cuCtxPopCurrent</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>dummy</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwfc</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"Transfered CUDA image to Vulkan!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>CHECK_CU</name><argument_list>(<argument><expr><call><name><name>cu</name><operator>-&gt;</operator><name>cuCtxPopCurrent</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>dummy</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vulkan_free_internal</name><argument_list>(<argument><expr><name>dst_int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst_f</name><operator>-&gt;</operator><name>internal</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dst</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vulkan_map_to</name><parameter_list>(<parameter><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>hwfc</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>av_unused</name> <name>VulkanDevicePriv</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>hwfc</name><operator>-&gt;</operator><name>device_ctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>src</name><operator>-&gt;</operator><name>format</name></name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_LIBDRM</name></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_VAAPI</name></expr></cpp:if>

<case>case <expr><name>AV_PIX_FMT_VAAPI</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>extensions</name></name> <operator>&amp;</operator> <name>EXT_EXTERNAL_DMABUF_MEMORY</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>vulkan_map_from_vaapi</name><argument_list>(<argument><expr><name>hwfc</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><name>AV_PIX_FMT_DRM_PRIME</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>extensions</name></name> <operator>&amp;</operator> <name>EXT_EXTERNAL_DMABUF_MEMORY</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>vulkan_map_from_drm</name><argument_list>(<argument><expr><name>hwfc</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<default>default:</default>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_LIBDRM</name></expr></cpp:if>

<typedef>typedef <type><struct>struct <name>VulkanDRMMapping</name> <block>{

<decl_stmt><decl><type><name>AVDRMFrameDescriptor</name></type> <name>drm_desc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVVkFrame</name> <modifier>*</modifier></type><name>source</name></decl>;</decl_stmt>

}</block></struct></type> <name>VulkanDRMMapping</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vulkan_unmap_to_drm</name><parameter_list>(<parameter><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>hwfc</name></decl></parameter>, <parameter><decl><type><name>HWMapDescriptor</name> <modifier>*</modifier></type><name>hwmap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVDRMFrameDescriptor</name> <modifier>*</modifier></type><name>drm_desc</name> <init>= <expr><name><name>hwmap</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>drm_desc</name><operator>-&gt;</operator><name>nb_objects</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>drm_desc</name><operator>-&gt;</operator><name>objects</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>drm_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint32_t</name></type> <name>vulkan_fmt_to_drm</name><parameter_list>(<parameter><decl><type><name>VkFormat</name></type> <name>vkfmt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>vulkan_drm_format_map</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>vulkan_drm_format_map</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>vk_format</name> <operator>==</operator> <name>vkfmt</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>vulkan_drm_format_map</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>drm_fourcc</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><name>DRM_FORMAT_INVALID</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vulkan_map_to_drm</name><parameter_list>(<parameter><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>hwfc</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkResult</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVVkFrame</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><operator>(</operator><name>AVVkFrame</name> <operator>*</operator><operator>)</operator><name><name>src</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VulkanDevicePriv</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>hwfc</name><operator>-&gt;</operator><name>device_ctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVVulkanDeviceContext</name> <modifier>*</modifier></type><name>hwctx</name> <init>= <expr><name><name>hwfc</name><operator>-&gt;</operator><name>device_ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>planes</name> <init>= <expr><call><name>av_pix_fmt_count_planes</name><argument_list>(<argument><expr><name><name>hwfc</name><operator>-&gt;</operator><name>sw_format</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>VK_LOAD_PFN</name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>inst</name></name></expr></argument>, <argument><expr><name>vkGetMemoryFdKHR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>VkImageDrmFormatModifierPropertiesEXT</name></type> <name>drm_mod</name> <init>= <expr><block>{

<expr><operator>.</operator><name>sType</name> <operator>=</operator> <name>VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVDRMFrameDescriptor</name> <modifier>*</modifier></type><name>drm_desc</name> <init>= <expr><call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>drm_desc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>drm_desc</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_hwframe_map_create</name><argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vulkan_unmap_to_drm</name></expr></argument>, <argument><expr><name>drm_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>extensions</name></name> <operator>&amp;</operator> <name>EXT_DRM_MODIFIER_FLAGS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>VK_LOAD_PFN</name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>inst</name></name></expr></argument>, <argument><expr><name>vkGetImageDrmFormatModifierPropertiesEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>pfn_vkGetImageDrmFormatModifierPropertiesEXT</name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>act_dev</name></name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>img</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>drm_mod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VK_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwfc</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to retrieve DRM format modifier!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <name>AVERROR_EXTERNAL</name></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><operator>(</operator><name>i</name> <operator>&lt;</operator> <name>planes</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>f</name><operator>-&gt;</operator><name>mem</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>VkMemoryGetFdInfoKHR</name></type> <name>export_info</name> <init>= <expr><block>{

<expr><operator>.</operator><name>sType</name> <operator>=</operator> <name>VK_STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR</name></expr>,

<expr><operator>.</operator><name>memory</name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>mem</name><index>[<expr><name>i</name></expr>]</index></name></expr>,

<expr><operator>.</operator><name>handleType</name> <operator>=</operator> <name>VK_EXTERNAL_MEMORY_HANDLE_TYPE_DMA_BUF_BIT_EXT</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>pfn_vkGetMemoryFdKHR</name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>act_dev</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>export_info</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>drm_desc</name><operator>-&gt;</operator><name>objects</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VK_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwfc</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unable to export the image as a FD!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <name>AVERROR_EXTERNAL</name></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>drm_desc</name><operator>-&gt;</operator><name>nb_objects</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>drm_desc</name><operator>-&gt;</operator><name>objects</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>size</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>drm_desc</name><operator>-&gt;</operator><name>objects</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>format_modifier</name> <operator>=</operator> <name><name>drm_mod</name><operator>.</operator><name>drmFormatModifier</name></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>drm_desc</name><operator>-&gt;</operator><name>nb_layers</name></name> <operator>=</operator> <name>planes</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>drm_desc</name><operator>-&gt;</operator><name>nb_layers</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>VkSubresourceLayout</name></type> <name>layout</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkImageSubresource</name></type> <name>sub</name> <init>= <expr><block>{

<expr><operator>.</operator><name>aspectMask</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>extensions</name></name> <operator>&amp;</operator> <name>EXT_DRM_MODIFIER_FLAGS</name> <operator>?</operator>

<name>VK_IMAGE_ASPECT_MEMORY_PLANE_0_BIT_EXT</name> <operator>:</operator>

<name>VK_IMAGE_ASPECT_COLOR_BIT</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkFormat</name></type> <name>plane_vkfmt</name> <init>= <expr><call><name>av_vkfmt_from_pixfmt</name><argument_list>(<argument><expr><name><name>hwfc</name><operator>-&gt;</operator><name>sw_format</name></name></expr></argument>)</argument_list></call><index>[<expr><name>i</name></expr>]</index></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>drm_desc</name><operator>-&gt;</operator><name>layers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>format</name> <operator>=</operator> <call><name>vulkan_fmt_to_drm</name><argument_list>(<argument><expr><name>plane_vkfmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>drm_desc</name><operator>-&gt;</operator><name>layers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nb_planes</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>drm_desc</name><operator>-&gt;</operator><name>layers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>format</name> <operator>==</operator> <name>DRM_FORMAT_INVALID</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwfc</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Cannot map to DRM layer, unsupported!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <name>AVERROR_PATCHWELCOME</name></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>drm_desc</name><operator>-&gt;</operator><name>layers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>planes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>object_index</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>drm_desc</name><operator>-&gt;</operator><name>nb_objects</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>tiling</name></name> <operator>!=</operator> <name>VK_IMAGE_TILING_OPTIMAL</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vkGetImageSubresourceLayout</name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>act_dev</name></name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>img</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sub</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>layout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>drm_desc</name><operator>-&gt;</operator><name>layers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>planes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>offset</name> <operator>=</operator> <name><name>layout</name><operator>.</operator><name>offset</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>drm_desc</name><operator>-&gt;</operator><name>layers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>planes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pitch</name> <operator>=</operator> <name><name>layout</name><operator>.</operator><name>rowPitch</name></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>drm_desc</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwfc</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"Mapped AVVkFrame to a DRM object!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>end</name>:</label>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>drm_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_VAAPI</name></expr></cpp:if>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vulkan_map_to_vaapi</name><parameter_list>(<parameter><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>hwfc</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><call><name>av_frame_alloc</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tmp</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>AV_PIX_FMT_DRM_PRIME</name></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>vulkan_map_to_drm</name><argument_list>(<argument><expr><name>hwfc</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>av_hwframe_map</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_hwframe_map_replace</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vulkan_map_from</name><parameter_list>(<parameter><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>hwfc</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>av_unused</name> <name>VulkanDevicePriv</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>hwfc</name><operator>-&gt;</operator><name>device_ctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>dst</name><operator>-&gt;</operator><name>format</name></name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_LIBDRM</name></expr></cpp:if>

<case>case <expr><name>AV_PIX_FMT_DRM_PRIME</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>extensions</name></name> <operator>&amp;</operator> <name>EXT_EXTERNAL_DMABUF_MEMORY</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>vulkan_map_to_drm</name><argument_list>(<argument><expr><name>hwfc</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_VAAPI</name></expr></cpp:if>

<case>case <expr><name>AV_PIX_FMT_VAAPI</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>extensions</name></name> <operator>&amp;</operator> <name>EXT_EXTERNAL_DMABUF_MEMORY</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>vulkan_map_to_vaapi</name><argument_list>(<argument><expr><name>hwfc</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<default>default:</default>

<return>return <expr><call><name>vulkan_map_frame_to_mem</name><argument_list>(<argument><expr><name>hwfc</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<typedef>typedef <type><struct>struct <name>ImageBuffer</name> <block>{

<decl_stmt><decl><type><name>VkBuffer</name></type> <name>buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkDeviceMemory</name></type> <name>mem</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkMemoryPropertyFlagBits</name></type> <name>flags</name></decl>;</decl_stmt>

}</block></struct></type> <name>ImageBuffer</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>free_buf</name><parameter_list>(<parameter><decl><type><name>AVHWDeviceContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>ImageBuffer</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVVulkanDeviceContext</name> <modifier>*</modifier></type><name>hwctx</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vkDestroyBuffer</name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>act_dev</name></name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vkFreeMemory</name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>act_dev</name></name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>mem</name></name></expr></argument>, <argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>create_buf</name><parameter_list>(<parameter><decl><type><name>AVHWDeviceContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>ImageBuffer</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>stride</name></decl></parameter>, <parameter><decl><type><name>VkBufferUsageFlags</name></type> <name>usage</name></decl></parameter>,

<parameter><decl><type><name>VkMemoryPropertyFlagBits</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>create_pnext</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>alloc_pnext</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkResult</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkMemoryRequirements</name></type> <name>req</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVVulkanDeviceContext</name> <modifier>*</modifier></type><name>hwctx</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VulkanDevicePriv</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkBufferCreateInfo</name></type> <name>buf_spawn</name> <init>= <expr><block>{

<expr><operator>.</operator><name>sType</name> <operator>=</operator> <name>VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO</name></expr>,

<expr><operator>.</operator><name>pNext</name> <operator>=</operator> <name>create_pnext</name></expr>,

<expr><operator>.</operator><name>usage</name> <operator>=</operator> <name>usage</name></expr>,

<expr><operator>.</operator><name>sharingMode</name> <operator>=</operator> <name>VK_SHARING_MODE_EXCLUSIVE</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>stride</name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><operator>*</operator><name>stride</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>props</name><operator>.</operator><name>limits</name><operator>.</operator><name>optimalBufferCopyRowPitchAlignment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf_spawn</name><operator>.</operator><name>size</name></name> <operator>=</operator> <name>height</name><operator>*</operator><operator>(</operator><operator>*</operator><name>stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>vkCreateBuffer</name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>act_dev</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf_spawn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VK_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to create buffer: %s\n"</literal></expr></argument>,

<argument><expr><call><name>vk_ret2str</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_EXTERNAL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vkGetBufferMemoryRequirements</name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>act_dev</name></name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>alloc_mem</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>alloc_pnext</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>mem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>vkBindBufferMemory</name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>act_dev</name></name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>mem</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VK_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to bind memory to buffer: %s\n"</literal></expr></argument>,

<argument><expr><call><name>vk_ret2str</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free_buf</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_EXTERNAL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>map_buffers</name><parameter_list>(<parameter><decl><type><name>AVHWDeviceContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>ImageBuffer</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>mem</name><index>[]</index></name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>nb_buffers</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>invalidate</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VkResult</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVVulkanDeviceContext</name> <modifier>*</modifier></type><name>hwctx</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkMappedMemoryRange</name></type> <name><name>invalidate_ctx</name><index>[<expr><name>AV_NUM_DATA_POINTERS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>invalidate_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_buffers</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>vkMapMemory</name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>act_dev</name></name></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mem</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>VK_WHOLE_SIZE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>mem</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VK_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to map buffer memory: %s\n"</literal></expr></argument>,

<argument><expr><call><name>vk_ret2str</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_EXTERNAL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>invalidate</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_buffers</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>VkMappedMemoryRange</name></type> <name>ival_buf</name> <init>= <expr><block>{

<expr><operator>.</operator><name>sType</name> <operator>=</operator> <name>VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE</name></expr>,

<expr><operator>.</operator><name>memory</name> <operator>=</operator> <name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mem</name></expr>,

<expr><operator>.</operator><name>size</name> <operator>=</operator> <name>VK_WHOLE_SIZE</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>&amp;</operator> <name>VK_MEMORY_PROPERTY_HOST_COHERENT_BIT</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>invalidate_ctx</name><index>[<expr><name>invalidate_count</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>ival_buf</name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>invalidate_count</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>vkInvalidateMappedMemoryRanges</name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>act_dev</name></name></expr></argument>, <argument><expr><name>invalidate_count</name></expr></argument>,

<argument><expr><name>invalidate_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VK_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Failed to invalidate memory: %s\n"</literal></expr></argument>,

<argument><expr><call><name>vk_ret2str</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>unmap_buffers</name><parameter_list>(<parameter><decl><type><name>AVHWDeviceContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>ImageBuffer</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>nb_buffers</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flush</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkResult</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVVulkanDeviceContext</name> <modifier>*</modifier></type><name>hwctx</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkMappedMemoryRange</name></type> <name><name>flush_ctx</name><index>[<expr><name>AV_NUM_DATA_POINTERS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>flush_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>flush</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_buffers</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>VkMappedMemoryRange</name></type> <name>flush_buf</name> <init>= <expr><block>{

<expr><operator>.</operator><name>sType</name> <operator>=</operator> <name>VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE</name></expr>,

<expr><operator>.</operator><name>memory</name> <operator>=</operator> <name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mem</name></expr>,

<expr><operator>.</operator><name>size</name> <operator>=</operator> <name>VK_WHOLE_SIZE</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>&amp;</operator> <name>VK_MEMORY_PROPERTY_HOST_COHERENT_BIT</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>flush_ctx</name><index>[<expr><name>flush_count</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>flush_buf</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flush_count</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>vkFlushMappedMemoryRanges</name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>act_dev</name></name></expr></argument>, <argument><expr><name>flush_count</name></expr></argument>, <argument><expr><name>flush_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VK_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to flush memory: %s\n"</literal></expr></argument>,

<argument><expr><call><name>vk_ret2str</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <name>AVERROR_EXTERNAL</name></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_buffers</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vkUnmapMemory</name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>act_dev</name></name></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>transfer_image_buf</name><parameter_list>(<parameter><decl><type><name>AVHWDeviceContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>AVVkFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>,

<parameter><decl><type><name>ImageBuffer</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>buf_stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>pix_fmt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>to_buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VkResult</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVVulkanDeviceContext</name> <modifier>*</modifier></type><name>hwctx</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VulkanDevicePriv</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bar_num</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkPipelineStageFlagBits</name></type> <name><name>sem_wait_dst</name><index>[<expr><name>AV_NUM_DATA_POINTERS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>planes</name> <init>= <expr><call><name>av_pix_fmt_count_planes</name><argument_list>(<argument><expr><name>pix_fmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name>pix_fmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkCommandBufferBeginInfo</name></type> <name>cmd_start</name> <init>= <expr><block>{

<expr><operator>.</operator><name>sType</name> <operator>=</operator> <name>VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO</name></expr>,

<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkImageMemoryBarrier</name></type> <name><name>img_bar</name><index>[<expr><name>AV_NUM_DATA_POINTERS</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkSubmitInfo</name></type> <name>s_info</name> <init>= <expr><block>{

<expr><operator>.</operator><name>sType</name> <operator>=</operator> <name>VK_STRUCTURE_TYPE_SUBMIT_INFO</name></expr>,

<expr><operator>.</operator><name>commandBufferCount</name> <operator>=</operator> <literal type="number">1</literal></expr>,

<expr><operator>.</operator><name>pCommandBuffers</name> <operator>=</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>cmd</name><operator>.</operator><name>buf</name></name></expr>,

<expr><operator>.</operator><name>pSignalSemaphores</name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>sem</name></name></expr>,

<expr><operator>.</operator><name>pWaitSemaphores</name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>sem</name></name></expr>,

<expr><operator>.</operator><name>pWaitDstStageMask</name> <operator>=</operator> <name>sem_wait_dst</name></expr>,

<expr><operator>.</operator><name>signalSemaphoreCount</name> <operator>=</operator> <name>planes</name></expr>,

<expr><operator>.</operator><name>waitSemaphoreCount</name> <operator>=</operator> <name>planes</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>vkBeginCommandBuffer</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>cmd</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cmd_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VK_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unable to init command buffer: %s\n"</literal></expr></argument>,

<argument><expr><call><name>vk_ret2str</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_EXTERNAL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>planes</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>VkImageLayout</name></type> <name>new_layout</name> <init>= <expr><ternary><condition><expr><name>to_buf</name></expr> ?</condition><then> <expr><name>VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL</name></expr> </then><else>:

<expr><name>VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkAccessFlags</name></type> <name>new_access</name> <init>= <expr><ternary><condition><expr><name>to_buf</name></expr> ?</condition><then> <expr><name>VK_ACCESS_TRANSFER_READ_BIT</name></expr> </then><else>:

<expr><name>VK_ACCESS_TRANSFER_WRITE_BIT</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>sem_wait_dst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>frame</name><operator>-&gt;</operator><name>layout</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>new_layout</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>frame</name><operator>-&gt;</operator><name>access</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <name>new_access</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>img_bar</name><index>[<expr><name>bar_num</name></expr>]</index></name><operator>.</operator><name>sType</name> <operator>=</operator> <name>VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>img_bar</name><index>[<expr><name>bar_num</name></expr>]</index></name><operator>.</operator><name>srcAccessMask</name> <operator>=</operator> <literal type="number">0x0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>img_bar</name><index>[<expr><name>bar_num</name></expr>]</index></name><operator>.</operator><name>dstAccessMask</name> <operator>=</operator> <name>new_access</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>img_bar</name><index>[<expr><name>bar_num</name></expr>]</index></name><operator>.</operator><name>oldLayout</name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>layout</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>img_bar</name><index>[<expr><name>bar_num</name></expr>]</index></name><operator>.</operator><name>newLayout</name> <operator>=</operator> <name>new_layout</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>img_bar</name><index>[<expr><name>bar_num</name></expr>]</index></name><operator>.</operator><name>srcQueueFamilyIndex</name> <operator>=</operator> <name>VK_QUEUE_FAMILY_IGNORED</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>img_bar</name><index>[<expr><name>bar_num</name></expr>]</index></name><operator>.</operator><name>dstQueueFamilyIndex</name> <operator>=</operator> <name>VK_QUEUE_FAMILY_IGNORED</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>img_bar</name><index>[<expr><name>bar_num</name></expr>]</index></name><operator>.</operator><name>image</name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>img</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>img_bar</name><index>[<expr><name>bar_num</name></expr>]</index></name><operator>.</operator><name><name>subresourceRange</name><operator>.</operator><name>levelCount</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>img_bar</name><index>[<expr><name>bar_num</name></expr>]</index></name><operator>.</operator><name><name>subresourceRange</name><operator>.</operator><name>layerCount</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>img_bar</name><index>[<expr><name>bar_num</name></expr>]</index></name><operator>.</operator><name><name>subresourceRange</name><operator>.</operator><name>aspectMask</name></name> <operator>=</operator> <name>VK_IMAGE_ASPECT_COLOR_BIT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>layout</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>img_bar</name><index>[<expr><name>bar_num</name></expr>]</index></name><operator>.</operator><name>newLayout</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>access</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>img_bar</name><index>[<expr><name>bar_num</name></expr>]</index></name><operator>.</operator><name>dstAccessMask</name></expr>;</expr_stmt>

<expr_stmt><expr><name>bar_num</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>bar_num</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vkCmdPipelineBarrier</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>cmd</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name>VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT</name></expr></argument>,

<argument><expr><name>VK_PIPELINE_STAGE_TRANSFER_BIT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>bar_num</name></expr></argument>, <argument><expr><name>img_bar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>planes</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>p_w</name> <init>= <expr><ternary><condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_w</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>w</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>p_h</name> <init>= <expr><ternary><condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_h</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>h</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkBufferImageCopy</name></type> <name>buf_reg</name> <init>= <expr><block>{

<expr><operator>.</operator><name>bufferOffset</name> <operator>=</operator> <literal type="number">0</literal></expr>,

<expr><operator>.</operator><name>bufferRowLength</name> <operator>=</operator> <name><name>buf_stride</name><index>[<expr><name>i</name></expr>]</index></name> <operator>/</operator> <name><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>step</name></expr>,

<expr><operator>.</operator><name>bufferImageHeight</name> <operator>=</operator> <name>p_h</name></expr>,

<expr><operator>.</operator><name><name>imageSubresource</name><operator>.</operator><name>layerCount</name></name> <operator>=</operator> <literal type="number">1</literal></expr>,

<expr><operator>.</operator><name><name>imageSubresource</name><operator>.</operator><name>aspectMask</name></name> <operator>=</operator> <name>VK_IMAGE_ASPECT_COLOR_BIT</name></expr>,

<expr><operator>.</operator><name>imageOffset</name> <operator>=</operator> <block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, }</block></expr>,

<expr><operator>.</operator><name>imageExtent</name> <operator>=</operator> <block>{ <expr><name>p_w</name></expr>, <expr><name>p_h</name></expr>, <expr><literal type="number">1</literal></expr>, }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>to_buf</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vkCmdCopyImageToBuffer</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>cmd</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>img</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>layout</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>buffer</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>buf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf_reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vkCmdCopyBufferToImage</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>cmd</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>buffer</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>buf</name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>img</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>layout</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf_reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>vkEndCommandBuffer</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>cmd</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VK_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unable to finish command buffer: %s\n"</literal></expr></argument>,

<argument><expr><call><name>vk_ret2str</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_EXTERNAL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>vkQueueSubmit</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>cmd</name><operator>.</operator><name>queue</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>s_info</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>cmd</name><operator>.</operator><name>fence</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VK_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unable to submit command buffer: %s\n"</literal></expr></argument>,

<argument><expr><call><name>vk_ret2str</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_EXTERNAL</name></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>vkWaitForFences</name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>act_dev</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>cmd</name><operator>.</operator><name>fence</name></name></expr></argument>, <argument><expr><name>VK_TRUE</name></expr></argument>, <argument><expr><name>UINT64_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vkResetFences</name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>act_dev</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>cmd</name><operator>.</operator><name>fence</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vulkan_transfer_data_from_mem</name><parameter_list>(<parameter><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>hwfc</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name></type> <name>tmp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVVkFrame</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><operator>(</operator><name>AVVkFrame</name> <operator>*</operator><operator>)</operator><name><name>dst</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVHWDeviceContext</name> <modifier>*</modifier></type><name>dev_ctx</name> <init>= <expr><name><name>hwfc</name><operator>-&gt;</operator><name>device_ctx</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ImageBuffer</name></type> <name><name>buf</name><index>[<expr><name>AV_NUM_DATA_POINTERS</name></expr>]</index></name> <init>= <expr><block>{ <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>planes</name> <init>= <expr><call><name>av_pix_fmt_count_planes</name><argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>log2_chroma</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>log2_chroma_h</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>src</name><operator>-&gt;</operator><name>format</name></name> <operator>!=</operator> <name>AV_PIX_FMT_NONE</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>av_vkfmt_from_pixfmt</name><argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwfc</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unsupported source pixel format!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>src</name><operator>-&gt;</operator><name>width</name></name> <operator>&gt;</operator> <name><name>hwfc</name><operator>-&gt;</operator><name>width</name></name> <operator>||</operator> <name><name>src</name><operator>-&gt;</operator><name>height</name></name> <operator>&gt;</operator> <name><name>hwfc</name><operator>-&gt;</operator><name>height</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>tiling</name></name> <operator>==</operator> <name>VK_IMAGE_TILING_LINEAR</name> <operator>&amp;&amp;</operator>

<name><name>f</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>map</name> <init>= <expr><call><name>av_frame_alloc</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>map</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>format</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>vulkan_map_frame_to_mem</name><argument_list>(<argument><expr><name>hwfc</name></expr></argument>, <argument><expr><name>map</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>AV_HWFRAME_MAP_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>av_frame_copy</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>planes</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>h</name> <init>= <expr><name><name>src</name><operator>-&gt;</operator><name>height</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>p_height</name> <init>= <expr><ternary><condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>log2_chroma</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>h</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>tmp</name><operator>.</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>create_buf</name><argument_list>(<argument><expr><name>dev_ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>p_height</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>tmp</name><operator>.</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>VK_BUFFER_USAGE_TRANSFER_SRC_BIT</name></expr></argument>,

<argument><expr><name>VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>map_buffers</name><argument_list>(<argument><expr><name>dev_ctx</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>tmp</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name>planes</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_image_copy</name><argument_list>(<argument><expr><name><name>tmp</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>tmp</name><operator>.</operator><name>linesize</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>src</name><operator>-&gt;</operator><name>data</name></name></expr></argument>,

<argument><expr><name><name>src</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>unmap_buffers</name><argument_list>(<argument><expr><name>dev_ctx</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>planes</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>transfer_image_buf</name><argument_list>(<argument><expr><name>dev_ctx</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>tmp</name><operator>.</operator><name>linesize</name></name></expr></argument>,

<argument><expr><name><name>src</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>end</name>:</label>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>planes</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free_buf</name><argument_list>(<argument><expr><name>dev_ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vulkan_transfer_data_to</name><parameter_list>(<parameter><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>hwfc</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>av_unused</name> <name>VulkanDevicePriv</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>hwfc</name><operator>-&gt;</operator><name>device_ctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>src</name><operator>-&gt;</operator><name>format</name></name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_CUDA</name></expr></cpp:if>

<case>case <expr><name>AV_PIX_FMT_CUDA</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>extensions</name></name> <operator>&amp;</operator> <name>EXT_EXTERNAL_FD_MEMORY</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>extensions</name></name> <operator>&amp;</operator> <name>EXT_EXTERNAL_FD_SEM</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>vulkan_transfer_data_from_cuda</name><argument_list>(<argument><expr><name>hwfc</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<default>default:</default>

<if_stmt><if>if <condition>(<expr><name><name>src</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><call><name>vulkan_transfer_data_from_mem</name><argument_list>(<argument><expr><name>hwfc</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></switch>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_CUDA</name></expr></cpp:if>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vulkan_transfer_data_to_cuda</name><parameter_list>(<parameter><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>hwfc</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VkResult</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CUcontext</name></type> <name>dummy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVVkFrame</name> <modifier>*</modifier></type><name>dst_f</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVVkFrameInternal</name> <modifier>*</modifier></type><name>dst_int</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>planes</name> <init>= <expr><call><name>av_pix_fmt_count_planes</name><argument_list>(<argument><expr><name><name>hwfc</name><operator>-&gt;</operator><name>sw_format</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>hwfc</name><operator>-&gt;</operator><name>sw_format</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>cuda_fc</name> <init>= <expr><operator>(</operator><name>AVHWFramesContext</name><operator>*</operator><operator>)</operator><name><name>dst</name><operator>-&gt;</operator><name>hw_frames_ctx</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVHWDeviceContext</name> <modifier>*</modifier></type><name>cuda_cu</name> <init>= <expr><name><name>cuda_fc</name><operator>-&gt;</operator><name>device_ctx</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCUDADeviceContext</name> <modifier>*</modifier></type><name>cuda_dev</name> <init>= <expr><name><name>cuda_cu</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCUDADeviceContextInternal</name> <modifier>*</modifier></type><name>cu_internal</name> <init>= <expr><name><name>cuda_dev</name><operator>-&gt;</operator><name>internal</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CudaFunctions</name> <modifier>*</modifier></type><name>cu</name> <init>= <expr><name><name>cu_internal</name><operator>-&gt;</operator><name>cuda_dl</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>CHECK_CU</name><argument_list>(<argument><expr><call><name><name>cu</name><operator>-&gt;</operator><name>cuCtxPushCurrent</name></name><argument_list>(<argument><expr><name><name>cuda_dev</name><operator>-&gt;</operator><name>cuda_ctx</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <name>AVERROR_EXTERNAL</name></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>dst_f</name> <operator>=</operator> <operator>(</operator><name>AVVkFrame</name> <operator>*</operator><operator>)</operator><name><name>src</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>vulkan_export_to_cuda</name><argument_list>(<argument><expr><name>hwfc</name></expr></argument>, <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>dst_int</name> <operator>=</operator> <name><name>dst_f</name><operator>-&gt;</operator><name>internal</name></name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>planes</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>CUDA_MEMCPY2D</name></type> <name>cpy</name> <init>= <expr><block>{

<expr><operator>.</operator><name>dstMemoryType</name> <operator>=</operator> <name>CU_MEMORYTYPE_DEVICE</name></expr>,

<expr><operator>.</operator><name>dstDevice</name> <operator>=</operator> <operator>(</operator><name>CUdeviceptr</name><operator>)</operator><name><name>dst</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr>,

<expr><operator>.</operator><name>dstPitch</name> <operator>=</operator> <name><name>dst</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name></expr>,

<expr><operator>.</operator><name>dstY</name> <operator>=</operator> <literal type="number">0</literal></expr>,

<expr><operator>.</operator><name>srcMemoryType</name> <operator>=</operator> <name>CU_MEMORYTYPE_ARRAY</name></expr>,

<expr><operator>.</operator><name>srcArray</name> <operator>=</operator> <name><name>dst_int</name><operator>-&gt;</operator><name>cu_array</name><index>[<expr><name>i</name></expr>]</index></name></expr>,

<expr><operator>.</operator><name>WidthInBytes</name> <operator>=</operator> <operator>(</operator><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>?</operator> <call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name><name>hwfc</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_w</name></name></expr></argument>)</argument_list></call>

<operator>:</operator> <name><name>hwfc</name><operator>-&gt;</operator><name>width</name></name><operator>)</operator> <operator>*</operator> <name><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>step</name></expr>,

<expr><operator>.</operator><name>Height</name> <operator>=</operator> <name>i</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>?</operator> <call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name><name>hwfc</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_h</name></name></expr></argument>)</argument_list></call>

<operator>:</operator> <name><name>hwfc</name><operator>-&gt;</operator><name>height</name></name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>CHECK_CU</name><argument_list>(<argument><expr><call><name><name>cu</name><operator>-&gt;</operator><name>cuMemcpy2DAsync</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>cpy</name></expr></argument>, <argument><expr><name><name>cuda_dev</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <name>AVERROR_EXTERNAL</name></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>CHECK_CU</name><argument_list>(<argument><expr><call><name><name>cu</name><operator>-&gt;</operator><name>cuCtxPopCurrent</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>dummy</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hwfc</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"Transfered Vulkan image to CUDA!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>CHECK_CU</name><argument_list>(<argument><expr><call><name><name>cu</name><operator>-&gt;</operator><name>cuCtxPopCurrent</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>dummy</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vulkan_free_internal</name><argument_list>(<argument><expr><name>dst_int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst_f</name><operator>-&gt;</operator><name>internal</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dst</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vulkan_transfer_data_to_mem</name><parameter_list>(<parameter><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>hwfc</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name></type> <name>tmp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVVkFrame</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><operator>(</operator><name>AVVkFrame</name> <operator>*</operator><operator>)</operator><name><name>src</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVHWDeviceContext</name> <modifier>*</modifier></type><name>dev_ctx</name> <init>= <expr><name><name>hwfc</name><operator>-&gt;</operator><name>device_ctx</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ImageBuffer</name></type> <name><name>buf</name><index>[<expr><name>AV_NUM_DATA_POINTERS</name></expr>]</index></name> <init>= <expr><block>{ <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>planes</name> <init>= <expr><call><name>av_pix_fmt_count_planes</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>log2_chroma</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>log2_chroma_h</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dst</name><operator>-&gt;</operator><name>width</name></name> <operator>&gt;</operator> <name><name>hwfc</name><operator>-&gt;</operator><name>width</name></name> <operator>||</operator> <name><name>dst</name><operator>-&gt;</operator><name>height</name></name> <operator>&gt;</operator> <name><name>hwfc</name><operator>-&gt;</operator><name>height</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>tiling</name></name> <operator>==</operator> <name>VK_IMAGE_TILING_LINEAR</name> <operator>&amp;&amp;</operator>

<name><name>f</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>map</name> <init>= <expr><call><name>av_frame_alloc</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>map</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name><name>dst</name><operator>-&gt;</operator><name>format</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>vulkan_map_frame_to_mem</name><argument_list>(<argument><expr><name>hwfc</name></expr></argument>, <argument><expr><name>map</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>AV_HWFRAME_MAP_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>av_frame_copy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>planes</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>h</name> <init>= <expr><name><name>dst</name><operator>-&gt;</operator><name>height</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>p_height</name> <init>= <expr><ternary><condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>log2_chroma</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>h</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>tmp</name><operator>.</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>dst</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>create_buf</name><argument_list>(<argument><expr><name>dev_ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>p_height</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>tmp</name><operator>.</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>VK_BUFFER_USAGE_TRANSFER_DST_BIT</name></expr></argument>,

<argument><expr><name>VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>transfer_image_buf</name><argument_list>(<argument><expr><name>dev_ctx</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>tmp</name><operator>.</operator><name>linesize</name></name></expr></argument>,

<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>map_buffers</name><argument_list>(<argument><expr><name>dev_ctx</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>tmp</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name>planes</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_image_copy</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>tmp</name><operator>.</operator><name>data</name></name></expr></argument>,

<argument><expr><name><name>tmp</name><operator>.</operator><name>linesize</name></name></expr></argument>, <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>unmap_buffers</name><argument_list>(<argument><expr><name>dev_ctx</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>planes</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>end</name>:</label>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>planes</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free_buf</name><argument_list>(<argument><expr><name>dev_ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vulkan_transfer_data_from</name><parameter_list>(<parameter><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>hwfc</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>av_unused</name> <name>VulkanDevicePriv</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>hwfc</name><operator>-&gt;</operator><name>device_ctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>dst</name><operator>-&gt;</operator><name>format</name></name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_CUDA</name></expr></cpp:if>

<case>case <expr><name>AV_PIX_FMT_CUDA</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>extensions</name></name> <operator>&amp;</operator> <name>EXT_EXTERNAL_FD_MEMORY</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>extensions</name></name> <operator>&amp;</operator> <name>EXT_EXTERNAL_FD_SEM</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>vulkan_transfer_data_to_cuda</name><argument_list>(<argument><expr><name>hwfc</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<default>default:</default>

<if_stmt><if>if <condition>(<expr><name><name>dst</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><call><name>vulkan_transfer_data_to_mem</name><argument_list>(<argument><expr><name>hwfc</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><name>AVVkFrame</name> <modifier>*</modifier></type><name>av_vk_frame_alloc</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>AVVkFrame</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>HWContextType</name></type> <name>ff_hwcontext_type_vulkan</name> <init>= <expr><block>{

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AV_HWDEVICE_TYPE_VULKAN</name></expr>,

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"Vulkan"</literal></expr>,

<expr><operator>.</operator><name>device_hwctx_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>AVVulkanDeviceContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>device_priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>VulkanDevicePriv</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>frames_hwctx_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>AVVulkanFramesContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>frames_priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>VulkanFramesPriv</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>device_init</name> <operator>=</operator> <operator>&amp;</operator><name>vulkan_device_init</name></expr>,

<expr><operator>.</operator><name>device_create</name> <operator>=</operator> <operator>&amp;</operator><name>vulkan_device_create</name></expr>,

<expr><operator>.</operator><name>device_derive</name> <operator>=</operator> <operator>&amp;</operator><name>vulkan_device_derive</name></expr>,

<expr><operator>.</operator><name>frames_get_constraints</name> <operator>=</operator> <operator>&amp;</operator><name>vulkan_frames_get_constraints</name></expr>,

<expr><operator>.</operator><name>frames_init</name> <operator>=</operator> <name>vulkan_frames_init</name></expr>,

<expr><operator>.</operator><name>frames_get_buffer</name> <operator>=</operator> <name>vulkan_get_buffer</name></expr>,

<expr><operator>.</operator><name>frames_uninit</name> <operator>=</operator> <name>vulkan_frames_uninit</name></expr>,

<expr><operator>.</operator><name>transfer_get_formats</name> <operator>=</operator> <name>vulkan_transfer_get_formats</name></expr>,

<expr><operator>.</operator><name>transfer_data_to</name> <operator>=</operator> <name>vulkan_transfer_data_to</name></expr>,

<expr><operator>.</operator><name>transfer_data_from</name> <operator>=</operator> <name>vulkan_transfer_data_from</name></expr>,

<expr><operator>.</operator><name>map_to</name> <operator>=</operator> <name>vulkan_map_to</name></expr>,

<expr><operator>.</operator><name>map_from</name> <operator>=</operator> <name>vulkan_map_from</name></expr>,

<expr><operator>.</operator><name>pix_fmts</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> enum <name><name>AVPixelFormat</name> <index>[]</index></name><operator>)</operator> <block>{

<expr><name>AV_PIX_FMT_VULKAN</name></expr>,

<expr><name>AV_PIX_FMT_NONE</name></expr>

}</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
