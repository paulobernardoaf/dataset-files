<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavutil\intmath.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"attributes.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCH_ARM</name></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"arm/intmath.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCH_X86</name></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"x86/intmath.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_FAST_CLZ</name></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>AV_GCC_VERSION_AT_LEAST</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ff_log2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff_log2</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(31 - __builtin_clz((x)|1))</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ff_log2_16bit</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff_log2_16bit</name></cpp:macro> <cpp:value>av_log2</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>ff_log2_tab</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ff_log2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff_log2</name></cpp:macro> <cpp:value>ff_log2_c</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>av_const</name> <name>int</name></type> <name>ff_log2_c</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>v</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&amp;</operator> <literal type="number">0xffff0000</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>v</name> <operator>&gt;&gt;=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&amp;</operator> <literal type="number">0xff00</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>v</name> <operator>&gt;&gt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>n</name> <operator>+=</operator> <name><name>ff_log2_tab</name><index>[<expr><name>v</name></expr>]</index></name></expr>;</expr_stmt>

<return>return <expr><name>n</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ff_log2_16bit</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff_log2_16bit</name></cpp:macro> <cpp:value>ff_log2_16bit_c</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>av_const</name> <name>int</name></type> <name>ff_log2_16bit_c</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>v</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&amp;</operator> <literal type="number">0xff00</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>v</name> <operator>&gt;&gt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>n</name> <operator>+=</operator> <name><name>ff_log2_tab</name><index>[<expr><name>v</name></expr>]</index></name></expr>;</expr_stmt>

<return>return <expr><name>n</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>av_log2</name></cpp:macro> <cpp:value>ff_log2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>av_log2_16bit</name></cpp:macro> <cpp:value>ff_log2_16bit</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_FAST_CLZ</name></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>AV_GCC_VERSION_AT_LEAST</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ff_ctz</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff_ctz</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_ctz(v)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ff_ctzll</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff_ctzll</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_ctzll(v)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ff_clz</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff_clz</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_clz(v)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ff_ctz</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff_ctz</name></cpp:macro> <cpp:value>ff_ctz_c</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>av_const</name> <name>int</name></type> <name>ff_ctz_c</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>debruijn_ctz32</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">8</literal></expr>,

<expr><literal type="number">31</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">9</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<return>return <expr><name><name>debruijn_ctz32</name><index>[<expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>v</name> <operator>&amp;</operator> <operator>-</operator><name>v</name><operator>)</operator> <operator>*</operator> <literal type="number">0x077CB531U</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">27</literal></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ff_ctzll</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff_ctzll</name></cpp:macro> <cpp:value>ff_ctzll_c</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>av_const</name> <name>int</name></type> <name>ff_ctzll_c</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>v</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>debruijn_ctz64</name><index>[<expr><literal type="number">64</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">53</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">54</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">38</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">34</literal></expr>, <expr><literal type="number">55</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">28</literal></expr>,

<expr><literal type="number">62</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">39</literal></expr>, <expr><literal type="number">46</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">42</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">35</literal></expr>, <expr><literal type="number">59</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">49</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><literal type="number">11</literal></expr>,

<expr><literal type="number">63</literal></expr>, <expr><literal type="number">52</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">37</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">33</literal></expr>, <expr><literal type="number">47</literal></expr>, <expr><literal type="number">61</literal></expr>, <expr><literal type="number">45</literal></expr>, <expr><literal type="number">43</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">58</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">10</literal></expr>,

<expr><literal type="number">51</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">57</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">12</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<return>return <expr><name><name>debruijn_ctz64</name><index>[<expr><operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>v</name> <operator>&amp;</operator> <operator>-</operator><name>v</name><operator>)</operator> <operator>*</operator> <literal type="number">0x022FDD63CC95386DU</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">58</literal></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ff_clz</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff_clz</name></cpp:macro> <cpp:value>ff_clz_c</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>av_const</name> <name>unsigned</name></type> <name>ff_clz_c</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>x</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>x</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>x</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>i</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>AV_GCC_VERSION_AT_LEAST</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>av_parity</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>av_parity</name></cpp:macro> <cpp:value>__builtin_parity</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
