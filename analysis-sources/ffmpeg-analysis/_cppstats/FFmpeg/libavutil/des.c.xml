<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavutil\des.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avutil.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"intreadwrite.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mem.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"des.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>, <parameter><type><name>d</name></type></parameter>, <parameter><type><name>e</name></type></parameter>, <parameter><type><name>f</name></type></parameter>, <parameter><type><name>g</name></type></parameter>, <parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>64 - a, 64 - b, 64 - c, 64 - d, 64 - e, 64 - f, 64 - g, 64 - h</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>IP_shuffle</name><index>[]</index></name> <init>= <expr><block>{

<expr><call><name>T</name><argument_list>(<argument><expr><literal type="number">58</literal></expr></argument>, <argument><expr><literal type="number">50</literal></expr></argument>, <argument><expr><literal type="number">42</literal></expr></argument>, <argument><expr><literal type="number">34</literal></expr></argument>, <argument><expr><literal type="number">26</literal></expr></argument>, <argument><expr><literal type="number">18</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>T</name><argument_list>(<argument><expr><literal type="number">60</literal></expr></argument>, <argument><expr><literal type="number">52</literal></expr></argument>, <argument><expr><literal type="number">44</literal></expr></argument>, <argument><expr><literal type="number">36</literal></expr></argument>, <argument><expr><literal type="number">28</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>T</name><argument_list>(<argument><expr><literal type="number">62</literal></expr></argument>, <argument><expr><literal type="number">54</literal></expr></argument>, <argument><expr><literal type="number">46</literal></expr></argument>, <argument><expr><literal type="number">38</literal></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>, <argument><expr><literal type="number">22</literal></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>T</name><argument_list>(<argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><literal type="number">56</literal></expr></argument>, <argument><expr><literal type="number">48</literal></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>T</name><argument_list>(<argument><expr><literal type="number">57</literal></expr></argument>, <argument><expr><literal type="number">49</literal></expr></argument>, <argument><expr><literal type="number">41</literal></expr></argument>, <argument><expr><literal type="number">33</literal></expr></argument>, <argument><expr><literal type="number">25</literal></expr></argument>, <argument><expr><literal type="number">17</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>T</name><argument_list>(<argument><expr><literal type="number">59</literal></expr></argument>, <argument><expr><literal type="number">51</literal></expr></argument>, <argument><expr><literal type="number">43</literal></expr></argument>, <argument><expr><literal type="number">35</literal></expr></argument>, <argument><expr><literal type="number">27</literal></expr></argument>, <argument><expr><literal type="number">19</literal></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>T</name><argument_list>(<argument><expr><literal type="number">61</literal></expr></argument>, <argument><expr><literal type="number">53</literal></expr></argument>, <argument><expr><literal type="number">45</literal></expr></argument>, <argument><expr><literal type="number">37</literal></expr></argument>, <argument><expr><literal type="number">29</literal></expr></argument>, <argument><expr><literal type="number">21</literal></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>,

<macro><name>T</name><argument_list>(<argument><literal type="number">63</literal></argument>, <argument><literal type="number">55</literal></argument>, <argument><literal type="number">47</literal></argument>, <argument><literal type="number">39</literal></argument>, <argument><literal type="number">31</literal></argument>, <argument><literal type="number">23</literal></argument>, <argument><literal type="number">15</literal></argument>, <argument><literal type="number">7</literal></argument>)</argument_list></macro>

}</block></expr></init></decl>;</decl_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>T</name></cpp:undef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_SMALL</name> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>GENTABLES</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>, <parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>32 - a, 32 - b, 32 - c, 32 - d</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>P_shuffle</name><index>[]</index></name> <init>= <expr><block>{

<expr><call><name>T</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">21</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>T</name><argument_list>(<argument><expr><literal type="number">29</literal></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><literal type="number">28</literal></expr></argument>, <argument><expr><literal type="number">17</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>T</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>, <argument><expr><literal type="number">23</literal></expr></argument>, <argument><expr><literal type="number">26</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>T</name><argument_list>( <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">18</literal></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>T</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>T</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="number">27</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>T</name><argument_list>(<argument><expr><literal type="number">19</literal></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>,

<macro><name>T</name><argument_list>(<argument><literal type="number">22</literal></argument>, <argument><literal type="number">11</literal></argument>, <argument><literal type="number">4</literal></argument>, <argument><literal type="number">25</literal></argument>)</argument_list></macro>

}</block></expr></init></decl>;</decl_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>T</name></cpp:undef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>, <parameter><type><name>d</name></type></parameter>, <parameter><type><name>e</name></type></parameter>, <parameter><type><name>f</name></type></parameter>, <parameter><type><name>g</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>64 - a, 64 - b, 64 - c, 64 - d, 64 - e, 64 - f, 64 - g</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>PC1_shuffle</name><index>[]</index></name> <init>= <expr><block>{

<expr><call><name>T</name><argument_list>(<argument><expr><literal type="number">57</literal></expr></argument>, <argument><expr><literal type="number">49</literal></expr></argument>, <argument><expr><literal type="number">41</literal></expr></argument>, <argument><expr><literal type="number">33</literal></expr></argument>, <argument><expr><literal type="number">25</literal></expr></argument>, <argument><expr><literal type="number">17</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>T</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">58</literal></expr></argument>, <argument><expr><literal type="number">50</literal></expr></argument>, <argument><expr><literal type="number">42</literal></expr></argument>, <argument><expr><literal type="number">34</literal></expr></argument>, <argument><expr><literal type="number">26</literal></expr></argument>, <argument><expr><literal type="number">18</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>T</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">59</literal></expr></argument>, <argument><expr><literal type="number">51</literal></expr></argument>, <argument><expr><literal type="number">43</literal></expr></argument>, <argument><expr><literal type="number">35</literal></expr></argument>, <argument><expr><literal type="number">27</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>T</name><argument_list>(<argument><expr><literal type="number">19</literal></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">60</literal></expr></argument>, <argument><expr><literal type="number">52</literal></expr></argument>, <argument><expr><literal type="number">44</literal></expr></argument>, <argument><expr><literal type="number">36</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>T</name><argument_list>(<argument><expr><literal type="number">63</literal></expr></argument>, <argument><expr><literal type="number">55</literal></expr></argument>, <argument><expr><literal type="number">47</literal></expr></argument>, <argument><expr><literal type="number">39</literal></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>, <argument><expr><literal type="number">23</literal></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>T</name><argument_list>( <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="number">62</literal></expr></argument>, <argument><expr><literal type="number">54</literal></expr></argument>, <argument><expr><literal type="number">46</literal></expr></argument>, <argument><expr><literal type="number">38</literal></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>, <argument><expr><literal type="number">22</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>T</name><argument_list>(<argument><expr><literal type="number">14</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">61</literal></expr></argument>, <argument><expr><literal type="number">53</literal></expr></argument>, <argument><expr><literal type="number">45</literal></expr></argument>, <argument><expr><literal type="number">37</literal></expr></argument>, <argument><expr><literal type="number">29</literal></expr></argument>)</argument_list></call></expr>,

<macro><name>T</name><argument_list>(<argument><literal type="number">21</literal></argument>, <argument><literal type="number">13</literal></argument>, <argument><literal type="number">5</literal></argument>, <argument><literal type="number">28</literal></argument>, <argument><literal type="number">20</literal></argument>, <argument><literal type="number">12</literal></argument>, <argument><literal type="number">4</literal></argument>)</argument_list></macro>

}</block></expr></init></decl>;</decl_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>T</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>, <parameter><type><name>d</name></type></parameter>, <parameter><type><name>e</name></type></parameter>, <parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>56 - a, 56 - b, 56 - c, 56 - d, 56 - e, 56 - f</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>PC2_shuffle</name><index>[]</index></name> <init>= <expr><block>{

<expr><call><name>T</name><argument_list>(<argument><expr><literal type="number">14</literal></expr></argument>, <argument><expr><literal type="number">17</literal></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>T</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">28</literal></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">21</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>T</name><argument_list>(<argument><expr><literal type="number">23</literal></expr></argument>, <argument><expr><literal type="number">19</literal></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">26</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>T</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="number">27</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>T</name><argument_list>(<argument><expr><literal type="number">41</literal></expr></argument>, <argument><expr><literal type="number">52</literal></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>, <argument><expr><literal type="number">37</literal></expr></argument>, <argument><expr><literal type="number">47</literal></expr></argument>, <argument><expr><literal type="number">55</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>T</name><argument_list>(<argument><expr><literal type="number">30</literal></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument>, <argument><expr><literal type="number">51</literal></expr></argument>, <argument><expr><literal type="number">45</literal></expr></argument>, <argument><expr><literal type="number">33</literal></expr></argument>, <argument><expr><literal type="number">48</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>T</name><argument_list>(<argument><expr><literal type="number">44</literal></expr></argument>, <argument><expr><literal type="number">49</literal></expr></argument>, <argument><expr><literal type="number">39</literal></expr></argument>, <argument><expr><literal type="number">56</literal></expr></argument>, <argument><expr><literal type="number">34</literal></expr></argument>, <argument><expr><literal type="number">53</literal></expr></argument>)</argument_list></call></expr>,

<macro><name>T</name><argument_list>(<argument><literal type="number">46</literal></argument>, <argument><literal type="number">42</literal></argument>, <argument><literal type="number">50</literal></argument>, <argument><literal type="number">36</literal></argument>, <argument><literal type="number">29</literal></argument>, <argument><literal type="number">32</literal></argument>)</argument_list></macro>

}</block></expr></init></decl>;</decl_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>T</name></cpp:undef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_SMALL</name></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>S_boxes</name><index>[<expr><literal type="number">8</literal></expr>]</index><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="number">0x0e</literal></expr>, <expr><literal type="number">0xf4</literal></expr>, <expr><literal type="number">0x7d</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0xe2</literal></expr>, <expr><literal type="number">0x2f</literal></expr>, <expr><literal type="number">0xdb</literal></expr>, <expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0xa3</literal></expr>, <expr><literal type="number">0x6a</literal></expr>, <expr><literal type="number">0xc6</literal></expr>, <expr><literal type="number">0xbc</literal></expr>, <expr><literal type="number">0x95</literal></expr>, <expr><literal type="number">0x59</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x87</literal></expr>,

<expr><literal type="number">0xf4</literal></expr>, <expr><literal type="number">0xc1</literal></expr>, <expr><literal type="number">0x8e</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0x4d</literal></expr>, <expr><literal type="number">0x96</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x7b</literal></expr>, <expr><literal type="number">0x5f</literal></expr>, <expr><literal type="number">0xbc</literal></expr>, <expr><literal type="number">0x39</literal></expr>, <expr><literal type="number">0xe7</literal></expr>, <expr><literal type="number">0xa3</literal></expr>, <expr><literal type="number">0x0a</literal></expr>, <expr><literal type="number">0x65</literal></expr>, <expr><literal type="number">0xd0</literal></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="number">0x3f</literal></expr>, <expr><literal type="number">0xd1</literal></expr>, <expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0x7e</literal></expr>, <expr><literal type="number">0xf6</literal></expr>, <expr><literal type="number">0x2b</literal></expr>, <expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">0xe4</literal></expr>, <expr><literal type="number">0xc9</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0xad</literal></expr>, <expr><literal type="number">0x6c</literal></expr>, <expr><literal type="number">0x90</literal></expr>, <expr><literal type="number">0xb5</literal></expr>, <expr><literal type="number">0x5a</literal></expr>,

<expr><literal type="number">0xd0</literal></expr>, <expr><literal type="number">0x8e</literal></expr>, <expr><literal type="number">0xa7</literal></expr>, <expr><literal type="number">0x1b</literal></expr>, <expr><literal type="number">0x3a</literal></expr>, <expr><literal type="number">0xf4</literal></expr>, <expr><literal type="number">0x4d</literal></expr>, <expr><literal type="number">0x21</literal></expr>, <expr><literal type="number">0xb5</literal></expr>, <expr><literal type="number">0x68</literal></expr>, <expr><literal type="number">0x7c</literal></expr>, <expr><literal type="number">0xc6</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0xe2</literal></expr>, <expr><literal type="number">0x9f</literal></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="number">0xda</literal></expr>, <expr><literal type="number">0x70</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x9e</literal></expr>, <expr><literal type="number">0x36</literal></expr>, <expr><literal type="number">0x43</literal></expr>, <expr><literal type="number">0x6f</literal></expr>, <expr><literal type="number">0xa5</literal></expr>, <expr><literal type="number">0x21</literal></expr>, <expr><literal type="number">0x8d</literal></expr>, <expr><literal type="number">0x5c</literal></expr>, <expr><literal type="number">0xe7</literal></expr>, <expr><literal type="number">0xcb</literal></expr>, <expr><literal type="number">0xb4</literal></expr>, <expr><literal type="number">0xf2</literal></expr>, <expr><literal type="number">0x18</literal></expr>,

<expr><literal type="number">0x1d</literal></expr>, <expr><literal type="number">0xa6</literal></expr>, <expr><literal type="number">0xd4</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x68</literal></expr>, <expr><literal type="number">0x9f</literal></expr>, <expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">0x70</literal></expr>, <expr><literal type="number">0x4b</literal></expr>, <expr><literal type="number">0xf1</literal></expr>, <expr><literal type="number">0xe2</literal></expr>, <expr><literal type="number">0x3c</literal></expr>, <expr><literal type="number">0xb5</literal></expr>, <expr><literal type="number">0x5a</literal></expr>, <expr><literal type="number">0x2e</literal></expr>, <expr><literal type="number">0xc7</literal></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="number">0xd7</literal></expr>, <expr><literal type="number">0x8d</literal></expr>, <expr><literal type="number">0xbe</literal></expr>, <expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0x60</literal></expr>, <expr><literal type="number">0xf6</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x3a</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x72</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0xc5</literal></expr>, <expr><literal type="number">0x1b</literal></expr>, <expr><literal type="number">0xac</literal></expr>, <expr><literal type="number">0xe4</literal></expr>, <expr><literal type="number">0x9f</literal></expr>,

<expr><literal type="number">0x3a</literal></expr>, <expr><literal type="number">0xf6</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x60</literal></expr>, <expr><literal type="number">0xac</literal></expr>, <expr><literal type="number">0x1b</literal></expr>, <expr><literal type="number">0xd7</literal></expr>, <expr><literal type="number">0x8d</literal></expr>, <expr><literal type="number">0x9f</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0xbe</literal></expr>, <expr><literal type="number">0xc5</literal></expr>, <expr><literal type="number">0x72</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0xe4</literal></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="number">0xe2</literal></expr>, <expr><literal type="number">0xbc</literal></expr>, <expr><literal type="number">0x24</literal></expr>, <expr><literal type="number">0xc1</literal></expr>, <expr><literal type="number">0x47</literal></expr>, <expr><literal type="number">0x7a</literal></expr>, <expr><literal type="number">0xdb</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x58</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0xf3</literal></expr>, <expr><literal type="number">0xaf</literal></expr>, <expr><literal type="number">0x3d</literal></expr>, <expr><literal type="number">0x90</literal></expr>, <expr><literal type="number">0x8e</literal></expr>, <expr><literal type="number">0x69</literal></expr>,

<expr><literal type="number">0xb4</literal></expr>, <expr><literal type="number">0x82</literal></expr>, <expr><literal type="number">0xc1</literal></expr>, <expr><literal type="number">0x7b</literal></expr>, <expr><literal type="number">0x1a</literal></expr>, <expr><literal type="number">0xed</literal></expr>, <expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0xd8</literal></expr>, <expr><literal type="number">0x6f</literal></expr>, <expr><literal type="number">0xf9</literal></expr>, <expr><literal type="number">0x0c</literal></expr>, <expr><literal type="number">0x95</literal></expr>, <expr><literal type="number">0xa6</literal></expr>, <expr><literal type="number">0x43</literal></expr>, <expr><literal type="number">0x50</literal></expr>, <expr><literal type="number">0x3e</literal></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="number">0xac</literal></expr>, <expr><literal type="number">0xf1</literal></expr>, <expr><literal type="number">0x4a</literal></expr>, <expr><literal type="number">0x2f</literal></expr>, <expr><literal type="number">0x79</literal></expr>, <expr><literal type="number">0xc2</literal></expr>, <expr><literal type="number">0x96</literal></expr>, <expr><literal type="number">0x58</literal></expr>, <expr><literal type="number">0x60</literal></expr>, <expr><literal type="number">0x1d</literal></expr>, <expr><literal type="number">0xd3</literal></expr>, <expr><literal type="number">0xe4</literal></expr>, <expr><literal type="number">0x0e</literal></expr>, <expr><literal type="number">0xb7</literal></expr>, <expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0x8b</literal></expr>,

<expr><literal type="number">0x49</literal></expr>, <expr><literal type="number">0x3e</literal></expr>, <expr><literal type="number">0x2f</literal></expr>, <expr><literal type="number">0xc5</literal></expr>, <expr><literal type="number">0x92</literal></expr>, <expr><literal type="number">0x58</literal></expr>, <expr><literal type="number">0xfc</literal></expr>, <expr><literal type="number">0xa3</literal></expr>, <expr><literal type="number">0xb7</literal></expr>, <expr><literal type="number">0xe0</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x7a</literal></expr>, <expr><literal type="number">0x61</literal></expr>, <expr><literal type="number">0x0d</literal></expr>, <expr><literal type="number">0x8b</literal></expr>, <expr><literal type="number">0xd6</literal></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="number">0xd4</literal></expr>, <expr><literal type="number">0x0b</literal></expr>, <expr><literal type="number">0xb2</literal></expr>, <expr><literal type="number">0x7e</literal></expr>, <expr><literal type="number">0x4f</literal></expr>, <expr><literal type="number">0x90</literal></expr>, <expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0xad</literal></expr>, <expr><literal type="number">0xe3</literal></expr>, <expr><literal type="number">0x3c</literal></expr>, <expr><literal type="number">0x59</literal></expr>, <expr><literal type="number">0xc7</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0xfa</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0x61</literal></expr>,

<expr><literal type="number">0x61</literal></expr>, <expr><literal type="number">0xb4</literal></expr>, <expr><literal type="number">0xdb</literal></expr>, <expr><literal type="number">0x8d</literal></expr>, <expr><literal type="number">0x1c</literal></expr>, <expr><literal type="number">0x43</literal></expr>, <expr><literal type="number">0xa7</literal></expr>, <expr><literal type="number">0x7e</literal></expr>, <expr><literal type="number">0x9a</literal></expr>, <expr><literal type="number">0x5f</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0xf8</literal></expr>, <expr><literal type="number">0xe0</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x39</literal></expr>, <expr><literal type="number">0xc2</literal></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="number">0x1d</literal></expr>, <expr><literal type="number">0xf2</literal></expr>, <expr><literal type="number">0xd8</literal></expr>, <expr><literal type="number">0x84</literal></expr>, <expr><literal type="number">0xa6</literal></expr>, <expr><literal type="number">0x3f</literal></expr>, <expr><literal type="number">0x7b</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0xca</literal></expr>, <expr><literal type="number">0x59</literal></expr>, <expr><literal type="number">0x63</literal></expr>, <expr><literal type="number">0xbe</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0xe0</literal></expr>, <expr><literal type="number">0x9c</literal></expr>, <expr><literal type="number">0x27</literal></expr>,

<expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0x1b</literal></expr>, <expr><literal type="number">0xe4</literal></expr>, <expr><literal type="number">0x71</literal></expr>, <expr><literal type="number">0x49</literal></expr>, <expr><literal type="number">0xac</literal></expr>, <expr><literal type="number">0x8e</literal></expr>, <expr><literal type="number">0xd2</literal></expr>, <expr><literal type="number">0xf0</literal></expr>, <expr><literal type="number">0xc6</literal></expr>, <expr><literal type="number">0x9a</literal></expr>, <expr><literal type="number">0x0d</literal></expr>, <expr><literal type="number">0x3f</literal></expr>, <expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0x65</literal></expr>, <expr><literal type="number">0xb8</literal></expr>,

}</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32_t</name></type> <name><name>S_boxes_P_shuffle</name><index>[<expr><literal type="number">8</literal></expr>]</index><index>[<expr><literal type="number">64</literal></expr>]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="number">0x00808200</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00008000</literal></expr>, <expr><literal type="number">0x00808202</literal></expr>, <expr><literal type="number">0x00808002</literal></expr>, <expr><literal type="number">0x00008202</literal></expr>, <expr><literal type="number">0x00000002</literal></expr>, <expr><literal type="number">0x00008000</literal></expr>,

<expr><literal type="number">0x00000200</literal></expr>, <expr><literal type="number">0x00808200</literal></expr>, <expr><literal type="number">0x00808202</literal></expr>, <expr><literal type="number">0x00000200</literal></expr>, <expr><literal type="number">0x00800202</literal></expr>, <expr><literal type="number">0x00808002</literal></expr>, <expr><literal type="number">0x00800000</literal></expr>, <expr><literal type="number">0x00000002</literal></expr>,

<expr><literal type="number">0x00000202</literal></expr>, <expr><literal type="number">0x00800200</literal></expr>, <expr><literal type="number">0x00800200</literal></expr>, <expr><literal type="number">0x00008200</literal></expr>, <expr><literal type="number">0x00008200</literal></expr>, <expr><literal type="number">0x00808000</literal></expr>, <expr><literal type="number">0x00808000</literal></expr>, <expr><literal type="number">0x00800202</literal></expr>,

<expr><literal type="number">0x00008002</literal></expr>, <expr><literal type="number">0x00800002</literal></expr>, <expr><literal type="number">0x00800002</literal></expr>, <expr><literal type="number">0x00008002</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000202</literal></expr>, <expr><literal type="number">0x00008202</literal></expr>, <expr><literal type="number">0x00800000</literal></expr>,

<expr><literal type="number">0x00008000</literal></expr>, <expr><literal type="number">0x00808202</literal></expr>, <expr><literal type="number">0x00000002</literal></expr>, <expr><literal type="number">0x00808000</literal></expr>, <expr><literal type="number">0x00808200</literal></expr>, <expr><literal type="number">0x00800000</literal></expr>, <expr><literal type="number">0x00800000</literal></expr>, <expr><literal type="number">0x00000200</literal></expr>,

<expr><literal type="number">0x00808002</literal></expr>, <expr><literal type="number">0x00008000</literal></expr>, <expr><literal type="number">0x00008200</literal></expr>, <expr><literal type="number">0x00800002</literal></expr>, <expr><literal type="number">0x00000200</literal></expr>, <expr><literal type="number">0x00000002</literal></expr>, <expr><literal type="number">0x00800202</literal></expr>, <expr><literal type="number">0x00008202</literal></expr>,

<expr><literal type="number">0x00808202</literal></expr>, <expr><literal type="number">0x00008002</literal></expr>, <expr><literal type="number">0x00808000</literal></expr>, <expr><literal type="number">0x00800202</literal></expr>, <expr><literal type="number">0x00800002</literal></expr>, <expr><literal type="number">0x00000202</literal></expr>, <expr><literal type="number">0x00008202</literal></expr>, <expr><literal type="number">0x00808200</literal></expr>,

<expr><literal type="number">0x00000202</literal></expr>, <expr><literal type="number">0x00800200</literal></expr>, <expr><literal type="number">0x00800200</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00008002</literal></expr>, <expr><literal type="number">0x00008200</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00808002</literal></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="number">0x40084010</literal></expr>, <expr><literal type="number">0x40004000</literal></expr>, <expr><literal type="number">0x00004000</literal></expr>, <expr><literal type="number">0x00084010</literal></expr>, <expr><literal type="number">0x00080000</literal></expr>, <expr><literal type="number">0x00000010</literal></expr>, <expr><literal type="number">0x40080010</literal></expr>, <expr><literal type="number">0x40004010</literal></expr>,

<expr><literal type="number">0x40000010</literal></expr>, <expr><literal type="number">0x40084010</literal></expr>, <expr><literal type="number">0x40084000</literal></expr>, <expr><literal type="number">0x40000000</literal></expr>, <expr><literal type="number">0x40004000</literal></expr>, <expr><literal type="number">0x00080000</literal></expr>, <expr><literal type="number">0x00000010</literal></expr>, <expr><literal type="number">0x40080010</literal></expr>,

<expr><literal type="number">0x00084000</literal></expr>, <expr><literal type="number">0x00080010</literal></expr>, <expr><literal type="number">0x40004010</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x40000000</literal></expr>, <expr><literal type="number">0x00004000</literal></expr>, <expr><literal type="number">0x00084010</literal></expr>, <expr><literal type="number">0x40080000</literal></expr>,

<expr><literal type="number">0x00080010</literal></expr>, <expr><literal type="number">0x40000010</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00084000</literal></expr>, <expr><literal type="number">0x00004010</literal></expr>, <expr><literal type="number">0x40084000</literal></expr>, <expr><literal type="number">0x40080000</literal></expr>, <expr><literal type="number">0x00004010</literal></expr>,

<expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00084010</literal></expr>, <expr><literal type="number">0x40080010</literal></expr>, <expr><literal type="number">0x00080000</literal></expr>, <expr><literal type="number">0x40004010</literal></expr>, <expr><literal type="number">0x40080000</literal></expr>, <expr><literal type="number">0x40084000</literal></expr>, <expr><literal type="number">0x00004000</literal></expr>,

<expr><literal type="number">0x40080000</literal></expr>, <expr><literal type="number">0x40004000</literal></expr>, <expr><literal type="number">0x00000010</literal></expr>, <expr><literal type="number">0x40084010</literal></expr>, <expr><literal type="number">0x00084010</literal></expr>, <expr><literal type="number">0x00000010</literal></expr>, <expr><literal type="number">0x00004000</literal></expr>, <expr><literal type="number">0x40000000</literal></expr>,

<expr><literal type="number">0x00004010</literal></expr>, <expr><literal type="number">0x40084000</literal></expr>, <expr><literal type="number">0x00080000</literal></expr>, <expr><literal type="number">0x40000010</literal></expr>, <expr><literal type="number">0x00080010</literal></expr>, <expr><literal type="number">0x40004010</literal></expr>, <expr><literal type="number">0x40000010</literal></expr>, <expr><literal type="number">0x00080010</literal></expr>,

<expr><literal type="number">0x00084000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x40004000</literal></expr>, <expr><literal type="number">0x00004010</literal></expr>, <expr><literal type="number">0x40000000</literal></expr>, <expr><literal type="number">0x40080010</literal></expr>, <expr><literal type="number">0x40084010</literal></expr>, <expr><literal type="number">0x00084000</literal></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="number">0x00000104</literal></expr>, <expr><literal type="number">0x04010100</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x04010004</literal></expr>, <expr><literal type="number">0x04000100</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00010104</literal></expr>, <expr><literal type="number">0x04000100</literal></expr>,

<expr><literal type="number">0x00010004</literal></expr>, <expr><literal type="number">0x04000004</literal></expr>, <expr><literal type="number">0x04000004</literal></expr>, <expr><literal type="number">0x00010000</literal></expr>, <expr><literal type="number">0x04010104</literal></expr>, <expr><literal type="number">0x00010004</literal></expr>, <expr><literal type="number">0x04010000</literal></expr>, <expr><literal type="number">0x00000104</literal></expr>,

<expr><literal type="number">0x04000000</literal></expr>, <expr><literal type="number">0x00000004</literal></expr>, <expr><literal type="number">0x04010100</literal></expr>, <expr><literal type="number">0x00000100</literal></expr>, <expr><literal type="number">0x00010100</literal></expr>, <expr><literal type="number">0x04010000</literal></expr>, <expr><literal type="number">0x04010004</literal></expr>, <expr><literal type="number">0x00010104</literal></expr>,

<expr><literal type="number">0x04000104</literal></expr>, <expr><literal type="number">0x00010100</literal></expr>, <expr><literal type="number">0x00010000</literal></expr>, <expr><literal type="number">0x04000104</literal></expr>, <expr><literal type="number">0x00000004</literal></expr>, <expr><literal type="number">0x04010104</literal></expr>, <expr><literal type="number">0x00000100</literal></expr>, <expr><literal type="number">0x04000000</literal></expr>,

<expr><literal type="number">0x04010100</literal></expr>, <expr><literal type="number">0x04000000</literal></expr>, <expr><literal type="number">0x00010004</literal></expr>, <expr><literal type="number">0x00000104</literal></expr>, <expr><literal type="number">0x00010000</literal></expr>, <expr><literal type="number">0x04010100</literal></expr>, <expr><literal type="number">0x04000100</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>,

<expr><literal type="number">0x00000100</literal></expr>, <expr><literal type="number">0x00010004</literal></expr>, <expr><literal type="number">0x04010104</literal></expr>, <expr><literal type="number">0x04000100</literal></expr>, <expr><literal type="number">0x04000004</literal></expr>, <expr><literal type="number">0x00000100</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x04010004</literal></expr>,

<expr><literal type="number">0x04000104</literal></expr>, <expr><literal type="number">0x00010000</literal></expr>, <expr><literal type="number">0x04000000</literal></expr>, <expr><literal type="number">0x04010104</literal></expr>, <expr><literal type="number">0x00000004</literal></expr>, <expr><literal type="number">0x00010104</literal></expr>, <expr><literal type="number">0x00010100</literal></expr>, <expr><literal type="number">0x04000004</literal></expr>,

<expr><literal type="number">0x04010000</literal></expr>, <expr><literal type="number">0x04000104</literal></expr>, <expr><literal type="number">0x00000104</literal></expr>, <expr><literal type="number">0x04010000</literal></expr>, <expr><literal type="number">0x00010104</literal></expr>, <expr><literal type="number">0x00000004</literal></expr>, <expr><literal type="number">0x04010004</literal></expr>, <expr><literal type="number">0x00010100</literal></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="number">0x80401000</literal></expr>, <expr><literal type="number">0x80001040</literal></expr>, <expr><literal type="number">0x80001040</literal></expr>, <expr><literal type="number">0x00000040</literal></expr>, <expr><literal type="number">0x00401040</literal></expr>, <expr><literal type="number">0x80400040</literal></expr>, <expr><literal type="number">0x80400000</literal></expr>, <expr><literal type="number">0x80001000</literal></expr>,

<expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00401000</literal></expr>, <expr><literal type="number">0x00401000</literal></expr>, <expr><literal type="number">0x80401040</literal></expr>, <expr><literal type="number">0x80000040</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00400040</literal></expr>, <expr><literal type="number">0x80400000</literal></expr>,

<expr><literal type="number">0x80000000</literal></expr>, <expr><literal type="number">0x00001000</literal></expr>, <expr><literal type="number">0x00400000</literal></expr>, <expr><literal type="number">0x80401000</literal></expr>, <expr><literal type="number">0x00000040</literal></expr>, <expr><literal type="number">0x00400000</literal></expr>, <expr><literal type="number">0x80001000</literal></expr>, <expr><literal type="number">0x00001040</literal></expr>,

<expr><literal type="number">0x80400040</literal></expr>, <expr><literal type="number">0x80000000</literal></expr>, <expr><literal type="number">0x00001040</literal></expr>, <expr><literal type="number">0x00400040</literal></expr>, <expr><literal type="number">0x00001000</literal></expr>, <expr><literal type="number">0x00401040</literal></expr>, <expr><literal type="number">0x80401040</literal></expr>, <expr><literal type="number">0x80000040</literal></expr>,

<expr><literal type="number">0x00400040</literal></expr>, <expr><literal type="number">0x80400000</literal></expr>, <expr><literal type="number">0x00401000</literal></expr>, <expr><literal type="number">0x80401040</literal></expr>, <expr><literal type="number">0x80000040</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00401000</literal></expr>,

<expr><literal type="number">0x00001040</literal></expr>, <expr><literal type="number">0x00400040</literal></expr>, <expr><literal type="number">0x80400040</literal></expr>, <expr><literal type="number">0x80000000</literal></expr>, <expr><literal type="number">0x80401000</literal></expr>, <expr><literal type="number">0x80001040</literal></expr>, <expr><literal type="number">0x80001040</literal></expr>, <expr><literal type="number">0x00000040</literal></expr>,

<expr><literal type="number">0x80401040</literal></expr>, <expr><literal type="number">0x80000040</literal></expr>, <expr><literal type="number">0x80000000</literal></expr>, <expr><literal type="number">0x00001000</literal></expr>, <expr><literal type="number">0x80400000</literal></expr>, <expr><literal type="number">0x80001000</literal></expr>, <expr><literal type="number">0x00401040</literal></expr>, <expr><literal type="number">0x80400040</literal></expr>,

<expr><literal type="number">0x80001000</literal></expr>, <expr><literal type="number">0x00001040</literal></expr>, <expr><literal type="number">0x00400000</literal></expr>, <expr><literal type="number">0x80401000</literal></expr>, <expr><literal type="number">0x00000040</literal></expr>, <expr><literal type="number">0x00400000</literal></expr>, <expr><literal type="number">0x00001000</literal></expr>, <expr><literal type="number">0x00401040</literal></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="number">0x00000080</literal></expr>, <expr><literal type="number">0x01040080</literal></expr>, <expr><literal type="number">0x01040000</literal></expr>, <expr><literal type="number">0x21000080</literal></expr>, <expr><literal type="number">0x00040000</literal></expr>, <expr><literal type="number">0x00000080</literal></expr>, <expr><literal type="number">0x20000000</literal></expr>, <expr><literal type="number">0x01040000</literal></expr>,

<expr><literal type="number">0x20040080</literal></expr>, <expr><literal type="number">0x00040000</literal></expr>, <expr><literal type="number">0x01000080</literal></expr>, <expr><literal type="number">0x20040080</literal></expr>, <expr><literal type="number">0x21000080</literal></expr>, <expr><literal type="number">0x21040000</literal></expr>, <expr><literal type="number">0x00040080</literal></expr>, <expr><literal type="number">0x20000000</literal></expr>,

<expr><literal type="number">0x01000000</literal></expr>, <expr><literal type="number">0x20040000</literal></expr>, <expr><literal type="number">0x20040000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x20000080</literal></expr>, <expr><literal type="number">0x21040080</literal></expr>, <expr><literal type="number">0x21040080</literal></expr>, <expr><literal type="number">0x01000080</literal></expr>,

<expr><literal type="number">0x21040000</literal></expr>, <expr><literal type="number">0x20000080</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x21000000</literal></expr>, <expr><literal type="number">0x01040080</literal></expr>, <expr><literal type="number">0x01000000</literal></expr>, <expr><literal type="number">0x21000000</literal></expr>, <expr><literal type="number">0x00040080</literal></expr>,

<expr><literal type="number">0x00040000</literal></expr>, <expr><literal type="number">0x21000080</literal></expr>, <expr><literal type="number">0x00000080</literal></expr>, <expr><literal type="number">0x01000000</literal></expr>, <expr><literal type="number">0x20000000</literal></expr>, <expr><literal type="number">0x01040000</literal></expr>, <expr><literal type="number">0x21000080</literal></expr>, <expr><literal type="number">0x20040080</literal></expr>,

<expr><literal type="number">0x01000080</literal></expr>, <expr><literal type="number">0x20000000</literal></expr>, <expr><literal type="number">0x21040000</literal></expr>, <expr><literal type="number">0x01040080</literal></expr>, <expr><literal type="number">0x20040080</literal></expr>, <expr><literal type="number">0x00000080</literal></expr>, <expr><literal type="number">0x01000000</literal></expr>, <expr><literal type="number">0x21040000</literal></expr>,

<expr><literal type="number">0x21040080</literal></expr>, <expr><literal type="number">0x00040080</literal></expr>, <expr><literal type="number">0x21000000</literal></expr>, <expr><literal type="number">0x21040080</literal></expr>, <expr><literal type="number">0x01040000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x20040000</literal></expr>, <expr><literal type="number">0x21000000</literal></expr>,

<expr><literal type="number">0x00040080</literal></expr>, <expr><literal type="number">0x01000080</literal></expr>, <expr><literal type="number">0x20000080</literal></expr>, <expr><literal type="number">0x00040000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x20040000</literal></expr>, <expr><literal type="number">0x01040080</literal></expr>, <expr><literal type="number">0x20000080</literal></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="number">0x10000008</literal></expr>, <expr><literal type="number">0x10200000</literal></expr>, <expr><literal type="number">0x00002000</literal></expr>, <expr><literal type="number">0x10202008</literal></expr>, <expr><literal type="number">0x10200000</literal></expr>, <expr><literal type="number">0x00000008</literal></expr>, <expr><literal type="number">0x10202008</literal></expr>, <expr><literal type="number">0x00200000</literal></expr>,

<expr><literal type="number">0x10002000</literal></expr>, <expr><literal type="number">0x00202008</literal></expr>, <expr><literal type="number">0x00200000</literal></expr>, <expr><literal type="number">0x10000008</literal></expr>, <expr><literal type="number">0x00200008</literal></expr>, <expr><literal type="number">0x10002000</literal></expr>, <expr><literal type="number">0x10000000</literal></expr>, <expr><literal type="number">0x00002008</literal></expr>,

<expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00200008</literal></expr>, <expr><literal type="number">0x10002008</literal></expr>, <expr><literal type="number">0x00002000</literal></expr>, <expr><literal type="number">0x00202000</literal></expr>, <expr><literal type="number">0x10002008</literal></expr>, <expr><literal type="number">0x00000008</literal></expr>, <expr><literal type="number">0x10200008</literal></expr>,

<expr><literal type="number">0x10200008</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00202008</literal></expr>, <expr><literal type="number">0x10202000</literal></expr>, <expr><literal type="number">0x00002008</literal></expr>, <expr><literal type="number">0x00202000</literal></expr>, <expr><literal type="number">0x10202000</literal></expr>, <expr><literal type="number">0x10000000</literal></expr>,

<expr><literal type="number">0x10002000</literal></expr>, <expr><literal type="number">0x00000008</literal></expr>, <expr><literal type="number">0x10200008</literal></expr>, <expr><literal type="number">0x00202000</literal></expr>, <expr><literal type="number">0x10202008</literal></expr>, <expr><literal type="number">0x00200000</literal></expr>, <expr><literal type="number">0x00002008</literal></expr>, <expr><literal type="number">0x10000008</literal></expr>,

<expr><literal type="number">0x00200000</literal></expr>, <expr><literal type="number">0x10002000</literal></expr>, <expr><literal type="number">0x10000000</literal></expr>, <expr><literal type="number">0x00002008</literal></expr>, <expr><literal type="number">0x10000008</literal></expr>, <expr><literal type="number">0x10202008</literal></expr>, <expr><literal type="number">0x00202000</literal></expr>, <expr><literal type="number">0x10200000</literal></expr>,

<expr><literal type="number">0x00202008</literal></expr>, <expr><literal type="number">0x10202000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x10200008</literal></expr>, <expr><literal type="number">0x00000008</literal></expr>, <expr><literal type="number">0x00002000</literal></expr>, <expr><literal type="number">0x10200000</literal></expr>, <expr><literal type="number">0x00202008</literal></expr>,

<expr><literal type="number">0x00002000</literal></expr>, <expr><literal type="number">0x00200008</literal></expr>, <expr><literal type="number">0x10002008</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x10202000</literal></expr>, <expr><literal type="number">0x10000000</literal></expr>, <expr><literal type="number">0x00200008</literal></expr>, <expr><literal type="number">0x10002008</literal></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="number">0x00100000</literal></expr>, <expr><literal type="number">0x02100001</literal></expr>, <expr><literal type="number">0x02000401</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000400</literal></expr>, <expr><literal type="number">0x02000401</literal></expr>, <expr><literal type="number">0x00100401</literal></expr>, <expr><literal type="number">0x02100400</literal></expr>,

<expr><literal type="number">0x02100401</literal></expr>, <expr><literal type="number">0x00100000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x02000001</literal></expr>, <expr><literal type="number">0x00000001</literal></expr>, <expr><literal type="number">0x02000000</literal></expr>, <expr><literal type="number">0x02100001</literal></expr>, <expr><literal type="number">0x00000401</literal></expr>,

<expr><literal type="number">0x02000400</literal></expr>, <expr><literal type="number">0x00100401</literal></expr>, <expr><literal type="number">0x00100001</literal></expr>, <expr><literal type="number">0x02000400</literal></expr>, <expr><literal type="number">0x02000001</literal></expr>, <expr><literal type="number">0x02100000</literal></expr>, <expr><literal type="number">0x02100400</literal></expr>, <expr><literal type="number">0x00100001</literal></expr>,

<expr><literal type="number">0x02100000</literal></expr>, <expr><literal type="number">0x00000400</literal></expr>, <expr><literal type="number">0x00000401</literal></expr>, <expr><literal type="number">0x02100401</literal></expr>, <expr><literal type="number">0x00100400</literal></expr>, <expr><literal type="number">0x00000001</literal></expr>, <expr><literal type="number">0x02000000</literal></expr>, <expr><literal type="number">0x00100400</literal></expr>,

<expr><literal type="number">0x02000000</literal></expr>, <expr><literal type="number">0x00100400</literal></expr>, <expr><literal type="number">0x00100000</literal></expr>, <expr><literal type="number">0x02000401</literal></expr>, <expr><literal type="number">0x02000401</literal></expr>, <expr><literal type="number">0x02100001</literal></expr>, <expr><literal type="number">0x02100001</literal></expr>, <expr><literal type="number">0x00000001</literal></expr>,

<expr><literal type="number">0x00100001</literal></expr>, <expr><literal type="number">0x02000000</literal></expr>, <expr><literal type="number">0x02000400</literal></expr>, <expr><literal type="number">0x00100000</literal></expr>, <expr><literal type="number">0x02100400</literal></expr>, <expr><literal type="number">0x00000401</literal></expr>, <expr><literal type="number">0x00100401</literal></expr>, <expr><literal type="number">0x02100400</literal></expr>,

<expr><literal type="number">0x00000401</literal></expr>, <expr><literal type="number">0x02000001</literal></expr>, <expr><literal type="number">0x02100401</literal></expr>, <expr><literal type="number">0x02100000</literal></expr>, <expr><literal type="number">0x00100400</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000001</literal></expr>, <expr><literal type="number">0x02100401</literal></expr>,

<expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00100401</literal></expr>, <expr><literal type="number">0x02100000</literal></expr>, <expr><literal type="number">0x00000400</literal></expr>, <expr><literal type="number">0x02000001</literal></expr>, <expr><literal type="number">0x02000400</literal></expr>, <expr><literal type="number">0x00000400</literal></expr>, <expr><literal type="number">0x00100001</literal></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="number">0x08000820</literal></expr>, <expr><literal type="number">0x00000800</literal></expr>, <expr><literal type="number">0x00020000</literal></expr>, <expr><literal type="number">0x08020820</literal></expr>, <expr><literal type="number">0x08000000</literal></expr>, <expr><literal type="number">0x08000820</literal></expr>, <expr><literal type="number">0x00000020</literal></expr>, <expr><literal type="number">0x08000000</literal></expr>,

<expr><literal type="number">0x00020020</literal></expr>, <expr><literal type="number">0x08020000</literal></expr>, <expr><literal type="number">0x08020820</literal></expr>, <expr><literal type="number">0x00020800</literal></expr>, <expr><literal type="number">0x08020800</literal></expr>, <expr><literal type="number">0x00020820</literal></expr>, <expr><literal type="number">0x00000800</literal></expr>, <expr><literal type="number">0x00000020</literal></expr>,

<expr><literal type="number">0x08020000</literal></expr>, <expr><literal type="number">0x08000020</literal></expr>, <expr><literal type="number">0x08000800</literal></expr>, <expr><literal type="number">0x00000820</literal></expr>, <expr><literal type="number">0x00020800</literal></expr>, <expr><literal type="number">0x00020020</literal></expr>, <expr><literal type="number">0x08020020</literal></expr>, <expr><literal type="number">0x08020800</literal></expr>,

<expr><literal type="number">0x00000820</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x08020020</literal></expr>, <expr><literal type="number">0x08000020</literal></expr>, <expr><literal type="number">0x08000800</literal></expr>, <expr><literal type="number">0x00020820</literal></expr>, <expr><literal type="number">0x00020000</literal></expr>,

<expr><literal type="number">0x00020820</literal></expr>, <expr><literal type="number">0x00020000</literal></expr>, <expr><literal type="number">0x08020800</literal></expr>, <expr><literal type="number">0x00000800</literal></expr>, <expr><literal type="number">0x00000020</literal></expr>, <expr><literal type="number">0x08020020</literal></expr>, <expr><literal type="number">0x00000800</literal></expr>, <expr><literal type="number">0x00020820</literal></expr>,

<expr><literal type="number">0x08000800</literal></expr>, <expr><literal type="number">0x00000020</literal></expr>, <expr><literal type="number">0x08000020</literal></expr>, <expr><literal type="number">0x08020000</literal></expr>, <expr><literal type="number">0x08020020</literal></expr>, <expr><literal type="number">0x08000000</literal></expr>, <expr><literal type="number">0x00020000</literal></expr>, <expr><literal type="number">0x08000820</literal></expr>,

<expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x08020820</literal></expr>, <expr><literal type="number">0x00020020</literal></expr>, <expr><literal type="number">0x08000020</literal></expr>, <expr><literal type="number">0x08020000</literal></expr>, <expr><literal type="number">0x08000800</literal></expr>, <expr><literal type="number">0x08000820</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>,

<expr><literal type="number">0x08020820</literal></expr>, <expr><literal type="number">0x00020800</literal></expr>, <expr><literal type="number">0x00020800</literal></expr>, <expr><literal type="number">0x00000820</literal></expr>, <expr><literal type="number">0x00000820</literal></expr>, <expr><literal type="number">0x00020020</literal></expr>, <expr><literal type="number">0x08000000</literal></expr>, <expr><literal type="number">0x08020800</literal></expr>, }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>uint64_t</name></type> <name>shuffle</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>in</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>shuffle</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>shuffle_len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>shuffle_len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>res</name> <operator>+=</operator> <name>res</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>in</name> <operator>&gt;&gt;</operator> <operator>*</operator><name>shuffle</name><operator>++</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint64_t</name></type> <name>shuffle_inv</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>in</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>shuffle</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>shuffle_len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>shuffle</name> <operator>+=</operator> <name>shuffle_len</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>shuffle_len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>|=</operator> <operator>(</operator><name>in</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <operator>*</operator><name>shuffle</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>in</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>f_func</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>k</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>out</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><name>r</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>r</name> <operator>&gt;&gt;</operator> <literal type="number">31</literal><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">7</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>tmp</name> <init>= <expr><operator>(</operator><name>r</name> <operator>^</operator> <name>k</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_SMALL</name></expr></cpp:if>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>v</name> <init>= <expr><name><name>S_boxes</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>tmp</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>v</name> <operator>&gt;&gt;=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>out</name> <operator>=</operator> <operator>(</operator><name>out</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>v</name> <operator>&lt;&lt;</operator> <literal type="number">28</literal><operator>)</operator></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>out</name> <operator>|=</operator> <name><name>S_boxes_P_shuffle</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>tmp</name></expr>]</index></name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><name>r</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>r</name> <operator>&lt;&lt;</operator> <literal type="number">28</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>k</name> <operator>&gt;&gt;=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_SMALL</name></expr></cpp:if>

<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>shuffle</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>P_shuffle</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>P_shuffle</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>out</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint64_t</name></type> <name>key_shift_left</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>CDn</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>carries</name> <init>= <expr><operator>(</operator><name>CDn</name> <operator>&gt;&gt;</operator> <literal type="number">27</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x10000001</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>CDn</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>CDn</name> <operator>&amp;=</operator> <operator>~</operator><literal type="number">0x10000001</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>CDn</name> <operator>|=</operator> <name>carries</name></expr>;</expr_stmt>

<return>return <expr><name>CDn</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>gen_roundkeys</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name><name>K</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>key</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>CDn</name> <init>= <expr><call><name>shuffle</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>PC1_shuffle</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PC1_shuffle</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>CDn</name> <operator>=</operator> <call><name>key_shift_left</name><argument_list>(<argument><expr><name>CDn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>!=</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>!=</operator> <literal type="number">15</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>CDn</name> <operator>=</operator> <call><name>key_shift_left</name><argument_list>(<argument><expr><name>CDn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>K</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>shuffle</name><argument_list>(<argument><expr><name>CDn</name></expr></argument>, <argument><expr><name>PC2_shuffle</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PC2_shuffle</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint64_t</name></type> <name>des_encdec</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>in</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name><name>K</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>decrypt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>decrypt</name> <operator>=</operator> <ternary><condition><expr><name>decrypt</name></expr> ?</condition><then> <expr><literal type="number">15</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>in</name> <operator>=</operator> <call><name>shuffle</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>IP_shuffle</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>IP_shuffle</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>f_res</name></decl>;</decl_stmt>

<expr_stmt><expr><name>f_res</name> <operator>=</operator> <call><name>f_func</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name><name>K</name><index>[<expr><name>decrypt</name> <operator>^</operator> <name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>in</name> <operator>=</operator> <operator>(</operator><name>in</name> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>in</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>in</name> <operator>^=</operator> <name>f_res</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>in</name> <operator>=</operator> <operator>(</operator><name>in</name> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>in</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>in</name> <operator>=</operator> <call><name>shuffle_inv</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>IP_shuffle</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>IP_shuffle</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>in</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>AVDES</name> <modifier>*</modifier></type><name>av_des_alloc</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>AVDES</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>av_des_init</name><parameter_list>(<parameter><decl><type><name>AVDES</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>key_bits</name></decl></parameter>, <parameter><decl><type><name>av_unused</name> <name>int</name></type> <name>decrypt</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>key_bits</name> <operator>!=</operator> <literal type="number">64</literal> <operator>&amp;&amp;</operator> <name>key_bits</name> <operator>!=</operator> <literal type="number">192</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>triple_des</name></name> <operator>=</operator> <name>key_bits</name> <operator>&gt;</operator> <literal type="number">64</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gen_roundkeys</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>round_keys</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>AV_RB64</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>triple_des</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>gen_roundkeys</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>round_keys</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>AV_RB64</name><argument_list>(<argument><expr><name>key</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gen_roundkeys</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>round_keys</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>AV_RB64</name><argument_list>(<argument><expr><name>key</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>av_des_crypt_mac</name><parameter_list>(<parameter><decl><type><name>AVDES</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>iv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>decrypt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mac</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>iv_val</name> <init>= <expr><ternary><condition><expr><name>iv</name></expr> ?</condition><then> <expr><call><name>AV_RB64</name><argument_list>(<argument><expr><name>iv</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>count</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>dst_val</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>src_val</name> <init>= <expr><ternary><condition><expr><name>src</name></expr> ?</condition><then> <expr><call><name>AV_RB64</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>decrypt</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>tmp</name> <init>= <expr><name>src_val</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>triple_des</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>src_val</name> <operator>=</operator> <call><name>des_encdec</name><argument_list>(<argument><expr><name>src_val</name></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>round_keys</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src_val</name> <operator>=</operator> <call><name>des_encdec</name><argument_list>(<argument><expr><name>src_val</name></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>round_keys</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>dst_val</name> <operator>=</operator> <call><name>des_encdec</name><argument_list>(<argument><expr><name>src_val</name></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>round_keys</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>^</operator> <name>iv_val</name></expr>;</expr_stmt>

<expr_stmt><expr><name>iv_val</name> <operator>=</operator> <ternary><condition><expr><name>iv</name></expr> ?</condition><then> <expr><name>tmp</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>dst_val</name> <operator>=</operator> <call><name>des_encdec</name><argument_list>(<argument><expr><name>src_val</name> <operator>^</operator> <name>iv_val</name></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>round_keys</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>triple_des</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>dst_val</name> <operator>=</operator> <call><name>des_encdec</name><argument_list>(<argument><expr><name>dst_val</name></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>round_keys</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst_val</name> <operator>=</operator> <call><name>des_encdec</name><argument_list>(<argument><expr><name>dst_val</name></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>round_keys</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>iv_val</name> <operator>=</operator> <ternary><condition><expr><name>iv</name></expr> ?</condition><then> <expr><name>dst_val</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>AV_WB64</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>mac</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>iv</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>AV_WB64</name><argument_list>(<argument><expr><name>iv</name></expr></argument>, <argument><expr><name>iv_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>av_des_crypt</name><parameter_list>(<parameter><decl><type><name>AVDES</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>iv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>decrypt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>av_des_crypt_mac</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name>iv</name></expr></argument>, <argument><expr><name>decrypt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>av_des_mac</name><parameter_list>(<parameter><decl><type><name>AVDES</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<macro><name>av_des_crypt_mac</name><argument_list>(<argument>d</argument>, <argument>dst</argument>, <argument>src</argument>, <argument>count</argument>, <argument>(uint8_t[<literal type="number">8</literal>]) { <literal type="number">0</literal> }</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

</block_content>}</block></function>

</unit>
