<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavutil\adler32.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"adler32.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"intreadwrite.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BASE</name></cpp:macro> <cpp:value>65521L</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DO1</name><parameter_list>(<parameter><type><name>buf</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ s1 += *buf++; s2 += s1; }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DO4</name><parameter_list>(<parameter><type><name>buf</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>DO1(buf); DO1(buf); DO1(buf); DO1(buf);</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DO16</name><parameter_list>(<parameter><type><name>buf</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>DO4(buf); DO4(buf); DO4(buf); DO4(buf);</cpp:value></cpp:define>

<function><type><name>unsigned</name> <name>long</name></type> <name>av_adler32_update</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>adler</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type> <name>buf</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>s1</name> <init>= <expr><name>adler</name> <operator>&amp;</operator> <literal type="number">0xffff</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>s2</name> <init>= <expr><name>adler</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_FAST_64BIT</name> <operator>&amp;&amp;</operator> <name>HAVE_FAST_UNALIGNED</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>CONFIG_SMALL</name></expr></cpp:if>

<decl_stmt><decl><type><name>unsigned</name></type> <name>len2</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><operator>(</operator><name>len</name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="number">23</literal><operator>*</operator><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len2</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>a1</name><init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>a2</name><init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>b1</name><init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>b2</name><init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>len2</name></expr>;</expr_stmt>

<expr_stmt><expr><name>s2</name> <operator>+=</operator> <name>s1</name><operator>*</operator><name>len2</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>len2</name> <operator>&gt;=</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>v</name> <init>= <expr><call><name>AV_RN64</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>a2</name> <operator>+=</operator> <name>a1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>b2</name> <operator>+=</operator> <name>b1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>a1</name> <operator>+=</operator> <name>v</name> <operator>&amp;</operator><literal type="number">0x00FF00FF00FF00FF</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>b1</name> <operator>+=</operator> <operator>(</operator><name>v</name><operator>&gt;&gt;</operator><literal type="number">8</literal><operator>)</operator><operator>&amp;</operator><literal type="number">0x00FF00FF00FF00FF</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>len2</name> <operator>-=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name><operator>+=</operator><literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>s1</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>a1</name><operator>+</operator><name>b1</name><operator>)</operator><operator>*</operator><literal type="number">0x1000100010001</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">48</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>s2</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>a2</name><operator>&amp;</operator><literal type="number">0xFFFF0000FFFF</literal><operator>)</operator><operator>+</operator><operator>(</operator><name>b2</name><operator>&amp;</operator><literal type="number">0xFFFF0000FFFF</literal><operator>)</operator><operator>+</operator><operator>(</operator><operator>(</operator><name>a2</name><operator>&gt;&gt;</operator><literal type="number">16</literal><operator>)</operator><operator>&amp;</operator><literal type="number">0xFFFF0000FFFF</literal><operator>)</operator><operator>+</operator><operator>(</operator><operator>(</operator><name>b2</name><operator>&gt;&gt;</operator><literal type="number">16</literal><operator>)</operator><operator>&amp;</operator><literal type="number">0xFFFF0000FFFF</literal><operator>)</operator><operator>)</operator><operator>*</operator><literal type="number">0x800000008</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">32</literal><operator>)</operator>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_BIGENDIAN</name></expr></cpp:if>

<operator>+</operator> <literal type="number">2</literal><operator>*</operator><operator>(</operator><operator>(</operator><name>b1</name><operator>*</operator><literal type="number">0x1000200030004</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">48</literal><operator>)</operator>

<operator>+</operator> <operator>(</operator><operator>(</operator><name>a1</name><operator>*</operator><literal type="number">0x1000100010001</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">48</literal><operator>)</operator>

<operator>+</operator> <literal type="number">2</literal><operator>*</operator><operator>(</operator><operator>(</operator><name>a1</name><operator>*</operator><literal type="number">0x0000100020003</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">48</literal><operator>)</operator></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><operator>+</operator> <literal type="number">2</literal><operator>*</operator><operator>(</operator><operator>(</operator><name>a1</name><operator>*</operator><literal type="number">0x4000300020001</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">48</literal><operator>)</operator>

<operator>+</operator> <operator>(</operator><operator>(</operator><name>b1</name><operator>*</operator><literal type="number">0x1000100010001</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">48</literal><operator>)</operator>

<operator>+</operator> <literal type="number">2</literal><operator>*</operator><operator>(</operator><operator>(</operator><name>b1</name><operator>*</operator><literal type="number">0x3000200010000</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">48</literal><operator>)</operator></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<while>while <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <name>s2</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <literal type="number">31</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>DO4</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>DO1</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>s1</name> <operator>%=</operator> <name>BASE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>s2</name> <operator>%=</operator> <name>BASE</name></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><operator>(</operator><name>s2</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <name>s1</name></expr>;</return>

</block_content>}</block></function>

</unit>
