<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavutil\eval.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;float.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"attributes.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avutil.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"eval.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ffmath.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"log.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mathematics.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"time.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avstring.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"timer.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"reverse.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>Parser</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>stack_index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>double</name> <modifier>*</modifier></type><name>const_values</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier> <modifier>*</modifier></type><name>const_names</name></decl>;</decl_stmt> 

<macro><name>double</name> <argument_list>(<argument>* const *funcs1</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>,</operator> <name>double</name> <name>a</name><operator>)</operator></expr>;</expr_stmt> 

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier> <modifier>*</modifier></type><name>func1_names</name></decl>;</decl_stmt> 

<macro><name>double</name> <argument_list>(<argument>* const *funcs2</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>,</operator> <name>double</name> <name>a</name><operator>,</operator> <name>double</name> <name>b</name><operator>)</operator></expr>;</expr_stmt> 

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier> <modifier>*</modifier></type><name>func2_names</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>log_offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>log_ctx</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VARS</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>

<decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name>var</name></decl>;</decl_stmt>

}</block></struct></type> <name>Parser</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>eval_class</name> <init>= <expr><block>{

<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"Eval"</literal></expr>,

<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,

<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>NULL</name></expr>,

<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,

<expr><operator>.</operator><name>log_level_offset_offset</name> <operator>=</operator> <call><name>offsetof</name><argument_list>(<argument><expr><name>Parser</name></expr></argument>, <argument><expr><name>log_offset</name></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>parent_log_context_offset</name> <operator>=</operator> <call><name>offsetof</name><argument_list>(<argument><expr><name>Parser</name></expr></argument>, <argument><expr><name>log_ctx</name></expr></argument>)</argument_list></call></expr>,

}</block></expr></init></decl>;</decl_stmt>

<struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{

<decl_stmt><decl><type><name>double</name></type> <name>bin_val</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>dec_val</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int8_t</name></type> <name>exp</name></decl>;</decl_stmt>

}</block> <decl><name><name>si_prefixes</name><index>[<expr><literal type="char">'z'</literal> <operator>-</operator> <literal type="char">'E'</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{

<expr><index>[<expr><literal type="char">'y'</literal><operator>-</operator><literal type="char">'E'</literal></expr>]</index><operator>=</operator> <block>{ <expr><literal type="number">8.271806125530276749e-25</literal></expr>, <expr><literal type="number">1e-24</literal></expr>, <expr><operator>-</operator><literal type="number">24</literal></expr> }</block></expr>,

<expr><index>[<expr><literal type="char">'z'</literal><operator>-</operator><literal type="char">'E'</literal></expr>]</index><operator>=</operator> <block>{ <expr><literal type="number">8.4703294725430034e-22</literal></expr>, <expr><literal type="number">1e-21</literal></expr>, <expr><operator>-</operator><literal type="number">21</literal></expr> }</block></expr>,

<expr><index>[<expr><literal type="char">'a'</literal><operator>-</operator><literal type="char">'E'</literal></expr>]</index><operator>=</operator> <block>{ <expr><literal type="number">8.6736173798840355e-19</literal></expr>, <expr><literal type="number">1e-18</literal></expr>, <expr><operator>-</operator><literal type="number">18</literal></expr> }</block></expr>,

<expr><index>[<expr><literal type="char">'f'</literal><operator>-</operator><literal type="char">'E'</literal></expr>]</index><operator>=</operator> <block>{ <expr><literal type="number">8.8817841970012523e-16</literal></expr>, <expr><literal type="number">1e-15</literal></expr>, <expr><operator>-</operator><literal type="number">15</literal></expr> }</block></expr>,

<expr><index>[<expr><literal type="char">'p'</literal><operator>-</operator><literal type="char">'E'</literal></expr>]</index><operator>=</operator> <block>{ <expr><literal type="number">9.0949470177292824e-13</literal></expr>, <expr><literal type="number">1e-12</literal></expr>, <expr><operator>-</operator><literal type="number">12</literal></expr> }</block></expr>,

<expr><index>[<expr><literal type="char">'n'</literal><operator>-</operator><literal type="char">'E'</literal></expr>]</index><operator>=</operator> <block>{ <expr><literal type="number">9.3132257461547852e-10</literal></expr>, <expr><literal type="number">1e-9</literal></expr>, <expr><operator>-</operator><literal type="number">9</literal></expr> }</block></expr>,

<expr><index>[<expr><literal type="char">'u'</literal><operator>-</operator><literal type="char">'E'</literal></expr>]</index><operator>=</operator> <block>{ <expr><literal type="number">9.5367431640625e-7</literal></expr>, <expr><literal type="number">1e-6</literal></expr>, <expr><operator>-</operator><literal type="number">6</literal></expr> }</block></expr>,

<expr><index>[<expr><literal type="char">'m'</literal><operator>-</operator><literal type="char">'E'</literal></expr>]</index><operator>=</operator> <block>{ <expr><literal type="number">9.765625e-4</literal></expr>, <expr><literal type="number">1e-3</literal></expr>, <expr><operator>-</operator><literal type="number">3</literal></expr> }</block></expr>,

<expr><index>[<expr><literal type="char">'c'</literal><operator>-</operator><literal type="char">'E'</literal></expr>]</index><operator>=</operator> <block>{ <expr><literal type="number">9.8431332023036951e-3</literal></expr>, <expr><literal type="number">1e-2</literal></expr>, <expr><operator>-</operator><literal type="number">2</literal></expr> }</block></expr>,

<expr><index>[<expr><literal type="char">'d'</literal><operator>-</operator><literal type="char">'E'</literal></expr>]</index><operator>=</operator> <block>{ <expr><literal type="number">9.921256574801246e-2</literal></expr>, <expr><literal type="number">1e-1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><literal type="char">'h'</literal><operator>-</operator><literal type="char">'E'</literal></expr>]</index><operator>=</operator> <block>{ <expr><literal type="number">1.0159366732596479e2</literal></expr>, <expr><literal type="number">1e2</literal></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>,

<expr><index>[<expr><literal type="char">'k'</literal><operator>-</operator><literal type="char">'E'</literal></expr>]</index><operator>=</operator> <block>{ <expr><literal type="number">1.024e3</literal></expr>, <expr><literal type="number">1e3</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>,

<expr><index>[<expr><literal type="char">'K'</literal><operator>-</operator><literal type="char">'E'</literal></expr>]</index><operator>=</operator> <block>{ <expr><literal type="number">1.024e3</literal></expr>, <expr><literal type="number">1e3</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>,

<expr><index>[<expr><literal type="char">'M'</literal><operator>-</operator><literal type="char">'E'</literal></expr>]</index><operator>=</operator> <block>{ <expr><literal type="number">1.048576e6</literal></expr>, <expr><literal type="number">1e6</literal></expr>, <expr><literal type="number">6</literal></expr> }</block></expr>,

<expr><index>[<expr><literal type="char">'G'</literal><operator>-</operator><literal type="char">'E'</literal></expr>]</index><operator>=</operator> <block>{ <expr><literal type="number">1.073741824e9</literal></expr>, <expr><literal type="number">1e9</literal></expr>, <expr><literal type="number">9</literal></expr> }</block></expr>,

<expr><index>[<expr><literal type="char">'T'</literal><operator>-</operator><literal type="char">'E'</literal></expr>]</index><operator>=</operator> <block>{ <expr><literal type="number">1.099511627776e12</literal></expr>, <expr><literal type="number">1e12</literal></expr>, <expr><literal type="number">12</literal></expr> }</block></expr>,

<expr><index>[<expr><literal type="char">'P'</literal><operator>-</operator><literal type="char">'E'</literal></expr>]</index><operator>=</operator> <block>{ <expr><literal type="number">1.125899906842624e15</literal></expr>, <expr><literal type="number">1e15</literal></expr>, <expr><literal type="number">15</literal></expr> }</block></expr>,

<expr><index>[<expr><literal type="char">'E'</literal><operator>-</operator><literal type="char">'E'</literal></expr>]</index><operator>=</operator> <block>{ <expr><literal type="number">1.152921504606847e18</literal></expr>, <expr><literal type="number">1e18</literal></expr>, <expr><literal type="number">18</literal></expr> }</block></expr>,

<expr><index>[<expr><literal type="char">'Z'</literal><operator>-</operator><literal type="char">'E'</literal></expr>]</index><operator>=</operator> <block>{ <expr><literal type="number">1.1805916207174113e21</literal></expr>, <expr><literal type="number">1e21</literal></expr>, <expr><literal type="number">21</literal></expr> }</block></expr>,

<expr><index>[<expr><literal type="char">'Y'</literal><operator>-</operator><literal type="char">'E'</literal></expr>]</index><operator>=</operator> <block>{ <expr><literal type="number">1.2089258196146292e24</literal></expr>, <expr><literal type="number">1e24</literal></expr>, <expr><literal type="number">24</literal></expr> }</block></expr>,

}</block></expr></init></decl>;</struct>

<struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>value</name></decl>;</decl_stmt>

}</block> <decl><name><name>constants</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"E"</literal></expr>, <expr><name>M_E</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"PI"</literal></expr>, <expr><name>M_PI</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"PHI"</literal></expr>, <expr><name>M_PHI</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"QP2LAMBDA"</literal></expr>, <expr><name>FF_QP2LAMBDA</name></expr> }</block></expr>,

}</block></expr></init></decl>;</struct>

<function><type><name>double</name></type> <name>av_strtod</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>numstr</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>tail</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>d</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>numstr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>numstr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>|</operator><literal type="number">0x20</literal><operator>)</operator><operator>==</operator><literal type="char">'x'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>strtoul</name><argument_list>(<argument><expr><name>numstr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>next</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>strtod</name><argument_list>(<argument><expr><name>numstr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>next</name><operator>!=</operator><name>numstr</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>next</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'d'</literal> <operator>&amp;&amp;</operator> <name><name>next</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'B'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>ff_exp10</name><argument_list>(<argument><expr><name>d</name> <operator>/</operator> <literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>next</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>next</name> <operator>&gt;=</operator> <literal type="char">'E'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>next</name> <operator>&lt;=</operator> <literal type="char">'z'</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>e</name><init>= <expr><name><name>si_prefixes</name><index>[<expr><operator>*</operator><name>next</name> <operator>-</operator> <literal type="char">'E'</literal></expr>]</index></name><operator>.</operator><name>exp</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>e</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>next</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'i'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>d</name><operator>*=</operator> <name><name>si_prefixes</name><index>[<expr><operator>*</operator><name>next</name> <operator>-</operator> <literal type="char">'E'</literal></expr>]</index></name><operator>.</operator><name>bin_val</name></expr>;</expr_stmt>

<expr_stmt><expr><name>next</name><operator>+=</operator><literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>d</name><operator>*=</operator> <name><name>si_prefixes</name><index>[<expr><operator>*</operator><name>next</name> <operator>-</operator> <literal type="char">'E'</literal></expr>]</index></name><operator>.</operator><name>dec_val</name></expr>;</expr_stmt>

<expr_stmt><expr><name>next</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>next</name><operator>==</operator><literal type="char">'B'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>d</name><operator>*=</operator><literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>next</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>tail</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>tail</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>d</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_IDENTIFIER_CHAR</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((c) - '0' &lt;= 9U || (c) - 'a' &lt;= 25U || (c) - 'A' &lt;= 25U || (c) == '_')</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>strmatch</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name><name>prefix</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>prefix</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><operator>!</operator><call><name>IS_IDENTIFIER_CHAR</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<struct>struct <name>AVExpr</name> <block>{

<enum>enum <block>{

<decl><name>e_value</name></decl>, <decl><name>e_const</name></decl>, <decl><name>e_func0</name></decl>, <decl><name>e_func1</name></decl>, <decl><name>e_func2</name></decl>,

<decl><name>e_squish</name></decl>, <decl><name>e_gauss</name></decl>, <decl><name>e_ld</name></decl>, <decl><name>e_isnan</name></decl>, <decl><name>e_isinf</name></decl>,

<decl><name>e_mod</name></decl>, <decl><name>e_max</name></decl>, <decl><name>e_min</name></decl>, <decl><name>e_eq</name></decl>, <decl><name>e_gt</name></decl>, <decl><name>e_gte</name></decl>, <decl><name>e_lte</name></decl>, <decl><name>e_lt</name></decl>,

<decl><name>e_pow</name></decl>, <decl><name>e_mul</name></decl>, <decl><name>e_div</name></decl>, <decl><name>e_add</name></decl>,

<decl><name>e_last</name></decl>, <decl><name>e_st</name></decl>, <decl><name>e_while</name></decl>, <decl><name>e_taylor</name></decl>, <decl><name>e_root</name></decl>, <decl><name>e_floor</name></decl>, <decl><name>e_ceil</name></decl>, <decl><name>e_trunc</name></decl>, <decl><name>e_round</name></decl>,

<decl><name>e_sqrt</name></decl>, <decl><name>e_not</name></decl>, <decl><name>e_random</name></decl>, <decl><name>e_hypot</name></decl>, <decl><name>e_gcd</name></decl>,

<decl><name>e_if</name></decl>, <decl><name>e_ifnot</name></decl>, <decl><name>e_print</name></decl>, <decl><name>e_bitand</name></decl>, <decl><name>e_bitor</name></decl>, <decl><name>e_between</name></decl>, <decl><name>e_clip</name></decl>, <decl><name>e_atan2</name></decl>, <decl><name>e_lerp</name></decl>,

<decl><name>e_sgn</name></decl>,

}</block> <decl><name>type</name></decl>;</enum>

<decl_stmt><decl><type><name>double</name></type> <name>value</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>const_index</name></decl>;</decl_stmt>

<union>union <block>{

<function_decl><type><name>double</name></type> (<modifier>*</modifier><name>func0</name>)<parameter_list>(<parameter><decl><type><name>double</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>double</name></type> (<modifier>*</modifier><name>func1</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>double</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>double</name></type> (<modifier>*</modifier><name>func2</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>double</name></type></decl></parameter>, <parameter><decl><type><name>double</name></type></decl></parameter>)</parameter_list>;</function_decl>

}</block> <decl><name>a</name></decl>;</union>

<decl_stmt><decl><type><name><name>struct</name> <name>AVExpr</name></name> <modifier>*</modifier></type><name><name>param</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name>var</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>double</name></type> <name>etime</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>v</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>av_gettime</name><argument_list>()</argument_list></call> <operator>*</operator> <literal type="number">0.000001</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name></type> <name>eval_expr</name><parameter_list>(<parameter><decl><type><name>Parser</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>AVExpr</name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>e_value</name></expr>:</case> <return>return <expr><name><name>e</name><operator>-&gt;</operator><name>value</name></name></expr>;</return>

<case>case <expr><name>e_const</name></expr>:</case> <return>return <expr><name><name>e</name><operator>-&gt;</operator><name>value</name></name> <operator>*</operator> <name><name>p</name><operator>-&gt;</operator><name>const_values</name><index>[<expr><name><name>e</name><operator>-&gt;</operator><name>const_index</name></name></expr>]</index></name></expr>;</return>

<case>case <expr><name>e_func0</name></expr>:</case> <return>return <expr><name><name>e</name><operator>-&gt;</operator><name>value</name></name> <operator>*</operator> <call><name><name>e</name><operator>-&gt;</operator><name>a</name><operator>.</operator><name>func0</name></name><argument_list>(<argument><expr><call><name>eval_expr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>param</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>e_func1</name></expr>:</case> <return>return <expr><name><name>e</name><operator>-&gt;</operator><name>value</name></name> <operator>*</operator> <call><name><name>e</name><operator>-&gt;</operator><name>a</name><operator>.</operator><name>func1</name></name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>opaque</name></name></expr></argument>, <argument><expr><call><name>eval_expr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>param</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>e_func2</name></expr>:</case> <return>return <expr><name><name>e</name><operator>-&gt;</operator><name>value</name></name> <operator>*</operator> <call><name><name>e</name><operator>-&gt;</operator><name>a</name><operator>.</operator><name>func2</name></name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>opaque</name></name></expr></argument>, <argument><expr><call><name>eval_expr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>param</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>eval_expr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>param</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>e_squish</name></expr>:</case> <return>return <expr><literal type="number">1</literal><operator>/</operator><operator>(</operator><literal type="number">1</literal><operator>+</operator><call><name>exp</name><argument_list>(<argument><expr><literal type="number">4</literal><operator>*</operator><call><name>eval_expr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>param</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

<case>case <expr><name>e_gauss</name></expr>:</case> <block>{<block_content> <decl_stmt><decl><type><name>double</name></type> <name>d</name> <init>= <expr><call><name>eval_expr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>param</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><call><name>exp</name><argument_list>(<argument><expr><operator>-</operator><name>d</name><operator>*</operator><name>d</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>/</operator><call><name>sqrt</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name>M_PI</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block>

<case>case <expr><name>e_ld</name></expr>:</case> <return>return <expr><name><name>e</name><operator>-&gt;</operator><name>value</name></name> <operator>*</operator> <name><name>p</name><operator>-&gt;</operator><name>var</name><index>[<expr><call><name>av_clip</name><argument_list>(<argument><expr><call><name>eval_expr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>param</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>VARS</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</return>

<case>case <expr><name>e_isnan</name></expr>:</case> <return>return <expr><name><name>e</name><operator>-&gt;</operator><name>value</name></name> <operator>*</operator> <operator>!</operator><operator>!</operator><call><name>isnan</name><argument_list>(<argument><expr><call><name>eval_expr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>param</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>e_isinf</name></expr>:</case> <return>return <expr><name><name>e</name><operator>-&gt;</operator><name>value</name></name> <operator>*</operator> <operator>!</operator><operator>!</operator><call><name>isinf</name><argument_list>(<argument><expr><call><name>eval_expr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>param</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>e_floor</name></expr>:</case> <return>return <expr><name><name>e</name><operator>-&gt;</operator><name>value</name></name> <operator>*</operator> <call><name>floor</name><argument_list>(<argument><expr><call><name>eval_expr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>param</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>e_ceil</name></expr> :</case> <return>return <expr><name><name>e</name><operator>-&gt;</operator><name>value</name></name> <operator>*</operator> <call><name>ceil</name> <argument_list>(<argument><expr><call><name>eval_expr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>param</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>e_trunc</name></expr>:</case> <return>return <expr><name><name>e</name><operator>-&gt;</operator><name>value</name></name> <operator>*</operator> <call><name>trunc</name><argument_list>(<argument><expr><call><name>eval_expr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>param</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>e_round</name></expr>:</case> <return>return <expr><name><name>e</name><operator>-&gt;</operator><name>value</name></name> <operator>*</operator> <call><name>round</name><argument_list>(<argument><expr><call><name>eval_expr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>param</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>e_sgn</name></expr>:</case> <return>return <expr><name><name>e</name><operator>-&gt;</operator><name>value</name></name> <operator>*</operator> <call><name>FFDIFFSIGN</name><argument_list>(<argument><expr><call><name>eval_expr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>param</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>e_sqrt</name></expr>:</case> <return>return <expr><name><name>e</name><operator>-&gt;</operator><name>value</name></name> <operator>*</operator> <call><name>sqrt</name> <argument_list>(<argument><expr><call><name>eval_expr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>param</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>e_not</name></expr>:</case> <return>return <expr><name><name>e</name><operator>-&gt;</operator><name>value</name></name> <operator>*</operator> <operator>(</operator><call><name>eval_expr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>param</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>

<case>case <expr><name>e_if</name></expr>:</case> <return>return <expr><name><name>e</name><operator>-&gt;</operator><name>value</name></name> <operator>*</operator> <operator>(</operator><ternary><condition><expr><call><name>eval_expr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>param</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>eval_expr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>param</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> </then><else>:

<expr><ternary><condition><expr><name><name>e</name><operator>-&gt;</operator><name>param</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr> ?</condition><then> <expr><call><name>eval_expr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>param</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></else></ternary><operator>)</operator></expr>;</return>

<case>case <expr><name>e_ifnot</name></expr>:</case> <return>return <expr><name><name>e</name><operator>-&gt;</operator><name>value</name></name> <operator>*</operator> <operator>(</operator><ternary><condition><expr><operator>!</operator><call><name>eval_expr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>param</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>eval_expr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>param</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> </then><else>:

<expr><ternary><condition><expr><name><name>e</name><operator>-&gt;</operator><name>param</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr> ?</condition><then> <expr><call><name>eval_expr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>param</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></else></ternary><operator>)</operator></expr>;</return>

<case>case <expr><name>e_clip</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>x</name> <init>= <expr><call><name>eval_expr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>param</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>min</name> <init>= <expr><call><name>eval_expr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>param</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>max</name> <init>= <expr><call><name>eval_expr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>param</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>isnan</name><argument_list>(<argument><expr><name>min</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>isnan</name><argument_list>(<argument><expr><name>max</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>isnan</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>min</name> <operator>&gt;</operator> <name>max</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NAN</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name><name>e</name><operator>-&gt;</operator><name>value</name></name> <operator>*</operator> <call><name>av_clipd</name><argument_list>(<argument><expr><call><name>eval_expr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>param</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>min</name></expr></argument>, <argument><expr><name>max</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block>

<case>case <expr><name>e_between</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>d</name> <init>= <expr><call><name>eval_expr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>param</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><name><name>e</name><operator>-&gt;</operator><name>value</name></name> <operator>*</operator> <operator>(</operator><name>d</name> <operator>&gt;=</operator> <call><name>eval_expr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>param</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<name>d</name> <operator>&lt;=</operator> <call><name>eval_expr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>param</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

</block_content>}</block>

<case>case <expr><name>e_lerp</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>v0</name> <init>= <expr><call><name>eval_expr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>param</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>v1</name> <init>= <expr><call><name>eval_expr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>param</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>f</name> <init>= <expr><call><name>eval_expr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>param</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><name>v0</name> <operator>+</operator> <operator>(</operator><name>v1</name> <operator>-</operator> <name>v0</name><operator>)</operator> <operator>*</operator> <name>f</name></expr>;</return>

</block_content>}</block>

<case>case <expr><name>e_print</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>x</name> <init>= <expr><call><name>eval_expr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>param</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>level</name> <init>= <expr><ternary><condition><expr><name><name>e</name><operator>-&gt;</operator><name>param</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> ?</condition><then> <expr><call><name>av_clip</name><argument_list>(<argument><expr><call><name>eval_expr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>param</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>INT_MIN</name></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>AV_LOG_INFO</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><literal type="string">"%f\n"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>x</name></expr>;</return>

</block_content>}</block>

<case>case <expr><name>e_random</name></expr>:</case><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name><init>= <expr><call><name>av_clip</name><argument_list>(<argument><expr><call><name>eval_expr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>param</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>VARS</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>r</name><init>= <expr><ternary><condition><expr><call><name>isnan</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>var</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>p</name><operator>-&gt;</operator><name>var</name><index>[<expr><name>idx</name></expr>]</index></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>r</name><operator>=</operator> <name>r</name><operator>*</operator><literal type="number">1664525</literal><operator>+</operator><literal type="number">1013904223</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>var</name><index>[<expr><name>idx</name></expr>]</index></name><operator>=</operator> <name>r</name></expr>;</expr_stmt>

<return>return <expr><name><name>e</name><operator>-&gt;</operator><name>value</name></name> <operator>*</operator> <operator>(</operator><name>r</name> <operator>*</operator> <operator>(</operator><literal type="number">1.0</literal><operator>/</operator><name>UINT64_MAX</name><operator>)</operator><operator>)</operator></expr>;</return>

</block_content>}</block>

<case>case <expr><name>e_while</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>d</name> <init>= <expr><name>NAN</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><call><name>eval_expr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>param</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>d</name><operator>=</operator><call><name>eval_expr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>param</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<return>return <expr><name>d</name></expr>;</return>

</block_content>}</block>

<case>case <expr><name>e_taylor</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>t</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>d</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>x</name> <init>= <expr><call><name>eval_expr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>param</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>id</name> <init>= <expr><ternary><condition><expr><name><name>e</name><operator>-&gt;</operator><name>param</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr> ?</condition><then> <expr><call><name>av_clip</name><argument_list>(<argument><expr><call><name>eval_expr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>param</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>VARS</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>var0</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>var</name><index>[<expr><name>id</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">1000</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>ld</name> <init>= <expr><name>d</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>var</name><index>[<expr><name>id</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>eval_expr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>param</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>d</name> <operator>+=</operator> <name>t</name><operator>*</operator><name>v</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>ld</name><operator>==</operator><name>d</name> <operator>&amp;&amp;</operator> <name>v</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>t</name> <operator>*=</operator> <name>x</name> <operator>/</operator> <operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>var</name><index>[<expr><name>id</name></expr>]</index></name> <operator>=</operator> <name>var0</name></expr>;</expr_stmt>

<return>return <expr><name>d</name></expr>;</return>

</block_content>}</block>

<case>case <expr><name>e_root</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>low</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>high</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>v</name></decl>, <decl><type ref="prev"/><name>low_v</name> <init>= <expr><operator>-</operator><name>DBL_MAX</name></expr></init></decl>, <decl><type ref="prev"/><name>high_v</name> <init>= <expr><name>DBL_MAX</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>var0</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>var</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>x_max</name> <init>= <expr><call><name>eval_expr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>param</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">1024</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>i</name><operator>&lt;</operator><literal type="number">255</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>var</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>ff_reverse</name><index>[<expr><name>i</name><operator>&amp;</operator><literal type="number">255</literal></expr>]</index></name><operator>*</operator><name>x_max</name><operator>/</operator><literal type="number">255</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>var</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>x_max</name><operator>*</operator><call><name>pow</name><argument_list>(<argument><expr><literal type="number">0.9</literal></expr></argument>, <argument><expr><name>i</name><operator>-</operator><literal type="number">255</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>var</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name><operator>&amp;</operator><literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>var</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <name>low</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>var</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <name>high</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>eval_expr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>param</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>v</name><operator>&lt;=</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>v</name><operator>&gt;</operator><name>low_v</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>low</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>var</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>low_v</name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>v</name><operator>&gt;=</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>v</name><operator>&lt;</operator><name>high_v</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>high</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>var</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>high_v</name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>low</name><operator>&gt;=</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>high</name><operator>&gt;=</operator><literal type="number">0</literal></expr>)</condition><block>{<block_content>

<for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><literal type="number">1000</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>var</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>low</name><operator>+</operator><name>high</name><operator>)</operator><operator>*</operator><literal type="number">0.5</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>low</name> <operator>==</operator> <name><name>p</name><operator>-&gt;</operator><name>var</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>||</operator> <name>high</name> <operator>==</operator> <name><name>p</name><operator>-&gt;</operator><name>var</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>eval_expr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>param</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>v</name><operator>&lt;=</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>low</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>var</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>v</name><operator>&gt;=</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>high</name><operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>var</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>isnan</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>low</name> <operator>=</operator> <name>high</name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>var</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>var0</name></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><operator>-</operator><name>low_v</name><operator>&lt;</operator><name>high_v</name></expr> ?</condition><then> <expr><name>low</name></expr> </then><else>: <expr><name>high</name></expr></else></ternary></expr>;</return>

</block_content>}</block>

<default>default:</default> <block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>d</name> <init>= <expr><call><name>eval_expr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>param</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>d2</name> <init>= <expr><call><name>eval_expr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>param</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>e_mod</name></expr>:</case> <return>return <expr><name><name>e</name><operator>-&gt;</operator><name>value</name></name> <operator>*</operator> <operator>(</operator><name>d</name> <operator>-</operator> <call><name>floor</name><argument_list>(<argument><expr><ternary><condition><expr><operator>(</operator><operator>!</operator><name>CONFIG_FTRAPV</name> <operator>||</operator> <name>d2</name><operator>)</operator></expr> ?</condition><then> <expr><name>d</name> <operator>/</operator> <name>d2</name></expr> </then><else>: <expr><name>d</name> <operator>*</operator> <name>INFINITY</name></expr></else></ternary></expr></argument>)</argument_list></call> <operator>*</operator> <name>d2</name><operator>)</operator></expr>;</return>

<case>case <expr><name>e_gcd</name></expr>:</case> <return>return <expr><name><name>e</name><operator>-&gt;</operator><name>value</name></name> <operator>*</operator> <call><name>av_gcd</name><argument_list>(<argument><expr><name>d</name></expr></argument>,<argument><expr><name>d2</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>e_max</name></expr>:</case> <return>return <expr><name><name>e</name><operator>-&gt;</operator><name>value</name></name> <operator>*</operator> <operator>(</operator><ternary><condition><expr><name>d</name> <operator>&gt;</operator> <name>d2</name></expr> ?</condition><then> <expr><name>d</name></expr> </then><else>: <expr><name>d2</name></expr></else></ternary><operator>)</operator></expr>;</return>

<case>case <expr><name>e_min</name></expr>:</case> <return>return <expr><name><name>e</name><operator>-&gt;</operator><name>value</name></name> <operator>*</operator> <operator>(</operator><ternary><condition><expr><name>d</name> <operator>&lt;</operator> <name>d2</name></expr> ?</condition><then> <expr><name>d</name></expr> </then><else>: <expr><name>d2</name></expr></else></ternary><operator>)</operator></expr>;</return>

<case>case <expr><name>e_eq</name></expr>:</case> <return>return <expr><name><name>e</name><operator>-&gt;</operator><name>value</name></name> <operator>*</operator> <operator>(</operator><ternary><condition><expr><name>d</name> <operator>==</operator> <name>d2</name></expr> ?</condition><then> <expr><literal type="number">1.0</literal></expr> </then><else>: <expr><literal type="number">0.0</literal></expr></else></ternary><operator>)</operator></expr>;</return>

<case>case <expr><name>e_gt</name></expr>:</case> <return>return <expr><name><name>e</name><operator>-&gt;</operator><name>value</name></name> <operator>*</operator> <operator>(</operator><ternary><condition><expr><name>d</name> <operator>&gt;</operator> <name>d2</name></expr> ?</condition><then> <expr><literal type="number">1.0</literal></expr> </then><else>: <expr><literal type="number">0.0</literal></expr></else></ternary><operator>)</operator></expr>;</return>

<case>case <expr><name>e_gte</name></expr>:</case> <return>return <expr><name><name>e</name><operator>-&gt;</operator><name>value</name></name> <operator>*</operator> <operator>(</operator><ternary><condition><expr><name>d</name> <operator>&gt;=</operator> <name>d2</name></expr> ?</condition><then> <expr><literal type="number">1.0</literal></expr> </then><else>: <expr><literal type="number">0.0</literal></expr></else></ternary><operator>)</operator></expr>;</return>

<case>case <expr><name>e_lt</name></expr>:</case> <return>return <expr><name><name>e</name><operator>-&gt;</operator><name>value</name></name> <operator>*</operator> <operator>(</operator><ternary><condition><expr><name>d</name> <operator>&lt;</operator> <name>d2</name></expr> ?</condition><then> <expr><literal type="number">1.0</literal></expr> </then><else>: <expr><literal type="number">0.0</literal></expr></else></ternary><operator>)</operator></expr>;</return>

<case>case <expr><name>e_lte</name></expr>:</case> <return>return <expr><name><name>e</name><operator>-&gt;</operator><name>value</name></name> <operator>*</operator> <operator>(</operator><ternary><condition><expr><name>d</name> <operator>&lt;=</operator> <name>d2</name></expr> ?</condition><then> <expr><literal type="number">1.0</literal></expr> </then><else>: <expr><literal type="number">0.0</literal></expr></else></ternary><operator>)</operator></expr>;</return>

<case>case <expr><name>e_pow</name></expr>:</case> <return>return <expr><name><name>e</name><operator>-&gt;</operator><name>value</name></name> <operator>*</operator> <call><name>pow</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>d2</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>e_mul</name></expr>:</case> <return>return <expr><name><name>e</name><operator>-&gt;</operator><name>value</name></name> <operator>*</operator> <operator>(</operator><name>d</name> <operator>*</operator> <name>d2</name><operator>)</operator></expr>;</return>

<case>case <expr><name>e_div</name></expr>:</case> <return>return <expr><name><name>e</name><operator>-&gt;</operator><name>value</name></name> <operator>*</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><operator>!</operator><name>CONFIG_FTRAPV</name> <operator>||</operator> <name>d2</name> <operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>d</name> <operator>/</operator> <name>d2</name><operator>)</operator></expr> </then><else>: <expr><name>d</name> <operator>*</operator> <name>INFINITY</name></expr></else></ternary><operator>)</operator></expr>;</return>

<case>case <expr><name>e_add</name></expr>:</case> <return>return <expr><name><name>e</name><operator>-&gt;</operator><name>value</name></name> <operator>*</operator> <operator>(</operator><name>d</name> <operator>+</operator> <name>d2</name><operator>)</operator></expr>;</return>

<case>case <expr><name>e_last</name></expr>:</case><return>return <expr><name><name>e</name><operator>-&gt;</operator><name>value</name></name> <operator>*</operator> <name>d2</name></expr>;</return>

<case>case <expr><name>e_st</name></expr> :</case> <return>return <expr><name><name>e</name><operator>-&gt;</operator><name>value</name></name> <operator>*</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>var</name><index>[<expr><call><name>av_clip</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>VARS</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>]</index></name><operator>=</operator> <name>d2</name><operator>)</operator></expr>;</return>

<case>case <expr><name>e_hypot</name></expr>:</case><return>return <expr><name><name>e</name><operator>-&gt;</operator><name>value</name></name> <operator>*</operator> <call><name>hypot</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>d2</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>e_atan2</name></expr>:</case><return>return <expr><name><name>e</name><operator>-&gt;</operator><name>value</name></name> <operator>*</operator> <call><name>atan2</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>d2</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>e_bitand</name></expr>:</case> <return>return <expr><ternary><condition><expr><call><name>isnan</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>isnan</name><argument_list>(<argument><expr><name>d2</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>NAN</name></expr> </then><else>: <expr><name><name>e</name><operator>-&gt;</operator><name>value</name></name> <operator>*</operator> <operator>(</operator><operator>(</operator><name>long</name> <name>int</name><operator>)</operator><name>d</name> <operator>&amp;</operator> <operator>(</operator><name>long</name> <name>int</name><operator>)</operator><name>d2</name><operator>)</operator></expr></else></ternary></expr>;</return>

<case>case <expr><name>e_bitor</name></expr>:</case> <return>return <expr><ternary><condition><expr><call><name>isnan</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>isnan</name><argument_list>(<argument><expr><name>d2</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>NAN</name></expr> </then><else>: <expr><name><name>e</name><operator>-&gt;</operator><name>value</name></name> <operator>*</operator> <operator>(</operator><operator>(</operator><name>long</name> <name>int</name><operator>)</operator><name>d</name> <operator>|</operator> <operator>(</operator><name>long</name> <name>int</name><operator>)</operator><name>d2</name><operator>)</operator></expr></else></ternary></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block>

</block_content>}</block></switch>

<return>return <expr><name>NAN</name></expr>;</return>

</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>parse_expr</name><parameter_list>(<parameter><decl><type><name>AVExpr</name> <modifier>*</modifier><modifier>*</modifier></type><name>e</name></decl></parameter>, <parameter><decl><type><name>Parser</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>void</name></type> <name>av_expr_free</name><parameter_list>(<parameter><decl><type><name>AVExpr</name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>e</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_expr_free</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>param</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_expr_free</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>param</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_expr_free</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>param</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>e</name><operator>-&gt;</operator><name>var</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_primary</name><parameter_list>(<parameter><decl><type><name>AVExpr</name> <modifier>*</modifier><modifier>*</modifier></type><name>e</name></decl></parameter>, <parameter><decl><type><name>Parser</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVExpr</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>AVExpr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>next</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>s</name></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>s0</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>s</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>d</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <call><name>av_strtod</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>next</name> <operator>!=</operator> <name><name>p</name><operator>-&gt;</operator><name>s</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>e_value</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>s</name></name><operator>=</operator> <name>next</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>e</name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name><name>p</name><operator>-&gt;</operator><name>const_names</name></name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>const_names</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strmatch</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>const_names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>s</name></name><operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>const_names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>e_const</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>const_index</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>e</name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>constants</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strmatch</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name><name>constants</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>s</name></name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>constants</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>e_value</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name><name>constants</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>e</name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>s</name></name><operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><literal type="char">'('</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p</name><operator>-&gt;</operator><name>s</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Undefined constant or missing '(' in '%s'\n"</literal></expr></argument>, <argument><expr><name>s0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>s</name></name><operator>=</operator> <name>next</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_expr_free</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>s</name></name><operator>++</operator></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>next</name> <operator>==</operator> <literal type="char">'('</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>parse_expr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>d</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">')'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Missing ')' in '%s'\n"</literal></expr></argument>, <argument><expr><name>s0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_expr_free</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>s</name></name><operator>++</operator></expr>;</expr_stmt> 

<expr_stmt><expr><operator>*</operator><name>e</name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>parse_expr</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>d</name><operator>-&gt;</operator><name>param</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_expr_free</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator> <literal type="char">','</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>s</name></name><operator>++</operator></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>parse_expr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>param</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator> <literal type="char">','</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>s</name></name><operator>++</operator></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>parse_expr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>param</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">')'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Missing ')' or too many args in '%s'\n"</literal></expr></argument>, <argument><expr><name>s0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_expr_free</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>s</name></name><operator>++</operator></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>e_func0</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strmatch</name><argument_list>(<argument><expr><name>next</name></expr></argument>, <argument><expr><literal type="string">"sinh"</literal></expr></argument> )</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>a</name><operator>.</operator><name>func0</name></name> <operator>=</operator> <name>sinh</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strmatch</name><argument_list>(<argument><expr><name>next</name></expr></argument>, <argument><expr><literal type="string">"cosh"</literal></expr></argument> )</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>a</name><operator>.</operator><name>func0</name></name> <operator>=</operator> <name>cosh</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strmatch</name><argument_list>(<argument><expr><name>next</name></expr></argument>, <argument><expr><literal type="string">"tanh"</literal></expr></argument> )</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>a</name><operator>.</operator><name>func0</name></name> <operator>=</operator> <name>tanh</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strmatch</name><argument_list>(<argument><expr><name>next</name></expr></argument>, <argument><expr><literal type="string">"sin"</literal></expr></argument> )</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>a</name><operator>.</operator><name>func0</name></name> <operator>=</operator> <name>sin</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strmatch</name><argument_list>(<argument><expr><name>next</name></expr></argument>, <argument><expr><literal type="string">"cos"</literal></expr></argument> )</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>a</name><operator>.</operator><name>func0</name></name> <operator>=</operator> <name>cos</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strmatch</name><argument_list>(<argument><expr><name>next</name></expr></argument>, <argument><expr><literal type="string">"tan"</literal></expr></argument> )</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>a</name><operator>.</operator><name>func0</name></name> <operator>=</operator> <name>tan</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strmatch</name><argument_list>(<argument><expr><name>next</name></expr></argument>, <argument><expr><literal type="string">"atan"</literal></expr></argument> )</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>a</name><operator>.</operator><name>func0</name></name> <operator>=</operator> <name>atan</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strmatch</name><argument_list>(<argument><expr><name>next</name></expr></argument>, <argument><expr><literal type="string">"asin"</literal></expr></argument> )</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>a</name><operator>.</operator><name>func0</name></name> <operator>=</operator> <name>asin</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strmatch</name><argument_list>(<argument><expr><name>next</name></expr></argument>, <argument><expr><literal type="string">"acos"</literal></expr></argument> )</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>a</name><operator>.</operator><name>func0</name></name> <operator>=</operator> <name>acos</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strmatch</name><argument_list>(<argument><expr><name>next</name></expr></argument>, <argument><expr><literal type="string">"exp"</literal></expr></argument> )</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>a</name><operator>.</operator><name>func0</name></name> <operator>=</operator> <name>exp</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strmatch</name><argument_list>(<argument><expr><name>next</name></expr></argument>, <argument><expr><literal type="string">"log"</literal></expr></argument> )</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>a</name><operator>.</operator><name>func0</name></name> <operator>=</operator> <name>log</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strmatch</name><argument_list>(<argument><expr><name>next</name></expr></argument>, <argument><expr><literal type="string">"abs"</literal></expr></argument> )</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>a</name><operator>.</operator><name>func0</name></name> <operator>=</operator> <name>fabs</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strmatch</name><argument_list>(<argument><expr><name>next</name></expr></argument>, <argument><expr><literal type="string">"time"</literal></expr></argument> )</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>a</name><operator>.</operator><name>func0</name></name> <operator>=</operator> <name>etime</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strmatch</name><argument_list>(<argument><expr><name>next</name></expr></argument>, <argument><expr><literal type="string">"squish"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>e_squish</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strmatch</name><argument_list>(<argument><expr><name>next</name></expr></argument>, <argument><expr><literal type="string">"gauss"</literal></expr></argument> )</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>e_gauss</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strmatch</name><argument_list>(<argument><expr><name>next</name></expr></argument>, <argument><expr><literal type="string">"mod"</literal></expr></argument> )</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>e_mod</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strmatch</name><argument_list>(<argument><expr><name>next</name></expr></argument>, <argument><expr><literal type="string">"max"</literal></expr></argument> )</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>e_max</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strmatch</name><argument_list>(<argument><expr><name>next</name></expr></argument>, <argument><expr><literal type="string">"min"</literal></expr></argument> )</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>e_min</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strmatch</name><argument_list>(<argument><expr><name>next</name></expr></argument>, <argument><expr><literal type="string">"eq"</literal></expr></argument> )</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>e_eq</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strmatch</name><argument_list>(<argument><expr><name>next</name></expr></argument>, <argument><expr><literal type="string">"gte"</literal></expr></argument> )</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>e_gte</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strmatch</name><argument_list>(<argument><expr><name>next</name></expr></argument>, <argument><expr><literal type="string">"gt"</literal></expr></argument> )</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>e_gt</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strmatch</name><argument_list>(<argument><expr><name>next</name></expr></argument>, <argument><expr><literal type="string">"lte"</literal></expr></argument> )</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>e_lte</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strmatch</name><argument_list>(<argument><expr><name>next</name></expr></argument>, <argument><expr><literal type="string">"lt"</literal></expr></argument> )</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>e_lt</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strmatch</name><argument_list>(<argument><expr><name>next</name></expr></argument>, <argument><expr><literal type="string">"ld"</literal></expr></argument> )</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>e_ld</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strmatch</name><argument_list>(<argument><expr><name>next</name></expr></argument>, <argument><expr><literal type="string">"isnan"</literal></expr></argument> )</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>e_isnan</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strmatch</name><argument_list>(<argument><expr><name>next</name></expr></argument>, <argument><expr><literal type="string">"isinf"</literal></expr></argument> )</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>e_isinf</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strmatch</name><argument_list>(<argument><expr><name>next</name></expr></argument>, <argument><expr><literal type="string">"st"</literal></expr></argument> )</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>e_st</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strmatch</name><argument_list>(<argument><expr><name>next</name></expr></argument>, <argument><expr><literal type="string">"while"</literal></expr></argument> )</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>e_while</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strmatch</name><argument_list>(<argument><expr><name>next</name></expr></argument>, <argument><expr><literal type="string">"taylor"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>e_taylor</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strmatch</name><argument_list>(<argument><expr><name>next</name></expr></argument>, <argument><expr><literal type="string">"root"</literal></expr></argument> )</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>e_root</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strmatch</name><argument_list>(<argument><expr><name>next</name></expr></argument>, <argument><expr><literal type="string">"floor"</literal></expr></argument> )</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>e_floor</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strmatch</name><argument_list>(<argument><expr><name>next</name></expr></argument>, <argument><expr><literal type="string">"ceil"</literal></expr></argument> )</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>e_ceil</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strmatch</name><argument_list>(<argument><expr><name>next</name></expr></argument>, <argument><expr><literal type="string">"trunc"</literal></expr></argument> )</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>e_trunc</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strmatch</name><argument_list>(<argument><expr><name>next</name></expr></argument>, <argument><expr><literal type="string">"round"</literal></expr></argument> )</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>e_round</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strmatch</name><argument_list>(<argument><expr><name>next</name></expr></argument>, <argument><expr><literal type="string">"sqrt"</literal></expr></argument> )</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>e_sqrt</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strmatch</name><argument_list>(<argument><expr><name>next</name></expr></argument>, <argument><expr><literal type="string">"not"</literal></expr></argument> )</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>e_not</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strmatch</name><argument_list>(<argument><expr><name>next</name></expr></argument>, <argument><expr><literal type="string">"pow"</literal></expr></argument> )</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>e_pow</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strmatch</name><argument_list>(<argument><expr><name>next</name></expr></argument>, <argument><expr><literal type="string">"print"</literal></expr></argument> )</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>e_print</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strmatch</name><argument_list>(<argument><expr><name>next</name></expr></argument>, <argument><expr><literal type="string">"random"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>e_random</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strmatch</name><argument_list>(<argument><expr><name>next</name></expr></argument>, <argument><expr><literal type="string">"hypot"</literal></expr></argument> )</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>e_hypot</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strmatch</name><argument_list>(<argument><expr><name>next</name></expr></argument>, <argument><expr><literal type="string">"gcd"</literal></expr></argument> )</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>e_gcd</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strmatch</name><argument_list>(<argument><expr><name>next</name></expr></argument>, <argument><expr><literal type="string">"if"</literal></expr></argument> )</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>e_if</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strmatch</name><argument_list>(<argument><expr><name>next</name></expr></argument>, <argument><expr><literal type="string">"ifnot"</literal></expr></argument> )</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>e_ifnot</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strmatch</name><argument_list>(<argument><expr><name>next</name></expr></argument>, <argument><expr><literal type="string">"bitand"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>e_bitand</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strmatch</name><argument_list>(<argument><expr><name>next</name></expr></argument>, <argument><expr><literal type="string">"bitor"</literal></expr></argument> )</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>e_bitor</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strmatch</name><argument_list>(<argument><expr><name>next</name></expr></argument>, <argument><expr><literal type="string">"between"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content><expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>e_between</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strmatch</name><argument_list>(<argument><expr><name>next</name></expr></argument>, <argument><expr><literal type="string">"clip"</literal></expr></argument> )</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>e_clip</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strmatch</name><argument_list>(<argument><expr><name>next</name></expr></argument>, <argument><expr><literal type="string">"atan2"</literal></expr></argument> )</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>e_atan2</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strmatch</name><argument_list>(<argument><expr><name>next</name></expr></argument>, <argument><expr><literal type="string">"lerp"</literal></expr></argument> )</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>e_lerp</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strmatch</name><argument_list>(<argument><expr><name>next</name></expr></argument>, <argument><expr><literal type="string">"sgn"</literal></expr></argument> )</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>e_sgn</name></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name><name>p</name><operator>-&gt;</operator><name>func1_names</name></name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>func1_names</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strmatch</name><argument_list>(<argument><expr><name>next</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>func1_names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>a</name><operator>.</operator><name>func1</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>funcs1</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>e_func1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>const_index</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>e</name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name><name>p</name><operator>-&gt;</operator><name>func2_names</name></name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>func2_names</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strmatch</name><argument_list>(<argument><expr><name>next</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>func2_names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>a</name><operator>.</operator><name>func2</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>funcs2</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>e_func2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>const_index</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>e</name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unknown function in '%s'\n"</literal></expr></argument>, <argument><expr><name>s0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_expr_free</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>*</operator><name>e</name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>AVExpr</name> <modifier>*</modifier></type><name>make_eval_expr</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>AVExpr</name> <modifier>*</modifier></type><name>p0</name></decl></parameter>, <parameter><decl><type><name>AVExpr</name> <modifier>*</modifier></type><name>p1</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVExpr</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>AVExpr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>e</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator><name>type</name></expr> ;</expr_stmt>

<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator><name>value</name></expr> ;</expr_stmt>

<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>param</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator><name>p0</name></expr> ;</expr_stmt>

<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>param</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator><name>p1</name></expr> ;</expr_stmt>

<return>return <expr><name>e</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_pow</name><parameter_list>(<parameter><decl><type><name>AVExpr</name> <modifier>*</modifier><modifier>*</modifier></type><name>e</name></decl></parameter>, <parameter><decl><type><name>Parser</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>sign</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>sign</name><operator>=</operator> <operator>(</operator><operator>*</operator><name><name>p</name><operator>-&gt;</operator><name>s</name></name> <operator>==</operator> <literal type="char">'+'</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><operator>*</operator><name><name>p</name><operator>-&gt;</operator><name>s</name></name> <operator>==</operator> <literal type="char">'-'</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>s</name></name> <operator>+=</operator> <operator>*</operator><name>sign</name><operator>&amp;</operator><literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><call><name>parse_primary</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_dB</name><parameter_list>(<parameter><decl><type><name>AVExpr</name> <modifier>*</modifier><modifier>*</modifier></type><name>e</name></decl></parameter>, <parameter><decl><type><name>Parser</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>sign</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>p</name><operator>-&gt;</operator><name>s</name></name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name> <name>av_unused</name></type> <name>ignored</name> <init>= <expr><call><name>strtod</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>next</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>next</name> <operator>!=</operator> <name><name>p</name><operator>-&gt;</operator><name>s</name></name> <operator>&amp;&amp;</operator> <name><name>next</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'d'</literal> <operator>&amp;&amp;</operator> <name><name>next</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'B'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>sign</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><call><name>parse_primary</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>parse_pow</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>sign</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_factor</name><parameter_list>(<parameter><decl><type><name>AVExpr</name> <modifier>*</modifier><modifier>*</modifier></type><name>e</name></decl></parameter>, <parameter><decl><type><name>Parser</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>sign</name></decl>, <decl><type ref="prev"/><name>sign2</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVExpr</name> <modifier>*</modifier></type><name>e0</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>e1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>e2</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>parse_dB</name><argument_list>(<argument><expr><operator>&amp;</operator><name>e0</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sign</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<while>while<condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="char">'^'</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>e1</name> <operator>=</operator> <name>e0</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>s</name></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>parse_dB</name><argument_list>(<argument><expr><operator>&amp;</operator><name>e2</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sign2</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_expr_free</name><argument_list>(<argument><expr><name>e1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>e0</name> <operator>=</operator> <call><name>make_eval_expr</name><argument_list>(<argument><expr><name>e_pow</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>e1</name></expr></argument>, <argument><expr><name>e2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>e0</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_expr_free</name><argument_list>(<argument><expr><name>e1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_expr_free</name><argument_list>(<argument><expr><name>e2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>e0</name><operator>-&gt;</operator><name>param</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>e0</name><operator>-&gt;</operator><name>param</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>value</name> <operator>*=</operator> <operator>(</operator><name>sign2</name><operator>|</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>e0</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>e0</name><operator>-&gt;</operator><name>value</name></name> <operator>*=</operator> <operator>(</operator><name>sign</name><operator>|</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>e</name> <operator>=</operator> <name>e0</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_term</name><parameter_list>(<parameter><decl><type><name>AVExpr</name> <modifier>*</modifier><modifier>*</modifier></type><name>e</name></decl></parameter>, <parameter><decl><type><name>Parser</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVExpr</name> <modifier>*</modifier></type><name>e0</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>e1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>e2</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>parse_factor</name><argument_list>(<argument><expr><operator>&amp;</operator><name>e0</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="char">'*'</literal> <operator>||</operator> <name><name>p</name><operator>-&gt;</operator><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>c</name><init>= <expr><operator>*</operator><name><name>p</name><operator>-&gt;</operator><name>s</name></name><operator>++</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>e1</name> <operator>=</operator> <name>e0</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>parse_factor</name><argument_list>(<argument><expr><operator>&amp;</operator><name>e2</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_expr_free</name><argument_list>(<argument><expr><name>e1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>e0</name> <operator>=</operator> <call><name>make_eval_expr</name><argument_list>(<argument><expr><ternary><condition><expr><name>c</name> <operator>==</operator> <literal type="char">'*'</literal></expr> ?</condition><then> <expr><name>e_mul</name></expr> </then><else>: <expr><name>e_div</name></expr></else></ternary></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>e1</name></expr></argument>, <argument><expr><name>e2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>e0</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_expr_free</name><argument_list>(<argument><expr><name>e1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_expr_free</name><argument_list>(<argument><expr><name>e2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><operator>*</operator><name>e</name> <operator>=</operator> <name>e0</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_subexpr</name><parameter_list>(<parameter><decl><type><name>AVExpr</name> <modifier>*</modifier><modifier>*</modifier></type><name>e</name></decl></parameter>, <parameter><decl><type><name>Parser</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVExpr</name> <modifier>*</modifier></type><name>e0</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>e1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>e2</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>parse_term</name><argument_list>(<argument><expr><operator>&amp;</operator><name>e0</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><operator>*</operator><name><name>p</name><operator>-&gt;</operator><name>s</name></name> <operator>==</operator> <literal type="char">'+'</literal> <operator>||</operator> <operator>*</operator><name><name>p</name><operator>-&gt;</operator><name>s</name></name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>e1</name> <operator>=</operator> <name>e0</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>parse_term</name><argument_list>(<argument><expr><operator>&amp;</operator><name>e2</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_expr_free</name><argument_list>(<argument><expr><name>e1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>e0</name> <operator>=</operator> <call><name>make_eval_expr</name><argument_list>(<argument><expr><name>e_add</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>e1</name></expr></argument>, <argument><expr><name>e2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>e0</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_expr_free</name><argument_list>(<argument><expr><name>e1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_expr_free</name><argument_list>(<argument><expr><name>e2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while><empty_stmt>;</empty_stmt>

<expr_stmt><expr><operator>*</operator><name>e</name> <operator>=</operator> <name>e0</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_expr</name><parameter_list>(<parameter><decl><type><name>AVExpr</name> <modifier>*</modifier><modifier>*</modifier></type><name>e</name></decl></parameter>, <parameter><decl><type><name>Parser</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVExpr</name> <modifier>*</modifier></type><name>e0</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>e1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>e2</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>stack_index</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>stack_index</name></name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>parse_subexpr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>e0</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><operator>*</operator><name><name>p</name><operator>-&gt;</operator><name>s</name></name> <operator>==</operator> <literal type="char">';'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>s</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>e1</name> <operator>=</operator> <name>e0</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>parse_subexpr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>e2</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_expr_free</name><argument_list>(<argument><expr><name>e1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>e0</name> <operator>=</operator> <call><name>make_eval_expr</name><argument_list>(<argument><expr><name>e_last</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>e1</name></expr></argument>, <argument><expr><name>e2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>e0</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_expr_free</name><argument_list>(<argument><expr><name>e1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_expr_free</name><argument_list>(<argument><expr><name>e2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while><empty_stmt>;</empty_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>stack_index</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>e</name> <operator>=</operator> <name>e0</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>verify_expr</name><parameter_list>(<parameter><decl><type><name>AVExpr</name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>e</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>e_value</name></expr>:</case>

<case>case <expr><name>e_const</name></expr>:</case> <return>return <expr><literal type="number">1</literal></expr>;</return>

<case>case <expr><name>e_func0</name></expr>:</case>

<case>case <expr><name>e_func1</name></expr>:</case>

<case>case <expr><name>e_squish</name></expr>:</case>

<case>case <expr><name>e_ld</name></expr>:</case>

<case>case <expr><name>e_gauss</name></expr>:</case>

<case>case <expr><name>e_isnan</name></expr>:</case>

<case>case <expr><name>e_isinf</name></expr>:</case>

<case>case <expr><name>e_floor</name></expr>:</case>

<case>case <expr><name>e_ceil</name></expr>:</case>

<case>case <expr><name>e_trunc</name></expr>:</case>

<case>case <expr><name>e_round</name></expr>:</case>

<case>case <expr><name>e_sqrt</name></expr>:</case>

<case>case <expr><name>e_not</name></expr>:</case>

<case>case <expr><name>e_random</name></expr>:</case>

<case>case <expr><name>e_sgn</name></expr>:</case>

<return>return <expr><call><name>verify_expr</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>param</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>e</name><operator>-&gt;</operator><name>param</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</return>

<case>case <expr><name>e_print</name></expr>:</case>

<return>return <expr><call><name>verify_expr</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>param</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name><name>e</name><operator>-&gt;</operator><name>param</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>||</operator> <call><name>verify_expr</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>param</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

<case>case <expr><name>e_if</name></expr>:</case>

<case>case <expr><name>e_ifnot</name></expr>:</case>

<case>case <expr><name>e_taylor</name></expr>:</case>

<return>return <expr><call><name>verify_expr</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>param</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>verify_expr</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>param</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name><name>e</name><operator>-&gt;</operator><name>param</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>||</operator> <call><name>verify_expr</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>param</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

<case>case <expr><name>e_between</name></expr>:</case>

<case>case <expr><name>e_clip</name></expr>:</case>

<case>case <expr><name>e_lerp</name></expr>:</case>

<return>return <expr><call><name>verify_expr</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>param</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<call><name>verify_expr</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>param</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<call><name>verify_expr</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>param</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>

<default>default:</default> <return>return <expr><call><name>verify_expr</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>param</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>verify_expr</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>param</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>e</name><operator>-&gt;</operator><name>param</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<decl_stmt><decl><type><name>int</name></type> <name>av_expr_parse</name><argument_list>(<argument><expr><name>AVExpr</name> <operator>*</operator><operator>*</operator><name>expr</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>s</name></expr></argument>,

<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator> <specifier>const</specifier> <operator>*</operator><name>const_names</name></expr></argument>,

<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator> <specifier>const</specifier> <operator>*</operator><name>func1_names</name></expr></argument>, <argument><expr><call><call><name>double</name> <argument_list>(<argument><expr><operator>*</operator> <specifier>const</specifier> <operator>*</operator><name>funcs1</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>double</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator> <specifier>const</specifier> <operator>*</operator><name>func2_names</name></expr></argument>, <argument><expr><call><call><name>double</name> <argument_list>(<argument><expr><operator>*</operator> <specifier>const</specifier> <operator>*</operator><name>funcs2</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>double</name></expr></argument>, <argument><expr><name>double</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>int</name> <name>log_offset</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><name>log_ctx</name></expr></argument>)</argument_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Parser</name></type> <name>p</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVExpr</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>w</name> <init>= <expr><call><name>av_malloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>wp</name> <init>= <expr><name>w</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s0</name> <init>= <expr><name>s</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>w</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><operator>*</operator><name>s</name></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>av_isspace</name><argument_list>(<argument><expr><operator>*</operator><name>s</name><operator>++</operator></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>wp</name><operator>++</operator> <operator>=</operator> <name><name>s</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></while>

<expr_stmt><expr><operator>*</operator><name>wp</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>.</operator><name>class</name></name> <operator>=</operator> <operator>&amp;</operator><name>eval_class</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>.</operator><name>stack_index</name></name><operator>=</operator><literal type="number">100</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>.</operator><name>s</name></name><operator>=</operator> <name>w</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>.</operator><name>const_names</name></name> <operator>=</operator> <name>const_names</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>.</operator><name>funcs1</name></name> <operator>=</operator> <name>funcs1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>.</operator><name>func1_names</name></name> <operator>=</operator> <name>func1_names</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>.</operator><name>funcs2</name></name> <operator>=</operator> <name>funcs2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>.</operator><name>func2_names</name></name> <operator>=</operator> <name>func2_names</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>.</operator><name>log_offset</name></name> <operator>=</operator> <name>log_offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>.</operator><name>log_ctx</name></name> <operator>=</operator> <name>log_ctx</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>parse_expr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>e</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>p</name><operator>.</operator><name>s</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid chars '%s' at the end of expression '%s'\n"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>.</operator><name>s</name></name></expr></argument>, <argument><expr><name>s0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>verify_expr</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>var</name></name><operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof> <operator>*</operator><name>VARS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>e</name><operator>-&gt;</operator><name>var</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>expr</name> <operator>=</operator> <name>e</name></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<label><name>end</name>:</label>

<expr_stmt><expr><call><name>av_expr_free</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></decl></decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>expr_count</name><parameter_list>(<parameter><decl><type><name>AVExpr</name> <modifier>*</modifier></type><name>e</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>counter</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>e</name> <operator>||</operator> <operator>!</operator><name>counter</name> <operator>||</operator> <operator>!</operator><name>size</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>e</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>type</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name><name>e</name><operator>-&gt;</operator><name>param</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>expr_count</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>param</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>counter</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>type</name> <operator>&amp;&amp;</operator> <name><name>e</name><operator>-&gt;</operator><name>const_index</name></name> <operator>&lt;</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>counter</name><index>[<expr><name><name>e</name><operator>-&gt;</operator><name>const_index</name></name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>av_expr_count_vars</name><parameter_list>(<parameter><decl><type><name>AVExpr</name> <modifier>*</modifier></type><name>e</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>counter</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>expr_count</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>counter</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>e_const</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>av_expr_count_func</name><parameter_list>(<parameter><decl><type><name>AVExpr</name> <modifier>*</modifier></type><name>e</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>counter</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <macro><name>expr_count</name><argument_list>(<argument>e</argument>, <argument>counter</argument>, <argument>size</argument>, <argument>((int[]){e_const, e_func1, e_func2})[arg]</argument>)</argument_list></macro>;</return>

</block_content>}</block></function>

<function><type><name>double</name></type> <name>av_expr_eval</name><parameter_list>(<parameter><decl><type><name>AVExpr</name> <modifier>*</modifier></type><name>e</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>double</name> <modifier>*</modifier></type><name>const_values</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Parser</name></type> <name>p</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p</name><operator>.</operator><name>var</name></name><operator>=</operator> <name><name>e</name><operator>-&gt;</operator><name>var</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>.</operator><name>const_values</name></name> <operator>=</operator> <name>const_values</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>.</operator><name>opaque</name></name> <operator>=</operator> <name>opaque</name></expr>;</expr_stmt>

<return>return <expr><call><name>eval_expr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name>int</name></type> <name>av_expr_parse_and_eval</name><argument_list>(<argument><expr><name>double</name> <operator>*</operator><name>d</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>s</name></expr></argument>,

<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator> <specifier>const</specifier> <operator>*</operator><name>const_names</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>double</name> <operator>*</operator><name>const_values</name></expr></argument>,

<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator> <specifier>const</specifier> <operator>*</operator><name>func1_names</name></expr></argument>, <argument><expr><call><call><name>double</name> <argument_list>(<argument><expr><operator>*</operator> <specifier>const</specifier> <operator>*</operator><name>funcs1</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>double</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator> <specifier>const</specifier> <operator>*</operator><name>func2_names</name></expr></argument>, <argument><expr><call><call><name>double</name> <argument_list>(<argument><expr><operator>*</operator> <specifier>const</specifier> <operator>*</operator><name>funcs2</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>double</name></expr></argument>, <argument><expr><name>double</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>void</name> <operator>*</operator><name>opaque</name></expr></argument>, <argument><expr><name>int</name> <name>log_offset</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><name>log_ctx</name></expr></argument>)</argument_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVExpr</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>av_expr_parse</name><argument_list>(<argument><expr><operator>&amp;</operator><name>e</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>const_names</name></expr></argument>, <argument><expr><name>func1_names</name></expr></argument>, <argument><expr><name>funcs1</name></expr></argument>, <argument><expr><name>func2_names</name></expr></argument>, <argument><expr><name>funcs2</name></expr></argument>, <argument><expr><name>log_offset</name></expr></argument>, <argument><expr><name>log_ctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>d</name> <operator>=</operator> <name>NAN</name></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>d</name> <operator>=</operator> <call><name>av_expr_eval</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>const_values</name></expr></argument>, <argument><expr><name>opaque</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_expr_free</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><call><name>isnan</name><argument_list>(<argument><expr><operator>*</operator><name>d</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></decl></decl_stmt>

</unit>
