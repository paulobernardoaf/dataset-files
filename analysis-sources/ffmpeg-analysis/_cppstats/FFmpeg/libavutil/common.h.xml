<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavutil\common.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__STDC_CONSTANT_MACROS</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>UINT64_C</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:error>#<cpp:directive>error</cpp:directive> missing -D__STDC_CONSTANT_MACROS / #define __STDC_CONSTANT_MACROS</cpp:error>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"attributes.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"macros.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"version.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avconfig.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>AV_HAVE_BIGENDIAN</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_NE</name><parameter_list>(<parameter><type><name>be</name></type></parameter>, <parameter><type><name>le</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(be)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_NE</name><parameter_list>(<parameter><type><name>be</name></type></parameter>, <parameter><type><name>le</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(le)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RSHIFT</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a) &gt; 0 ? ((a) + ((1&lt;&lt;(b))&gt;&gt;1))&gt;&gt;(b) : ((a) + ((1&lt;&lt;(b))&gt;&gt;1)-1)&gt;&gt;(b))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROUNDED_DIV</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((a)&gt;=0 ? (a) + ((b)&gt;&gt;1) : (a) - ((b)&gt;&gt;1))/(b))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_CEIL_RSHIFT</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(!av_builtin_constant_p(b) ? -((-(a)) &gt;&gt; (b)) : ((a) + (1&lt;&lt;(b)) - 1) &gt;&gt; (b))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_CEIL_RSHIFT</name></cpp:macro> <cpp:value>AV_CEIL_RSHIFT</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FFUDIV</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((a)&gt;0 ?(a):(a)-(b)+1) / (b))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FFUMOD</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a)-(b)*FFUDIV(a,b))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FFABS</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a) &gt;= 0 ? (a) : (-(a)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FFSIGN</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a) &gt; 0 ? 1 : -1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FFNABS</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a) &lt;= 0 ? (a) : (-(a)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FFDIFFSIGN</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x)&gt;(y)) - ((x)&lt;(y)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FFMAX</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a) &gt; (b) ? (a) : (b))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FFMAX3</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>FFMAX(FFMAX(a,b),c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FFMIN</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a) &gt; (b) ? (b) : (a))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FFMIN3</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>FFMIN(FFMIN(a,b),c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FFSWAP</name><parameter_list>(<parameter><type><name>type</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do{type SWAP_tmp= b; b= a; a= SWAP_tmp;}while(0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_ARRAY_ELEMS</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(sizeof(a) / sizeof((a)[0]))</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_AV_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"intmath.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>av_log2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>av_const</name> <name>int</name></type> <name>av_log2</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>av_log2_16bit</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>av_const</name> <name>int</name></type> <name>av_log2_16bit</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>av_const</name> <name>int</name></type> <name>av_clip_c</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>amin</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>amax</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_AV_CONFIG_H</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>ASSERT_LEVEL</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>ASSERT_LEVEL</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>amin</name> <operator>&gt;</operator> <name>amax</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>a</name> <operator>&lt;</operator> <name>amin</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>amin</name></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>a</name> <operator>&gt;</operator> <name>amax</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>amax</name></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content> <return>return <expr><name>a</name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>av_const</name> <name>int64_t</name></type> <name>av_clip64_c</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>amin</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>amax</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_AV_CONFIG_H</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>ASSERT_LEVEL</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>ASSERT_LEVEL</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>amin</name> <operator>&gt;</operator> <name>amax</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>a</name> <operator>&lt;</operator> <name>amin</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>amin</name></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>a</name> <operator>&gt;</operator> <name>amax</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>amax</name></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content> <return>return <expr><name>a</name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>av_const</name> <name>uint8_t</name></type> <name>av_clip_uint8_c</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>a</name><operator>&amp;</operator><operator>(</operator><operator>~</operator><literal type="number">0xFF</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><operator>~</operator><name>a</name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">31</literal></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content> <return>return <expr><name>a</name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>av_const</name> <name>int8_t</name></type> <name>av_clip_int8_c</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>a</name><operator>+</operator><literal type="number">0x80U</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><literal type="number">0xFF</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>a</name><operator>&gt;&gt;</operator><literal type="number">31</literal><operator>)</operator> <operator>^</operator> <literal type="number">0x7F</literal></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content> <return>return <expr><name>a</name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>av_const</name> <name>uint16_t</name></type> <name>av_clip_uint16_c</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>a</name><operator>&amp;</operator><operator>(</operator><operator>~</operator><literal type="number">0xFFFF</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><operator>~</operator><name>a</name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">31</literal></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content> <return>return <expr><name>a</name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>av_const</name> <name>int16_t</name></type> <name>av_clip_int16_c</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>a</name><operator>+</operator><literal type="number">0x8000U</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><literal type="number">0xFFFF</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>a</name><operator>&gt;&gt;</operator><literal type="number">31</literal><operator>)</operator> <operator>^</operator> <literal type="number">0x7FFF</literal></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content> <return>return <expr><name>a</name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>av_const</name> <name>int32_t</name></type> <name>av_clipl_int32_c</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>a</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>a</name><operator>+</operator><literal type="number">0x80000000u</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0xFFFFFFFF</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>a</name><operator>&gt;&gt;</operator><literal type="number">63</literal><operator>)</operator> <operator>^</operator> <literal type="number">0x7FFFFFFF</literal><operator>)</operator></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>int32_t</name><operator>)</operator><name>a</name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>av_const</name> <name>int</name></type> <name>av_clip_intp2_c</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name>a</name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>p</name><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><operator>(</operator><literal type="number">2</literal> <operator>&lt;&lt;</operator> <name>p</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>a</name> <operator>&gt;&gt;</operator> <literal type="number">31</literal><operator>)</operator> <operator>^</operator> <operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>p</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name>a</name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>av_const</name> <name>unsigned</name></type> <name>av_clip_uintp2_c</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>a</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>p</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><operator>~</operator><name>a</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">31</literal> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>p</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content> <return>return <expr><name>a</name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>av_const</name> <name>unsigned</name></type> <name>av_mod_uintp2_c</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>a</name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <name>p</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>av_sat_add32_c</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>av_clipl_int32</name><argument_list>(<argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name>a</name> <operator>+</operator> <name>b</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>av_sat_dadd32_c</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>av_sat_add32</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><call><name>av_sat_add32</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>av_sat_sub32_c</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>av_clipl_int32</name><argument_list>(<argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name>a</name> <operator>-</operator> <name>b</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>av_sat_dsub32_c</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>av_sat_sub32</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><call><name>av_sat_add32</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>av_const</name> <name>float</name></type> <name>av_clipf_c</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>amin</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>amax</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_AV_CONFIG_H</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>ASSERT_LEVEL</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>ASSERT_LEVEL</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>amin</name> <operator>&gt;</operator> <name>amax</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>a</name> <operator>&lt;</operator> <name>amin</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>amin</name></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>a</name> <operator>&gt;</operator> <name>amax</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>amax</name></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content> <return>return <expr><name>a</name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>av_const</name> <name>double</name></type> <name>av_clipd_c</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>amin</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>amax</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_AV_CONFIG_H</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>ASSERT_LEVEL</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>ASSERT_LEVEL</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>amin</name> <operator>&gt;</operator> <name>amax</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>a</name> <operator>&lt;</operator> <name>amin</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>amin</name></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>a</name> <operator>&gt;</operator> <name>amax</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>amax</name></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content> <return>return <expr><name>a</name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>av_const</name> <name>int</name></type> <name>av_ceil_log2_c</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>av_log2</name><argument_list>(<argument><expr><operator>(</operator><name>x</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>av_const</name> <name>int</name></type> <name>av_popcount_c</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>x</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>x</name> <operator>-=</operator> <operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x55555555</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">0x33333333</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x33333333</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>x</name> <operator>+</operator> <operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0F0F0F0F</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>+=</operator> <name>x</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>x</name> <operator>+</operator> <operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>av_const</name> <name>int</name></type> <name>av_popcount64_c</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>x</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>av_popcount</name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>x</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>av_popcount</name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>av_const</name> <name>int</name></type> <name>av_parity_c</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>v</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>av_popcount</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MKTAG</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a) | ((b) &lt;&lt; 8) | ((c) &lt;&lt; 16) | ((unsigned)(d) &lt;&lt; 24))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MKBETAG</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((d) | ((c) &lt;&lt; 8) | ((b) &lt;&lt; 16) | ((unsigned)(a) &lt;&lt; 24))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_UTF8</name><parameter_list>(<parameter><type><name>val</name></type></parameter>, <parameter><type><name>GET_BYTE</name></type></parameter>, <parameter><type><name>ERROR</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>val= (GET_BYTE);{uint32_t top = (val &amp; 128) &gt;&gt; 1;if ((val &amp; 0xc0) == 0x80 || val &gt;= 0xFE){ERROR}while (val &amp; top) {unsigned int tmp = (GET_BYTE) - 128;if(tmp&gt;&gt;6){ERROR}val= (val&lt;&lt;6) + tmp;top &lt;&lt;= 5;}val &amp;= (top &lt;&lt; 1) - 1;}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_UTF16</name><parameter_list>(<parameter><type><name>val</name></type></parameter>, <parameter><type><name>GET_16BIT</name></type></parameter>, <parameter><type><name>ERROR</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>val = (GET_16BIT);{unsigned int hi = val - 0xD800;if (hi &lt; 0x800) {val = (GET_16BIT) - 0xDC00;if (val &gt; 0x3FFU || hi &gt; 0x3FFU){ERROR}val += (hi&lt;&lt;10) + 0x10000;}}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PUT_UTF8</name><parameter_list>(<parameter><type><name>val</name></type></parameter>, <parameter><type><name>tmp</name></type></parameter>, <parameter><type><name>PUT_BYTE</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>{int bytes, shift;uint32_t in = val;if (in &lt; 0x80) {tmp = in;PUT_BYTE} else {bytes = (av_log2(in) + 4) / 5;shift = (bytes - 1) * 6;tmp = (256 - (256 &gt;&gt; bytes)) | (in &gt;&gt; shift);PUT_BYTEwhile (shift &gt;= 6) {shift -= 6;tmp = 0x80 | ((in &gt;&gt; shift) &amp; 0x3f);PUT_BYTE}}}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PUT_UTF16</name><parameter_list>(<parameter><type><name>val</name></type></parameter>, <parameter><type><name>tmp</name></type></parameter>, <parameter><type><name>PUT_16BIT</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>{uint32_t in = val;if (in &lt; 0x10000) {tmp = in;PUT_16BIT} else {tmp = 0xD800 | ((in - 0x10000) &gt;&gt; 10);PUT_16BITtmp = 0xDC00 | ((in - 0x10000) &amp; 0x3FF);PUT_16BIT}}</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mem.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_AV_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>av_ceil_log2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>av_ceil_log2</name></cpp:macro> <cpp:value>av_ceil_log2_c</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>av_clip</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>av_clip</name></cpp:macro> <cpp:value>av_clip_c</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>av_clip64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>av_clip64</name></cpp:macro> <cpp:value>av_clip64_c</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>av_clip_uint8</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>av_clip_uint8</name></cpp:macro> <cpp:value>av_clip_uint8_c</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>av_clip_int8</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>av_clip_int8</name></cpp:macro> <cpp:value>av_clip_int8_c</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>av_clip_uint16</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>av_clip_uint16</name></cpp:macro> <cpp:value>av_clip_uint16_c</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>av_clip_int16</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>av_clip_int16</name></cpp:macro> <cpp:value>av_clip_int16_c</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>av_clipl_int32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>av_clipl_int32</name></cpp:macro> <cpp:value>av_clipl_int32_c</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>av_clip_intp2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>av_clip_intp2</name></cpp:macro> <cpp:value>av_clip_intp2_c</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>av_clip_uintp2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>av_clip_uintp2</name></cpp:macro> <cpp:value>av_clip_uintp2_c</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>av_mod_uintp2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>av_mod_uintp2</name></cpp:macro> <cpp:value>av_mod_uintp2_c</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>av_sat_add32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>av_sat_add32</name></cpp:macro> <cpp:value>av_sat_add32_c</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>av_sat_dadd32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>av_sat_dadd32</name></cpp:macro> <cpp:value>av_sat_dadd32_c</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>av_sat_sub32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>av_sat_sub32</name></cpp:macro> <cpp:value>av_sat_sub32_c</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>av_sat_dsub32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>av_sat_dsub32</name></cpp:macro> <cpp:value>av_sat_dsub32_c</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>av_clipf</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>av_clipf</name></cpp:macro> <cpp:value>av_clipf_c</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>av_clipd</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>av_clipd</name></cpp:macro> <cpp:value>av_clipd_c</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>av_popcount</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>av_popcount</name></cpp:macro> <cpp:value>av_popcount_c</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>av_popcount64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>av_popcount64</name></cpp:macro> <cpp:value>av_popcount64_c</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>av_parity</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>av_parity</name></cpp:macro> <cpp:value>av_parity_c</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
