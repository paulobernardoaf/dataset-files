<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavutil\base64.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base64.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"intreadwrite.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"timer.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>map2</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>=

<expr><block>{

<expr><literal type="number">0xfe</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>,

<expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>,

<expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>,

<expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>,

<expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>,

<expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>,

<expr><literal type="number">0x3e</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0x3f</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0x36</literal></expr>,

<expr><literal type="number">0x37</literal></expr>, <expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0x39</literal></expr>, <expr><literal type="number">0x3a</literal></expr>, <expr><literal type="number">0x3b</literal></expr>, <expr><literal type="number">0x3c</literal></expr>, <expr><literal type="number">0x3d</literal></expr>, <expr><literal type="number">0xff</literal></expr>,

<expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xfe</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>,

<expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x09</literal></expr>,

<expr><literal type="number">0x0a</literal></expr>, <expr><literal type="number">0x0b</literal></expr>, <expr><literal type="number">0x0c</literal></expr>, <expr><literal type="number">0x0d</literal></expr>, <expr><literal type="number">0x0e</literal></expr>, <expr><literal type="number">0x0f</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x11</literal></expr>,

<expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0x19</literal></expr>,

<expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0x1a</literal></expr>, <expr><literal type="number">0x1b</literal></expr>,

<expr><literal type="number">0x1c</literal></expr>, <expr><literal type="number">0x1d</literal></expr>, <expr><literal type="number">0x1e</literal></expr>, <expr><literal type="number">0x1f</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x21</literal></expr>, <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0x23</literal></expr>,

<expr><literal type="number">0x24</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0x2a</literal></expr>, <expr><literal type="number">0x2b</literal></expr>,

<expr><literal type="number">0x2c</literal></expr>, <expr><literal type="number">0x2d</literal></expr>, <expr><literal type="number">0x2e</literal></expr>, <expr><literal type="number">0x2f</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x31</literal></expr>, <expr><literal type="number">0x32</literal></expr>, <expr><literal type="number">0x33</literal></expr>,

<expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>,

<expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>,

<expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>,

<expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>,

<expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>,

<expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>,

<expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>,

<expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>,

<expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>,

<expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>,

<expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>,

<expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>,

<expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>,

<expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>,

<expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>,

<expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>,

<expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BASE64_DEC_STEP</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { bits = map2[in[i]]; if (bits &amp; 0x80) goto out ##i; v = i ? (v &lt;&lt; 6) + bits : bits; } while(0)</cpp:value></cpp:define>

<function><type><name>int</name></type> <name>av_base64_decode</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>in_str</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>out_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><name>out</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><name>out</name> <operator>+</operator> <name>out_size</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>in</name> <init>= <expr><name>in_str</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>bits</name> <init>= <expr><literal type="number">0xff</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>v</name></decl>;</decl_stmt>

<while>while <condition>(<expr><name>end</name> <operator>-</operator> <name>dst</name> <operator>&gt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>BASE64_DEC_STEP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BASE64_DEC_STEP</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BASE64_DEC_STEP</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BASE64_DEC_STEP</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>av_be2ne32</name><argument_list>(<argument><expr><name>v</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WN32</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>in</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>end</name> <operator>-</operator> <name>dst</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>BASE64_DEC_STEP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BASE64_DEC_STEP</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BASE64_DEC_STEP</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BASE64_DEC_STEP</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <name>v</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>end</name> <operator>-</operator> <name>dst</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <name>v</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>end</name> <operator>-</operator> <name>dst</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <name>v</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>in</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>BASE64_DEC_STEP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>in</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BASE64_DEC_STEP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>in</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BASE64_DEC_STEP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>in</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BASE64_DEC_STEP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>in</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<label><name>out3</name>:</label>

<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <name>v</name> <operator>&gt;&gt;</operator> <literal type="number">10</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name> <operator>&lt;&lt;=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<label><name>out2</name>:</label>

<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <name>v</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<label><name>out1</name>:</label>

<label><name>out0</name>:</label>

<return>return <expr><ternary><condition><expr><name>bits</name> <operator>&amp;</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name>AVERROR_INVALIDDATA</name></expr> </then><else>: <expr><name>dst</name> <operator>-</operator> <name>out</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>av_base64_encode</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>out_size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>in_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>b64</name><index>[]</index></name> <init>=

<expr><literal type="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ret</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dst</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_bits</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_shift</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bytes_remaining</name> <init>= <expr><name>in_size</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>in_size</name> <operator>&gt;=</operator> <name>UINT_MAX</name> <operator>/</operator> <literal type="number">4</literal> <operator>||</operator>

<name>out_size</name> <operator>&lt;</operator> <call><name>AV_BASE64_SIZE</name><argument_list>(<argument><expr><name>in_size</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>dst</name> <operator>=</operator> <name>out</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>bytes_remaining</name> <operator>&gt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i_bits</name> <operator>=</operator> <call><name>AV_RB32</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>in</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt> <expr_stmt><expr><name>bytes_remaining</name> <operator>-=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <name><name>b64</name><index>[ <expr><name>i_bits</name><operator>&gt;&gt;</operator><literal type="number">26</literal></expr> ]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <name><name>b64</name><index>[<expr><operator>(</operator><name>i_bits</name><operator>&gt;&gt;</operator><literal type="number">20</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <name><name>b64</name><index>[<expr><operator>(</operator><name>i_bits</name><operator>&gt;&gt;</operator><literal type="number">14</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <name><name>b64</name><index>[<expr><operator>(</operator><name>i_bits</name><operator>&gt;&gt;</operator><literal type="number">8</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>i_bits</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>bytes_remaining</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i_bits</name> <operator>=</operator> <operator>(</operator><name>i_bits</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <operator>*</operator><name>in</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>bytes_remaining</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>i_shift</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<while>while <condition>(<expr><name>i_shift</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <name><name>b64</name><index>[<expr><operator>(</operator><name>i_bits</name> <operator>&lt;&lt;</operator> <literal type="number">6</literal> <operator>&gt;&gt;</operator> <name>i_shift</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_shift</name> <operator>-=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<while>while <condition>(<expr><operator>(</operator><name>dst</name> <operator>-</operator> <name>ret</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <literal type="char">'='</literal></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><operator>*</operator><name>dst</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

</unit>
