<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavutil\log.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avutil.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"attributes.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"version.h"</cpp:file></cpp:include>

<typedef>typedef <type><enum>enum <block>{

<decl><name>AV_CLASS_CATEGORY_NA</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>AV_CLASS_CATEGORY_INPUT</name></decl>,

<decl><name>AV_CLASS_CATEGORY_OUTPUT</name></decl>,

<decl><name>AV_CLASS_CATEGORY_MUXER</name></decl>,

<decl><name>AV_CLASS_CATEGORY_DEMUXER</name></decl>,

<decl><name>AV_CLASS_CATEGORY_ENCODER</name></decl>,

<decl><name>AV_CLASS_CATEGORY_DECODER</name></decl>,

<decl><name>AV_CLASS_CATEGORY_FILTER</name></decl>,

<decl><name>AV_CLASS_CATEGORY_BITSTREAM_FILTER</name></decl>,

<decl><name>AV_CLASS_CATEGORY_SWSCALER</name></decl>,

<decl><name>AV_CLASS_CATEGORY_SWRESAMPLER</name></decl>,

<decl><name>AV_CLASS_CATEGORY_DEVICE_VIDEO_OUTPUT</name> <init>= <expr><literal type="number">40</literal></expr></init></decl>,

<decl><name>AV_CLASS_CATEGORY_DEVICE_VIDEO_INPUT</name></decl>,

<decl><name>AV_CLASS_CATEGORY_DEVICE_AUDIO_OUTPUT</name></decl>,

<decl><name>AV_CLASS_CATEGORY_DEVICE_AUDIO_INPUT</name></decl>,

<decl><name>AV_CLASS_CATEGORY_DEVICE_OUTPUT</name></decl>,

<decl><name>AV_CLASS_CATEGORY_DEVICE_INPUT</name></decl>,

<decl><name>AV_CLASS_CATEGORY_NB</name></decl> 

}</block></enum></type><name>AVClassCategory</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_IS_INPUT_DEVICE</name><parameter_list>(<parameter><type><name>category</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((category) == AV_CLASS_CATEGORY_DEVICE_VIDEO_INPUT) || ((category) == AV_CLASS_CATEGORY_DEVICE_AUDIO_INPUT) || ((category) == AV_CLASS_CATEGORY_DEVICE_INPUT))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_IS_OUTPUT_DEVICE</name><parameter_list>(<parameter><type><name>category</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((category) == AV_CLASS_CATEGORY_DEVICE_VIDEO_OUTPUT) || ((category) == AV_CLASS_CATEGORY_DEVICE_AUDIO_OUTPUT) || ((category) == AV_CLASS_CATEGORY_DEVICE_OUTPUT))</cpp:value></cpp:define>

<struct_decl>struct <name>AVOptionRanges</name>;</struct_decl>

<typedef>typedef <type><struct>struct <name>AVClass</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>class_name</name></decl>;</decl_stmt>

<function_decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> (<modifier>*</modifier><name>item_name</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>AVOption</name></name> <modifier>*</modifier></type><name>option</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>version</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>log_level_offset_offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>parent_log_context_offset</name></decl>;</decl_stmt>

<function_decl><type><name>void</name><modifier>*</modifier></type> (<modifier>*</modifier><name>child_next</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>prev</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name><name>struct</name> <name>AVClass</name></name><modifier>*</modifier></type> (<modifier>*</modifier><name>child_class_next</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>AVClass</name></name> <modifier>*</modifier></type><name>prev</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>AVClassCategory</name></type> <name>category</name></decl>;</decl_stmt>

<function_decl><type><name>AVClassCategory</name></type> (<modifier>*</modifier><name>get_category</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>query_ranges</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>AVOptionRanges</name></name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>

}</block></struct></type> <name>AVClass</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_LOG_QUIET</name></cpp:macro> <cpp:value>-8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_LOG_PANIC</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_LOG_FATAL</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_LOG_ERROR</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_LOG_WARNING</name></cpp:macro> <cpp:value>24</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_LOG_INFO</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_LOG_VERBOSE</name></cpp:macro> <cpp:value>40</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_LOG_DEBUG</name></cpp:macro> <cpp:value>48</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_LOG_TRACE</name></cpp:macro> <cpp:value>56</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_LOG_MAX_OFFSET</name></cpp:macro> <cpp:value>(AV_LOG_TRACE - AV_LOG_QUIET)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_LOG_C</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x) &lt;&lt; 8)</cpp:value></cpp:define>

<function_decl><type><name>void</name></type> <name>av_log</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>avcl</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> av_printf_format<parameter_list>(</parameter_list>3<operator>,</operator> 4</function_decl>)<empty_stmt>;</empty_stmt>

<function_decl><type><name>void</name></type> <name>av_log_once</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>avcl</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>initial_level</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>subsequent_level</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> av_printf_format<parameter_list>(</parameter_list>5<operator>,</operator> 6</function_decl>)<empty_stmt>;</empty_stmt>

<function_decl><type><name>void</name></type> <name>av_vlog</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>avcl</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>vl</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>av_log_get_level</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>av_log_set_level</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>av_log_set_callback</name><parameter_list>(<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>callback</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>va_list</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>av_log_default_callback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>avcl</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>,

<parameter><decl><type><name>va_list</name></type> <name>vl</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>av_default_item_name</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>AVClassCategory</name></type> <name>av_default_get_category</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>av_log_format_line</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>vl</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line_size</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>print_prefix</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>av_log_format_line2</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>vl</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line_size</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>print_prefix</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_LOG_SKIP_REPEATED</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_LOG_PRINT_LEVEL</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<function_decl><type><name>void</name></type> <name>av_log_set_flags</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>arg</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>av_log_get_flags</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

</unit>
