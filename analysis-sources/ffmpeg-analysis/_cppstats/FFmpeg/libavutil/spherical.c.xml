<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavutil\spherical.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mem.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"spherical.h"</cpp:file></cpp:include>

<function><type><name>AVSphericalMapping</name> <modifier>*</modifier></type><name>av_spherical_alloc</name><parameter_list>(<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVSphericalMapping</name> <modifier>*</modifier></type><name>spherical</name> <init>= <expr><call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>AVSphericalMapping</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>spherical</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>spherical</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>spherical</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>av_spherical_tile_bounds</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVSphericalMapping</name> <modifier>*</modifier></type><name>map</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>height</name></decl></parameter>,

<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>left</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>top</name></decl></parameter>,

<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>right</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>bottom</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>orig_width</name> <init>= <expr><operator>(</operator><name>uint64_t</name><operator>)</operator> <name>width</name> <operator>*</operator> <name>UINT32_MAX</name> <operator>/</operator>

<operator>(</operator><name>UINT32_MAX</name> <operator>-</operator> <name><name>map</name><operator>-&gt;</operator><name>bound_right</name></name> <operator>-</operator> <name><name>map</name><operator>-&gt;</operator><name>bound_left</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>orig_height</name> <init>= <expr><operator>(</operator><name>uint64_t</name><operator>)</operator> <name>height</name> <operator>*</operator> <name>UINT32_MAX</name> <operator>/</operator>

<operator>(</operator><name>UINT32_MAX</name> <operator>-</operator> <name><name>map</name><operator>-&gt;</operator><name>bound_bottom</name></name> <operator>-</operator> <name><name>map</name><operator>-&gt;</operator><name>bound_top</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>left</name> <operator>=</operator> <operator>(</operator><name>orig_width</name> <operator>*</operator> <name><name>map</name><operator>-&gt;</operator><name>bound_left</name></name> <operator>+</operator> <name>UINT32_MAX</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>UINT32_MAX</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>top</name> <operator>=</operator> <operator>(</operator><name>orig_height</name> <operator>*</operator> <name><name>map</name><operator>-&gt;</operator><name>bound_top</name></name> <operator>+</operator> <name>UINT32_MAX</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>UINT32_MAX</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>right</name> <operator>=</operator> <name>orig_width</name> <operator>-</operator> <name>width</name> <operator>-</operator> <operator>*</operator><name>left</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>bottom</name> <operator>=</operator> <name>orig_height</name> <operator>-</operator> <name>height</name> <operator>-</operator> <operator>*</operator><name>top</name></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>spherical_projection_names</name><index>[]</index></name> <init>= <expr><block>{

<expr><index>[<expr><name>AV_SPHERICAL_EQUIRECTANGULAR</name></expr>]</index> <operator>=</operator> <literal type="string">"equirectangular"</literal></expr>,

<expr><index>[<expr><name>AV_SPHERICAL_CUBEMAP</name></expr>]</index> <operator>=</operator> <literal type="string">"cubemap"</literal></expr>,

<expr><index>[<expr><name>AV_SPHERICAL_EQUIRECTANGULAR_TILE</name></expr>]</index> <operator>=</operator> <literal type="string">"tiled equirectangular"</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>av_spherical_projection_name</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVSphericalProjection</name></name></type> <name>projection</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>projection</name> <operator>&gt;=</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>spherical_projection_names</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="string">"unknown"</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name><name>spherical_projection_names</name><index>[<expr><name>projection</name></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>av_spherical_from_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>spherical_projection_names</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>spherical_projection_names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name><name>spherical_projection_names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>i</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

</unit>
