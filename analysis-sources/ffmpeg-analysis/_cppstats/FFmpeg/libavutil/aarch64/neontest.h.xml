<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavutil\aarch64\neontest.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/bswap.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>storeneonregs</name><parameter_list>(<parameter><type><name>mem</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__asm__ volatile( "stp d8, d9, [%0]\n\t" "stp d10, d11, [%0, #16]\n\t" "stp d12, d13, [%0, #32]\n\t" "stp d14, d15, [%0, #48]\n\t" :: "r"(mem) : "memory")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>testneonclobbers</name><parameter_list>(<parameter><type><name>func</name></type></parameter>, <parameter><type><name>ctx</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>uint64_t neon[2][8]; int ret; storeneonregs(neon[0]); ret = __real_ ##func(ctx, __VA_ARGS__); storeneonregs(neon[1]); if (memcmp(neon[0], neon[1], sizeof(neon[0]))) { int i; av_log(ctx, AV_LOG_ERROR, "NEON REGS CLOBBERED IN %s!\n", #func); for (i = 0; i &lt; 8; i ++) if (neon[0][i] != neon[1][i]) { av_log(ctx, AV_LOG_ERROR, "d%-2d = %016"PRIx64"\n", 8 + i, av_bswap64(neon[0][i])); av_log(ctx, AV_LOG_ERROR, " -&gt; %016"PRIx64"\n", av_bswap64(neon[1][i])); } abort(); } return ret</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wrap</name><parameter_list>(<parameter><type><name>func</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>int __real_ ##func; int __wrap_ ##func; int __wrap_ ##func</cpp:value></cpp:define>

</unit>
