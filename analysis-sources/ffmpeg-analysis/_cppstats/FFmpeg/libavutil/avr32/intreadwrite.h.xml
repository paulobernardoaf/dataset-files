<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavutil\avr32\intreadwrite.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/bswap.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_RL16</name></cpp:macro> <cpp:value>AV_RL16</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>uint16_t</name></type> <name>AV_RL16</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>v</name></decl>;</decl_stmt>

<asm>__asm__ ("ld.ub %0, %1 \n\t"

"ldins.b %0:l, %2 \n\t"

: "=&amp;r"(v)

: "m"(*(const uint8_t*)p), "RKs12"(*((const uint8_t*)p+1)));</asm>

<return>return <expr><name>v</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_RB16</name></cpp:macro> <cpp:value>AV_RB16</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>uint16_t</name></type> <name>AV_RB16</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>v</name></decl>;</decl_stmt>

<asm>__asm__ ("ld.ub %0, %2 \n\t"

"ldins.b %0:l, %1 \n\t"

: "=&amp;r"(v)

: "RKs12"(*(const uint8_t*)p), "m"(*((const uint8_t*)p+1)));</asm>

<return>return <expr><name>v</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_RB24</name></cpp:macro> <cpp:value>AV_RB24</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>uint32_t</name></type> <name>AV_RB24</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>v</name></decl>;</decl_stmt>

<asm>__asm__ ("ld.ub %0, %3 \n\t"

"ldins.b %0:l, %2 \n\t"

"ldins.b %0:u, %1 \n\t"

: "=&amp;r"(v)

: "RKs12"(* (const uint8_t*)p),

"RKs12"(*((const uint8_t*)p+1)),

"m" (*((const uint8_t*)p+2)));</asm>

<return>return <expr><name>v</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_RL24</name></cpp:macro> <cpp:value>AV_RL24</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>uint32_t</name></type> <name>AV_RL24</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>v</name></decl>;</decl_stmt>

<asm>__asm__ ("ld.ub %0, %1 \n\t"

"ldins.b %0:l, %2 \n\t"

"ldins.b %0:u, %3 \n\t"

: "=&amp;r"(v)

: "m" (* (const uint8_t*)p),

"RKs12"(*((const uint8_t*)p+1)),

"RKs12"(*((const uint8_t*)p+2)));</asm>

<return>return <expr><name>v</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCH_AVR32_AP</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_RB32</name></cpp:macro> <cpp:value>AV_RB32</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>uint32_t</name></type> <name>AV_RB32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>v</name></decl>;</decl_stmt>

<asm>__asm__ ("ld.w %0, %1" : "=r"(v) : "m"(*(const uint32_t*)p));</asm>

<return>return <expr><name>v</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_WB32</name></cpp:macro> <cpp:value>AV_WB32</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>AV_WB32</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>v</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<asm>__asm__ ("st.w %0, %1" : "=m"(*(uint32_t*)p) : "r"(v));</asm>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_RL32</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>av_bswap32(AV_RB32(p))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_WL32</name><parameter_list>(<parameter><type><name>p</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>AV_WB32(p, av_bswap32(v))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_WB64</name></cpp:macro> <cpp:value>AV_WB64</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>AV_WB64</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>v</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<union>union <block>{ <decl_stmt><decl><type><name>uint64_t</name></type> <name>v</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>uint32_t</name></type> <name><name>hl</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> }</block> <decl><name>vv</name> <init>= <expr><block>{ <expr><name>v</name></expr> }</block></expr></init></decl>;</union>

<expr_stmt><expr><call><name>AV_WB32</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>vv</name><operator>.</operator><name>hl</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WB32</name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><name>p</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>vv</name><operator>.</operator><name>hl</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_WL64</name></cpp:macro> <cpp:value>AV_WL64</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>AV_WL64</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>v</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<union>union <block>{ <decl_stmt><decl><type><name>uint64_t</name></type> <name>v</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>uint32_t</name></type> <name><name>hl</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> }</block> <decl><name>vv</name> <init>= <expr><block>{ <expr><name>v</name></expr> }</block></expr></init></decl>;</union>

<expr_stmt><expr><call><name>AV_WL32</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>vv</name><operator>.</operator><name>hl</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WL32</name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><name>p</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>vv</name><operator>.</operator><name>hl</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_RB32</name></cpp:macro> <cpp:value>AV_RB32</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>uint32_t</name></type> <name>AV_RB32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>v</name></decl>;</decl_stmt>

<asm>__asm__ ("ld.ub %0, %4 \n\t"

"ldins.b %0:l, %3 \n\t"

"ldins.b %0:u, %2 \n\t"

"ldins.b %0:t, %1 \n\t"

: "=&amp;r"(v)

: "RKs12"(* (const uint8_t*)p),

"RKs12"(*((const uint8_t*)p+1)),

"RKs12"(*((const uint8_t*)p+2)),

"m" (*((const uint8_t*)p+3)));</asm>

<return>return <expr><name>v</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_RL32</name></cpp:macro> <cpp:value>AV_RL32</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>uint32_t</name></type> <name>AV_RL32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>v</name></decl>;</decl_stmt>

<asm>__asm__ ("ld.ub %0, %1 \n\t"

"ldins.b %0:l, %2 \n\t"

"ldins.b %0:u, %3 \n\t"

"ldins.b %0:t, %4 \n\t"

: "=&amp;r"(v)

: "m" (* (const uint8_t*)p),

"RKs12"(*((const uint8_t*)p+1)),

"RKs12"(*((const uint8_t*)p+2)),

"RKs12"(*((const uint8_t*)p+3)));</asm>

<return>return <expr><name>v</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_RB64</name></cpp:macro> <cpp:value>AV_RB64</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>uint64_t</name></type> <name>AV_RB64</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<union>union <block>{ <decl_stmt><decl><type><name>uint64_t</name></type> <name>v</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>uint32_t</name></type> <name><name>hl</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> }</block> <decl><name>v</name></decl>;</union>

<expr_stmt><expr><name><name>v</name><operator>.</operator><name>hl</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>AV_RB32</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><operator>.</operator><name>hl</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>AV_RB32</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name><operator>*</operator><operator>)</operator><name>p</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>v</name><operator>.</operator><name>v</name></name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_RL64</name></cpp:macro> <cpp:value>AV_RL64</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>uint64_t</name></type> <name>AV_RL64</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<union>union <block>{ <decl_stmt><decl><type><name>uint64_t</name></type> <name>v</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>uint32_t</name></type> <name><name>hl</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> }</block> <decl><name>v</name></decl>;</union>

<expr_stmt><expr><name><name>v</name><operator>.</operator><name>hl</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>AV_RL32</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><operator>.</operator><name>hl</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>AV_RL32</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name><operator>*</operator><operator>)</operator><name>p</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>v</name><operator>.</operator><name>v</name></name></expr>;</return>

</block_content>}</block></function>

</unit>
