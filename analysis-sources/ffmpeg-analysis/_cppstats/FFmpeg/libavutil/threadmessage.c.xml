<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavutil\threadmessage.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fifo.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"threadmessage.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"thread.h"</cpp:file></cpp:include>

<struct>struct <name>AVThreadMessageQueue</name> <block>{

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_THREADS</name></expr></cpp:if>

<decl_stmt><decl><type><name>AVFifoBuffer</name> <modifier>*</modifier></type><name>fifo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pthread_mutex_t</name></type> <name>lock</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pthread_cond_t</name></type> <name>cond_recv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pthread_cond_t</name></type> <name>cond_send</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err_send</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err_recv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>elsize</name></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>free_func</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>int</name></type> <name>dummy</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block>;</struct>

<function><type><name>int</name></type> <name>av_thread_message_queue_alloc</name><parameter_list>(<parameter><decl><type><name>AVThreadMessageQueue</name> <modifier>*</modifier><modifier>*</modifier></type><name>mq</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name></type> <name>nelem</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name></type> <name>elsize</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_THREADS</name></expr></cpp:if>

<decl_stmt><decl><type><name>AVThreadMessageQueue</name> <modifier>*</modifier></type><name>rmq</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>nelem</name> <operator>&gt;</operator> <name>INT_MAX</name> <operator>/</operator> <name>elsize</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>rmq</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>rmq</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rmq</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>rmq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>pthread_cond_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rmq</name><operator>-&gt;</operator><name>cond_recv</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rmq</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>rmq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>pthread_cond_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rmq</name><operator>-&gt;</operator><name>cond_send</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pthread_cond_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rmq</name><operator>-&gt;</operator><name>cond_recv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rmq</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>rmq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>rmq</name><operator>-&gt;</operator><name>fifo</name></name> <operator>=</operator> <call><name>av_fifo_alloc</name><argument_list>(<argument><expr><name>elsize</name> <operator>*</operator> <name>nelem</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pthread_cond_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rmq</name><operator>-&gt;</operator><name>cond_send</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_cond_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rmq</name><operator>-&gt;</operator><name>cond_recv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rmq</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>rmq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>rmq</name><operator>-&gt;</operator><name>elsize</name></name> <operator>=</operator> <name>elsize</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>mq</name> <operator>=</operator> <name>rmq</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><operator>*</operator><name>mq</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</block_content>}</block></function>

<function><type><name>void</name></type> <name>av_thread_message_queue_set_free_func</name><parameter_list>(<parameter><decl><type><name>AVThreadMessageQueue</name> <modifier>*</modifier></type><name>mq</name></decl></parameter>,

<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>free_func</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_THREADS</name></expr></cpp:if>

<expr_stmt><expr><name><name>mq</name><operator>-&gt;</operator><name>free_func</name></name> <operator>=</operator> <name>free_func</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>av_thread_message_queue_free</name><parameter_list>(<parameter><decl><type><name>AVThreadMessageQueue</name> <modifier>*</modifier><modifier>*</modifier></type><name>mq</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_THREADS</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>mq</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_thread_message_flush</name><argument_list>(<argument><expr><operator>*</operator><name>mq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_fifo_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>mq</name><operator>)</operator><operator>-&gt;</operator><name>fifo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_cond_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>mq</name><operator>)</operator><operator>-&gt;</operator><name>cond_send</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_cond_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>mq</name><operator>)</operator><operator>-&gt;</operator><name>cond_recv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>mq</name><operator>)</operator><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><name>mq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>av_thread_message_queue_nb_elems</name><parameter_list>(<parameter><decl><type><name>AVThreadMessageQueue</name> <modifier>*</modifier></type><name>mq</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_THREADS</name></expr></cpp:if>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mq</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_fifo_size</name><argument_list>(<argument><expr><name><name>mq</name><operator>-&gt;</operator><name>fifo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mq</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name> <operator>/</operator> <name><name>mq</name><operator>-&gt;</operator><name>elsize</name></name></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_THREADS</name></expr></cpp:if>

<function><type><specifier>static</specifier> <name>int</name></type> <name>av_thread_message_queue_send_locked</name><parameter_list>(<parameter><decl><type><name>AVThreadMessageQueue</name> <modifier>*</modifier></type><name>mq</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<while>while <condition>(<expr><operator>!</operator><name><name>mq</name><operator>-&gt;</operator><name>err_send</name></name> <operator>&amp;&amp;</operator> <call><name>av_fifo_space</name><argument_list>(<argument><expr><name><name>mq</name><operator>-&gt;</operator><name>fifo</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name><name>mq</name><operator>-&gt;</operator><name>elsize</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>AV_THREAD_MESSAGE_NONBLOCK</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>pthread_cond_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mq</name><operator>-&gt;</operator><name>cond_send</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mq</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name><name>mq</name><operator>-&gt;</operator><name>err_send</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>mq</name><operator>-&gt;</operator><name>err_send</name></name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_fifo_generic_write</name><argument_list>(<argument><expr><name><name>mq</name><operator>-&gt;</operator><name>fifo</name></name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name><name>mq</name><operator>-&gt;</operator><name>elsize</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_cond_signal</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mq</name><operator>-&gt;</operator><name>cond_recv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>av_thread_message_queue_recv_locked</name><parameter_list>(<parameter><decl><type><name>AVThreadMessageQueue</name> <modifier>*</modifier></type><name>mq</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<while>while <condition>(<expr><operator>!</operator><name><name>mq</name><operator>-&gt;</operator><name>err_recv</name></name> <operator>&amp;&amp;</operator> <call><name>av_fifo_size</name><argument_list>(<argument><expr><name><name>mq</name><operator>-&gt;</operator><name>fifo</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name><name>mq</name><operator>-&gt;</operator><name>elsize</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>AV_THREAD_MESSAGE_NONBLOCK</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>pthread_cond_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mq</name><operator>-&gt;</operator><name>cond_recv</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mq</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><call><name>av_fifo_size</name><argument_list>(<argument><expr><name><name>mq</name><operator>-&gt;</operator><name>fifo</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name><name>mq</name><operator>-&gt;</operator><name>elsize</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>mq</name><operator>-&gt;</operator><name>err_recv</name></name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_fifo_generic_read</name><argument_list>(<argument><expr><name><name>mq</name><operator>-&gt;</operator><name>fifo</name></name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name><name>mq</name><operator>-&gt;</operator><name>elsize</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_cond_signal</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mq</name><operator>-&gt;</operator><name>cond_send</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><name>int</name></type> <name>av_thread_message_queue_send</name><parameter_list>(<parameter><decl><type><name>AVThreadMessageQueue</name> <modifier>*</modifier></type><name>mq</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_THREADS</name></expr></cpp:if>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mq</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_thread_message_queue_send_locked</name><argument_list>(<argument><expr><name>mq</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mq</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</block_content>}</block></function>

<function><type><name>int</name></type> <name>av_thread_message_queue_recv</name><parameter_list>(<parameter><decl><type><name>AVThreadMessageQueue</name> <modifier>*</modifier></type><name>mq</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_THREADS</name></expr></cpp:if>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mq</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_thread_message_queue_recv_locked</name><argument_list>(<argument><expr><name>mq</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mq</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</block_content>}</block></function>

<function><type><name>void</name></type> <name>av_thread_message_queue_set_err_send</name><parameter_list>(<parameter><decl><type><name>AVThreadMessageQueue</name> <modifier>*</modifier></type><name>mq</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>err</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_THREADS</name></expr></cpp:if>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mq</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mq</name><operator>-&gt;</operator><name>err_send</name></name> <operator>=</operator> <name>err</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_cond_broadcast</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mq</name><operator>-&gt;</operator><name>cond_send</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mq</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</block_content>}</block></function>

<function><type><name>void</name></type> <name>av_thread_message_queue_set_err_recv</name><parameter_list>(<parameter><decl><type><name>AVThreadMessageQueue</name> <modifier>*</modifier></type><name>mq</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>err</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_THREADS</name></expr></cpp:if>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mq</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mq</name><operator>-&gt;</operator><name>err_recv</name></name> <operator>=</operator> <name>err</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_cond_broadcast</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mq</name><operator>-&gt;</operator><name>cond_recv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mq</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_THREADS</name></expr></cpp:if>

<function><type><specifier>static</specifier> <name>void</name></type> <name>free_func_wrap</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVThreadMessageQueue</name> <modifier>*</modifier></type><name>mq</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>mq</name><operator>-&gt;</operator><name>free_func</name></name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type> <name>av_thread_message_flush</name><parameter_list>(<parameter><decl><type><name>AVThreadMessageQueue</name> <modifier>*</modifier></type><name>mq</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_THREADS</name></expr></cpp:if>

<decl_stmt><decl><type><name>int</name></type> <name>used</name></decl>, <decl><type ref="prev"/><name>off</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>free_func</name> <init>= <expr><name><name>mq</name><operator>-&gt;</operator><name>free_func</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mq</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>used</name> <operator>=</operator> <call><name>av_fifo_size</name><argument_list>(<argument><expr><name><name>mq</name><operator>-&gt;</operator><name>fifo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>free_func</name></expr>)</condition><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>off</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>off</name> <operator>&lt;</operator> <name>used</name></expr>;</condition> <incr><expr><name>off</name> <operator>+=</operator> <name><name>mq</name><operator>-&gt;</operator><name>elsize</name></name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_fifo_generic_peek_at</name><argument_list>(<argument><expr><name><name>mq</name><operator>-&gt;</operator><name>fifo</name></name></expr></argument>, <argument><expr><name>mq</name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><name><name>mq</name><operator>-&gt;</operator><name>elsize</name></name></expr></argument>, <argument><expr><name>free_func_wrap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_fifo_drain</name><argument_list>(<argument><expr><name><name>mq</name><operator>-&gt;</operator><name>fifo</name></name></expr></argument>, <argument><expr><name>used</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_cond_broadcast</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mq</name><operator>-&gt;</operator><name>cond_send</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mq</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</block_content>}</block></function>

</unit>
