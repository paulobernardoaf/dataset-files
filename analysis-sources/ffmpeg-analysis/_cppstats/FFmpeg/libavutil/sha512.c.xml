<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavutil\sha512.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"attributes.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avutil.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bswap.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sha512.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"intreadwrite.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mem.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>AVSHA512</name> <block>{

<decl_stmt><decl><type><name>uint8_t</name></type> <name>digest_len</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint64_t</name></type> <name>count</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>buffer</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint64_t</name></type> <name><name>state</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt> 

}</block></struct></type> <name>AVSHA512</name>;</typedef>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>av_sha512_size</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>AVSHA512</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<function><type><name><name>struct</name> <name>AVSHA512</name></name> <modifier>*</modifier></type><name>av_sha512_alloc</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>AVSHA512</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint64_t</name></type> <name><name>K512</name><index>[<expr><literal type="number">80</literal></expr>]</index></name> <init>= <expr><block>{

<expr><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0x428a2f98d728ae22</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0x7137449123ef65cd</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0xb5c0fbcfec4d3b2f</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0xe9b5dba58189dbbc</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0x3956c25bf348b538</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0x59f111f1b605d019</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0x923f82a4af194f9b</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0xab1c5ed5da6d8118</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0xd807aa98a3030242</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0x12835b0145706fbe</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0x243185be4ee4b28c</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0x550c7dc3d5ffb4e2</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0x72be5d74f27b896f</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0x80deb1fe3b1696b1</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0x9bdc06a725c71235</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0xc19bf174cf692694</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0xe49b69c19ef14ad2</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0xefbe4786384f25e3</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0x0fc19dc68b8cd5b5</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0x240ca1cc77ac9c65</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0x2de92c6f592b0275</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0x4a7484aa6ea6e483</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0x5cb0a9dcbd41fbd4</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0x76f988da831153b5</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0x983e5152ee66dfab</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0xa831c66d2db43210</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0xb00327c898fb213f</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0xbf597fc7beef0ee4</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0xc6e00bf33da88fc2</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0xd5a79147930aa725</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0x06ca6351e003826f</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0x142929670a0e6e70</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0x27b70a8546d22ffc</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0x2e1b21385c26c926</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0x4d2c6dfc5ac42aed</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0x53380d139d95b3df</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0x650a73548baf63de</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0x766a0abb3c77b2a8</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0x81c2c92e47edaee6</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0x92722c851482353b</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0xa2bfe8a14cf10364</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0xa81a664bbc423001</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0xc24b8b70d0f89791</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0xc76c51a30654be30</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0xd192e819d6ef5218</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0xd69906245565a910</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0xf40e35855771202a</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0x106aa07032bbd1b8</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0x19a4c116b8d2d0c8</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0x1e376c085141ab53</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0x2748774cdf8eeb99</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0x34b0bcb5e19b48a8</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0x391c0cb3c5c95a63</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0x4ed8aa4ae3418acb</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0x5b9cca4f7763e373</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0x682e6ff3d6b2b8a3</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0x748f82ee5defb2fc</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0x78a5636f43172f60</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0x84c87814a1f0ab72</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0x8cc702081a6439ec</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0x90befffa23631e28</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0xa4506cebde82bde9</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0xbef9a3f7b2c67915</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0xc67178f2e372532b</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0xca273eceea26619c</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0xd186b8c721c0c207</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0xeada7dd6cde0eb1e</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0xf57d4f7fee6ed178</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0x06f067aa72176fba</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0x0a637dc5a2c898a6</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0x113f9804bef90dae</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0x1b710b35131c471b</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0x28db77f523047d84</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0x32caab7b40c72493</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0x3c9ebe0a15c9bebc</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0x431d67c49c100d4c</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0x4cc5d4becb3e42b6</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0x597f299cfc657e2a</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0x5fcb6fab3ad6faec</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0x6c44198c4a475817</literal></expr></argument>)</argument_list></call></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ror</name><parameter_list>(<parameter><type><name>value</name></type></parameter>, <parameter><type><name>bits</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((value) &gt;&gt; (bits)) | ((value) &lt;&lt; (64 - (bits))))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Ch</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &amp; ((y) ^ (z))) ^ (z))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Maj</name><parameter_list>(<parameter><type><name>z</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((((x) | (y)) &amp; (z)) | ((x) &amp; (y)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Sigma0_512</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(ror((x), 28) ^ ror((x), 34) ^ ror((x), 39))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Sigma1_512</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(ror((x), 14) ^ ror((x), 18) ^ ror((x), 41))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sigma0_512</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(ror((x), 1) ^ ror((x), 8) ^ ((x) &gt;&gt; 7))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sigma1_512</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(ror((x), 19) ^ ror((x), 61) ^ ((x) &gt;&gt; 6))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>blk0</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(block[i] = AV_RB64(buffer + 8 * (i)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>blk</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(block[i] = block[i - 16] + sigma0_512(block[i - 15]) + sigma1_512(block[i - 2]) + block[i - 7])</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROUND512</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>,<parameter><type><name>e</name></type></parameter>,<parameter><type><name>f</name></type></parameter>,<parameter><type><name>g</name></type></parameter>,<parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>T1 += (h) + Sigma1_512(e) + Ch((e), (f), (g)) + K512[i]; (d) += T1; (h) = T1 + Sigma0_512(a) + Maj((a), (b), (c)); i++</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROUND512_0_TO_15</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>,<parameter><type><name>e</name></type></parameter>,<parameter><type><name>f</name></type></parameter>,<parameter><type><name>g</name></type></parameter>,<parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>T1 = blk0(i); ROUND512(a,b,c,d,e,f,g,h)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROUND512_16_TO_80</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>,<parameter><type><name>e</name></type></parameter>,<parameter><type><name>f</name></type></parameter>,<parameter><type><name>g</name></type></parameter>,<parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>T1 = blk(i); ROUND512(a,b,c,d,e,f,g,h)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sha512_transform</name><parameter_list>(<parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>buffer</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>, <decl><type ref="prev"/><name>d</name></decl>, <decl><type ref="prev"/><name>e</name></decl>, <decl><type ref="prev"/><name>f</name></decl>, <decl><type ref="prev"/><name>g</name></decl>, <decl><type ref="prev"/><name>h</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name><name>block</name><index>[<expr><literal type="number">80</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>T1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <name><name>state</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>state</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>state</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <name><name>state</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <name><name>state</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>f</name> <operator>=</operator> <name><name>state</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>g</name> <operator>=</operator> <name><name>state</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <name><name>state</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_SMALL</name></expr></cpp:if>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">80</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>T2</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>T1</name> <operator>=</operator> <call><name>blk0</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>T1</name> <operator>=</operator> <call><name>blk</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>T1</name> <operator>+=</operator> <name>h</name> <operator>+</operator> <call><name>Sigma1_512</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>Ch</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>g</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>K512</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>T2</name> <operator>=</operator> <call><name>Sigma0_512</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>Maj</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <name>g</name></expr>;</expr_stmt>

<expr_stmt><expr><name>g</name> <operator>=</operator> <name>f</name></expr>;</expr_stmt>

<expr_stmt><expr><name>f</name> <operator>=</operator> <name>e</name></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <name>d</name> <operator>+</operator> <name>T1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <name>T1</name> <operator>+</operator> <name>T2</name></expr>;</expr_stmt>

</block_content>}</block></for>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R512_0</name></cpp:macro> <cpp:value>ROUND512_0_TO_15(a, b, c, d, e, f, g, h); ROUND512_0_TO_15(h, a, b, c, d, e, f, g); ROUND512_0_TO_15(g, h, a, b, c, d, e, f); ROUND512_0_TO_15(f, g, h, a, b, c, d, e); ROUND512_0_TO_15(e, f, g, h, a, b, c, d); ROUND512_0_TO_15(d, e, f, g, h, a, b, c); ROUND512_0_TO_15(c, d, e, f, g, h, a, b); ROUND512_0_TO_15(b, c, d, e, f, g, h, a)</cpp:value></cpp:define>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>R512_0</name></expr>;</expr_stmt> <expr_stmt><expr><name>R512_0</name></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R512_16</name></cpp:macro> <cpp:value>ROUND512_16_TO_80(a, b, c, d, e, f, g, h); ROUND512_16_TO_80(h, a, b, c, d, e, f, g); ROUND512_16_TO_80(g, h, a, b, c, d, e, f); ROUND512_16_TO_80(f, g, h, a, b, c, d, e); ROUND512_16_TO_80(e, f, g, h, a, b, c, d); ROUND512_16_TO_80(d, e, f, g, h, a, b, c); ROUND512_16_TO_80(c, d, e, f, g, h, a, b); ROUND512_16_TO_80(b, c, d, e, f, g, h, a)</cpp:value></cpp:define>

<expr_stmt><expr><name>R512_16</name></expr>;</expr_stmt> <expr_stmt><expr><name>R512_16</name></expr>;</expr_stmt> <expr_stmt><expr><name>R512_16</name></expr>;</expr_stmt> <expr_stmt><expr><name>R512_16</name></expr>;</expr_stmt>

<expr_stmt><expr><name>R512_16</name></expr>;</expr_stmt> <expr_stmt><expr><name>R512_16</name></expr>;</expr_stmt> <expr_stmt><expr><name>R512_16</name></expr>;</expr_stmt> <expr_stmt><expr><name>R512_16</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>state</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <name>a</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name>b</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+=</operator> <name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+=</operator> <name>d</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>+=</operator> <name>e</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>+=</operator> <name>f</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>+=</operator> <name>g</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>+=</operator> <name>h</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>av_cold</name> <name>int</name></type> <name>av_sha512_init</name><parameter_list>(<parameter><decl><type><name>AVSHA512</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bits</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>digest_len</name></name> <operator>=</operator> <name>bits</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>bits</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">224</literal></expr>:</case> 

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0x8C3D37C819544DA2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0x73E1996689DCD4D6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0x1DFAB7AE32FF9C82</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0x679DD514582F9FCF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0x0F6D2B697BD44DA8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0x77E36F7304C48942</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0x3F9D85A86A1D36C8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0x1112E6AD91D692A1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">256</literal></expr>:</case> 

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0x22312194FC2BF72C</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0x9F555FA3C84C64C2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0x2393B86B6F53B151</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0x963877195940EABD</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0x96283EE2A88EFFE3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0xBE5E1E2553863992</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0x2B0199FC2C85B8AA</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0x0EB72DDC81C52CA2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">384</literal></expr>:</case> 

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0xCBBB9D5DC1059ED8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0x629A292A367CD507</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0x9159015A3070DD17</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0x152FECD8F70E5939</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0x67332667FFC00B31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0x8EB44A8768581511</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0xDB0C2E0D64F98FA7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0x47B5481DBEFA4FA4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">512</literal></expr>:</case> 

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0x6A09E667F3BCC908</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0xBB67AE8584CAA73B</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0x3C6EF372FE94F82B</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0xA54FF53A5F1D36F1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0x510E527FADE682D1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0x9B05688C2B3E6C1F</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0x1F83D9ABFB41BD6B</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0x5BE0CD19137E2179</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_CRYPTO_SIZE_T</name></expr></cpp:if>

<decl_stmt><decl><type><name>void</name></type> <name>av_sha512_update</name><argument_list>(<argument><expr><name>AVSHA512</name><operator>*</operator> <name>ctx</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>uint8_t</name><operator>*</operator> <name>data</name></expr></argument>, <argument><expr><name>unsigned</name> <name>int</name> <name>len</name></expr></argument>)</argument_list>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<name>void</name> <name>av_sha512_update</name><argument_list>(<argument><expr><name>AVSHA512</name><operator>*</operator> <name>ctx</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>uint8_t</name><operator>*</operator> <name>data</name></expr></argument>, <argument><expr><name>size_t</name> <name>len</name></expr></argument>)</argument_list>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><name>j</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>count</name></name> <operator>&amp;</operator> <literal type="number">127</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>count</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_SMALL</name></expr></cpp:if>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">128</literal> <operator>==</operator> <name>j</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>sha512_transform</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>j</name> <operator>+</operator> <name>len</name><operator>)</operator> <operator>&gt;</operator> <literal type="number">127</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><operator>(</operator><name>i</name> <operator>=</operator> <literal type="number">128</literal> <operator>-</operator> <name>j</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sha512_transform</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>+</operator> <literal type="number">127</literal> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">128</literal></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>sha512_transform</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></decl></decl_stmt>

<function><type><name>void</name></type> <name>av_sha512_final</name><parameter_list>(<parameter><decl><type><name>AVSHA512</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>digest</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>finalcount</name> <init>= <expr><call><name>av_be2ne64</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>count</name></name> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_sha512_update</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"\200"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>count</name></name> <operator>&amp;</operator> <literal type="number">127</literal><operator>)</operator> <operator>!=</operator> <literal type="number">112</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_sha512_update</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><call><name>av_sha512_update</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>i</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_sha512_update</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>finalcount</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>digest_len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>AV_WB64</name><argument_list>(<argument><expr><name>digest</name> <operator>+</operator> <name>i</name><operator>*</operator><literal type="number">8</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>digest_len</name></name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><call><name>AV_WB32</name><argument_list>(<argument><expr><name>digest</name> <operator>+</operator> <name>i</name><operator>*</operator><literal type="number">8</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

</unit>
