<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavdevice\xcbgrab.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;xcb/xcb.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_LIBXCB_XFIXES</name></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;xcb/xfixes.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_LIBXCB_SHM</name></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/shm.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;xcb/shm.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_LIBXCB_SHAPE</name></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;xcb/shape.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mathematics.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/parseutils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/time.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavformat/avformat.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavformat/internal.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>XCBGrabContext</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xcb_connection_t</name> <modifier>*</modifier></type><name>conn</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xcb_screen_t</name> <modifier>*</modifier></type><name>screen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xcb_window_t</name></type> <name>window</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_LIBXCB_SHM</name></expr></cpp:if>

<decl_stmt><decl><type><name>AVBufferPool</name> <modifier>*</modifier></type><name>shm_pool</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>int64_t</name></type> <name>time_frame</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVRational</name></type> <name>time_base</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>frame_duration</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <name>y</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>, <name>height</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>frame_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bpp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>draw_mouse</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>follow_mouse</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>show_region</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>region_border</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>centered</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>framerate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>has_shm</name></decl>;</decl_stmt>

}</block></struct></type> <name>XCBGrabContext</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOLLOW_CENTER</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(XCBGrabContext, x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D</name></cpp:macro> <cpp:value>AV_OPT_FLAG_DECODING_PARAM</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>options</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"x"</literal></expr>, <expr><literal type="string">"Initial x coordinate."</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>D</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"y"</literal></expr>, <expr><literal type="string">"Initial y coordinate."</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>D</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"grab_x"</literal></expr>, <expr><literal type="string">"Initial x coordinate."</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>D</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"grab_y"</literal></expr>, <expr><literal type="string">"Initial y coordinate."</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>D</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"video_size"</literal></expr>, <expr><literal type="string">"A string describing frame size, such as 640x480 or hd720."</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_IMAGE_SIZE</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name> <operator>=</operator> <name>NULL</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>D</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"framerate"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>framerate</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name> <operator>=</operator> <literal type="string">"ntsc"</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>D</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"draw_mouse"</literal></expr>, <expr><literal type="string">"Draw the mouse pointer."</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>draw_mouse</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">1</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>D</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"follow_mouse"</literal></expr>, <expr><literal type="string">"Move the grabbing region when the mouse pointer reaches within specified amount of pixels to the edge of region."</literal></expr>,

<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>follow_mouse</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><name>FOLLOW_CENTER</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>D</name></expr>, <expr><literal type="string">"follow_mouse"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"centered"</literal></expr>, <expr><literal type="string">"Keep the mouse pointer at the center of grabbing region when following."</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>D</name></expr>, <expr><literal type="string">"follow_mouse"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"show_region"</literal></expr>, <expr><literal type="string">"Show the grabbing region."</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>show_region</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>D</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"region_border"</literal></expr>, <expr><literal type="string">"Set the region border thickness."</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>region_border</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">3</literal></expr> }</block></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">128</literal></expr>, <expr><name>D</name></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>xcbgrab_class</name> <init>= <expr><block>{

<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"xcbgrab indev"</literal></expr>,

<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,

<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>options</name></expr>,

<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,

<expr><operator>.</operator><name>category</name> <operator>=</operator> <name>AV_CLASS_CATEGORY_DEVICE_VIDEO_INPUT</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>xcbgrab_reposition</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,

<parameter><decl><type><name>xcb_query_pointer_reply_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,

<parameter><decl><type><name>xcb_get_geometry_reply_t</name> <modifier>*</modifier></type><name>geo</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>XCBGrabContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>x</name></name></expr></init></decl>, <decl><type ref="prev"/><name>y</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>y</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>w</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>width</name></name></expr></init></decl>, <decl><type ref="prev"/><name>h</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>height</name></name></expr></init></decl>, <decl><type ref="prev"/><name>f</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>follow_mouse</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>p_x</name></decl>, <decl><type ref="prev"/><name>p_y</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name> <operator>||</operator> <operator>!</operator><name>geo</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_x</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>win_x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_y</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>win_y</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>f</name> <operator>==</operator> <name>FOLLOW_CENTER</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name>p_x</name> <operator>-</operator> <name>w</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <name>p_y</name> <operator>-</operator> <name>h</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>left</name> <init>= <expr><name>x</name> <operator>+</operator> <name>f</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>right</name> <init>= <expr><name>x</name> <operator>+</operator> <name>w</name> <operator>-</operator> <name>f</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>top</name> <init>= <expr><name>y</name> <operator>+</operator> <name>f</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bottom</name> <init>= <expr><name>y</name> <operator>+</operator> <name>h</name> <operator>-</operator> <name>f</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p_x</name> <operator>&gt;</operator> <name>right</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>x</name> <operator>+=</operator> <name>p_x</name> <operator>-</operator> <name>right</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>p_x</name> <operator>&lt;</operator> <name>left</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>x</name> <operator>-=</operator> <name>left</name> <operator>-</operator> <name>p_x</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p_y</name> <operator>&gt;</operator> <name>bottom</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>y</name> <operator>+=</operator> <name>p_y</name> <operator>-</operator> <name>bottom</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>p_y</name> <operator>&lt;</operator> <name>top</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>y</name> <operator>-=</operator> <name>top</name> <operator>-</operator> <name>p_y</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><call><name>FFMAX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>geo</name><operator>-&gt;</operator><name>width</name></name> <operator>-</operator> <name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><call><name>FFMAX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>geo</name><operator>-&gt;</operator><name>height</name></name> <operator>-</operator> <name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>xcbgrab_image_reply_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>opaque</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>xcbgrab_frame</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>XCBGrabContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xcb_get_image_cookie_t</name></type> <name>iq</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xcb_get_image_reply_t</name> <modifier>*</modifier></type><name>img</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xcb_drawable_t</name></type> <name>drawable</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>screen</name><operator>-&gt;</operator><name>root</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xcb_generic_error_t</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>length</name></decl>;</decl_stmt>

<expr_stmt><expr><name>iq</name> <operator>=</operator> <call><name>xcb_get_image</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><name>XCB_IMAGE_FORMAT_Z_PIXMAP</name></expr></argument>, <argument><expr><name>drawable</name></expr></argument>,

<argument><expr><name><name>c</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><operator>~</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>img</name> <operator>=</operator> <call><name>xcb_get_image_reply</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><name>iq</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>e</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Cannot get the image data "</literal>

<literal type="string">"event_error: response_type:%u error_code:%u "</literal>

<literal type="string">"sequence:%u resource_id:%u minor_code:%u major_code:%u.\n"</literal></expr></argument>,

<argument><expr><name><name>e</name><operator>-&gt;</operator><name>response_type</name></name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>error_code</name></name></expr></argument>,

<argument><expr><name><name>e</name><operator>-&gt;</operator><name>sequence</name></name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>resource_id</name></name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>minor_code</name></name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>major_code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EACCES</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>img</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>xcb_get_image_data</name><argument_list>(<argument><expr><name>img</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>length</name> <operator>=</operator> <call><name>xcb_get_image_data_length</name><argument_list>(<argument><expr><name>img</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_init_packet</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <call><name>av_buffer_create</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>xcbgrab_image_reply_free</name></expr></argument>, <argument><expr><name>img</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pkt</name><operator>-&gt;</operator><name>buf</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>img</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>length</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64_t</name></type> <name>wait_frame</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>XCBGrabContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>curtime</name></decl>, <decl><type ref="prev"/><name>delay</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>time_frame</name></name> <operator>+=</operator> <name><name>c</name><operator>-&gt;</operator><name>frame_duration</name></name></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><name>curtime</name> <operator>=</operator> <call><name>av_gettime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>delay</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>time_frame</name></name> <operator>-</operator> <name>curtime</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>delay</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_usleep</name><argument_list>(<argument><expr><name>delay</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>curtime</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_LIBXCB_SHM</name></expr></cpp:if>

<function><type><specifier>static</specifier> <name>int</name></type> <name>check_shm</name><parameter_list>(<parameter><decl><type><name>xcb_connection_t</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>xcb_shm_query_version_cookie_t</name></type> <name>cookie</name> <init>= <expr><call><name>xcb_shm_query_version</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xcb_shm_query_version_reply_t</name> <modifier>*</modifier></type><name>reply</name></decl>;</decl_stmt>

<expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>xcb_shm_query_version_reply</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>cookie</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>reply</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>free_shm_buffer</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>shmdt</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>AVBufferRef</name> <modifier>*</modifier></type><name>allocate_shm_buffer</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>xcb_connection_t</name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><name>opaque</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xcb_shm_seg_t</name></type> <name>segment</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVBufferRef</name> <modifier>*</modifier></type><name>ref</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>id</name></decl>;</decl_stmt>

<expr_stmt><expr><name>id</name> <operator>=</operator> <call><name>shmget</name><argument_list>(<argument><expr><name>IPC_PRIVATE</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>IPC_CREAT</name> <operator>|</operator> <literal type="number">0777</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>segment</name> <operator>=</operator> <call><name>xcb_generate_id</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xcb_shm_attach</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>segment</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>shmat</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>shmctl</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>IPC_RMID</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>intptr_t</name><operator>)</operator><name>data</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <operator>!</operator><name>data</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ref</name> <operator>=</operator> <call><name>av_buffer_create</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>free_shm_buffer</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>ptrdiff_t</name><operator>)</operator><name>segment</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ref</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>shmdt</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>ref</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>xcbgrab_frame_shm</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>XCBGrabContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xcb_shm_get_image_cookie_t</name></type> <name>iq</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xcb_shm_get_image_reply_t</name> <modifier>*</modifier></type><name>img</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xcb_drawable_t</name></type> <name>drawable</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>screen</name><operator>-&gt;</operator><name>root</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xcb_generic_error_t</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVBufferRef</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xcb_shm_seg_t</name></type> <name>segment</name></decl>;</decl_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>av_buffer_pool_get</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>shm_pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Could not get shared memory buffer.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>segment</name> <operator>=</operator> <operator>(</operator><name>xcb_shm_seg_t</name><operator>)</operator><call><name>av_buffer_pool_buffer_get_opaque</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>iq</name> <operator>=</operator> <call><name>xcb_shm_get_image</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><name>drawable</name></expr></argument>,

<argument><expr><name><name>c</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><operator>~</operator><literal type="number">0</literal></expr></argument>,

<argument><expr><name>XCB_IMAGE_FORMAT_Z_PIXMAP</name></expr></argument>, <argument><expr><name>segment</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>img</name> <operator>=</operator> <call><name>xcb_shm_get_image_reply</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><name>iq</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xcb_flush</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>e</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Cannot get the image data "</literal>

<literal type="string">"event_error: response_type:%u error_code:%u "</literal>

<literal type="string">"sequence:%u resource_id:%u minor_code:%u major_code:%u.\n"</literal></expr></argument>,

<argument><expr><name><name>e</name><operator>-&gt;</operator><name>response_type</name></name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>error_code</name></name></expr></argument>,

<argument><expr><name><name>e</name><operator>-&gt;</operator><name>sequence</name></name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>resource_id</name></name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>minor_code</name></name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>major_code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EACCES</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>img</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_init_packet</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>frame_size</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_LIBXCB_XFIXES</name></expr></cpp:if>

<function><type><specifier>static</specifier> <name>int</name></type> <name>check_xfixes</name><parameter_list>(<parameter><decl><type><name>xcb_connection_t</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>xcb_xfixes_query_version_cookie_t</name></type> <name>cookie</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xcb_xfixes_query_version_reply_t</name> <modifier>*</modifier></type><name>reply</name></decl>;</decl_stmt>

<expr_stmt><expr><name>cookie</name> <operator>=</operator> <call><name>xcb_xfixes_query_version</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>XCB_XFIXES_MAJOR_VERSION</name></expr></argument>,

<argument><expr><name>XCB_XFIXES_MINOR_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>xcb_xfixes_query_version_reply</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>cookie</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>reply</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLEND</name><parameter_list>(<parameter><type><name>target</name></type></parameter>, <parameter><type><name>source</name></type></parameter>, <parameter><type><name>alpha</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(target) + ((source) * (255 - (alpha)) + 255 / 2) / 255</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>xcbgrab_draw_mouse</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>,

<parameter><decl><type><name>xcb_query_pointer_reply_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,

<parameter><decl><type><name>xcb_get_geometry_reply_t</name> <modifier>*</modifier></type><name>geo</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>XCBGrabContext</name> <modifier>*</modifier></type><name>gr</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>cursor</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>image</name> <init>= <expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>stride</name> <init>= <expr><name><name>gr</name><operator>-&gt;</operator><name>bpp</name></name> <operator>/</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xcb_xfixes_get_cursor_image_cookie_t</name></type> <name>cc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xcb_xfixes_get_cursor_image_reply_t</name> <modifier>*</modifier></type><name>ci</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cx</name></decl>, <decl><type ref="prev"/><name>cy</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>w</name></decl>, <decl><type ref="prev"/><name>h</name></decl>, <decl><type ref="prev"/><name>c_off</name></decl>, <decl><type ref="prev"/><name>i_off</name></decl>;</decl_stmt>

<expr_stmt><expr><name>cc</name> <operator>=</operator> <call><name>xcb_xfixes_get_cursor_image</name><argument_list>(<argument><expr><name><name>gr</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ci</name> <operator>=</operator> <call><name>xcb_xfixes_get_cursor_image_reply</name><argument_list>(<argument><expr><name><name>gr</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><name>cc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ci</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>cursor</name> <operator>=</operator> <call><name>xcb_xfixes_get_cursor_image_cursor_image</name><argument_list>(<argument><expr><name>ci</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cursor</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>cx</name> <operator>=</operator> <name><name>ci</name><operator>-&gt;</operator><name>x</name></name> <operator>-</operator> <name><name>ci</name><operator>-&gt;</operator><name>xhot</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>cy</name> <operator>=</operator> <name><name>ci</name><operator>-&gt;</operator><name>y</name></name> <operator>-</operator> <name><name>ci</name><operator>-&gt;</operator><name>yhot</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name><name>gr</name><operator>-&gt;</operator><name>x</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>cy</name></expr></argument>, <argument><expr><name><name>gr</name><operator>-&gt;</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>w</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>cx</name> <operator>+</operator> <name><name>ci</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>gr</name><operator>-&gt;</operator><name>x</name></name> <operator>+</operator> <name><name>gr</name><operator>-&gt;</operator><name>width</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <name>x</name></expr>;</expr_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>cy</name> <operator>+</operator> <name><name>ci</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name><name>gr</name><operator>-&gt;</operator><name>y</name></name> <operator>+</operator> <name><name>gr</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <name>y</name></expr>;</expr_stmt>

<expr_stmt><expr><name>c_off</name> <operator>=</operator> <name>x</name> <operator>-</operator> <name>cx</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_off</name> <operator>=</operator> <name>x</name> <operator>-</operator> <name><name>gr</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>cursor</name> <operator>+=</operator> <operator>(</operator><name>y</name> <operator>-</operator> <name>cy</name><operator>)</operator> <operator>*</operator> <name><name>ci</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>image</name> <operator>+=</operator> <operator>(</operator><name>y</name> <operator>-</operator> <name><name>gr</name><operator>-&gt;</operator><name>y</name></name><operator>)</operator> <operator>*</operator> <name><name>gr</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <name>stride</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>cursor</name> <operator>+=</operator> <name>c_off</name></expr>;</expr_stmt>

<expr_stmt><expr><name>image</name> <operator>+=</operator> <name>i_off</name> <operator>*</operator> <name>stride</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr><operator>,</operator> <expr><name>cursor</name><operator>++</operator></expr><operator>,</operator> <expr><name>image</name> <operator>+=</operator> <name>stride</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>g</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>a</name></decl>;</decl_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>*</operator><name>cursor</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>g</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>cursor</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>cursor</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>cursor</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>a</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>a</name> <operator>==</operator> <literal type="number">255</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>image</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>image</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>g</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>image</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>image</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>BLEND</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>image</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>image</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>BLEND</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name><name>image</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>image</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>BLEND</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>image</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>cursor</name> <operator>+=</operator> <name><name>ci</name><operator>-&gt;</operator><name>width</name></name> <operator>-</operator> <name>w</name> <operator>-</operator> <name>c_off</name></expr>;</expr_stmt>

<expr_stmt><expr><name>image</name> <operator>+=</operator> <operator>(</operator><name><name>gr</name><operator>-&gt;</operator><name>width</name></name> <operator>-</operator> <name>w</name> <operator>-</operator> <name>i_off</name><operator>)</operator> <operator>*</operator> <name>stride</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ci</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><specifier>static</specifier> <name>void</name></type> <name>xcbgrab_update_region</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>XCBGrabContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name><name>args</name><index>[]</index></name> <init>= <expr><block>{ <expr><name><name>c</name><operator>-&gt;</operator><name>x</name></name> <operator>-</operator> <name><name>c</name><operator>-&gt;</operator><name>region_border</name></name></expr>,

<expr><name><name>c</name><operator>-&gt;</operator><name>y</name></name> <operator>-</operator> <name><name>c</name><operator>-&gt;</operator><name>region_border</name></name></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>xcb_configure_window</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>,

<argument><expr><name><name>c</name><operator>-&gt;</operator><name>window</name></name></expr></argument>,

<argument><expr><name>XCB_CONFIG_WINDOW_X</name> <operator>|</operator> <name>XCB_CONFIG_WINDOW_Y</name></expr></argument>,

<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>xcbgrab_read_packet</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>XCBGrabContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xcb_query_pointer_cookie_t</name></type> <name>pc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xcb_get_geometry_cookie_t</name></type> <name>gc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xcb_query_pointer_reply_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xcb_get_geometry_reply_t</name> <modifier>*</modifier></type><name>geo</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>pts</name></decl>;</decl_stmt>

<expr_stmt><expr><name>pts</name> <operator>=</operator> <call><name>wait_frame</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>follow_mouse</name></name> <operator>||</operator> <name><name>c</name><operator>-&gt;</operator><name>draw_mouse</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pc</name> <operator>=</operator> <call><name>xcb_query_pointer</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>screen</name><operator>-&gt;</operator><name>root</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>gc</name> <operator>=</operator> <call><name>xcb_get_geometry</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>screen</name><operator>-&gt;</operator><name>root</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>xcb_query_pointer_reply</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><name>pc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>geo</name> <operator>=</operator> <call><name>xcb_get_geometry_reply</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><name>gc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>follow_mouse</name></name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>same_screen</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>xcbgrab_reposition</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>geo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>show_region</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>xcbgrab_update_region</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_LIBXCB_SHM</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>has_shm</name></name> <operator>&amp;&amp;</operator> <call><name>xcbgrab_frame_shm</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Continuing without shared memory.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>has_shm</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>has_shm</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>xcbgrab_frame</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>dts</name></name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name>pts</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>duration</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>frame_duration</name></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_LIBXCB_XFIXES</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>draw_mouse</name></name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>same_screen</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>xcbgrab_draw_mouse</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>geo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>geo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>xcbgrab_read_close</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>XCBGrabContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_LIBXCB_SHM</name></expr></cpp:if>

<expr_stmt><expr><call><name>av_buffer_pool_uninit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>shm_pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>xcb_disconnect</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>xcb_screen_t</name> <modifier>*</modifier></type><name>get_screen</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>xcb_setup_t</name> <modifier>*</modifier></type><name>setup</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>screen_num</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>xcb_screen_iterator_t</name></type> <name>it</name> <init>= <expr><call><name>xcb_setup_roots_iterator</name><argument_list>(<argument><expr><name>setup</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xcb_screen_t</name> <modifier>*</modifier></type><name>screen</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init> <condition><expr><name><name>it</name><operator>.</operator><name>rem</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><call><name>xcb_screen_next</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>it</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>screen_num</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>screen</name> <operator>=</operator> <name><name>it</name><operator>.</operator><name>data</name></name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>screen_num</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>screen</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>pixfmt_from_pixmap_format</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>depth</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pix_fmt</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>bpp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>XCBGrabContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>xcb_setup_t</name> <modifier>*</modifier></type><name>setup</name> <init>= <expr><call><name>xcb_get_setup</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>xcb_format_t</name> <modifier>*</modifier></type><name>fmt</name> <init>= <expr><call><name>xcb_setup_pixmap_formats</name><argument_list>(<argument><expr><name>setup</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>length</name> <init>= <expr><call><name>xcb_setup_pixmap_formats_length</name><argument_list>(<argument><expr><name>setup</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>pix_fmt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>length</name><operator>--</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>fmt</name><operator>-&gt;</operator><name>depth</name></name> <operator>==</operator> <name>depth</name></expr>)</condition> <block>{<block_content>

<switch>switch <condition>(<expr><name>depth</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">32</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>fmt</name><operator>-&gt;</operator><name>bits_per_pixel</name></name> <operator>==</operator> <literal type="number">32</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>pix_fmt</name> <operator>=</operator> <name>AV_PIX_FMT_0RGB</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">24</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>fmt</name><operator>-&gt;</operator><name>bits_per_pixel</name></name> <operator>==</operator> <literal type="number">32</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>pix_fmt</name> <operator>=</operator> <name>AV_PIX_FMT_0RGB32</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>fmt</name><operator>-&gt;</operator><name>bits_per_pixel</name></name> <operator>==</operator> <literal type="number">24</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>pix_fmt</name> <operator>=</operator> <name>AV_PIX_FMT_RGB24</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">16</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>fmt</name><operator>-&gt;</operator><name>bits_per_pixel</name></name> <operator>==</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>pix_fmt</name> <operator>=</operator> <name>AV_PIX_FMT_RGB565</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">15</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>fmt</name><operator>-&gt;</operator><name>bits_per_pixel</name></name> <operator>==</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>pix_fmt</name> <operator>=</operator> <name>AV_PIX_FMT_RGB555</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">8</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>fmt</name><operator>-&gt;</operator><name>bits_per_pixel</name></name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>pix_fmt</name> <operator>=</operator> <name>AV_PIX_FMT_RGB8</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>pix_fmt</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>bpp</name> <operator>=</operator> <name><name>fmt</name><operator>-&gt;</operator><name>bits_per_pixel</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>fmt</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>avpriv_report_missing_feature</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"Mapping this pixmap format"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>create_stream</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>XCBGrabContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><call><name>avformat_new_stream</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xcb_get_geometry_cookie_t</name></type> <name>gc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xcb_get_geometry_reply_t</name> <modifier>*</modifier></type><name>geo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>frame_size_bits</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>st</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_parse_video_rate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>st</name><operator>-&gt;</operator><name>avg_frame_rate</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>framerate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>avpriv_set_pts_info</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>gc</name> <operator>=</operator> <call><name>xcb_get_geometry</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>screen</name><operator>-&gt;</operator><name>root</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>geo</name> <operator>=</operator> <call><name>xcb_get_geometry_reply</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><name>gc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>geo</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_EXTERNAL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>width</name></name> <operator>||</operator> <operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>height</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>geo</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>geo</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>x</name></name> <operator>+</operator> <name><name>c</name><operator>-&gt;</operator><name>width</name></name> <operator>&gt;</operator> <name><name>geo</name><operator>-&gt;</operator><name>width</name></name> <operator>||</operator>

<name><name>c</name><operator>-&gt;</operator><name>y</name></name> <operator>+</operator> <name><name>c</name><operator>-&gt;</operator><name>height</name></name> <operator>&gt;</operator> <name><name>geo</name><operator>-&gt;</operator><name>height</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Capture area %dx%d at position %d.%d "</literal>

<literal type="string">"outside the screen size %dx%d\n"</literal></expr></argument>,

<argument><expr><name><name>c</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>height</name></name></expr></argument>,

<argument><expr><name><name>c</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>y</name></name></expr></argument>,

<argument><expr><name><name>geo</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>geo</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>geo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>time_base</name></name> <operator>=</operator> <operator>(</operator><name>AVRational</name><operator>)</operator><block>{ <expr><name><name>st</name><operator>-&gt;</operator><name>avg_frame_rate</name><operator>.</operator><name>den</name></name></expr>,

<expr><name><name>st</name><operator>-&gt;</operator><name>avg_frame_rate</name><operator>.</operator><name>num</name></name></expr> }</block></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>frame_duration</name></name> <operator>=</operator> <call><name>av_rescale_q</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>, <argument><expr><name>AV_TIME_BASE_Q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>time_frame</name></name> <operator>=</operator> <call><name>av_gettime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>pixfmt_from_pixmap_format</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>geo</name><operator>-&gt;</operator><name>depth</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>bpp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>geo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>frame_size_bits</name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>c</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>height</name></name> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>bpp</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>frame_size_bits</name> <operator>/</operator> <literal type="number">8</literal> <operator>+</operator> <name>AV_INPUT_BUFFER_PADDING_SIZE</name> <operator>&gt;</operator> <name>INT_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Captured area is too large\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>=</operator> <name>frame_size_bits</name> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_LIBXCB_SHM</name></expr></cpp:if>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>shm_pool</name></name> <operator>=</operator> <call><name>av_buffer_pool_init2</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>+</operator> <name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>,

<argument><expr><name><name>c</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><name>allocate_shm_buffer</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>shm_pool</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>=</operator> <name>AV_CODEC_ID_RAWVIDEO</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>=</operator> <call><name>av_rescale</name><argument_list>(<argument><expr><name>frame_size_bits</name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>avg_frame_rate</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>avg_frame_rate</name><operator>.</operator><name>den</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>draw_rectangle</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>XCBGrabContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xcb_gcontext_t</name></type> <name>gc</name> <init>= <expr><call><name>xcb_generate_id</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>mask</name> <init>= <expr><name>XCB_GC_FOREGROUND</name> <operator>|</operator>

<name>XCB_GC_BACKGROUND</name> <operator>|</operator>

<name>XCB_GC_LINE_WIDTH</name> <operator>|</operator>

<name>XCB_GC_LINE_STYLE</name> <operator>|</operator>

<name>XCB_GC_FILL_STYLE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>values</name><index>[]</index></name> <init>= <expr><block>{ <expr><name><name>c</name><operator>-&gt;</operator><name>screen</name><operator>-&gt;</operator><name>black_pixel</name></name></expr>,

<expr><name><name>c</name><operator>-&gt;</operator><name>screen</name><operator>-&gt;</operator><name>white_pixel</name></name></expr>,

<expr><name><name>c</name><operator>-&gt;</operator><name>region_border</name></name></expr>,

<expr><name>XCB_LINE_STYLE_DOUBLE_DASH</name></expr>,

<expr><name>XCB_FILL_STYLE_SOLID</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xcb_rectangle_t</name></type> <name>r</name> <init>= <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,

<expr><name><name>c</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <name><name>c</name><operator>-&gt;</operator><name>region_border</name></name> <operator>*</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">3</literal></expr>,

<expr><name><name>c</name><operator>-&gt;</operator><name>height</name></name> <operator>+</operator> <name><name>c</name><operator>-&gt;</operator><name>region_border</name></name> <operator>*</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">3</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>xcb_create_gc</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><name>gc</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>values</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xcb_poly_rectangle</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><name>gc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>setup_window</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>XCBGrabContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>mask</name> <init>= <expr><name>XCB_CW_OVERRIDE_REDIRECT</name> <operator>|</operator> <name>XCB_CW_EVENT_MASK</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>values</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">1</literal></expr>,

<expr><name>XCB_EVENT_MASK_EXPOSURE</name> <operator>|</operator>

<name>XCB_EVENT_MASK_STRUCTURE_NOTIFY</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>av_unused</name> <name>xcb_rectangle_t</name></type> <name>rect</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name><name>c</name><operator>-&gt;</operator><name>width</name></name></expr>, <expr><name><name>c</name><operator>-&gt;</operator><name>height</name></name></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>window</name></name> <operator>=</operator> <call><name>xcb_generate_id</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xcb_create_window</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><name>XCB_COPY_FROM_PARENT</name></expr></argument>,

<argument><expr><name><name>c</name><operator>-&gt;</operator><name>window</name></name></expr></argument>,

<argument><expr><name><name>c</name><operator>-&gt;</operator><name>screen</name><operator>-&gt;</operator><name>root</name></name></expr></argument>,

<argument><expr><name><name>c</name><operator>-&gt;</operator><name>x</name></name> <operator>-</operator> <name><name>c</name><operator>-&gt;</operator><name>region_border</name></name></expr></argument>,

<argument><expr><name><name>c</name><operator>-&gt;</operator><name>y</name></name> <operator>-</operator> <name><name>c</name><operator>-&gt;</operator><name>region_border</name></name></expr></argument>,

<argument><expr><name><name>c</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <name><name>c</name><operator>-&gt;</operator><name>region_border</name></name> <operator>*</operator> <literal type="number">2</literal></expr></argument>,

<argument><expr><name><name>c</name><operator>-&gt;</operator><name>height</name></name> <operator>+</operator> <name><name>c</name><operator>-&gt;</operator><name>region_border</name></name> <operator>*</operator> <literal type="number">2</literal></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>XCB_WINDOW_CLASS_INPUT_OUTPUT</name></expr></argument>,

<argument><expr><name>XCB_COPY_FROM_PARENT</name></expr></argument>,

<argument><expr><name>mask</name></expr></argument>, <argument><expr><name>values</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_LIBXCB_SHAPE</name></expr></cpp:if>

<expr_stmt><expr><call><name>xcb_shape_rectangles</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><name>XCB_SHAPE_SO_SUBTRACT</name></expr></argument>,

<argument><expr><name>XCB_SHAPE_SK_BOUNDING</name></expr></argument>, <argument><expr><name>XCB_CLIP_ORDERING_UNSORTED</name></expr></argument>,

<argument><expr><name><name>c</name><operator>-&gt;</operator><name>window</name></name></expr></argument>,

<argument><expr><name><name>c</name><operator>-&gt;</operator><name>region_border</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>region_border</name></name></expr></argument>,

<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>rect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>xcb_map_window</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>window</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>draw_rectangle</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>xcbgrab_read_header</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>XCBGrabContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>screen_num</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>xcb_setup_t</name> <modifier>*</modifier></type><name>setup</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>display_name</name> <init>= <expr><call><name>av_strdup</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>url</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>display_name</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>sscanf</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>url</name></name></expr></argument>, <argument><expr><literal type="string">"%[^+]+%d,%d"</literal></expr></argument>, <argument><expr><name>display_name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>display_name</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sscanf</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>url</name></name></expr></argument>, <argument><expr><literal type="string">"+%d,%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>conn</name></name> <operator>=</operator> <call><name>xcb_connect</name><argument_list>(<argument><expr><ternary><condition><expr><name><name>display_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> ?</condition><then> <expr><name>display_name</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>, <argument><expr><operator>&amp;</operator><name>screen_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>display_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>xcb_connection_has_error</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Cannot open display %s, error %d.\n"</literal></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>url</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>url</name></name></expr> </then><else>: <expr><literal type="string">"default"</literal></expr></else></ternary></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>setup</name> <operator>=</operator> <call><name>xcb_get_setup</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>screen</name></name> <operator>=</operator> <call><name>get_screen</name><argument_list>(<argument><expr><name>setup</name></expr></argument>, <argument><expr><name>screen_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>screen</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"The screen %d does not exist.\n"</literal></expr></argument>,

<argument><expr><name>screen_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xcbgrab_read_close</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>create_stream</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>xcbgrab_read_close</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_LIBXCB_SHM</name></expr></cpp:if>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>has_shm</name></name> <operator>=</operator> <call><name>check_shm</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_LIBXCB_XFIXES</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>draw_mouse</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>draw_mouse</name></name> <operator>=</operator> <call><name>check_xfixes</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,

<argument><expr><literal type="string">"XFixes not available, cannot draw the mouse.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>bpp</name></name> <operator>&lt;</operator> <literal type="number">24</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avpriv_report_missing_feature</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"%d bits per pixel screen"</literal></expr></argument>,

<argument><expr><name><name>c</name><operator>-&gt;</operator><name>bpp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>draw_mouse</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>show_region</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>setup_window</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name>AVInputFormat</name></type> <name>ff_xcbgrab_demuxer</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"x11grab"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"X11 screen capture, using XCB"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>XCBGrabContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>read_header</name> <operator>=</operator> <name>xcbgrab_read_header</name></expr>,

<expr><operator>.</operator><name>read_packet</name> <operator>=</operator> <name>xcbgrab_read_packet</name></expr>,

<expr><operator>.</operator><name>read_close</name> <operator>=</operator> <name>xcbgrab_read_close</name></expr>,

<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>AVFMT_NOFILE</name></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>xcbgrab_class</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
