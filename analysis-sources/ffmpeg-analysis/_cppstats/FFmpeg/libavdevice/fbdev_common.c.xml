<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavdevice\fbdev_common.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/ioctl.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fbdev_common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avdevice.h"</cpp:file></cpp:include>

<struct>struct <name>rgb_pixfmt_map_entry</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>bits_per_pixel</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>red_offset</name></decl>, <decl><type ref="prev"/><name>green_offset</name></decl>, <decl><type ref="prev"/><name>blue_offset</name></decl>, <decl><type ref="prev"/><name>alpha_offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>pixfmt</name></decl>;</decl_stmt>

}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>rgb_pixfmt_map_entry</name></name></type> <name><name>rgb_pixfmt_map</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="number">32</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><name>AV_PIX_FMT_RGBA</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">32</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><name>AV_PIX_FMT_BGRA</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">32</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_PIX_FMT_ARGB</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">32</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_PIX_FMT_ABGR</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">24</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_PIX_FMT_RGB24</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">24</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_PIX_FMT_BGR24</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">16</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_PIX_FMT_RGB565</name></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>ff_get_pixfmt_from_fb_varinfo</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fb_var_screeninfo</name></name> <modifier>*</modifier></type><name>varinfo</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>rgb_pixfmt_map</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>rgb_pixfmt_map_entry</name></name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><operator>&amp;</operator><name><name>rgb_pixfmt_map</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>bits_per_pixel</name></name> <operator>==</operator> <name><name>varinfo</name><operator>-&gt;</operator><name>bits_per_pixel</name></name> <operator>&amp;&amp;</operator>

<name><name>entry</name><operator>-&gt;</operator><name>red_offset</name></name> <operator>==</operator> <name><name>varinfo</name><operator>-&gt;</operator><name>red</name><operator>.</operator><name>offset</name></name> <operator>&amp;&amp;</operator>

<name><name>entry</name><operator>-&gt;</operator><name>green_offset</name></name> <operator>==</operator> <name><name>varinfo</name><operator>-&gt;</operator><name>green</name><operator>.</operator><name>offset</name></name> <operator>&amp;&amp;</operator>

<name><name>entry</name><operator>-&gt;</operator><name>blue_offset</name></name> <operator>==</operator> <name><name>varinfo</name><operator>-&gt;</operator><name>blue</name><operator>.</operator><name>offset</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>entry</name><operator>-&gt;</operator><name>pixfmt</name></name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>AV_PIX_FMT_NONE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>ff_fbdev_default_device</name><parameter_list>()</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dev</name> <init>= <expr><call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"FRAMEBUFFER"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dev</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>dev</name> <operator>=</operator> <literal type="string">"/dev/fb0"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>dev</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_fbdev_get_device_list</name><parameter_list>(<parameter><decl><type><name>AVDeviceInfoList</name> <modifier>*</modifier></type><name>device_list</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>fb_var_screeninfo</name></name></type> <name>varinfo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>fb_fix_screeninfo</name></name></type> <name>fixinfo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>device_file</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVDeviceInfo</name> <modifier>*</modifier></type><name>device</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>fd</name></decl>, <decl><type ref="prev"/><name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>default_device</name> <init>= <expr><call><name>ff_fbdev_default_device</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>device_list</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <literal type="number">31</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>device_file</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>device_file</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"/dev/fb%d"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fd</name> <operator>=</operator> <call><name>avpriv_open</name><argument_list>(<argument><expr><name>device_file</name></expr></argument>, <argument><expr><name>O_RDWR</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOENT</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Could not open framebuffer device '%s': %s\n"</literal></expr></argument>,

<argument><expr><name>device_file</name></expr></argument>, <argument><expr><call><name>av_err2str</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>FBIOGET_VSCREENINFO</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>varinfo</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail_device</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>FBIOGET_FSCREENINFO</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fixinfo</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail_device</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>device</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>AVDeviceInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>device</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail_device</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>device</name><operator>-&gt;</operator><name>device_name</name></name> <operator>=</operator> <call><name>av_strdup</name><argument_list>(<argument><expr><name>device_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>device</name><operator>-&gt;</operator><name>device_description</name></name> <operator>=</operator> <call><name>av_strdup</name><argument_list>(<argument><expr><name><name>fixinfo</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>device</name><operator>-&gt;</operator><name>device_name</name></name> <operator>||</operator> <operator>!</operator><name><name>device</name><operator>-&gt;</operator><name>device_description</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail_device</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_dynarray_add_nofree</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>device_list</name><operator>-&gt;</operator><name>devices</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>device_list</name><operator>-&gt;</operator><name>nb_devices</name></name></expr></argument>, <argument><expr><name>device</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail_device</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>default_device</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>device</name><operator>-&gt;</operator><name>device_name</name></name></expr></argument>, <argument><expr><name>default_device</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>device_list</name><operator>-&gt;</operator><name>default_device</name></name> <operator>=</operator> <name><name>device_list</name><operator>-&gt;</operator><name>nb_devices</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>default_device</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

<label><name>fail_device</name>:</label>

<if_stmt><if>if <condition>(<expr><name>device</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>device</name><operator>-&gt;</operator><name>device_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>device</name><operator>-&gt;</operator><name>device_description</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
