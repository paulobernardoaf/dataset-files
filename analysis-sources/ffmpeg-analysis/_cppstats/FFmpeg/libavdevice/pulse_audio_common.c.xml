<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavdevice\pulse_audio_common.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pulse_audio_common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avstring.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mem.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>

<function><type><name>pa_sample_format_t</name> <name>av_cold</name></type> <name>ff_codec_id_to_pulse_format</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVCodecID</name></name></type> <name>codec_id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name>codec_id</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_CODEC_ID_PCM_U8</name></expr>:</case> <return>return <expr><name>PA_SAMPLE_U8</name></expr>;</return>

<case>case <expr><name>AV_CODEC_ID_PCM_ALAW</name></expr>:</case> <return>return <expr><name>PA_SAMPLE_ALAW</name></expr>;</return>

<case>case <expr><name>AV_CODEC_ID_PCM_MULAW</name></expr>:</case> <return>return <expr><name>PA_SAMPLE_ULAW</name></expr>;</return>

<case>case <expr><name>AV_CODEC_ID_PCM_S16LE</name></expr>:</case> <return>return <expr><name>PA_SAMPLE_S16LE</name></expr>;</return>

<case>case <expr><name>AV_CODEC_ID_PCM_S16BE</name></expr>:</case> <return>return <expr><name>PA_SAMPLE_S16BE</name></expr>;</return>

<case>case <expr><name>AV_CODEC_ID_PCM_F32LE</name></expr>:</case> <return>return <expr><name>PA_SAMPLE_FLOAT32LE</name></expr>;</return>

<case>case <expr><name>AV_CODEC_ID_PCM_F32BE</name></expr>:</case> <return>return <expr><name>PA_SAMPLE_FLOAT32BE</name></expr>;</return>

<case>case <expr><name>AV_CODEC_ID_PCM_S32LE</name></expr>:</case> <return>return <expr><name>PA_SAMPLE_S32LE</name></expr>;</return>

<case>case <expr><name>AV_CODEC_ID_PCM_S32BE</name></expr>:</case> <return>return <expr><name>PA_SAMPLE_S32BE</name></expr>;</return>

<case>case <expr><name>AV_CODEC_ID_PCM_S24LE</name></expr>:</case> <return>return <expr><name>PA_SAMPLE_S24LE</name></expr>;</return>

<case>case <expr><name>AV_CODEC_ID_PCM_S24BE</name></expr>:</case> <return>return <expr><name>PA_SAMPLE_S24BE</name></expr>;</return>

<default>default:</default> <return>return <expr><name>PA_SAMPLE_INVALID</name></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<enum>enum <name>PulseAudioContextState</name> <block>{

<decl><name>PULSE_CONTEXT_INITIALIZING</name></decl>,

<decl><name>PULSE_CONTEXT_READY</name></decl>,

<decl><name>PULSE_CONTEXT_FINISHED</name></decl>

}</block>;</enum>

<typedef>typedef <type><struct>struct <name>PulseAudioDeviceList</name> <block>{

<decl_stmt><decl><type><name>AVDeviceInfoList</name> <modifier>*</modifier></type><name>devices</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>error_code</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>output</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>default_device</name></decl>;</decl_stmt>

}</block></struct></type> <name>PulseAudioDeviceList</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pa_state_cb</name><parameter_list>(<parameter><decl><type><name>pa_context</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userdata</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>enum</name> <name>PulseAudioContextState</name></name> <modifier>*</modifier></type><name>context_state</name> <init>= <expr><name>userdata</name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><call><name>pa_context_get_state</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<case>case <expr><name>PA_CONTEXT_FAILED</name></expr>:</case>

<case>case <expr><name>PA_CONTEXT_TERMINATED</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>context_state</name> <operator>=</operator> <name>PULSE_CONTEXT_FINISHED</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>PA_CONTEXT_READY</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>context_state</name> <operator>=</operator> <name>PULSE_CONTEXT_READY</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_pulse_audio_disconnect_context</name><parameter_list>(<parameter><decl><type><name>pa_mainloop</name> <modifier>*</modifier><modifier>*</modifier></type><name>pa_ml</name></decl></parameter>, <parameter><decl><type><name>pa_context</name> <modifier>*</modifier><modifier>*</modifier></type><name>pa_ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>pa_ml</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>pa_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>pa_ctx</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pa_context_set_state_callback</name><argument_list>(<argument><expr><operator>*</operator><name>pa_ctx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pa_context_disconnect</name><argument_list>(<argument><expr><operator>*</operator><name>pa_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pa_context_unref</name><argument_list>(<argument><expr><operator>*</operator><name>pa_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>pa_ml</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>pa_mainloop_free</name><argument_list>(<argument><expr><operator>*</operator><name>pa_ml</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>pa_ml</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pa_ctx</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_pulse_audio_connect_context</name><parameter_list>(<parameter><decl><type><name>pa_mainloop</name> <modifier>*</modifier><modifier>*</modifier></type><name>pa_ml</name></decl></parameter>, <parameter><decl><type><name>pa_context</name> <modifier>*</modifier><modifier>*</modifier></type><name>pa_ctx</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>server</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>description</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pa_mainloop_api</name> <modifier>*</modifier></type><name>pa_mlapi</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>PulseAudioContextState</name></name></type> <name>context_state</name> <init>= <expr><name>PULSE_CONTEXT_INITIALIZING</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>pa_ml</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>pa_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pa_ml</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pa_ctx</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>*</operator><name>pa_ml</name> <operator>=</operator> <call><name>pa_mainloop_new</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>pa_mlapi</name> <operator>=</operator> <call><name>pa_mainloop_get_api</name><argument_list>(<argument><expr><operator>*</operator><name>pa_ml</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_EXTERNAL</name></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>*</operator><name>pa_ctx</name> <operator>=</operator> <call><name>pa_context_new</name><argument_list>(<argument><expr><name>pa_mlapi</name></expr></argument>, <argument><expr><name>description</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>pa_context_set_state_callback</name><argument_list>(<argument><expr><operator>*</operator><name>pa_ctx</name></expr></argument>, <argument><expr><name>pa_state_cb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>context_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>pa_context_connect</name><argument_list>(<argument><expr><operator>*</operator><name>pa_ctx</name></expr></argument>, <argument><expr><name>server</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_EXTERNAL</name></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>context_state</name> <operator>==</operator> <name>PULSE_CONTEXT_INITIALIZING</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>pa_mainloop_iterate</name><argument_list>(<argument><expr><operator>*</operator><name>pa_ml</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><name>context_state</name> <operator>==</operator> <name>PULSE_CONTEXT_FINISHED</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_EXTERNAL</name></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>ff_pulse_audio_disconnect_context</name><argument_list>(<argument><expr><name>pa_ml</name></expr></argument>, <argument><expr><name>pa_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pulse_add_detected_device</name><parameter_list>(<parameter><decl><type><name>PulseAudioDeviceList</name> <modifier>*</modifier></type><name>info</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>description</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVDeviceInfo</name> <modifier>*</modifier></type><name>new_device</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>error_code</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>new_device</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>AVDeviceInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>new_device</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>error_code</name></name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>new_device</name><operator>-&gt;</operator><name>device_description</name></name> <operator>=</operator> <call><name>av_strdup</name><argument_list>(<argument><expr><name>description</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>new_device</name><operator>-&gt;</operator><name>device_name</name></name> <operator>=</operator> <call><name>av_strdup</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>new_device</name><operator>-&gt;</operator><name>device_description</name></name> <operator>||</operator> <operator>!</operator><name><name>new_device</name><operator>-&gt;</operator><name>device_name</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>error_code</name></name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_dynarray_add_nofree</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>devices</name><operator>-&gt;</operator><name>devices</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>devices</name><operator>-&gt;</operator><name>nb_devices</name></name></expr></argument>, <argument><expr><name>new_device</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>error_code</name></name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<return>return;</return>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>new_device</name><operator>-&gt;</operator><name>device_description</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>new_device</name><operator>-&gt;</operator><name>device_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>new_device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pulse_audio_source_device_cb</name><parameter_list>(<parameter><decl><type><name>pa_context</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>pa_source_info</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>eol</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userdata</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>eol</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>pulse_add_detected_device</name><argument_list>(<argument><expr><name>userdata</name></expr></argument>, <argument><expr><name><name>dev</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>dev</name><operator>-&gt;</operator><name>description</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pulse_audio_sink_device_cb</name><parameter_list>(<parameter><decl><type><name>pa_context</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>pa_sink_info</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>eol</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userdata</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>eol</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>pulse_add_detected_device</name><argument_list>(<argument><expr><name>userdata</name></expr></argument>, <argument><expr><name><name>dev</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>dev</name><operator>-&gt;</operator><name>description</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pulse_server_info_cb</name><parameter_list>(<parameter><decl><type><name>pa_context</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>pa_server_info</name> <modifier>*</modifier></type><name>i</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userdata</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>PulseAudioDeviceList</name> <modifier>*</modifier></type><name>info</name> <init>= <expr><name>userdata</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>output</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>default_device</name></name> <operator>=</operator> <call><name>av_strdup</name><argument_list>(<argument><expr><name><name>i</name><operator>-&gt;</operator><name>default_sink_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>default_device</name></name> <operator>=</operator> <call><name>av_strdup</name><argument_list>(<argument><expr><name><name>i</name><operator>-&gt;</operator><name>default_source_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>info</name><operator>-&gt;</operator><name>default_device</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>error_code</name></name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_pulse_audio_get_devices</name><parameter_list>(<parameter><decl><type><name>AVDeviceInfoList</name> <modifier>*</modifier></type><name>devices</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>server</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>output</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>pa_mainloop</name> <modifier>*</modifier></type><name>pa_ml</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pa_operation</name> <modifier>*</modifier></type><name>pa_op</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pa_context</name> <modifier>*</modifier></type><name>pa_ctx</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>pa_operation_state</name></name></type> <name>op_state</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PulseAudioDeviceList</name></type> <name>dev_list</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dev_list</name><operator>.</operator><name>output</name></name> <operator>=</operator> <name>output</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dev_list</name><operator>.</operator><name>devices</name></name> <operator>=</operator> <name>devices</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>devices</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>devices</name><operator>-&gt;</operator><name>nb_devices</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>devices</name><operator>-&gt;</operator><name>devices</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>dev_list</name><operator>.</operator><name>error_code</name></name> <operator>=</operator> <call><name>ff_pulse_audio_connect_context</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pa_ml</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pa_ctx</name></expr></argument>, <argument><expr><name>server</name></expr></argument>, <argument><expr><literal type="string">"Query devices"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>output</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>pa_op</name> <operator>=</operator> <call><name>pa_context_get_sink_info_list</name><argument_list>(<argument><expr><name>pa_ctx</name></expr></argument>, <argument><expr><name>pulse_audio_sink_device_cb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dev_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>pa_op</name> <operator>=</operator> <call><name>pa_context_get_source_info_list</name><argument_list>(<argument><expr><name>pa_ctx</name></expr></argument>, <argument><expr><name>pulse_audio_source_device_cb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dev_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<while>while <condition>(<expr><operator>(</operator><name>op_state</name> <operator>=</operator> <call><name>pa_operation_get_state</name><argument_list>(<argument><expr><name>pa_op</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>PA_OPERATION_RUNNING</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>pa_mainloop_iterate</name><argument_list>(<argument><expr><name>pa_ml</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><name>op_state</name> <operator>!=</operator> <name>PA_OPERATION_DONE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dev_list</name><operator>.</operator><name>error_code</name></name> <operator>=</operator> <name>AVERROR_EXTERNAL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>pa_operation_unref</name><argument_list>(<argument><expr><name>pa_op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dev_list</name><operator>.</operator><name>error_code</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pa_op</name> <operator>=</operator> <call><name>pa_context_get_server_info</name><argument_list>(<argument><expr><name>pa_ctx</name></expr></argument>, <argument><expr><name>pulse_server_info_cb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dev_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>op_state</name> <operator>=</operator> <call><name>pa_operation_get_state</name><argument_list>(<argument><expr><name>pa_op</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>PA_OPERATION_RUNNING</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>pa_mainloop_iterate</name><argument_list>(<argument><expr><name>pa_ml</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><name>op_state</name> <operator>!=</operator> <name>PA_OPERATION_DONE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dev_list</name><operator>.</operator><name>error_code</name></name> <operator>=</operator> <name>AVERROR_EXTERNAL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>pa_operation_unref</name><argument_list>(<argument><expr><name>pa_op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dev_list</name><operator>.</operator><name>error_code</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>devices</name><operator>-&gt;</operator><name>default_device</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>devices</name><operator>-&gt;</operator><name>nb_devices</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>devices</name><operator>-&gt;</operator><name>devices</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>device_name</name></expr></argument>, <argument><expr><name><name>dev_list</name><operator>.</operator><name>default_device</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>devices</name><operator>-&gt;</operator><name>default_device</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name><name>dev_list</name><operator>.</operator><name>default_device</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_pulse_audio_disconnect_context</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pa_ml</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pa_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>dev_list</name><operator>.</operator><name>error_code</name></name></expr>;</return>

</block_content>}</block></function>

</unit>
