<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavdevice\dshow_enumpins.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dshow_capture.h"</cpp:file></cpp:include>

<macro><name>DECLARE_QUERYINTERFACE</name><argument_list>(<argument>libAVEnumPins</argument>,

<argument>{ {&amp;IID_IUnknown</argument>,<argument><literal type="number">0</literal>}</argument>, <argument>{&amp;IID_IEnumPins</argument>,<argument><literal type="number">0</literal>} }</argument>)</argument_list></macro>

<macro><name>DECLARE_ADDREF</name><argument_list>(<argument>libAVEnumPins</argument>)</argument_list></macro>

<macro><name>DECLARE_RELEASE</name><argument_list>(<argument>libAVEnumPins</argument>)</argument_list></macro>

<function><type><name>long</name> <name>WINAPI</name></type>

<name>libAVEnumPins_Next</name><parameter_list>(<parameter><decl><type><name>libAVEnumPins</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>IPin</name> <modifier>*</modifier><modifier>*</modifier></type><name>pins</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>fetched</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>dshowdebug</name><argument_list>(<argument><expr><literal type="string">"libAVEnumPins_Next(%p)\n"</literal></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pins</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>E_POINTER</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>this</name><operator>-&gt;</operator><name>pos</name></name> <operator>&amp;&amp;</operator> <name>n</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>libAVPin_AddRef</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>pin</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pins</name> <operator>=</operator> <operator>(</operator><name>IPin</name> <operator>*</operator><operator>)</operator> <name><name>this</name><operator>-&gt;</operator><name>pin</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>count</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>fetched</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>fetched</name> <operator>=</operator> <name>count</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>count</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>S_FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>S_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>long</name> <name>WINAPI</name></type>

<name>libAVEnumPins_Skip</name><parameter_list>(<parameter><decl><type><name>libAVEnumPins</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>n</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>dshowdebug</name><argument_list>(<argument><expr><literal type="string">"libAVEnumPins_Skip(%p)\n"</literal></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><name>S_FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>S_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>long</name> <name>WINAPI</name></type>

<name>libAVEnumPins_Reset</name><parameter_list>(<parameter><decl><type><name>libAVEnumPins</name> <modifier>*</modifier></type><name>this</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>dshowdebug</name><argument_list>(<argument><expr><literal type="string">"libAVEnumPins_Reset(%p)\n"</literal></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>S_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>long</name> <name>WINAPI</name></type>

<name>libAVEnumPins_Clone</name><parameter_list>(<parameter><decl><type><name>libAVEnumPins</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><name>libAVEnumPins</name> <modifier>*</modifier><modifier>*</modifier></type><name>pins</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>libAVEnumPins</name> <modifier>*</modifier></type><name>new</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>dshowdebug</name><argument_list>(<argument><expr><literal type="string">"libAVEnumPins_Clone(%p)\n"</literal></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pins</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>E_POINTER</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>new</name> <operator>=</operator> <call><name>libAVEnumPins_Create</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>pin</name></name></expr></argument>, <argument><expr><name><name>this</name><operator>-&gt;</operator><name>filter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>new</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>E_OUTOFMEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <name><name>this</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pins</name> <operator>=</operator> <name>new</name></expr>;</expr_stmt>

<return>return <expr><name>S_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>libAVEnumPins_Setup</name><parameter_list>(<parameter><decl><type><name>libAVEnumPins</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><name>libAVPin</name> <modifier>*</modifier></type><name>pin</name></decl></parameter>, <parameter><decl><type><name>libAVFilter</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>IEnumPinsVtbl</name> <modifier>*</modifier></type><name>vtbl</name> <init>= <expr><name><name>this</name><operator>-&gt;</operator><name>vtbl</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>SETVTBL</name><argument_list>(<argument><expr><name>vtbl</name></expr></argument>, <argument><expr><name>libAVEnumPins</name></expr></argument>, <argument><expr><name>QueryInterface</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SETVTBL</name><argument_list>(<argument><expr><name>vtbl</name></expr></argument>, <argument><expr><name>libAVEnumPins</name></expr></argument>, <argument><expr><name>AddRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SETVTBL</name><argument_list>(<argument><expr><name>vtbl</name></expr></argument>, <argument><expr><name>libAVEnumPins</name></expr></argument>, <argument><expr><name>Release</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SETVTBL</name><argument_list>(<argument><expr><name>vtbl</name></expr></argument>, <argument><expr><name>libAVEnumPins</name></expr></argument>, <argument><expr><name>Next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SETVTBL</name><argument_list>(<argument><expr><name>vtbl</name></expr></argument>, <argument><expr><name>libAVEnumPins</name></expr></argument>, <argument><expr><name>Skip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SETVTBL</name><argument_list>(<argument><expr><name>vtbl</name></expr></argument>, <argument><expr><name>libAVEnumPins</name></expr></argument>, <argument><expr><name>Reset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SETVTBL</name><argument_list>(<argument><expr><name>vtbl</name></expr></argument>, <argument><expr><name>libAVEnumPins</name></expr></argument>, <argument><expr><name>Clone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>pin</name></name> <operator>=</operator> <name>pin</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>filter</name></name> <operator>=</operator> <name>filter</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libAVFilter_AddRef</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>filter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>libAVEnumPins_Cleanup</name><parameter_list>(<parameter><decl><type><name>libAVEnumPins</name> <modifier>*</modifier></type><name>this</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>libAVFilter_Release</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>filter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<macro><name>DECLARE_CREATE</name><argument_list>(<argument>libAVEnumPins</argument>, <argument>libAVEnumPins_Setup(this, pin, filter)</argument>,

<argument>libAVPin *pin</argument>, <argument>libAVFilter *filter</argument>)</argument_list></macro>

<macro><name>DECLARE_DESTROY</name><argument_list>(<argument>libAVEnumPins</argument>, <argument>libAVEnumPins_Cleanup</argument>)</argument_list></macro>

</unit>
