<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavdevice\dshow_capture.h"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DSHOWDEBUG</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avdevice.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COBJMACROS</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WIN32_LEAN_AND_MEAN</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NO_DSHOW_STRSAFE</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dshow.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dvdmedia.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/internal.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EC_DEVICE_LOST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EC_DEVICE_LOST</name></cpp:macro> <cpp:value>0x1f</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><name>long</name></type> <name>ff_copy_dshow_media_type</name><parameter_list>(<parameter><decl><type><name>AM_MEDIA_TYPE</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AM_MEDIA_TYPE</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_print_VIDEO_STREAM_CONFIG_CAPS</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>VIDEO_STREAM_CONFIG_CAPS</name> <modifier>*</modifier></type><name>caps</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_print_AUDIO_STREAM_CONFIG_CAPS</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AUDIO_STREAM_CONFIG_CAPS</name> <modifier>*</modifier></type><name>caps</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_print_AM_MEDIA_TYPE</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AM_MEDIA_TYPE</name> <modifier>*</modifier></type><name>type</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_printGUID</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GUID</name> <modifier>*</modifier></type><name>g</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>ff_dshow_context_class_ptr</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dshowdebug</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ff_dlog(&amp;ff_dshow_context_class_ptr, __VA_ARGS__)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>nothing</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>foo</name></decl></parameter>)</parameter_list>

<block>{<block_content>

</block_content>}</block></function>

<struct>struct <name>GUIDoffset</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>GUID</name> <modifier>*</modifier></type><name>iid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>offset</name></decl>;</decl_stmt>

}</block>;</struct>

<enum>enum <name>dshowDeviceType</name> <block>{

<decl><name>VideoDevice</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>AudioDevice</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,

}</block>;</enum>

<enum>enum <name>dshowSourceFilterType</name> <block>{

<decl><name>VideoSourceDevice</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>AudioSourceDevice</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,

}</block>;</enum>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECLARE_QUERYINTERFACE</name><parameter_list>(<parameter><type><name>class</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>long WINAPI class##_QueryInterface(class *this, const GUID *riid, void **ppvObject) { struct GUIDoffset ifaces[] = __VA_ARGS__; int i; dshowdebug(AV_STRINGIFY(class)"_QueryInterface(%p, %p, %p)\n", this, riid, ppvObject); ff_printGUID(riid); if (!ppvObject) return E_POINTER; for (i = 0; i &lt; sizeof(ifaces)/sizeof(ifaces[0]); i++) { if (IsEqualGUID(riid, ifaces[i].iid)) { void *obj = (void *) ((uint8_t *) this + ifaces[i].offset); class##_AddRef(this); dshowdebug("\tfound %d with offset %d\n", i, ifaces[i].offset); *ppvObject = (void *) obj; return S_OK; } } dshowdebug("\tE_NOINTERFACE\n"); *ppvObject = NULL; return E_NOINTERFACE; }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECLARE_ADDREF</name><parameter_list>(<parameter><type><name>class</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>unsigned long WINAPI class##_AddRef(class *this) { dshowdebug(AV_STRINGIFY(class)"_AddRef(%p)\t%ld\n", this, this-&gt;ref+1); return InterlockedIncrement(&amp;this-&gt;ref); }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECLARE_RELEASE</name><parameter_list>(<parameter><type><name>class</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>unsigned long WINAPI class##_Release(class *this) { long ref = InterlockedDecrement(&amp;this-&gt;ref); dshowdebug(AV_STRINGIFY(class)"_Release(%p)\t%ld\n", this, ref); if (!ref) class##_Destroy(this); return ref; }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECLARE_DESTROY</name><parameter_list>(<parameter><type><name>class</name></type></parameter>, <parameter><type><name>func</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>void class##_Destroy(class *this) { dshowdebug(AV_STRINGIFY(class)"_Destroy(%p)\n", this); func(this); if (this) { if (this-&gt;vtbl) CoTaskMemFree(this-&gt;vtbl); CoTaskMemFree(this); } }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECLARE_CREATE</name><parameter_list>(<parameter><type><name>class</name></type></parameter>, <parameter><type><name>setup</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>class *class##_Create(__VA_ARGS__) { class *this = CoTaskMemAlloc(sizeof(class)); void *vtbl = CoTaskMemAlloc(sizeof(*this-&gt;vtbl)); dshowdebug(AV_STRINGIFY(class)"_Create(%p)\n", this); if (!this || !vtbl) goto fail; ZeroMemory(this, sizeof(class)); ZeroMemory(vtbl, sizeof(*this-&gt;vtbl)); this-&gt;ref = 1; this-&gt;vtbl = vtbl; if (!setup) goto fail; dshowdebug("created "AV_STRINGIFY(class)" %p\n", this); return this; fail: class##_Destroy(this); dshowdebug("could not create "AV_STRINGIFY(class)"\n"); return NULL; }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SETVTBL</name><parameter_list>(<parameter><type><name>vtbl</name></type></parameter>, <parameter><type><name>class</name></type></parameter>, <parameter><type><name>fn</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { (vtbl)-&gt;fn = (void *) class##_##fn; } while(0)</cpp:value></cpp:define>

<typedef>typedef <type><name><name>struct</name> <name>libAVPin</name></name></type> <name>libAVPin</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>libAVMemInputPin</name></name></type> <name>libAVMemInputPin</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>libAVEnumPins</name></name></type> <name>libAVEnumPins</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>libAVEnumMediaTypes</name></name></type> <name>libAVEnumMediaTypes</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>libAVFilter</name></name></type> <name>libAVFilter</name>;</typedef>

<struct>struct <name>libAVPin</name> <block>{

<decl_stmt><decl><type><name>IPinVtbl</name> <modifier>*</modifier></type><name>vtbl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>ref</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>libAVFilter</name> <modifier>*</modifier></type><name>filter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IPin</name> <modifier>*</modifier></type><name>connectedto</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AM_MEDIA_TYPE</name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IMemInputPinVtbl</name> <modifier>*</modifier></type><name>imemvtbl</name></decl>;</decl_stmt>

}</block>;</struct>

<function_decl><type><name>long</name> <name>WINAPI</name></type> <name>libAVPin_QueryInterface</name> <parameter_list>(<parameter><decl><type><name>libAVPin</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GUID</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>unsigned</name> <name>long</name> <name>WINAPI</name></type> <name>libAVPin_AddRef</name> <parameter_list>(<parameter><decl><type><name>libAVPin</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>unsigned</name> <name>long</name> <name>WINAPI</name></type> <name>libAVPin_Release</name> <parameter_list>(<parameter><decl><type><name>libAVPin</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>long</name> <name>WINAPI</name></type> <name>libAVPin_Connect</name> <parameter_list>(<parameter><decl><type><name>libAVPin</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>IPin</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AM_MEDIA_TYPE</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>long</name> <name>WINAPI</name></type> <name>libAVPin_ReceiveConnection</name> <parameter_list>(<parameter><decl><type><name>libAVPin</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>IPin</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AM_MEDIA_TYPE</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>long</name> <name>WINAPI</name></type> <name>libAVPin_Disconnect</name> <parameter_list>(<parameter><decl><type><name>libAVPin</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>long</name> <name>WINAPI</name></type> <name>libAVPin_ConnectedTo</name> <parameter_list>(<parameter><decl><type><name>libAVPin</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>IPin</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>long</name> <name>WINAPI</name></type> <name>libAVPin_ConnectionMediaType</name> <parameter_list>(<parameter><decl><type><name>libAVPin</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>AM_MEDIA_TYPE</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>long</name> <name>WINAPI</name></type> <name>libAVPin_QueryPinInfo</name> <parameter_list>(<parameter><decl><type><name>libAVPin</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>PIN_INFO</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>long</name> <name>WINAPI</name></type> <name>libAVPin_QueryDirection</name> <parameter_list>(<parameter><decl><type><name>libAVPin</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>PIN_DIRECTION</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>long</name> <name>WINAPI</name></type> <name>libAVPin_QueryId</name> <parameter_list>(<parameter><decl><type><name>libAVPin</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>wchar_t</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>long</name> <name>WINAPI</name></type> <name>libAVPin_QueryAccept</name> <parameter_list>(<parameter><decl><type><name>libAVPin</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AM_MEDIA_TYPE</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>long</name> <name>WINAPI</name></type> <name>libAVPin_EnumMediaTypes</name> <parameter_list>(<parameter><decl><type><name>libAVPin</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>IEnumMediaTypes</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>long</name> <name>WINAPI</name></type> <name>libAVPin_QueryInternalConnections</name><parameter_list>(<parameter><decl><type><name>libAVPin</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>IPin</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>long</name> <name>WINAPI</name></type> <name>libAVPin_EndOfStream</name> <parameter_list>(<parameter><decl><type><name>libAVPin</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>long</name> <name>WINAPI</name></type> <name>libAVPin_BeginFlush</name> <parameter_list>(<parameter><decl><type><name>libAVPin</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>long</name> <name>WINAPI</name></type> <name>libAVPin_EndFlush</name> <parameter_list>(<parameter><decl><type><name>libAVPin</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>long</name> <name>WINAPI</name></type> <name>libAVPin_NewSegment</name> <parameter_list>(<parameter><decl><type><name>libAVPin</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>REFERENCE_TIME</name></type></decl></parameter>, <parameter><decl><type><name>REFERENCE_TIME</name></type></decl></parameter>, <parameter><decl><type><name>double</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>long</name> <name>WINAPI</name></type> <name>libAVMemInputPin_QueryInterface</name> <parameter_list>(<parameter><decl><type><name>libAVMemInputPin</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GUID</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>unsigned</name> <name>long</name> <name>WINAPI</name></type> <name>libAVMemInputPin_AddRef</name> <parameter_list>(<parameter><decl><type><name>libAVMemInputPin</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>unsigned</name> <name>long</name> <name>WINAPI</name></type> <name>libAVMemInputPin_Release</name> <parameter_list>(<parameter><decl><type><name>libAVMemInputPin</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>long</name> <name>WINAPI</name></type> <name>libAVMemInputPin_GetAllocator</name> <parameter_list>(<parameter><decl><type><name>libAVMemInputPin</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>IMemAllocator</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>long</name> <name>WINAPI</name></type> <name>libAVMemInputPin_NotifyAllocator</name> <parameter_list>(<parameter><decl><type><name>libAVMemInputPin</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>IMemAllocator</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>BOOL</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>long</name> <name>WINAPI</name></type> <name>libAVMemInputPin_GetAllocatorRequirements</name><parameter_list>(<parameter><decl><type><name>libAVMemInputPin</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>ALLOCATOR_PROPERTIES</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>long</name> <name>WINAPI</name></type> <name>libAVMemInputPin_Receive</name> <parameter_list>(<parameter><decl><type><name>libAVMemInputPin</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>IMediaSample</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>long</name> <name>WINAPI</name></type> <name>libAVMemInputPin_ReceiveMultiple</name> <parameter_list>(<parameter><decl><type><name>libAVMemInputPin</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>IMediaSample</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>long</name></type></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>long</name> <name>WINAPI</name></type> <name>libAVMemInputPin_ReceiveCanBlock</name> <parameter_list>(<parameter><decl><type><name>libAVMemInputPin</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>libAVPin_Destroy</name><parameter_list>(<parameter><decl><type><name>libAVPin</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>libAVPin</name> <modifier>*</modifier></type><name>libAVPin_Create</name> <parameter_list>(<parameter><decl><type><name>libAVFilter</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>libAVMemInputPin_Destroy</name><parameter_list>(<parameter><decl><type><name>libAVMemInputPin</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<struct>struct <name>libAVEnumPins</name> <block>{

<decl_stmt><decl><type><name>IEnumPinsVtbl</name> <modifier>*</modifier></type><name>vtbl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>ref</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>libAVPin</name> <modifier>*</modifier></type><name>pin</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>libAVFilter</name> <modifier>*</modifier></type><name>filter</name></decl>;</decl_stmt>

}</block>;</struct>

<function_decl><type><name>long</name> <name>WINAPI</name></type> <name>libAVEnumPins_QueryInterface</name><parameter_list>(<parameter><decl><type><name>libAVEnumPins</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GUID</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>unsigned</name> <name>long</name> <name>WINAPI</name></type> <name>libAVEnumPins_AddRef</name> <parameter_list>(<parameter><decl><type><name>libAVEnumPins</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>unsigned</name> <name>long</name> <name>WINAPI</name></type> <name>libAVEnumPins_Release</name> <parameter_list>(<parameter><decl><type><name>libAVEnumPins</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>long</name> <name>WINAPI</name></type> <name>libAVEnumPins_Next</name> <parameter_list>(<parameter><decl><type><name>libAVEnumPins</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>long</name></decl></parameter>, <parameter><decl><type><name>IPin</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>long</name> <name>WINAPI</name></type> <name>libAVEnumPins_Skip</name> <parameter_list>(<parameter><decl><type><name>libAVEnumPins</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>long</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>long</name> <name>WINAPI</name></type> <name>libAVEnumPins_Reset</name> <parameter_list>(<parameter><decl><type><name>libAVEnumPins</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>long</name> <name>WINAPI</name></type> <name>libAVEnumPins_Clone</name> <parameter_list>(<parameter><decl><type><name>libAVEnumPins</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>libAVEnumPins</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>libAVEnumPins_Destroy</name><parameter_list>(<parameter><decl><type><name>libAVEnumPins</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>libAVEnumPins</name> <modifier>*</modifier></type><name>libAVEnumPins_Create</name> <parameter_list>(<parameter><decl><type><name>libAVPin</name> <modifier>*</modifier></type><name>pin</name></decl></parameter>, <parameter><decl><type><name>libAVFilter</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>)</parameter_list>;</function_decl>

<struct>struct <name>libAVEnumMediaTypes</name> <block>{

<decl_stmt><decl><type><name>IEnumMediaTypesVtbl</name> <modifier>*</modifier></type><name>vtbl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>ref</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AM_MEDIA_TYPE</name></type> <name>type</name></decl>;</decl_stmt>

}</block>;</struct>

<function_decl><type><name>long</name> <name>WINAPI</name></type> <name>libAVEnumMediaTypes_QueryInterface</name><parameter_list>(<parameter><decl><type><name>libAVEnumMediaTypes</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GUID</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>unsigned</name> <name>long</name> <name>WINAPI</name></type> <name>libAVEnumMediaTypes_AddRef</name> <parameter_list>(<parameter><decl><type><name>libAVEnumMediaTypes</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>unsigned</name> <name>long</name> <name>WINAPI</name></type> <name>libAVEnumMediaTypes_Release</name> <parameter_list>(<parameter><decl><type><name>libAVEnumMediaTypes</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>long</name> <name>WINAPI</name></type> <name>libAVEnumMediaTypes_Next</name> <parameter_list>(<parameter><decl><type><name>libAVEnumMediaTypes</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>long</name></decl></parameter>, <parameter><decl><type><name>AM_MEDIA_TYPE</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>long</name> <name>WINAPI</name></type> <name>libAVEnumMediaTypes_Skip</name> <parameter_list>(<parameter><decl><type><name>libAVEnumMediaTypes</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>long</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>long</name> <name>WINAPI</name></type> <name>libAVEnumMediaTypes_Reset</name> <parameter_list>(<parameter><decl><type><name>libAVEnumMediaTypes</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>long</name> <name>WINAPI</name></type> <name>libAVEnumMediaTypes_Clone</name> <parameter_list>(<parameter><decl><type><name>libAVEnumMediaTypes</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>libAVEnumMediaTypes</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>libAVEnumMediaTypes_Destroy</name><parameter_list>(<parameter><decl><type><name>libAVEnumMediaTypes</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>libAVEnumMediaTypes</name> <modifier>*</modifier></type><name>libAVEnumMediaTypes_Create</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AM_MEDIA_TYPE</name> <modifier>*</modifier></type><name>type</name></decl></parameter>)</parameter_list>;</function_decl>

<struct>struct <name>libAVFilter</name> <block>{

<decl_stmt><decl><type><name>IBaseFilterVtbl</name> <modifier>*</modifier></type><name>vtbl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>ref</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>libAVPin</name> <modifier>*</modifier></type><name>pin</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FILTER_INFO</name></type> <name>info</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FILTER_STATE</name></type> <name>state</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IReferenceClock</name> <modifier>*</modifier></type><name>clock</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>dshowDeviceType</name></name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>priv_data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>stream_index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>start_time</name></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>callback</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>priv_data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>time</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>dshowDeviceType</name></name></type> <name>type</name></decl></parameter>)</parameter_list>;</function_decl>

}</block>;</struct>

<function_decl><type><name>long</name> <name>WINAPI</name></type> <name>libAVFilter_QueryInterface</name> <parameter_list>(<parameter><decl><type><name>libAVFilter</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GUID</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>unsigned</name> <name>long</name> <name>WINAPI</name></type> <name>libAVFilter_AddRef</name> <parameter_list>(<parameter><decl><type><name>libAVFilter</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>unsigned</name> <name>long</name> <name>WINAPI</name></type> <name>libAVFilter_Release</name> <parameter_list>(<parameter><decl><type><name>libAVFilter</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>long</name> <name>WINAPI</name></type> <name>libAVFilter_GetClassID</name> <parameter_list>(<parameter><decl><type><name>libAVFilter</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>CLSID</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>long</name> <name>WINAPI</name></type> <name>libAVFilter_Stop</name> <parameter_list>(<parameter><decl><type><name>libAVFilter</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>long</name> <name>WINAPI</name></type> <name>libAVFilter_Pause</name> <parameter_list>(<parameter><decl><type><name>libAVFilter</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>long</name> <name>WINAPI</name></type> <name>libAVFilter_Run</name> <parameter_list>(<parameter><decl><type><name>libAVFilter</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>REFERENCE_TIME</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>long</name> <name>WINAPI</name></type> <name>libAVFilter_GetState</name> <parameter_list>(<parameter><decl><type><name>libAVFilter</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>DWORD</name></type></decl></parameter>, <parameter><decl><type><name>FILTER_STATE</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>long</name> <name>WINAPI</name></type> <name>libAVFilter_SetSyncSource</name> <parameter_list>(<parameter><decl><type><name>libAVFilter</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>IReferenceClock</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>long</name> <name>WINAPI</name></type> <name>libAVFilter_GetSyncSource</name> <parameter_list>(<parameter><decl><type><name>libAVFilter</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>IReferenceClock</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>long</name> <name>WINAPI</name></type> <name>libAVFilter_EnumPins</name> <parameter_list>(<parameter><decl><type><name>libAVFilter</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>IEnumPins</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>long</name> <name>WINAPI</name></type> <name>libAVFilter_FindPin</name> <parameter_list>(<parameter><decl><type><name>libAVFilter</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>IPin</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>long</name> <name>WINAPI</name></type> <name>libAVFilter_QueryFilterInfo</name><parameter_list>(<parameter><decl><type><name>libAVFilter</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>FILTER_INFO</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>long</name> <name>WINAPI</name></type> <name>libAVFilter_JoinFilterGraph</name><parameter_list>(<parameter><decl><type><name>libAVFilter</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>IFilterGraph</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>long</name> <name>WINAPI</name></type> <name>libAVFilter_QueryVendorInfo</name><parameter_list>(<parameter><decl><type><name>libAVFilter</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>wchar_t</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>libAVFilter_Destroy</name><parameter_list>(<parameter><decl><type><name>libAVFilter</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>libAVFilter</name> <modifier>*</modifier></type><name>libAVFilter_Create</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>dshowDeviceType</name></name></type></decl></parameter>)</parameter_list>;</function_decl>

<struct>struct <name>dshow_ctx</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IGraphBuilder</name> <modifier>*</modifier></type><name>graph</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>device_name</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>device_unique_name</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>video_device_number</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>audio_device_number</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>list_options</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>list_devices</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>audio_buffer_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>crossbar_video_input_pin_number</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>crossbar_audio_input_pin_number</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>video_pin_name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>audio_pin_name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>show_video_device_dialog</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>show_audio_device_dialog</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>show_video_crossbar_connection_dialog</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>show_audio_crossbar_connection_dialog</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>show_analog_tv_tuner_dialog</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>show_analog_tv_tuner_audio_dialog</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>audio_filter_load_file</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>audio_filter_save_file</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>video_filter_load_file</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>video_filter_save_file</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IBaseFilter</name> <modifier>*</modifier></type><name><name>device_filter</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IPin</name> <modifier>*</modifier></type><name><name>device_pin</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>libAVFilter</name> <modifier>*</modifier></type><name><name>capture_filter</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>libAVPin</name> <modifier>*</modifier></type><name><name>capture_pin</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HANDLE</name></type> <name>mutex</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HANDLE</name></type> <name><name>event</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>AVPacketList</name> <modifier>*</modifier></type><name>pktl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>eof</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name><name>curbufsize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>video_frame_num</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IMediaControl</name> <modifier>*</modifier></type><name>control</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IMediaEvent</name> <modifier>*</modifier></type><name>media_event</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>pixel_format</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>AVCodecID</name></name></type> <name>video_codec_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>framerate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>requested_width</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>requested_height</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVRational</name></type> <name>requested_framerate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sample_rate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sample_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>channels</name></decl>;</decl_stmt>

}</block>;</struct>

<function_decl><type><name>HRESULT</name></type> <name>dshow_try_setup_crossbar_options</name><parameter_list>(<parameter><decl><type><name>ICaptureGraphBuilder2</name> <modifier>*</modifier></type><name>graph_builder2</name></decl></parameter>,

<parameter><decl><type><name>IBaseFilter</name> <modifier>*</modifier></type><name>device_filter</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>dshowDeviceType</name></name></type> <name>devtype</name></decl></parameter>, <parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>dshow_show_filter_properties</name><parameter_list>(<parameter><decl><type><name>IBaseFilter</name> <modifier>*</modifier></type><name>pFilter</name></decl></parameter>, <parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>;</function_decl>

</unit>
