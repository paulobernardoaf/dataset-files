<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavdevice\decklink_common.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;DeckLinkAPIVersion.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BLACKMAGIC_DECKLINK_API_VERSION</name> <operator>&lt;</operator> <literal type="number">0x0b000000</literal></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IID_IDeckLinkProfileAttributes</name></cpp:macro> <cpp:value>IID_IDeckLinkAttributes</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDeckLinkProfileAttributes</name></cpp:macro> <cpp:value>IDeckLinkAttributes</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/thread.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"decklink_common_c.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_LIBKLVANC</name></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libklvanc/vanc.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECKLINK_BOOL</name></cpp:macro> <cpp:value>BOOL</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECKLINK_BOOL</name></cpp:macro> <cpp:value>bool</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>dup_wchar_to_utf8</name><parameter_list>(<parameter><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>w</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><call><name>WideCharToMultiByte</name><argument_list>(<argument><expr><name>CP_UTF8</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>WideCharToMultiByte</name><argument_list>(<argument><expr><name>CP_UTF8</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>s</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECKLINK_STR</name></cpp:macro> <cpp:value>OLECHAR *</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECKLINK_STRDUP</name></cpp:macro> <cpp:value>dup_wchar_to_utf8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECKLINK_FREE</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>SysFreeString(s)</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>dup_cfstring_to_utf8</name><parameter_list>(<parameter><decl><type><name>CFStringRef</name></type> <name>w</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>s</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>CFStringGetCString</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><name>kCFStringEncodingUTF8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>av_strdup</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECKLINK_STR</name></cpp:macro> <cpp:value>const __CFString *</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECKLINK_STRDUP</name></cpp:macro> <cpp:value>dup_cfstring_to_utf8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECKLINK_FREE</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>CFRelease(s)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECKLINK_STR</name></cpp:macro> <cpp:value>const char *</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECKLINK_STRDUP</name></cpp:macro> <cpp:value>av_strdup</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECKLINK_FREE</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>free((void *) s)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>class</name></type> <name>decklink_output_callback</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>decklink_input_callback</name></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct <name>AVPacketQueue</name> <block>{

<decl_stmt><decl><type><name>AVPacketList</name> <modifier>*</modifier></type><name>first_pkt</name></decl>, <modifier>*</modifier><name>last_pkt</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nb_packets</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>abort_request</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pthread_mutex_t</name></type> <name>mutex</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pthread_cond_t</name></type> <name>cond</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>avctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>max_q_size</name></decl>;</decl_stmt>

}</block></struct></type> <name>AVPacketQueue</name>;</typedef>

<struct>struct <name>decklink_ctx</name> <block>{

<decl_stmt><decl><type><name>IDeckLink</name> <modifier>*</modifier></type><name>dl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IDeckLinkOutput</name> <modifier>*</modifier></type><name>dlo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IDeckLinkInput</name> <modifier>*</modifier></type><name>dli</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IDeckLinkConfiguration</name> <modifier>*</modifier></type><name>cfg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IDeckLinkProfileAttributes</name> <modifier>*</modifier></type><name>attr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>decklink_output_callback</name> <modifier>*</modifier></type><name>output_callback</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BMDTimeValue</name></type> <name>bmd_tb_den</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BMDTimeValue</name></type> <name>bmd_tb_num</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BMDDisplayMode</name></type> <name>bmd_mode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BMDVideoConnection</name></type> <name>video_input</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BMDAudioConnection</name></type> <name>audio_input</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BMDTimecodeFormat</name></type> <name>tc_format</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bmd_width</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bmd_height</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bmd_field_dominance</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>supports_vanc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVPacketQueue</name></type> <name>queue</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>audio</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>video</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>playback_started</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>last_pts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>frameCount</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>dropped</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>audio_st</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>video_st</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>teletext_st</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>cdp_sequence_num</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>list_devices</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>list_formats</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>teletext_lines</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>preroll</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>duplex_mode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DecklinkPtsSource</name></type> <name>audio_pts_source</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DecklinkPtsSource</name></type> <name>video_pts_source</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>draw_bars</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BMDPixelFormat</name></type> <name>raw_format</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>frames_preroll</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>frames_buffer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pthread_mutex_t</name></type> <name>mutex</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pthread_cond_t</name></type> <name>cond</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>frames_buffer_available_spots</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>autodetect</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_LIBKLVANC</name></expr></cpp:if>

<decl_stmt><decl><type><name><name>struct</name> <name>klvanc_context_s</name></name> <modifier>*</modifier></type><name>vanc_ctx</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>int</name></type> <name>channels</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>audio_depth</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>tc_seen</name></decl>;</decl_stmt> 

}</block>;</struct>

<typedef>typedef <type><enum>enum <block>{ <decl><name>DIRECTION_IN</name></decl>, <decl><name>DIRECTION_OUT</name></decl>}</block></enum></type> <name>decklink_direction_t</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BLACKMAGIC_DECKLINK_API_VERSION</name> <operator>&lt;</operator> <literal type="number">0x0a040000</literal></expr></cpp:if>

<typedef>typedef <type><name>unsigned</name> <name>long</name></type> <name>buffercount_type</name>;</typedef>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<typedef>typedef <type><name>unsigned</name> <name>int</name></type> <name>buffercount_type</name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><name>IDeckLinkIterator</name> <modifier>*</modifier></type><name>CreateDeckLinkIteratorInstance</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<typedef>typedef <type><name>uint32_t</name></type> <name>buffercount_type</name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>BMDAudioConnection</name></type> <name><name>decklink_audio_connection_map</name><index>[]</index></name> <init>= <expr><block>{

<expr><operator>(</operator><name>BMDAudioConnection</name><operator>)</operator><literal type="number">0</literal></expr>,

<expr><name>bmdAudioConnectionEmbedded</name></expr>,

<expr><name>bmdAudioConnectionAESEBU</name></expr>,

<expr><name>bmdAudioConnectionAnalog</name></expr>,

<expr><name>bmdAudioConnectionAnalogXLR</name></expr>,

<expr><name>bmdAudioConnectionAnalogRCA</name></expr>,

<expr><name>bmdAudioConnectionMicrophone</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>BMDVideoConnection</name></type> <name><name>decklink_video_connection_map</name><index>[]</index></name> <init>= <expr><block>{

<expr><operator>(</operator><name>BMDVideoConnection</name><operator>)</operator><literal type="number">0</literal></expr>,

<expr><name>bmdVideoConnectionSDI</name></expr>,

<expr><name>bmdVideoConnectionHDMI</name></expr>,

<expr><name>bmdVideoConnectionOpticalSDI</name></expr>,

<expr><name>bmdVideoConnectionComponent</name></expr>,

<expr><name>bmdVideoConnectionComposite</name></expr>,

<expr><name>bmdVideoConnectionSVideo</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>BMDTimecodeFormat</name></type> <name><name>decklink_timecode_format_map</name><index>[]</index></name> <init>= <expr><block>{

<expr><operator>(</operator><name>BMDTimecodeFormat</name><operator>)</operator><literal type="number">0</literal></expr>,

<expr><name>bmdTimecodeRP188VITC1</name></expr>,

<expr><name>bmdTimecodeRP188VITC2</name></expr>,

<expr><name>bmdTimecodeRP188LTC</name></expr>,

<expr><name>bmdTimecodeRP188Any</name></expr>,

<expr><name>bmdTimecodeVITC</name></expr>,

<expr><name>bmdTimecodeVITCField2</name></expr>,

<expr><name>bmdTimecodeSerial</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function_decl><type><name>int</name></type> <name>ff_decklink_set_configs</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>decklink_direction_t</name></type> <name>direction</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_decklink_set_format</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tb_num</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tb_den</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVFieldOrder</name></name></type> <name>field_order</name></decl></parameter>, <parameter><decl><type><name>decklink_direction_t</name></type> <name>direction</name> <init>= <expr><name>DIRECTION_OUT</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_decklink_set_format</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>decklink_direction_t</name></type> <name>direction</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_decklink_list_devices</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>AVDeviceInfoList</name></name> <modifier>*</modifier></type><name>device_list</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>show_inputs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>show_outputs</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_decklink_list_devices_legacy</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>show_inputs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>show_outputs</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_decklink_list_formats</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>decklink_direction_t</name></type> <name>direction</name> <init>= <expr><name>DIRECTION_OUT</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_decklink_cleanup</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_decklink_init_device</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>name</name></decl></parameter>)</parameter_list>;</function_decl>

</unit>
