<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavdevice\timefilter.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mem.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"timefilter.h"</cpp:file></cpp:include>

<struct>struct <name>TimeFilter</name> <block>{

<decl_stmt><decl><type><name>double</name></type> <name>cycle_time</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>feedback2_factor</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>feedback3_factor</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>clock_period</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>double</name></type> <name>qexpneg</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><literal type="number">1</literal> <operator>-</operator> <literal type="number">1</literal> <operator>/</operator> <operator>(</operator><literal type="number">1</literal> <operator>+</operator> <name>x</name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>+</operator> <name>x</name> <operator>/</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>+</operator> <name>x</name> <operator>/</operator> <literal type="number">3</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>TimeFilter</name> <modifier>*</modifier></type><name>ff_timefilter_new</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>time_base</name></decl></parameter>,

<parameter><decl><type><name>double</name></type> <name>period</name></decl></parameter>,

<parameter><decl><type><name>double</name></type> <name>bandwidth</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TimeFilter</name> <modifier>*</modifier></type><name>self</name> <init>= <expr><call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TimeFilter</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>o</name> <init>= <expr><literal type="number">2</literal> <operator>*</operator> <name>M_PI</name> <operator>*</operator> <name>bandwidth</name> <operator>*</operator> <name>period</name> <operator>*</operator> <name>time_base</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>self</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>clock_period</name></name> <operator>=</operator> <name>time_base</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>feedback2_factor</name></name> <operator>=</operator> <call><name>qexpneg</name><argument_list>(<argument><expr><name>M_SQRT2</name> <operator>*</operator> <name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>feedback3_factor</name></name> <operator>=</operator> <call><name>qexpneg</name><argument_list>(<argument><expr><name>o</name> <operator>*</operator> <name>o</name></expr></argument>)</argument_list></call> <operator>/</operator> <name>period</name></expr>;</expr_stmt>

<return>return <expr><name>self</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_timefilter_destroy</name><parameter_list>(<parameter><decl><type><name>TimeFilter</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_timefilter_reset</name><parameter_list>(<parameter><decl><type><name>TimeFilter</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>double</name></type> <name>ff_timefilter_update</name><parameter_list>(<parameter><decl><type><name>TimeFilter</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>system_time</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>period</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>count</name></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>count</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>cycle_time</name></name> <operator>=</operator> <name>system_time</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>loop_error</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>cycle_time</name></name> <operator>+=</operator> <name><name>self</name><operator>-&gt;</operator><name>clock_period</name></name> <operator>*</operator> <name>period</name></expr>;</expr_stmt>

<expr_stmt><expr><name>loop_error</name> <operator>=</operator> <name>system_time</name> <operator>-</operator> <name><name>self</name><operator>-&gt;</operator><name>cycle_time</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>cycle_time</name></name> <operator>+=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>feedback2_factor</name></name></expr></argument>, <argument><expr><literal type="number">1.0</literal> <operator>/</operator> <name><name>self</name><operator>-&gt;</operator><name>count</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <name>loop_error</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>clock_period</name></name> <operator>+=</operator> <name><name>self</name><operator>-&gt;</operator><name>feedback3_factor</name></name> <operator>*</operator> <name>loop_error</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name><name>self</name><operator>-&gt;</operator><name>cycle_time</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>double</name></type> <name>ff_timefilter_eval</name><parameter_list>(<parameter><decl><type><name>TimeFilter</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>delta</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>self</name><operator>-&gt;</operator><name>cycle_time</name></name> <operator>+</operator> <name><name>self</name><operator>-&gt;</operator><name>clock_period</name></name> <operator>*</operator> <name>delta</name></expr>;</return>

</block_content>}</block></function>

</unit>
