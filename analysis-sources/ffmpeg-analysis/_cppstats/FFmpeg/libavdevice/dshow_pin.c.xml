<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavdevice\dshow_pin.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dshow_capture.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>imemoffset</name></cpp:macro> <cpp:value>offsetof(libAVPin, imemvtbl)</cpp:value></cpp:define>

<macro><name>DECLARE_QUERYINTERFACE</name><argument_list>(<argument>libAVPin</argument>,

<argument>{ {&amp;IID_IUnknown</argument>,<argument><literal type="number">0</literal>}</argument>, <argument>{&amp;IID_IPin</argument>,<argument><literal type="number">0</literal>}</argument>, <argument>{&amp;IID_IMemInputPin</argument>,<argument>imemoffset} }</argument>)</argument_list></macro>

<macro><name>DECLARE_ADDREF</name><argument_list>(<argument>libAVPin</argument>)</argument_list></macro>

<macro><name>DECLARE_RELEASE</name><argument_list>(<argument>libAVPin</argument>)</argument_list></macro>

<function><type><name>long</name> <name>WINAPI</name></type>

<name>libAVPin_Connect</name><parameter_list>(<parameter><decl><type><name>libAVPin</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><name>IPin</name> <modifier>*</modifier></type><name>pin</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AM_MEDIA_TYPE</name> <modifier>*</modifier></type><name>type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>dshowdebug</name><argument_list>(<argument><expr><literal type="string">"libAVPin_Connect(%p, %p, %p)\n"</literal></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><name>pin</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>S_FALSE</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>long</name> <name>WINAPI</name></type>

<name>libAVPin_ReceiveConnection</name><parameter_list>(<parameter><decl><type><name>libAVPin</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><name>IPin</name> <modifier>*</modifier></type><name>pin</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>AM_MEDIA_TYPE</name> <modifier>*</modifier></type><name>type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>enum</name> <name>dshowDeviceType</name></name></type> <name>devtype</name> <init>= <expr><name><name>this</name><operator>-&gt;</operator><name>filter</name><operator>-&gt;</operator><name>type</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>dshowdebug</name><argument_list>(<argument><expr><literal type="string">"libAVPin_ReceiveConnection(%p)\n"</literal></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pin</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>E_POINTER</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>this</name><operator>-&gt;</operator><name>connectedto</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VFW_E_ALREADY_CONNECTED</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ff_print_AM_MEDIA_TYPE</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>devtype</name> <operator>==</operator> <name>VideoDevice</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsEqualGUID</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>type</name><operator>-&gt;</operator><name>majortype</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>MEDIATYPE_Video</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VFW_E_TYPE_NOT_ACCEPTED</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsEqualGUID</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>type</name><operator>-&gt;</operator><name>majortype</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>MEDIATYPE_Audio</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VFW_E_TYPE_NOT_ACCEPTED</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>IPin_AddRef</name><argument_list>(<argument><expr><name>pin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>connectedto</name></name> <operator>=</operator> <name>pin</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_copy_dshow_media_type</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>this</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>S_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>long</name> <name>WINAPI</name></type>

<name>libAVPin_Disconnect</name><parameter_list>(<parameter><decl><type><name>libAVPin</name> <modifier>*</modifier></type><name>this</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>dshowdebug</name><argument_list>(<argument><expr><literal type="string">"libAVPin_Disconnect(%p)\n"</literal></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>this</name><operator>-&gt;</operator><name>filter</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>State_Stopped</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VFW_E_NOT_STOPPED</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>this</name><operator>-&gt;</operator><name>connectedto</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>S_FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>IPin_Release</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>connectedto</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>connectedto</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>S_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>long</name> <name>WINAPI</name></type>

<name>libAVPin_ConnectedTo</name><parameter_list>(<parameter><decl><type><name>libAVPin</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><name>IPin</name> <modifier>*</modifier><modifier>*</modifier></type><name>pin</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>dshowdebug</name><argument_list>(<argument><expr><literal type="string">"libAVPin_ConnectedTo(%p)\n"</literal></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pin</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>E_POINTER</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>this</name><operator>-&gt;</operator><name>connectedto</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VFW_E_NOT_CONNECTED</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>IPin_AddRef</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>connectedto</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pin</name> <operator>=</operator> <name><name>this</name><operator>-&gt;</operator><name>connectedto</name></name></expr>;</expr_stmt>

<return>return <expr><name>S_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>long</name> <name>WINAPI</name></type>

<name>libAVPin_ConnectionMediaType</name><parameter_list>(<parameter><decl><type><name>libAVPin</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><name>AM_MEDIA_TYPE</name> <modifier>*</modifier></type><name>type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>dshowdebug</name><argument_list>(<argument><expr><literal type="string">"libAVPin_ConnectionMediaType(%p)\n"</literal></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>type</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>E_POINTER</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>this</name><operator>-&gt;</operator><name>connectedto</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VFW_E_NOT_CONNECTED</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>ff_copy_dshow_media_type</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>this</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>long</name> <name>WINAPI</name></type>

<name>libAVPin_QueryPinInfo</name><parameter_list>(<parameter><decl><type><name>libAVPin</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><name>PIN_INFO</name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>dshowdebug</name><argument_list>(<argument><expr><literal type="string">"libAVPin_QueryPinInfo(%p)\n"</literal></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>info</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>E_POINTER</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>this</name><operator>-&gt;</operator><name>filter</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>libAVFilter_AddRef</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>filter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>pFilter</name></name> <operator>=</operator> <operator>(</operator><name>IBaseFilter</name> <operator>*</operator><operator>)</operator> <name><name>this</name><operator>-&gt;</operator><name>filter</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>dir</name></name> <operator>=</operator> <name>PINDIR_INPUT</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wcscpy</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>achName</name></name></expr></argument>, <argument><expr><literal type="string">L"Capture"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>S_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>long</name> <name>WINAPI</name></type>

<name>libAVPin_QueryDirection</name><parameter_list>(<parameter><decl><type><name>libAVPin</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><name>PIN_DIRECTION</name> <modifier>*</modifier></type><name>dir</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>dshowdebug</name><argument_list>(<argument><expr><literal type="string">"libAVPin_QueryDirection(%p)\n"</literal></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dir</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>E_POINTER</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>dir</name> <operator>=</operator> <name>PINDIR_INPUT</name></expr>;</expr_stmt>

<return>return <expr><name>S_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>long</name> <name>WINAPI</name></type>

<name>libAVPin_QueryId</name><parameter_list>(<parameter><decl><type><name>libAVPin</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><name>wchar_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>dshowdebug</name><argument_list>(<argument><expr><literal type="string">"libAVPin_QueryId(%p)\n"</literal></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>id</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>E_POINTER</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>id</name> <operator>=</operator> <call><name>wcsdup</name><argument_list>(<argument><expr><literal type="string">L"libAV Pin"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>S_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>long</name> <name>WINAPI</name></type>

<name>libAVPin_QueryAccept</name><parameter_list>(<parameter><decl><type><name>libAVPin</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AM_MEDIA_TYPE</name> <modifier>*</modifier></type><name>type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>dshowdebug</name><argument_list>(<argument><expr><literal type="string">"libAVPin_QueryAccept(%p)\n"</literal></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>S_FALSE</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>long</name> <name>WINAPI</name></type>

<name>libAVPin_EnumMediaTypes</name><parameter_list>(<parameter><decl><type><name>libAVPin</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><name>IEnumMediaTypes</name> <modifier>*</modifier><modifier>*</modifier></type><name>enumtypes</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>AM_MEDIA_TYPE</name> <modifier>*</modifier></type><name>type</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>libAVEnumMediaTypes</name> <modifier>*</modifier></type><name>new</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>dshowdebug</name><argument_list>(<argument><expr><literal type="string">"libAVPin_EnumMediaTypes(%p)\n"</literal></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>enumtypes</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>E_POINTER</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>new</name> <operator>=</operator> <call><name>libAVEnumMediaTypes_Create</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>new</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>E_OUTOFMEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>enumtypes</name> <operator>=</operator> <operator>(</operator><name>IEnumMediaTypes</name> <operator>*</operator><operator>)</operator> <name>new</name></expr>;</expr_stmt>

<return>return <expr><name>S_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>long</name> <name>WINAPI</name></type>

<name>libAVPin_QueryInternalConnections</name><parameter_list>(<parameter><decl><type><name>libAVPin</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><name>IPin</name> <modifier>*</modifier><modifier>*</modifier></type><name>pin</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>npin</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>dshowdebug</name><argument_list>(<argument><expr><literal type="string">"libAVPin_QueryInternalConnections(%p)\n"</literal></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>E_NOTIMPL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>long</name> <name>WINAPI</name></type>

<name>libAVPin_EndOfStream</name><parameter_list>(<parameter><decl><type><name>libAVPin</name> <modifier>*</modifier></type><name>this</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>dshowdebug</name><argument_list>(<argument><expr><literal type="string">"libAVPin_EndOfStream(%p)\n"</literal></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>S_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>long</name> <name>WINAPI</name></type>

<name>libAVPin_BeginFlush</name><parameter_list>(<parameter><decl><type><name>libAVPin</name> <modifier>*</modifier></type><name>this</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>dshowdebug</name><argument_list>(<argument><expr><literal type="string">"libAVPin_BeginFlush(%p)\n"</literal></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>S_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>long</name> <name>WINAPI</name></type>

<name>libAVPin_EndFlush</name><parameter_list>(<parameter><decl><type><name>libAVPin</name> <modifier>*</modifier></type><name>this</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>dshowdebug</name><argument_list>(<argument><expr><literal type="string">"libAVPin_EndFlush(%p)\n"</literal></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>S_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>long</name> <name>WINAPI</name></type>

<name>libAVPin_NewSegment</name><parameter_list>(<parameter><decl><type><name>libAVPin</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><name>REFERENCE_TIME</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>REFERENCE_TIME</name></type> <name>stop</name></decl></parameter>,

<parameter><decl><type><name>double</name></type> <name>rate</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>dshowdebug</name><argument_list>(<argument><expr><literal type="string">"libAVPin_NewSegment(%p)\n"</literal></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>S_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>libAVPin_Setup</name><parameter_list>(<parameter><decl><type><name>libAVPin</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><name>libAVFilter</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>IPinVtbl</name> <modifier>*</modifier></type><name>vtbl</name> <init>= <expr><name><name>this</name><operator>-&gt;</operator><name>vtbl</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IMemInputPinVtbl</name> <modifier>*</modifier></type><name>imemvtbl</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>filter</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>imemvtbl</name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>IMemInputPinVtbl</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>imemvtbl</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>SETVTBL</name><argument_list>(<argument><expr><name>imemvtbl</name></expr></argument>, <argument><expr><name>libAVMemInputPin</name></expr></argument>, <argument><expr><name>QueryInterface</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SETVTBL</name><argument_list>(<argument><expr><name>imemvtbl</name></expr></argument>, <argument><expr><name>libAVMemInputPin</name></expr></argument>, <argument><expr><name>AddRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SETVTBL</name><argument_list>(<argument><expr><name>imemvtbl</name></expr></argument>, <argument><expr><name>libAVMemInputPin</name></expr></argument>, <argument><expr><name>Release</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SETVTBL</name><argument_list>(<argument><expr><name>imemvtbl</name></expr></argument>, <argument><expr><name>libAVMemInputPin</name></expr></argument>, <argument><expr><name>GetAllocator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SETVTBL</name><argument_list>(<argument><expr><name>imemvtbl</name></expr></argument>, <argument><expr><name>libAVMemInputPin</name></expr></argument>, <argument><expr><name>NotifyAllocator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SETVTBL</name><argument_list>(<argument><expr><name>imemvtbl</name></expr></argument>, <argument><expr><name>libAVMemInputPin</name></expr></argument>, <argument><expr><name>GetAllocatorRequirements</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SETVTBL</name><argument_list>(<argument><expr><name>imemvtbl</name></expr></argument>, <argument><expr><name>libAVMemInputPin</name></expr></argument>, <argument><expr><name>Receive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SETVTBL</name><argument_list>(<argument><expr><name>imemvtbl</name></expr></argument>, <argument><expr><name>libAVMemInputPin</name></expr></argument>, <argument><expr><name>ReceiveMultiple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SETVTBL</name><argument_list>(<argument><expr><name>imemvtbl</name></expr></argument>, <argument><expr><name>libAVMemInputPin</name></expr></argument>, <argument><expr><name>ReceiveCanBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>imemvtbl</name></name> <operator>=</operator> <name>imemvtbl</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SETVTBL</name><argument_list>(<argument><expr><name>vtbl</name></expr></argument>, <argument><expr><name>libAVPin</name></expr></argument>, <argument><expr><name>QueryInterface</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SETVTBL</name><argument_list>(<argument><expr><name>vtbl</name></expr></argument>, <argument><expr><name>libAVPin</name></expr></argument>, <argument><expr><name>AddRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SETVTBL</name><argument_list>(<argument><expr><name>vtbl</name></expr></argument>, <argument><expr><name>libAVPin</name></expr></argument>, <argument><expr><name>Release</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SETVTBL</name><argument_list>(<argument><expr><name>vtbl</name></expr></argument>, <argument><expr><name>libAVPin</name></expr></argument>, <argument><expr><name>Connect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SETVTBL</name><argument_list>(<argument><expr><name>vtbl</name></expr></argument>, <argument><expr><name>libAVPin</name></expr></argument>, <argument><expr><name>ReceiveConnection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SETVTBL</name><argument_list>(<argument><expr><name>vtbl</name></expr></argument>, <argument><expr><name>libAVPin</name></expr></argument>, <argument><expr><name>Disconnect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SETVTBL</name><argument_list>(<argument><expr><name>vtbl</name></expr></argument>, <argument><expr><name>libAVPin</name></expr></argument>, <argument><expr><name>ConnectedTo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SETVTBL</name><argument_list>(<argument><expr><name>vtbl</name></expr></argument>, <argument><expr><name>libAVPin</name></expr></argument>, <argument><expr><name>ConnectionMediaType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SETVTBL</name><argument_list>(<argument><expr><name>vtbl</name></expr></argument>, <argument><expr><name>libAVPin</name></expr></argument>, <argument><expr><name>QueryPinInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SETVTBL</name><argument_list>(<argument><expr><name>vtbl</name></expr></argument>, <argument><expr><name>libAVPin</name></expr></argument>, <argument><expr><name>QueryDirection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SETVTBL</name><argument_list>(<argument><expr><name>vtbl</name></expr></argument>, <argument><expr><name>libAVPin</name></expr></argument>, <argument><expr><name>QueryId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SETVTBL</name><argument_list>(<argument><expr><name>vtbl</name></expr></argument>, <argument><expr><name>libAVPin</name></expr></argument>, <argument><expr><name>QueryAccept</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SETVTBL</name><argument_list>(<argument><expr><name>vtbl</name></expr></argument>, <argument><expr><name>libAVPin</name></expr></argument>, <argument><expr><name>EnumMediaTypes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SETVTBL</name><argument_list>(<argument><expr><name>vtbl</name></expr></argument>, <argument><expr><name>libAVPin</name></expr></argument>, <argument><expr><name>QueryInternalConnections</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SETVTBL</name><argument_list>(<argument><expr><name>vtbl</name></expr></argument>, <argument><expr><name>libAVPin</name></expr></argument>, <argument><expr><name>EndOfStream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SETVTBL</name><argument_list>(<argument><expr><name>vtbl</name></expr></argument>, <argument><expr><name>libAVPin</name></expr></argument>, <argument><expr><name>BeginFlush</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SETVTBL</name><argument_list>(<argument><expr><name>vtbl</name></expr></argument>, <argument><expr><name>libAVPin</name></expr></argument>, <argument><expr><name>EndFlush</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SETVTBL</name><argument_list>(<argument><expr><name>vtbl</name></expr></argument>, <argument><expr><name>libAVPin</name></expr></argument>, <argument><expr><name>NewSegment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>filter</name></name> <operator>=</operator> <name>filter</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>libAVPin_Free</name><parameter_list>(<parameter><decl><type><name>libAVPin</name> <modifier>*</modifier></type><name>this</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>this</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>this</name><operator>-&gt;</operator><name>imemvtbl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>this</name><operator>-&gt;</operator><name>type</name><operator>.</operator><name>pbFormat</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>CoTaskMemFree</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>type</name><operator>.</operator><name>pbFormat</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>type</name><operator>.</operator><name>pbFormat</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<macro><name>DECLARE_CREATE</name><argument_list>(<argument>libAVPin</argument>, <argument>libAVPin_Setup(this, filter)</argument>, <argument>libAVFilter *filter</argument>)</argument_list></macro>

<macro><name>DECLARE_DESTROY</name><argument_list>(<argument>libAVPin</argument>, <argument>libAVPin_Free</argument>)</argument_list></macro>

<function><type><name>long</name> <name>WINAPI</name></type>

<name>libAVMemInputPin_QueryInterface</name><parameter_list>(<parameter><decl><type><name>libAVMemInputPin</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GUID</name> <modifier>*</modifier></type><name>riid</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppvObject</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>libAVPin</name> <modifier>*</modifier></type><name>pin</name> <init>= <expr><operator>(</operator><name>libAVPin</name> <operator>*</operator><operator>)</operator> <operator>(</operator><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator> <name>this</name> <operator>-</operator> <name>imemoffset</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>dshowdebug</name><argument_list>(<argument><expr><literal type="string">"libAVMemInputPin_QueryInterface(%p)\n"</literal></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>libAVPin_QueryInterface</name><argument_list>(<argument><expr><name>pin</name></expr></argument>, <argument><expr><name>riid</name></expr></argument>, <argument><expr><name>ppvObject</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>unsigned</name> <name>long</name> <name>WINAPI</name></type>

<name>libAVMemInputPin_AddRef</name><parameter_list>(<parameter><decl><type><name>libAVMemInputPin</name> <modifier>*</modifier></type><name>this</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>libAVPin</name> <modifier>*</modifier></type><name>pin</name> <init>= <expr><operator>(</operator><name>libAVPin</name> <operator>*</operator><operator>)</operator> <operator>(</operator><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator> <name>this</name> <operator>-</operator> <name>imemoffset</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>dshowdebug</name><argument_list>(<argument><expr><literal type="string">"libAVMemInputPin_AddRef(%p)\n"</literal></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>libAVPin_AddRef</name><argument_list>(<argument><expr><name>pin</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>unsigned</name> <name>long</name> <name>WINAPI</name></type>

<name>libAVMemInputPin_Release</name><parameter_list>(<parameter><decl><type><name>libAVMemInputPin</name> <modifier>*</modifier></type><name>this</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>libAVPin</name> <modifier>*</modifier></type><name>pin</name> <init>= <expr><operator>(</operator><name>libAVPin</name> <operator>*</operator><operator>)</operator> <operator>(</operator><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator> <name>this</name> <operator>-</operator> <name>imemoffset</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>dshowdebug</name><argument_list>(<argument><expr><literal type="string">"libAVMemInputPin_Release(%p)\n"</literal></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>libAVPin_Release</name><argument_list>(<argument><expr><name>pin</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>long</name> <name>WINAPI</name></type>

<name>libAVMemInputPin_GetAllocator</name><parameter_list>(<parameter><decl><type><name>libAVMemInputPin</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><name>IMemAllocator</name> <modifier>*</modifier><modifier>*</modifier></type><name>alloc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>dshowdebug</name><argument_list>(<argument><expr><literal type="string">"libAVMemInputPin_GetAllocator(%p)\n"</literal></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VFW_E_NO_ALLOCATOR</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>long</name> <name>WINAPI</name></type>

<name>libAVMemInputPin_NotifyAllocator</name><parameter_list>(<parameter><decl><type><name>libAVMemInputPin</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><name>IMemAllocator</name> <modifier>*</modifier></type><name>alloc</name></decl></parameter>,

<parameter><decl><type><name>BOOL</name></type> <name>rdwr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>dshowdebug</name><argument_list>(<argument><expr><literal type="string">"libAVMemInputPin_NotifyAllocator(%p)\n"</literal></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>S_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>long</name> <name>WINAPI</name></type>

<name>libAVMemInputPin_GetAllocatorRequirements</name><parameter_list>(<parameter><decl><type><name>libAVMemInputPin</name> <modifier>*</modifier></type><name>this</name></decl></parameter>,

<parameter><decl><type><name>ALLOCATOR_PROPERTIES</name> <modifier>*</modifier></type><name>props</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>dshowdebug</name><argument_list>(<argument><expr><literal type="string">"libAVMemInputPin_GetAllocatorRequirements(%p)\n"</literal></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>E_NOTIMPL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>long</name> <name>WINAPI</name></type>

<name>libAVMemInputPin_Receive</name><parameter_list>(<parameter><decl><type><name>libAVMemInputPin</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><name>IMediaSample</name> <modifier>*</modifier></type><name>sample</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>libAVPin</name> <modifier>*</modifier></type><name>pin</name> <init>= <expr><operator>(</operator><name>libAVPin</name> <operator>*</operator><operator>)</operator> <operator>(</operator><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator> <name>this</name> <operator>-</operator> <name>imemoffset</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>dshowDeviceType</name></name></type> <name>devtype</name> <init>= <expr><name><name>pin</name><operator>-&gt;</operator><name>filter</name><operator>-&gt;</operator><name>type</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>priv_data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>buf_size</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>curtime</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>orig_curtime</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>graphtime</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>devtypename</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>devtype</name> <operator>==</operator> <name>VideoDevice</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"video"</literal></expr> </then><else>: <expr><literal type="string">"audio"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IReferenceClock</name> <modifier>*</modifier></type><name>clock</name> <init>= <expr><name><name>pin</name><operator>-&gt;</operator><name>filter</name><operator>-&gt;</operator><name>clock</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>dummy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>dshow_ctx</name></name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>dshowdebug</name><argument_list>(<argument><expr><literal type="string">"libAVMemInputPin_Receive(%p)\n"</literal></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sample</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>E_POINTER</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>IMediaSample_GetTime</name><argument_list>(<argument><expr><name>sample</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>orig_curtime</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dummy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>orig_curtime</name> <operator>+=</operator> <name><name>pin</name><operator>-&gt;</operator><name>filter</name><operator>-&gt;</operator><name>start_time</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IReferenceClock_GetTime</name><argument_list>(<argument><expr><name>clock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>graphtime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>devtype</name> <operator>==</operator> <name>VideoDevice</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>IReferenceClock_GetTime</name><argument_list>(<argument><expr><name>clock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>curtime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>IMediaSample_GetTime</name><argument_list>(<argument><expr><name>sample</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>curtime</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dummy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>curtime</name> <operator>&gt;</operator> <literal type="number">400000000000000000LL</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>,

<argument><expr><literal type="string">"dshow dropping initial (or ending) audio frame with odd PTS too high %"</literal><name>PRId64</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>curtime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>S_OK</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>curtime</name> <operator>+=</operator> <name><name>pin</name><operator>-&gt;</operator><name>filter</name><operator>-&gt;</operator><name>start_time</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>buf_size</name> <operator>=</operator> <call><name>IMediaSample_GetActualDataLength</name><argument_list>(<argument><expr><name>sample</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IMediaSample_GetPointer</name><argument_list>(<argument><expr><name>sample</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>priv_data</name> <operator>=</operator> <name><name>pin</name><operator>-&gt;</operator><name>filter</name><operator>-&gt;</operator><name>priv_data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name>priv_data</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ctx</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>index</name> <operator>=</operator> <name><name>pin</name><operator>-&gt;</operator><name>filter</name><operator>-&gt;</operator><name>stream_index</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"dshow passing through packet of type %s size %8d "</literal>

<literal type="string">"timestamp %"</literal><name>PRId64</name><literal type="string">" orig timestamp %"</literal><name>PRId64</name><literal type="string">" graph timestamp %"</literal><name>PRId64</name><literal type="string">" diff %"</literal><name>PRId64</name><literal type="string">" %s\n"</literal></expr></argument>,

<argument><expr><name>devtypename</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>, <argument><expr><name>curtime</name></expr></argument>, <argument><expr><name>orig_curtime</name></expr></argument>, <argument><expr><name>graphtime</name></expr></argument>, <argument><expr><name>graphtime</name> <operator>-</operator> <name>orig_curtime</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>device_name</name><index>[<expr><name>devtype</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>pin</name><operator>-&gt;</operator><name>filter</name><operator>-&gt;</operator><name>callback</name></name><argument_list>(<argument><expr><name>priv_data</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>, <argument><expr><name>curtime</name></expr></argument>, <argument><expr><name>devtype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>S_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>long</name> <name>WINAPI</name></type>

<name>libAVMemInputPin_ReceiveMultiple</name><parameter_list>(<parameter><decl><type><name>libAVMemInputPin</name> <modifier>*</modifier></type><name>this</name></decl></parameter>,

<parameter><decl><type><name>IMediaSample</name> <modifier>*</modifier><modifier>*</modifier></type><name>samples</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>nproc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>dshowdebug</name><argument_list>(<argument><expr><literal type="string">"libAVMemInputPin_ReceiveMultiple(%p)\n"</literal></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>libAVMemInputPin_Receive</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>samples</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><operator>*</operator><name>nproc</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>

<return>return <expr><name>S_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>long</name> <name>WINAPI</name></type>

<name>libAVMemInputPin_ReceiveCanBlock</name><parameter_list>(<parameter><decl><type><name>libAVMemInputPin</name> <modifier>*</modifier></type><name>this</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>dshowdebug</name><argument_list>(<argument><expr><literal type="string">"libAVMemInputPin_ReceiveCanBlock(%p)\n"</literal></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>S_FALSE</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>libAVMemInputPin_Destroy</name><parameter_list>(<parameter><decl><type><name>libAVMemInputPin</name> <modifier>*</modifier></type><name>this</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>libAVPin</name> <modifier>*</modifier></type><name>pin</name> <init>= <expr><operator>(</operator><name>libAVPin</name> <operator>*</operator><operator>)</operator> <operator>(</operator><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator> <name>this</name> <operator>-</operator> <name>imemoffset</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>dshowdebug</name><argument_list>(<argument><expr><literal type="string">"libAVMemInputPin_Destroy(%p)\n"</literal></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libAVPin_Destroy</name><argument_list>(<argument><expr><name>pin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
