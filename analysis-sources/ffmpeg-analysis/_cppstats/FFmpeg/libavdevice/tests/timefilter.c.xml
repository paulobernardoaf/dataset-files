<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavdevice\tests\timefilter.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/lfg.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavdevice/timefilter.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LFG_MAX</name></cpp:macro> <cpp:value>((1LL &lt;&lt; 32) - 1)</cpp:value></cpp:define>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVLFG</name></type> <name>prng</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>n0</name></decl>, <decl><type ref="prev"/><name>n1</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SAMPLES</name></cpp:macro> <cpp:value>1000</cpp:value></cpp:define>

<decl_stmt><decl><type><name>double</name></type> <name><name>ideal</name><index>[<expr><name>SAMPLES</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name><name>samples</name><index>[<expr><name>SAMPLES</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name><name>samplet</name><index>[<expr><name>SAMPLES</name></expr>]</index></name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>n0</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n0</name> <operator>&lt;</operator> <literal type="number">40</literal></expr>;</condition> <incr><expr><name>n0</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name>n0</name> <operator>+</operator> <literal type="number">1</literal></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>n1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n1</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>n1</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name>n1</name> <operator>+</operator> <literal type="number">1</literal></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>best_error</name> <init>= <expr><literal type="number">1000000000</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>bestpar0</name> <init>= <expr><ternary><condition><expr><name>n0</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">100000</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>bestpar1</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>better</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_lfg_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>prng</name></expr></argument>, <argument><expr><literal type="number">123</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>SAMPLES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>samplet</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">10</literal> <operator>+</operator> <name>i</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><call><name>av_lfg_get</name><argument_list>(<argument><expr><operator>&amp;</operator><name>prng</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>LFG_MAX</name><operator>/</operator><literal type="number">2</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">0.999</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ideal</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>samplet</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>n1</name> <operator>*</operator> <name>i</name> <operator>/</operator> <operator>(</operator><literal type="number">1000</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>samples</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>ideal</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>n0</name> <operator>*</operator> <operator>(</operator><call><name>av_lfg_get</name><argument_list>(<argument><expr><operator>&amp;</operator><name>prng</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>LFG_MAX</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>/</operator> <operator>(</operator><name>LFG_MAX</name> <operator>*</operator> <literal type="number">10LL</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>i</name> <operator>&amp;&amp;</operator> <name><name>samples</name><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;</operator><name><name>samples</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>samples</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>samples</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>+</operator><literal type="number">0.001</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<do>do <block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>par0</name></decl>, <decl><type ref="prev"/><name>par1</name></decl>;</decl_stmt>

<expr_stmt><expr><name>better</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>par0</name> <operator>=</operator> <name>bestpar0</name> <operator>*</operator> <literal type="number">0.8</literal></expr>;</init> <condition><expr><name>par0</name> <operator>&lt;=</operator> <name>bestpar0</name> <operator>*</operator> <literal type="number">1.21</literal></expr>;</condition> <incr><expr><name>par0</name> <operator>+=</operator> <name>bestpar0</name> <operator>*</operator> <literal type="number">0.05</literal></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>par1</name> <operator>=</operator> <name>bestpar1</name> <operator>*</operator> <literal type="number">0.8</literal></expr>;</init> <condition><expr><name>par1</name> <operator>&lt;=</operator> <name>bestpar1</name> <operator>*</operator> <literal type="number">1.21</literal></expr>;</condition> <incr><expr><name>par1</name> <operator>+=</operator> <name>bestpar1</name> <operator>*</operator> <literal type="number">0.05</literal></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>error</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TimeFilter</name> <modifier>*</modifier></type><name>tf</name> <init>= <expr><call><name>ff_timefilter_new</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>par0</name></expr></argument>, <argument><expr><name>par1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tf</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Could not allocate memory for timefilter.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>SAMPLES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>filtered</name></decl>;</decl_stmt>

<expr_stmt><expr><name>filtered</name> <operator>=</operator> <call><name>ff_timefilter_update</name><argument_list>(<argument><expr><name>tf</name></expr></argument>, <argument><expr><name><name>samples</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><ternary><condition><expr><name>i</name></expr> ?</condition><then> <expr><operator>(</operator><name><name>samplet</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>samplet</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>filtered</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>filtered</name></expr></argument> &gt;</argument_list></name> <literal type="number">1000000000</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"filter is unstable\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>error</name> <operator>+=</operator> <operator>(</operator><name>filtered</name> <operator>-</operator> <name><name>ideal</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>filtered</name> <operator>-</operator> <name><name>ideal</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>ff_timefilter_destroy</name><argument_list>(<argument><expr><name>tf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>error</name> <operator>&lt;</operator> <name>best_error</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>best_error</name> <operator>=</operator> <name>error</name></expr>;</expr_stmt>

<expr_stmt><expr><name>bestpar0</name> <operator>=</operator> <name>par0</name></expr>;</expr_stmt>

<expr_stmt><expr><name>bestpar1</name> <operator>=</operator> <name>par1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>better</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block> while <condition>(<expr><name>better</name></expr>)</condition>;</do>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" [%12f %11f %9f]"</literal></expr></argument>, <argument><expr><name>bestpar0</name></expr></argument>, <argument><expr><name>bestpar1</name></expr></argument>, <argument><expr><name>best_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
