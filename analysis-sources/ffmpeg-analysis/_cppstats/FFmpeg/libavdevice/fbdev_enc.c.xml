<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavdevice\fbdev_enc.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/ioctl.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/mman.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/fb.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixdesc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/log.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mem.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavformat/avformat.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fbdev_common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avdevice.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>xoffset</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>yoffset</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>fb_var_screeninfo</name></name></type> <name>varinfo</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>fb_fix_screeninfo</name></name></type> <name>fixinfo</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt> 

}</block></struct></type> <name>FBDevContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>fbdev_write_header</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>FBDevContext</name> <modifier>*</modifier></type><name>fbdev</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>pix_fmt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>flags</name> <init>= <expr><name>O_RDWR</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>device</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>nb_streams</name></name> <operator>!=</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>h</name><operator>-&gt;</operator><name>streams</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>!=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>fbdev</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Only a single video stream is supported.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>url</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>device</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>url</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>device</name> <operator>=</operator> <call><name>ff_fbdev_default_device</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>fbdev</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <call><name>avpriv_open</name><argument_list>(<argument><expr><name>device</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Could not open framebuffer device '%s': %s\n"</literal></expr></argument>,

<argument><expr><name>device</name></expr></argument>, <argument><expr><call><name>av_err2str</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name><name>fbdev</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>FBIOGET_VSCREENINFO</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fbdev</name><operator>-&gt;</operator><name>varinfo</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"FBIOGET_VSCREENINFO: %s\n"</literal></expr></argument>, <argument><expr><call><name>av_err2str</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name><name>fbdev</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>FBIOGET_FSCREENINFO</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fbdev</name><operator>-&gt;</operator><name>fixinfo</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"FBIOGET_FSCREENINFO: %s\n"</literal></expr></argument>, <argument><expr><call><name>av_err2str</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pix_fmt</name> <operator>=</operator> <call><name>ff_get_pixfmt_from_fb_varinfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fbdev</name><operator>-&gt;</operator><name>varinfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pix_fmt</name> <operator>==</operator> <name>AV_PIX_FMT_NONE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Framebuffer pixel format not supported.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>fbdev</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <call><name>mmap</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>fbdev</name><operator>-&gt;</operator><name>fixinfo</name><operator>.</operator><name>smem_len</name></name></expr></argument>, <argument><expr><name>PROT_WRITE</name></expr></argument>, <argument><expr><name>MAP_SHARED</name></expr></argument>, <argument><expr><name><name>fbdev</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fbdev</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <name>MAP_FAILED</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error in mmap(): %s\n"</literal></expr></argument>, <argument><expr><call><name>av_err2str</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>fbdev</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fbdev_write_packet</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>FBDevContext</name> <modifier>*</modifier></type><name>fbdev</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pin</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pout</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>fb_pix_fmt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>disp_height</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bytes_to_copy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodecParameters</name> <modifier>*</modifier></type><name>par</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>streams</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>codecpar</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>video_pix_fmt</name> <init>= <expr><name><name>par</name><operator>-&gt;</operator><name>format</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>video_width</name> <init>= <expr><name><name>par</name><operator>-&gt;</operator><name>width</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>video_height</name> <init>= <expr><name><name>par</name><operator>-&gt;</operator><name>height</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bytes_per_pixel</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>par</name><operator>-&gt;</operator><name>bits_per_coded_sample</name></name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>src_line_size</name> <init>= <expr><name>video_width</name> <operator>*</operator> <name>bytes_per_pixel</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name><name>fbdev</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>FBIOGET_VSCREENINFO</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fbdev</name><operator>-&gt;</operator><name>varinfo</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,

<argument><expr><literal type="string">"Error refreshing variable info: %s\n"</literal></expr></argument>, <argument><expr><call><name>av_err2str</name><argument_list>(<argument><expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>fb_pix_fmt</name> <operator>=</operator> <call><name>ff_get_pixfmt_from_fb_varinfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fbdev</name><operator>-&gt;</operator><name>varinfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fb_pix_fmt</name> <operator>!=</operator> <name>video_pix_fmt</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Pixel format %s is not supported, use %s\n"</literal></expr></argument>,

<argument><expr><call><name>av_get_pix_fmt_name</name><argument_list>(<argument><expr><name>video_pix_fmt</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>av_get_pix_fmt_name</name><argument_list>(<argument><expr><name>fb_pix_fmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>disp_height</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>fbdev</name><operator>-&gt;</operator><name>varinfo</name><operator>.</operator><name>yres</name></name></expr></argument>, <argument><expr><name>video_height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bytes_to_copy</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>fbdev</name><operator>-&gt;</operator><name>varinfo</name><operator>.</operator><name>xres</name></name></expr></argument>, <argument><expr><name>video_width</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>bytes_per_pixel</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pin</name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>pout</name> <operator>=</operator> <name><name>fbdev</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator>

<name>bytes_per_pixel</name> <operator>*</operator> <name><name>fbdev</name><operator>-&gt;</operator><name>varinfo</name><operator>.</operator><name>xoffset</name></name> <operator>+</operator>

<name><name>fbdev</name><operator>-&gt;</operator><name>varinfo</name><operator>.</operator><name>yoffset</name></name> <operator>*</operator> <name><name>fbdev</name><operator>-&gt;</operator><name>fixinfo</name><operator>.</operator><name>line_length</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fbdev</name><operator>-&gt;</operator><name>xoffset</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>fbdev</name><operator>-&gt;</operator><name>xoffset</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>-</operator><name><name>fbdev</name><operator>-&gt;</operator><name>xoffset</name></name> <operator>&gt;=</operator> <name>video_width</name></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>bytes_to_copy</name> <operator>+=</operator> <name><name>fbdev</name><operator>-&gt;</operator><name>xoffset</name></name> <operator>*</operator> <name>bytes_per_pixel</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pin</name> <operator>-=</operator> <name><name>fbdev</name><operator>-&gt;</operator><name>xoffset</name></name> <operator>*</operator> <name>bytes_per_pixel</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>diff</name> <init>= <expr><operator>(</operator><name>video_width</name> <operator>+</operator> <name><name>fbdev</name><operator>-&gt;</operator><name>xoffset</name></name><operator>)</operator> <operator>-</operator> <name><name>fbdev</name><operator>-&gt;</operator><name>varinfo</name><operator>.</operator><name>xres</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>diff</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>diff</name> <operator>&gt;=</operator> <name>video_width</name></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>bytes_to_copy</name> <operator>-=</operator> <name>diff</name> <operator>*</operator> <name>bytes_per_pixel</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pout</name> <operator>+=</operator> <name>bytes_per_pixel</name> <operator>*</operator> <name><name>fbdev</name><operator>-&gt;</operator><name>xoffset</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fbdev</name><operator>-&gt;</operator><name>yoffset</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>fbdev</name><operator>-&gt;</operator><name>yoffset</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>-</operator><name><name>fbdev</name><operator>-&gt;</operator><name>yoffset</name></name> <operator>&gt;=</operator> <name>video_height</name></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>disp_height</name> <operator>+=</operator> <name><name>fbdev</name><operator>-&gt;</operator><name>yoffset</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>pin</name> <operator>-=</operator> <name><name>fbdev</name><operator>-&gt;</operator><name>yoffset</name></name> <operator>*</operator> <name>src_line_size</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>diff</name> <init>= <expr><operator>(</operator><name>video_height</name> <operator>+</operator> <name><name>fbdev</name><operator>-&gt;</operator><name>yoffset</name></name><operator>)</operator> <operator>-</operator> <name><name>fbdev</name><operator>-&gt;</operator><name>varinfo</name><operator>.</operator><name>yres</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>diff</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>diff</name> <operator>&gt;=</operator> <name>video_height</name></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>disp_height</name> <operator>-=</operator> <name>diff</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pout</name> <operator>+=</operator> <name><name>fbdev</name><operator>-&gt;</operator><name>yoffset</name></name> <operator>*</operator> <name><name>fbdev</name><operator>-&gt;</operator><name>fixinfo</name><operator>.</operator><name>line_length</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>disp_height</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pout</name></expr></argument>, <argument><expr><name>pin</name></expr></argument>, <argument><expr><name>bytes_to_copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pout</name> <operator>+=</operator> <name><name>fbdev</name><operator>-&gt;</operator><name>fixinfo</name><operator>.</operator><name>line_length</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>pin</name> <operator>+=</operator> <name>src_line_size</name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>fbdev_write_trailer</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>FBDevContext</name> <modifier>*</modifier></type><name>fbdev</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>munmap</name><argument_list>(<argument><expr><name><name>fbdev</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>fbdev</name><operator>-&gt;</operator><name>fixinfo</name><operator>.</operator><name>smem_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>fbdev</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fbdev_get_device_list</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVDeviceInfoList</name> <modifier>*</modifier></type><name>device_list</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>ff_fbdev_get_device_list</name><argument_list>(<argument><expr><name>device_list</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(FBDevContext, x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC</name></cpp:macro> <cpp:value>AV_OPT_FLAG_ENCODING_PARAM</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>options</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"xoffset"</literal></expr>, <expr><literal type="string">"set x coordinate of top left corner"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>xoffset</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>ENC</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"yoffset"</literal></expr>, <expr><literal type="string">"set y coordinate of top left corner"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>yoffset</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>ENC</name></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>fbdev_class</name> <init>= <expr><block>{

<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"fbdev outdev"</literal></expr>,

<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,

<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>options</name></expr>,

<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,

<expr><operator>.</operator><name>category</name> <operator>=</operator> <name>AV_CLASS_CATEGORY_DEVICE_VIDEO_OUTPUT</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVOutputFormat</name></type> <name>ff_fbdev_muxer</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"fbdev"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Linux framebuffer"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>FBDevContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>audio_codec</name> <operator>=</operator> <name>AV_CODEC_ID_NONE</name></expr>,

<expr><operator>.</operator><name>video_codec</name> <operator>=</operator> <name>AV_CODEC_ID_RAWVIDEO</name></expr>,

<expr><operator>.</operator><name>write_header</name> <operator>=</operator> <name>fbdev_write_header</name></expr>,

<expr><operator>.</operator><name>write_packet</name> <operator>=</operator> <name>fbdev_write_packet</name></expr>,

<expr><operator>.</operator><name>write_trailer</name> <operator>=</operator> <name>fbdev_write_trailer</name></expr>,

<expr><operator>.</operator><name>get_device_list</name> <operator>=</operator> <name>fbdev_get_device_list</name></expr>,

<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>AVFMT_NOFILE</name> <operator>|</operator> <name>AVFMT_VARIABLE_FPS</name> <operator>|</operator> <name>AVFMT_NOTIMESTAMPS</name></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>fbdev_class</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
