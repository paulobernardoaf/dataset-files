<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavdevice\sndio.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sndio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avdevice.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavdevice/sndio.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>movecb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>delta</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>SndioData</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>addr</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>hwpos</name></name> <operator>+=</operator> <name>delta</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>channels</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>bps</name></name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>av_cold</name> <name>int</name></type> <name>ff_sndio_open</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is_output</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>audio_device</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>SndioData</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>s1</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>sio_hdl</name></name> <modifier>*</modifier></type><name>hdl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>sio_par</name></name></type> <name>par</name></decl>;</decl_stmt>

<expr_stmt><expr><name>hdl</name> <operator>=</operator> <call><name>sio_open</name><argument_list>(<argument><expr><name>audio_device</name></expr></argument>, <argument><expr><ternary><condition><expr><name>is_output</name></expr> ?</condition><then> <expr><name>SIO_PLAY</name></expr> </then><else>: <expr><name>SIO_REC</name></expr></else></ternary></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hdl</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Could not open sndio device\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>sio_initpar</name><argument_list>(<argument><expr><operator>&amp;</operator><name>par</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par</name><operator>.</operator><name>bits</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par</name><operator>.</operator><name>sig</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par</name><operator>.</operator><name>le</name></name> <operator>=</operator> <name>SIO_LE_NATIVE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>is_output</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>par</name><operator>.</operator><name>pchan</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>par</name><operator>.</operator><name>rchan</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>par</name><operator>.</operator><name>rate</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>sio_setpar</name><argument_list>(<argument><expr><name>hdl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>par</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>sio_getpar</name><argument_list>(<argument><expr><name>hdl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>par</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Impossible to set sndio parameters, "</literal>

<literal type="string">"channels: %d sample rate: %d\n"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>par</name><operator>.</operator><name>bits</name></name> <operator>!=</operator> <literal type="number">16</literal> <operator>||</operator> <name><name>par</name><operator>.</operator><name>sig</name></name> <operator>!=</operator> <literal type="number">1</literal> <operator>||</operator>

<operator>(</operator><name>is_output</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>par</name><operator>.</operator><name>pchan</name></name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>channels</name></name><operator>)</operator><operator>)</operator> <operator>||</operator>

<operator>(</operator><operator>!</operator><name>is_output</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>par</name><operator>.</operator><name>rchan</name></name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>channels</name></name><operator>)</operator><operator>)</operator> <operator>||</operator>

<operator>(</operator><name><name>par</name><operator>.</operator><name>rate</name></name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>sample_rate</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Could not set appropriate sndio parameters, "</literal>

<literal type="string">"channels: %d sample rate: %d\n"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>buffer_size</name></name> <operator>=</operator> <name><name>par</name><operator>.</operator><name>round</name></name> <operator>*</operator> <name><name>par</name><operator>.</operator><name>bps</name></name> <operator>*</operator>

<operator>(</operator><ternary><condition><expr><name>is_output</name></expr> ?</condition><then> <expr><name><name>par</name><operator>.</operator><name>pchan</name></name></expr> </then><else>: <expr><name><name>par</name><operator>.</operator><name>rchan</name></name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>is_output</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>buffer_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>buffer</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Could not allocate buffer\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>=</operator> <ternary><condition><expr><name><name>par</name><operator>.</operator><name>le</name></name></expr> ?</condition><then> <expr><name>AV_CODEC_ID_PCM_S16LE</name></expr> </then><else>: <expr><name>AV_CODEC_ID_PCM_S16BE</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <ternary><condition><expr><name>is_output</name></expr> ?</condition><then> <expr><name><name>par</name><operator>.</operator><name>pchan</name></name></expr> </then><else>: <expr><name><name>par</name><operator>.</operator><name>rchan</name></name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>=</operator> <name><name>par</name><operator>.</operator><name>rate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bps</name></name> <operator>=</operator> <name><name>par</name><operator>.</operator><name>bps</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sio_onmove</name><argument_list>(<argument><expr><name>hdl</name></expr></argument>, <argument><expr><name>movecb</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>sio_start</name><argument_list>(<argument><expr><name>hdl</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Could not start sndio\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>hdl</name></name> <operator>=</operator> <name>hdl</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>hdl</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>sio_close</name><argument_list>(<argument><expr><name>hdl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_sndio_close</name><parameter_list>(<parameter><decl><type><name>SndioData</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>hdl</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>sio_close</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>hdl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
