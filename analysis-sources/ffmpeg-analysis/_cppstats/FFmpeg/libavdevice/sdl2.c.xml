<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavdevice\sdl2.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;SDL.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;SDL_thread.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avstring.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/imgutils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/parseutils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixdesc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/time.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avdevice.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SDL_Window</name> <modifier>*</modifier></type><name>window</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SDL_Renderer</name> <modifier>*</modifier></type><name>renderer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>window_title</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>window_width</name></decl>, <name>window_height</name>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>window_x</name></decl>, <name>window_y</name>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>window_fullscreen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>window_borderless</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>enable_quit_action</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SDL_Texture</name> <modifier>*</modifier></type><name>texture</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>texture_fmt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SDL_Rect</name></type> <name>texture_rect</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>inited</name></decl>;</decl_stmt>

}</block></struct></type> <name>SDLContext</name>;</typedef>

<struct><specifier>static</specifier> <specifier>const</specifier> struct <name>sdl_texture_format_entry</name> <block>{

<decl_stmt><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>format</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>texture_fmt</name></decl>;</decl_stmt>

}</block> <decl><name><name>sdl_texture_format_map</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><name>AV_PIX_FMT_RGB8</name></expr>, <expr><name>SDL_PIXELFORMAT_RGB332</name></expr> }</block></expr>,

<expr><block>{ <expr><name>AV_PIX_FMT_RGB444</name></expr>, <expr><name>SDL_PIXELFORMAT_RGB444</name></expr> }</block></expr>,

<expr><block>{ <expr><name>AV_PIX_FMT_RGB555</name></expr>, <expr><name>SDL_PIXELFORMAT_RGB555</name></expr> }</block></expr>,

<expr><block>{ <expr><name>AV_PIX_FMT_BGR555</name></expr>, <expr><name>SDL_PIXELFORMAT_BGR555</name></expr> }</block></expr>,

<expr><block>{ <expr><name>AV_PIX_FMT_RGB565</name></expr>, <expr><name>SDL_PIXELFORMAT_RGB565</name></expr> }</block></expr>,

<expr><block>{ <expr><name>AV_PIX_FMT_BGR565</name></expr>, <expr><name>SDL_PIXELFORMAT_BGR565</name></expr> }</block></expr>,

<expr><block>{ <expr><name>AV_PIX_FMT_RGB24</name></expr>, <expr><name>SDL_PIXELFORMAT_RGB24</name></expr> }</block></expr>,

<expr><block>{ <expr><name>AV_PIX_FMT_BGR24</name></expr>, <expr><name>SDL_PIXELFORMAT_BGR24</name></expr> }</block></expr>,

<expr><block>{ <expr><name>AV_PIX_FMT_0RGB32</name></expr>, <expr><name>SDL_PIXELFORMAT_RGB888</name></expr> }</block></expr>,

<expr><block>{ <expr><name>AV_PIX_FMT_0BGR32</name></expr>, <expr><name>SDL_PIXELFORMAT_BGR888</name></expr> }</block></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_BIGENDIAN</name></expr></cpp:if>

<expr><block>{ <expr><name>AV_PIX_FMT_RGB0</name></expr>, <expr><name>SDL_PIXELFORMAT_RGBX8888</name></expr> }</block></expr>,

<expr><block>{ <expr><name>AV_PIX_FMT_BGR0</name></expr>, <expr><name>SDL_PIXELFORMAT_BGRX8888</name></expr> }</block></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><block>{ <expr><name>AV_PIX_FMT_0BGR</name></expr>, <expr><name>SDL_PIXELFORMAT_RGBX8888</name></expr> }</block></expr>,

<expr><block>{ <expr><name>AV_PIX_FMT_0RGB</name></expr>, <expr><name>SDL_PIXELFORMAT_BGRX8888</name></expr> }</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{ <expr><name>AV_PIX_FMT_RGB32</name></expr>, <expr><name>SDL_PIXELFORMAT_ARGB8888</name></expr> }</block></expr>,

<expr><block>{ <expr><name>AV_PIX_FMT_RGB32_1</name></expr>, <expr><name>SDL_PIXELFORMAT_RGBA8888</name></expr> }</block></expr>,

<expr><block>{ <expr><name>AV_PIX_FMT_BGR32</name></expr>, <expr><name>SDL_PIXELFORMAT_ABGR8888</name></expr> }</block></expr>,

<expr><block>{ <expr><name>AV_PIX_FMT_BGR32_1</name></expr>, <expr><name>SDL_PIXELFORMAT_BGRA8888</name></expr> }</block></expr>,

<expr><block>{ <expr><name>AV_PIX_FMT_YUV420P</name></expr>, <expr><name>SDL_PIXELFORMAT_IYUV</name></expr> }</block></expr>,

<expr><block>{ <expr><name>AV_PIX_FMT_YUYV422</name></expr>, <expr><name>SDL_PIXELFORMAT_YUY2</name></expr> }</block></expr>,

<expr><block>{ <expr><name>AV_PIX_FMT_UYVY422</name></expr>, <expr><name>SDL_PIXELFORMAT_UYVY</name></expr> }</block></expr>,

<expr><block>{ <expr><name>AV_PIX_FMT_NONE</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

}</block></expr></init></decl>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>compute_texture_rect</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVRational</name></type> <name>sar</name></decl>, <decl><type ref="prev"/><name>dar</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>SDLContext</name> <modifier>*</modifier></type><name>sdl</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodecParameters</name> <modifier>*</modifier></type><name>codecpar</name> <init>= <expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SDL_Rect</name> <modifier>*</modifier></type><name>texture_rect</name> <init>= <expr><operator>&amp;</operator><name><name>sdl</name><operator>-&gt;</operator><name>texture_rect</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>sar</name> <operator>=</operator> <ternary><condition><expr><name><name>st</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>num</name></name></expr> ?</condition><then> <expr><name><name>st</name><operator>-&gt;</operator><name>sample_aspect_ratio</name></name></expr> </then><else>: <expr><operator>(</operator><name>AVRational</name><operator>)</operator><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>dar</name> <operator>=</operator> <macro><name>av_mul_q</name><argument_list>(<argument>sar</argument>, <argument>(AVRational){ codecpar-&gt;width</argument>, <argument>codecpar-&gt;height }</argument>)</argument_list></macro></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sdl</name><operator>-&gt;</operator><name>window_width</name></name> <operator>&amp;&amp;</operator> <name><name>sdl</name><operator>-&gt;</operator><name>window_height</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><macro><name>av_cmp_q</name><argument_list>(<argument>dar</argument>, <argument>(AVRational){ sdl-&gt;window_width</argument>, <argument>sdl-&gt;window_height }</argument>)</argument_list></macro> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>texture_rect</name><operator>-&gt;</operator><name>w</name></name> <operator>=</operator> <name><name>sdl</name><operator>-&gt;</operator><name>window_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>texture_rect</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <call><name>av_rescale</name><argument_list>(<argument><expr><name><name>texture_rect</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>dar</name><operator>.</operator><name>den</name></name></expr></argument>, <argument><expr><name><name>dar</name><operator>.</operator><name>num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>texture_rect</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <name><name>sdl</name><operator>-&gt;</operator><name>window_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>texture_rect</name><operator>-&gt;</operator><name>w</name></name> <operator>=</operator> <call><name>av_rescale</name><argument_list>(<argument><expr><name><name>texture_rect</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><name><name>dar</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><name><name>dar</name><operator>.</operator><name>den</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>sar</name><operator>.</operator><name>num</name></name> <operator>&gt;</operator> <name><name>sar</name><operator>.</operator><name>den</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>texture_rect</name><operator>-&gt;</operator><name>w</name></name> <operator>=</operator> <name><name>codecpar</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>texture_rect</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <call><name>av_rescale</name><argument_list>(<argument><expr><name><name>texture_rect</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>dar</name><operator>.</operator><name>den</name></name></expr></argument>, <argument><expr><name><name>dar</name><operator>.</operator><name>num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>texture_rect</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <name><name>codecpar</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>texture_rect</name><operator>-&gt;</operator><name>w</name></name> <operator>=</operator> <call><name>av_rescale</name><argument_list>(<argument><expr><name><name>texture_rect</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><name><name>dar</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><name><name>dar</name><operator>.</operator><name>den</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>sdl</name><operator>-&gt;</operator><name>window_width</name></name> <operator>=</operator> <name><name>texture_rect</name><operator>-&gt;</operator><name>w</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sdl</name><operator>-&gt;</operator><name>window_height</name></name> <operator>=</operator> <name><name>texture_rect</name><operator>-&gt;</operator><name>h</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>texture_rect</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <operator>(</operator><name><name>sdl</name><operator>-&gt;</operator><name>window_width</name></name> <operator>-</operator> <name><name>texture_rect</name><operator>-&gt;</operator><name>w</name></name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>texture_rect</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <operator>(</operator><name><name>sdl</name><operator>-&gt;</operator><name>window_height</name></name> <operator>-</operator> <name><name>texture_rect</name><operator>-&gt;</operator><name>h</name></name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sdl2_write_trailer</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>SDLContext</name> <modifier>*</modifier></type><name>sdl</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sdl</name><operator>-&gt;</operator><name>texture</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>SDL_DestroyTexture</name><argument_list>(<argument><expr><name><name>sdl</name><operator>-&gt;</operator><name>texture</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sdl</name><operator>-&gt;</operator><name>texture</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sdl</name><operator>-&gt;</operator><name>renderer</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>SDL_DestroyRenderer</name><argument_list>(<argument><expr><name><name>sdl</name><operator>-&gt;</operator><name>renderer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sdl</name><operator>-&gt;</operator><name>renderer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sdl</name><operator>-&gt;</operator><name>window</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>SDL_DestroyWindow</name><argument_list>(<argument><expr><name><name>sdl</name><operator>-&gt;</operator><name>window</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sdl</name><operator>-&gt;</operator><name>window</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sdl</name><operator>-&gt;</operator><name>inited</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>SDL_Quit</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sdl2_write_header</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>SDLContext</name> <modifier>*</modifier></type><name>sdl</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodecParameters</name> <modifier>*</modifier></type><name>codecpar</name> <init>= <expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sdl</name><operator>-&gt;</operator><name>window_title</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sdl</name><operator>-&gt;</operator><name>window_title</name></name> <operator>=</operator> <call><name>av_strdup</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SDL_WasInit</name><argument_list>(<argument><expr><name>SDL_INIT_VIDEO</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,

<argument><expr><literal type="string">"SDL video subsystem was already inited, you could have multiple SDL outputs. This may cause unknown behaviour.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sdl</name><operator>-&gt;</operator><name>inited</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name> <operator>&gt;</operator> <literal type="number">1</literal>

<operator>||</operator> <name><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>!=</operator> <name>AVMEDIA_TYPE_VIDEO</name>

<operator>||</operator> <name><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>!=</operator> <name>AV_CODEC_ID_RAWVIDEO</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Only supports one rawvideo stream\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>sdl_texture_format_map</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>format</name> <operator>!=</operator> <name>AV_PIX_FMT_NONE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>sdl_texture_format_map</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>format</name> <operator>==</operator> <name><name>codecpar</name><operator>-&gt;</operator><name>format</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sdl</name><operator>-&gt;</operator><name>texture_fmt</name></name> <operator>=</operator> <name><name>sdl_texture_format_map</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>texture_fmt</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sdl</name><operator>-&gt;</operator><name>texture_fmt</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Unsupported pixel format '%s'.\n"</literal></expr></argument>,

<argument><expr><call><name>av_get_pix_fmt_name</name><argument_list>(<argument><expr><name><name>codecpar</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>flags</name> <operator>=</operator> <name>SDL_WINDOW_HIDDEN</name> <operator>|</operator>

<operator>(</operator><ternary><condition><expr><name><name>sdl</name><operator>-&gt;</operator><name>window_fullscreen</name></name></expr> ?</condition><then> <expr><name>SDL_WINDOW_FULLSCREEN</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>|</operator>

<operator>(</operator><ternary><condition><expr><name><name>sdl</name><operator>-&gt;</operator><name>window_borderless</name></name></expr> ?</condition><then> <expr><name>SDL_WINDOW_BORDERLESS</name></expr> </then><else>: <expr><name>SDL_WINDOW_RESIZABLE</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sdl</name><operator>-&gt;</operator><name>inited</name></name></expr>)</condition><block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>SDL_Init</name><argument_list>(<argument><expr><name>SDL_INIT_VIDEO</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unable to initialize SDL: %s\n"</literal></expr></argument>, <argument><expr><call><name>SDL_GetError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>compute_texture_rect</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SDL_CreateWindowAndRenderer</name><argument_list>(<argument><expr><name><name>sdl</name><operator>-&gt;</operator><name>window_width</name></name></expr></argument>, <argument><expr><name><name>sdl</name><operator>-&gt;</operator><name>window_height</name></name></expr></argument>,

<argument><expr><name>flags</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sdl</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sdl</name><operator>-&gt;</operator><name>renderer</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>sdl</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Couldn't create window and renderer: %s\n"</literal></expr></argument>, <argument><expr><call><name>SDL_GetError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>SDL_SetWindowTitle</name><argument_list>(<argument><expr><name><name>sdl</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><name><name>sdl</name><operator>-&gt;</operator><name>window_title</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SDL_SetWindowPosition</name><argument_list>(<argument><expr><name><name>sdl</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><name><name>sdl</name><operator>-&gt;</operator><name>window_x</name></name></expr></argument>, <argument><expr><name><name>sdl</name><operator>-&gt;</operator><name>window_y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SDL_ShowWindow</name><argument_list>(<argument><expr><name><name>sdl</name><operator>-&gt;</operator><name>window</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sdl</name><operator>-&gt;</operator><name>texture</name></name> <operator>=</operator> <call><name>SDL_CreateTexture</name><argument_list>(<argument><expr><name><name>sdl</name><operator>-&gt;</operator><name>renderer</name></name></expr></argument>, <argument><expr><name><name>sdl</name><operator>-&gt;</operator><name>texture_fmt</name></name></expr></argument>, <argument><expr><name>SDL_TEXTUREACCESS_STREAMING</name></expr></argument>,

<argument><expr><name><name>codecpar</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>codecpar</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sdl</name><operator>-&gt;</operator><name>texture</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>sdl</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unable to set create mode: %s\n"</literal></expr></argument>, <argument><expr><call><name>SDL_GetError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"w:%d h:%d fmt:%s -&gt; w:%d h:%d\n"</literal></expr></argument>,

<argument><expr><name><name>codecpar</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>codecpar</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><call><name>av_get_pix_fmt_name</name><argument_list>(<argument><expr><name><name>codecpar</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>sdl</name><operator>-&gt;</operator><name>window_width</name></name></expr></argument>, <argument><expr><name><name>sdl</name><operator>-&gt;</operator><name>window_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sdl</name><operator>-&gt;</operator><name>inited</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>sdl2_write_trailer</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sdl2_write_packet</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>quit</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SDLContext</name> <modifier>*</modifier></type><name>sdl</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodecParameters</name> <modifier>*</modifier></type><name>codecpar</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>codecpar</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>linesize</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SDL_Event</name></type> <name>event</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SDL_PollEvent</name><argument_list>(<argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>

<switch>switch <condition>(<expr><name><name>event</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>SDL_KEYDOWN</name></expr>:</case>

<switch>switch <condition>(<expr><name><name>event</name><operator>.</operator><name>key</name><operator>.</operator><name>keysym</name><operator>.</operator><name>sym</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>SDLK_ESCAPE</name></expr>:</case>

<case>case <expr><name>SDLK_q</name></expr>:</case>

<expr_stmt><expr><name>quit</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

<break>break;</break>

<case>case <expr><name>SDL_QUIT</name></expr>:</case>

<expr_stmt><expr><name>quit</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SDL_WINDOWEVENT</name></expr>:</case>

<switch>switch<condition>(<expr><name><name>event</name><operator>.</operator><name>window</name><operator>.</operator><name>event</name></name></expr>)</condition><block>{<block_content>

<case>case <expr><name>SDL_WINDOWEVENT_RESIZED</name></expr>:</case>

<case>case <expr><name>SDL_WINDOWEVENT_SIZE_CHANGED</name></expr>:</case>

<expr_stmt><expr><name><name>sdl</name><operator>-&gt;</operator><name>window_width</name></name> <operator>=</operator> <name><name>event</name><operator>.</operator><name>window</name><operator>.</operator><name>data1</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sdl</name><operator>-&gt;</operator><name>window_height</name></name> <operator>=</operator> <name><name>event</name><operator>.</operator><name>window</name><operator>.</operator><name>data2</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>compute_texture_rect</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

<break>break;</break>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>quit</name> <operator>&amp;&amp;</operator> <name><name>sdl</name><operator>-&gt;</operator><name>enable_quit_action</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>sdl2_write_trailer</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_image_fill_arrays</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>codecpar</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><name><name>codecpar</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>codecpar</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>sdl</name><operator>-&gt;</operator><name>texture_fmt</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>SDL_PIXELFORMAT_IYUV</name></expr>:</case>

<case>case <expr><name>SDL_PIXELFORMAT_YUY2</name></expr>:</case>

<case>case <expr><name>SDL_PIXELFORMAT_UYVY</name></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>SDL_UpdateYUVTexture</name><argument_list>(<argument><expr><name><name>sdl</name><operator>-&gt;</operator><name>texture</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SDL_PIXELFORMAT_RGB332</name></expr>:</case>

<case>case <expr><name>SDL_PIXELFORMAT_RGB444</name></expr>:</case>

<case>case <expr><name>SDL_PIXELFORMAT_RGB555</name></expr>:</case>

<case>case <expr><name>SDL_PIXELFORMAT_BGR555</name></expr>:</case>

<case>case <expr><name>SDL_PIXELFORMAT_RGB565</name></expr>:</case>

<case>case <expr><name>SDL_PIXELFORMAT_BGR565</name></expr>:</case>

<case>case <expr><name>SDL_PIXELFORMAT_RGB24</name></expr>:</case>

<case>case <expr><name>SDL_PIXELFORMAT_BGR24</name></expr>:</case>

<case>case <expr><name>SDL_PIXELFORMAT_RGB888</name></expr>:</case>

<case>case <expr><name>SDL_PIXELFORMAT_RGBX8888</name></expr>:</case>

<case>case <expr><name>SDL_PIXELFORMAT_BGR888</name></expr>:</case>

<case>case <expr><name>SDL_PIXELFORMAT_BGRX8888</name></expr>:</case>

<case>case <expr><name>SDL_PIXELFORMAT_ARGB8888</name></expr>:</case>

<case>case <expr><name>SDL_PIXELFORMAT_RGBA8888</name></expr>:</case>

<case>case <expr><name>SDL_PIXELFORMAT_ABGR8888</name></expr>:</case>

<case>case <expr><name>SDL_PIXELFORMAT_BGRA8888</name></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>SDL_UpdateTexture</name><argument_list>(<argument><expr><name><name>sdl</name><operator>-&gt;</operator><name>texture</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Unsupported pixel format\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>SDL_RenderClear</name><argument_list>(<argument><expr><name><name>sdl</name><operator>-&gt;</operator><name>renderer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SDL_RenderCopy</name><argument_list>(<argument><expr><name><name>sdl</name><operator>-&gt;</operator><name>renderer</name></name></expr></argument>, <argument><expr><name><name>sdl</name><operator>-&gt;</operator><name>texture</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sdl</name><operator>-&gt;</operator><name>texture_rect</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SDL_RenderPresent</name><argument_list>(<argument><expr><name><name>sdl</name><operator>-&gt;</operator><name>renderer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(SDLContext,x)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>options</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"window_title"</literal></expr>, <expr><literal type="string">"set SDL window title"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>window_title</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{ <expr><operator>.</operator><name>str</name> <operator>=</operator> <name>NULL</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_FLAG_ENCODING_PARAM</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"window_size"</literal></expr>, <expr><literal type="string">"set SDL window forced size"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>window_width</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_IMAGE_SIZE</name></expr>, <expr><block>{ <expr><operator>.</operator><name>str</name> <operator>=</operator> <name>NULL</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_FLAG_ENCODING_PARAM</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"window_x"</literal></expr>, <expr><literal type="string">"set SDL window x position"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>window_x</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>SDL_WINDOWPOS_CENTERED</name></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>AV_OPT_FLAG_ENCODING_PARAM</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"window_y"</literal></expr>, <expr><literal type="string">"set SDL window y position"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>window_y</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>SDL_WINDOWPOS_CENTERED</name></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>AV_OPT_FLAG_ENCODING_PARAM</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"window_fullscreen"</literal></expr>, <expr><literal type="string">"set SDL window fullscreen"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>window_fullscreen</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>AV_OPT_FLAG_ENCODING_PARAM</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"window_borderless"</literal></expr>, <expr><literal type="string">"set SDL window border off"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>window_borderless</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>AV_OPT_FLAG_ENCODING_PARAM</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"window_enable_quit"</literal></expr>, <expr><literal type="string">"set if quit action is available"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>enable_quit_action</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>AV_OPT_FLAG_ENCODING_PARAM</name></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>sdl2_class</name> <init>= <expr><block>{

<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"sdl2 outdev"</literal></expr>,

<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,

<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>options</name></expr>,

<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,

<expr><operator>.</operator><name>category</name> <operator>=</operator> <name>AV_CLASS_CATEGORY_DEVICE_VIDEO_OUTPUT</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVOutputFormat</name></type> <name>ff_sdl2_muxer</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"sdl,sdl2"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"SDL2 output device"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SDLContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>audio_codec</name> <operator>=</operator> <name>AV_CODEC_ID_NONE</name></expr>,

<expr><operator>.</operator><name>video_codec</name> <operator>=</operator> <name>AV_CODEC_ID_RAWVIDEO</name></expr>,

<expr><operator>.</operator><name>write_header</name> <operator>=</operator> <name>sdl2_write_header</name></expr>,

<expr><operator>.</operator><name>write_packet</name> <operator>=</operator> <name>sdl2_write_packet</name></expr>,

<expr><operator>.</operator><name>write_trailer</name> <operator>=</operator> <name>sdl2_write_trailer</name></expr>,

<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>AVFMT_NOFILE</name> <operator>|</operator> <name>AVFMT_VARIABLE_FPS</name> <operator>|</operator> <name>AVFMT_NOTIMESTAMPS</name></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>sdl2_class</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
