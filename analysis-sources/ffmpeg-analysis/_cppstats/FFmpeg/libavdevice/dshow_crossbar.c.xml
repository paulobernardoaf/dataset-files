<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavdevice\dshow_crossbar.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dshow_capture.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>

<name>GetPhysicalPinName</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>pin_type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name>pin_type</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>PhysConn_Video_Tuner</name></expr>:</case> <return>return <expr><literal type="string">"Video Tuner"</literal></expr>;</return>

<case>case <expr><name>PhysConn_Video_Composite</name></expr>:</case> <return>return <expr><literal type="string">"Video Composite"</literal></expr>;</return>

<case>case <expr><name>PhysConn_Video_SVideo</name></expr>:</case> <return>return <expr><literal type="string">"S-Video"</literal></expr>;</return>

<case>case <expr><name>PhysConn_Video_RGB</name></expr>:</case> <return>return <expr><literal type="string">"Video RGB"</literal></expr>;</return>

<case>case <expr><name>PhysConn_Video_YRYBY</name></expr>:</case> <return>return <expr><literal type="string">"Video YRYBY"</literal></expr>;</return>

<case>case <expr><name>PhysConn_Video_SerialDigital</name></expr>:</case> <return>return <expr><literal type="string">"Video Serial Digital"</literal></expr>;</return>

<case>case <expr><name>PhysConn_Video_ParallelDigital</name></expr>:</case> <return>return <expr><literal type="string">"Video Parallel Digital"</literal></expr>;</return>

<case>case <expr><name>PhysConn_Video_SCSI</name></expr>:</case> <return>return <expr><literal type="string">"Video SCSI"</literal></expr>;</return>

<case>case <expr><name>PhysConn_Video_AUX</name></expr>:</case> <return>return <expr><literal type="string">"Video AUX"</literal></expr>;</return>

<case>case <expr><name>PhysConn_Video_1394</name></expr>:</case> <return>return <expr><literal type="string">"Video 1394"</literal></expr>;</return>

<case>case <expr><name>PhysConn_Video_USB</name></expr>:</case> <return>return <expr><literal type="string">"Video USB"</literal></expr>;</return>

<case>case <expr><name>PhysConn_Video_VideoDecoder</name></expr>:</case> <return>return <expr><literal type="string">"Video Decoder"</literal></expr>;</return>

<case>case <expr><name>PhysConn_Video_VideoEncoder</name></expr>:</case> <return>return <expr><literal type="string">"Video Encoder"</literal></expr>;</return>

<case>case <expr><name>PhysConn_Audio_Tuner</name></expr>:</case> <return>return <expr><literal type="string">"Audio Tuner"</literal></expr>;</return>

<case>case <expr><name>PhysConn_Audio_Line</name></expr>:</case> <return>return <expr><literal type="string">"Audio Line"</literal></expr>;</return>

<case>case <expr><name>PhysConn_Audio_Mic</name></expr>:</case> <return>return <expr><literal type="string">"Audio Microphone"</literal></expr>;</return>

<case>case <expr><name>PhysConn_Audio_AESDigital</name></expr>:</case> <return>return <expr><literal type="string">"Audio AES/EBU Digital"</literal></expr>;</return>

<case>case <expr><name>PhysConn_Audio_SPDIFDigital</name></expr>:</case> <return>return <expr><literal type="string">"Audio S/PDIF"</literal></expr>;</return>

<case>case <expr><name>PhysConn_Audio_SCSI</name></expr>:</case> <return>return <expr><literal type="string">"Audio SCSI"</literal></expr>;</return>

<case>case <expr><name>PhysConn_Audio_AUX</name></expr>:</case> <return>return <expr><literal type="string">"Audio AUX"</literal></expr>;</return>

<case>case <expr><name>PhysConn_Audio_1394</name></expr>:</case> <return>return <expr><literal type="string">"Audio 1394"</literal></expr>;</return>

<case>case <expr><name>PhysConn_Audio_USB</name></expr>:</case> <return>return <expr><literal type="string">"Audio USB"</literal></expr>;</return>

<case>case <expr><name>PhysConn_Audio_AudioDecoder</name></expr>:</case> <return>return <expr><literal type="string">"Audio Decoder"</literal></expr>;</return>

<default>default:</default> <return>return <expr><literal type="string">"Unknown Crossbar Pin TypeâPlease report!"</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>HRESULT</name></type>

<name>setup_crossbar_options</name><parameter_list>(<parameter><decl><type><name>IAMCrossbar</name> <modifier>*</modifier></type><name>cross_bar</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>dshowDeviceType</name></name></type> <name>devtype</name></decl></parameter>, <parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>dshow_ctx</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>count_output_pins</name></decl>, <decl><type ref="prev"/><name>count_input_pins</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>log_level</name> <init>= <expr><ternary><condition><expr><name><name>ctx</name><operator>-&gt;</operator><name>list_options</name></name></expr> ?</condition><then> <expr><name>AV_LOG_INFO</name></expr> </then><else>: <expr><name>AV_LOG_DEBUG</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>video_input_pin</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>crossbar_video_input_pin_number</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>audio_input_pin</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>crossbar_audio_input_pin_number</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>device_name</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>device_name</name><index>[<expr><name>devtype</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>log_level</name></expr></argument>, <argument><expr><literal type="string">"Crossbar Switching Information for %s:\n"</literal></expr></argument>, <argument><expr><name>device_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IAMCrossbar_get_PinCounts</name><argument_list>(<argument><expr><name>cross_bar</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count_output_pins</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count_input_pins</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>hr</name> <operator>!=</operator> <name>S_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unable to get crossbar pin counts\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>hr</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count_output_pins</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>related_pin</name></decl>, <decl><type ref="prev"/><name>pin_type</name></decl>, <decl><type ref="prev"/><name>route_to_pin</name></decl>;</decl_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IAMCrossbar_get_CrossbarPinInfo</name><argument_list>(<argument><expr><name>cross_bar</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>related_pin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pin_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pin_type</name> <operator>==</operator> <name>PhysConn_Video_VideoDecoder</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>video_input_pin</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>log_level</name></expr></argument>, <argument><expr><literal type="string">"Routing video input from pin %d\n"</literal></expr></argument>, <argument><expr><name>video_input_pin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IAMCrossbar_Route</name><argument_list>(<argument><expr><name>cross_bar</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>video_input_pin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>hr</name> <operator>!=</operator> <name>S_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unable to route video input from pin %d\n"</literal></expr></argument>, <argument><expr><name>video_input_pin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>pin_type</name> <operator>==</operator> <name>PhysConn_Audio_AudioDecoder</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>audio_input_pin</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>log_level</name></expr></argument>, <argument><expr><literal type="string">"Routing audio input from pin %d\n"</literal></expr></argument>, <argument><expr><name>audio_input_pin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IAMCrossbar_Route</name><argument_list>(<argument><expr><name>cross_bar</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>audio_input_pin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>hr</name> <operator>!=</operator> <name>S_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unable to route audio input from pin %d\n"</literal></expr></argument>, <argument><expr><name>audio_input_pin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>hr</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Unexpected output pin type, please report the type if you want to use this (%s)"</literal></expr></argument>, <argument><expr><call><name>GetPhysicalPinName</name><argument_list>(<argument><expr><name>pin_type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IAMCrossbar_get_IsRoutedTo</name><argument_list>(<argument><expr><name>cross_bar</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>route_to_pin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>hr</name> <operator>!=</operator> <name>S_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unable to get crossbar is routed to from pin %d\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>hr</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>log_level</name></expr></argument>, <argument><expr><literal type="string">" Crossbar Output pin %d: \"%s\" related output pin: %ld "</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><call><name>GetPhysicalPinName</name><argument_list>(<argument><expr><name>pin_type</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>related_pin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>log_level</name></expr></argument>, <argument><expr><literal type="string">"current input pin: %ld "</literal></expr></argument>, <argument><expr><name>route_to_pin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>log_level</name></expr></argument>, <argument><expr><literal type="string">"compatible input pins: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>count_input_pins</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IAMCrossbar_CanRoute</name><argument_list>(<argument><expr><name>cross_bar</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>hr</name> <operator>==</operator> <name>S_OK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>log_level</name></expr></argument> ,<argument><expr><literal type="string">"%d "</literal></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>log_level</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count_input_pins</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>related_pin</name></decl>, <decl><type ref="prev"/><name>pin_type</name></decl>;</decl_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IAMCrossbar_get_CrossbarPinInfo</name><argument_list>(<argument><expr><name>cross_bar</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>related_pin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pin_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>hr</name> <operator>!=</operator> <name>S_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"unable to get crossbar info audio input from pin %d\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>hr</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>log_level</name></expr></argument>, <argument><expr><literal type="string">" Crossbar Input pin %d - \"%s\" "</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><call><name>GetPhysicalPinName</name><argument_list>(<argument><expr><name>pin_type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>log_level</name></expr></argument>, <argument><expr><literal type="string">"related input pin: %ld\n"</literal></expr></argument>, <argument><expr><name>related_pin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>S_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>HRESULT</name></type>

<name>dshow_try_setup_crossbar_options</name><parameter_list>(<parameter><decl><type><name>ICaptureGraphBuilder2</name> <modifier>*</modifier></type><name>graph_builder2</name></decl></parameter>,

<parameter><decl><type><name>IBaseFilter</name> <modifier>*</modifier></type><name>device_filter</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>dshowDeviceType</name></name></type> <name>devtype</name></decl></parameter>, <parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>dshow_ctx</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IAMCrossbar</name> <modifier>*</modifier></type><name>cross_bar</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IBaseFilter</name> <modifier>*</modifier></type><name>cross_bar_base_filter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IAMTVTuner</name> <modifier>*</modifier></type><name>tv_tuner_filter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IBaseFilter</name> <modifier>*</modifier></type><name>tv_tuner_base_filter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IAMAudioInputMixer</name> <modifier>*</modifier></type><name>tv_audio_filter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IBaseFilter</name> <modifier>*</modifier></type><name>tv_audio_base_filter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>ICaptureGraphBuilder2_FindInterface</name><argument_list>(<argument><expr><name>graph_builder2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>LOOK_UPSTREAM_ONLY</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>GUID</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>,

<argument><expr><name>device_filter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>IID_IAMCrossbar</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>cross_bar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>hr</name> <operator>!=</operator> <name>S_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <name>S_OK</name></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>devtype</name> <operator>==</operator> <name>VideoDevice</name> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>show_video_crossbar_connection_dialog</name></name> <operator>||</operator>

<name>devtype</name> <operator>==</operator> <name>AudioDevice</name> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>show_audio_crossbar_connection_dialog</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IAMCrossbar_QueryInterface</name><argument_list>(<argument><expr><name>cross_bar</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>IID_IBaseFilter</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>cross_bar_base_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>hr</name> <operator>!=</operator> <name>S_OK</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>dshow_show_filter_properties</name><argument_list>(<argument><expr><name>cross_bar_base_filter</name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>devtype</name> <operator>==</operator> <name>VideoDevice</name> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>show_analog_tv_tuner_dialog</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>ICaptureGraphBuilder2_FindInterface</name><argument_list>(<argument><expr><name>graph_builder2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>LOOK_UPSTREAM_ONLY</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name>device_filter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>IID_IAMTVTuner</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>tv_tuner_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>hr</name> <operator>==</operator> <name>S_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IAMCrossbar_QueryInterface</name><argument_list>(<argument><expr><name>tv_tuner_filter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>IID_IBaseFilter</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>tv_tuner_base_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>hr</name> <operator>!=</operator> <name>S_OK</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>dshow_show_filter_properties</name><argument_list>(<argument><expr><name>tv_tuner_base_filter</name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"unable to find a tv tuner to display dialog for!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>devtype</name> <operator>==</operator> <name>AudioDevice</name> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>show_analog_tv_tuner_audio_dialog</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>ICaptureGraphBuilder2_FindInterface</name><argument_list>(<argument><expr><name>graph_builder2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>LOOK_UPSTREAM_ONLY</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name>device_filter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>IID_IAMTVAudio</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>tv_audio_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>hr</name> <operator>==</operator> <name>S_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IAMCrossbar_QueryInterface</name><argument_list>(<argument><expr><name>tv_audio_filter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>IID_IBaseFilter</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>tv_audio_base_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>hr</name> <operator>!=</operator> <name>S_OK</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>dshow_show_filter_properties</name><argument_list>(<argument><expr><name>tv_audio_base_filter</name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"unable to find a tv audio tuner to display dialog for!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>setup_crossbar_options</name><argument_list>(<argument><expr><name>cross_bar</name></expr></argument>, <argument><expr><name>devtype</name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>hr</name> <operator>!=</operator> <name>S_OK</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<label><name>end</name>:</label>

<if_stmt><if>if <condition>(<expr><name>cross_bar</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>IAMCrossbar_Release</name><argument_list>(<argument><expr><name>cross_bar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cross_bar_base_filter</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>IBaseFilter_Release</name><argument_list>(<argument><expr><name>cross_bar_base_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>tv_tuner_filter</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>IAMTVTuner_Release</name><argument_list>(<argument><expr><name>tv_tuner_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>tv_tuner_base_filter</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>IBaseFilter_Release</name><argument_list>(<argument><expr><name>tv_tuner_base_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>hr</name></expr>;</return>

</block_content>}</block></function>

</unit>
