<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavdevice\alsa.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;alsa/asoundlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avdevice.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/channel_layout.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"alsa.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>snd_pcm_format_t</name></type> <name>codec_id_to_pcm_format</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>codec_id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch<condition>(<expr><name>codec_id</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_CODEC_ID_PCM_F64LE</name></expr>:</case> <return>return <expr><name>SND_PCM_FORMAT_FLOAT64_LE</name></expr>;</return>

<case>case <expr><name>AV_CODEC_ID_PCM_F64BE</name></expr>:</case> <return>return <expr><name>SND_PCM_FORMAT_FLOAT64_BE</name></expr>;</return>

<case>case <expr><name>AV_CODEC_ID_PCM_F32LE</name></expr>:</case> <return>return <expr><name>SND_PCM_FORMAT_FLOAT_LE</name></expr>;</return>

<case>case <expr><name>AV_CODEC_ID_PCM_F32BE</name></expr>:</case> <return>return <expr><name>SND_PCM_FORMAT_FLOAT_BE</name></expr>;</return>

<case>case <expr><name>AV_CODEC_ID_PCM_S32LE</name></expr>:</case> <return>return <expr><name>SND_PCM_FORMAT_S32_LE</name></expr>;</return>

<case>case <expr><name>AV_CODEC_ID_PCM_S32BE</name></expr>:</case> <return>return <expr><name>SND_PCM_FORMAT_S32_BE</name></expr>;</return>

<case>case <expr><name>AV_CODEC_ID_PCM_U32LE</name></expr>:</case> <return>return <expr><name>SND_PCM_FORMAT_U32_LE</name></expr>;</return>

<case>case <expr><name>AV_CODEC_ID_PCM_U32BE</name></expr>:</case> <return>return <expr><name>SND_PCM_FORMAT_U32_BE</name></expr>;</return>

<case>case <expr><name>AV_CODEC_ID_PCM_S24LE</name></expr>:</case> <return>return <expr><name>SND_PCM_FORMAT_S24_3LE</name></expr>;</return>

<case>case <expr><name>AV_CODEC_ID_PCM_S24BE</name></expr>:</case> <return>return <expr><name>SND_PCM_FORMAT_S24_3BE</name></expr>;</return>

<case>case <expr><name>AV_CODEC_ID_PCM_U24LE</name></expr>:</case> <return>return <expr><name>SND_PCM_FORMAT_U24_3LE</name></expr>;</return>

<case>case <expr><name>AV_CODEC_ID_PCM_U24BE</name></expr>:</case> <return>return <expr><name>SND_PCM_FORMAT_U24_3BE</name></expr>;</return>

<case>case <expr><name>AV_CODEC_ID_PCM_S16LE</name></expr>:</case> <return>return <expr><name>SND_PCM_FORMAT_S16_LE</name></expr>;</return>

<case>case <expr><name>AV_CODEC_ID_PCM_S16BE</name></expr>:</case> <return>return <expr><name>SND_PCM_FORMAT_S16_BE</name></expr>;</return>

<case>case <expr><name>AV_CODEC_ID_PCM_U16LE</name></expr>:</case> <return>return <expr><name>SND_PCM_FORMAT_U16_LE</name></expr>;</return>

<case>case <expr><name>AV_CODEC_ID_PCM_U16BE</name></expr>:</case> <return>return <expr><name>SND_PCM_FORMAT_U16_BE</name></expr>;</return>

<case>case <expr><name>AV_CODEC_ID_PCM_S8</name></expr>:</case> <return>return <expr><name>SND_PCM_FORMAT_S8</name></expr>;</return>

<case>case <expr><name>AV_CODEC_ID_PCM_U8</name></expr>:</case> <return>return <expr><name>SND_PCM_FORMAT_U8</name></expr>;</return>

<case>case <expr><name>AV_CODEC_ID_PCM_MULAW</name></expr>:</case> <return>return <expr><name>SND_PCM_FORMAT_MU_LAW</name></expr>;</return>

<case>case <expr><name>AV_CODEC_ID_PCM_ALAW</name></expr>:</case> <return>return <expr><name>SND_PCM_FORMAT_A_LAW</name></expr>;</return>

<default>default:</default> <return>return <expr><name>SND_PCM_FORMAT_UNKNOWN</name></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAKE_REORDER_FUNC</name><parameter_list>(<parameter><type><name>NAME</name></type></parameter>, <parameter><type><name>TYPE</name></type></parameter>, <parameter><type><name>CHANNELS</name></type></parameter>, <parameter><type><name>LAYOUT</name></type></parameter>, <parameter><type><name>MAP</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void alsa_reorder_ ##NAME ##_ ##LAYOUT(const void *in_v, void *out_v, int n) { const TYPE *in = in_v; TYPE *out = out_v; while (n-- &gt; 0) { MAP in += CHANNELS; out += CHANNELS; } }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAKE_REORDER_FUNCS</name><parameter_list>(<parameter><type><name>CHANNELS</name></type></parameter>, <parameter><type><name>LAYOUT</name></type></parameter>, <parameter><type><name>MAP</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>MAKE_REORDER_FUNC(int8, int8_t, CHANNELS, LAYOUT, MAP) MAKE_REORDER_FUNC(int16, int16_t, CHANNELS, LAYOUT, MAP) MAKE_REORDER_FUNC(int32, int32_t, CHANNELS, LAYOUT, MAP) MAKE_REORDER_FUNC(f32, float, CHANNELS, LAYOUT, MAP)</cpp:value></cpp:define>

<macro><name>MAKE_REORDER_FUNCS</name><argument_list>(<argument><literal type="number">5</literal></argument>, <argument>out_50</argument>, \

<argument>out[<literal type="number">0</literal>] = in[<literal type="number">0</literal>]; \

out[<literal type="number">1</literal>] = in[<literal type="number">1</literal>]; \

out[<literal type="number">2</literal>] = in[<literal type="number">3</literal>]; \

out[<literal type="number">3</literal>] = in[<literal type="number">4</literal>]; \

out[<literal type="number">4</literal>] = in[<literal type="number">2</literal>];</argument> \

)</argument_list></macro>

<macro><name>MAKE_REORDER_FUNCS</name><argument_list>(<argument><literal type="number">6</literal></argument>, <argument>out_51</argument>, \

<argument>out[<literal type="number">0</literal>] = in[<literal type="number">0</literal>]; \

out[<literal type="number">1</literal>] = in[<literal type="number">1</literal>]; \

out[<literal type="number">2</literal>] = in[<literal type="number">4</literal>]; \

out[<literal type="number">3</literal>] = in[<literal type="number">5</literal>]; \

out[<literal type="number">4</literal>] = in[<literal type="number">2</literal>]; \

out[<literal type="number">5</literal>] = in[<literal type="number">3</literal>];</argument> \

)</argument_list></macro>

<macro><name>MAKE_REORDER_FUNCS</name><argument_list>(<argument><literal type="number">8</literal></argument>, <argument>out_71</argument>, \

<argument>out[<literal type="number">0</literal>] = in[<literal type="number">0</literal>]; \

out[<literal type="number">1</literal>] = in[<literal type="number">1</literal>]; \

out[<literal type="number">2</literal>] = in[<literal type="number">4</literal>]; \

out[<literal type="number">3</literal>] = in[<literal type="number">5</literal>]; \

out[<literal type="number">4</literal>] = in[<literal type="number">2</literal>]; \

out[<literal type="number">5</literal>] = in[<literal type="number">3</literal>]; \

out[<literal type="number">6</literal>] = in[<literal type="number">6</literal>]; \

out[<literal type="number">7</literal>] = in[<literal type="number">7</literal>];</argument> \

)</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FORMAT_I8</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FORMAT_I16</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FORMAT_I32</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FORMAT_F32</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PICK_REORDER</name><parameter_list>(<parameter><type><name>layout</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>switch(format) {case FORMAT_I8: s-&gt;reorder_func = alsa_reorder_int8_out_ ##layout; break;case FORMAT_I16: s-&gt;reorder_func = alsa_reorder_int16_out_ ##layout; break;case FORMAT_I32: s-&gt;reorder_func = alsa_reorder_int32_out_ ##layout; break;case FORMAT_F32: s-&gt;reorder_func = alsa_reorder_f32_out_ ##layout; break;}</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>find_reorder_func</name><parameter_list>(<parameter><decl><type><name>AlsaData</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>codec_id</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>layout</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>out</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>format</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>out</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>layout</name> <operator>==</operator> <name>AV_CH_LAYOUT_QUAD</name> <operator>||</operator> <name>layout</name> <operator>==</operator> <name>AV_CH_LAYOUT_2_2</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name>codec_id</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_CODEC_ID_PCM_S8</name></expr>:</case>

<case>case <expr><name>AV_CODEC_ID_PCM_U8</name></expr>:</case>

<case>case <expr><name>AV_CODEC_ID_PCM_ALAW</name></expr>:</case>

<case>case <expr><name>AV_CODEC_ID_PCM_MULAW</name></expr>:</case> <expr_stmt><expr><name>format</name> <operator>=</operator> <name>FORMAT_I8</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>AV_CODEC_ID_PCM_S16LE</name></expr>:</case>

<case>case <expr><name>AV_CODEC_ID_PCM_S16BE</name></expr>:</case>

<case>case <expr><name>AV_CODEC_ID_PCM_U16LE</name></expr>:</case>

<case>case <expr><name>AV_CODEC_ID_PCM_U16BE</name></expr>:</case> <expr_stmt><expr><name>format</name> <operator>=</operator> <name>FORMAT_I16</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>AV_CODEC_ID_PCM_S32LE</name></expr>:</case>

<case>case <expr><name>AV_CODEC_ID_PCM_S32BE</name></expr>:</case>

<case>case <expr><name>AV_CODEC_ID_PCM_U32LE</name></expr>:</case>

<case>case <expr><name>AV_CODEC_ID_PCM_U32BE</name></expr>:</case> <expr_stmt><expr><name>format</name> <operator>=</operator> <name>FORMAT_I32</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>AV_CODEC_ID_PCM_F32LE</name></expr>:</case>

<case>case <expr><name>AV_CODEC_ID_PCM_F32BE</name></expr>:</case> <expr_stmt><expr><name>format</name> <operator>=</operator> <name>FORMAT_F32</name></expr>;</expr_stmt> <break>break;</break>

<default>default:</default> <return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>layout</name> <operator>==</operator> <name>AV_CH_LAYOUT_5POINT0_BACK</name> <operator>||</operator> <name>layout</name> <operator>==</operator> <name>AV_CH_LAYOUT_5POINT0</name></expr>)</condition><block type="pseudo"><block_content>

<macro><name>PICK_REORDER</name><argument_list>(<argument><literal type="number">50</literal></argument>)</argument_list></macro></block_content></block>

<if_stmt><if type="elseif">else if <condition>(<expr><name>layout</name> <operator>==</operator> <name>AV_CH_LAYOUT_5POINT1_BACK</name> <operator>||</operator> <name>layout</name> <operator>==</operator> <name>AV_CH_LAYOUT_5POINT1</name></expr>)</condition><block type="pseudo"><block_content>

<macro><name>PICK_REORDER</name><argument_list>(<argument><literal type="number">51</literal></argument>)</argument_list></macro></block_content></block>

<if_stmt><if type="elseif">else if <condition>(<expr><name>layout</name> <operator>==</operator> <name>AV_CH_LAYOUT_7POINT1</name></expr>)</condition><block type="pseudo"><block_content>

<macro><name>PICK_REORDER</name><argument_list>(<argument><literal type="number">71</literal></argument>)</argument_list></macro>

<return>return <expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>reorder_func</name></name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt></if></if_stmt></if></if_stmt>

</block_content>}</block></function>

<function><type><name>av_cold</name> <name>int</name></type> <name>ff_alsa_open</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>snd_pcm_stream_t</name></type> <name>mode</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>sample_rate</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>channels</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVCodecID</name></name> <modifier>*</modifier></type><name>codec_id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AlsaData</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>audio_device</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>, <decl><type ref="prev"/><name>flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>snd_pcm_format_t</name></type> <name>format</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>snd_pcm_t</name> <modifier>*</modifier></type><name>h</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>snd_pcm_hw_params_t</name> <modifier>*</modifier></type><name>hw_params</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>snd_pcm_uframes_t</name></type> <name>buffer_size</name></decl>, <decl><type ref="prev"/><name>period_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>layout</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>streams</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>codecpar</name><operator>-&gt;</operator><name>channel_layout</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>url</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>audio_device</name> <operator>=</operator> <literal type="string">"default"</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>audio_device</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>url</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>codec_id</name> <operator>==</operator> <name>AV_CODEC_ID_NONE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>codec_id</name> <operator>=</operator> <name>DEFAULT_CODEC_ID</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>format</name> <operator>=</operator> <call><name>codec_id_to_pcm_format</name><argument_list>(<argument><expr><operator>*</operator><name>codec_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>format</name> <operator>==</operator> <name>SND_PCM_FORMAT_UNKNOWN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"sample format 0x%04x is not supported\n"</literal></expr></argument>, <argument><expr><operator>*</operator><name>codec_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>=</operator> <call><name>av_get_bits_per_sample</name><argument_list>(<argument><expr><operator>*</operator><name>codec_id</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">8</literal> <operator>*</operator> <name>channels</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AVFMT_FLAG_NONBLOCK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>flags</name> <operator>=</operator> <name>SND_PCM_NONBLOCK</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>snd_pcm_open</name><argument_list>(<argument><expr><operator>&amp;</operator><name>h</name></expr></argument>, <argument><expr><name>audio_device</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"cannot open audio device %s (%s)\n"</literal></expr></argument>,

<argument><expr><name>audio_device</name></expr></argument>, <argument><expr><call><name>snd_strerror</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>snd_pcm_hw_params_malloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hw_params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"cannot allocate hardware parameter structure (%s)\n"</literal></expr></argument>,

<argument><expr><call><name>snd_strerror</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail1</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>snd_pcm_hw_params_any</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>hw_params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"cannot initialize hardware parameter structure (%s)\n"</literal></expr></argument>,

<argument><expr><call><name>snd_strerror</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>snd_pcm_hw_params_set_access</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>hw_params</name></expr></argument>, <argument><expr><name>SND_PCM_ACCESS_RW_INTERLEAVED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"cannot set access type (%s)\n"</literal></expr></argument>,

<argument><expr><call><name>snd_strerror</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>snd_pcm_hw_params_set_format</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>hw_params</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"cannot set sample format 0x%04x %d (%s)\n"</literal></expr></argument>,

<argument><expr><operator>*</operator><name>codec_id</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><call><name>snd_strerror</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>snd_pcm_hw_params_set_rate_near</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>hw_params</name></expr></argument>, <argument><expr><name>sample_rate</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"cannot set sample rate (%s)\n"</literal></expr></argument>,

<argument><expr><call><name>snd_strerror</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>snd_pcm_hw_params_set_channels</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>hw_params</name></expr></argument>, <argument><expr><name>channels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"cannot set channel count to %d (%s)\n"</literal></expr></argument>,

<argument><expr><name>channels</name></expr></argument>, <argument><expr><call><name>snd_strerror</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>snd_pcm_hw_params_get_buffer_size_max</name><argument_list>(<argument><expr><name>hw_params</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buffer_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>buffer_size</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>buffer_size</name></expr></argument>, <argument><expr><name>ALSA_BUFFER_SIZE_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>snd_pcm_hw_params_set_buffer_size_near</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>hw_params</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buffer_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"cannot set ALSA buffer size (%s)\n"</literal></expr></argument>,

<argument><expr><call><name>snd_strerror</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>snd_pcm_hw_params_get_period_size_min</name><argument_list>(<argument><expr><name>hw_params</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>period_size</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>period_size</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>period_size</name> <operator>=</operator> <name>buffer_size</name> <operator>/</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>snd_pcm_hw_params_set_period_size_near</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>hw_params</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>period_size</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"cannot set ALSA period size (%s)\n"</literal></expr></argument>,

<argument><expr><call><name>snd_strerror</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>period_size</name></name> <operator>=</operator> <name>period_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>snd_pcm_hw_params</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>hw_params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"cannot set parameters (%s)\n"</literal></expr></argument>,

<argument><expr><call><name>snd_strerror</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>snd_pcm_hw_params_free</name><argument_list>(<argument><expr><name>hw_params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>channels</name> <operator>&gt;</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>layout</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>find_reorder_func</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>*</operator><name>codec_id</name></expr></argument>, <argument><expr><name>layout</name></expr></argument>, <argument><expr><name>mode</name> <operator>==</operator> <name>SND_PCM_STREAM_PLAYBACK</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_get_channel_layout_string</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>channels</name></expr></argument>, <argument><expr><name>layout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"ALSA channel layout unknown or unimplemented for %s %s.\n"</literal></expr></argument>,

<argument><expr><name>name</name></expr></argument>, <argument><expr><ternary><condition><expr><name>mode</name> <operator>==</operator> <name>SND_PCM_STREAM_PLAYBACK</name></expr> ?</condition><then> <expr><literal type="string">"playback"</literal></expr> </then><else>: <expr><literal type="string">"capture"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>reorder_func</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>reorder_buf_size</name></name> <operator>=</operator> <name>buffer_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>reorder_buf</name></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>reorder_buf_size</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>frame_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>reorder_buf</name></name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail1</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>snd_pcm_hw_params_free</name><argument_list>(<argument><expr><name>hw_params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>fail1</name>:</label>

<expr_stmt><expr><call><name>snd_pcm_close</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>av_cold</name> <name>int</name></type> <name>ff_alsa_close</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s1</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AlsaData</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>s1</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>snd_pcm_stream</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SND_PCM_STREAM_PLAYBACK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>snd_pcm_nonblock</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snd_pcm_drain</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>reorder_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>CONFIG_ALSA_INDEV</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_timefilter_destroy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>timefilter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>snd_pcm_close</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_alsa_xrun_recover</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>err</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AlsaData</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>s1</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>snd_pcm_t</name> <modifier>*</modifier></type><name>handle</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>h</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"ALSA buffer xrun.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <operator>-</operator><name>EPIPE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>snd_pcm_prepare</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"cannot recover from underrun (snd_pcm_prepare failed: %s)\n"</literal></expr></argument>, <argument><expr><call><name>snd_strerror</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>err</name> <operator>==</operator> <operator>-</operator><name>ESTRPIPE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"-ESTRPIPE... Unsupported!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_alsa_extend_reorder_buf</name><parameter_list>(<parameter><decl><type><name>AlsaData</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>min_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>reorder_buf_size</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>size</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>size</name> <operator>&lt;</operator> <name>min_size</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>size</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>av_realloc_array</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>reorder_buf</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>frame_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>r</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>reorder_buf</name></name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>reorder_buf_size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_alsa_get_device_list</name><parameter_list>(<parameter><decl><type><name>AVDeviceInfoList</name> <modifier>*</modifier></type><name>device_list</name></decl></parameter>, <parameter><decl><type><name>snd_pcm_stream_t</name></type> <name>stream_type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>hints</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>descr</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>io</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVDeviceInfo</name> <modifier>*</modifier></type><name>new_device</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><ternary><condition><expr><name>stream_type</name> <operator>==</operator> <name>SND_PCM_STREAM_PLAYBACK</name></expr> ?</condition><then> <expr><literal type="string">"Output"</literal></expr> </then><else>: <expr><literal type="string">"Input"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>snd_device_name_hint</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"pcm"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_EXTERNAL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name>hints</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><name>n</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>ret</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>snd_device_name_get_hint</name><argument_list>(<argument><expr><operator>*</operator><name>n</name></expr></argument>, <argument><expr><literal type="string">"NAME"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>descr</name> <operator>=</operator> <call><name>snd_device_name_get_hint</name><argument_list>(<argument><expr><operator>*</operator><name>n</name></expr></argument>, <argument><expr><literal type="string">"DESC"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>io</name> <operator>=</operator> <call><name>snd_device_name_get_hint</name><argument_list>(<argument><expr><operator>*</operator><name>n</name></expr></argument>, <argument><expr><literal type="string">"IOID"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>io</name> <operator>||</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>new_device</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>AVDeviceInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>new_device</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>new_device</name><operator>-&gt;</operator><name>device_name</name></name> <operator>=</operator> <call><name>av_strdup</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tmp</name> <operator>=</operator> <call><name>strrchr</name><argument_list>(<argument><expr><name>descr</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>tmp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>new_device</name><operator>-&gt;</operator><name>device_description</name></name> <operator>=</operator> <call><name>av_strdup</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tmp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>new_device</name><operator>-&gt;</operator><name>device_description</name></name> <operator>=</operator> <call><name>av_strdup</name><argument_list>(<argument><expr><name>descr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>new_device</name><operator>-&gt;</operator><name>device_description</name></name> <operator>||</operator> <operator>!</operator><name><name>new_device</name><operator>-&gt;</operator><name>device_name</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_dynarray_add_nofree</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>device_list</name><operator>-&gt;</operator><name>devices</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>device_list</name><operator>-&gt;</operator><name>nb_devices</name></name></expr></argument>, <argument><expr><name>new_device</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>new_device</name><operator>-&gt;</operator><name>device_name</name></name></expr></argument>, <argument><expr><literal type="string">"default"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>device_list</name><operator>-&gt;</operator><name>default_device</name></name> <operator>=</operator> <name><name>device_list</name><operator>-&gt;</operator><name>nb_devices</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>new_device</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>io</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>descr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>new_device</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name><name>new_device</name><operator>-&gt;</operator><name>device_description</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name><name>new_device</name><operator>-&gt;</operator><name>device_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>new_device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>snd_device_name_free_hint</name><argument_list>(<argument><expr><name>hints</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

</unit>
