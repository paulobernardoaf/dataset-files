<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavdevice\xv.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/Xlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/extensions/Xv.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/extensions/XShm.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/extensions/Xvlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/shm.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixdesc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/imgutils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavformat/internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avdevice.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GC</name></type> <name>gc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Window</name></type> <name>window</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>window_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>window_title</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>window_width</name></decl>, <name>window_height</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>window_x</name></decl>, <name>window_y</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dest_x</name></decl>, <name>dest_y</name>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>dest_w</name></decl>, <name>dest_h</name>;</decl_stmt> 

<decl_stmt><decl><type><name>Display</name><modifier>*</modifier></type> <name>display</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>display_name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>XvImage</name><modifier>*</modifier></type> <name>yuv_image</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>image_format</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>image_width</name></decl>, <name>image_height</name>;</decl_stmt>

<decl_stmt><decl><type><name>XShmSegmentInfo</name></type> <name>yuv_shminfo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>xv_port</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Atom</name></type> <name>wm_delete_message</name></decl>;</decl_stmt>

}</block></struct></type> <name>XVContext</name>;</typedef>

<typedef>typedef <type><struct>struct <name>XVTagFormatMap</name>

<block>{

<decl_stmt><decl><type><name>int</name></type> <name>tag</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>format</name></decl>;</decl_stmt>

}</block></struct></type> <name>XVTagFormatMap</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>XVTagFormatMap</name></type> <name><name>tag_codec_map</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'I'</literal></expr></argument>,<argument><expr><literal type="char">'4'</literal></expr></argument>,<argument><expr><literal type="char">'2'</literal></expr></argument>,<argument><expr><literal type="char">'0'</literal></expr></argument>)</argument_list></call></expr>, <expr><name>AV_PIX_FMT_YUV420P</name></expr> }</block></expr>,

<expr><block>{ <expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'U'</literal></expr></argument>,<argument><expr><literal type="char">'Y'</literal></expr></argument>,<argument><expr><literal type="char">'V'</literal></expr></argument>,<argument><expr><literal type="char">'Y'</literal></expr></argument>)</argument_list></call></expr>, <expr><name>AV_PIX_FMT_UYVY422</name></expr> }</block></expr>,

<expr><block>{ <expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'Y'</literal></expr></argument>,<argument><expr><literal type="char">'U'</literal></expr></argument>,<argument><expr><literal type="char">'Y'</literal></expr></argument>,<argument><expr><literal type="char">'2'</literal></expr></argument>)</argument_list></call></expr>, <expr><name>AV_PIX_FMT_YUYV422</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><name>AV_PIX_FMT_NONE</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>xv_get_tag_from_format</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>format</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>XVTagFormatMap</name> <modifier>*</modifier></type><name>m</name> <init>= <expr><name>tag_codec_map</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>m</name><operator>-&gt;</operator><name>tag</name></name></expr>;</condition> <incr><expr><name>m</name> <operator>=</operator> <operator>&amp;</operator><name><name>tag_codec_map</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>format</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>m</name><operator>-&gt;</operator><name>tag</name></name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>xv_write_trailer</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>XVContext</name> <modifier>*</modifier></type><name>xv</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>xv</name><operator>-&gt;</operator><name>display</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>XShmDetach</name><argument_list>(<argument><expr><name><name>xv</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>xv</name><operator>-&gt;</operator><name>yuv_shminfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>xv</name><operator>-&gt;</operator><name>yuv_image</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>shmdt</name><argument_list>(<argument><expr><name><name>xv</name><operator>-&gt;</operator><name>yuv_image</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>XFree</name><argument_list>(<argument><expr><name><name>xv</name><operator>-&gt;</operator><name>yuv_image</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>xv</name><operator>-&gt;</operator><name>gc</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>XFreeGC</name><argument_list>(<argument><expr><name><name>xv</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>xv</name><operator>-&gt;</operator><name>gc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>XCloseDisplay</name><argument_list>(<argument><expr><name><name>xv</name><operator>-&gt;</operator><name>display</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>xv_write_header</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>XVContext</name> <modifier>*</modifier></type><name>xv</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>num_adaptors</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>XvAdaptorInfo</name> <modifier>*</modifier></type><name>ai</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>XvImageFormatValues</name> <modifier>*</modifier></type><name>fv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>XColor</name></type> <name>fgcolor</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>XWindowAttributes</name></type> <name>window_attrs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num_formats</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>tag</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodecParameters</name> <modifier>*</modifier></type><name>par</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>codecpar</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name> <operator>&gt;</operator> <literal type="number">1</literal>

<operator>||</operator> <name><name>par</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>!=</operator> <name>AVMEDIA_TYPE_VIDEO</name>

<operator>||</operator> <name><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>!=</operator> <name>AV_CODEC_ID_RAWVIDEO</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Only supports one rawvideo stream\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>tag</name> <operator>=</operator> <call><name>xv_get_tag_from_format</name><argument_list>(<argument><expr><name><name>par</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Unsupported pixel format '%s', only yuv420p, uyvy422, yuyv422 are currently supported\n"</literal></expr></argument>,

<argument><expr><call><name>av_get_pix_fmt_name</name><argument_list>(<argument><expr><name><name>par</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>xv</name><operator>-&gt;</operator><name>image_format</name></name> <operator>=</operator> <name><name>par</name><operator>-&gt;</operator><name>format</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xv</name><operator>-&gt;</operator><name>display</name></name> <operator>=</operator> <call><name>XOpenDisplay</name><argument_list>(<argument><expr><name><name>xv</name><operator>-&gt;</operator><name>display_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>xv</name><operator>-&gt;</operator><name>display</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Could not open the X11 display '%s'\n"</literal></expr></argument>, <argument><expr><name><name>xv</name><operator>-&gt;</operator><name>display_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>xv</name><operator>-&gt;</operator><name>image_width</name></name> <operator>=</operator> <name><name>par</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xv</name><operator>-&gt;</operator><name>image_height</name></name> <operator>=</operator> <name><name>par</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>xv</name><operator>-&gt;</operator><name>window_width</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>xv</name><operator>-&gt;</operator><name>window_height</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>AVRational</name></type> <name>sar</name> <init>= <expr><name><name>par</name><operator>-&gt;</operator><name>sample_aspect_ratio</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>xv</name><operator>-&gt;</operator><name>window_width</name></name> <operator>=</operator> <name><name>par</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xv</name><operator>-&gt;</operator><name>window_height</name></name> <operator>=</operator> <name><name>par</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sar</name><operator>.</operator><name>num</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>sar</name><operator>.</operator><name>num</name></name> <operator>&gt;</operator> <name><name>sar</name><operator>.</operator><name>den</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>xv</name><operator>-&gt;</operator><name>window_width</name></name> <operator>=</operator> <call><name>av_rescale</name><argument_list>(<argument><expr><name><name>xv</name><operator>-&gt;</operator><name>window_width</name></name></expr></argument>, <argument><expr><name><name>sar</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><name><name>sar</name><operator>.</operator><name>den</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sar</name><operator>.</operator><name>num</name></name> <operator>&lt;</operator> <name><name>sar</name><operator>.</operator><name>den</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>xv</name><operator>-&gt;</operator><name>window_height</name></name> <operator>=</operator> <call><name>av_rescale</name><argument_list>(<argument><expr><name><name>xv</name><operator>-&gt;</operator><name>window_height</name></name></expr></argument>, <argument><expr><name><name>sar</name><operator>.</operator><name>den</name></name></expr></argument>, <argument><expr><name><name>sar</name><operator>.</operator><name>num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>xv</name><operator>-&gt;</operator><name>window_id</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>xv</name><operator>-&gt;</operator><name>window</name></name> <operator>=</operator> <call><name>XCreateSimpleWindow</name><argument_list>(<argument><expr><name><name>xv</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><call><name>DefaultRootWindow</name><argument_list>(<argument><expr><name><name>xv</name><operator>-&gt;</operator><name>display</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>xv</name><operator>-&gt;</operator><name>window_x</name></name></expr></argument>, <argument><expr><name><name>xv</name><operator>-&gt;</operator><name>window_y</name></name></expr></argument>,

<argument><expr><name><name>xv</name><operator>-&gt;</operator><name>window_width</name></name></expr></argument>, <argument><expr><name><name>xv</name><operator>-&gt;</operator><name>window_height</name></name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>xv</name><operator>-&gt;</operator><name>window_title</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>xv</name><operator>-&gt;</operator><name>window_title</name></name> <operator>=</operator> <call><name>av_strdup</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>url</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>XStoreName</name><argument_list>(<argument><expr><name><name>xv</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>xv</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><name><name>xv</name><operator>-&gt;</operator><name>window_title</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xv</name><operator>-&gt;</operator><name>wm_delete_message</name></name> <operator>=</operator> <call><name>XInternAtom</name><argument_list>(<argument><expr><name><name>xv</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><literal type="string">"WM_DELETE_WINDOW"</literal></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XSetWMProtocols</name><argument_list>(<argument><expr><name><name>xv</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>xv</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>xv</name><operator>-&gt;</operator><name>wm_delete_message</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XMapWindow</name><argument_list>(<argument><expr><name><name>xv</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>xv</name><operator>-&gt;</operator><name>window</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>xv</name><operator>-&gt;</operator><name>window</name></name> <operator>=</operator> <name><name>xv</name><operator>-&gt;</operator><name>window_id</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>XvQueryAdaptors</name><argument_list>(<argument><expr><name><name>xv</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><call><name>DefaultRootWindow</name><argument_list>(<argument><expr><name><name>xv</name><operator>-&gt;</operator><name>display</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>num_adaptors</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ai</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>Success</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_EXTERNAL</name></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>num_adaptors</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"No X-Video adaptors present\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENODEV</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>xv</name><operator>-&gt;</operator><name>xv_port</name></name> <operator>=</operator> <name><name>ai</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>base_id</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XvFreeAdaptorInfo</name><argument_list>(<argument><expr><name>ai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fv</name> <operator>=</operator> <call><name>XvListImageFormats</name><argument_list>(<argument><expr><name><name>xv</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>xv</name><operator>-&gt;</operator><name>xv_port</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>num_formats</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fv</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_EXTERNAL</name></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>num_formats</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>fv</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>id</name> <operator>==</operator> <name>tag</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>XFree</name><argument_list>(<argument><expr><name>fv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&gt;=</operator> <name>num_formats</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Device does not support pixel format %s, aborting\n"</literal></expr></argument>,

<argument><expr><call><name>av_get_pix_fmt_name</name><argument_list>(<argument><expr><name><name>par</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>xv</name><operator>-&gt;</operator><name>gc</name></name> <operator>=</operator> <call><name>XCreateGC</name><argument_list>(<argument><expr><name><name>xv</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>xv</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xv</name><operator>-&gt;</operator><name>image_width</name></name> <operator>=</operator> <name><name>par</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xv</name><operator>-&gt;</operator><name>image_height</name></name> <operator>=</operator> <name><name>par</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xv</name><operator>-&gt;</operator><name>yuv_image</name></name> <operator>=</operator> <call><name>XvShmCreateImage</name><argument_list>(<argument><expr><name><name>xv</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>xv</name><operator>-&gt;</operator><name>xv_port</name></name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name><name>xv</name><operator>-&gt;</operator><name>image_width</name></name></expr></argument>, <argument><expr><name><name>xv</name><operator>-&gt;</operator><name>image_height</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>xv</name><operator>-&gt;</operator><name>yuv_shminfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xv</name><operator>-&gt;</operator><name>yuv_shminfo</name><operator>.</operator><name>shmid</name></name> <operator>=</operator> <call><name>shmget</name><argument_list>(<argument><expr><name>IPC_PRIVATE</name></expr></argument>, <argument><expr><name><name>xv</name><operator>-&gt;</operator><name>yuv_image</name><operator>-&gt;</operator><name>data_size</name></name></expr></argument>,

<argument><expr><name>IPC_CREAT</name> <operator>|</operator> <literal type="number">0777</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xv</name><operator>-&gt;</operator><name>yuv_shminfo</name><operator>.</operator><name>shmaddr</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>shmat</name><argument_list>(<argument><expr><name><name>xv</name><operator>-&gt;</operator><name>yuv_shminfo</name><operator>.</operator><name>shmid</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xv</name><operator>-&gt;</operator><name>yuv_image</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>xv</name><operator>-&gt;</operator><name>yuv_shminfo</name><operator>.</operator><name>shmaddr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xv</name><operator>-&gt;</operator><name>yuv_shminfo</name><operator>.</operator><name>readOnly</name></name> <operator>=</operator> <name>False</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XShmAttach</name><argument_list>(<argument><expr><name><name>xv</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>xv</name><operator>-&gt;</operator><name>yuv_shminfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XSync</name><argument_list>(<argument><expr><name><name>xv</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>shmctl</name><argument_list>(<argument><expr><name><name>xv</name><operator>-&gt;</operator><name>yuv_shminfo</name><operator>.</operator><name>shmid</name></name></expr></argument>, <argument><expr><name>IPC_RMID</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XGetWindowAttributes</name><argument_list>(<argument><expr><name><name>xv</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>xv</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>window_attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fgcolor</name><operator>.</operator><name>red</name></name> <operator>=</operator> <name><name>fgcolor</name><operator>.</operator><name>green</name></name> <operator>=</operator> <name><name>fgcolor</name><operator>.</operator><name>blue</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fgcolor</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <name>DoRed</name> <operator>|</operator> <name>DoGreen</name> <operator>|</operator> <name>DoBlue</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XAllocColor</name><argument_list>(<argument><expr><name><name>xv</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>window_attrs</name><operator>.</operator><name>colormap</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fgcolor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XSetForeground</name><argument_list>(<argument><expr><name><name>xv</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>xv</name><operator>-&gt;</operator><name>gc</name></name></expr></argument>, <argument><expr><name><name>fgcolor</name><operator>.</operator><name>pixel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xv</name><operator>-&gt;</operator><name>window_width</name></name> <operator>=</operator> <name><name>xv</name><operator>-&gt;</operator><name>window_height</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>xv_write_trailer</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>compute_display_area</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>XVContext</name> <modifier>*</modifier></type><name>xv</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVRational</name></type> <name>sar</name></decl>, <decl><type ref="prev"/><name>dar</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodecParameters</name> <modifier>*</modifier></type><name>par</name> <init>= <expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>sar</name> <operator>=</operator> <ternary><condition><expr><name><name>st</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>num</name></name></expr> ?</condition><then> <expr><name><name>st</name><operator>-&gt;</operator><name>sample_aspect_ratio</name></name></expr> </then><else>: <expr><operator>(</operator><name>AVRational</name><operator>)</operator><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>dar</name> <operator>=</operator> <macro><name>av_mul_q</name><argument_list>(<argument>sar</argument>, <argument>(AVRational){ par-&gt;width</argument>, <argument>par-&gt;height }</argument>)</argument_list></macro></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><macro><name>av_cmp_q</name><argument_list>(<argument>dar</argument>, <argument>(AVRational){ xv-&gt;dest_w</argument>, <argument>xv-&gt;dest_h }</argument>)</argument_list></macro> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>xv</name><operator>-&gt;</operator><name>dest_y</name></name> <operator>=</operator> <name><name>xv</name><operator>-&gt;</operator><name>dest_h</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xv</name><operator>-&gt;</operator><name>dest_x</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xv</name><operator>-&gt;</operator><name>dest_h</name></name> <operator>=</operator> <call><name>av_rescale</name><argument_list>(<argument><expr><name><name>xv</name><operator>-&gt;</operator><name>dest_w</name></name></expr></argument>, <argument><expr><name><name>dar</name><operator>.</operator><name>den</name></name></expr></argument>, <argument><expr><name><name>dar</name><operator>.</operator><name>num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xv</name><operator>-&gt;</operator><name>dest_y</name></name> <operator>-=</operator> <name><name>xv</name><operator>-&gt;</operator><name>dest_h</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xv</name><operator>-&gt;</operator><name>dest_y</name></name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>xv</name><operator>-&gt;</operator><name>dest_x</name></name> <operator>=</operator> <name><name>xv</name><operator>-&gt;</operator><name>dest_w</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xv</name><operator>-&gt;</operator><name>dest_y</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xv</name><operator>-&gt;</operator><name>dest_w</name></name> <operator>=</operator> <call><name>av_rescale</name><argument_list>(<argument><expr><name><name>xv</name><operator>-&gt;</operator><name>dest_h</name></name></expr></argument>, <argument><expr><name><name>dar</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><name><name>dar</name><operator>.</operator><name>den</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xv</name><operator>-&gt;</operator><name>dest_x</name></name> <operator>-=</operator> <name><name>xv</name><operator>-&gt;</operator><name>dest_w</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xv</name><operator>-&gt;</operator><name>dest_x</name></name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>xv_repaint</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>XVContext</name> <modifier>*</modifier></type><name>xv</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>XWindowAttributes</name></type> <name>window_attrs</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>XGetWindowAttributes</name><argument_list>(<argument><expr><name><name>xv</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>xv</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>window_attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>window_attrs</name><operator>.</operator><name>width</name></name> <operator>!=</operator> <name><name>xv</name><operator>-&gt;</operator><name>window_width</name></name> <operator>||</operator> <name><name>window_attrs</name><operator>.</operator><name>height</name></name> <operator>!=</operator> <name><name>xv</name><operator>-&gt;</operator><name>window_height</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>XRectangle</name></type> <name><name>rect</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>xv</name><operator>-&gt;</operator><name>dest_w</name></name> <operator>=</operator> <name><name>window_attrs</name><operator>.</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xv</name><operator>-&gt;</operator><name>dest_h</name></name> <operator>=</operator> <name><name>window_attrs</name><operator>.</operator><name>height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>compute_display_area</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>xv</name><operator>-&gt;</operator><name>dest_x</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>rect</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>width</name> <operator>=</operator> <name><name>rect</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>width</name> <operator>=</operator> <name><name>xv</name><operator>-&gt;</operator><name>dest_x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rect</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>height</name> <operator>=</operator> <name><name>rect</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>height</name> <operator>=</operator> <name><name>window_attrs</name><operator>.</operator><name>height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rect</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name><name>rect</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rect</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rect</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name><name>xv</name><operator>-&gt;</operator><name>dest_w</name></name> <operator>+</operator> <name><name>xv</name><operator>-&gt;</operator><name>dest_x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XFillRectangles</name><argument_list>(<argument><expr><name><name>xv</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>xv</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><name><name>xv</name><operator>-&gt;</operator><name>gc</name></name></expr></argument>, <argument><expr><name>rect</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>xv</name><operator>-&gt;</operator><name>dest_y</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>rect</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>width</name> <operator>=</operator> <name><name>rect</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>width</name> <operator>=</operator> <name><name>window_attrs</name><operator>.</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rect</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>height</name> <operator>=</operator> <name><name>rect</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>height</name> <operator>=</operator> <name><name>xv</name><operator>-&gt;</operator><name>dest_y</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rect</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name><name>rect</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rect</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rect</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name><name>xv</name><operator>-&gt;</operator><name>dest_h</name></name> <operator>+</operator> <name><name>xv</name><operator>-&gt;</operator><name>dest_y</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XFillRectangles</name><argument_list>(<argument><expr><name><name>xv</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>xv</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><name><name>xv</name><operator>-&gt;</operator><name>gc</name></name></expr></argument>, <argument><expr><name>rect</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>XvShmPutImage</name><argument_list>(<argument><expr><name><name>xv</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>xv</name><operator>-&gt;</operator><name>xv_port</name></name></expr></argument>, <argument><expr><name><name>xv</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><name><name>xv</name><operator>-&gt;</operator><name>gc</name></name></expr></argument>,

<argument><expr><name><name>xv</name><operator>-&gt;</operator><name>yuv_image</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>xv</name><operator>-&gt;</operator><name>image_width</name></name></expr></argument>, <argument><expr><name><name>xv</name><operator>-&gt;</operator><name>image_height</name></name></expr></argument>,

<argument><expr><name><name>xv</name><operator>-&gt;</operator><name>dest_x</name></name></expr></argument>, <argument><expr><name><name>xv</name><operator>-&gt;</operator><name>dest_y</name></name></expr></argument>, <argument><expr><name><name>xv</name><operator>-&gt;</operator><name>dest_w</name></name></expr></argument>, <argument><expr><name><name>xv</name><operator>-&gt;</operator><name>dest_h</name></name></expr></argument>, <argument><expr><name>True</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>Success</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Could not copy image to XV shared memory buffer\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_EXTERNAL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>write_picture</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>input_data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name><name>linesize</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>XVContext</name> <modifier>*</modifier></type><name>xv</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>XvImage</name> <modifier>*</modifier></type><name>img</name> <init>= <expr><name><name>xv</name><operator>-&gt;</operator><name>yuv_image</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{

<expr><name><name>img</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>img</name><operator>-&gt;</operator><name>offsets</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>,

<expr><name><name>img</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>img</name><operator>-&gt;</operator><name>offsets</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>,

<expr><name><name>img</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>img</name><operator>-&gt;</operator><name>offsets</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>

}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>xv</name><operator>-&gt;</operator><name>window_id</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>XEvent</name></type> <name>event</name></decl>;</decl_stmt>

<while>while <condition>(<expr><call><name>XPending</name><argument_list>(<argument><expr><name><name>xv</name><operator>-&gt;</operator><name>display</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>XNextEvent</name><argument_list>(<argument><expr><name><name>xv</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>ClientMessage</name> <operator>&amp;&amp;</operator> <name><name>event</name><operator>.</operator><name>xclient</name><operator>.</operator><name>data</name><operator>.</operator><name>l</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name><name>xv</name><operator>-&gt;</operator><name>wm_delete_message</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>xv</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Window close event.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EPIPE</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_image_copy</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>img</name><operator>-&gt;</operator><name>pitches</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>input_data</name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>,

<argument><expr><name><name>xv</name><operator>-&gt;</operator><name>image_format</name></name></expr></argument>, <argument><expr><name><name>img</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>img</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>xv_repaint</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>xv_write_packet</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVCodecParameters</name> <modifier>*</modifier></type><name>par</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>codecpar</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>linesize</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_image_fill_arrays</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>par</name><operator>-&gt;</operator><name>format</name></name></expr></argument>,

<argument><expr><name><name>par</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>par</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>write_picture</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>xv_write_frame</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stream_index</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier><modifier>*</modifier></type><name>frame</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>AV_WRITE_UNCODED_FRAME_QUERY</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>write_picture</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><operator>(</operator><operator>*</operator><name>frame</name><operator>)</operator><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><operator>(</operator><operator>*</operator><name>frame</name><operator>)</operator><operator>-&gt;</operator><name>linesize</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>xv_control_message</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>data_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch<condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_APP_TO_DEV_WINDOW_REPAINT</name></expr>:</case>

<return>return <expr><call><name>xv_repaint</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(XVContext, x)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>options</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"display_name"</literal></expr>, <expr><literal type="string">"set display name"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>display_name</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name> <operator>=</operator> <name>NULL</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_FLAG_ENCODING_PARAM</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"window_id"</literal></expr>, <expr><literal type="string">"set existing window id"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>window_id</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT64</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT64_MAX</name></expr>, <expr><name>AV_OPT_FLAG_ENCODING_PARAM</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"window_size"</literal></expr>, <expr><literal type="string">"set window forced size"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>window_width</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_IMAGE_SIZE</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name> <operator>=</operator> <name>NULL</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_FLAG_ENCODING_PARAM</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"window_title"</literal></expr>, <expr><literal type="string">"set window title"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>window_title</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name> <operator>=</operator> <name>NULL</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_FLAG_ENCODING_PARAM</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"window_x"</literal></expr>, <expr><literal type="string">"set window x offset"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>window_x</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><operator>-</operator><name>INT_MAX</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>AV_OPT_FLAG_ENCODING_PARAM</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"window_y"</literal></expr>, <expr><literal type="string">"set window y offset"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>window_y</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><operator>-</operator><name>INT_MAX</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>AV_OPT_FLAG_ENCODING_PARAM</name></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>xv_class</name> <init>= <expr><block>{

<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"xvideo outdev"</literal></expr>,

<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,

<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>options</name></expr>,

<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,

<expr><operator>.</operator><name>category</name> <operator>=</operator> <name>AV_CLASS_CATEGORY_DEVICE_VIDEO_OUTPUT</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVOutputFormat</name></type> <name>ff_xv_muxer</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"xv"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"XV (XVideo) output device"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>XVContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>audio_codec</name> <operator>=</operator> <name>AV_CODEC_ID_NONE</name></expr>,

<expr><operator>.</operator><name>video_codec</name> <operator>=</operator> <name>AV_CODEC_ID_RAWVIDEO</name></expr>,

<expr><operator>.</operator><name>write_header</name> <operator>=</operator> <name>xv_write_header</name></expr>,

<expr><operator>.</operator><name>write_packet</name> <operator>=</operator> <name>xv_write_packet</name></expr>,

<expr><operator>.</operator><name>write_uncoded_frame</name> <operator>=</operator> <name>xv_write_frame</name></expr>,

<expr><operator>.</operator><name>write_trailer</name> <operator>=</operator> <name>xv_write_trailer</name></expr>,

<expr><operator>.</operator><name>control_message</name> <operator>=</operator> <name>xv_control_message</name></expr>,

<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>AVFMT_NOFILE</name> <operator>|</operator> <name>AVFMT_VARIABLE_FPS</name> <operator>|</operator> <name>AVFMT_NOTIMESTAMPS</name></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>xv_class</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
