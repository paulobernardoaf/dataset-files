<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavdevice\v4l2-common.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"v4l2-common.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>fmt_map</name></name></type> <name><name>ff_fmt_conversion_table</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><name>AV_PIX_FMT_YUV420P</name></expr>, <expr><name>AV_CODEC_ID_RAWVIDEO</name></expr>, <expr><name>V4L2_PIX_FMT_YUV420</name></expr> }</block></expr>,

<expr><block>{ <expr><name>AV_PIX_FMT_YUV420P</name></expr>, <expr><name>AV_CODEC_ID_RAWVIDEO</name></expr>, <expr><name>V4L2_PIX_FMT_YVU420</name></expr> }</block></expr>,

<expr><block>{ <expr><name>AV_PIX_FMT_YUV422P</name></expr>, <expr><name>AV_CODEC_ID_RAWVIDEO</name></expr>, <expr><name>V4L2_PIX_FMT_YUV422P</name></expr> }</block></expr>,

<expr><block>{ <expr><name>AV_PIX_FMT_YUYV422</name></expr>, <expr><name>AV_CODEC_ID_RAWVIDEO</name></expr>, <expr><name>V4L2_PIX_FMT_YUYV</name></expr> }</block></expr>,

<expr><block>{ <expr><name>AV_PIX_FMT_UYVY422</name></expr>, <expr><name>AV_CODEC_ID_RAWVIDEO</name></expr>, <expr><name>V4L2_PIX_FMT_UYVY</name></expr> }</block></expr>,

<expr><block>{ <expr><name>AV_PIX_FMT_YUV411P</name></expr>, <expr><name>AV_CODEC_ID_RAWVIDEO</name></expr>, <expr><name>V4L2_PIX_FMT_YUV411P</name></expr> }</block></expr>,

<expr><block>{ <expr><name>AV_PIX_FMT_YUV410P</name></expr>, <expr><name>AV_CODEC_ID_RAWVIDEO</name></expr>, <expr><name>V4L2_PIX_FMT_YUV410</name></expr> }</block></expr>,

<expr><block>{ <expr><name>AV_PIX_FMT_YUV410P</name></expr>, <expr><name>AV_CODEC_ID_RAWVIDEO</name></expr>, <expr><name>V4L2_PIX_FMT_YVU410</name></expr> }</block></expr>,

<expr><block>{ <expr><name>AV_PIX_FMT_RGB555LE</name></expr>,<expr><name>AV_CODEC_ID_RAWVIDEO</name></expr>, <expr><name>V4L2_PIX_FMT_RGB555</name></expr> }</block></expr>,

<expr><block>{ <expr><name>AV_PIX_FMT_RGB555BE</name></expr>,<expr><name>AV_CODEC_ID_RAWVIDEO</name></expr>, <expr><name>V4L2_PIX_FMT_RGB555X</name></expr> }</block></expr>,

<expr><block>{ <expr><name>AV_PIX_FMT_RGB565LE</name></expr>,<expr><name>AV_CODEC_ID_RAWVIDEO</name></expr>, <expr><name>V4L2_PIX_FMT_RGB565</name></expr> }</block></expr>,

<expr><block>{ <expr><name>AV_PIX_FMT_RGB565BE</name></expr>,<expr><name>AV_CODEC_ID_RAWVIDEO</name></expr>, <expr><name>V4L2_PIX_FMT_RGB565X</name></expr> }</block></expr>,

<expr><block>{ <expr><name>AV_PIX_FMT_BGR24</name></expr>, <expr><name>AV_CODEC_ID_RAWVIDEO</name></expr>, <expr><name>V4L2_PIX_FMT_BGR24</name></expr> }</block></expr>,

<expr><block>{ <expr><name>AV_PIX_FMT_RGB24</name></expr>, <expr><name>AV_CODEC_ID_RAWVIDEO</name></expr>, <expr><name>V4L2_PIX_FMT_RGB24</name></expr> }</block></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>V4L2_PIX_FMT_XBGR32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{ <expr><name>AV_PIX_FMT_BGR0</name></expr>, <expr><name>AV_CODEC_ID_RAWVIDEO</name></expr>, <expr><name>V4L2_PIX_FMT_XBGR32</name></expr> }</block></expr>,

<expr><block>{ <expr><name>AV_PIX_FMT_0RGB</name></expr>, <expr><name>AV_CODEC_ID_RAWVIDEO</name></expr>, <expr><name>V4L2_PIX_FMT_XRGB32</name></expr> }</block></expr>,

<expr><block>{ <expr><name>AV_PIX_FMT_BGRA</name></expr>, <expr><name>AV_CODEC_ID_RAWVIDEO</name></expr>, <expr><name>V4L2_PIX_FMT_ABGR32</name></expr> }</block></expr>,

<expr><block>{ <expr><name>AV_PIX_FMT_ARGB</name></expr>, <expr><name>AV_CODEC_ID_RAWVIDEO</name></expr>, <expr><name>V4L2_PIX_FMT_ARGB32</name></expr> }</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{ <expr><name>AV_PIX_FMT_BGR0</name></expr>, <expr><name>AV_CODEC_ID_RAWVIDEO</name></expr>, <expr><name>V4L2_PIX_FMT_BGR32</name></expr> }</block></expr>,

<expr><block>{ <expr><name>AV_PIX_FMT_0RGB</name></expr>, <expr><name>AV_CODEC_ID_RAWVIDEO</name></expr>, <expr><name>V4L2_PIX_FMT_RGB32</name></expr> }</block></expr>,

<expr><block>{ <expr><name>AV_PIX_FMT_GRAY8</name></expr>, <expr><name>AV_CODEC_ID_RAWVIDEO</name></expr>, <expr><name>V4L2_PIX_FMT_GREY</name></expr> }</block></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>V4L2_PIX_FMT_Y16</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{ <expr><name>AV_PIX_FMT_GRAY16LE</name></expr>,<expr><name>AV_CODEC_ID_RAWVIDEO</name></expr>, <expr><name>V4L2_PIX_FMT_Y16</name></expr> }</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>V4L2_PIX_FMT_Z16</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{ <expr><name>AV_PIX_FMT_GRAY16LE</name></expr>,<expr><name>AV_CODEC_ID_RAWVIDEO</name></expr>, <expr><name>V4L2_PIX_FMT_Z16</name></expr> }</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{ <expr><name>AV_PIX_FMT_NV12</name></expr>, <expr><name>AV_CODEC_ID_RAWVIDEO</name></expr>, <expr><name>V4L2_PIX_FMT_NV12</name></expr> }</block></expr>,

<expr><block>{ <expr><name>AV_PIX_FMT_NONE</name></expr>, <expr><name>AV_CODEC_ID_MJPEG</name></expr>, <expr><name>V4L2_PIX_FMT_MJPEG</name></expr> }</block></expr>,

<expr><block>{ <expr><name>AV_PIX_FMT_NONE</name></expr>, <expr><name>AV_CODEC_ID_MJPEG</name></expr>, <expr><name>V4L2_PIX_FMT_JPEG</name></expr> }</block></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>V4L2_PIX_FMT_H264</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{ <expr><name>AV_PIX_FMT_NONE</name></expr>, <expr><name>AV_CODEC_ID_H264</name></expr>, <expr><name>V4L2_PIX_FMT_H264</name></expr> }</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>V4L2_PIX_FMT_MPEG4</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{ <expr><name>AV_PIX_FMT_NONE</name></expr>, <expr><name>AV_CODEC_ID_MPEG4</name></expr>, <expr><name>V4L2_PIX_FMT_MPEG4</name></expr> }</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>V4L2_PIX_FMT_CPIA1</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{ <expr><name>AV_PIX_FMT_NONE</name></expr>, <expr><name>AV_CODEC_ID_CPIA</name></expr>, <expr><name>V4L2_PIX_FMT_CPIA1</name></expr> }</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>V4L2_PIX_FMT_SRGGB8</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{ <expr><name>AV_PIX_FMT_BAYER_BGGR8</name></expr>, <expr><name>AV_CODEC_ID_RAWVIDEO</name></expr>, <expr><name>V4L2_PIX_FMT_SBGGR8</name></expr> }</block></expr>,

<expr><block>{ <expr><name>AV_PIX_FMT_BAYER_GBRG8</name></expr>, <expr><name>AV_CODEC_ID_RAWVIDEO</name></expr>, <expr><name>V4L2_PIX_FMT_SGBRG8</name></expr> }</block></expr>,

<expr><block>{ <expr><name>AV_PIX_FMT_BAYER_GRBG8</name></expr>, <expr><name>AV_CODEC_ID_RAWVIDEO</name></expr>, <expr><name>V4L2_PIX_FMT_SGRBG8</name></expr> }</block></expr>,

<expr><block>{ <expr><name>AV_PIX_FMT_BAYER_RGGB8</name></expr>, <expr><name>AV_CODEC_ID_RAWVIDEO</name></expr>, <expr><name>V4L2_PIX_FMT_SRGGB8</name></expr> }</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{ <expr><name>AV_PIX_FMT_NONE</name></expr>, <expr><name>AV_CODEC_ID_NONE</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><name>uint32_t</name></type> <name>ff_fmt_ff2v4l</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>pix_fmt</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVCodecID</name></name></type> <name>codec_id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>ff_fmt_conversion_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>codec_id</name> <operator>!=</operator> <name>AV_CODEC_ID_NONE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>codec_id</name> <operator>==</operator> <name>AV_CODEC_ID_NONE</name> <operator>||</operator>

<name><name>ff_fmt_conversion_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>codec_id</name> <operator>==</operator> <name>codec_id</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name>pix_fmt</name> <operator>==</operator> <name>AV_PIX_FMT_NONE</name> <operator>||</operator>

<name><name>ff_fmt_conversion_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ff_fmt</name> <operator>==</operator> <name>pix_fmt</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name><name>ff_fmt_conversion_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>v4l2_fmt</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>ff_fmt_v4l2ff</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>v4l2_fmt</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVCodecID</name></name></type> <name>codec_id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>ff_fmt_conversion_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>codec_id</name> <operator>!=</operator> <name>AV_CODEC_ID_NONE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ff_fmt_conversion_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>v4l2_fmt</name> <operator>==</operator> <name>v4l2_fmt</name> <operator>&amp;&amp;</operator>

<name><name>ff_fmt_conversion_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>codec_id</name> <operator>==</operator> <name>codec_id</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name><name>ff_fmt_conversion_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ff_fmt</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>AV_PIX_FMT_NONE</name></expr>;</return>

</block_content>}</block></function>

<function><type><name><name>enum</name> <name>AVCodecID</name></name></type> <name>ff_fmt_v4l2codec</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>v4l2_fmt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>ff_fmt_conversion_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>codec_id</name> <operator>!=</operator> <name>AV_CODEC_ID_NONE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ff_fmt_conversion_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>v4l2_fmt</name> <operator>==</operator> <name>v4l2_fmt</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name><name>ff_fmt_conversion_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>codec_id</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>AV_CODEC_ID_NONE</name></expr>;</return>

</block_content>}</block></function>

</unit>
