<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libswresample\aarch64\audio_convert_init.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/cpu.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/aarch64/cpu.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/samplefmt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libswresample/swresample_internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libswresample/audioconvert.h"</cpp:file></cpp:include>

<function_decl><type><name>void</name></type> <name>swri_oldapi_conv_flt_to_s16_neon</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>swri_oldapi_conv_fltp_to_s16_2ch_neon</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>channels</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>swri_oldapi_conv_fltp_to_s16_nch_neon</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>channels</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type> <name>conv_flt_to_s16_neon</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list><block>{<block_content>

<expr_stmt><expr><call><name>swri_oldapi_conv_flt_to_s16_neon</name><argument_list>(<argument><expr><operator>(</operator><name>int16_t</name><operator>*</operator><operator>)</operator><operator>*</operator><name>dst</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>float</name><operator>*</operator><operator>)</operator><operator>*</operator><name>src</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>conv_fltp_to_s16_2ch_neon</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list><block>{<block_content>

<expr_stmt><expr><call><name>swri_oldapi_conv_fltp_to_s16_2ch_neon</name><argument_list>(<argument><expr><operator>(</operator><name>int16_t</name><operator>*</operator><operator>)</operator><operator>*</operator><name>dst</name></expr></argument>, <argument><expr><operator>(</operator><name>float</name> <operator>*</operator><specifier>const</specifier><operator>*</operator><operator>)</operator><name>src</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>conv_fltp_to_s16_nch_neon</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>channels</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>channels</name><operator>=</operator><literal type="number">3</literal></expr>;</init> <condition><expr><name>channels</name><operator>&lt;</operator><name>SWR_CH_MAX</name> <operator>&amp;&amp;</operator> <name><name>src</name><index>[<expr><name>channels</name></expr>]</index></name></expr>;</condition> <incr><expr><name>channels</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></for>

<expr_stmt><expr><call><name>swri_oldapi_conv_fltp_to_s16_nch_neon</name><argument_list>(<argument><expr><operator>(</operator><name>int16_t</name><operator>*</operator><operator>)</operator><operator>*</operator><name>dst</name></expr></argument>, <argument><expr><operator>(</operator><name>float</name> <operator>*</operator><specifier>const</specifier><operator>*</operator><operator>)</operator><name>src</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>channels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>av_cold</name> <name>void</name></type> <name>swri_audio_convert_init_aarch64</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>AudioConvert</name></name> <modifier>*</modifier></type><name>ac</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>AVSampleFormat</name></name></type> <name>out_fmt</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>AVSampleFormat</name></name></type> <name>in_fmt</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>channels</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>cpu_flags</name> <init>= <expr><call><name>av_get_cpu_flags</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>simd_f</name></name><operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>have_neon</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>out_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_S16</name> <operator>&amp;&amp;</operator> <name>in_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_FLT</name> <operator>||</operator> <name>out_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_S16P</name> <operator>&amp;&amp;</operator> <name>in_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_FLTP</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>simd_f</name></name> <operator>=</operator> <name>conv_flt_to_s16_neon</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>out_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_S16</name> <operator>&amp;&amp;</operator> <name>in_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_FLTP</name> <operator>&amp;&amp;</operator> <name>channels</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>simd_f</name></name> <operator>=</operator> <name>conv_fltp_to_s16_2ch_neon</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>out_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_S16</name> <operator>&amp;&amp;</operator> <name>in_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_FLTP</name> <operator>&amp;&amp;</operator> <name>channels</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>simd_f</name></name> <operator>=</operator> <name>conv_fltp_to_s16_nch_neon</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ac</name><operator>-&gt;</operator><name>simd_f</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>in_simd_align_mask</name></name> <operator>=</operator> <name><name>ac</name><operator>-&gt;</operator><name>out_simd_align_mask</name></name> <operator>=</operator> <literal type="number">15</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

</unit>
