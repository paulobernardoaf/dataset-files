<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libswresample\tests\swresample.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/channel_layout.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libswresample/swresample.h"</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>time</name></cpp:undef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>fprintf</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SAMPLES</name></cpp:macro> <cpp:value>1000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SWR_CH_MAX</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASSERT_LEVEL</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>double</name></type> <name>get</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>a</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ch</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ch_count</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVSampleFormat</name></name></type> <name>f</name></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>av_sample_fmt_is_planar</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>f</name><operator>=</operator> <call><name>av_get_alt_sample_fmt</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name><operator>=</operator> <name><name>a</name><index>[<expr><name>ch</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><name>p</name><operator>=</operator> <name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>index</name><operator>=</operator> <name>ch</name> <operator>+</operator> <name>index</name><operator>*</operator><name>ch_count</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<switch>switch<condition>(<expr><name>f</name></expr>)</condition><block>{<block_content>

<case>case <expr><name>AV_SAMPLE_FMT_U8</name></expr> :</case> <return>return <expr><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>uint8_t</name><operator>*</operator><operator>)</operator><name>p</name><operator>)</operator><index>[<expr><name>index</name></expr>]</index><operator>/</operator><literal type="number">127.0</literal><operator>-</operator><literal type="number">1.0</literal></expr>;</return>

<case>case <expr><name>AV_SAMPLE_FMT_S16</name></expr>:</case> <return>return <expr><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>int16_t</name><operator>*</operator><operator>)</operator><name>p</name><operator>)</operator><index>[<expr><name>index</name></expr>]</index><operator>/</operator><literal type="number">32767.0</literal></expr>;</return>

<case>case <expr><name>AV_SAMPLE_FMT_S32</name></expr>:</case> <return>return <expr><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>int32_t</name><operator>*</operator><operator>)</operator><name>p</name><operator>)</operator><index>[<expr><name>index</name></expr>]</index><operator>/</operator><literal type="number">2147483647.0</literal></expr>;</return>

<case>case <expr><name>AV_SAMPLE_FMT_FLT</name></expr>:</case> <return>return <expr><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>float</name> <operator>*</operator><operator>)</operator><name>p</name><operator>)</operator><index>[<expr><name>index</name></expr>]</index></expr>;</return>

<case>case <expr><name>AV_SAMPLE_FMT_DBL</name></expr>:</case> <return>return <expr><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>double</name> <operator>*</operator><operator>)</operator><name>p</name><operator>)</operator><index>[<expr><name>index</name></expr>]</index></expr>;</return>

<default>default:</default> <expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>set</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>a</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ch</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ch_count</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVSampleFormat</name></name></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>v</name></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>av_sample_fmt_is_planar</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>f</name><operator>=</operator> <call><name>av_get_alt_sample_fmt</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name><operator>=</operator> <name><name>a</name><index>[<expr><name>ch</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><name>p</name><operator>=</operator> <name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>index</name><operator>=</operator> <name>ch</name> <operator>+</operator> <name>index</name><operator>*</operator><name>ch_count</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<switch>switch<condition>(<expr><name>f</name></expr>)</condition><block>{<block_content>

<case>case <expr><name>AV_SAMPLE_FMT_U8</name></expr> :</case> <expr_stmt><expr><operator>(</operator><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name>p</name><operator>)</operator><index>[<expr><name>index</name></expr>]</index><operator>=</operator> <call><name>av_clip_uint8</name> <argument_list>(<argument><expr><call><name>lrint</name><argument_list>(<argument><expr><operator>(</operator><name>v</name><operator>+</operator><literal type="number">1.0</literal><operator>)</operator><operator>*</operator><literal type="number">127</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>AV_SAMPLE_FMT_S16</name></expr>:</case> <expr_stmt><expr><operator>(</operator><operator>(</operator><name>int16_t</name><operator>*</operator><operator>)</operator><name>p</name><operator>)</operator><index>[<expr><name>index</name></expr>]</index><operator>=</operator> <call><name>av_clip_int16</name> <argument_list>(<argument><expr><call><name>lrint</name><argument_list>(<argument><expr><name>v</name><operator>*</operator><literal type="number">32767</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>AV_SAMPLE_FMT_S32</name></expr>:</case> <expr_stmt><expr><operator>(</operator><operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><name>p</name><operator>)</operator><index>[<expr><name>index</name></expr>]</index><operator>=</operator> <call><name>av_clipl_int32</name><argument_list>(<argument><expr><call><name>llrint</name><argument_list>(<argument><expr><name>v</name><operator>*</operator><literal type="number">2147483647</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>AV_SAMPLE_FMT_FLT</name></expr>:</case> <expr_stmt><expr><operator>(</operator><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name>p</name><operator>)</operator><index>[<expr><name>index</name></expr>]</index><operator>=</operator> <name>v</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>AV_SAMPLE_FMT_DBL</name></expr>:</case> <expr_stmt><expr><operator>(</operator><operator>(</operator><name>double</name> <operator>*</operator><operator>)</operator><name>p</name><operator>)</operator><index>[<expr><name>index</name></expr>]</index><operator>=</operator> <name>v</name></expr>;</expr_stmt> <break>break;</break>

<default>default:</default> <expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>shift</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>a</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ch_count</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVSampleFormat</name></name></type> <name>f</name></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>av_sample_fmt_is_planar</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>f</name><operator>=</operator> <call><name>av_get_alt_sample_fmt</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>ch</name><operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name><operator>&lt;</operator><name>ch_count</name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>a</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>+=</operator> <name>index</name><operator>*</operator><call><name>av_get_bytes_per_sample</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <name>index</name><operator>*</operator><name>ch_count</name><operator>*</operator><call><name>av_get_bytes_per_sample</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVSampleFormat</name></name></type> <name><name>formats</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>AV_SAMPLE_FMT_S16</name></expr>,

<expr><name>AV_SAMPLE_FMT_FLTP</name></expr>,

<expr><name>AV_SAMPLE_FMT_S16P</name></expr>,

<expr><name>AV_SAMPLE_FMT_FLT</name></expr>,

<expr><name>AV_SAMPLE_FMT_S32P</name></expr>,

<expr><name>AV_SAMPLE_FMT_S32</name></expr>,

<expr><name>AV_SAMPLE_FMT_U8P</name></expr>,

<expr><name>AV_SAMPLE_FMT_U8</name></expr>,

<expr><name>AV_SAMPLE_FMT_DBLP</name></expr>,

<expr><name>AV_SAMPLE_FMT_DBL</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>rates</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">8000</literal></expr>,

<expr><literal type="number">11025</literal></expr>,

<expr><literal type="number">16000</literal></expr>,

<expr><literal type="number">22050</literal></expr>,

<expr><literal type="number">32000</literal></expr>,

<expr><literal type="number">48000</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint64_t</name></type> <name><name>layouts</name><index>[]</index></name><init>=<expr><block>{

<expr><name>AV_CH_LAYOUT_MONO</name></expr> ,

<expr><name>AV_CH_LAYOUT_STEREO</name></expr> ,

<expr><name>AV_CH_LAYOUT_2_1</name></expr> ,

<expr><name>AV_CH_LAYOUT_SURROUND</name></expr> ,

<expr><name>AV_CH_LAYOUT_4POINT0</name></expr> ,

<expr><name>AV_CH_LAYOUT_2_2</name></expr> ,

<expr><name>AV_CH_LAYOUT_QUAD</name></expr> ,

<expr><name>AV_CH_LAYOUT_5POINT0</name></expr> ,

<expr><name>AV_CH_LAYOUT_5POINT1</name></expr> ,

<expr><name>AV_CH_LAYOUT_5POINT0_BACK</name></expr> ,

<expr><name>AV_CH_LAYOUT_5POINT1_BACK</name></expr> ,

<expr><name>AV_CH_LAYOUT_7POINT0</name></expr> ,

<expr><name>AV_CH_LAYOUT_7POINT1</name></expr> ,

<expr><name>AV_CH_LAYOUT_7POINT1_WIDE</name></expr> ,

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>setup_array</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>out</name><index>[<expr><name>SWR_CH_MAX</name></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVSampleFormat</name></name></type> <name>format</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>samples</name></decl></parameter>)</parameter_list><block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>av_sample_fmt_is_planar</name><argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>plane_size</name><init>= <expr><call><name>av_get_bytes_per_sample</name><argument_list>(<argument><expr><name>format</name><operator>&amp;</operator><literal type="number">0xFF</literal></expr></argument>)</argument_list></call><operator>*</operator><name>samples</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>format</name><operator>&amp;=</operator><literal type="number">0xFF</literal></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>SWR_CH_MAX</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator> <name>in</name> <operator>+</operator> <name>i</name><operator>*</operator><name>plane_size</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator> <name>in</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list><block>{<block_content>

<return>return <expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>int</name> <operator>*</operator><operator>)</operator><name>a</name> <operator>-</operator> <operator>*</operator><operator>(</operator><specifier>const</specifier> <name>int</name> <operator>*</operator><operator>)</operator><name>b</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>audiogen</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVSampleFormat</name></name></type> <name>sample_fmt</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>channels</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sample_rate</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_samples</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ch</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>v</name></decl>, <decl><type ref="prev"/><name>f</name></decl>, <decl><type ref="prev"/><name>a</name></decl>, <decl><type ref="prev"/><name>ampa</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name><name>tabf1</name><index>[<expr><name>SWR_CH_MAX</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name><name>tabf2</name><index>[<expr><name>SWR_CH_MAX</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name><name>taba</name><index>[<expr><name>SWR_CH_MAX</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <specifier>static</specifier></type> <name>rnd</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PUT_SAMPLE</name></cpp:macro> <cpp:value>set(data, ch, k, channels, sample_fmt, v);</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>uint_rand</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x) = (x) * 1664525 + 1013904223)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dbl_rand</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(uint_rand(x)*2.0 / (double)UINT_MAX - 1)</cpp:value></cpp:define>

<expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>*</operator> <name>sample_rate</name> <operator>&amp;&amp;</operator> <name>k</name> <operator>&lt;</operator> <name>nb_samples</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>sin</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">0.30</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name>channels</name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>PUT_SAMPLE</name>

<name>a</name> <operator>+=</operator> <name>M_PI</name> <operator>*</operator> <literal type="number">1000.0</literal> <operator>*</operator> <literal type="number">2.0</literal> <operator>/</operator> <name>sample_rate</name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></for>

<expr_stmt><expr><name>a</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>*</operator> <name>sample_rate</name> <operator>&amp;&amp;</operator> <name>k</name> <operator>&lt;</operator> <name>nb_samples</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>sin</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">0.30</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name>channels</name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<decl_stmt><decl><type><name>PUT_SAMPLE</name></type>

<name>f</name> <init>= <expr><literal type="number">100.0</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><literal type="number">10000.0</literal> <operator>-</operator> <literal type="number">100.0</literal><operator>)</operator> <operator>*</operator> <name>i</name><operator>)</operator> <operator>/</operator> <name>sample_rate</name><operator>)</operator></expr></init></decl>;</decl_stmt></block_content></block></for>

<expr_stmt><expr><name>a</name> <operator>+=</operator> <name>M_PI</name> <operator>*</operator> <name>f</name> <operator>*</operator> <literal type="number">2.0</literal> <operator>/</operator> <name>sample_rate</name></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sample_rate</name> <operator>/</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>k</name> <operator>&lt;</operator> <name>nb_samples</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>dbl_rand</name><argument_list>(<argument><expr><name>rnd</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">0.30</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name>channels</name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>PUT_SAMPLE</name></expr></expr_stmt></block_content></block></for>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sample_rate</name> <operator>/</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>k</name> <operator>&lt;</operator> <name>nb_samples</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>dbl_rand</name><argument_list>(<argument><expr><name>rnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name>channels</name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>PUT_SAMPLE</name></expr></expr_stmt></block_content></block></for>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name>channels</name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>taba</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tabf1</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <literal type="number">100</literal> <operator>+</operator> <call><name>uint_rand</name><argument_list>(<argument><expr><name>rnd</name></expr></argument>)</argument_list></call> <operator>%</operator> <literal type="number">5000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tabf2</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <literal type="number">100</literal> <operator>+</operator> <call><name>uint_rand</name><argument_list>(<argument><expr><name>rnd</name></expr></argument>)</argument_list></call> <operator>%</operator> <literal type="number">5000</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>*</operator> <name>sample_rate</name> <operator>&amp;&amp;</operator> <name>k</name> <operator>&lt;</operator> <name>nb_samples</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name>channels</name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>sin</name><argument_list>(<argument><expr><name><name>taba</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">0.30</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>PUT_SAMPLE</name></type>

<name>f</name> <init>= <expr><name><name>tabf1</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name><name>tabf2</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>-</operator> <name><name>tabf1</name><index>[<expr><name>ch</name></expr>]</index></name><operator>)</operator> <operator>*</operator> <name>i</name><operator>)</operator> <operator>/</operator> <name>sample_rate</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>taba</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>+=</operator> <name>M_PI</name> <operator>*</operator> <name>f</name> <operator>*</operator> <literal type="number">2.0</literal> <operator>/</operator> <name>sample_rate</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><name>a</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ampa</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>*</operator> <name>sample_rate</name> <operator>&amp;&amp;</operator> <name>k</name> <operator>&lt;</operator> <name>nb_samples</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name>channels</name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>amp</name> <init>= <expr><operator>(</operator><literal type="number">1.0</literal> <operator>+</operator> <call><name>sin</name><argument_list>(<argument><expr><name>ampa</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>*</operator> <literal type="number">0.15</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>amp</name> <operator>=</operator> <literal type="number">0.30</literal> <operator>-</operator> <name>amp</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>sin</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>amp</name></expr>;</expr_stmt>

<expr_stmt><expr><name>PUT_SAMPLE</name>

<name>a</name> <operator>+=</operator> <name>M_PI</name> <operator>*</operator> <literal type="number">500.0</literal> <operator>*</operator> <literal type="number">2.0</literal> <operator>/</operator> <name>sample_rate</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ampa</name> <operator>+=</operator> <name>M_PI</name> <operator>*</operator> <literal type="number">2.0</literal> <operator>/</operator> <name>sample_rate</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>in_sample_rate</name></decl>, <decl><type ref="prev"/><name>out_sample_rate</name></decl>, <decl><type ref="prev"/><name>ch</name></decl> ,<decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>flush_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>in_ch_layout</name></decl>, <decl><type ref="prev"/><name>out_ch_layout</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>AVSampleFormat</name></name></type> <name>in_sample_fmt</name></decl>, <decl><type ref="prev"/><name>out_sample_fmt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>array_in</name><index>[<expr><name>SAMPLES</name><operator>*</operator><literal type="number">8</literal><operator>*</operator><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>array_mid</name><index>[<expr><name>SAMPLES</name><operator>*</operator><literal type="number">8</literal><operator>*</operator><literal type="number">8</literal><operator>*</operator><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>array_out</name><index>[<expr><name>SAMPLES</name><operator>*</operator><literal type="number">8</literal><operator>*</operator><literal type="number">8</literal><operator>+</operator><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>ain</name><index>[<expr><name>SWR_CH_MAX</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>aout</name><index>[<expr><name>SWR_CH_MAX</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>amid</name><index>[<expr><name>SWR_CH_MAX</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>flush_i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num_tests</name> <init>= <expr><literal type="number">10000</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>seed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>rand_seed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>remaining_tests</name><index>[<expr><call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>rates</name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>layouts</name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>formats</name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>layouts</name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>formats</name></expr></argument>)</argument_list></call></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>max_tests</name> <init>= <expr><call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>remaining_tests</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>test</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>specific_test</name><init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>SwrContext</name></name> <modifier>*</modifier></type> <name>forw_ctx</name><init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>SwrContext</name></name> <modifier>*</modifier></type><name>backw_ctx</name><init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-h"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"--help"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Usage: swresample-test [&lt;num_tests&gt;[ &lt;test&gt;]] \n"</literal>

<literal type="string">"num_tests Default is %d\n"</literal></expr></argument>, <argument><expr><name>num_tests</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>num_tests</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>num_tests</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>num_tests</name> <operator>=</operator> <operator>-</operator><name>num_tests</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rand_seed</name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>num_tests</name><operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>num_tests</name><operator>&gt;</operator><name>max_tests</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>num_tests</name> <operator>=</operator> <name>max_tests</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>argc</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>specific_test</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>max_tests</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>remaining_tests</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></for>

<for>for<control>(<init><expr><name>test</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>test</name><operator>&lt;</operator><name>num_tests</name></expr>;</condition> <incr><expr><name>test</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>uint_rand</name><argument_list>(<argument><expr><name>seed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><name>seed</name> <operator>*</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name>max_tests</name> <operator>-</operator> <name>test</name><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator><literal type="number">32</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name><name>remaining_tests</name><index>[<expr><name>r</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>remaining_tests</name><index>[<expr><name>max_tests</name> <operator>-</operator> <name>test</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name>remaining_tests</name> <operator>+</operator> <name>max_tests</name> <operator>-</operator> <name>num_tests</name></expr></argument>, <argument><expr><name>num_tests</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>remaining_tests</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>cmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>in_sample_rate</name><operator>=</operator><literal type="number">16000</literal></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>test</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>test</name><operator>&lt;</operator><name>num_tests</name></expr>;</condition> <incr><expr><name>test</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>in_layout_string</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>out_layout_string</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>vector</name><init>= <expr><name><name>remaining_tests</name><index>[<expr><name>max_tests</name> <operator>-</operator> <name>test</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>in_ch_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>out_count</name></decl>, <decl><type ref="prev"/><name>mid_count</name></decl>, <decl><type ref="prev"/><name>out_ch_count</name></decl>;</decl_stmt>

<expr_stmt><expr><name>in_ch_layout</name> <operator>=</operator> <name><name>layouts</name><index>[<expr><name>vector</name> <operator>%</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>layouts</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>vector</name> <operator>/=</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>layouts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>out_ch_layout</name> <operator>=</operator> <name><name>layouts</name><index>[<expr><name>vector</name> <operator>%</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>layouts</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>vector</name> <operator>/=</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>layouts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>in_sample_fmt</name> <operator>=</operator> <name><name>formats</name><index>[<expr><name>vector</name> <operator>%</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>formats</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>vector</name> <operator>/=</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>formats</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>out_sample_fmt</name> <operator>=</operator> <name><name>formats</name><index>[<expr><name>vector</name> <operator>%</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>formats</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>vector</name> <operator>/=</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>formats</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>out_sample_rate</name> <operator>=</operator> <name><name>rates</name> <index>[<expr><name>vector</name> <operator>%</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>rates</name></expr></argument> )</argument_list></call></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>vector</name> <operator>/=</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>rates</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><operator>!</operator><name>vector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>specific_test</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>out_sample_rate</name> <operator>!=</operator> <name>in_sample_rate</name> <operator>||</operator> <name>in_ch_layout</name> <operator>!=</operator> <name>out_ch_layout</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>in_ch_count</name><operator>=</operator> <call><name>av_get_channel_layout_nb_channels</name><argument_list>(<argument><expr><name>in_ch_layout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>out_ch_count</name><operator>=</operator> <call><name>av_get_channel_layout_nb_channels</name><argument_list>(<argument><expr><name>out_ch_layout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_get_channel_layout_string</name><argument_list>( <argument><expr><name>in_layout_string</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>in_layout_string</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>in_ch_count</name></expr></argument>, <argument><expr><name>in_ch_layout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_get_channel_layout_string</name><argument_list>(<argument><expr><name>out_layout_string</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>out_layout_string</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>out_ch_count</name></expr></argument>, <argument><expr><name>out_ch_layout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"TEST: %s-&gt;%s, rate:%5d-&gt;%5d, fmt:%s-&gt;%s\n"</literal></expr></argument>,

<argument><expr><name>in_layout_string</name></expr></argument>, <argument><expr><name>out_layout_string</name></expr></argument>,

<argument><expr><name>in_sample_rate</name></expr></argument>, <argument><expr><name>out_sample_rate</name></expr></argument>,

<argument><expr><call><name>av_get_sample_fmt_name</name><argument_list>(<argument><expr><name>in_sample_fmt</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>av_get_sample_fmt_name</name><argument_list>(<argument><expr><name>out_sample_fmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>forw_ctx</name> <operator>=</operator> <call><name>swr_alloc_set_opts</name><argument_list>(<argument><expr><name>forw_ctx</name></expr></argument>, <argument><expr><name>out_ch_layout</name></expr></argument>, <argument><expr><name>out_sample_fmt</name></expr></argument>, <argument><expr><name>out_sample_rate</name></expr></argument>,

<argument><expr><name>in_ch_layout</name></expr></argument>, <argument><expr><name>in_sample_fmt</name></expr></argument>, <argument><expr><name>in_sample_rate</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>backw_ctx</name> <operator>=</operator> <call><name>swr_alloc_set_opts</name><argument_list>(<argument><expr><name>backw_ctx</name></expr></argument>, <argument><expr><name>in_ch_layout</name></expr></argument>, <argument><expr><name>in_sample_fmt</name></expr></argument>, <argument><expr><name>in_sample_rate</name></expr></argument>,

<argument><expr><name>out_ch_layout</name></expr></argument>, <argument><expr><name>out_sample_fmt</name></expr></argument>, <argument><expr><name>out_sample_rate</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>forw_ctx</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Failed to init forw_cts\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>backw_ctx</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Failed to init backw_ctx\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>uint_rand</name><argument_list>(<argument><expr><name>rand_seed</name></expr></argument>)</argument_list></call> <operator>%</operator> <literal type="number">3</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_opt_set_int</name><argument_list>(<argument><expr><name>forw_ctx</name></expr></argument>, <argument><expr><literal type="string">"ich"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>uint_rand</name><argument_list>(<argument><expr><name>rand_seed</name></expr></argument>)</argument_list></call> <operator>%</operator> <literal type="number">3</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_opt_set_int</name><argument_list>(<argument><expr><name>forw_ctx</name></expr></argument>, <argument><expr><literal type="string">"och"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>swr_init</name><argument_list>( <argument><expr><name>forw_ctx</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"swr_init(-&gt;) failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>swr_init</name><argument_list>(<argument><expr><name>backw_ctx</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"swr_init(&lt;-) failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>setup_array</name><argument_list>(<argument><expr><name>ain</name></expr></argument> , <argument><expr><name>array_in</name></expr></argument> , <argument><expr><name>in_sample_fmt</name></expr></argument>, <argument><expr><name>SAMPLES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setup_array</name><argument_list>(<argument><expr><name>amid</name></expr></argument>, <argument><expr><name>array_mid</name></expr></argument>, <argument><expr><name>out_sample_fmt</name></expr></argument>, <argument><expr><literal type="number">3</literal><operator>*</operator><name>SAMPLES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setup_array</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><name>array_out</name></expr></argument>, <argument><expr><name>in_sample_fmt</name></expr></argument> , <argument><expr><name>SAMPLES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

for(ch=0; ch&lt;in_ch_count; ch++){

for(i=0; i&lt;SAMPLES; i++)

set(ain, ch, i, in_ch_count, in_sample_fmt, sin(i*i*3/SAMPLES));

}

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>audiogen</name><argument_list>(<argument><expr><name>ain</name></expr></argument>, <argument><expr><name>in_sample_fmt</name></expr></argument>, <argument><expr><name>in_ch_count</name></expr></argument>, <argument><expr><name>SAMPLES</name><operator>/</operator><literal type="number">6</literal><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>SAMPLES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>mode</name> <operator>=</operator> <call><name>uint_rand</name><argument_list>(<argument><expr><name>rand_seed</name></expr></argument>)</argument_list></call> <operator>%</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>mode</name><operator>==</operator><literal type="number">0</literal></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name>mid_count</name><operator>=</operator> <call><name>swr_convert</name><argument_list>(<argument><expr><name>forw_ctx</name></expr></argument>, <argument><expr><name>amid</name></expr></argument>, <argument><expr><literal type="number">3</literal><operator>*</operator><name>SAMPLES</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>ain</name></expr></argument>, <argument><expr><name>SAMPLES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>mode</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>mid_count</name><operator>=</operator> <call><name>swr_convert</name><argument_list>(<argument><expr><name>forw_ctx</name></expr></argument>, <argument><expr><name>amid</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>ain</name></expr></argument>, <argument><expr><name>SAMPLES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mid_count</name><operator>+=</operator><call><name>swr_convert</name><argument_list>(<argument><expr><name>forw_ctx</name></expr></argument>, <argument><expr><name>amid</name></expr></argument>, <argument><expr><literal type="number">3</literal><operator>*</operator><name>SAMPLES</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>ain</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>tmp_count</name></decl>;</decl_stmt>

<expr_stmt><expr><name>mid_count</name><operator>=</operator> <call><name>swr_convert</name><argument_list>(<argument><expr><name>forw_ctx</name></expr></argument>, <argument><expr><name>amid</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>ain</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>mid_count</name><operator>==</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>shift</name><argument_list>(<argument><expr><name>ain</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>in_ch_count</name></expr></argument>, <argument><expr><name>in_sample_fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mid_count</name><operator>+=</operator><call><name>swr_convert</name><argument_list>(<argument><expr><name>forw_ctx</name></expr></argument>, <argument><expr><name>amid</name></expr></argument>, <argument><expr><literal type="number">3</literal><operator>*</operator><name>SAMPLES</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>ain</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>shift</name><argument_list>(<argument><expr><name>amid</name></expr></argument>, <argument><expr><name>mid_count</name></expr></argument>, <argument><expr><name>out_ch_count</name></expr></argument>, <argument><expr><name>out_sample_fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>tmp_count</name> <operator>=</operator> <name>mid_count</name></expr>;</expr_stmt>

<expr_stmt><expr><name>mid_count</name><operator>+=</operator><call><name>swr_convert</name><argument_list>(<argument><expr><name>forw_ctx</name></expr></argument>, <argument><expr><name>amid</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>ain</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>shift</name><argument_list>(<argument><expr><name>amid</name></expr></argument>, <argument><expr><name>mid_count</name><operator>-</operator><name>tmp_count</name></expr></argument>, <argument><expr><name>out_ch_count</name></expr></argument>, <argument><expr><name>out_sample_fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>tmp_count</name> <operator>=</operator> <name>mid_count</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>shift</name><argument_list>(<argument><expr><name>ain</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>in_ch_count</name></expr></argument>, <argument><expr><name>in_sample_fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mid_count</name><operator>+=</operator><call><name>swr_convert</name><argument_list>(<argument><expr><name>forw_ctx</name></expr></argument>, <argument><expr><name>amid</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>ain</name></expr></argument>, <argument><expr><name>SAMPLES</name><operator>-</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>shift</name><argument_list>(<argument><expr><name>amid</name></expr></argument>, <argument><expr><name>mid_count</name><operator>-</operator><name>tmp_count</name></expr></argument>, <argument><expr><name>out_ch_count</name></expr></argument>, <argument><expr><name>out_sample_fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>tmp_count</name> <operator>=</operator> <name>mid_count</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>shift</name><argument_list>(<argument><expr><name>ain</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">3</literal></expr></argument>, <argument><expr><name>in_ch_count</name></expr></argument>, <argument><expr><name>in_sample_fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mid_count</name><operator>+=</operator><call><name>swr_convert</name><argument_list>(<argument><expr><name>forw_ctx</name></expr></argument>, <argument><expr><name>amid</name></expr></argument>, <argument><expr><literal type="number">3</literal><operator>*</operator><name>SAMPLES</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>ain</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>shift</name><argument_list>(<argument><expr><name>amid</name></expr></argument>, <argument><expr><operator>-</operator><name>tmp_count</name></expr></argument>, <argument><expr><name>out_ch_count</name></expr></argument>, <argument><expr><name>out_sample_fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>out_count</name><operator>=</operator> <call><name>swr_convert</name><argument_list>(<argument><expr><name>backw_ctx</name></expr></argument>,<argument><expr><name>aout</name></expr></argument>, <argument><expr><name>SAMPLES</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>amid</name></expr></argument>, <argument><expr><name>mid_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>ch</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name><operator>&lt;</operator><name>in_ch_count</name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>sse</name></decl>, <decl><type ref="prev"/><name>maxdiff</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>sum_a</name><init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>sum_b</name><init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>sum_aa</name><init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>sum_bb</name><init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>sum_ab</name><init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>out_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>a</name><init>= <expr><call><name>get</name><argument_list>(<argument><expr><name>ain</name></expr></argument> , <argument><expr><name>ch</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>in_ch_count</name></expr></argument>, <argument><expr><name>in_sample_fmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>b</name><init>= <expr><call><name>get</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>in_ch_count</name></expr></argument>, <argument><expr><name>in_sample_fmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>sum_a</name> <operator>+=</operator> <name>a</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sum_b</name> <operator>+=</operator> <name>b</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sum_aa</name><operator>+=</operator> <name>a</name><operator>*</operator><name>a</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sum_bb</name><operator>+=</operator> <name>b</name><operator>*</operator><name>b</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sum_ab</name><operator>+=</operator> <name>a</name><operator>*</operator><name>b</name></expr>;</expr_stmt>

<expr_stmt><expr><name>maxdiff</name><operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>maxdiff</name></expr></argument>, <argument><expr><call><name>fabs</name><argument_list>(<argument><expr><name>a</name><operator>-</operator><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>sse</name><operator>=</operator> <name>sum_aa</name> <operator>+</operator> <name>sum_bb</name> <operator>-</operator> <literal type="number">2</literal><operator>*</operator><name>sum_ab</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>sse</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>sse</name></expr></argument> &gt;</argument_list></name> <operator>-</operator><literal type="number">0.00001</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>sse</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"[e:%f c:%f max:%f] len:%5d\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>out_count</name></expr> ?</condition><then> <expr><call><name>sqrt</name><argument_list>(<argument><expr><name>sse</name><operator>/</operator><name>out_count</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>, <argument><expr><name>sum_ab</name><operator>/</operator><operator>(</operator><call><name>sqrt</name><argument_list>(<argument><expr><name>sum_aa</name><operator>*</operator><name>sum_bb</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><name>maxdiff</name></expr></argument>, <argument><expr><name>out_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>flush_i</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>flush_i</name><operator>%=</operator><literal type="number">21</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>flush_count</name> <operator>=</operator> <call><name>swr_convert</name><argument_list>(<argument><expr><name>backw_ctx</name></expr></argument>,<argument><expr><name>aout</name></expr></argument>, <argument><expr><name>flush_i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>shift</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><name>flush_i</name></expr></argument>, <argument><expr><name>in_ch_count</name></expr></argument>, <argument><expr><name>in_sample_fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>flush_count</name><operator>+=</operator> <call><name>swr_convert</name><argument_list>(<argument><expr><name>backw_ctx</name></expr></argument>,<argument><expr><name>aout</name></expr></argument>, <argument><expr><name>SAMPLES</name><operator>-</operator><name>flush_i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>shift</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><operator>-</operator><name>flush_i</name></expr></argument>, <argument><expr><name>in_ch_count</name></expr></argument>, <argument><expr><name>in_sample_fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>flush_count</name></expr>)</condition><block>{<block_content>

<for>for<control>(<init><expr><name>ch</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name><operator>&lt;</operator><name>in_ch_count</name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>sse</name></decl>, <decl><type ref="prev"/><name>maxdiff</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>sum_a</name><init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>sum_b</name><init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>sum_aa</name><init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>sum_bb</name><init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>sum_ab</name><init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>flush_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>a</name><init>= <expr><call><name>get</name><argument_list>(<argument><expr><name>ain</name></expr></argument> , <argument><expr><name>ch</name></expr></argument>, <argument><expr><name>i</name><operator>+</operator><name>out_count</name></expr></argument>, <argument><expr><name>in_ch_count</name></expr></argument>, <argument><expr><name>in_sample_fmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>b</name><init>= <expr><call><name>get</name><argument_list>(<argument><expr><name>aout</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>in_ch_count</name></expr></argument>, <argument><expr><name>in_sample_fmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>sum_a</name> <operator>+=</operator> <name>a</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sum_b</name> <operator>+=</operator> <name>b</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sum_aa</name><operator>+=</operator> <name>a</name><operator>*</operator><name>a</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sum_bb</name><operator>+=</operator> <name>b</name><operator>*</operator><name>b</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sum_ab</name><operator>+=</operator> <name>a</name><operator>*</operator><name>b</name></expr>;</expr_stmt>

<expr_stmt><expr><name>maxdiff</name><operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>maxdiff</name></expr></argument>, <argument><expr><call><name>fabs</name><argument_list>(<argument><expr><name>a</name><operator>-</operator><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>sse</name><operator>=</operator> <name>sum_aa</name> <operator>+</operator> <name>sum_bb</name> <operator>-</operator> <literal type="number">2</literal><operator>*</operator><name>sum_ab</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>sse</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>sse</name></expr></argument> &gt;</argument_list></name> <operator>-</operator><literal type="number">0.00001</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>sse</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"[e:%f c:%f max:%f] len:%5d F:%3d\n"</literal></expr></argument>, <argument><expr><call><name>sqrt</name><argument_list>(<argument><expr><name>sse</name><operator>/</operator><name>flush_count</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>sum_ab</name><operator>/</operator><operator>(</operator><call><name>sqrt</name><argument_list>(<argument><expr><name>sum_aa</name><operator>*</operator><name>sum_bb</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><name>maxdiff</name></expr></argument>, <argument><expr><name>flush_count</name></expr></argument>, <argument><expr><name>flush_i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
