<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libswresample\x86\rematrix_init.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/x86/cpu.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libswresample/swresample_internal.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>simd</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>mix_1_1_func_type ff_mix_1_1_a_##type ##_ ##simd;mix_2_1_func_type ff_mix_2_1_a_##type ##_ ##simd;</cpp:value></cpp:define>

<macro><name>D</name><argument_list>(<argument>float</argument>, <argument>sse</argument>)</argument_list></macro>

<macro><name>D</name><argument_list>(<argument>float</argument>, <argument>avx</argument>)</argument_list></macro>

<macro><name>D</name><argument_list>(<argument>int16</argument>, <argument>mmx</argument>)</argument_list></macro>

<macro><name>D</name><argument_list>(<argument>int16</argument>, <argument>sse2</argument>)</argument_list></macro>

<function><type><name>av_cold</name> <name>int</name></type> <name>swri_rematrix_init_x86</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SwrContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list><block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_X86ASM</name></expr></cpp:if>

<decl_stmt><decl><type><name>int</name></type> <name>mm_flags</name> <init>= <expr><call><name>av_get_cpu_flags</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nb_in</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>used_ch_count</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nb_out</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>ch_count</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num</name> <init>= <expr><name>nb_in</name> <operator>*</operator> <name>nb_out</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mix_1_1_simd</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mix_2_1_simd</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>midbuf</name><operator>.</operator><name>fmt</name></name> <operator>==</operator> <name>AV_SAMPLE_FMT_S16P</name></expr>)</condition><block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>EXTERNAL_MMX</name><argument_list>(<argument><expr><name>mm_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mix_1_1_simd</name></name> <operator>=</operator> <name>ff_mix_1_1_a_int16_mmx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mix_2_1_simd</name></name> <operator>=</operator> <name>ff_mix_2_1_a_int16_mmx</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>EXTERNAL_SSE2</name><argument_list>(<argument><expr><name>mm_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mix_1_1_simd</name></name> <operator>=</operator> <name>ff_mix_1_1_a_int16_sse2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mix_2_1_simd</name></name> <operator>=</operator> <name>ff_mix_2_1_a_int16_sse2</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>native_simd_matrix</name></name> <operator>=</operator> <call><name>av_mallocz_array</name><argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>native_simd_one</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>native_simd_matrix</name></name> <operator>||</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>native_simd_one</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>nb_out</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>sh</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name>nb_in</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>sh</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>sh</name></expr></argument>, <argument><expr><call><name>FFABS</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>int</name><operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>native_matrix</name></name><operator>)</operator><index>[<expr><name>i</name> <operator>*</operator> <name>nb_in</name> <operator>+</operator> <name>j</name></expr>]</index></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>sh</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><call><name>av_log2</name><argument_list>(<argument><expr><name>sh</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">14</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name>nb_in</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>int16_t</name><operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>native_simd_matrix</name></name><operator>)</operator><index>[<expr><literal type="number">2</literal><operator>*</operator><operator>(</operator><name>i</name> <operator>*</operator> <name>nb_in</name> <operator>+</operator> <name>j</name><operator>)</operator><operator>+</operator><literal type="number">1</literal></expr>]</index> <operator>=</operator> <literal type="number">15</literal> <operator>-</operator> <name>sh</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>int16_t</name><operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>native_simd_matrix</name></name><operator>)</operator><index>[<expr><literal type="number">2</literal><operator>*</operator><operator>(</operator><name>i</name> <operator>*</operator> <name>nb_in</name> <operator>+</operator> <name>j</name><operator>)</operator></expr>]</index> <operator>=</operator>

<operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>int</name><operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>native_matrix</name></name><operator>)</operator><index>[<expr><name>i</name> <operator>*</operator> <name>nb_in</name> <operator>+</operator> <name>j</name></expr>]</index><operator>)</operator> <operator>+</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>sh</name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <name>sh</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>int16_t</name><operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>native_simd_one</name></name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index> <operator>=</operator> <literal type="number">14</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>int16_t</name><operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>native_simd_one</name></name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>=</operator> <literal type="number">16384</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>midbuf</name><operator>.</operator><name>fmt</name></name> <operator>==</operator> <name>AV_SAMPLE_FMT_FLTP</name></expr>)</condition><block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>EXTERNAL_SSE</name><argument_list>(<argument><expr><name>mm_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mix_1_1_simd</name></name> <operator>=</operator> <name>ff_mix_1_1_a_float_sse</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mix_2_1_simd</name></name> <operator>=</operator> <name>ff_mix_2_1_a_float_sse</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>EXTERNAL_AVX_FAST</name><argument_list>(<argument><expr><name>mm_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mix_1_1_simd</name></name> <operator>=</operator> <name>ff_mix_1_1_a_float_avx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mix_2_1_simd</name></name> <operator>=</operator> <name>ff_mix_2_1_a_float_avx</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>native_simd_matrix</name></name> <operator>=</operator> <call><name>av_mallocz_array</name><argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>native_simd_one</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>native_simd_matrix</name></name> <operator>||</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>native_simd_one</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>native_simd_matrix</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>native_matrix</name></name></expr></argument>, <argument><expr><name>num</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>native_simd_one</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>native_one</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
