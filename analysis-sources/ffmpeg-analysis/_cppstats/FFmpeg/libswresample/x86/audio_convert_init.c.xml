<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libswresample\x86\audio_convert_init.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/x86/cpu.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libswresample/swresample_internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libswresample/audioconvert.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROTO</name><parameter_list>(<parameter><type><name>pre</name></type></parameter>, <parameter><type><name>in</name></type></parameter>, <parameter><type><name>out</name></type></parameter>, <parameter><type><name>cap</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>void ff ##pre ##in##_to_ ##out##_a_ ##cap(uint8_t **dst, const uint8_t **src, int len);</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROTO2</name><parameter_list>(<parameter><type><name>pre</name></type></parameter>, <parameter><type><name>out</name></type></parameter>, <parameter><type><name>cap</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>PROTO(pre, int16, out, cap) PROTO(pre, int32, out, cap) PROTO(pre, float, out, cap)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROTO3</name><parameter_list>(<parameter><type><name>pre</name></type></parameter>, <parameter><type><name>cap</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>PROTO2(pre, int16, cap) PROTO2(pre, int32, cap) PROTO2(pre, float, cap)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROTO4</name><parameter_list>(<parameter><type><name>pre</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>PROTO3(pre, mmx) PROTO3(pre, sse) PROTO3(pre, sse2) PROTO3(pre, ssse3) PROTO3(pre, sse4) PROTO3(pre, avx) PROTO3(pre, avx2)</cpp:value></cpp:define>

<macro><name>PROTO4</name><argument_list>(<argument>_</argument>)</argument_list></macro>

<macro><name>PROTO4</name><argument_list>(<argument>_pack_2ch_</argument>)</argument_list></macro>

<macro><name>PROTO4</name><argument_list>(<argument>_pack_6ch_</argument>)</argument_list></macro>

<macro><name>PROTO4</name><argument_list>(<argument>_pack_8ch_</argument>)</argument_list></macro>

<macro><name>PROTO4</name><argument_list>(<argument>_unpack_2ch_</argument>)</argument_list></macro>

<macro><name>PROTO4</name><argument_list>(<argument>_unpack_6ch_</argument>)</argument_list></macro>

<function><type><name>av_cold</name> <name>void</name></type> <name>swri_audio_convert_init_x86</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>AudioConvert</name></name> <modifier>*</modifier></type><name>ac</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>AVSampleFormat</name></name></type> <name>out_fmt</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>AVSampleFormat</name></name></type> <name>in_fmt</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>channels</name></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>mm_flags</name> <init>= <expr><call><name>av_get_cpu_flags</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>simd_f</name></name><operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MULTI_CAPS_FUNC</name><parameter_list>(<parameter><type><name>flag</name></type></parameter>, <parameter><type><name>cap</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (EXTERNAL_##flag(mm_flags)) {if( out_fmt == AV_SAMPLE_FMT_S32 &amp;&amp; in_fmt == AV_SAMPLE_FMT_S16 || out_fmt == AV_SAMPLE_FMT_S32P &amp;&amp; in_fmt == AV_SAMPLE_FMT_S16P)ac-&gt;simd_f = ff_int16_to_int32_a_ ##cap;if( out_fmt == AV_SAMPLE_FMT_S16 &amp;&amp; in_fmt == AV_SAMPLE_FMT_S32 || out_fmt == AV_SAMPLE_FMT_S16P &amp;&amp; in_fmt == AV_SAMPLE_FMT_S32P)ac-&gt;simd_f = ff_int32_to_int16_a_ ##cap;}</cpp:value></cpp:define>

<macro><name>MULTI_CAPS_FUNC</name><argument_list>(<argument>MMX</argument>, <argument>mmx</argument>)</argument_list></macro>

<macro><name>MULTI_CAPS_FUNC</name><argument_list>(<argument>SSE2</argument>, <argument>sse2</argument>)</argument_list></macro>

<if_stmt><if>if<condition>(<expr><call><name>EXTERNAL_MMX</name><argument_list>(<argument><expr><name>mm_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>channels</name> <operator>==</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>out_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_FLT</name> <operator>&amp;&amp;</operator> <name>in_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_FLTP</name> <operator>||</operator> <name>out_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_S32</name> <operator>&amp;&amp;</operator> <name>in_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_S32P</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>simd_f</name></name> <operator>=</operator> <name>ff_pack_6ch_float_to_float_a_mmx</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>EXTERNAL_SSE</name><argument_list>(<argument><expr><name>mm_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>channels</name> <operator>==</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>out_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_FLT</name> <operator>&amp;&amp;</operator> <name>in_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_FLTP</name> <operator>||</operator> <name>out_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_S32</name> <operator>&amp;&amp;</operator> <name>in_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_S32P</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>simd_f</name></name> <operator>=</operator> <name>ff_pack_6ch_float_to_float_a_sse</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>out_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_FLTP</name> <operator>&amp;&amp;</operator> <name>in_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_FLT</name> <operator>||</operator> <name>out_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_S32P</name> <operator>&amp;&amp;</operator> <name>in_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_S32</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>simd_f</name></name> <operator>=</operator> <name>ff_unpack_6ch_float_to_float_a_sse</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>EXTERNAL_SSE2</name><argument_list>(<argument><expr><name>mm_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>out_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_FLT</name> <operator>&amp;&amp;</operator> <name>in_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_S32</name> <operator>||</operator> <name>out_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_FLTP</name> <operator>&amp;&amp;</operator> <name>in_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_S32P</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>simd_f</name></name> <operator>=</operator> <name>ff_int32_to_float_a_sse2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>out_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_FLT</name> <operator>&amp;&amp;</operator> <name>in_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_S16</name> <operator>||</operator> <name>out_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_FLTP</name> <operator>&amp;&amp;</operator> <name>in_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_S16P</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>simd_f</name></name> <operator>=</operator> <name>ff_int16_to_float_a_sse2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>out_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_S32</name> <operator>&amp;&amp;</operator> <name>in_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_FLT</name> <operator>||</operator> <name>out_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_S32P</name> <operator>&amp;&amp;</operator> <name>in_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_FLTP</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>simd_f</name></name> <operator>=</operator> <name>ff_float_to_int32_a_sse2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>out_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_S16</name> <operator>&amp;&amp;</operator> <name>in_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_FLT</name> <operator>||</operator> <name>out_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_S16P</name> <operator>&amp;&amp;</operator> <name>in_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_FLTP</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>simd_f</name></name> <operator>=</operator> <name>ff_float_to_int16_a_sse2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>channels</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>out_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_FLT</name> <operator>&amp;&amp;</operator> <name>in_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_FLTP</name> <operator>||</operator> <name>out_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_S32</name> <operator>&amp;&amp;</operator> <name>in_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_S32P</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>simd_f</name></name> <operator>=</operator> <name>ff_pack_2ch_int32_to_int32_a_sse2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>out_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_S16</name> <operator>&amp;&amp;</operator> <name>in_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_S16P</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>simd_f</name></name> <operator>=</operator> <name>ff_pack_2ch_int16_to_int16_a_sse2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>out_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_S32</name> <operator>&amp;&amp;</operator> <name>in_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_S16P</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>simd_f</name></name> <operator>=</operator> <name>ff_pack_2ch_int16_to_int32_a_sse2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>out_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_S16</name> <operator>&amp;&amp;</operator> <name>in_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_S32P</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>simd_f</name></name> <operator>=</operator> <name>ff_pack_2ch_int32_to_int16_a_sse2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>out_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_FLTP</name> <operator>&amp;&amp;</operator> <name>in_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_FLT</name> <operator>||</operator> <name>out_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_S32P</name> <operator>&amp;&amp;</operator> <name>in_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_S32</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>simd_f</name></name> <operator>=</operator> <name>ff_unpack_2ch_int32_to_int32_a_sse2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>out_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_S16P</name> <operator>&amp;&amp;</operator> <name>in_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_S16</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>simd_f</name></name> <operator>=</operator> <name>ff_unpack_2ch_int16_to_int16_a_sse2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>out_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_S32P</name> <operator>&amp;&amp;</operator> <name>in_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_S16</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>simd_f</name></name> <operator>=</operator> <name>ff_unpack_2ch_int16_to_int32_a_sse2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>out_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_S16P</name> <operator>&amp;&amp;</operator> <name>in_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_S32</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>simd_f</name></name> <operator>=</operator> <name>ff_unpack_2ch_int32_to_int16_a_sse2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>out_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_FLT</name> <operator>&amp;&amp;</operator> <name>in_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_S32P</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>simd_f</name></name> <operator>=</operator> <name>ff_pack_2ch_int32_to_float_a_sse2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>out_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_S32</name> <operator>&amp;&amp;</operator> <name>in_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_FLTP</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>simd_f</name></name> <operator>=</operator> <name>ff_pack_2ch_float_to_int32_a_sse2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>out_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_FLT</name> <operator>&amp;&amp;</operator> <name>in_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_S16P</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>simd_f</name></name> <operator>=</operator> <name>ff_pack_2ch_int16_to_float_a_sse2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>out_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_S16</name> <operator>&amp;&amp;</operator> <name>in_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_FLTP</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>simd_f</name></name> <operator>=</operator> <name>ff_pack_2ch_float_to_int16_a_sse2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>out_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_FLTP</name> <operator>&amp;&amp;</operator> <name>in_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_S32</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>simd_f</name></name> <operator>=</operator> <name>ff_unpack_2ch_int32_to_float_a_sse2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>out_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_S32P</name> <operator>&amp;&amp;</operator> <name>in_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_FLT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>simd_f</name></name> <operator>=</operator> <name>ff_unpack_2ch_float_to_int32_a_sse2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>out_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_FLTP</name> <operator>&amp;&amp;</operator> <name>in_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_S16</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>simd_f</name></name> <operator>=</operator> <name>ff_unpack_2ch_int16_to_float_a_sse2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>out_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_S16P</name> <operator>&amp;&amp;</operator> <name>in_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_FLT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>simd_f</name></name> <operator>=</operator> <name>ff_unpack_2ch_float_to_int16_a_sse2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>channels</name> <operator>==</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>out_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_FLT</name> <operator>&amp;&amp;</operator> <name>in_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_S32P</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>simd_f</name></name> <operator>=</operator> <name>ff_pack_6ch_int32_to_float_a_sse2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>out_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_S32</name> <operator>&amp;&amp;</operator> <name>in_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_FLTP</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>simd_f</name></name> <operator>=</operator> <name>ff_pack_6ch_float_to_int32_a_sse2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>out_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_FLTP</name> <operator>&amp;&amp;</operator> <name>in_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_S32</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>simd_f</name></name> <operator>=</operator> <name>ff_unpack_6ch_int32_to_float_a_sse2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>out_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_S32P</name> <operator>&amp;&amp;</operator> <name>in_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_FLT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>simd_f</name></name> <operator>=</operator> <name>ff_unpack_6ch_float_to_int32_a_sse2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>channels</name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>out_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_FLT</name> <operator>&amp;&amp;</operator> <name>in_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_FLTP</name> <operator>||</operator> <name>out_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_S32</name> <operator>&amp;&amp;</operator> <name>in_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_S32P</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>simd_f</name></name> <operator>=</operator> <name>ff_pack_8ch_float_to_float_a_sse2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>out_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_FLT</name> <operator>&amp;&amp;</operator> <name>in_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_S32P</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>simd_f</name></name> <operator>=</operator> <name>ff_pack_8ch_int32_to_float_a_sse2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>out_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_S32</name> <operator>&amp;&amp;</operator> <name>in_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_FLTP</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>simd_f</name></name> <operator>=</operator> <name>ff_pack_8ch_float_to_int32_a_sse2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>EXTERNAL_SSSE3</name><argument_list>(<argument><expr><name>mm_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>channels</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>out_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_S16P</name> <operator>&amp;&amp;</operator> <name>in_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_S16</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>simd_f</name></name> <operator>=</operator> <name>ff_unpack_2ch_int16_to_int16_a_ssse3</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>out_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_S32P</name> <operator>&amp;&amp;</operator> <name>in_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_S16</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>simd_f</name></name> <operator>=</operator> <name>ff_unpack_2ch_int16_to_int32_a_ssse3</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>out_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_FLTP</name> <operator>&amp;&amp;</operator> <name>in_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_S16</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>simd_f</name></name> <operator>=</operator> <name>ff_unpack_2ch_int16_to_float_a_ssse3</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>EXTERNAL_AVX_FAST</name><argument_list>(<argument><expr><name>mm_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>out_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_FLT</name> <operator>&amp;&amp;</operator> <name>in_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_S32</name> <operator>||</operator> <name>out_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_FLTP</name> <operator>&amp;&amp;</operator> <name>in_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_S32P</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>simd_f</name></name> <operator>=</operator> <name>ff_int32_to_float_a_avx</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>EXTERNAL_AVX</name><argument_list>(<argument><expr><name>mm_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>channels</name> <operator>==</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>out_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_FLT</name> <operator>&amp;&amp;</operator> <name>in_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_FLTP</name> <operator>||</operator> <name>out_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_S32</name> <operator>&amp;&amp;</operator> <name>in_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_S32P</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>simd_f</name></name> <operator>=</operator> <name>ff_pack_6ch_float_to_float_a_avx</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>out_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_FLT</name> <operator>&amp;&amp;</operator> <name>in_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_S32P</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>simd_f</name></name> <operator>=</operator> <name>ff_pack_6ch_int32_to_float_a_avx</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>out_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_S32</name> <operator>&amp;&amp;</operator> <name>in_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_FLTP</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>simd_f</name></name> <operator>=</operator> <name>ff_pack_6ch_float_to_int32_a_avx</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>out_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_FLTP</name> <operator>&amp;&amp;</operator> <name>in_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_FLT</name> <operator>||</operator> <name>out_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_S32P</name> <operator>&amp;&amp;</operator> <name>in_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_S32</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>simd_f</name></name> <operator>=</operator> <name>ff_unpack_6ch_float_to_float_a_avx</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>out_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_FLTP</name> <operator>&amp;&amp;</operator> <name>in_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_S32</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>simd_f</name></name> <operator>=</operator> <name>ff_unpack_6ch_int32_to_float_a_avx</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>out_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_S32P</name> <operator>&amp;&amp;</operator> <name>in_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_FLT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>simd_f</name></name> <operator>=</operator> <name>ff_unpack_6ch_float_to_int32_a_avx</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>channels</name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>out_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_FLT</name> <operator>&amp;&amp;</operator> <name>in_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_FLTP</name> <operator>||</operator> <name>out_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_S32</name> <operator>&amp;&amp;</operator> <name>in_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_S32P</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>simd_f</name></name> <operator>=</operator> <name>ff_pack_8ch_float_to_float_a_avx</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>out_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_FLT</name> <operator>&amp;&amp;</operator> <name>in_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_S32P</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>simd_f</name></name> <operator>=</operator> <name>ff_pack_8ch_int32_to_float_a_avx</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>out_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_S32</name> <operator>&amp;&amp;</operator> <name>in_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_FLTP</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>simd_f</name></name> <operator>=</operator> <name>ff_pack_8ch_float_to_int32_a_avx</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>EXTERNAL_AVX2_FAST</name><argument_list>(<argument><expr><name>mm_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>out_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_S32</name> <operator>&amp;&amp;</operator> <name>in_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_FLT</name> <operator>||</operator> <name>out_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_S32P</name> <operator>&amp;&amp;</operator> <name>in_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_FLTP</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>simd_f</name></name> <operator>=</operator> <name>ff_float_to_int32_a_avx2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

</unit>
