<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libswresample\swresample_internal.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"swresample.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/channel_layout.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SWR_CH_MAX</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SQRT3_2</name></cpp:macro> <cpp:value>1.22474487139158904909</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NS_TAPS</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCH_X86_64</name></expr></cpp:if>

<typedef>typedef <type><name>int64_t</name></type> <name>integer</name>;</typedef>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<typedef>typedef <type><name>int</name></type> <name>integer</name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>mix_1_1_func_type</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>coeffp</name></decl></parameter>, <parameter><decl><type><name>integer</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>integer</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>mix_2_1_func_type</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>in1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>in2</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>coeffp</name></decl></parameter>, <parameter><decl><type><name>integer</name></type> <name>index1</name></decl></parameter>, <parameter><decl><type><name>integer</name></type> <name>index2</name></decl></parameter>, <parameter><decl><type><name>integer</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>mix_any_func_type</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>in1</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>coeffp</name></decl></parameter>, <parameter><decl><type><name>integer</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <type><struct>struct <name>AudioData</name><block>{

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>ch</name><index>[<expr><name>SWR_CH_MAX</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>ch_count</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>bps</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>planar</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>enum</name> <name>AVSampleFormat</name></name></type> <name>fmt</name></decl>;</decl_stmt> 

}</block></struct></type> <name>AudioData</name>;</typedef>

<struct>struct <name>DitherContext</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>method</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>noise_pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>scale</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>noise_scale</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>ns_taps</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name>ns_scale</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name>ns_scale_1</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>ns_pos</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name><name>ns_coeffs</name><index>[<expr><name>NS_TAPS</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name><name>ns_errors</name><index>[<expr><name>SWR_CH_MAX</name></expr>]</index><index>[<expr><literal type="number">2</literal><operator>*</operator><name>NS_TAPS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AudioData</name></type> <name>noise</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>AudioData</name></type> <name>temp</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>output_sample_bits</name></decl>;</decl_stmt> 

}</block>;</struct>

<typedef>typedef <function_decl><type><name><name>struct</name> <name>ResampleContext</name></name> <modifier>*</modifier></type> (<modifier>*</modifier> <name>resample_init_func</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ResampleContext</name></name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>out_rate</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>in_rate</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>filter_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>phase_shift</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>linear</name></decl></parameter>,

<parameter><decl><type><name>double</name></type> <name>cutoff</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVSampleFormat</name></name></type> <name>format</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>SwrFilterType</name></name></type> <name>filter_type</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>kaiser_beta</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>precision</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cheby</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>exact_rational</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier> <name>resample_free_func</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ResampleContext</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier> <name>multiple_resample_func</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ResampleContext</name></name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>AudioData</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_size</name></decl></parameter>, <parameter><decl><type><name>AudioData</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_size</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>consumed</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier> <name>resample_flush_func</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SwrContext</name></name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier> <name>set_compensation_func</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ResampleContext</name></name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sample_delta</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>compensation_distance</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>int64_t</name></type> (<modifier>*</modifier> <name>get_delay_func</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SwrContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>base</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier> <name>invert_initial_buffer_func</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ResampleContext</name></name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>AudioData</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AudioData</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_size</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>dst_idx</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>dst_count</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>int64_t</name></type> (<modifier>*</modifier> <name>get_out_samples_func</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SwrContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>in_samples</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<struct>struct <name>Resampler</name> <block>{

<decl_stmt><decl><type><name>resample_init_func</name></type> <name>init</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>resample_free_func</name></type> <name>free</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>multiple_resample_func</name></type> <name>multiple_resample</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>resample_flush_func</name></type> <name>flush</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>set_compensation_func</name></type> <name>set_compensation</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>get_delay_func</name></type> <name>get_delay</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>invert_initial_buffer_func</name></type> <name>invert_initial_buffer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>get_out_samples_func</name></type> <name>get_out_samples</name></decl>;</decl_stmt>

}</block>;</struct>

<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>Resampler</name></name> <specifier>const</specifier></type> <name>swri_resampler</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>Resampler</name></name> <specifier>const</specifier></type> <name>swri_soxr_resampler</name></decl>;</decl_stmt>

<struct>struct <name>SwrContext</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>av_class</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>log_level_offset</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>log_ctx</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>enum</name> <name>AVSampleFormat</name></name></type> <name>in_sample_fmt</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>enum</name> <name>AVSampleFormat</name></name></type> <name>int_sample_fmt</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>enum</name> <name>AVSampleFormat</name></name></type> <name>out_sample_fmt</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int64_t</name></type> <name>in_ch_layout</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int64_t</name></type> <name>out_ch_layout</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>in_sample_rate</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>out_sample_rate</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name>slev</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name>clev</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name>lfe_mix_level</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name>rematrix_volume</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name>rematrix_maxval</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>matrix_encoding</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>channel_map</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>used_ch_count</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>engine</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>user_in_ch_count</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>user_out_ch_count</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>user_used_ch_count</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int64_t</name></type> <name>user_in_ch_layout</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int64_t</name></type> <name>user_out_ch_layout</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>enum</name> <name>AVSampleFormat</name></name></type> <name>user_int_sample_fmt</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>user_dither_method</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>DitherContext</name></name></type> <name>dither</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>filter_size</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>phase_shift</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>linear_interp</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>exact_rational</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>double</name></type> <name>cutoff</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>filter_type</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>double</name></type> <name>kaiser_beta</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>double</name></type> <name>precision</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>cheby</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name>min_compensation</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name>min_hard_compensation</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name>soft_compensation_duration</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name>max_soft_compensation</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name>async</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int64_t</name></type> <name>firstpts_in_samples</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>resample_first</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>rematrix</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>rematrix_custom</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>AudioData</name></type> <name>in</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>AudioData</name></type> <name>postin</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>AudioData</name></type> <name>midbuf</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>AudioData</name></type> <name>preout</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>AudioData</name></type> <name>out</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>AudioData</name></type> <name>in_buffer</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>AudioData</name></type> <name>silence</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>AudioData</name></type> <name>drop_temp</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>in_buffer_index</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>in_buffer_count</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>resample_in_constraint</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>flushed</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int64_t</name></type> <name>outpts</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int64_t</name></type> <name>firstpts</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>drop_output</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>double</name></type> <name>delayed_samples_fixup</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>AudioConvert</name></name> <modifier>*</modifier></type><name>in_convert</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>AudioConvert</name></name> <modifier>*</modifier></type><name>out_convert</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>AudioConvert</name></name> <modifier>*</modifier></type><name>full_convert</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>ResampleContext</name></name> <modifier>*</modifier></type><name>resample</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>Resampler</name></name> <specifier>const</specifier> <modifier>*</modifier></type><name>resampler</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>double</name></type> <name><name>matrix</name><index>[<expr><name>SWR_CH_MAX</name></expr>]</index><index>[<expr><name>SWR_CH_MAX</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name><name>matrix_flt</name><index>[<expr><name>SWR_CH_MAX</name></expr>]</index><index>[<expr><name>SWR_CH_MAX</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>native_matrix</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>native_one</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>native_simd_one</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>native_simd_matrix</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name><name>matrix32</name><index>[<expr><name>SWR_CH_MAX</name></expr>]</index><index>[<expr><name>SWR_CH_MAX</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>matrix_ch</name><index>[<expr><name>SWR_CH_MAX</name></expr>]</index><index>[<expr><name>SWR_CH_MAX</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>mix_1_1_func_type</name> <modifier>*</modifier></type><name>mix_1_1_f</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mix_1_1_func_type</name> <modifier>*</modifier></type><name>mix_1_1_simd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mix_2_1_func_type</name> <modifier>*</modifier></type><name>mix_2_1_f</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mix_2_1_func_type</name> <modifier>*</modifier></type><name>mix_2_1_simd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mix_any_func_type</name> <modifier>*</modifier></type><name>mix_any_f</name></decl>;</decl_stmt>

}</block>;</struct>

<function_decl><type><name>av_warn_unused_result</name>

<name>int</name></type> <name>swri_realloc_audio</name><parameter_list>(<parameter><decl><type><name>AudioData</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>swri_noise_shaping_int16</name> <parameter_list>(<parameter><decl><type><name>SwrContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AudioData</name> <modifier>*</modifier></type><name>dsts</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AudioData</name> <modifier>*</modifier></type><name>srcs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AudioData</name> <modifier>*</modifier></type><name>noises</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>swri_noise_shaping_int32</name> <parameter_list>(<parameter><decl><type><name>SwrContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AudioData</name> <modifier>*</modifier></type><name>dsts</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AudioData</name> <modifier>*</modifier></type><name>srcs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AudioData</name> <modifier>*</modifier></type><name>noises</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>swri_noise_shaping_float</name> <parameter_list>(<parameter><decl><type><name>SwrContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AudioData</name> <modifier>*</modifier></type><name>dsts</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AudioData</name> <modifier>*</modifier></type><name>srcs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AudioData</name> <modifier>*</modifier></type><name>noises</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>swri_noise_shaping_double</name><parameter_list>(<parameter><decl><type><name>SwrContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AudioData</name> <modifier>*</modifier></type><name>dsts</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AudioData</name> <modifier>*</modifier></type><name>srcs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AudioData</name> <modifier>*</modifier></type><name>noises</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>av_warn_unused_result</name>

<name>int</name></type> <name>swri_rematrix_init</name><parameter_list>(<parameter><decl><type><name>SwrContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>swri_rematrix_free</name><parameter_list>(<parameter><decl><type><name>SwrContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>swri_rematrix</name><parameter_list>(<parameter><decl><type><name>SwrContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AudioData</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>AudioData</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mustcopy</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>swri_rematrix_init_x86</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SwrContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>av_warn_unused_result</name>

<name>int</name></type> <name>swri_get_dither</name><parameter_list>(<parameter><decl><type><name>SwrContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>seed</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVSampleFormat</name></name></type> <name>noise_fmt</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>av_warn_unused_result</name>

<name>int</name></type> <name>swri_dither_init</name><parameter_list>(<parameter><decl><type><name>SwrContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVSampleFormat</name></name></type> <name>out_fmt</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVSampleFormat</name></name></type> <name>in_fmt</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>swri_audio_convert_init_aarch64</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>AudioConvert</name></name> <modifier>*</modifier></type><name>ac</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>AVSampleFormat</name></name></type> <name>out_fmt</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>AVSampleFormat</name></name></type> <name>in_fmt</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>channels</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>swri_audio_convert_init_arm</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>AudioConvert</name></name> <modifier>*</modifier></type><name>ac</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>AVSampleFormat</name></name></type> <name>out_fmt</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>AVSampleFormat</name></name></type> <name>in_fmt</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>channels</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>swri_audio_convert_init_x86</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>AudioConvert</name></name> <modifier>*</modifier></type><name>ac</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>AVSampleFormat</name></name></type> <name>out_fmt</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>AVSampleFormat</name></name></type> <name>in_fmt</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>channels</name></decl></parameter>)</parameter_list>;</function_decl>

</unit>
