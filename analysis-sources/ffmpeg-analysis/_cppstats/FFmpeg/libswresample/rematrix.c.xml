<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libswresample\rematrix.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"swresample_internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/channel_layout.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEMPLATE_REMATRIX_FLT</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rematrix_template.c"</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TEMPLATE_REMATRIX_FLT</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEMPLATE_REMATRIX_DBL</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rematrix_template.c"</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TEMPLATE_REMATRIX_DBL</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEMPLATE_REMATRIX_S16</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rematrix_template.c"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEMPLATE_CLIP</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rematrix_template.c"</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TEMPLATE_CLIP</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TEMPLATE_REMATRIX_S16</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEMPLATE_REMATRIX_S32</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rematrix_template.c"</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TEMPLATE_REMATRIX_S32</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FRONT_LEFT</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FRONT_RIGHT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FRONT_CENTER</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOW_FREQUENCY</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BACK_LEFT</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BACK_RIGHT</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FRONT_LEFT_OF_CENTER</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FRONT_RIGHT_OF_CENTER</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BACK_CENTER</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIDE_LEFT</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIDE_RIGHT</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOP_CENTER</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOP_FRONT_LEFT</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOP_FRONT_CENTER</name></cpp:macro> <cpp:value>13</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOP_FRONT_RIGHT</name></cpp:macro> <cpp:value>14</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOP_BACK_LEFT</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOP_BACK_CENTER</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOP_BACK_RIGHT</name></cpp:macro> <cpp:value>17</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM_NAMED_CHANNELS</name></cpp:macro> <cpp:value>18</cpp:value></cpp:define>

<function><type><name>int</name></type> <name>swr_set_matrix</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SwrContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>double</name> <modifier>*</modifier></type><name>matrix</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>nb_in</name></decl>, <decl><type ref="prev"/><name>nb_out</name></decl>, <decl><type ref="prev"/><name>in</name></decl>, <decl><type ref="prev"/><name>out</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>s</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>in_convert</name></name></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>matrix</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>matrix</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>matrix_flt</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>matrix_flt</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>nb_in</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>user_in_ch_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>user_in_ch_count</name></name></expr> </then><else>:

<expr><call><name>av_get_channel_layout_nb_channels</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>user_in_ch_layout</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>nb_out</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>user_out_ch_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>user_out_ch_count</name></name></expr> </then><else>:

<expr><call><name>av_get_channel_layout_nb_channels</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>user_out_ch_layout</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>out</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>out</name> <operator>&lt;</operator> <name>nb_out</name></expr>;</condition> <incr><expr><name>out</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>in</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>in</name> <operator>&lt;</operator> <name>nb_in</name></expr>;</condition> <incr><expr><name>in</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>matrix_flt</name><index>[<expr><name>out</name></expr>]</index><index>[<expr><name>in</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>matrix</name><index>[<expr><name>out</name></expr>]</index><index>[<expr><name>in</name></expr>]</index></name> <operator>=</operator> <name><name>matrix</name><index>[<expr><name>in</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>matrix</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rematrix_custom</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>even</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>layout</name></decl></parameter>)</parameter_list><block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>layout</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>layout</name><operator>&amp;</operator><operator>(</operator><name>layout</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>clean_layout</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>layout</name></decl></parameter>)</parameter_list><block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>layout</name> <operator>&amp;&amp;</operator> <name>layout</name> <operator>!=</operator> <name>AV_CH_FRONT_CENTER</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>layout</name><operator>&amp;</operator><operator>(</operator><name>layout</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_get_channel_layout_string</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>layout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"Treating %s as mono\n"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AV_CH_FRONT_CENTER</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>layout</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sane_layout</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>layout</name></decl></parameter>)</parameter_list><block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name>layout</name> <operator>&amp;</operator> <name>AV_CH_LAYOUT_SURROUND</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>even</name><argument_list>(<argument><expr><name>layout</name> <operator>&amp;</operator> <operator>(</operator><name>AV_CH_FRONT_LEFT</name> <operator>|</operator> <name>AV_CH_FRONT_RIGHT</name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>even</name><argument_list>(<argument><expr><name>layout</name> <operator>&amp;</operator> <operator>(</operator><name>AV_CH_SIDE_LEFT</name> <operator>|</operator> <name>AV_CH_SIDE_RIGHT</name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>even</name><argument_list>(<argument><expr><name>layout</name> <operator>&amp;</operator> <operator>(</operator><name>AV_CH_BACK_LEFT</name> <operator>|</operator> <name>AV_CH_BACK_RIGHT</name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>even</name><argument_list>(<argument><expr><name>layout</name> <operator>&amp;</operator> <operator>(</operator><name>AV_CH_FRONT_LEFT_OF_CENTER</name> <operator>|</operator> <name>AV_CH_FRONT_RIGHT_OF_CENTER</name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>av_get_channel_layout_nb_channels</name><argument_list>(<argument><expr><name>layout</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>SWR_CH_MAX</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>av_cold</name> <name>int</name></type> <name>swr_build_matrix</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>in_ch_layout_param</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>out_ch_layout_param</name></decl></parameter>,

<parameter><decl><type><name>double</name></type> <name>center_mix_level</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>surround_mix_level</name></decl></parameter>,

<parameter><decl><type><name>double</name></type> <name>lfe_mix_level</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>maxval</name></decl></parameter>,

<parameter><decl><type><name>double</name></type> <name>rematrix_volume</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>matrix_param</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVMatrixEncoding</name></name></type> <name>matrix_encoding</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>log_context</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>out_i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name><name>matrix</name><index>[<expr><name>NUM_NAMED_CHANNELS</name></expr>]</index><index>[<expr><name>NUM_NAMED_CHANNELS</name></expr>]</index></name><init>=<expr><block>{<expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>unaccounted</name></decl>, <decl><type ref="prev"/><name>in_ch_layout</name></decl>, <decl><type ref="prev"/><name>out_ch_layout</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>maxcoef</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>in_ch_layout</name> <operator>=</operator> <call><name>clean_layout</name><argument_list>(<argument><expr><name>log_context</name></expr></argument>, <argument><expr><name>in_ch_layout_param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>out_ch_layout</name> <operator>=</operator> <call><name>clean_layout</name><argument_list>(<argument><expr><name>log_context</name></expr></argument>, <argument><expr><name>out_ch_layout_param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>out_ch_layout</name> <operator>==</operator> <name>AV_CH_LAYOUT_STEREO_DOWNMIX</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name>in_ch_layout</name> <operator>&amp;</operator> <name>AV_CH_LAYOUT_STEREO_DOWNMIX</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>

)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>out_ch_layout</name> <operator>=</operator> <name>AV_CH_LAYOUT_STEREO</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>in_ch_layout</name> <operator>==</operator> <name>AV_CH_LAYOUT_STEREO_DOWNMIX</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name>out_ch_layout</name> <operator>&amp;</operator> <name>AV_CH_LAYOUT_STEREO_DOWNMIX</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>

)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>in_ch_layout</name> <operator>=</operator> <name>AV_CH_LAYOUT_STEREO</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>sane_layout</name><argument_list>(<argument><expr><name>in_ch_layout</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>av_get_channel_layout_string</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>in_ch_layout_param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>log_context</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Input channel layout '%s' is not supported\n"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>sane_layout</name><argument_list>(<argument><expr><name>out_ch_layout</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>av_get_channel_layout_string</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>out_ch_layout_param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>log_context</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Output channel layout '%s' is not supported\n"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>matrix</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>in_ch_layout</name> <operator>&amp;</operator> <name>out_ch_layout</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1ULL</literal><operator>&lt;&lt;</operator><name>i</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>matrix</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>unaccounted</name><operator>=</operator> <name>in_ch_layout</name> <operator>&amp;</operator> <operator>~</operator><name>out_ch_layout</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>unaccounted</name> <operator>&amp;</operator> <name>AV_CH_FRONT_CENTER</name></expr>)</condition><block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>out_ch_layout</name> <operator>&amp;</operator> <name>AV_CH_LAYOUT_STEREO</name><operator>)</operator> <operator>==</operator> <name>AV_CH_LAYOUT_STEREO</name></expr>)</condition><block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>in_ch_layout</name> <operator>&amp;</operator> <name>AV_CH_LAYOUT_STEREO</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>matrix</name><index>[ <expr><name>FRONT_LEFT</name></expr>]</index><index>[<expr><name>FRONT_CENTER</name></expr>]</index></name><operator>+=</operator> <name>center_mix_level</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>matrix</name><index>[<expr><name>FRONT_RIGHT</name></expr>]</index><index>[<expr><name>FRONT_CENTER</name></expr>]</index></name><operator>+=</operator> <name>center_mix_level</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>matrix</name><index>[ <expr><name>FRONT_LEFT</name></expr>]</index><index>[<expr><name>FRONT_CENTER</name></expr>]</index></name><operator>+=</operator> <name>M_SQRT1_2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>matrix</name><index>[<expr><name>FRONT_RIGHT</name></expr>]</index><index>[<expr><name>FRONT_CENTER</name></expr>]</index></name><operator>+=</operator> <name>M_SQRT1_2</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if><else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>unaccounted</name> <operator>&amp;</operator> <name>AV_CH_LAYOUT_STEREO</name></expr>)</condition><block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>out_ch_layout</name> <operator>&amp;</operator> <name>AV_CH_FRONT_CENTER</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>matrix</name><index>[<expr><name>FRONT_CENTER</name></expr>]</index><index>[ <expr><name>FRONT_LEFT</name></expr>]</index></name><operator>+=</operator> <name>M_SQRT1_2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>matrix</name><index>[<expr><name>FRONT_CENTER</name></expr>]</index><index>[<expr><name>FRONT_RIGHT</name></expr>]</index></name><operator>+=</operator> <name>M_SQRT1_2</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>in_ch_layout</name> <operator>&amp;</operator> <name>AV_CH_FRONT_CENTER</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>matrix</name><index>[<expr><name>FRONT_CENTER</name></expr>]</index><index>[ <expr><name>FRONT_CENTER</name></expr>]</index></name> <operator>=</operator> <name>center_mix_level</name><operator>*</operator><call><name>sqrt</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if><else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>unaccounted</name> <operator>&amp;</operator> <name>AV_CH_BACK_CENTER</name></expr>)</condition><block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>out_ch_layout</name> <operator>&amp;</operator> <name>AV_CH_BACK_LEFT</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>matrix</name><index>[ <expr><name>BACK_LEFT</name></expr>]</index><index>[<expr><name>BACK_CENTER</name></expr>]</index></name><operator>+=</operator> <name>M_SQRT1_2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>matrix</name><index>[<expr><name>BACK_RIGHT</name></expr>]</index><index>[<expr><name>BACK_CENTER</name></expr>]</index></name><operator>+=</operator> <name>M_SQRT1_2</name></expr>;</expr_stmt>

</block_content>}</block></if><if type="elseif">else if<condition>(<expr><name>out_ch_layout</name> <operator>&amp;</operator> <name>AV_CH_SIDE_LEFT</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>matrix</name><index>[ <expr><name>SIDE_LEFT</name></expr>]</index><index>[<expr><name>BACK_CENTER</name></expr>]</index></name><operator>+=</operator> <name>M_SQRT1_2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>matrix</name><index>[<expr><name>SIDE_RIGHT</name></expr>]</index><index>[<expr><name>BACK_CENTER</name></expr>]</index></name><operator>+=</operator> <name>M_SQRT1_2</name></expr>;</expr_stmt>

</block_content>}</block></if><if type="elseif">else if<condition>(<expr><name>out_ch_layout</name> <operator>&amp;</operator> <name>AV_CH_FRONT_LEFT</name></expr>)</condition><block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>matrix_encoding</name> <operator>==</operator> <name>AV_MATRIX_ENCODING_DOLBY</name> <operator>||</operator>

<name>matrix_encoding</name> <operator>==</operator> <name>AV_MATRIX_ENCODING_DPLII</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>unaccounted</name> <operator>&amp;</operator> <operator>(</operator><name>AV_CH_BACK_LEFT</name> <operator>|</operator> <name>AV_CH_SIDE_LEFT</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>matrix</name><index>[<expr><name>FRONT_LEFT</name></expr> ]</index><index>[<expr><name>BACK_CENTER</name></expr>]</index></name> <operator>-=</operator> <name>surround_mix_level</name> <operator>*</operator> <name>M_SQRT1_2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>matrix</name><index>[<expr><name>FRONT_RIGHT</name></expr>]</index><index>[<expr><name>BACK_CENTER</name></expr>]</index></name> <operator>+=</operator> <name>surround_mix_level</name> <operator>*</operator> <name>M_SQRT1_2</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>matrix</name><index>[<expr><name>FRONT_LEFT</name></expr> ]</index><index>[<expr><name>BACK_CENTER</name></expr>]</index></name> <operator>-=</operator> <name>surround_mix_level</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>matrix</name><index>[<expr><name>FRONT_RIGHT</name></expr>]</index><index>[<expr><name>BACK_CENTER</name></expr>]</index></name> <operator>+=</operator> <name>surround_mix_level</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>matrix</name><index>[ <expr><name>FRONT_LEFT</name></expr>]</index><index>[<expr><name>BACK_CENTER</name></expr>]</index></name><operator>+=</operator> <name>surround_mix_level</name> <operator>*</operator> <name>M_SQRT1_2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>matrix</name><index>[<expr><name>FRONT_RIGHT</name></expr>]</index><index>[<expr><name>BACK_CENTER</name></expr>]</index></name><operator>+=</operator> <name>surround_mix_level</name> <operator>*</operator> <name>M_SQRT1_2</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if><if type="elseif">else if<condition>(<expr><name>out_ch_layout</name> <operator>&amp;</operator> <name>AV_CH_FRONT_CENTER</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>matrix</name><index>[ <expr><name>FRONT_CENTER</name></expr>]</index><index>[<expr><name>BACK_CENTER</name></expr>]</index></name><operator>+=</operator> <name>surround_mix_level</name> <operator>*</operator> <name>M_SQRT1_2</name></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>unaccounted</name> <operator>&amp;</operator> <name>AV_CH_BACK_LEFT</name></expr>)</condition><block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>out_ch_layout</name> <operator>&amp;</operator> <name>AV_CH_BACK_CENTER</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>matrix</name><index>[<expr><name>BACK_CENTER</name></expr>]</index><index>[ <expr><name>BACK_LEFT</name></expr>]</index></name><operator>+=</operator> <name>M_SQRT1_2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>matrix</name><index>[<expr><name>BACK_CENTER</name></expr>]</index><index>[<expr><name>BACK_RIGHT</name></expr>]</index></name><operator>+=</operator> <name>M_SQRT1_2</name></expr>;</expr_stmt>

</block_content>}</block></if><if type="elseif">else if<condition>(<expr><name>out_ch_layout</name> <operator>&amp;</operator> <name>AV_CH_SIDE_LEFT</name></expr>)</condition><block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>in_ch_layout</name> <operator>&amp;</operator> <name>AV_CH_SIDE_LEFT</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>matrix</name><index>[ <expr><name>SIDE_LEFT</name></expr>]</index><index>[ <expr><name>BACK_LEFT</name></expr>]</index></name><operator>+=</operator> <name>M_SQRT1_2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>matrix</name><index>[<expr><name>SIDE_RIGHT</name></expr>]</index><index>[<expr><name>BACK_RIGHT</name></expr>]</index></name><operator>+=</operator> <name>M_SQRT1_2</name></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><name><name>matrix</name><index>[ <expr><name>SIDE_LEFT</name></expr>]</index><index>[ <expr><name>BACK_LEFT</name></expr>]</index></name><operator>+=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>matrix</name><index>[<expr><name>SIDE_RIGHT</name></expr>]</index><index>[<expr><name>BACK_RIGHT</name></expr>]</index></name><operator>+=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if><if type="elseif">else if<condition>(<expr><name>out_ch_layout</name> <operator>&amp;</operator> <name>AV_CH_FRONT_LEFT</name></expr>)</condition><block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>matrix_encoding</name> <operator>==</operator> <name>AV_MATRIX_ENCODING_DOLBY</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>matrix</name><index>[<expr><name>FRONT_LEFT</name></expr> ]</index><index>[<expr><name>BACK_LEFT</name></expr> ]</index></name> <operator>-=</operator> <name>surround_mix_level</name> <operator>*</operator> <name>M_SQRT1_2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>matrix</name><index>[<expr><name>FRONT_LEFT</name></expr> ]</index><index>[<expr><name>BACK_RIGHT</name></expr>]</index></name> <operator>-=</operator> <name>surround_mix_level</name> <operator>*</operator> <name>M_SQRT1_2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>matrix</name><index>[<expr><name>FRONT_RIGHT</name></expr>]</index><index>[<expr><name>BACK_LEFT</name></expr> ]</index></name> <operator>+=</operator> <name>surround_mix_level</name> <operator>*</operator> <name>M_SQRT1_2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>matrix</name><index>[<expr><name>FRONT_RIGHT</name></expr>]</index><index>[<expr><name>BACK_RIGHT</name></expr>]</index></name> <operator>+=</operator> <name>surround_mix_level</name> <operator>*</operator> <name>M_SQRT1_2</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>matrix_encoding</name> <operator>==</operator> <name>AV_MATRIX_ENCODING_DPLII</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>matrix</name><index>[<expr><name>FRONT_LEFT</name></expr> ]</index><index>[<expr><name>BACK_LEFT</name></expr> ]</index></name> <operator>-=</operator> <name>surround_mix_level</name> <operator>*</operator> <name>SQRT3_2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>matrix</name><index>[<expr><name>FRONT_LEFT</name></expr> ]</index><index>[<expr><name>BACK_RIGHT</name></expr>]</index></name> <operator>-=</operator> <name>surround_mix_level</name> <operator>*</operator> <name>M_SQRT1_2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>matrix</name><index>[<expr><name>FRONT_RIGHT</name></expr>]</index><index>[<expr><name>BACK_LEFT</name></expr> ]</index></name> <operator>+=</operator> <name>surround_mix_level</name> <operator>*</operator> <name>M_SQRT1_2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>matrix</name><index>[<expr><name>FRONT_RIGHT</name></expr>]</index><index>[<expr><name>BACK_RIGHT</name></expr>]</index></name> <operator>+=</operator> <name>surround_mix_level</name> <operator>*</operator> <name>SQRT3_2</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>matrix</name><index>[ <expr><name>FRONT_LEFT</name></expr>]</index><index>[ <expr><name>BACK_LEFT</name></expr>]</index></name> <operator>+=</operator> <name>surround_mix_level</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>matrix</name><index>[<expr><name>FRONT_RIGHT</name></expr>]</index><index>[<expr><name>BACK_RIGHT</name></expr>]</index></name> <operator>+=</operator> <name>surround_mix_level</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if><if type="elseif">else if<condition>(<expr><name>out_ch_layout</name> <operator>&amp;</operator> <name>AV_CH_FRONT_CENTER</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>matrix</name><index>[ <expr><name>FRONT_CENTER</name></expr>]</index><index>[<expr><name>BACK_LEFT</name></expr> ]</index></name><operator>+=</operator> <name>surround_mix_level</name><operator>*</operator><name>M_SQRT1_2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>matrix</name><index>[ <expr><name>FRONT_CENTER</name></expr>]</index><index>[<expr><name>BACK_RIGHT</name></expr>]</index></name><operator>+=</operator> <name>surround_mix_level</name><operator>*</operator><name>M_SQRT1_2</name></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>unaccounted</name> <operator>&amp;</operator> <name>AV_CH_SIDE_LEFT</name></expr>)</condition><block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>out_ch_layout</name> <operator>&amp;</operator> <name>AV_CH_BACK_LEFT</name></expr>)</condition><block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>in_ch_layout</name> <operator>&amp;</operator> <name>AV_CH_BACK_LEFT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>matrix</name><index>[<expr><name>BACK_LEFT</name></expr> ]</index><index>[<expr><name>SIDE_LEFT</name></expr> ]</index></name> <operator>+=</operator> <name>M_SQRT1_2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>matrix</name><index>[<expr><name>BACK_RIGHT</name></expr>]</index><index>[<expr><name>SIDE_RIGHT</name></expr>]</index></name> <operator>+=</operator> <name>M_SQRT1_2</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>matrix</name><index>[<expr><name>BACK_LEFT</name></expr> ]</index><index>[<expr><name>SIDE_LEFT</name></expr> ]</index></name> <operator>+=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>matrix</name><index>[<expr><name>BACK_RIGHT</name></expr>]</index><index>[<expr><name>SIDE_RIGHT</name></expr>]</index></name> <operator>+=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if><if type="elseif">else if<condition>(<expr><name>out_ch_layout</name> <operator>&amp;</operator> <name>AV_CH_BACK_CENTER</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>matrix</name><index>[<expr><name>BACK_CENTER</name></expr>]</index><index>[ <expr><name>SIDE_LEFT</name></expr>]</index></name><operator>+=</operator> <name>M_SQRT1_2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>matrix</name><index>[<expr><name>BACK_CENTER</name></expr>]</index><index>[<expr><name>SIDE_RIGHT</name></expr>]</index></name><operator>+=</operator> <name>M_SQRT1_2</name></expr>;</expr_stmt>

</block_content>}</block></if><if type="elseif">else if<condition>(<expr><name>out_ch_layout</name> <operator>&amp;</operator> <name>AV_CH_FRONT_LEFT</name></expr>)</condition><block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>matrix_encoding</name> <operator>==</operator> <name>AV_MATRIX_ENCODING_DOLBY</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>matrix</name><index>[<expr><name>FRONT_LEFT</name></expr> ]</index><index>[<expr><name>SIDE_LEFT</name></expr> ]</index></name> <operator>-=</operator> <name>surround_mix_level</name> <operator>*</operator> <name>M_SQRT1_2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>matrix</name><index>[<expr><name>FRONT_LEFT</name></expr> ]</index><index>[<expr><name>SIDE_RIGHT</name></expr>]</index></name> <operator>-=</operator> <name>surround_mix_level</name> <operator>*</operator> <name>M_SQRT1_2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>matrix</name><index>[<expr><name>FRONT_RIGHT</name></expr>]</index><index>[<expr><name>SIDE_LEFT</name></expr> ]</index></name> <operator>+=</operator> <name>surround_mix_level</name> <operator>*</operator> <name>M_SQRT1_2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>matrix</name><index>[<expr><name>FRONT_RIGHT</name></expr>]</index><index>[<expr><name>SIDE_RIGHT</name></expr>]</index></name> <operator>+=</operator> <name>surround_mix_level</name> <operator>*</operator> <name>M_SQRT1_2</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>matrix_encoding</name> <operator>==</operator> <name>AV_MATRIX_ENCODING_DPLII</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>matrix</name><index>[<expr><name>FRONT_LEFT</name></expr> ]</index><index>[<expr><name>SIDE_LEFT</name></expr> ]</index></name> <operator>-=</operator> <name>surround_mix_level</name> <operator>*</operator> <name>SQRT3_2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>matrix</name><index>[<expr><name>FRONT_LEFT</name></expr> ]</index><index>[<expr><name>SIDE_RIGHT</name></expr>]</index></name> <operator>-=</operator> <name>surround_mix_level</name> <operator>*</operator> <name>M_SQRT1_2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>matrix</name><index>[<expr><name>FRONT_RIGHT</name></expr>]</index><index>[<expr><name>SIDE_LEFT</name></expr> ]</index></name> <operator>+=</operator> <name>surround_mix_level</name> <operator>*</operator> <name>M_SQRT1_2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>matrix</name><index>[<expr><name>FRONT_RIGHT</name></expr>]</index><index>[<expr><name>SIDE_RIGHT</name></expr>]</index></name> <operator>+=</operator> <name>surround_mix_level</name> <operator>*</operator> <name>SQRT3_2</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>matrix</name><index>[ <expr><name>FRONT_LEFT</name></expr>]</index><index>[ <expr><name>SIDE_LEFT</name></expr>]</index></name> <operator>+=</operator> <name>surround_mix_level</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>matrix</name><index>[<expr><name>FRONT_RIGHT</name></expr>]</index><index>[<expr><name>SIDE_RIGHT</name></expr>]</index></name> <operator>+=</operator> <name>surround_mix_level</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if><if type="elseif">else if<condition>(<expr><name>out_ch_layout</name> <operator>&amp;</operator> <name>AV_CH_FRONT_CENTER</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>matrix</name><index>[ <expr><name>FRONT_CENTER</name></expr>]</index><index>[<expr><name>SIDE_LEFT</name></expr> ]</index></name><operator>+=</operator> <name>surround_mix_level</name> <operator>*</operator> <name>M_SQRT1_2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>matrix</name><index>[ <expr><name>FRONT_CENTER</name></expr>]</index><index>[<expr><name>SIDE_RIGHT</name></expr>]</index></name><operator>+=</operator> <name>surround_mix_level</name> <operator>*</operator> <name>M_SQRT1_2</name></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>unaccounted</name> <operator>&amp;</operator> <name>AV_CH_FRONT_LEFT_OF_CENTER</name></expr>)</condition><block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>out_ch_layout</name> <operator>&amp;</operator> <name>AV_CH_FRONT_LEFT</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>matrix</name><index>[ <expr><name>FRONT_LEFT</name></expr>]</index><index>[ <expr><name>FRONT_LEFT_OF_CENTER</name></expr>]</index></name><operator>+=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>matrix</name><index>[<expr><name>FRONT_RIGHT</name></expr>]</index><index>[<expr><name>FRONT_RIGHT_OF_CENTER</name></expr>]</index></name><operator>+=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt>

</block_content>}</block></if><if type="elseif">else if<condition>(<expr><name>out_ch_layout</name> <operator>&amp;</operator> <name>AV_CH_FRONT_CENTER</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>matrix</name><index>[ <expr><name>FRONT_CENTER</name></expr>]</index><index>[ <expr><name>FRONT_LEFT_OF_CENTER</name></expr>]</index></name><operator>+=</operator> <name>M_SQRT1_2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>matrix</name><index>[ <expr><name>FRONT_CENTER</name></expr>]</index><index>[<expr><name>FRONT_RIGHT_OF_CENTER</name></expr>]</index></name><operator>+=</operator> <name>M_SQRT1_2</name></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>unaccounted</name> <operator>&amp;</operator> <name>AV_CH_LOW_FREQUENCY</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>out_ch_layout</name> <operator>&amp;</operator> <name>AV_CH_FRONT_CENTER</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>matrix</name><index>[<expr><name>FRONT_CENTER</name></expr>]</index><index>[<expr><name>LOW_FREQUENCY</name></expr>]</index></name> <operator>+=</operator> <name>lfe_mix_level</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>out_ch_layout</name> <operator>&amp;</operator> <name>AV_CH_FRONT_LEFT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>matrix</name><index>[<expr><name>FRONT_LEFT</name></expr> ]</index><index>[<expr><name>LOW_FREQUENCY</name></expr>]</index></name> <operator>+=</operator> <name>lfe_mix_level</name> <operator>*</operator> <name>M_SQRT1_2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>matrix</name><index>[<expr><name>FRONT_RIGHT</name></expr>]</index><index>[<expr><name>LOW_FREQUENCY</name></expr>]</index></name> <operator>+=</operator> <name>lfe_mix_level</name> <operator>*</operator> <name>M_SQRT1_2</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<for>for<control>(<init><expr><name>out_i</name><operator>=</operator><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>sum</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>in_i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>out_ch_layout</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1ULL</literal><operator>&lt;&lt;</operator><name>i</name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><literal type="number">64</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>in_ch_layout</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1ULL</literal><operator>&lt;&lt;</operator><name>j</name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>matrix</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>j</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name><name>matrix</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>matrix_param</name><index>[<expr><name>stride</name><operator>*</operator><name>out_i</name> <operator>+</operator> <name>in_i</name></expr>]</index></name> <operator>=</operator> <name><name>matrix</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>matrix_param</name><index>[<expr><name>stride</name><operator>*</operator><name>out_i</name> <operator>+</operator> <name>in_i</name></expr>]</index></name> <operator>=</operator> <name>i</name> <operator>==</operator> <name>j</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>in_ch_layout</name> <operator>&amp;</operator> <name>out_ch_layout</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1ULL</literal><operator>&lt;&lt;</operator><name>i</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>sum</name> <operator>+=</operator> <call><name>fabs</name><argument_list>(<argument><expr><name><name>matrix_param</name><index>[<expr><name>stride</name><operator>*</operator><name>out_i</name> <operator>+</operator> <name>in_i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>in_i</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>maxcoef</name><operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>maxcoef</name></expr></argument>, <argument><expr><name>sum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>out_i</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>(<expr><name>rematrix_volume</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>maxcoef</name> <operator>=</operator> <operator>-</operator><name>rematrix_volume</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>maxcoef</name> <operator>&gt;</operator> <name>maxval</name> <operator>||</operator> <name>rematrix_volume</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>maxcoef</name> <operator>/=</operator> <name>maxval</name></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>SWR_CH_MAX</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name>SWR_CH_MAX</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name><name>matrix_param</name><index>[<expr><name>stride</name><operator>*</operator><name>i</name> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>/=</operator> <name>maxcoef</name></expr>;</expr_stmt>

</block_content>}</block></for></block_content></block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>rematrix_volume</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>SWR_CH_MAX</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name>SWR_CH_MAX</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name><name>matrix_param</name><index>[<expr><name>stride</name><operator>*</operator><name>i</name> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>*=</operator> <name>rematrix_volume</name></expr>;</expr_stmt>

</block_content>}</block></for></block_content></block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>log_context</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Matrix coefficients:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name>av_get_channel_layout_nb_channels</name><argument_list>(<argument><expr><name>out_ch_layout</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>c</name> <init>=

<expr><call><name>av_get_channel_name</name><argument_list>(<argument><expr><call><name>av_channel_layout_extract_channel</name><argument_list>(<argument><expr><name>out_ch_layout</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>log_context</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"%s: "</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>c</name></expr> ?</condition><then> <expr><name>c</name></expr> </then><else>: <expr><literal type="string">"?"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><call><name>av_get_channel_layout_nb_channels</name><argument_list>(<argument><expr><name>in_ch_layout</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>av_get_channel_name</name><argument_list>(<argument><expr><call><name>av_channel_layout_extract_channel</name><argument_list>(<argument><expr><name>in_ch_layout</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>log_context</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"%s:%f "</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>c</name></expr> ?</condition><then> <expr><name>c</name></expr> </then><else>: <expr><literal type="string">"?"</literal></expr></else></ternary></expr></argument>, <argument><expr><name><name>matrix_param</name><index>[<expr><name>stride</name><operator>*</operator><name>i</name> <operator>+</operator> <name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>log_context</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>av_cold</name> <specifier>static</specifier> <name>int</name></type> <name>auto_matrix</name><parameter_list>(<parameter><decl><type><name>SwrContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>maxval</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>rematrix_maxval</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>maxval</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>rematrix_maxval</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><call><name>av_get_packed_sample_fmt</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>out_sample_fmt</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>AV_SAMPLE_FMT_FLT</name>

<operator>||</operator> <call><name>av_get_packed_sample_fmt</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>int_sample_fmt</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>AV_SAMPLE_FMT_FLT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>maxval</name> <operator>=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>maxval</name> <operator>=</operator> <name>INT_MAX</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>matrix</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>matrix</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>swr_build_matrix</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>in_ch_layout</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>out_ch_layout</name></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>clev</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>slev</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>lfe_mix_level</name></name></expr></argument>,

<argument><expr><name>maxval</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>rematrix_volume</name></name></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>matrix</name></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>matrix</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>matrix</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>matrix_encoding</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>int_sample_fmt</name></name> <operator>==</operator> <name>AV_SAMPLE_FMT_FLTP</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>matrix</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>matrix</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>matrix_flt</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>matrix</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for></block_content></block></for>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>av_cold</name> <name>int</name></type> <name>swri_rematrix_init</name><parameter_list>(<parameter><decl><type><name>SwrContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nb_in</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>used_ch_count</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nb_out</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>ch_count</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mix_any_f</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>rematrix_custom</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name>auto_matrix</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>r</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>midbuf</name><operator>.</operator><name>fmt</name></name> <operator>==</operator> <name>AV_SAMPLE_FMT_S16P</name></expr>)</condition><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>maxsum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>native_matrix</name></name> <operator>=</operator> <call><name>av_calloc</name><argument_list>(<argument><expr><name>nb_in</name> <operator>*</operator> <name>nb_out</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>native_one</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>native_matrix</name></name> <operator>||</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>native_one</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_out</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>rem</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>nb_in</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>target</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>matrix</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>*</operator> <literal type="number">32768</literal> <operator>+</operator> <name>rem</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>int</name><operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>native_matrix</name></name><operator>)</operator><index>[<expr><name>i</name> <operator>*</operator> <name>nb_in</name> <operator>+</operator> <name>j</name></expr>]</index> <operator>=</operator> <call><name>lrintf</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rem</name> <operator>+=</operator> <name>target</name> <operator>-</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>native_matrix</name></name><operator>)</operator><index>[<expr><name>i</name> <operator>*</operator> <name>nb_in</name> <operator>+</operator> <name>j</name></expr>]</index></expr>;</expr_stmt>

<expr_stmt><expr><name>sum</name> <operator>+=</operator> <call><name>FFABS</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>int</name><operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>native_matrix</name></name><operator>)</operator><index>[<expr><name>i</name> <operator>*</operator> <name>nb_in</name> <operator>+</operator> <name>j</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>maxsum</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>maxsum</name></expr></argument>, <argument><expr><name>sum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>int</name><operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>native_one</name></name><operator>)</operator> <operator>=</operator> <literal type="number">32768</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>maxsum</name> <operator>&lt;=</operator> <literal type="number">32768</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mix_1_1_f</name></name> <operator>=</operator> <operator>(</operator><name>mix_1_1_func_type</name><operator>*</operator><operator>)</operator><name>copy_s16</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mix_2_1_f</name></name> <operator>=</operator> <operator>(</operator><name>mix_2_1_func_type</name><operator>*</operator><operator>)</operator><name>sum2_s16</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mix_any_f</name></name> <operator>=</operator> <operator>(</operator><name>mix_any_func_type</name><operator>*</operator><operator>)</operator><call><name>get_mix_any_func_s16</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mix_1_1_f</name></name> <operator>=</operator> <operator>(</operator><name>mix_1_1_func_type</name><operator>*</operator><operator>)</operator><name>copy_clip_s16</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mix_2_1_f</name></name> <operator>=</operator> <operator>(</operator><name>mix_2_1_func_type</name><operator>*</operator><operator>)</operator><name>sum2_clip_s16</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mix_any_f</name></name> <operator>=</operator> <operator>(</operator><name>mix_any_func_type</name><operator>*</operator><operator>)</operator><call><name>get_mix_any_func_clip_s16</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if><if type="elseif">else if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>midbuf</name><operator>.</operator><name>fmt</name></name> <operator>==</operator> <name>AV_SAMPLE_FMT_FLTP</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>native_matrix</name></name> <operator>=</operator> <call><name>av_calloc</name><argument_list>(<argument><expr><name>nb_in</name> <operator>*</operator> <name>nb_out</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>native_one</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>native_matrix</name></name> <operator>||</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>native_one</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_out</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>nb_in</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>float</name><operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>native_matrix</name></name><operator>)</operator><index>[<expr><name>i</name> <operator>*</operator> <name>nb_in</name> <operator>+</operator> <name>j</name></expr>]</index> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>matrix</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for></block_content></block></for>

<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>float</name><operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>native_one</name></name><operator>)</operator> <operator>=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mix_1_1_f</name></name> <operator>=</operator> <operator>(</operator><name>mix_1_1_func_type</name><operator>*</operator><operator>)</operator><name>copy_float</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mix_2_1_f</name></name> <operator>=</operator> <operator>(</operator><name>mix_2_1_func_type</name><operator>*</operator><operator>)</operator><name>sum2_float</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mix_any_f</name></name> <operator>=</operator> <operator>(</operator><name>mix_any_func_type</name><operator>*</operator><operator>)</operator><call><name>get_mix_any_func_float</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if><if type="elseif">else if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>midbuf</name><operator>.</operator><name>fmt</name></name> <operator>==</operator> <name>AV_SAMPLE_FMT_DBLP</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>native_matrix</name></name> <operator>=</operator> <call><name>av_calloc</name><argument_list>(<argument><expr><name>nb_in</name> <operator>*</operator> <name>nb_out</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>native_one</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>native_matrix</name></name> <operator>||</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>native_one</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_out</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>nb_in</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>double</name><operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>native_matrix</name></name><operator>)</operator><index>[<expr><name>i</name> <operator>*</operator> <name>nb_in</name> <operator>+</operator> <name>j</name></expr>]</index> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>matrix</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for></block_content></block></for>

<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>double</name><operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>native_one</name></name><operator>)</operator> <operator>=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mix_1_1_f</name></name> <operator>=</operator> <operator>(</operator><name>mix_1_1_func_type</name><operator>*</operator><operator>)</operator><name>copy_double</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mix_2_1_f</name></name> <operator>=</operator> <operator>(</operator><name>mix_2_1_func_type</name><operator>*</operator><operator>)</operator><name>sum2_double</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mix_any_f</name></name> <operator>=</operator> <operator>(</operator><name>mix_any_func_type</name><operator>*</operator><operator>)</operator><call><name>get_mix_any_func_double</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if><if type="elseif">else if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>midbuf</name><operator>.</operator><name>fmt</name></name> <operator>==</operator> <name>AV_SAMPLE_FMT_S32P</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>native_one</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>native_one</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>native_matrix</name></name> <operator>=</operator> <call><name>av_calloc</name><argument_list>(<argument><expr><name>nb_in</name> <operator>*</operator> <name>nb_out</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>native_matrix</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>native_one</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_out</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>rem</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>nb_in</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>target</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>matrix</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>*</operator> <literal type="number">32768</literal> <operator>+</operator> <name>rem</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>int</name><operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>native_matrix</name></name><operator>)</operator><index>[<expr><name>i</name> <operator>*</operator> <name>nb_in</name> <operator>+</operator> <name>j</name></expr>]</index> <operator>=</operator> <call><name>lrintf</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rem</name> <operator>+=</operator> <name>target</name> <operator>-</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>native_matrix</name></name><operator>)</operator><index>[<expr><name>i</name> <operator>*</operator> <name>nb_in</name> <operator>+</operator> <name>j</name></expr>]</index></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>int</name><operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>native_one</name></name><operator>)</operator> <operator>=</operator> <literal type="number">32768</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mix_1_1_f</name></name> <operator>=</operator> <operator>(</operator><name>mix_1_1_func_type</name><operator>*</operator><operator>)</operator><name>copy_s32</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mix_2_1_f</name></name> <operator>=</operator> <operator>(</operator><name>mix_2_1_func_type</name><operator>*</operator><operator>)</operator><name>sum2_s32</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mix_any_f</name></name> <operator>=</operator> <operator>(</operator><name>mix_any_func_type</name><operator>*</operator><operator>)</operator><call><name>get_mix_any_func_s32</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>SWR_CH_MAX</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ch_in</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>SWR_CH_MAX</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>matrix32</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator> <call><name>lrintf</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>matrix</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>*</operator> <literal type="number">32768</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>matrix</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>matrix_ch</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><operator>++</operator><name>ch_in</name></expr>]</index></name><operator>=</operator> <name>j</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>matrix_ch</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator> <name>ch_in</name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>(<expr><name>HAVE_X86ASM</name> <operator>&amp;&amp;</operator> <name>HAVE_MMX</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>swri_rematrix_init_x86</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>av_cold</name> <name>void</name></type> <name>swri_rematrix_free</name><parameter_list>(<parameter><decl><type><name>SwrContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list><block>{<block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>native_matrix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>native_one</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>native_simd_matrix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>native_simd_one</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>swri_rematrix</name><parameter_list>(<parameter><decl><type><name>SwrContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AudioData</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>AudioData</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mustcopy</name></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>out_i</name></decl>, <decl><type ref="prev"/><name>in_i</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>off</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mix_any_f</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>mix_any_f</name></name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>ch</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>in</name><operator>-&gt;</operator><name>ch</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>native_matrix</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mix_2_1_simd</name></name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>mix_1_1_simd</name></name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>len1</name><operator>=</operator> <name>len</name><operator>&amp;</operator><operator>~</operator><literal type="number">15</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>off</name> <operator>=</operator> <name>len1</name> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>bps</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>out_ch_layout</name></name> <operator>||</operator> <name><name>out</name><operator>-&gt;</operator><name>ch_count</name></name> <operator>==</operator> <call><name>av_get_channel_layout_nb_channels</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>out_ch_layout</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator> <name>in_ch_layout</name></name> <operator>||</operator> <name><name>in</name> <operator>-&gt;</operator><name>ch_count</name></name> <operator>==</operator> <call><name>av_get_channel_layout_nb_channels</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator> <name>in_ch_layout</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>out_i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>out_i</name><operator>&lt;</operator><name><name>out</name><operator>-&gt;</operator><name>ch_count</name></name></expr>;</condition> <incr><expr><name>out_i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<switch>switch<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>matrix_ch</name><index>[<expr><name>out_i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<if_stmt><if>if<condition>(<expr><name>mustcopy</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>ch</name><index>[<expr><name>out_i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>len</name> <operator>*</operator> <call><name>av_get_bytes_per_sample</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>int_sample_fmt</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<expr_stmt><expr><name>in_i</name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>matrix_ch</name><index>[<expr><name>out_i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>matrix</name><index>[<expr><name>out_i</name></expr>]</index><index>[<expr><name>in_i</name></expr>]</index></name><operator>!=</operator><literal type="number">1.0</literal></expr>)</condition><block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mix_1_1_simd</name></name> <operator>&amp;&amp;</operator> <name>len1</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>mix_1_1_simd</name></name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>ch</name><index>[<expr><name>out_i</name></expr>]</index></name></expr></argument> , <argument><expr><name><name>in</name><operator>-&gt;</operator><name>ch</name><index>[<expr><name>in_i</name></expr>]</index></name></expr></argument> , <argument><expr><name><name>s</name><operator>-&gt;</operator><name>native_simd_matrix</name></name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>ch_count</name></name><operator>*</operator><name>out_i</name> <operator>+</operator> <name>in_i</name></expr></argument>, <argument><expr><name>len1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>len</name> <operator>!=</operator> <name>len1</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>mix_1_1_f</name></name> <argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>ch</name><index>[<expr><name>out_i</name></expr>]</index></name><operator>+</operator><name>off</name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>ch</name><index>[<expr><name>in_i</name></expr>]</index></name><operator>+</operator><name>off</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>native_matrix</name></name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>ch_count</name></name><operator>*</operator><name>out_i</name> <operator>+</operator> <name>in_i</name></expr></argument>, <argument><expr><name>len</name><operator>-</operator><name>len1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if><if type="elseif">else if<condition>(<expr><name>mustcopy</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>ch</name><index>[<expr><name>out_i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>ch</name><index>[<expr><name>in_i</name></expr>]</index></name></expr></argument>, <argument><expr><name>len</name><operator>*</operator><name><name>out</name><operator>-&gt;</operator><name>bps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>ch</name><index>[<expr><name>out_i</name></expr>]</index></name><operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>ch</name><index>[<expr><name>in_i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>in_i1</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>matrix_ch</name><index>[<expr><name>out_i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>in_i2</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>matrix_ch</name><index>[<expr><name>out_i</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mix_2_1_simd</name></name> <operator>&amp;&amp;</operator> <name>len1</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>mix_2_1_simd</name></name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>ch</name><index>[<expr><name>out_i</name></expr>]</index></name></expr></argument> , <argument><expr><name><name>in</name><operator>-&gt;</operator><name>ch</name><index>[<expr><name>in_i1</name></expr>]</index></name></expr></argument> , <argument><expr><name><name>in</name><operator>-&gt;</operator><name>ch</name><index>[<expr><name>in_i2</name></expr>]</index></name></expr></argument> , <argument><expr><name><name>s</name><operator>-&gt;</operator><name>native_simd_matrix</name></name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>ch_count</name></name><operator>*</operator><name>out_i</name> <operator>+</operator> <name>in_i1</name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>ch_count</name></name><operator>*</operator><name>out_i</name> <operator>+</operator> <name>in_i2</name></expr></argument>, <argument><expr><name>len1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>mix_2_1_f</name></name> <argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>ch</name><index>[<expr><name>out_i</name></expr>]</index></name></expr></argument> , <argument><expr><name><name>in</name><operator>-&gt;</operator><name>ch</name><index>[<expr><name>in_i1</name></expr>]</index></name></expr></argument> , <argument><expr><name><name>in</name><operator>-&gt;</operator><name>ch</name><index>[<expr><name>in_i2</name></expr>]</index></name></expr></argument> , <argument><expr><name><name>s</name><operator>-&gt;</operator><name>native_matrix</name></name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>ch_count</name></name><operator>*</operator><name>out_i</name> <operator>+</operator> <name>in_i1</name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>ch_count</name></name><operator>*</operator><name>out_i</name> <operator>+</operator> <name>in_i2</name></expr></argument>, <argument><expr><name>len1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>len</name> <operator>!=</operator> <name>len1</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>mix_2_1_f</name></name> <argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>ch</name><index>[<expr><name>out_i</name></expr>]</index></name><operator>+</operator><name>off</name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>ch</name><index>[<expr><name>in_i1</name></expr>]</index></name><operator>+</operator><name>off</name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>ch</name><index>[<expr><name>in_i2</name></expr>]</index></name><operator>+</operator><name>off</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>native_matrix</name></name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>ch_count</name></name><operator>*</operator><name>out_i</name> <operator>+</operator> <name>in_i1</name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>ch_count</name></name><operator>*</operator><name>out_i</name> <operator>+</operator> <name>in_i2</name></expr></argument>, <argument><expr><name>len</name><operator>-</operator><name>len1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break></block_content>}</block>

<default>default:</default>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>int_sample_fmt</name></name> <operator>==</operator> <name>AV_SAMPLE_FMT_FLTP</name></expr>)</condition><block>{<block_content>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>v</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name><name>s</name><operator>-&gt;</operator><name>matrix_ch</name><index>[<expr><name>out_i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name>in_i</name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>matrix_ch</name><index>[<expr><name>out_i</name></expr>]</index><index>[<expr><literal type="number">1</literal><operator>+</operator><name>j</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name><operator>+=</operator> <operator>(</operator><operator>(</operator><name>float</name><operator>*</operator><operator>)</operator><name><name>in</name><operator>-&gt;</operator><name>ch</name><index>[<expr><name>in_i</name></expr>]</index></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>matrix_flt</name><index>[<expr><name>out_i</name></expr>]</index><index>[<expr><name>in_i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>float</name><operator>*</operator><operator>)</operator><name><name>out</name><operator>-&gt;</operator><name>ch</name><index>[<expr><name>out_i</name></expr>]</index></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index><operator>=</operator> <name>v</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if><if type="elseif">else if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>int_sample_fmt</name></name> <operator>==</operator> <name>AV_SAMPLE_FMT_DBLP</name></expr>)</condition><block>{<block_content>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>v</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name><name>s</name><operator>-&gt;</operator><name>matrix_ch</name><index>[<expr><name>out_i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name>in_i</name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>matrix_ch</name><index>[<expr><name>out_i</name></expr>]</index><index>[<expr><literal type="number">1</literal><operator>+</operator><name>j</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name><operator>+=</operator> <operator>(</operator><operator>(</operator><name>double</name><operator>*</operator><operator>)</operator><name><name>in</name><operator>-&gt;</operator><name>ch</name><index>[<expr><name>in_i</name></expr>]</index></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>matrix</name><index>[<expr><name>out_i</name></expr>]</index><index>[<expr><name>in_i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>double</name><operator>*</operator><operator>)</operator><name><name>out</name><operator>-&gt;</operator><name>ch</name><index>[<expr><name>out_i</name></expr>]</index></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index><operator>=</operator> <name>v</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if><else>else<block>{<block_content>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>v</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name><name>s</name><operator>-&gt;</operator><name>matrix_ch</name><index>[<expr><name>out_i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name>in_i</name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>matrix_ch</name><index>[<expr><name>out_i</name></expr>]</index><index>[<expr><literal type="number">1</literal><operator>+</operator><name>j</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name><operator>+=</operator> <operator>(</operator><operator>(</operator><name>int16_t</name><operator>*</operator><operator>)</operator><name><name>in</name><operator>-&gt;</operator><name>ch</name><index>[<expr><name>in_i</name></expr>]</index></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>matrix32</name><index>[<expr><name>out_i</name></expr>]</index><index>[<expr><name>in_i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>int16_t</name><operator>*</operator><operator>)</operator><name><name>out</name><operator>-&gt;</operator><name>ch</name><index>[<expr><name>out_i</name></expr>]</index></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index><operator>=</operator> <operator>(</operator><name>v</name> <operator>+</operator> <literal type="number">16384</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">15</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></switch>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
