<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libswresample\rematrix_template.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TEMPLATE_REMATRIX_FLT</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SAMPLE</name></cpp:macro> <cpp:value>float</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COEFF</name></cpp:macro> <cpp:value>float</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTER</name></cpp:macro> <cpp:value>float</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RENAME</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x ##_float</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TEMPLATE_REMATRIX_DBL</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SAMPLE</name></cpp:macro> <cpp:value>double</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COEFF</name></cpp:macro> <cpp:value>double</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTER</name></cpp:macro> <cpp:value>double</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RENAME</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x ##_double</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TEMPLATE_REMATRIX_S16</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SAMPLE</name></cpp:macro> <cpp:value>int16_t</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COEFF</name></cpp:macro> <cpp:value>int</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTER</name></cpp:macro> <cpp:value>int</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TEMPLATE_CLIP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>av_clip_int16(((x) + 16384)&gt;&gt;15)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RENAME</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x ##_clip_s16</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) + 16384)&gt;&gt;15)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RENAME</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x ##_s16</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TEMPLATE_REMATRIX_S32</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) + 16384)&gt;&gt;15)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SAMPLE</name></cpp:macro> <cpp:value>int32_t</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COEFF</name></cpp:macro> <cpp:value>int</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTER</name></cpp:macro> <cpp:value>int64_t</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RENAME</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x ##_s32</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <macro><name>void</name> <argument_list>(<argument>RENAME(mix_any_func_type)</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>SAMPLE</name> <operator>*</operator><operator>*</operator><name>out</name><operator>,</operator> <specifier>const</specifier> <name>SAMPLE</name> <operator>*</operator><operator>*</operator><name>in1</name><operator>,</operator> <name>COEFF</name> <operator>*</operator><name>coeffp</name><operator>,</operator> <name>integer</name> <name>len</name><operator>)</operator></expr>;</expr_stmt></typedef>

<function><type><specifier>static</specifier> <name>void</name> <name>RENAME</name></type>(<name>sum2</name>)<parameter_list>(<parameter><decl><type><name>SAMPLE</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SAMPLE</name> <modifier>*</modifier></type><name>in1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SAMPLE</name> <modifier>*</modifier></type><name>in2</name></decl></parameter>, <parameter><decl><type><name>COEFF</name> <modifier>*</modifier></type><name>coeffp</name></decl></parameter>, <parameter><decl><type><name>integer</name></type> <name>index1</name></decl></parameter>, <parameter><decl><type><name>integer</name></type> <name>index2</name></decl></parameter>, <parameter><decl><type><name>integer</name></type> <name>len</name></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>INTER</name></type> <name>coeff1</name> <init>= <expr><name><name>coeffp</name><index>[<expr><name>index1</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>INTER</name></type> <name>coeff2</name> <init>= <expr><name><name>coeffp</name><index>[<expr><name>index2</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>R</name><argument_list>(<argument><expr><name>coeff1</name><operator>*</operator><name><name>in1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>coeff2</name><operator>*</operator><name><name>in2</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>RENAME</name></type>(<name>copy</name>)<parameter_list>(<parameter><decl><type><name>SAMPLE</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SAMPLE</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>COEFF</name> <modifier>*</modifier></type><name>coeffp</name></decl></parameter>, <parameter><decl><type><name>integer</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>integer</name></type> <name>len</name></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>INTER</name></type> <name>coeff</name> <init>= <expr><name><name>coeffp</name><index>[<expr><name>index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>R</name><argument_list>(<argument><expr><name>coeff</name><operator>*</operator><name><name>in</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>RENAME</name></type>(<name>mix6to2</name>)<parameter_list>(<parameter><decl><type><name>SAMPLE</name> <modifier>*</modifier><modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SAMPLE</name> <modifier>*</modifier><modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>COEFF</name> <modifier>*</modifier></type><name>coeffp</name></decl></parameter>, <parameter><decl><type><name>integer</name></type> <name>len</name></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>INTER</name></type> <name>t</name> <init>= <expr><name><name>in</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>*</operator><operator>(</operator><name>INTER</name><operator>)</operator><name><name>coeffp</name><index>[<expr><literal type="number">0</literal><operator>*</operator><literal type="number">6</literal><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>in</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>*</operator><operator>(</operator><name>INTER</name><operator>)</operator><name><name>coeffp</name><index>[<expr><literal type="number">0</literal><operator>*</operator><literal type="number">6</literal><operator>+</operator><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>R</name><argument_list>(<argument><expr><name>t</name> <operator>+</operator> <name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>*</operator><operator>(</operator><name>INTER</name><operator>)</operator><name><name>coeffp</name><index>[<expr><literal type="number">0</literal><operator>*</operator><literal type="number">6</literal><operator>+</operator><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>in</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>*</operator><operator>(</operator><name>INTER</name><operator>)</operator><name><name>coeffp</name><index>[<expr><literal type="number">0</literal><operator>*</operator><literal type="number">6</literal><operator>+</operator><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>R</name><argument_list>(<argument><expr><name>t</name> <operator>+</operator> <name><name>in</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>*</operator><operator>(</operator><name>INTER</name><operator>)</operator><name><name>coeffp</name><index>[<expr><literal type="number">1</literal><operator>*</operator><literal type="number">6</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>in</name><index>[<expr><literal type="number">5</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>*</operator><operator>(</operator><name>INTER</name><operator>)</operator><name><name>coeffp</name><index>[<expr><literal type="number">1</literal><operator>*</operator><literal type="number">6</literal><operator>+</operator><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>RENAME</name></type>(<name>mix8to2</name>)<parameter_list>(<parameter><decl><type><name>SAMPLE</name> <modifier>*</modifier><modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SAMPLE</name> <modifier>*</modifier><modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>COEFF</name> <modifier>*</modifier></type><name>coeffp</name></decl></parameter>, <parameter><decl><type><name>integer</name></type> <name>len</name></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>INTER</name></type> <name>t</name> <init>= <expr><name><name>in</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>*</operator><operator>(</operator><name>INTER</name><operator>)</operator><name><name>coeffp</name><index>[<expr><literal type="number">0</literal><operator>*</operator><literal type="number">8</literal><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>in</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>*</operator><operator>(</operator><name>INTER</name><operator>)</operator><name><name>coeffp</name><index>[<expr><literal type="number">0</literal><operator>*</operator><literal type="number">8</literal><operator>+</operator><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>R</name><argument_list>(<argument><expr><name>t</name> <operator>+</operator> <name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>*</operator><operator>(</operator><name>INTER</name><operator>)</operator><name><name>coeffp</name><index>[<expr><literal type="number">0</literal><operator>*</operator><literal type="number">8</literal><operator>+</operator><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>in</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>*</operator><operator>(</operator><name>INTER</name><operator>)</operator><name><name>coeffp</name><index>[<expr><literal type="number">0</literal><operator>*</operator><literal type="number">8</literal><operator>+</operator><literal type="number">4</literal></expr>]</index></name> <operator>+</operator> <name><name>in</name><index>[<expr><literal type="number">6</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>*</operator><operator>(</operator><name>INTER</name><operator>)</operator><name><name>coeffp</name><index>[<expr><literal type="number">0</literal><operator>*</operator><literal type="number">8</literal><operator>+</operator><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>R</name><argument_list>(<argument><expr><name>t</name> <operator>+</operator> <name><name>in</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>*</operator><operator>(</operator><name>INTER</name><operator>)</operator><name><name>coeffp</name><index>[<expr><literal type="number">1</literal><operator>*</operator><literal type="number">8</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>in</name><index>[<expr><literal type="number">5</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>*</operator><operator>(</operator><name>INTER</name><operator>)</operator><name><name>coeffp</name><index>[<expr><literal type="number">1</literal><operator>*</operator><literal type="number">8</literal><operator>+</operator><literal type="number">5</literal></expr>]</index></name> <operator>+</operator> <name><name>in</name><index>[<expr><literal type="number">7</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>*</operator><operator>(</operator><name>INTER</name><operator>)</operator><name><name>coeffp</name><index>[<expr><literal type="number">1</literal><operator>*</operator><literal type="number">8</literal><operator>+</operator><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<expr_stmt><expr><specifier>static</specifier> <call><name>RENAME</name><argument_list>(<argument><expr><name>mix_any_func_type</name></expr></argument>)</argument_list></call> <operator>*</operator><macro><name>RENAME</name><argument_list>(<argument>get_mix_any_func</argument>)</argument_list></macro><operator>(</operator><name>SwrContext</name> <operator>*</operator><name>s</name><operator>)</operator><block>{

<if_stmt><if>if<condition>( <expr><name><name>s</name><operator>-&gt;</operator><name>out_ch_layout</name></name> <operator>==</operator> <name>AV_CH_LAYOUT_STEREO</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>in_ch_layout</name></name> <operator>==</operator> <name>AV_CH_LAYOUT_5POINT1</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>in_ch_layout</name></name> <operator>==</operator> <name>AV_CH_LAYOUT_5POINT1_BACK</name><operator>)</operator>

<operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>matrix</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>matrix</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>matrix</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>matrix</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name>

<operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>matrix</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>matrix</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>matrix</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>matrix</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>

)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>RENAME</name><argument_list>(<argument><expr><name>mix6to2</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>s</name><operator>-&gt;</operator><name>out_ch_layout</name></name> <operator>==</operator> <name>AV_CH_LAYOUT_STEREO</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>in_ch_layout</name></name> <operator>==</operator> <name>AV_CH_LAYOUT_7POINT1</name>

<operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>matrix</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>matrix</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>matrix</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>matrix</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name>

<operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>matrix</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>matrix</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>matrix</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>matrix</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name>

<operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>matrix</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>matrix</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>

)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>RENAME</name><argument_list>(<argument><expr><name>mix8to2</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

}

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>R</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SAMPLE</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>COEFF</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>INTER</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>RENAME</name></cpp:undef>

</unit>
