<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libswresample\resample.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"resample.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>double</name></type> <name>eval_poly</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>double</name> <modifier>*</modifier></type><name>coeff</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>sum</name> <init>= <expr><name><name>coeff</name><index>[<expr><name>size</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>size</name><operator>-</operator><literal type="number">2</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>sum</name> <operator>*=</operator> <name>x</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sum</name> <operator>+=</operator> <name><name>coeff</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>sum</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name></type> <name>bessel</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>double</name></type> <name><name>p1</name><index>[]</index></name> <init>= <expr><block>{

<expr><operator>-</operator><literal type="number">2.2335582639474375249e+15</literal></expr>,

<expr><operator>-</operator><literal type="number">5.5050369673018427753e+14</literal></expr>,

<expr><operator>-</operator><literal type="number">3.2940087627407749166e+13</literal></expr>,

<expr><operator>-</operator><literal type="number">8.4925101247114157499e+11</literal></expr>,

<expr><operator>-</operator><literal type="number">1.1912746104985237192e+10</literal></expr>,

<expr><operator>-</operator><literal type="number">1.0313066708737980747e+08</literal></expr>,

<expr><operator>-</operator><literal type="number">5.9545626019847898221e+05</literal></expr>,

<expr><operator>-</operator><literal type="number">2.4125195876041896775e+03</literal></expr>,

<expr><operator>-</operator><literal type="number">7.0935347449210549190e+00</literal></expr>,

<expr><operator>-</operator><literal type="number">1.5453977791786851041e-02</literal></expr>,

<expr><operator>-</operator><literal type="number">2.5172644670688975051e-05</literal></expr>,

<expr><operator>-</operator><literal type="number">3.0517226450451067446e-08</literal></expr>,

<expr><operator>-</operator><literal type="number">2.6843448573468483278e-11</literal></expr>,

<expr><operator>-</operator><literal type="number">1.5982226675653184646e-14</literal></expr>,

<expr><operator>-</operator><literal type="number">5.2487866627945699800e-18</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>double</name></type> <name><name>q1</name><index>[]</index></name> <init>= <expr><block>{

<expr><operator>-</operator><literal type="number">2.2335582639474375245e+15</literal></expr>,

<expr><literal type="number">7.8858692566751002988e+12</literal></expr>,

<expr><operator>-</operator><literal type="number">1.2207067397808979846e+10</literal></expr>,

<expr><literal type="number">1.0377081058062166144e+07</literal></expr>,

<expr><operator>-</operator><literal type="number">4.8527560179962773045e+03</literal></expr>,

<expr><literal type="number">1.0</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>double</name></type> <name><name>p2</name><index>[]</index></name> <init>= <expr><block>{

<expr><operator>-</operator><literal type="number">2.2210262233306573296e-04</literal></expr>,

<expr><literal type="number">1.3067392038106924055e-02</literal></expr>,

<expr><operator>-</operator><literal type="number">4.4700805721174453923e-01</literal></expr>,

<expr><literal type="number">5.5674518371240761397e+00</literal></expr>,

<expr><operator>-</operator><literal type="number">2.3517945679239481621e+01</literal></expr>,

<expr><literal type="number">3.1611322818701131207e+01</literal></expr>,

<expr><operator>-</operator><literal type="number">9.6090021968656180000e+00</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>double</name></type> <name><name>q2</name><index>[]</index></name> <init>= <expr><block>{

<expr><operator>-</operator><literal type="number">5.5194330231005480228e-04</literal></expr>,

<expr><literal type="number">3.2547697594819615062e-02</literal></expr>,

<expr><operator>-</operator><literal type="number">1.1151759188741312645e+00</literal></expr>,

<expr><literal type="number">1.3982595353892851542e+01</literal></expr>,

<expr><operator>-</operator><literal type="number">6.0228002066743340583e+01</literal></expr>,

<expr><literal type="number">8.5539563258012929600e+01</literal></expr>,

<expr><operator>-</operator><literal type="number">3.1446690275135491500e+01</literal></expr>,

<expr><literal type="number">1.0</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>y</name></decl>, <decl><type ref="prev"/><name>r</name></decl>, <decl><type ref="prev"/><name>factor</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1.0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>fabs</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&lt;=</operator> <literal type="number">15</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>y</name> <operator>=</operator> <name>x</name> <operator>*</operator> <name>x</name></expr>;</expr_stmt>

<return>return <expr><call><name>eval_poly</name><argument_list>(<argument><expr><name>p1</name></expr></argument>, <argument><expr><call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>p1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call> <operator>/</operator> <call><name>eval_poly</name><argument_list>(<argument><expr><name>q1</name></expr></argument>, <argument><expr><call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>q1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>y</name> <operator>=</operator> <literal type="number">1</literal> <operator>/</operator> <name>x</name> <operator>-</operator> <literal type="number">1.0</literal> <operator>/</operator> <literal type="number">15</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>eval_poly</name><argument_list>(<argument><expr><name>p2</name></expr></argument>, <argument><expr><call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>p2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call> <operator>/</operator> <call><name>eval_poly</name><argument_list>(<argument><expr><name>q2</name></expr></argument>, <argument><expr><call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>q2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>factor</name> <operator>=</operator> <call><name>exp</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>/</operator> <call><name>sqrt</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>factor</name> <operator>*</operator> <name>r</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>build_filter</name><parameter_list>(<parameter><decl><type><name>ResampleContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>factor</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tap_count</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>alloc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>phase_count</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>scale</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>filter_type</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>kaiser_beta</name></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ph</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ph_nb</name> <init>= <expr><ternary><condition><expr><name>phase_count</name> <operator>%</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><name>phase_count</name></expr> </then><else>: <expr><name>phase_count</name> <operator>/</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>w</name></decl>, <decl><type ref="prev"/><name>t</name></decl>, <decl><type ref="prev"/><name>s</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name>tab</name> <init>= <expr><call><name>av_malloc_array</name><argument_list>(<argument><expr><name>tap_count</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>tab</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name>sin_lut</name> <init>= <expr><call><name>av_malloc_array</name><argument_list>(<argument><expr><name>ph_nb</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>sin_lut</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>center</name><init>= <expr><operator>(</operator><name>tap_count</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>norm</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tab</name> <operator>||</operator> <operator>!</operator><name>sin_lut</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>tap_count</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name>tap_count</name> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>factor</name> <operator>&gt;</operator> <literal type="number">1.0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>factor</name> <operator>=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>factor</name> <operator>==</operator> <literal type="number">1.0</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>ph</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ph</name> <operator>&lt;</operator> <name>ph_nb</name></expr>;</condition> <incr><expr><name>ph</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sin_lut</name><index>[<expr><name>ph</name></expr>]</index></name> <operator>=</operator> <call><name>sin</name><argument_list>(<argument><expr><name>M_PI</name> <operator>*</operator> <name>ph</name> <operator>/</operator> <name>phase_count</name></expr></argument>)</argument_list></call> <operator>*</operator> <operator>(</operator><ternary><condition><expr><name>center</name> <operator>&amp;</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<for>for<control>(<init><expr><name>ph</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ph</name> <operator>&lt;</operator> <name>ph_nb</name></expr>;</condition> <incr><expr><name>ph</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>sin_lut</name><index>[<expr><name>ph</name></expr>]</index></name></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>tap_count</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name>M_PI</name> <operator>*</operator> <operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><name>i</name> <operator>-</operator> <name>center</name><operator>)</operator> <operator>-</operator> <operator>(</operator><name>double</name><operator>)</operator><name>ph</name> <operator>/</operator> <name>phase_count</name><operator>)</operator> <operator>*</operator> <name>factor</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>y</name> <operator>=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>factor</name> <operator>==</operator> <literal type="number">1.0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>y</name> <operator>=</operator> <name>s</name> <operator>/</operator> <name>x</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>sin</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>/</operator> <name>x</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<switch>switch<condition>(<expr><name>filter_type</name></expr>)</condition><block>{<block_content>

<case>case <expr><name>SWR_FILTER_TYPE_CUBIC</name></expr>:</case><block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>d</name><init>= <expr><operator>-</operator><literal type="number">0.5</literal></expr></init></decl>;</decl_stmt> 

<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>fabs</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><name>i</name> <operator>-</operator> <name>center</name><operator>)</operator> <operator>-</operator> <operator>(</operator><name>double</name><operator>)</operator><name>ph</name> <operator>/</operator> <name>phase_count</name><operator>)</operator> <operator>*</operator> <name>factor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>x</name><operator>&lt;</operator><literal type="number">1.0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>y</name><operator>=</operator> <literal type="number">1</literal> <operator>-</operator> <literal type="number">3</literal><operator>*</operator><name>x</name><operator>*</operator><name>x</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>x</name><operator>*</operator><name>x</name><operator>*</operator><name>x</name> <operator>+</operator> <name>d</name><operator>*</operator><operator>(</operator> <operator>-</operator><name>x</name><operator>*</operator><name>x</name> <operator>+</operator> <name>x</name><operator>*</operator><name>x</name><operator>*</operator><name>x</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>y</name><operator>=</operator> <name>d</name><operator>*</operator><operator>(</operator><operator>-</operator><literal type="number">4</literal> <operator>+</operator> <literal type="number">8</literal><operator>*</operator><name>x</name> <operator>-</operator> <literal type="number">5</literal><operator>*</operator><name>x</name><operator>*</operator><name>x</name> <operator>+</operator> <name>x</name><operator>*</operator><name>x</name><operator>*</operator><name>x</name><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break></block_content>}</block>

<case>case <expr><name>SWR_FILTER_TYPE_BLACKMAN_NUTTALL</name></expr>:</case>

<expr_stmt><expr><name>w</name> <operator>=</operator> <literal type="number">2.0</literal><operator>*</operator><name>x</name> <operator>/</operator> <operator>(</operator><name>factor</name><operator>*</operator><name>tap_count</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <operator>-</operator><call><name>cos</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>*=</operator> <literal type="number">0.3635819</literal> <operator>-</operator> <literal type="number">0.4891775</literal> <operator>*</operator> <name>t</name> <operator>+</operator> <literal type="number">0.1365995</literal> <operator>*</operator> <operator>(</operator><literal type="number">2</literal><operator>*</operator><name>t</name><operator>*</operator><name>t</name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>-</operator> <literal type="number">0.0106411</literal> <operator>*</operator> <operator>(</operator><literal type="number">4</literal><operator>*</operator><name>t</name><operator>*</operator><name>t</name><operator>*</operator><name>t</name> <operator>-</operator> <literal type="number">3</literal><operator>*</operator><name>t</name><operator>)</operator></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SWR_FILTER_TYPE_KAISER</name></expr>:</case>

<expr_stmt><expr><name>w</name> <operator>=</operator> <literal type="number">2.0</literal><operator>*</operator><name>x</name> <operator>/</operator> <operator>(</operator><name>factor</name><operator>*</operator><name>tap_count</name><operator>*</operator><name>M_PI</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>*=</operator> <call><name>bessel</name><argument_list>(<argument><expr><name>kaiser_beta</name><operator>*</operator><call><name>sqrt</name><argument_list>(<argument><expr><call><name>FFMAX</name><argument_list>(<argument><expr><literal type="number">1</literal><operator>-</operator><name>w</name><operator>*</operator><name>w</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>tab</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>-</operator><name>s</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ph</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>norm</name> <operator>+=</operator> <name>y</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<switch>switch<condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>format</name></name></expr>)</condition><block>{<block_content>

<case>case <expr><name>AV_SAMPLE_FMT_S16P</name></expr>:</case>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>tap_count</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>int16_t</name><operator>*</operator><operator>)</operator><name>filter</name><operator>)</operator><index>[<expr><name>ph</name> <operator>*</operator> <name>alloc</name> <operator>+</operator> <name>i</name></expr>]</index> <operator>=</operator> <call><name>av_clip_int16</name><argument_list>(<argument><expr><call><name>lrintf</name><argument_list>(<argument><expr><name><name>tab</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>scale</name> <operator>/</operator> <name>norm</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>phase_count</name> <operator>%</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>tap_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>int16_t</name><operator>*</operator><operator>)</operator><name>filter</name><operator>)</operator><index>[<expr><operator>(</operator><name>phase_count</name><operator>-</operator><name>ph</name><operator>)</operator> <operator>*</operator> <name>alloc</name> <operator>+</operator> <name>tap_count</name><operator>-</operator><literal type="number">1</literal><operator>-</operator><name>i</name></expr>]</index> <operator>=</operator> <operator>(</operator><operator>(</operator><name>int16_t</name><operator>*</operator><operator>)</operator><name>filter</name><operator>)</operator><index>[<expr><name>ph</name> <operator>*</operator> <name>alloc</name> <operator>+</operator> <name>i</name></expr>]</index></expr>;</expr_stmt></block_content></block></for>

<break>break;</break>

<case>case <expr><name>AV_SAMPLE_FMT_S32P</name></expr>:</case>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>tap_count</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><name>filter</name><operator>)</operator><index>[<expr><name>ph</name> <operator>*</operator> <name>alloc</name> <operator>+</operator> <name>i</name></expr>]</index> <operator>=</operator> <call><name>av_clipl_int32</name><argument_list>(<argument><expr><call><name>llrint</name><argument_list>(<argument><expr><name><name>tab</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>scale</name> <operator>/</operator> <name>norm</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>phase_count</name> <operator>%</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>tap_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><name>filter</name><operator>)</operator><index>[<expr><operator>(</operator><name>phase_count</name><operator>-</operator><name>ph</name><operator>)</operator> <operator>*</operator> <name>alloc</name> <operator>+</operator> <name>tap_count</name><operator>-</operator><literal type="number">1</literal><operator>-</operator><name>i</name></expr>]</index> <operator>=</operator> <operator>(</operator><operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><name>filter</name><operator>)</operator><index>[<expr><name>ph</name> <operator>*</operator> <name>alloc</name> <operator>+</operator> <name>i</name></expr>]</index></expr>;</expr_stmt></block_content></block></for>

<break>break;</break>

<case>case <expr><name>AV_SAMPLE_FMT_FLTP</name></expr>:</case>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>tap_count</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>float</name><operator>*</operator><operator>)</operator><name>filter</name><operator>)</operator><index>[<expr><name>ph</name> <operator>*</operator> <name>alloc</name> <operator>+</operator> <name>i</name></expr>]</index> <operator>=</operator> <name><name>tab</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>scale</name> <operator>/</operator> <name>norm</name></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>phase_count</name> <operator>%</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>tap_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>float</name><operator>*</operator><operator>)</operator><name>filter</name><operator>)</operator><index>[<expr><operator>(</operator><name>phase_count</name><operator>-</operator><name>ph</name><operator>)</operator> <operator>*</operator> <name>alloc</name> <operator>+</operator> <name>tap_count</name><operator>-</operator><literal type="number">1</literal><operator>-</operator><name>i</name></expr>]</index> <operator>=</operator> <operator>(</operator><operator>(</operator><name>float</name><operator>*</operator><operator>)</operator><name>filter</name><operator>)</operator><index>[<expr><name>ph</name> <operator>*</operator> <name>alloc</name> <operator>+</operator> <name>i</name></expr>]</index></expr>;</expr_stmt></block_content></block></for>

<break>break;</break>

<case>case <expr><name>AV_SAMPLE_FMT_DBLP</name></expr>:</case>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>tap_count</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>double</name><operator>*</operator><operator>)</operator><name>filter</name><operator>)</operator><index>[<expr><name>ph</name> <operator>*</operator> <name>alloc</name> <operator>+</operator> <name>i</name></expr>]</index> <operator>=</operator> <name><name>tab</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>scale</name> <operator>/</operator> <name>norm</name></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>phase_count</name> <operator>%</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>tap_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>double</name><operator>*</operator><operator>)</operator><name>filter</name><operator>)</operator><index>[<expr><operator>(</operator><name>phase_count</name><operator>-</operator><name>ph</name><operator>)</operator> <operator>*</operator> <name>alloc</name> <operator>+</operator> <name>tap_count</name><operator>-</operator><literal type="number">1</literal><operator>-</operator><name>i</name></expr>]</index> <operator>=</operator> <operator>(</operator><operator>(</operator><name>double</name><operator>*</operator><operator>)</operator><name>filter</name><operator>)</operator><index>[<expr><name>ph</name> <operator>*</operator> <name>alloc</name> <operator>+</operator> <name>i</name></expr>]</index></expr>;</expr_stmt></block_content></block></for>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

{

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LEN</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define>

int j,k;

double sine[LEN + tap_count];

double filtered[LEN];

double maxff=-2, minff=2, maxsf=-2, minsf=2;

for(i=0; i&lt;LEN; i++){

double ss=0, sf=0, ff=0;

for(j=0; j&lt;LEN+tap_count; j++)

sine[j]= cos(i*j*M_PI/LEN);

for(j=0; j&lt;LEN; j++){

double sum=0;

ph=0;

for(k=0; k&lt;tap_count; k++)

sum += filter[ph * tap_count + k] * sine[k+j];

filtered[j]= sum / (1&lt;&lt;FILTER_SHIFT);

ss+= sine[j + center] * sine[j + center];

ff+= filtered[j] * filtered[j];

sf+= sine[j + center] * filtered[j];

}

ss= sqrt(2*ss/LEN);

ff= sqrt(2*ff/LEN);

sf= 2*sf/LEN;

maxff= FFMAX(maxff, ff);

minff= FFMIN(minff, ff);

maxsf= FFMAX(maxsf, sf);

minsf= FFMIN(minsf, sf);

if(i%11==0){

av_log(NULL, AV_LOG_ERROR, "i:%4d ss:%f ff:%13.6e-%13.6e sf:%13.6e-%13.6e\n", i, ss, maxff, minff, maxsf, minsf);

minff=minsf= 2;

maxff=maxsf= -2;

}

}

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>tab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>sin_lut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>resample_free</name><parameter_list>(<parameter><decl><type><name>ResampleContext</name> <modifier>*</modifier><modifier>*</modifier></type><name>cc</name></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><name>ResampleContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><operator>*</operator><name>cc</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>c</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>filter_bank</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><name>cc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ResampleContext</name> <modifier>*</modifier></type><name>resample_init</name><parameter_list>(<parameter><decl><type><name>ResampleContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>out_rate</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>in_rate</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>filter_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>phase_shift</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>linear</name></decl></parameter>,

<parameter><decl><type><name>double</name></type> <name>cutoff0</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVSampleFormat</name></name></type> <name>format</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>SwrFilterType</name></name></type> <name>filter_type</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>kaiser_beta</name></decl></parameter>,

<parameter><decl><type><name>double</name></type> <name>precision</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cheby</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>exact_rational</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>cutoff</name> <init>= <expr><ternary><condition><expr><name>cutoff0</name></expr>?</condition><then> <expr><name>cutoff0</name></expr> </then><else>: <expr><literal type="number">0.97</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>factor</name><init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>out_rate</name> <operator>*</operator> <name>cutoff</name> <operator>/</operator> <name>in_rate</name></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>phase_count</name><init>= <expr><literal type="number">1</literal><operator>&lt;&lt;</operator><name>phase_shift</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>phase_count_compensation</name> <init>= <expr><name>phase_count</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>filter_length</name> <init>= <expr><call><name>FFMAX</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>ceil</name><argument_list>(<argument><expr><name>filter_size</name><operator>/</operator><name>factor</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>filter_length</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>filter_length</name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name>filter_length</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>exact_rational</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>phase_count_exact</name></decl>, <decl><type ref="prev"/><name>phase_count_exact_den</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_reduce</name><argument_list>(<argument><expr><operator>&amp;</operator><name>phase_count_exact</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>phase_count_exact_den</name></expr></argument>, <argument><expr><name>out_rate</name></expr></argument>, <argument><expr><name>in_rate</name></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>phase_count_exact</name> <operator>&lt;=</operator> <name>phase_count</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>phase_count_compensation</name> <operator>=</operator> <name>phase_count_exact</name> <operator>*</operator> <operator>(</operator><name>phase_count</name> <operator>/</operator> <name>phase_count_exact</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>phase_count</name> <operator>=</operator> <name>phase_count_exact</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>c</name> <operator>||</operator> <name><name>c</name><operator>-&gt;</operator><name>phase_count</name></name> <operator>!=</operator> <name>phase_count</name> <operator>||</operator> <name><name>c</name><operator>-&gt;</operator><name>linear</name></name><operator>!=</operator><name>linear</name> <operator>||</operator> <name><name>c</name><operator>-&gt;</operator><name>factor</name></name> <operator>!=</operator> <name>factor</name>

<operator>||</operator> <name><name>c</name><operator>-&gt;</operator><name>filter_length</name></name> <operator>!=</operator> <name>filter_length</name> <operator>||</operator> <name><name>c</name><operator>-&gt;</operator><name>format</name></name> <operator>!=</operator> <name>format</name>

<operator>||</operator> <name><name>c</name><operator>-&gt;</operator><name>filter_type</name></name> <operator>!=</operator> <name>filter_type</name> <operator>||</operator> <name><name>c</name><operator>-&gt;</operator><name>kaiser_beta</name></name> <operator>!=</operator> <name>kaiser_beta</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>resample_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>c</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>c</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>format</name></name><operator>=</operator> <name>format</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>felem_size</name></name><operator>=</operator> <call><name>av_get_bytes_per_sample</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>format</name></name></expr>)</condition><block>{<block_content>

<case>case <expr><name>AV_SAMPLE_FMT_S16P</name></expr>:</case>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>filter_shift</name></name> <operator>=</operator> <literal type="number">15</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_SAMPLE_FMT_S32P</name></expr>:</case>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>filter_shift</name></name> <operator>=</operator> <literal type="number">30</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_SAMPLE_FMT_FLTP</name></expr>:</case>

<case>case <expr><name>AV_SAMPLE_FMT_DBLP</name></expr>:</case>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>filter_shift</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unsupported sample format\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>filter_size</name><operator>/</operator><name>factor</name> <operator>&gt;</operator> <name>INT32_MAX</name><operator>/</operator><literal type="number">256</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Filter length too large\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>phase_count</name></name> <operator>=</operator> <name>phase_count</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>linear</name></name> <operator>=</operator> <name>linear</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>factor</name></name> <operator>=</operator> <name>factor</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>filter_length</name></name> <operator>=</operator> <name>filter_length</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>filter_alloc</name></name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>filter_length</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>filter_bank</name></name> <operator>=</operator> <call><name>av_calloc</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>filter_alloc</name></name></expr></argument>, <argument><expr><operator>(</operator><name>phase_count</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name><name>c</name><operator>-&gt;</operator><name>felem_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>filter_type</name></name> <operator>=</operator> <name>filter_type</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>kaiser_beta</name></name> <operator>=</operator> <name>kaiser_beta</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>phase_count_compensation</name></name> <operator>=</operator> <name>phase_count_compensation</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>filter_bank</name></name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>build_filter</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name><name>c</name><operator>-&gt;</operator><name>filter_bank</name></name></expr></argument>, <argument><expr><name>factor</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>filter_length</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>filter_alloc</name></name></expr></argument>, <argument><expr><name>phase_count</name></expr></argument>, <argument><expr><literal type="number">1</literal><operator>&lt;&lt;</operator><name><name>c</name><operator>-&gt;</operator><name>filter_shift</name></name></expr></argument>, <argument><expr><name>filter_type</name></expr></argument>, <argument><expr><name>kaiser_beta</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>filter_bank</name></name> <operator>+</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>filter_alloc</name></name><operator>*</operator><name>phase_count</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name><name>c</name><operator>-&gt;</operator><name>felem_size</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>filter_bank</name></name></expr></argument>, <argument><expr><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>filter_alloc</name></name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name><name>c</name><operator>-&gt;</operator><name>felem_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>filter_bank</name></name> <operator>+</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>filter_alloc</name></name><operator>*</operator><name>phase_count</name> <operator>)</operator><operator>*</operator><name><name>c</name><operator>-&gt;</operator><name>felem_size</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>filter_bank</name></name> <operator>+</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>filter_alloc</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>*</operator><name><name>c</name><operator>-&gt;</operator><name>felem_size</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>felem_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>compensation_distance</name></name><operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>av_reduce</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>src_incr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>dst_incr</name></name></expr></argument>, <argument><expr><name>out_rate</name></expr></argument>, <argument><expr><name>in_rate</name> <operator>*</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name>phase_count</name></expr></argument>, <argument><expr><name>INT32_MAX</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>dst_incr</name></name> <operator>&lt;</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">20</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>src_incr</name></name> <operator>&lt;</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">20</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>dst_incr</name></name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>src_incr</name></name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>ideal_dst_incr</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>dst_incr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>dst_incr_div</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>dst_incr</name></name> <operator>/</operator> <name><name>c</name><operator>-&gt;</operator><name>src_incr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>dst_incr_mod</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>dst_incr</name></name> <operator>%</operator> <name><name>c</name><operator>-&gt;</operator><name>src_incr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>index</name></name><operator>=</operator> <operator>-</operator><name>phase_count</name><operator>*</operator><operator>(</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>filter_length</name></name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>/</operator><literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>frac</name></name><operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>swri_resample_dsp_init</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>c</name></expr>;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>filter_bank</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rebuild_filter_bank_with_compensation</name><parameter_list>(<parameter><decl><type><name>ResampleContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>new_filter_bank</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>new_src_incr</name></decl>, <decl><type ref="prev"/><name>new_dst_incr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>phase_count</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>phase_count_compensation</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>phase_count</name> <operator>==</operator> <name><name>c</name><operator>-&gt;</operator><name>phase_count</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>frac</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>dst_incr_mod</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>new_filter_bank</name> <operator>=</operator> <call><name>av_calloc</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>filter_alloc</name></name></expr></argument>, <argument><expr><operator>(</operator><name>phase_count</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>felem_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>new_filter_bank</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>build_filter</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>new_filter_bank</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>factor</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>filter_length</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>filter_alloc</name></name></expr></argument>,

<argument><expr><name>phase_count</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>filter_shift</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>filter_type</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>kaiser_beta</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>new_filter_bank</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>new_filter_bank</name> <operator>+</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>filter_alloc</name></name><operator>*</operator><name>phase_count</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name><name>c</name><operator>-&gt;</operator><name>felem_size</name></name></expr></argument>, <argument><expr><name>new_filter_bank</name></expr></argument>, <argument><expr><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>filter_alloc</name></name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name><name>c</name><operator>-&gt;</operator><name>felem_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>new_filter_bank</name> <operator>+</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>filter_alloc</name></name><operator>*</operator><name>phase_count</name> <operator>)</operator><operator>*</operator><name><name>c</name><operator>-&gt;</operator><name>felem_size</name></name></expr></argument>, <argument><expr><name>new_filter_bank</name> <operator>+</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>filter_alloc</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>*</operator><name><name>c</name><operator>-&gt;</operator><name>felem_size</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>felem_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>av_reduce</name><argument_list>(<argument><expr><operator>&amp;</operator><name>new_src_incr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>new_dst_incr</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>src_incr</name></name></expr></argument>,

<argument><expr><name><name>c</name><operator>-&gt;</operator><name>dst_incr</name></name> <operator>*</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><name>phase_count</name><operator>/</operator><name><name>c</name><operator>-&gt;</operator><name>phase_count</name></name><operator>)</operator></expr></argument>, <argument><expr><name>INT32_MAX</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>new_filter_bank</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>src_incr</name></name> <operator>=</operator> <name>new_src_incr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>dst_incr</name></name> <operator>=</operator> <name>new_dst_incr</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>dst_incr</name></name> <operator>&lt;</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">20</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>src_incr</name></name> <operator>&lt;</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">20</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>dst_incr</name></name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>src_incr</name></name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>ideal_dst_incr</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>dst_incr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>dst_incr_div</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>dst_incr</name></name> <operator>/</operator> <name><name>c</name><operator>-&gt;</operator><name>src_incr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>dst_incr_mod</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>dst_incr</name></name> <operator>%</operator> <name><name>c</name><operator>-&gt;</operator><name>src_incr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>index</name></name> <operator>*=</operator> <name>phase_count</name> <operator>/</operator> <name><name>c</name><operator>-&gt;</operator><name>phase_count</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>phase_count</name></name> <operator>=</operator> <name>phase_count</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>filter_bank</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>filter_bank</name></name> <operator>=</operator> <name>new_filter_bank</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>set_compensation</name><parameter_list>(<parameter><decl><type><name>ResampleContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sample_delta</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>compensation_distance</name></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>compensation_distance</name> <operator>&amp;&amp;</operator> <name>sample_delta</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>rebuild_filter_bank_with_compensation</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>compensation_distance</name></name><operator>=</operator> <name>compensation_distance</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>compensation_distance</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>dst_incr</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>ideal_dst_incr</name></name> <operator>-</operator> <name><name>c</name><operator>-&gt;</operator><name>ideal_dst_incr</name></name> <operator>*</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name>sample_delta</name> <operator>/</operator> <name>compensation_distance</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>dst_incr</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>ideal_dst_incr</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>dst_incr_div</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>dst_incr</name></name> <operator>/</operator> <name><name>c</name><operator>-&gt;</operator><name>src_incr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>dst_incr_mod</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>dst_incr</name></name> <operator>%</operator> <name><name>c</name><operator>-&gt;</operator><name>src_incr</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>multiple_resample</name><parameter_list>(<parameter><decl><type><name>ResampleContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>AudioData</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_size</name></decl></parameter>, <parameter><decl><type><name>AudioData</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_size</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>consumed</name></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <name>av_unused</name></type> <name>mm_flags</name> <init>= <expr><call><name>av_get_cpu_flags</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>need_emms</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>AV_SAMPLE_FMT_S16P</name> <operator>&amp;&amp;</operator> <name>ARCH_X86_32</name> <operator>&amp;&amp;</operator>

<operator>(</operator><name>mm_flags</name> <operator>&amp;</operator> <operator>(</operator><name>AV_CPU_FLAG_MMX2</name> <operator>|</operator> <name>AV_CPU_FLAG_SSE2</name><operator>)</operator><operator>)</operator> <operator>==</operator> <name>AV_CPU_FLAG_MMX2</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>max_src_size</name> <init>= <expr><operator>(</operator><name>INT64_MAX</name><operator>/</operator><literal type="number">2</literal> <operator>/</operator> <name><name>c</name><operator>-&gt;</operator><name>phase_count</name></name><operator>)</operator> <operator>/</operator> <name><name>c</name><operator>-&gt;</operator><name>src_incr</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>compensation_distance</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>dst_size</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>dst_size</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>compensation_distance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>src_size</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>src_size</name></expr></argument>, <argument><expr><name>max_src_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>consumed</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>filter_length</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>phase_count</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>index2</name><init>= <expr><operator>(</operator><literal type="number">1LL</literal><operator>&lt;&lt;</operator><literal type="number">32</literal><operator>)</operator><operator>*</operator><name><name>c</name><operator>-&gt;</operator><name>frac</name></name><operator>/</operator><name><name>c</name><operator>-&gt;</operator><name>src_incr</name></name> <operator>+</operator> <operator>(</operator><literal type="number">1LL</literal><operator>&lt;&lt;</operator><literal type="number">32</literal><operator>)</operator><operator>*</operator><name><name>c</name><operator>-&gt;</operator><name>index</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>incr</name><init>= <expr><operator>(</operator><literal type="number">1LL</literal><operator>&lt;&lt;</operator><literal type="number">32</literal><operator>)</operator> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>dst_incr</name></name> <operator>/</operator> <name><name>c</name><operator>-&gt;</operator><name>src_incr</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>new_size</name> <init>= <expr><operator>(</operator><name>src_size</name> <operator>*</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>c</name><operator>-&gt;</operator><name>src_incr</name></name> <operator>-</operator> <name><name>c</name><operator>-&gt;</operator><name>frac</name></name> <operator>+</operator> <name><name>c</name><operator>-&gt;</operator><name>dst_incr</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name><name>c</name><operator>-&gt;</operator><name>dst_incr</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>dst_size</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>dst_size</name></expr></argument>, <argument><expr><name>new_size</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dst_size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>dst</name><operator>-&gt;</operator><name>ch_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name><name>c</name><operator>-&gt;</operator><name>dsp</name><operator>.</operator><name>resample_one</name></name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>ch</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>ch</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>dst_size</name></expr></argument>, <argument><expr><name>index2</name></expr></argument>, <argument><expr><name>incr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name><operator>+</operator><literal type="number">1</literal> <operator>==</operator> <name><name>dst</name><operator>-&gt;</operator><name>ch_count</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>index</name></name> <operator>+=</operator> <name>dst_size</name> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>dst_incr_div</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>index</name></name> <operator>+=</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>frac</name></name> <operator>+</operator> <name>dst_size</name> <operator>*</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>c</name><operator>-&gt;</operator><name>dst_incr_mod</name></name><operator>)</operator> <operator>/</operator> <name><name>c</name><operator>-&gt;</operator><name>src_incr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>index</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>consumed</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>index</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>frac</name></name> <operator>=</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>frac</name></name> <operator>+</operator> <name>dst_size</name> <operator>*</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>c</name><operator>-&gt;</operator><name>dst_incr_mod</name></name><operator>)</operator> <operator>%</operator> <name><name>c</name><operator>-&gt;</operator><name>src_incr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>end_index</name> <init>= <expr><operator>(</operator><literal type="number">1LL</literal> <operator>+</operator> <name>src_size</name> <operator>-</operator> <name><name>c</name><operator>-&gt;</operator><name>filter_length</name></name><operator>)</operator> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>phase_count</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>delta_frac</name> <init>= <expr><operator>(</operator><name>end_index</name> <operator>-</operator> <name><name>c</name><operator>-&gt;</operator><name>index</name></name><operator>)</operator> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>src_incr</name></name> <operator>-</operator> <name><name>c</name><operator>-&gt;</operator><name>frac</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>delta_n</name> <init>= <expr><operator>(</operator><name>delta_frac</name> <operator>+</operator> <name><name>c</name><operator>-&gt;</operator><name>dst_incr</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name><name>c</name><operator>-&gt;</operator><name>dst_incr</name></name></expr></init></decl>;</decl_stmt>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>resample_func</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ResampleContext</name></name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>update_ctx</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>dst_size</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>dst_size</name></expr></argument>, <argument><expr><name>delta_n</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dst_size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>resample_func</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>linear</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>frac</name></name> <operator>||</operator> <name><name>c</name><operator>-&gt;</operator><name>dst_incr_mod</name></name><operator>)</operator><operator>)</operator></expr> ?</condition><then>

<expr><name><name>c</name><operator>-&gt;</operator><name>dsp</name><operator>.</operator><name>resample_linear</name></name></expr> </then><else>: <expr><name><name>c</name><operator>-&gt;</operator><name>dsp</name><operator>.</operator><name>resample_common</name></name></expr></else></ternary></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>dst</name><operator>-&gt;</operator><name>ch_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>consumed</name> <operator>=</operator> <call><name>resample_func</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>ch</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>ch</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>dst_size</name></expr></argument>, <argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal> <operator>==</operator> <name><name>dst</name><operator>-&gt;</operator><name>ch_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>need_emms</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>emms_c</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>compensation_distance</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>compensation_distance</name></name> <operator>-=</operator> <name>dst_size</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>compensation_distance</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>dst_incr</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>ideal_dst_incr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>dst_incr_div</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>dst_incr</name></name> <operator>/</operator> <name><name>c</name><operator>-&gt;</operator><name>src_incr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>dst_incr_mod</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>dst_incr</name></name> <operator>%</operator> <name><name>c</name><operator>-&gt;</operator><name>src_incr</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>dst_size</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64_t</name></type> <name>get_delay</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SwrContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>base</name></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><name>ResampleContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>resample</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>num</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>in_buffer_count</name></name> <operator>-</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>filter_length</name></name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>num</name> <operator>*=</operator> <name><name>c</name><operator>-&gt;</operator><name>phase_count</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>num</name> <operator>-=</operator> <name><name>c</name><operator>-&gt;</operator><name>index</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>num</name> <operator>*=</operator> <name><name>c</name><operator>-&gt;</operator><name>src_incr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>num</name> <operator>-=</operator> <name><name>c</name><operator>-&gt;</operator><name>frac</name></name></expr>;</expr_stmt>

<return>return <expr><call><name>av_rescale</name><argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>in_sample_rate</name></name><operator>*</operator><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>c</name><operator>-&gt;</operator><name>src_incr</name></name> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>phase_count</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64_t</name></type> <name>get_out_samples</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SwrContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>in_samples</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ResampleContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>resample</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>num</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>in_buffer_count</name></name> <operator>+</operator> <literal type="number">2LL</literal> <operator>+</operator> <name>in_samples</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>num</name> <operator>*=</operator> <name><name>c</name><operator>-&gt;</operator><name>phase_count</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>num</name> <operator>-=</operator> <name><name>c</name><operator>-&gt;</operator><name>index</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>num</name> <operator>=</operator> <call><name>av_rescale_rnd</name><argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>out_sample_rate</name></name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>in_sample_rate</name></name><operator>)</operator> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>phase_count</name></name></expr></argument>, <argument><expr><name>AV_ROUND_UP</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>compensation_distance</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>num</name> <operator>&gt;</operator> <name>INT_MAX</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>num</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><operator>(</operator><name>num</name> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>ideal_dst_incr</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name><name>c</name><operator>-&gt;</operator><name>dst_incr</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>num</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>resample_flush</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SwrContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>ResampleContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>resample</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AudioData</name> <modifier>*</modifier></type><name>a</name><init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>in_buffer</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>reflection</name> <init>= <expr><operator>(</operator><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>in_buffer_count</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>filter_length</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>swri_realloc_audio</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>in_buffer_index</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>in_buffer_count</name></name> <operator>+</operator> <name>reflection</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>planar</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>a</name><operator>-&gt;</operator><name>ch_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name>reflection</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>ch</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>in_buffer_index</name></name><operator>+</operator><name><name>s</name><operator>-&gt;</operator><name>in_buffer_count</name></name><operator>+</operator><name>j</name> <operator>)</operator><operator>*</operator><name><name>a</name><operator>-&gt;</operator><name>bps</name></name></expr></argument>,

<argument><expr><name><name>a</name><operator>-&gt;</operator><name>ch</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>in_buffer_index</name></name><operator>+</operator><name><name>s</name><operator>-&gt;</operator><name>in_buffer_count</name></name><operator>-</operator><name>j</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name><name>a</name><operator>-&gt;</operator><name>bps</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>bps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>in_buffer_count</name></name> <operator>+=</operator> <name>reflection</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>invert_initial_buffer</name><parameter_list>(<parameter><decl><type><name>ResampleContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>AudioData</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AudioData</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>in_count</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>out_idx</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>out_sz</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>ch</name></decl>, <decl><type ref="prev"/><name>num</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>in_count</name> <operator>+</operator> <operator>*</operator><name>out_sz</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>filter_length</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>res</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>index</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name>swri_realloc_audio</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>filter_length</name></name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <operator>*</operator><name>out_sz</name></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>src</name><operator>-&gt;</operator><name>ch_count</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>ch</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>filter_length</name></name> <operator>+</operator> <name>n</name><operator>)</operator> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>felem_size</name></name><operator>)</operator></expr></argument>,

<argument><expr><name><name>src</name><operator>-&gt;</operator><name>ch</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>n</name> <operator>-</operator> <operator>*</operator><name>out_sz</name><operator>)</operator> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>felem_size</name></name><operator>)</operator></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>felem_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>num</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>filter_length</name></name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>out_sz</name> <operator>=</operator> <name>num</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>out_idx</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>filter_length</name></name></expr>;</expr_stmt>

<return>return <expr><name>INT_MAX</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;=</operator> <name><name>c</name><operator>-&gt;</operator><name>filter_length</name></name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>src</name><operator>-&gt;</operator><name>ch_count</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>ch</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>filter_length</name></name> <operator>-</operator> <name>n</name><operator>)</operator> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>felem_size</name></name><operator>)</operator></expr></argument>,

<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>ch</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>filter_length</name></name> <operator>+</operator> <name>n</name><operator>)</operator> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>felem_size</name></name><operator>)</operator></expr></argument>,

<argument><expr><name><name>c</name><operator>-&gt;</operator><name>felem_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><name>res</name> <operator>=</operator> <name>num</name> <operator>-</operator> <operator>*</operator><name>out_sz</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>out_idx</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>filter_length</name></name></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>index</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>--</operator><operator>*</operator><name>out_idx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>index</name></name> <operator>+=</operator> <name><name>c</name><operator>-&gt;</operator><name>phase_count</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><operator>*</operator><name>out_sz</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><operator>*</operator><name>out_sz</name> <operator>+</operator> <name><name>c</name><operator>-&gt;</operator><name>filter_length</name></name></expr></argument>,

<argument><expr><literal type="number">1</literal> <operator>+</operator> <name><name>c</name><operator>-&gt;</operator><name>filter_length</name></name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>-</operator> <operator>*</operator><name>out_idx</name></expr>;</expr_stmt>

<return>return <expr><call><name>FFMAX</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name><name>struct</name> <name>Resampler</name></name> <specifier>const</specifier></type> <name>swri_resampler</name><init>=<expr><block>{

<expr><name>resample_init</name></expr>,

<expr><name>resample_free</name></expr>,

<expr><name>multiple_resample</name></expr>,

<expr><name>resample_flush</name></expr>,

<expr><name>set_compensation</name></expr>,

<expr><name>get_delay</name></expr>,

<expr><name>invert_initial_buffer</name></expr>,

<expr><name>get_out_samples</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
