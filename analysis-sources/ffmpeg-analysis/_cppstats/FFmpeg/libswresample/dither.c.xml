<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libswresample\dither.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"swresample_internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"noise_shaping_data.c"</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>swri_get_dither</name><parameter_list>(<parameter><decl><type><name>SwrContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>seed</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVSampleFormat</name></name></type> <name>noise_fmt</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>scale</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>dither</name><operator>.</operator><name>noise_scale</name></name></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TMP_EXTRA</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><call><name>av_malloc_array</name><argument_list>(<argument><expr><name>len</name> <operator>+</operator> <name>TMP_EXTRA</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tmp</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>len</name> <operator>+</operator> <name>TMP_EXTRA</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>v</name></decl>;</decl_stmt>

<expr_stmt><expr><name>seed</name> <operator>=</operator> <name>seed</name><operator>*</operator> <literal type="number">1664525</literal> <operator>+</operator> <literal type="number">1013904223</literal></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>dither</name><operator>.</operator><name>method</name></name></expr>)</condition><block>{<block_content>

<case>case <expr><name>SWR_DITHER_RECTANGULAR</name></expr>:</case> <expr_stmt><expr><name>v</name><operator>=</operator> <operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><name>seed</name><operator>)</operator> <operator>/</operator> <name>UINT_MAX</name> <operator>-</operator> <literal type="number">0.5</literal></expr>;</expr_stmt> <break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>dither</name><operator>.</operator><name>method</name></name> <operator>&lt;</operator> <name>SWR_DITHER_NB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><name>seed</name><operator>)</operator> <operator>/</operator> <name>UINT_MAX</name></expr>;</expr_stmt>

<expr_stmt><expr><name>seed</name> <operator>=</operator> <name>seed</name><operator>*</operator><literal type="number">1664525</literal> <operator>+</operator> <literal type="number">1013904223</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name><operator>-=</operator> <operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><name>seed</name><operator>)</operator> <operator>/</operator> <name>UINT_MAX</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>tmp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>v</name></decl>;</decl_stmt>

<switch>switch<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>dither</name><operator>.</operator><name>method</name></name></expr>)</condition><block>{<block_content>

<default>default:</default>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>dither</name><operator>.</operator><name>method</name></name> <operator>&lt;</operator> <name>SWR_DITHER_NB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>tmp</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SWR_DITHER_TRIANGULAR_HIGHPASS</name></expr> :</case>

<expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><operator>-</operator> <name><name>tmp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name><name>tmp</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>tmp</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>)</operator> <operator>/</operator> <call><name>sqrt</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name>v</name><operator>*=</operator> <name>scale</name></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name>noise_fmt</name></expr>)</condition><block>{<block_content>

<case>case <expr><name>AV_SAMPLE_FMT_S16P</name></expr>:</case> <expr_stmt><expr><operator>(</operator><operator>(</operator><name>int16_t</name><operator>*</operator><operator>)</operator><name>dst</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index> <operator>=</operator> <name>v</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>AV_SAMPLE_FMT_S32P</name></expr>:</case> <expr_stmt><expr><operator>(</operator><operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><name>dst</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index> <operator>=</operator> <name>v</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>AV_SAMPLE_FMT_FLTP</name></expr>:</case> <expr_stmt><expr><operator>(</operator><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name>dst</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index> <operator>=</operator> <name>v</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>AV_SAMPLE_FMT_DBLP</name></expr>:</case> <expr_stmt><expr><operator>(</operator><operator>(</operator><name>double</name> <operator>*</operator><operator>)</operator><name>dst</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index> <operator>=</operator> <name>v</name></expr>;</expr_stmt> <break>break;</break>

<default>default:</default> <expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>av_cold</name> <name>int</name></type> <name>swri_dither_init</name><parameter_list>(<parameter><decl><type><name>SwrContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVSampleFormat</name></name></type> <name>out_fmt</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVSampleFormat</name></name></type> <name>in_fmt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>scale</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>dither</name><operator>.</operator><name>method</name></name> <operator>&gt;</operator> <name>SWR_DITHER_TRIANGULAR_HIGHPASS</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>dither</name><operator>.</operator><name>method</name></name> <operator>&lt;=</operator> <name>SWR_DITHER_NS</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>out_fmt</name> <operator>=</operator> <call><name>av_get_packed_sample_fmt</name><argument_list>(<argument><expr><name>out_fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>in_fmt</name> <operator>=</operator> <call><name>av_get_packed_sample_fmt</name><argument_list>( <argument><expr><name>in_fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>in_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_FLT</name> <operator>||</operator> <name>in_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_DBL</name></expr>)</condition><block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>out_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_S32</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>scale</name> <operator>=</operator> <literal type="number">1.0</literal><operator>/</operator><operator>(</operator><literal type="number">1LL</literal><operator>&lt;&lt;</operator><literal type="number">31</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>out_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_S16</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>scale</name> <operator>=</operator> <literal type="number">1.0</literal><operator>/</operator><operator>(</operator><literal type="number">1LL</literal><operator>&lt;&lt;</operator><literal type="number">15</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>out_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_U8</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>scale</name> <operator>=</operator> <literal type="number">1.0</literal><operator>/</operator><operator>(</operator><literal type="number">1LL</literal><operator>&lt;&lt;</operator> <literal type="number">7</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>in_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_S32</name> <operator>&amp;&amp;</operator> <name>out_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_S32</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>dither</name><operator>.</operator><name>output_sample_bits</name></name><operator>&amp;</operator><literal type="number">31</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>scale</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>in_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_S32</name> <operator>&amp;&amp;</operator> <name>out_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_S16</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>scale</name> <operator>=</operator> <literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">16</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>in_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_S32</name> <operator>&amp;&amp;</operator> <name>out_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_U8</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>scale</name> <operator>=</operator> <literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">24</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>in_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_S16</name> <operator>&amp;&amp;</operator> <name>out_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_U8</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>scale</name> <operator>=</operator> <literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">8</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>scale</name> <operator>*=</operator> <name><name>s</name><operator>-&gt;</operator><name>dither</name><operator>.</operator><name>scale</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>out_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_S32</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>dither</name><operator>.</operator><name>output_sample_bits</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>scale</name> <operator>*=</operator> <literal type="number">1</literal><operator>&lt;&lt;</operator><operator>(</operator><literal type="number">32</literal><operator>-</operator><name><name>s</name><operator>-&gt;</operator><name>dither</name><operator>.</operator><name>output_sample_bits</name></name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>scale</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dither</name><operator>.</operator><name>method</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dither</name><operator>.</operator><name>ns_pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dither</name><operator>.</operator><name>noise_scale</name></name><operator>=</operator> <name>scale</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dither</name><operator>.</operator><name>ns_scale</name></name> <operator>=</operator> <name>scale</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dither</name><operator>.</operator><name>ns_scale_1</name></name> <operator>=</operator> <ternary><condition><expr><name>scale</name></expr> ?</condition><then> <expr><literal type="number">1</literal><operator>/</operator><name>scale</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>dither</name><operator>.</operator><name>ns_errors</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>dither</name><operator>.</operator><name>ns_errors</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name><name>filters</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>coefs</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>filter_t</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><operator>&amp;</operator><name><name>filters</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>llabs</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>out_sample_rate</name></name> <operator>-</operator> <name><name>f</name><operator>-&gt;</operator><name>rate</name></name></expr></argument>)</argument_list></call><operator>*</operator><literal type="number">20</literal> <operator>&lt;=</operator> <name><name>f</name><operator>-&gt;</operator><name>rate</name></name> <operator>&amp;&amp;</operator> <name><name>f</name><operator>-&gt;</operator><name>name</name></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>dither</name><operator>.</operator><name>method</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dither</name><operator>.</operator><name>ns_taps</name></name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name><name>f</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dither</name><operator>.</operator><name>ns_coeffs</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>coefs</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dither</name><operator>.</operator><name>ns_scale_1</name></name> <operator>*=</operator> <literal type="number">1</literal> <operator>-</operator> <call><name>exp</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>gain_cB</name></name> <operator>*</operator> <name>M_LN10</name> <operator>*</operator> <literal type="number">0.005</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">2</literal> <operator>/</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><operator>(</operator><literal type="number">8</literal><operator>*</operator><call><name>av_get_bytes_per_sample</name><argument_list>(<argument><expr><name>out_fmt</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>filters</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>coefs</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>dither</name><operator>.</operator><name>method</name></name> <operator>&gt;</operator> <name>SWR_DITHER_NS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Requested noise shaping dither not available at this sampling rate, using triangular hp dither\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dither</name><operator>.</operator><name>method</name></name> <operator>=</operator> <name>SWR_DITHER_TRIANGULAR_HIGHPASS</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEMPLATE_DITHER_S16</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dither_template.c"</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TEMPLATE_DITHER_S16</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEMPLATE_DITHER_S32</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dither_template.c"</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TEMPLATE_DITHER_S32</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEMPLATE_DITHER_FLT</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dither_template.c"</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TEMPLATE_DITHER_FLT</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEMPLATE_DITHER_DBL</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dither_template.c"</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TEMPLATE_DITHER_DBL</name></cpp:undef>

</unit>
