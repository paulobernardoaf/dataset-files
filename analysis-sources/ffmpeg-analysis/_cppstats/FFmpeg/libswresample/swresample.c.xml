<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libswresample\swresample.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"swresample_internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"audioconvert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/channel_layout.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;float.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALIGN</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/ffversion.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>swr_ffversion</name><index>[]</index></name> <init>= <expr><literal type="string">"FFmpeg version "</literal> <name>FFMPEG_VERSION</name></expr></init></decl>;</decl_stmt>

<function><type><name>unsigned</name></type> <name>swresample_version</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>LIBSWRESAMPLE_VERSION_MICRO</name> <operator>&gt;=</operator> <literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>LIBSWRESAMPLE_VERSION_INT</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>swresample_configuration</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>FFMPEG_CONFIGURATION</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>swresample_license</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LICENSE_PREFIX</name></cpp:macro> <cpp:value>"libswresample license: "</cpp:value></cpp:define>

<return>return <expr><operator>&amp;</operator><name>LICENSE_PREFIX</name> <name><name>FFMPEG_LICENSE</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>LICENSE_PREFIX</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>swr_set_channel_mapping</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SwrContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>channel_map</name></decl></parameter>)</parameter_list><block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>s</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>in_convert</name></name></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>channel_map</name></name> <operator>=</operator> <name>channel_map</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name><name>struct</name> <name>SwrContext</name></name> <modifier>*</modifier></type><name>swr_alloc_set_opts</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SwrContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>,

<parameter><decl><type><name>int64_t</name></type> <name>out_ch_layout</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVSampleFormat</name></name></type> <name>out_sample_fmt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>out_sample_rate</name></decl></parameter>,

<parameter><decl><type><name>int64_t</name></type> <name>in_ch_layout</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVSampleFormat</name></name></type> <name>in_sample_fmt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>in_sample_rate</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>log_offset</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>log_ctx</name></decl></parameter>)</parameter_list><block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>s</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>s</name><operator>=</operator> <call><name>swr_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>s</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>log_level_offset</name></name><operator>=</operator> <name>log_offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>log_ctx</name></name><operator>=</operator> <name>log_ctx</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_opt_set_int</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"ocl"</literal></expr></argument>, <argument><expr><name>out_ch_layout</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_opt_set_int</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"osf"</literal></expr></argument>, <argument><expr><name>out_sample_fmt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_opt_set_int</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"osr"</literal></expr></argument>, <argument><expr><name>out_sample_rate</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_opt_set_int</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"icl"</literal></expr></argument>, <argument><expr><name>in_ch_layout</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_opt_set_int</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"isf"</literal></expr></argument>, <argument><expr><name>in_sample_fmt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_opt_set_int</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"isr"</literal></expr></argument>, <argument><expr><name>in_sample_rate</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_opt_set_int</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"ich"</literal></expr></argument>, <argument><expr><call><name>av_get_channel_layout_nb_channels</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator> <name>user_in_ch_layout</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_opt_set_int</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"och"</literal></expr></argument>, <argument><expr><call><name>av_get_channel_layout_nb_channels</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>user_out_ch_layout</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_opt_set_int</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"uch"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>s</name></expr>;</return>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to set option\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>swr_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>set_audiodata_fmt</name><parameter_list>(<parameter><decl><type><name>AudioData</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVSampleFormat</name></name></type> <name>fmt</name></decl></parameter>)</parameter_list><block>{<block_content>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>fmt</name></name> <operator>=</operator> <name>fmt</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>bps</name></name> <operator>=</operator> <call><name>av_get_bytes_per_sample</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>planar</name></name><operator>=</operator> <call><name>av_sample_fmt_is_planar</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>ch_count</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>planar</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>free_temp</name><parameter_list>(<parameter><decl><type><name>AudioData</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list><block>{<block_content>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>a</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>clear_context</name><parameter_list>(<parameter><decl><type><name>SwrContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list><block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>in_buffer_index</name></name><operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>in_buffer_count</name></name><operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>resample_in_constraint</name></name><operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>ch</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>ch</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>ch</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>ch</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free_temp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>postin</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free_temp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>midbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free_temp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>preout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free_temp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>in_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free_temp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>silence</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free_temp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>drop_temp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free_temp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>dither</name><operator>.</operator><name>noise</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free_temp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>dither</name><operator>.</operator><name>temp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>swri_audio_convert_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator> <name>in_convert</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>swri_audio_convert_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>out_convert</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>swri_audio_convert_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>full_convert</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>swri_rematrix_free</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>delayed_samples_fixup</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>flushed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>av_cold</name> <name>void</name></type> <name>swr_free</name><parameter_list>(<parameter><decl><type><name>SwrContext</name> <modifier>*</modifier><modifier>*</modifier></type><name>ss</name></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><name>SwrContext</name> <modifier>*</modifier></type><name>s</name><init>= <expr><operator>*</operator><name>ss</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>s</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>clear_context</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>resampler</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>resampler</name><operator>-&gt;</operator><name>free</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>resample</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><name>ss</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>av_cold</name> <name>void</name></type> <name>swr_close</name><parameter_list>(<parameter><decl><type><name>SwrContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list><block>{<block_content>

<expr_stmt><expr><call><name>clear_context</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>av_cold</name> <name>int</name></type> <name>swr_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SwrContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>l1</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>l2</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>clear_context</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator> <name>in_sample_fmt</name></name> <operator>&gt;=</operator> <name>AV_SAMPLE_FMT_NB</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Requested input sample format %d is invalid\n"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>in_sample_fmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>out_sample_fmt</name></name> <operator>&gt;=</operator> <name>AV_SAMPLE_FMT_NB</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Requested output sample format %d is invalid\n"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>out_sample_fmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator> <name>in_sample_rate</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Requested input sample rate %d is invalid\n"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>in_sample_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>out_sample_rate</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Requested output sample rate %d is invalid\n"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>out_sample_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>ch_count</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator> <name>user_out_ch_count</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator> <name>in</name><operator>.</operator><name>ch_count</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator> <name>user_in_ch_count</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>used_ch_count</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>user_used_ch_count</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator> <name>in_ch_layout</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator> <name>user_in_ch_layout</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>out_ch_layout</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>user_out_ch_layout</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>int_sample_fmt</name></name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>user_int_sample_fmt</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dither</name><operator>.</operator><name>method</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>user_dither_method</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>av_get_channel_layout_nb_channels</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator> <name>in_ch_layout</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>SWR_CH_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Input channel layout 0x%"</literal><name>PRIx64</name><literal type="string">" is invalid or unsupported.\n"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator> <name>in_ch_layout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>in_ch_layout</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>av_get_channel_layout_nb_channels</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>out_ch_layout</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>SWR_CH_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Output channel layout 0x%"</literal><name>PRIx64</name><literal type="string">" is invalid or unsupported.\n"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>out_ch_layout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>out_ch_layout</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<switch>switch<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>engine</name></name></expr>)</condition><block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_LIBSOXR</name></expr></cpp:if>

<case>case <expr><name>SWR_ENGINE_SOXR</name></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>resampler</name></name> <operator>=</operator> <operator>&amp;</operator><name>swri_soxr_resampler</name></expr>;</expr_stmt> <break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><name>SWR_ENGINE_SWR</name></expr> :</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>resampler</name></name> <operator>=</operator> <operator>&amp;</operator><name>swri_resampler</name></expr>;</expr_stmt> <break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Requested resampling engine is unavailable\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></switch>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>used_ch_count</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>used_ch_count</name></name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>ch_count</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>used_ch_count</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator> <name>in_ch_layout</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>used_ch_count</name></name> <operator>!=</operator> <call><name>av_get_channel_layout_nb_channels</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator> <name>in_ch_layout</name></name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Input channel layout has a different number of channels than the number of used channels, ignoring layout\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator> <name>in_ch_layout</name></name><operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator> <name>in_ch_layout</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator> <name>in_ch_layout</name></name><operator>=</operator> <call><name>av_get_default_channel_layout</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>used_ch_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>out_ch_layout</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>out_ch_layout</name></name><operator>=</operator> <call><name>av_get_default_channel_layout</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>ch_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rematrix</name></name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>out_ch_layout</name></name> <operator>!=</operator><name><name>s</name><operator>-&gt;</operator><name>in_ch_layout</name></name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>rematrix_volume</name></name><operator>!=</operator><literal type="number">1.0</literal> <operator>||</operator>

<name><name>s</name><operator>-&gt;</operator><name>rematrix_custom</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>int_sample_fmt</name></name> <operator>==</operator> <name>AV_SAMPLE_FMT_NONE</name></expr>)</condition><block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>av_get_bytes_per_sample</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator> <name>in_sample_fmt</name></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">2</literal>

<operator>&amp;&amp;</operator> <call><name>av_get_bytes_per_sample</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>out_sample_fmt</name></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">2</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>int_sample_fmt</name></name><operator>=</operator> <name>AV_SAMPLE_FMT_S16P</name></expr>;</expr_stmt>

</block_content>}</block></if><if type="elseif">else if<condition>( <expr><call><name>av_get_bytes_per_sample</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator> <name>in_sample_fmt</name></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">2</literal>

<operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>rematrix</name></name>

<operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>out_sample_rate</name></name><operator>==</operator><name><name>s</name><operator>-&gt;</operator><name>in_sample_rate</name></name>

<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SWR_FLAG_RESAMPLE</name><operator>)</operator></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>int_sample_fmt</name></name><operator>=</operator> <name>AV_SAMPLE_FMT_S16P</name></expr>;</expr_stmt>

</block_content>}</block></if><if type="elseif">else if<condition>( <expr><call><name>av_get_planar_sample_fmt</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator> <name>in_sample_fmt</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>AV_SAMPLE_FMT_S32P</name>

<operator>&amp;&amp;</operator> <call><name>av_get_planar_sample_fmt</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>out_sample_fmt</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>AV_SAMPLE_FMT_S32P</name>

<operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>rematrix</name></name>

<operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>out_sample_rate</name></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>in_sample_rate</name></name>

<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SWR_FLAG_RESAMPLE</name><operator>)</operator>

<operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>engine</name></name> <operator>!=</operator> <name>SWR_ENGINE_SOXR</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>int_sample_fmt</name></name><operator>=</operator> <name>AV_SAMPLE_FMT_S32P</name></expr>;</expr_stmt>

</block_content>}</block></if><if type="elseif">else if<condition>(<expr><call><name>av_get_bytes_per_sample</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>in_sample_fmt</name></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">4</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>int_sample_fmt</name></name><operator>=</operator> <name>AV_SAMPLE_FMT_FLTP</name></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>int_sample_fmt</name></name><operator>=</operator> <name>AV_SAMPLE_FMT_DBLP</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Using %s internally between filters\n"</literal></expr></argument>, <argument><expr><call><name>av_get_sample_fmt_name</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>int_sample_fmt</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>s</name><operator>-&gt;</operator><name>int_sample_fmt</name></name> <operator>!=</operator> <name>AV_SAMPLE_FMT_S16P</name>

<operator>&amp;&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>int_sample_fmt</name></name> <operator>!=</operator> <name>AV_SAMPLE_FMT_S32P</name>

<operator>&amp;&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>int_sample_fmt</name></name> <operator>!=</operator> <name>AV_SAMPLE_FMT_S64P</name>

<operator>&amp;&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>int_sample_fmt</name></name> <operator>!=</operator> <name>AV_SAMPLE_FMT_FLTP</name>

<operator>&amp;&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>int_sample_fmt</name></name> <operator>!=</operator> <name>AV_SAMPLE_FMT_DBLP</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Requested sample format %s is not supported internally, s16p/s32p/s64p/fltp/dblp are supported\n"</literal></expr></argument>, <argument><expr><call><name>av_get_sample_fmt_name</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>int_sample_fmt</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>set_audiodata_fmt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator> <name>in</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator> <name>in_sample_fmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_audiodata_fmt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>out_sample_fmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>firstpts_in_samples</name></name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>async</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>min_compensation</name></name> <operator>&gt;=</operator> <name>FLT_MAX</name><operator>/</operator><literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>async</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>firstpts</name></name> <operator>=</operator>

<name><name>s</name><operator>-&gt;</operator><name>outpts</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>firstpts_in_samples</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>out_sample_rate</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>firstpts</name></name> <operator>=</operator> <name>AV_NOPTS_VALUE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>async</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>min_compensation</name></name> <operator>&gt;=</operator> <name>FLT_MAX</name><operator>/</operator><literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>min_compensation</name></name> <operator>=</operator> <literal type="number">0.001</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>async</name></name> <operator>&gt;</operator> <literal type="number">1.0001</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>max_soft_compensation</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>async</name></name> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator> <name><name>s</name><operator>-&gt;</operator><name>in_sample_rate</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>out_sample_rate</name></name><operator>!=</operator><name><name>s</name><operator>-&gt;</operator><name>in_sample_rate</name></name> <operator>||</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SWR_FLAG_RESAMPLE</name><operator>)</operator></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>resample</name></name> <operator>=</operator> <call><name><name>s</name><operator>-&gt;</operator><name>resampler</name><operator>-&gt;</operator><name>init</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>resample</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>out_sample_rate</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>in_sample_rate</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>filter_size</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>phase_shift</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>linear_interp</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>cutoff</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>int_sample_fmt</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>filter_type</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>kaiser_beta</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>precision</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>cheby</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>exact_rational</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>resample</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to initialize resampler\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if><else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>resampler</name><operator>-&gt;</operator><name>free</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>resample</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>s</name><operator>-&gt;</operator><name>int_sample_fmt</name></name> <operator>!=</operator> <name>AV_SAMPLE_FMT_S16P</name>

<operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>int_sample_fmt</name></name> <operator>!=</operator> <name>AV_SAMPLE_FMT_S32P</name>

<operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>int_sample_fmt</name></name> <operator>!=</operator> <name>AV_SAMPLE_FMT_FLTP</name>

<operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>int_sample_fmt</name></name> <operator>!=</operator> <name>AV_SAMPLE_FMT_DBLP</name>

<operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>resample</name></name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Resampling only supported with internal s16p/s32p/fltp/dblp\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RSC</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator> <name>in</name><operator>.</operator><name>ch_count</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator> <name>in</name><operator>.</operator><name>ch_count</name></name><operator>=</operator> <call><name>av_get_channel_layout_nb_channels</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator> <name>in_ch_layout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>used_ch_count</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>used_ch_count</name></name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>ch_count</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>ch_count</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>ch_count</name></name><operator>=</operator> <call><name>av_get_channel_layout_nb_channels</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>out_ch_layout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator> <name>in</name><operator>.</operator><name>ch_count</name></name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>in_ch_layout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Input channel count and layout are unset\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_get_channel_layout_string</name><argument_list>(<argument><expr><name>l1</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>l1</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator> <name>in</name><operator>.</operator><name>ch_count</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator> <name>in_ch_layout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_get_channel_layout_string</name><argument_list>(<argument><expr><name>l2</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>l2</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>ch_count</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>out_ch_layout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>out_ch_layout</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>ch_count</name></name> <operator>!=</operator> <call><name>av_get_channel_layout_nb_channels</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>out_ch_layout</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Output channel layout %s mismatches specified channel count %d\n"</literal></expr></argument>, <argument><expr><name>l2</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>ch_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>in_ch_layout</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>used_ch_count</name></name> <operator>!=</operator> <call><name>av_get_channel_layout_nb_channels</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>in_ch_layout</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Input channel layout %s mismatches specified channel count %d\n"</literal></expr></argument>, <argument><expr><name>l1</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>used_ch_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>out_ch_layout</name></name> <operator>||</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>in_ch_layout</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>used_ch_count</name></name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>ch_count</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>rematrix_custom</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Rematrix is needed between %s and %s "</literal>

<literal type="string">"but there is not enough information to do it\n"</literal></expr></argument>, <argument><expr><name>l1</name></expr></argument>, <argument><expr><name>l2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>used_ch_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>ch_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>resample_first</name></name><operator>=</operator> <name>RSC</name><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>ch_count</name></name><operator>/</operator><name><name>s</name><operator>-&gt;</operator><name>used_ch_count</name></name> <operator>-</operator> <name>RSC</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>out_sample_rate</name></name><operator>/</operator><operator>(</operator><name>float</name><operator>)</operator><name><name>s</name><operator>-&gt;</operator> <name>in_sample_rate</name></name> <operator>-</operator> <literal type="number">1.0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>in_buffer</name></name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>in</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>silence</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>in</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>drop_temp</name></name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>out</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>swri_dither_init</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>out_sample_fmt</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>int_sample_fmt</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>resample</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>rematrix</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>channel_map</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>dither</name><operator>.</operator><name>method</name></name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>full_convert</name></name> <operator>=</operator> <call><name>swri_audio_convert_alloc</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>out_sample_fmt</name></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator> <name>in_sample_fmt</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator> <name>in</name><operator>.</operator><name>ch_count</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>in_convert</name></name> <operator>=</operator> <call><name>swri_audio_convert_alloc</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>int_sample_fmt</name></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator> <name>in_sample_fmt</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>used_ch_count</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>channel_map</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>out_convert</name></name><operator>=</operator> <call><name>swri_audio_convert_alloc</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>out_sample_fmt</name></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>int_sample_fmt</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>ch_count</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>in_convert</name></name> <operator>||</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>out_convert</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>postin</name></name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>in</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>preout</name></name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>out</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>midbuf</name></name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>in</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>channel_map</name></name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>postin</name><operator>.</operator><name>ch_count</name></name><operator>=</operator>

<name><name>s</name><operator>-&gt;</operator><name>midbuf</name><operator>.</operator><name>ch_count</name></name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>used_ch_count</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>resample</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>in_buffer</name><operator>.</operator><name>ch_count</name></name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>used_ch_count</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>resample_first</name></name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>midbuf</name><operator>.</operator><name>ch_count</name></name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>ch_count</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>resample</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>in_buffer</name><operator>.</operator><name>ch_count</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>ch_count</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>set_audiodata_fmt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>postin</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>int_sample_fmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_audiodata_fmt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>midbuf</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>int_sample_fmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_audiodata_fmt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>preout</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>int_sample_fmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>resample</name></name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>set_audiodata_fmt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>in_buffer</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>int_sample_fmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>preout</name><operator>.</operator><name>count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dither</name><operator>.</operator><name>noise</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>preout</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dither</name><operator>.</operator><name>temp</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>preout</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>dither</name><operator>.</operator><name>method</name></name> <operator>&gt;</operator> <name>SWR_DITHER_NS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dither</name><operator>.</operator><name>noise</name><operator>.</operator><name>bps</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dither</name><operator>.</operator><name>noise</name><operator>.</operator><name>fmt</name></name> <operator>=</operator> <name>AV_SAMPLE_FMT_FLTP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dither</name><operator>.</operator><name>noise_scale</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>rematrix</name></name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>dither</name><operator>.</operator><name>method</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>swri_rematrix_init</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>swr_close</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>swri_realloc_audio</name><parameter_list>(<parameter><decl><type><name>AudioData</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>countb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AudioData</name></type> <name>old</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>count</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>count</name></expr></argument> &gt;</argument_list></name> <name>INT_MAX</name><operator>/</operator><literal type="number">2</literal><operator>/</operator><name><name>a</name><operator>-&gt;</operator><name>bps</name></name><operator>/</operator><name><name>a</name><operator>-&gt;</operator><name>ch_count</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>count</name></name> <operator>&gt;=</operator> <name>count</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>count</name><operator>*=</operator><literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>countb</name><operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name>count</name><operator>*</operator><name><name>a</name><operator>-&gt;</operator><name>bps</name></name></expr></argument>, <argument><expr><name>ALIGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>old</name><operator>=</operator> <operator>*</operator><name>a</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>bps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>ch_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>data</name></name><operator>=</operator> <call><name>av_mallocz_array</name><argument_list>(<argument><expr><name>countb</name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>ch_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>a</name><operator>-&gt;</operator><name>data</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>a</name><operator>-&gt;</operator><name>ch_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>ch</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>i</name><operator>*</operator><operator>(</operator><ternary><condition><expr><name><name>a</name><operator>-&gt;</operator><name>planar</name></name></expr> ?</condition><then> <expr><name>countb</name></expr> </then><else>: <expr><name><name>a</name><operator>-&gt;</operator><name>bps</name></name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>count</name></name> <operator>&amp;&amp;</operator> <name><name>a</name><operator>-&gt;</operator><name>planar</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>ch</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>old</name><operator>.</operator><name>ch</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>count</name></name><operator>*</operator><name><name>a</name><operator>-&gt;</operator><name>bps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>count</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>a</name><operator>-&gt;</operator><name>planar</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>ch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>old</name><operator>.</operator><name>ch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>count</name></name><operator>*</operator><name><name>a</name><operator>-&gt;</operator><name>ch_count</name></name><operator>*</operator><name><name>a</name><operator>-&gt;</operator><name>bps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>old</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>count</name></name><operator>=</operator> <name>count</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>copy</name><parameter_list>(<parameter><decl><type><name>AudioData</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>AudioData</name> <modifier>*</modifier></type><name>in</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list><block>{<block_content>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>planar</name></name> <operator>==</operator> <name><name>in</name><operator>-&gt;</operator><name>planar</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>bps</name></name> <operator>==</operator> <name><name>in</name><operator>-&gt;</operator><name>bps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>ch_count</name></name> <operator>==</operator> <name><name>in</name><operator>-&gt;</operator><name>ch_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>out</name><operator>-&gt;</operator><name>planar</name></name></expr>)</condition><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>ch</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name><operator>&lt;</operator><name><name>out</name><operator>-&gt;</operator><name>ch_count</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>ch</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>ch</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>, <argument><expr><name>count</name><operator>*</operator><name><name>out</name><operator>-&gt;</operator><name>bps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if><else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>ch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>ch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>count</name><operator>*</operator><name><name>out</name><operator>-&gt;</operator><name>ch_count</name></name><operator>*</operator><name><name>out</name><operator>-&gt;</operator><name>bps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fill_audiodata</name><parameter_list>(<parameter><decl><type><name>AudioData</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>in_arg</name> <index>[<expr><name>SWR_CH_MAX</name></expr>]</index></name></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>in_arg</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>ch</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>ch</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if><if type="elseif">else if<condition>(<expr><name><name>out</name><operator>-&gt;</operator><name>planar</name></name></expr>)</condition><block>{<block_content>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>out</name><operator>-&gt;</operator><name>ch_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>ch</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator> <name><name>in_arg</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if><else>else<block>{<block_content>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>out</name><operator>-&gt;</operator><name>ch_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>ch</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator> <name><name>in_arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>i</name><operator>*</operator><name><name>out</name><operator>-&gt;</operator><name>bps</name></name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>reversefill_audiodata</name><parameter_list>(<parameter><decl><type><name>AudioData</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>in_arg</name> <index>[<expr><name>SWR_CH_MAX</name></expr>]</index></name></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>out</name><operator>-&gt;</operator><name>planar</name></name></expr>)</condition><block>{<block_content>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>out</name><operator>-&gt;</operator><name>ch_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>in_arg</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator> <name><name>out</name><operator>-&gt;</operator><name>ch</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><name><name>in_arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator> <name><name>out</name><operator>-&gt;</operator><name>ch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>buf_set</name><parameter_list>(<parameter><decl><type><name>AudioData</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>AudioData</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>in</name><operator>-&gt;</operator><name>planar</name></name></expr>)</condition><block>{<block_content>

<for>for<control>(<init><expr><name>ch</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name><operator>&lt;</operator><name><name>out</name><operator>-&gt;</operator><name>ch_count</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>ch</name><index>[<expr><name>ch</name></expr>]</index></name><operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>ch</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>+</operator> <name>count</name><operator>*</operator><name><name>out</name><operator>-&gt;</operator><name>bps</name></name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if><else>else<block>{<block_content>

<for>for<control>(<init><expr><name>ch</name><operator>=</operator><name><name>out</name><operator>-&gt;</operator><name>ch_count</name></name><operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>ch</name><operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>ch</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>ch</name><index>[<expr><name>ch</name></expr>]</index></name><operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>ch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>ch</name> <operator>+</operator> <name>count</name><operator>*</operator><name><name>out</name><operator>-&gt;</operator><name>ch_count</name></name><operator>)</operator> <operator>*</operator> <name><name>out</name><operator>-&gt;</operator><name>bps</name></name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>resample</name><parameter_list>(<parameter><decl><type><name>SwrContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AudioData</name> <modifier>*</modifier></type><name>out_param</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>out_count</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>AudioData</name> <modifier>*</modifier></type> <name>in_param</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>in_count</name></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><name>AudioData</name></type> <name>in</name></decl>, <decl><type ref="prev"/><name>out</name></decl>, <decl><type ref="prev"/><name>tmp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret_sum</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>border</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>padless</name> <init>= <expr><ternary><condition><expr><name>ARCH_X86</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>engine</name></name> <operator>==</operator> <name>SWR_ENGINE_SWR</name></expr> ?</condition><then> <expr><literal type="number">7</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert1</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>in_buffer</name><operator>.</operator><name>ch_count</name></name> <operator>==</operator> <name><name>in_param</name><operator>-&gt;</operator><name>ch_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert1</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>in_buffer</name><operator>.</operator><name>planar</name></name> <operator>==</operator> <name><name>in_param</name><operator>-&gt;</operator><name>planar</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert1</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>in_buffer</name><operator>.</operator><name>fmt</name></name> <operator>==</operator> <name><name>in_param</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name><operator>=</operator><name>out</name><operator>=</operator><operator>*</operator><name>out_param</name></expr>;</expr_stmt>

<expr_stmt><expr><name>in</name> <operator>=</operator> <operator>*</operator><name>in_param</name></expr>;</expr_stmt>

<expr_stmt><expr><name>border</name> <operator>=</operator> <call><name><name>s</name><operator>-&gt;</operator><name>resampler</name><operator>-&gt;</operator><name>invert_initial_buffer</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>resample</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>in_buffer</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>in</name></expr></argument>, <argument><expr><name>in_count</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>in_buffer_index</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>in_buffer_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>border</name> <operator>==</operator> <name>INT_MAX</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>border</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>border</name></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>border</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>buf_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>in</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>in</name></expr></argument>, <argument><expr><name>border</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>in_count</name> <operator>-=</operator> <name>border</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>resample_in_constraint</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<do>do<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>size</name></decl>, <decl><type ref="prev"/><name>consumed</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>resample_in_constraint</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>in_buffer_count</name></name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>buf_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>in_buffer</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>in_buffer_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name><operator>=</operator> <call><name><name>s</name><operator>-&gt;</operator><name>resampler</name><operator>-&gt;</operator><name>multiple_resample</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>resample</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>out</name></expr></argument>, <argument><expr><name>out_count</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>in_buffer_count</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>consumed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>out_count</name> <operator>-=</operator> <name>ret</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret_sum</name> <operator>+=</operator> <name>ret</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>buf_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>out</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>out</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>in_buffer_count</name></name> <operator>-=</operator> <name>consumed</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>in_buffer_index</name></name> <operator>+=</operator> <name>consumed</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>in_count</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>in_buffer_count</name></name> <operator>&lt;=</operator> <name>border</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>buf_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>in</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>in</name></expr></argument>, <argument><expr><operator>-</operator><name><name>s</name><operator>-&gt;</operator><name>in_buffer_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>in_count</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>in_buffer_count</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>in_buffer_count</name></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>in_buffer_index</name></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>border</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>flushed</name></name> <operator>||</operator> <name>in_count</name> <operator>&gt;</operator> <name>padless</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>in_buffer_count</name></name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>in_buffer_index</name></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name><operator>=</operator> <call><name><name>s</name><operator>-&gt;</operator><name>resampler</name><operator>-&gt;</operator><name>multiple_resample</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>resample</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>out</name></expr></argument>, <argument><expr><name>out_count</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>in</name></expr></argument>, <argument><expr><call><name>FFMAX</name><argument_list>(<argument><expr><name>in_count</name><operator>-</operator><name>padless</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>consumed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>out_count</name> <operator>-=</operator> <name>ret</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret_sum</name> <operator>+=</operator> <name>ret</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>buf_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>out</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>out</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>in_count</name> <operator>-=</operator> <name>consumed</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>buf_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>in</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>in</name></expr></argument>, <argument><expr><name>consumed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>size</name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>in_buffer_index</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>in_buffer_count</name></name> <operator>+</operator> <name>in_count</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>size</name> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>in_buffer</name><operator>.</operator><name>count</name></name>

<operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>in_buffer_count</name></name> <operator>+</operator> <name>in_count</name> <operator>&lt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>in_buffer_index</name></name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>buf_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>in_buffer</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>in_buffer_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>in_buffer</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>in_buffer_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>in_buffer_index</name></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if><if type="elseif">else

if<condition>(<expr><operator>(</operator><name>ret</name><operator>=</operator><call><name>swri_realloc_audio</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>in_buffer</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>in_count</name></expr>)</condition><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>count</name><init>= <expr><name>in_count</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>in_buffer_count</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>in_buffer_count</name></name><operator>+</operator><literal type="number">2</literal> <operator>&lt;</operator> <name>count</name> <operator>&amp;&amp;</operator> <name>out_count</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>count</name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>in_buffer_count</name></name><operator>+</operator><literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>buf_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>in_buffer</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>in_buffer_index</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>in_buffer_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>in</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>in_buffer_count</name></name> <operator>+=</operator> <name>count</name></expr>;</expr_stmt>

<expr_stmt><expr><name>in_count</name> <operator>-=</operator> <name>count</name></expr>;</expr_stmt>

<expr_stmt><expr><name>border</name> <operator>+=</operator> <name>count</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>buf_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>in</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>in</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>resample_in_constraint</name></name><operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>in_buffer_count</name></name> <operator>!=</operator> <name>count</name> <operator>||</operator> <name>in_count</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>padless</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>padless</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block>while<condition>(<expr><literal type="number">1</literal></expr>)</condition>;</do>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>resample_in_constraint</name></name><operator>=</operator> <operator>!</operator><operator>!</operator><name>out_count</name></expr>;</expr_stmt>

<return>return <expr><name>ret_sum</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>swr_convert_internal</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SwrContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AudioData</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>out_count</name></decl></parameter>,

<parameter><decl><type><name>AudioData</name> <modifier>*</modifier></type><name>in</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>in_count</name></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><name>AudioData</name> <modifier>*</modifier></type><name>postin</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>midbuf</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>preout</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AudioData</name></type> <name>preout_tmp</name></decl>, <decl><type ref="prev"/><name>midbuf_tmp</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>full_convert</name></name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>resample</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>swri_audio_convert</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>full_convert</name></name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>in_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>out_count</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>ret</name><operator>=</operator><call><name>swri_realloc_audio</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>postin</name></name></expr></argument>, <argument><expr><name>in_count</name></expr></argument>)</argument_list></call><operator>)</operator><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>resample_first</name></name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>midbuf</name><operator>.</operator><name>ch_count</name></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>used_ch_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>ret</name><operator>=</operator><call><name>swri_realloc_audio</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>midbuf</name></name></expr></argument>, <argument><expr><name>out_count</name></expr></argument>)</argument_list></call><operator>)</operator><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>midbuf</name><operator>.</operator><name>ch_count</name></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>ch_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>ret</name><operator>=</operator><call><name>swri_realloc_audio</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>midbuf</name></name></expr></argument>, <argument><expr><name>in_count</name></expr></argument>)</argument_list></call><operator>)</operator><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>ret</name><operator>=</operator><call><name>swri_realloc_audio</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>preout</name></name></expr></argument>, <argument><expr><name>out_count</name></expr></argument>)</argument_list></call><operator>)</operator><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>postin</name><operator>=</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>postin</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>midbuf_tmp</name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>midbuf</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>midbuf</name><operator>=</operator> <operator>&amp;</operator><name>midbuf_tmp</name></expr>;</expr_stmt>

<expr_stmt><expr><name>preout_tmp</name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>preout</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>preout</name><operator>=</operator> <operator>&amp;</operator><name>preout_tmp</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>int_sample_fmt</name></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator> <name>in_sample_fmt</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>planar</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>channel_map</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>postin</name><operator>=</operator> <name>in</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>resample_first</name></name></expr> ?</condition><then> <expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>resample</name></name></expr> </then><else>: <expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>rematrix</name></name></expr></else></ternary></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>midbuf</name><operator>=</operator> <name>postin</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>resample_first</name></name></expr> ?</condition><then> <expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>rematrix</name></name></expr> </then><else>: <expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>resample</name></name></expr></else></ternary></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>preout</name><operator>=</operator> <name>midbuf</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>int_sample_fmt</name></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>out_sample_fmt</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>planar</name></name>

<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>out_sample_fmt</name></name><operator>==</operator><name>AV_SAMPLE_FMT_S32P</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>dither</name><operator>.</operator><name>output_sample_bits</name></name><operator>&amp;</operator><literal type="number">31</literal><operator>)</operator><operator>)</operator></expr>)</condition><block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>preout</name><operator>==</operator><name>in</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>out_count</name><operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>out_count</name></expr></argument>, <argument><expr><name>in_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>planar</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>copy</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>out_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>out_count</name></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name>preout</name><operator>==</operator><name>postin</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>preout</name><operator>=</operator> <name>midbuf</name><operator>=</operator> <name>postin</name><operator>=</operator> <name>out</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name>preout</name><operator>==</operator><name>midbuf</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>preout</name><operator>=</operator> <name>midbuf</name><operator>=</operator> <name>out</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>preout</name><operator>=</operator> <name>out</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>in</name> <operator>!=</operator> <name>postin</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>swri_audio_convert</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>in_convert</name></name></expr></argument>, <argument><expr><name>postin</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>in_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>resample_first</name></name></expr>)</condition><block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>postin</name> <operator>!=</operator> <name>midbuf</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>out_count</name><operator>=</operator> <call><name>resample</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>midbuf</name></expr></argument>, <argument><expr><name>out_count</name></expr></argument>, <argument><expr><name>postin</name></expr></argument>, <argument><expr><name>in_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>midbuf</name> <operator>!=</operator> <name>preout</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>swri_rematrix</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>preout</name></expr></argument>, <argument><expr><name>midbuf</name></expr></argument>, <argument><expr><name>out_count</name></expr></argument>, <argument><expr><name>preout</name><operator>==</operator><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>postin</name> <operator>!=</operator> <name>midbuf</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>swri_rematrix</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>midbuf</name></expr></argument>, <argument><expr><name>postin</name></expr></argument>, <argument><expr><name>in_count</name></expr></argument>, <argument><expr><name>midbuf</name><operator>==</operator><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>midbuf</name> <operator>!=</operator> <name>preout</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>out_count</name><operator>=</operator> <call><name>resample</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>preout</name></expr></argument>, <argument><expr><name>out_count</name></expr></argument>, <argument><expr><name>midbuf</name></expr></argument>, <argument><expr><name>in_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>preout</name> <operator>!=</operator> <name>out</name> <operator>&amp;&amp;</operator> <name>out_count</name></expr>)</condition><block>{<block_content>

<decl_stmt><decl><type><name>AudioData</name> <modifier>*</modifier></type><name>conv_src</name> <init>= <expr><name>preout</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>dither</name><operator>.</operator><name>method</name></name></expr>)</condition><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dither_count</name><init>= <expr><call><name>FFMAX</name><argument_list>(<argument><expr><name>out_count</name></expr></argument>, <argument><expr><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">16</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>preout</name> <operator>==</operator> <name>in</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>conv_src</name> <operator>=</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>dither</name><operator>.</operator><name>temp</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>ret</name><operator>=</operator><call><name>swri_realloc_audio</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>dither</name><operator>.</operator><name>temp</name></name></expr></argument>, <argument><expr><name>dither_count</name></expr></argument>)</argument_list></call><operator>)</operator><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>ret</name><operator>=</operator><call><name>swri_realloc_audio</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>dither</name><operator>.</operator><name>noise</name></name></expr></argument>, <argument><expr><name>dither_count</name></expr></argument>)</argument_list></call><operator>)</operator><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>

<for>for<control>(<init><expr><name>ch</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name><operator>&lt;</operator><name><name>s</name><operator>-&gt;</operator><name>dither</name><operator>.</operator><name>noise</name><operator>.</operator><name>ch_count</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>ret</name><operator>=</operator><call><name>swri_get_dither</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>dither</name><operator>.</operator><name>noise</name><operator>.</operator><name>ch</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>dither</name><operator>.</operator><name>noise</name><operator>.</operator><name>count</name></name></expr></argument>, <argument><expr><operator>(</operator><literal type="number">12345678913579ULL</literal><operator>*</operator><name>ch</name> <operator>+</operator> <literal type="number">3141592</literal><operator>)</operator> <operator>%</operator> <literal type="number">2718281828U</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>dither</name><operator>.</operator><name>noise</name><operator>.</operator><name>fmt</name></name></expr></argument>)</argument_list></call><operator>)</operator><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>dither</name><operator>.</operator><name>noise</name><operator>.</operator><name>ch_count</name></name> <operator>==</operator> <name><name>preout</name><operator>-&gt;</operator><name>ch_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>dither</name><operator>.</operator><name>noise_pos</name></name> <operator>+</operator> <name>out_count</name> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>dither</name><operator>.</operator><name>noise</name><operator>.</operator><name>count</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dither</name><operator>.</operator><name>noise_pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>dither</name><operator>.</operator><name>method</name></name> <operator>&lt;</operator> <name>SWR_DITHER_NS</name></expr>)</condition><block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mix_2_1_simd</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>len1</name><init>= <expr><name>out_count</name><operator>&amp;</operator><operator>~</operator><literal type="number">15</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>off</name> <init>= <expr><name>len1</name> <operator>*</operator> <name><name>preout</name><operator>-&gt;</operator><name>bps</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>len1</name></expr>)</condition><block type="pseudo"><block_content>

<for>for<control>(<init><expr><name>ch</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name><operator>&lt;</operator><name><name>preout</name><operator>-&gt;</operator><name>ch_count</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>mix_2_1_simd</name></name><argument_list>(<argument><expr><name><name>conv_src</name><operator>-&gt;</operator><name>ch</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>preout</name><operator>-&gt;</operator><name>ch</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>dither</name><operator>.</operator><name>noise</name><operator>.</operator><name>ch</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>dither</name><operator>.</operator><name>noise</name><operator>.</operator><name>bps</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>dither</name><operator>.</operator><name>noise_pos</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>native_simd_one</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>len1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>out_count</name> <operator>!=</operator> <name>len1</name></expr>)</condition><block type="pseudo"><block_content>

<for>for<control>(<init><expr><name>ch</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name><operator>&lt;</operator><name><name>preout</name><operator>-&gt;</operator><name>ch_count</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>mix_2_1_f</name></name><argument_list>(<argument><expr><name><name>conv_src</name><operator>-&gt;</operator><name>ch</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>+</operator> <name>off</name></expr></argument>, <argument><expr><name><name>preout</name><operator>-&gt;</operator><name>ch</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>+</operator> <name>off</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>dither</name><operator>.</operator><name>noise</name><operator>.</operator><name>ch</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>dither</name><operator>.</operator><name>noise</name><operator>.</operator><name>bps</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>dither</name><operator>.</operator><name>noise_pos</name></name> <operator>+</operator> <name>off</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>native_one</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>out_count</name> <operator>-</operator> <name>len1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for<control>(<init><expr><name>ch</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name><operator>&lt;</operator><name><name>preout</name><operator>-&gt;</operator><name>ch_count</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>mix_2_1_f</name></name><argument_list>(<argument><expr><name><name>conv_src</name><operator>-&gt;</operator><name>ch</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>preout</name><operator>-&gt;</operator><name>ch</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>dither</name><operator>.</operator><name>noise</name><operator>.</operator><name>ch</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>dither</name><operator>.</operator><name>noise</name><operator>.</operator><name>bps</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>dither</name><operator>.</operator><name>noise_pos</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>native_one</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>out_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<switch>switch<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>int_sample_fmt</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_SAMPLE_FMT_S16P</name></expr> :</case><expr_stmt><expr><call><name>swri_noise_shaping_int16</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>conv_src</name></expr></argument>, <argument><expr><name>preout</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>dither</name><operator>.</operator><name>noise</name></name></expr></argument>, <argument><expr><name>out_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>AV_SAMPLE_FMT_S32P</name></expr> :</case><expr_stmt><expr><call><name>swri_noise_shaping_int32</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>conv_src</name></expr></argument>, <argument><expr><name>preout</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>dither</name><operator>.</operator><name>noise</name></name></expr></argument>, <argument><expr><name>out_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>AV_SAMPLE_FMT_FLTP</name></expr> :</case><expr_stmt><expr><call><name>swri_noise_shaping_float</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>conv_src</name></expr></argument>, <argument><expr><name>preout</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>dither</name><operator>.</operator><name>noise</name></name></expr></argument>, <argument><expr><name>out_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>AV_SAMPLE_FMT_DBLP</name></expr> :</case><expr_stmt><expr><call><name>swri_noise_shaping_double</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name>conv_src</name></expr></argument>, <argument><expr><name>preout</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>dither</name><operator>.</operator><name>noise</name></name></expr></argument>, <argument><expr><name>out_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dither</name><operator>.</operator><name>noise_pos</name></name> <operator>+=</operator> <name>out_count</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>swri_audio_convert</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>out_convert</name></name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>conv_src</name></expr></argument>, <argument><expr><name>out_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>out_count</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>swr_is_initialized</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SwrContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><operator>!</operator><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>in_buffer</name><operator>.</operator><name>ch_count</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name> <name>attribute_align_arg</name></type> <name>swr_convert</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SwrContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>out_arg</name><index>[<expr><name>SWR_CH_MAX</name></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>out_count</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name><name>in_arg</name> <index>[<expr><name>SWR_CH_MAX</name></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>in_count</name></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><name>AudioData</name> <modifier>*</modifier></type> <name>in</name><init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>in</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AudioData</name> <modifier>*</modifier></type><name>out</name><init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>out</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <name>av_unused</name></type> <name>max_output</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>swr_is_initialized</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Context has not been initialized\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ASSERT_LEVEL</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>ASSERT_LEVEL</name> <operator>&gt;</operator><literal type="number">1</literal></expr></cpp:if>

<expr_stmt><expr><name>max_output</name> <operator>=</operator> <call><name>swr_get_out_samples</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>in_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<while>while<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>drop_output</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>tmp_arg</name><index>[<expr><name>SWR_CH_MAX</name></expr>]</index></name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_DROP_STEP</name></cpp:macro> <cpp:value>16384</cpp:value></cpp:define>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>ret</name><operator>=</operator><call><name>swri_realloc_audio</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>drop_temp</name></name></expr></argument>, <argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>drop_output</name></name></expr></argument>, <argument><expr><name>MAX_DROP_STEP</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>reversefill_audiodata</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>drop_temp</name></name></expr></argument>, <argument><expr><name>tmp_arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>drop_output</name></name> <operator>*=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>swr_convert</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>tmp_arg</name></expr></argument>, <argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><operator>-</operator><name><name>s</name><operator>-&gt;</operator><name>drop_output</name></name></expr></argument>, <argument><expr><name>MAX_DROP_STEP</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>in_arg</name></expr></argument>, <argument><expr><name>in_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>drop_output</name></name> <operator>*=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>in_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>ret</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>drop_output</name></name> <operator>-=</operator> <name>ret</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>drop_output</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>out_arg</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>drop_output</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></while>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>in_arg</name></expr>)</condition><block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>resample</name></name></expr>)</condition><block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>flushed</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>resampler</name><operator>-&gt;</operator><name>flush</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>resample_in_constraint</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>flushed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if><if type="elseif">else if<condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>in_buffer_count</name></name></expr>)</condition><block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if><else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fill_audiodata</name><argument_list>(<argument><expr><name>in</name></expr></argument> , <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>in_arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>fill_audiodata</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>out_arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>resample</name></name></expr>)</condition><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>swr_convert_internal</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>out_count</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>in_count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>ret</name><operator>&gt;</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>drop_output</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>outpts</name></name> <operator>+=</operator> <name>ret</name> <operator>*</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>in_sample_rate</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name>max_output</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>ret</name> <operator>&lt;=</operator> <name>max_output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if><else>else<block>{<block_content>

<decl_stmt><decl><type><name>AudioData</name></type> <name>tmp</name><init>= <expr><operator>*</operator><name>in</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret2</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>size</name></decl>;</decl_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>out_count</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>in_buffer_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>size</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>buf_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>in_buffer</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>in_buffer_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name><operator>=</operator> <call><name>swr_convert_internal</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>ret</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret2</name><operator>=</operator> <name>ret</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>in_buffer_count</name></name> <operator>-=</operator> <name>ret</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>in_buffer_index</name></name> <operator>+=</operator> <name>ret</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>buf_set</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>out_count</name> <operator>-=</operator> <name>ret</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>in_buffer_count</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>in_buffer_index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>in_count</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>size</name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>in_buffer_index</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>in_buffer_count</name></name> <operator>+</operator> <name>in_count</name> <operator>-</operator> <name>out_count</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>in_count</name> <operator>&gt;</operator> <name>out_count</name></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if<condition>( <expr><name>size</name> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>in_buffer</name><operator>.</operator><name>count</name></name>

<operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>in_buffer_count</name></name> <operator>+</operator> <name>in_count</name> <operator>-</operator> <name>out_count</name> <operator>&lt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>in_buffer_index</name></name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>buf_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>in_buffer</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>in_buffer_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>in_buffer</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>in_buffer_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>in_buffer_index</name></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if><if type="elseif">else

if<condition>(<expr><operator>(</operator><name>ret</name><operator>=</operator><call><name>swri_realloc_audio</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>in_buffer</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>out_count</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>in_count</name></expr></argument>, <argument><expr><name>out_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name><operator>=</operator> <call><name>swr_convert_internal</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>ret</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>buf_set</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>in_count</name> <operator>-=</operator> <name>ret</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret2</name> <operator>+=</operator> <name>ret</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>in_count</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>buf_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>in_buffer</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>in_buffer_index</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>in_buffer_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>in_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>in_buffer_count</name></name> <operator>+=</operator> <name>in_count</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>ret2</name><operator>&gt;</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>drop_output</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>outpts</name></name> <operator>+=</operator> <name>ret2</name> <operator>*</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>in_sample_rate</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name>max_output</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>ret2</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>ret2</name> <operator>&lt;=</operator> <name>max_output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret2</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>swr_drop_output</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SwrContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name><name>tmp_arg</name><index>[<expr><name>SWR_CH_MAX</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>drop_output</name></name> <operator>+=</operator> <name>count</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>drop_output</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"discarding %d audio samples\n"</literal></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>swr_convert</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>drop_output</name></name></expr></argument>, <argument><expr><name>tmp_arg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>swr_inject_silence</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SwrContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>tmp_arg</name><index>[<expr><name>SWR_CH_MAX</name></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>count</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_SILENCE_STEP</name></cpp:macro> <cpp:value>16384</cpp:value></cpp:define>

<while>while <condition>(<expr><name>count</name> <operator>&gt;</operator> <name>MAX_SILENCE_STEP</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>swr_inject_silence</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>MAX_SILENCE_STEP</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>count</name> <operator>-=</operator> <name>MAX_SILENCE_STEP</name></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>ret</name><operator>=</operator><call><name>swri_realloc_audio</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>silence</name></name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call><operator>)</operator><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>silence</name><operator>.</operator><name>planar</name></name></expr>)</condition><block type="pseudo"><block_content> <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>s</name><operator>-&gt;</operator><name>silence</name><operator>.</operator><name>ch_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>silence</name><operator>.</operator><name>ch</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>silence</name><operator>.</operator><name>bps</name></name><operator>==</operator><literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="number">0x80</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>, <argument><expr><name>count</name><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>silence</name><operator>.</operator><name>bps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for></block_content></block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>silence</name><operator>.</operator><name>ch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>silence</name><operator>.</operator><name>bps</name></name><operator>==</operator><literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="number">0x80</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>, <argument><expr><name>count</name><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>silence</name><operator>.</operator><name>bps</name></name><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>silence</name><operator>.</operator><name>ch_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>reversefill_audiodata</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>silence</name></name></expr></argument>, <argument><expr><name>tmp_arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"adding %d audio samples of silence\n"</literal></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>swr_convert</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name><operator>*</operator><operator>*</operator><operator>)</operator><name>tmp_arg</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int64_t</name></type> <name>swr_get_delay</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SwrContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>base</name></decl></parameter>)</parameter_list><block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>resampler</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>resample</name></name></expr>)</condition><block>{<block_content>

<return>return <expr><call><name><name>s</name><operator>-&gt;</operator><name>resampler</name><operator>-&gt;</operator><name>get_delay</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if><else>else<block>{<block_content>

<return>return <expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>in_buffer_count</name></name><operator>*</operator><name>base</name> <operator>+</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>in_sample_rate</name></name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>in_sample_rate</name></name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>swr_get_out_samples</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SwrContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>in_samples</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>out_samples</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>in_samples</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>resampler</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>resample</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>resampler</name><operator>-&gt;</operator><name>get_out_samples</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>out_samples</name> <operator>=</operator> <call><name><name>s</name><operator>-&gt;</operator><name>resampler</name><operator>-&gt;</operator><name>get_out_samples</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>in_samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>out_samples</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>in_buffer_count</name></name> <operator>+</operator> <name>in_samples</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>out_sample_rate</name></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>in_sample_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>out_samples</name> <operator>&gt;</operator> <name>INT_MAX</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>out_samples</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>swr_set_compensation</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SwrContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sample_delta</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>compensation_distance</name></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>s</name> <operator>||</operator> <name>compensation_distance</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>compensation_distance</name> <operator>&amp;&amp;</operator> <name>sample_delta</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>resample</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>SWR_FLAG_RESAMPLE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>swr_init</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>resampler</name><operator>-&gt;</operator><name>set_compensation</name></name></expr>)</condition><block>{<block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if><else>else<block>{<block_content>

<return>return <expr><call><name><name>s</name><operator>-&gt;</operator><name>resampler</name><operator>-&gt;</operator><name>set_compensation</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>resample</name></name></expr></argument>, <argument><expr><name>sample_delta</name></expr></argument>, <argument><expr><name>compensation_distance</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>int64_t</name></type> <name>swr_next_pts</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SwrContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>pts</name></decl></parameter>)</parameter_list><block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>pts</name> <operator>==</operator> <name>INT64_MIN</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>s</name><operator>-&gt;</operator><name>outpts</name></name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>firstpts</name></name> <operator>==</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>outpts</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>firstpts</name></name> <operator>=</operator> <name>pts</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>min_compensation</name></name> <operator>&gt;=</operator> <name>FLT_MAX</name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>outpts</name></name> <operator>=</operator> <name>pts</name> <operator>-</operator> <call><name>swr_get_delay</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>in_sample_rate</name></name> <operator>*</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>out_sample_rate</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>delta</name> <init>= <expr><name>pts</name> <operator>-</operator> <call><name>swr_get_delay</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>in_sample_rate</name></name> <operator>*</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>out_sample_rate</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>outpts</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>drop_output</name></name><operator>*</operator><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>in_sample_rate</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>fdelta</name> <init>= <expr><name>delta</name> <operator>/</operator><operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>in_sample_rate</name></name> <operator>*</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>out_sample_rate</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>fabs</name><argument_list>(<argument><expr><name>fdelta</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>min_compensation</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>outpts</name></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>firstpts</name></name> <operator>||</operator> <call><name>fabs</name><argument_list>(<argument><expr><name>fdelta</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>min_hard_compensation</name></name></expr>)</condition><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>delta</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>swr_inject_silence</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>delta</name> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>out_sample_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>swr_drop_output</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>-</operator><name>delta</name> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator> <name>in_sample_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>ret</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to compensate for timestamp delta of %f\n"</literal></expr></argument>, <argument><expr><name>fdelta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>soft_compensation_duration</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>max_soft_compensation</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>duration</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>out_sample_rate</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>soft_compensation_duration</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>max_soft_compensation</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>max_soft_compensation</name></name> <operator>/</operator> <operator>(</operator><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>max_soft_compensation</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>-</operator><name><name>s</name><operator>-&gt;</operator><name>in_sample_rate</name></name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>comp</name> <init>= <expr><call><name>av_clipf</name><argument_list>(<argument><expr><name>fdelta</name></expr></argument>, <argument><expr><operator>-</operator><name>max_soft_compensation</name></expr></argument>, <argument><expr><name>max_soft_compensation</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>duration</name></expr></init></decl> ;</decl_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"compensating audio timestamp drift:%f compensation:%d in:%d\n"</literal></expr></argument>, <argument><expr><name>fdelta</name></expr></argument>, <argument><expr><name>comp</name></expr></argument>, <argument><expr><name>duration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>swr_set_compensation</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>comp</name></expr></argument>, <argument><expr><name>duration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>s</name><operator>-&gt;</operator><name>outpts</name></name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

</unit>
