<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libswresample\resample_template.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TEMPLATE_RESAMPLE_DBL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RENAME</name><parameter_list>(<parameter><type><name>N</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>N ##_double</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILTER_SHIFT</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DELEM</name></cpp:macro> <cpp:value>double</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FELEM</name></cpp:macro> <cpp:value>double</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FELEM2</name></cpp:macro> <cpp:value>double</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOFFSET</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OUT</name><parameter_list>(<parameter><type><name>d</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>d = v</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TEMPLATE_RESAMPLE_FLT</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RENAME</name><parameter_list>(<parameter><type><name>N</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>N ##_float</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILTER_SHIFT</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DELEM</name></cpp:macro> <cpp:value>float</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FELEM</name></cpp:macro> <cpp:value>float</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FELEM2</name></cpp:macro> <cpp:value>float</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOFFSET</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OUT</name><parameter_list>(<parameter><type><name>d</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>d = v</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TEMPLATE_RESAMPLE_S32</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RENAME</name><parameter_list>(<parameter><type><name>N</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>N ##_int32</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILTER_SHIFT</name></cpp:macro> <cpp:value>30</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DELEM</name></cpp:macro> <cpp:value>int32_t</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FELEM</name></cpp:macro> <cpp:value>int32_t</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FELEM2</name></cpp:macro> <cpp:value>int64_t</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FELEM_MAX</name></cpp:macro> <cpp:value>INT32_MAX</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FELEM_MIN</name></cpp:macro> <cpp:value>INT32_MIN</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOFFSET</name></cpp:macro> <cpp:value>(1&lt;&lt;(FILTER_SHIFT-1))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OUT</name><parameter_list>(<parameter><type><name>d</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(d) = av_clipl_int32((v)&gt;&gt;FILTER_SHIFT)</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TEMPLATE_RESAMPLE_S16</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RENAME</name><parameter_list>(<parameter><type><name>N</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>N ##_int16</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILTER_SHIFT</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DELEM</name></cpp:macro> <cpp:value>int16_t</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FELEM</name></cpp:macro> <cpp:value>int16_t</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FELEM2</name></cpp:macro> <cpp:value>int32_t</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FELEML</name></cpp:macro> <cpp:value>int64_t</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FELEM_MAX</name></cpp:macro> <cpp:value>INT16_MAX</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FELEM_MIN</name></cpp:macro> <cpp:value>INT16_MIN</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOFFSET</name></cpp:macro> <cpp:value>(1&lt;&lt;(FILTER_SHIFT-1))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OUT</name><parameter_list>(<parameter><type><name>d</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(d) = av_clip_int16((v)&gt;&gt;FILTER_SHIFT)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name> <name>RENAME</name></type>(<name>resample_one</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>source</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>dst_size</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>index2</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>incr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>DELEM</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><name>dest</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>DELEM</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><name>source</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dst_index</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>dst_index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>dst_index</name> <operator>&lt;</operator> <name>dst_size</name></expr>;</condition> <incr><expr><name>dst_index</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>dst_index</name></expr>]</index></name> <operator>=</operator> <name><name>src</name><index>[<expr><name>index2</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>index2</name> <operator>+=</operator> <name>incr</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>RENAME</name></type>(<name>resample_common</name>)<parameter_list>(<parameter><decl><type><name>ResampleContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>source</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>update_ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>DELEM</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><name>dest</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>DELEM</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><name>source</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dst_index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>index</name><init>= <expr><name><name>c</name><operator>-&gt;</operator><name>index</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>frac</name><init>= <expr><name><name>c</name><operator>-&gt;</operator><name>frac</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sample_index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>index</name> <operator>&gt;=</operator> <name><name>c</name><operator>-&gt;</operator><name>phase_count</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>sample_index</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>index</name> <operator>-=</operator> <name><name>c</name><operator>-&gt;</operator><name>phase_count</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<for>for <control>(<init><expr><name>dst_index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>dst_index</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>dst_index</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>FELEM</name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><operator>(</operator><operator>(</operator><name>FELEM</name> <operator>*</operator><operator>)</operator> <name><name>c</name><operator>-&gt;</operator><name>filter_bank</name></name><operator>)</operator> <operator>+</operator> <name><name>c</name><operator>-&gt;</operator><name>filter_alloc</name></name> <operator>*</operator> <name>index</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FELEM2</name></type> <name>val</name> <init>= <expr><name>FOFFSET</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FELEM2</name></type> <name>val2</name><init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>filter_length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>+=</operator><literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>val</name> <operator>+=</operator> <name><name>src</name><index>[<expr><name>sample_index</name> <operator>+</operator> <name>i</name></expr> ]</index></name> <operator>*</operator> <operator>(</operator><name>FELEM2</name><operator>)</operator><name><name>filter</name><index>[<expr><name>i</name></expr> ]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>val2</name> <operator>+=</operator> <name><name>src</name><index>[<expr><name>sample_index</name> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>FELEM2</name><operator>)</operator><name><name>filter</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>filter_length</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>val</name> <operator>+=</operator> <name><name>src</name><index>[<expr><name>sample_index</name> <operator>+</operator> <name>i</name></expr> ]</index></name> <operator>*</operator> <operator>(</operator><name>FELEM2</name><operator>)</operator><name><name>filter</name><index>[<expr><name>i</name></expr> ]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FELEML</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>OUT</name><argument_list>(<argument><expr><name><name>dst</name><index>[<expr><name>dst_index</name></expr>]</index></name></expr></argument>, <argument><expr><name>val</name> <operator>+</operator> <operator>(</operator><name>FELEML</name><operator>)</operator><name>val2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>OUT</name><argument_list>(<argument><expr><name><name>dst</name><index>[<expr><name>dst_index</name></expr>]</index></name></expr></argument>, <argument><expr><name>val</name> <operator>+</operator> <name>val2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>frac</name> <operator>+=</operator> <name><name>c</name><operator>-&gt;</operator><name>dst_incr_mod</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>index</name> <operator>+=</operator> <name><name>c</name><operator>-&gt;</operator><name>dst_incr_div</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>frac</name> <operator>&gt;=</operator> <name><name>c</name><operator>-&gt;</operator><name>src_incr</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>frac</name> <operator>-=</operator> <name><name>c</name><operator>-&gt;</operator><name>src_incr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>index</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>index</name> <operator>&gt;=</operator> <name><name>c</name><operator>-&gt;</operator><name>phase_count</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>sample_index</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>index</name> <operator>-=</operator> <name><name>c</name><operator>-&gt;</operator><name>phase_count</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></for>

<if_stmt><if>if<condition>(<expr><name>update_ctx</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>frac</name></name><operator>=</operator> <name>frac</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>index</name></name><operator>=</operator> <name>index</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>sample_index</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>RENAME</name></type>(<name>resample_linear</name>)<parameter_list>(<parameter><decl><type><name>ResampleContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>source</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>update_ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>DELEM</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><name>dest</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>DELEM</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><name>source</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dst_index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>index</name><init>= <expr><name><name>c</name><operator>-&gt;</operator><name>index</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>frac</name><init>= <expr><name><name>c</name><operator>-&gt;</operator><name>frac</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sample_index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FILTER_SHIFT</name> <operator>==</operator> <literal type="number">0</literal></expr></cpp:if>

<decl_stmt><decl><type><name>double</name></type> <name>inv_src_incr</name> <init>= <expr><literal type="number">1.0</literal> <operator>/</operator> <name><name>c</name><operator>-&gt;</operator><name>src_incr</name></name></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<while>while <condition>(<expr><name>index</name> <operator>&gt;=</operator> <name><name>c</name><operator>-&gt;</operator><name>phase_count</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>sample_index</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>index</name> <operator>-=</operator> <name><name>c</name><operator>-&gt;</operator><name>phase_count</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<for>for <control>(<init><expr><name>dst_index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>dst_index</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>dst_index</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>FELEM</name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><operator>(</operator><operator>(</operator><name>FELEM</name> <operator>*</operator><operator>)</operator> <name><name>c</name><operator>-&gt;</operator><name>filter_bank</name></name><operator>)</operator> <operator>+</operator> <name><name>c</name><operator>-&gt;</operator><name>filter_alloc</name></name> <operator>*</operator> <name>index</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FELEM2</name></type> <name>val</name> <init>= <expr><name>FOFFSET</name></expr></init></decl>, <decl><type ref="prev"/><name>v2</name> <init>= <expr><name>FOFFSET</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>filter_length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>val</name> <operator>+=</operator> <name><name>src</name><index>[<expr><name>sample_index</name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>FELEM2</name><operator>)</operator><name><name>filter</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>v2</name> <operator>+=</operator> <name><name>src</name><index>[<expr><name>sample_index</name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>FELEM2</name><operator>)</operator><name><name>filter</name><index>[<expr><name>i</name> <operator>+</operator> <name><name>c</name><operator>-&gt;</operator><name>filter_alloc</name></name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FELEML</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>val</name> <operator>+=</operator> <operator>(</operator><name>v2</name> <operator>-</operator> <name>val</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>FELEML</name><operator>)</operator> <name>frac</name> <operator>/</operator> <name><name>c</name><operator>-&gt;</operator><name>src_incr</name></name></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FILTER_SHIFT</name> <operator>==</operator> <literal type="number">0</literal></expr></cpp:if>

<expr_stmt><expr><name>val</name> <operator>+=</operator> <operator>(</operator><name>v2</name> <operator>-</operator> <name>val</name><operator>)</operator> <operator>*</operator> <name>inv_src_incr</name> <operator>*</operator> <name>frac</name></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>val</name> <operator>+=</operator> <operator>(</operator><name>v2</name> <operator>-</operator> <name>val</name><operator>)</operator> <operator>/</operator> <name><name>c</name><operator>-&gt;</operator><name>src_incr</name></name> <operator>*</operator> <name>frac</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>OUT</name><argument_list>(<argument><expr><name><name>dst</name><index>[<expr><name>dst_index</name></expr>]</index></name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>frac</name> <operator>+=</operator> <name><name>c</name><operator>-&gt;</operator><name>dst_incr_mod</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>index</name> <operator>+=</operator> <name><name>c</name><operator>-&gt;</operator><name>dst_incr_div</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>frac</name> <operator>&gt;=</operator> <name><name>c</name><operator>-&gt;</operator><name>src_incr</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>frac</name> <operator>-=</operator> <name><name>c</name><operator>-&gt;</operator><name>src_incr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>index</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>index</name> <operator>&gt;=</operator> <name><name>c</name><operator>-&gt;</operator><name>phase_count</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>sample_index</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>index</name> <operator>-=</operator> <name><name>c</name><operator>-&gt;</operator><name>phase_count</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></for>

<if_stmt><if>if<condition>(<expr><name>update_ctx</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>frac</name></name><operator>=</operator> <name>frac</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>index</name></name><operator>=</operator> <name>index</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>sample_index</name></expr>;</return>

</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>RENAME</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>FILTER_SHIFT</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DELEM</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>FELEM</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>FELEM2</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>FELEML</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>FELEM_MAX</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>FELEM_MIN</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>OUT</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>FOFFSET</name></cpp:undef>

</unit>
