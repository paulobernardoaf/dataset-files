<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libpostproc\postprocess_altivec_template.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avutil.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALTIVEC_TRANSPOSE_8x8_SHORT</name><parameter_list>(<parameter><type><name>src_a</name></type></parameter>,<parameter><type><name>src_b</name></type></parameter>,<parameter><type><name>src_c</name></type></parameter>,<parameter><type><name>src_d</name></type></parameter>,<parameter><type><name>src_e</name></type></parameter>,<parameter><type><name>src_f</name></type></parameter>,<parameter><type><name>src_g</name></type></parameter>,<parameter><type><name>src_h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { __typeof__(src_a) tempA1, tempB1, tempC1, tempD1; __typeof__(src_a) tempE1, tempF1, tempG1, tempH1; __typeof__(src_a) tempA2, tempB2, tempC2, tempD2; __typeof__(src_a) tempE2, tempF2, tempG2, tempH2; tempA1 = vec_mergeh (src_a, src_e); tempB1 = vec_mergel (src_a, src_e); tempC1 = vec_mergeh (src_b, src_f); tempD1 = vec_mergel (src_b, src_f); tempE1 = vec_mergeh (src_c, src_g); tempF1 = vec_mergel (src_c, src_g); tempG1 = vec_mergeh (src_d, src_h); tempH1 = vec_mergel (src_d, src_h); tempA2 = vec_mergeh (tempA1, tempE1); tempB2 = vec_mergel (tempA1, tempE1); tempC2 = vec_mergeh (tempB1, tempF1); tempD2 = vec_mergel (tempB1, tempF1); tempE2 = vec_mergeh (tempC1, tempG1); tempF2 = vec_mergel (tempC1, tempG1); tempG2 = vec_mergeh (tempD1, tempH1); tempH2 = vec_mergel (tempD1, tempH1); src_a = vec_mergeh (tempA2, tempE2); src_b = vec_mergel (tempA2, tempE2); src_c = vec_mergeh (tempB2, tempF2); src_d = vec_mergel (tempB2, tempF2); src_e = vec_mergeh (tempC2, tempG2); src_f = vec_mergel (tempC2, tempG2); src_g = vec_mergeh (tempD2, tempH2); src_h = vec_mergel (tempD2, tempH2); } while (0)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>vertClassify_altivec</name><parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name><name>src</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>PPContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>short</name></type> <name>data_0</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>nonBQP</name></name><operator>*</operator><name><name>c</name><operator>-&gt;</operator><name>ppMode</name><operator>.</operator><name>baseDcDiff</name></name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">8</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>short</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">8</literal></expr>]</index> <operator>=</operator>

<block>{

<expr><name>data_0</name></expr>,

<expr><name>data_0</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>,

<expr><name><name>c</name><operator>-&gt;</operator><name>QP</name></name> <operator>*</operator> <literal type="number">2</literal></expr>,

<expr><name><name>c</name><operator>-&gt;</operator><name>QP</name></name> <operator>*</operator> <literal type="number">4</literal></expr>

}</block></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>numEq</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src2</name> <init>= <expr><name>src</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>signed</name> <name>short</name></type> <name>v_dcOffset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>signed</name> <name>short</name></type> <name>v2QP</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>v4QP</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>v_dcThreshold</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>properStride</name> <init>= <expr><operator>(</operator><name>stride</name> <operator>%</operator> <literal type="number">16</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>srcAlign</name> <init>= <expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>src2</name> <operator>%</operator> <literal type="number">16</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>two_vectors</name> <init>= <expr><ternary><condition><expr><operator>(</operator><operator>(</operator><name>srcAlign</name> <operator>&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>||</operator> <name>properStride</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>signed</name> <name>int</name></type> <name>zero</name> <init>= <expr><call><name>vec_splat_s32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>mask</name> <init>= <expr><call><name>vec_splat_s16</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>v_numEq</name> <init>= <expr><call><name>vec_splat_s32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>signed</name> <name>short</name></type> <name>v_data</name> <init>= <expr><call><name>vec_ld</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>signed</name> <name>short</name></type> <name>v_srcAss0</name></decl>, <decl><type ref="prev"/><name>v_srcAss1</name></decl>, <decl><type ref="prev"/><name>v_srcAss2</name></decl>, <decl><type ref="prev"/><name>v_srcAss3</name></decl>,

<decl><type ref="prev"/><name>v_srcAss4</name></decl>, <decl><type ref="prev"/><name>v_srcAss5</name></decl>, <decl><type ref="prev"/><name>v_srcAss6</name></decl>, <decl><type ref="prev"/><name>v_srcAss7</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>int</name></type> <name>j0</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><type ref="prev"/><name>j1</name> <init>= <expr><name>stride</name></expr></init></decl>,

<decl><type ref="prev"/><name>j2</name> <init>= <expr><literal type="number">2</literal> <operator>*</operator> <name>stride</name></expr></init></decl>,

<decl><type ref="prev"/><name>j3</name> <init>= <expr><literal type="number">3</literal> <operator>*</operator> <name>stride</name></expr></init></decl>,

<decl><type ref="prev"/><name>j4</name> <init>= <expr><literal type="number">4</literal> <operator>*</operator> <name>stride</name></expr></init></decl>,

<decl><type ref="prev"/><name>j5</name> <init>= <expr><literal type="number">5</literal> <operator>*</operator> <name>stride</name></expr></init></decl>,

<decl><type ref="prev"/><name>j6</name> <init>= <expr><literal type="number">6</literal> <operator>*</operator> <name>stride</name></expr></init></decl>,

<decl><type ref="prev"/><name>j7</name> <init>= <expr><literal type="number">7</literal> <operator>*</operator> <name>stride</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>v_srcA0</name></decl>, <decl><type ref="prev"/><name>v_srcA1</name></decl>, <decl><type ref="prev"/><name>v_srcA2</name></decl>, <decl><type ref="prev"/><name>v_srcA3</name></decl>,

<decl><type ref="prev"/><name>v_srcA4</name></decl>, <decl><type ref="prev"/><name>v_srcA5</name></decl>, <decl><type ref="prev"/><name>v_srcA6</name></decl>, <decl><type ref="prev"/><name>v_srcA7</name></decl>;</decl_stmt>

<expr_stmt><expr><name>v_dcOffset</name> <operator>=</operator> <call><name>vec_splat</name><argument_list>(<argument><expr><name>v_data</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>v_dcThreshold</name> <operator>=</operator> <operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><call><name>vec_splat</name><argument_list>(<argument><expr><name>v_data</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>v2QP</name> <operator>=</operator> <call><name>vec_splat</name><argument_list>(<argument><expr><name>v_data</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>v4QP</name> <operator>=</operator> <operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><call><name>vec_splat</name><argument_list>(<argument><expr><name>v_data</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src2</name> <operator>+=</operator> <name>stride</name> <operator>*</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOAD_LINE</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ vector unsigned char perm##i = vec_lvsl(j##i, src2); vector unsigned char v_srcA2##i; vector unsigned char v_srcA1##i = vec_ld(j##i, src2); if (two_vectors) v_srcA2##i = vec_ld(j##i + 16, src2); v_srcA##i = vec_perm(v_srcA1##i, v_srcA2##i, perm##i); v_srcAss##i = (vector signed short)vec_mergeh((vector signed char)zero, (vector signed char)v_srcA##i); }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOAD_LINE_ALIGNED</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>v_srcA##i = vec_ld(j##i, src2); v_srcAss##i = (vector signed short)vec_mergeh((vector signed char)zero, (vector signed char)v_srcA##i)</cpp:value></cpp:define>

<if_stmt><if>if <condition>(<expr><name>properStride</name> <operator>&amp;&amp;</operator> <name>srcAlign</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>LOAD_LINE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOAD_LINE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOAD_LINE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOAD_LINE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOAD_LINE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOAD_LINE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOAD_LINE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOAD_LINE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>LOAD_LINE</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOAD_LINE</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOAD_LINE</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOAD_LINE</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOAD_LINE</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOAD_LINE</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOAD_LINE</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOAD_LINE</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>LOAD_LINE</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>LOAD_LINE_ALIGNED</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ITER</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>j</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>const vector signed short v_diff##i = vec_sub(v_srcAss##i, v_srcAss##j); const vector signed short v_sum##i = vec_add(v_diff##i, v_dcOffset); const vector signed short v_comp##i = (vector signed short)vec_cmplt((vector unsigned short)v_sum##i, v_dcThreshold); const vector signed short v_part##i = vec_and(mask, v_comp##i);</cpp:value></cpp:define>

<block>{<block_content>

<macro><name>ITER</name><argument_list>(<argument><literal type="number">0</literal></argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>

<macro><name>ITER</name><argument_list>(<argument><literal type="number">1</literal></argument>, <argument><literal type="number">2</literal></argument>)</argument_list></macro>

<macro><name>ITER</name><argument_list>(<argument><literal type="number">2</literal></argument>, <argument><literal type="number">3</literal></argument>)</argument_list></macro>

<macro><name>ITER</name><argument_list>(<argument><literal type="number">3</literal></argument>, <argument><literal type="number">4</literal></argument>)</argument_list></macro>

<macro><name>ITER</name><argument_list>(<argument><literal type="number">4</literal></argument>, <argument><literal type="number">5</literal></argument>)</argument_list></macro>

<macro><name>ITER</name><argument_list>(<argument><literal type="number">5</literal></argument>, <argument><literal type="number">6</literal></argument>)</argument_list></macro>

<macro><name>ITER</name><argument_list>(<argument><literal type="number">6</literal></argument>, <argument><literal type="number">7</literal></argument>)</argument_list></macro>

<expr_stmt><expr><name>v_numEq</name> <operator>=</operator> <call><name>vec_sum4s</name><argument_list>(<argument><expr><name>v_part0</name></expr></argument>, <argument><expr><name>v_numEq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>v_numEq</name> <operator>=</operator> <call><name>vec_sum4s</name><argument_list>(<argument><expr><name>v_part1</name></expr></argument>, <argument><expr><name>v_numEq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>v_numEq</name> <operator>=</operator> <call><name>vec_sum4s</name><argument_list>(<argument><expr><name>v_part2</name></expr></argument>, <argument><expr><name>v_numEq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>v_numEq</name> <operator>=</operator> <call><name>vec_sum4s</name><argument_list>(<argument><expr><name>v_part3</name></expr></argument>, <argument><expr><name>v_numEq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>v_numEq</name> <operator>=</operator> <call><name>vec_sum4s</name><argument_list>(<argument><expr><name>v_part4</name></expr></argument>, <argument><expr><name>v_numEq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>v_numEq</name> <operator>=</operator> <call><name>vec_sum4s</name><argument_list>(<argument><expr><name>v_part5</name></expr></argument>, <argument><expr><name>v_numEq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>v_numEq</name> <operator>=</operator> <call><name>vec_sum4s</name><argument_list>(<argument><expr><name>v_part6</name></expr></argument>, <argument><expr><name>v_numEq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ITER</name></cpp:undef>

<expr_stmt><expr><name>v_numEq</name> <operator>=</operator> <call><name>vec_sums</name><argument_list>(<argument><expr><name>v_numEq</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>v_numEq</name> <operator>=</operator> <call><name>vec_splat</name><argument_list>(<argument><expr><name>v_numEq</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vec_ste</name><argument_list>(<argument><expr><name>v_numEq</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>numEq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>numEq</name> <operator>&gt;</operator> <name><name>c</name><operator>-&gt;</operator><name>ppMode</name><operator>.</operator><name>flatnessThreshold</name></name></expr>)</condition><block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>char</name></type> <name>mmoP1</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator>

<block>{<expr><literal type="number">0x1f</literal></expr>, <expr><literal type="number">0x1f</literal></expr>, <expr><literal type="number">0x1f</literal></expr>, <expr><literal type="number">0x1f</literal></expr>, <expr><literal type="number">0x1f</literal></expr>, <expr><literal type="number">0x1f</literal></expr>, <expr><literal type="number">0x1f</literal></expr>, <expr><literal type="number">0x1f</literal></expr>,

<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x1A</literal></expr>, <expr><literal type="number">0x1B</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>char</name></type> <name>mmoP2</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator>

<block>{<expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x0C</literal></expr>, <expr><literal type="number">0x0D</literal></expr>, <expr><literal type="number">0x1E</literal></expr>, <expr><literal type="number">0x1F</literal></expr>,

<expr><literal type="number">0x1f</literal></expr>, <expr><literal type="number">0x1f</literal></expr>, <expr><literal type="number">0x1f</literal></expr>, <expr><literal type="number">0x1f</literal></expr>, <expr><literal type="number">0x1f</literal></expr>, <expr><literal type="number">0x1f</literal></expr>, <expr><literal type="number">0x1f</literal></expr>, <expr><literal type="number">0x1f</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>char</name></type> <name>mmoP</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator>

<call><name>vec_lvsl</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>signed</name> <name>short</name></type> <name>mmoL1</name> <init>= <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>v_srcAss0</name></expr></argument>, <argument><expr><name>v_srcAss2</name></expr></argument>, <argument><expr><name>mmoP1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>signed</name> <name>short</name></type> <name>mmoL2</name> <init>= <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>v_srcAss4</name></expr></argument>, <argument><expr><name>v_srcAss6</name></expr></argument>, <argument><expr><name>mmoP2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>signed</name> <name>short</name></type> <name>mmoL</name> <init>= <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>mmoL1</name></expr></argument>, <argument><expr><name>mmoL2</name></expr></argument>, <argument><expr><name>mmoP</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>signed</name> <name>short</name></type> <name>mmoR1</name> <init>= <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>v_srcAss5</name></expr></argument>, <argument><expr><name>v_srcAss7</name></expr></argument>, <argument><expr><name>mmoP1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>signed</name> <name>short</name></type> <name>mmoR2</name> <init>= <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>v_srcAss1</name></expr></argument>, <argument><expr><name>v_srcAss3</name></expr></argument>, <argument><expr><name>mmoP2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>signed</name> <name>short</name></type> <name>mmoR</name> <init>= <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>mmoR1</name></expr></argument>, <argument><expr><name>mmoR2</name></expr></argument>, <argument><expr><name>mmoP</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>signed</name> <name>short</name></type> <name>mmoDiff</name> <init>= <expr><call><name>vec_sub</name><argument_list>(<argument><expr><name>mmoL</name></expr></argument>, <argument><expr><name>mmoR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>mmoSum</name> <init>= <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><call><name>vec_add</name><argument_list>(<argument><expr><name>mmoDiff</name></expr></argument>, <argument><expr><name>v2QP</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vec_any_gt</name><argument_list>(<argument><expr><name>mmoSum</name></expr></argument>, <argument><expr><name>v4QP</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content> <return>return <expr><literal type="number">2</literal></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>doVertLowPass_altivec</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>PPContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src2</name> <init>= <expr><name>src</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>signed</name> <name>int</name></type> <name>zero</name> <init>= <expr><call><name>vec_splat_s32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>properStride</name> <init>= <expr><operator>(</operator><name>stride</name> <operator>%</operator> <literal type="number">16</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>srcAlign</name> <init>= <expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>src2</name> <operator>%</operator> <literal type="number">16</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>short</name></expr></argument>, <argument><expr><name>qp</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">8</literal></expr>]</index> <operator>=</operator> <block>{<expr><name><name>c</name><operator>-&gt;</operator><name>QP</name></name></expr>}</block></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vector</name> <name>signed</name> <name>short</name></type> <name>vqp</name> <init>= <expr><call><name>vec_ld</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>qp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>signed</name> <name>short</name></type> <name>vb0</name></decl>, <decl><type ref="prev"/><name>vb1</name></decl>, <decl><type ref="prev"/><name>vb2</name></decl>, <decl><type ref="prev"/><name>vb3</name></decl>, <decl><type ref="prev"/><name>vb4</name></decl>, <decl><type ref="prev"/><name>vb5</name></decl>, <decl><type ref="prev"/><name>vb6</name></decl>, <decl><type ref="prev"/><name>vb7</name></decl>, <decl><type ref="prev"/><name>vb8</name></decl>, <decl><type ref="prev"/><name>vb9</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>vbA0</name></decl>, <decl><type ref="prev"/><name>av_uninit</name><argument_list>(<argument><expr><name>vbA1</name></expr></argument>)</argument_list></decl>, <decl><type ref="prev"/><name>av_uninit</name><argument_list>(<argument><expr><name>vbA2</name></expr></argument>)</argument_list></decl>, <decl><type ref="prev"/><name>av_uninit</name><argument_list>(<argument><expr><name>vbA3</name></expr></argument>)</argument_list></decl>, <decl><type ref="prev"/><name>av_uninit</name><argument_list>(<argument><expr><name>vbA4</name></expr></argument>)</argument_list></decl>, <decl><type ref="prev"/><name>av_uninit</name><argument_list>(<argument><expr><name>vbA5</name></expr></argument>)</argument_list></decl>, <decl><type ref="prev"/><name>av_uninit</name><argument_list>(<argument><expr><name>vbA6</name></expr></argument>)</argument_list></decl>, <decl><type ref="prev"/><name>av_uninit</name><argument_list>(<argument><expr><name>vbA7</name></expr></argument>)</argument_list></decl>, <decl><type ref="prev"/><name>av_uninit</name><argument_list>(<argument><expr><name>vbA8</name></expr></argument>)</argument_list></decl>, <decl><type ref="prev"/><name>vbA9</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>vbB0</name></decl>, <decl><type ref="prev"/><name>av_uninit</name><argument_list>(<argument><expr><name>vbB1</name></expr></argument>)</argument_list></decl>, <decl><type ref="prev"/><name>av_uninit</name><argument_list>(<argument><expr><name>vbB2</name></expr></argument>)</argument_list></decl>, <decl><type ref="prev"/><name>av_uninit</name><argument_list>(<argument><expr><name>vbB3</name></expr></argument>)</argument_list></decl>, <decl><type ref="prev"/><name>av_uninit</name><argument_list>(<argument><expr><name>vbB4</name></expr></argument>)</argument_list></decl>, <decl><type ref="prev"/><name>av_uninit</name><argument_list>(<argument><expr><name>vbB5</name></expr></argument>)</argument_list></decl>, <decl><type ref="prev"/><name>av_uninit</name><argument_list>(<argument><expr><name>vbB6</name></expr></argument>)</argument_list></decl>, <decl><type ref="prev"/><name>av_uninit</name><argument_list>(<argument><expr><name>vbB7</name></expr></argument>)</argument_list></decl>, <decl><type ref="prev"/><name>av_uninit</name><argument_list>(<argument><expr><name>vbB8</name></expr></argument>)</argument_list></decl>, <decl><type ref="prev"/><name>vbB9</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>vbT0</name></decl>, <decl><type ref="prev"/><name>vbT1</name></decl>, <decl><type ref="prev"/><name>vbT2</name></decl>, <decl><type ref="prev"/><name>vbT3</name></decl>, <decl><type ref="prev"/><name>vbT4</name></decl>, <decl><type ref="prev"/><name>vbT5</name></decl>, <decl><type ref="prev"/><name>vbT6</name></decl>, <decl><type ref="prev"/><name>vbT7</name></decl>, <decl><type ref="prev"/><name>vbT8</name></decl>, <decl><type ref="prev"/><name>vbT9</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>perml0</name></decl>, <decl><type ref="prev"/><name>perml1</name></decl>, <decl><type ref="prev"/><name>perml2</name></decl>, <decl><type ref="prev"/><name>perml3</name></decl>, <decl><type ref="prev"/><name>perml4</name></decl>,

<decl><type ref="prev"/><name>perml5</name></decl>, <decl><type ref="prev"/><name>perml6</name></decl>, <decl><type ref="prev"/><name>perml7</name></decl>, <decl><type ref="prev"/><name>perml8</name></decl>, <decl><type ref="prev"/><name>perml9</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>int</name></type> <name>j0</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><type ref="prev"/><name>j1</name> <init>= <expr><name>stride</name></expr></init></decl>,

<decl><type ref="prev"/><name>j2</name> <init>= <expr><literal type="number">2</literal> <operator>*</operator> <name>stride</name></expr></init></decl>,

<decl><type ref="prev"/><name>j3</name> <init>= <expr><literal type="number">3</literal> <operator>*</operator> <name>stride</name></expr></init></decl>,

<decl><type ref="prev"/><name>j4</name> <init>= <expr><literal type="number">4</literal> <operator>*</operator> <name>stride</name></expr></init></decl>,

<decl><type ref="prev"/><name>j5</name> <init>= <expr><literal type="number">5</literal> <operator>*</operator> <name>stride</name></expr></init></decl>,

<decl><type ref="prev"/><name>j6</name> <init>= <expr><literal type="number">6</literal> <operator>*</operator> <name>stride</name></expr></init></decl>,

<decl><type ref="prev"/><name>j7</name> <init>= <expr><literal type="number">7</literal> <operator>*</operator> <name>stride</name></expr></init></decl>,

<decl><type ref="prev"/><name>j8</name> <init>= <expr><literal type="number">8</literal> <operator>*</operator> <name>stride</name></expr></init></decl>,

<decl><type ref="prev"/><name>j9</name> <init>= <expr><literal type="number">9</literal> <operator>*</operator> <name>stride</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>vqp</name> <operator>=</operator> <call><name>vec_splat</name><argument_list>(<argument><expr><name>vqp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src2</name> <operator>+=</operator> <name>stride</name><operator>*</operator><literal type="number">3</literal></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOAD_LINE</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>perml##i = vec_lvsl(i * stride, src2); vbA##i = vec_ld(i * stride, src2); vbB##i = vec_ld(i * stride + 16, src2); vbT##i = vec_perm(vbA##i, vbB##i, perml##i); vb##i = (vector signed short)vec_mergeh((vector unsigned char)zero, (vector unsigned char)vbT##i)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOAD_LINE_ALIGNED</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>vbT##i = vec_ld(j##i, src2); vb##i = (vector signed short)vec_mergeh((vector signed char)zero, (vector signed char)vbT##i)</cpp:value></cpp:define>

<if_stmt><if>if <condition>(<expr><name>properStride</name> <operator>&amp;&amp;</operator> <name>srcAlign</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>LOAD_LINE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOAD_LINE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOAD_LINE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOAD_LINE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOAD_LINE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOAD_LINE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOAD_LINE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOAD_LINE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOAD_LINE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOAD_LINE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>LOAD_LINE</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOAD_LINE</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOAD_LINE</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOAD_LINE</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOAD_LINE</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOAD_LINE</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOAD_LINE</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOAD_LINE</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOAD_LINE</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOAD_LINE</name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>LOAD_LINE</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>LOAD_LINE_ALIGNED</name></cpp:undef>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>short</name></type> <name>v_2</name> <init>= <expr><call><name>vec_splat_u16</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>short</name></type> <name>v_4</name> <init>= <expr><call><name>vec_splat_u16</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>v_diff01</name> <init>= <expr><call><name>vec_sub</name><argument_list>(<argument><expr><name>vb0</name></expr></argument>, <argument><expr><name>vb1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>short</name></type> <name>v_cmp01</name> <init>=

<expr><operator>(</operator><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator> <call><name>vec_cmplt</name><argument_list>(<argument><expr><call><name>vec_abs</name><argument_list>(<argument><expr><name>v_diff01</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>vqp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>v_first</name> <init>= <expr><call><name>vec_sel</name><argument_list>(<argument><expr><name>vb1</name></expr></argument>, <argument><expr><name>vb0</name></expr></argument>, <argument><expr><name>v_cmp01</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>v_diff89</name> <init>= <expr><call><name>vec_sub</name><argument_list>(<argument><expr><name>vb8</name></expr></argument>, <argument><expr><name>vb9</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>short</name></type> <name>v_cmp89</name> <init>=

<expr><operator>(</operator><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator> <call><name>vec_cmplt</name><argument_list>(<argument><expr><call><name>vec_abs</name><argument_list>(<argument><expr><name>v_diff89</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>vqp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>v_last</name> <init>= <expr><call><name>vec_sel</name><argument_list>(<argument><expr><name>vb8</name></expr></argument>, <argument><expr><name>vb9</name></expr></argument>, <argument><expr><name>v_cmp89</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>temp01</name> <init>= <expr><call><name>vec_mladd</name><argument_list>(<argument><expr><name>v_first</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>short</name><operator>)</operator><name>v_4</name></expr></argument>, <argument><expr><name>vb1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>temp02</name> <init>= <expr><call><name>vec_add</name><argument_list>(<argument><expr><name>vb2</name></expr></argument>, <argument><expr><name>vb3</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>temp03</name> <init>= <expr><call><name>vec_add</name><argument_list>(<argument><expr><name>temp01</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>short</name><operator>)</operator><name>v_4</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>v_sumsB0</name> <init>= <expr><call><name>vec_add</name><argument_list>(<argument><expr><name>temp02</name></expr></argument>, <argument><expr><name>temp03</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>temp11</name> <init>= <expr><call><name>vec_sub</name><argument_list>(<argument><expr><name>v_sumsB0</name></expr></argument>, <argument><expr><name>v_first</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>v_sumsB1</name> <init>= <expr><call><name>vec_add</name><argument_list>(<argument><expr><name>temp11</name></expr></argument>, <argument><expr><name>vb4</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>temp21</name> <init>= <expr><call><name>vec_sub</name><argument_list>(<argument><expr><name>v_sumsB1</name></expr></argument>, <argument><expr><name>v_first</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>v_sumsB2</name> <init>= <expr><call><name>vec_add</name><argument_list>(<argument><expr><name>temp21</name></expr></argument>, <argument><expr><name>vb5</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>temp31</name> <init>= <expr><call><name>vec_sub</name><argument_list>(<argument><expr><name>v_sumsB2</name></expr></argument>, <argument><expr><name>v_first</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>v_sumsB3</name> <init>= <expr><call><name>vec_add</name><argument_list>(<argument><expr><name>temp31</name></expr></argument>, <argument><expr><name>vb6</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>temp41</name> <init>= <expr><call><name>vec_sub</name><argument_list>(<argument><expr><name>v_sumsB3</name></expr></argument>, <argument><expr><name>v_first</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>v_sumsB4</name> <init>= <expr><call><name>vec_add</name><argument_list>(<argument><expr><name>temp41</name></expr></argument>, <argument><expr><name>vb7</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>temp51</name> <init>= <expr><call><name>vec_sub</name><argument_list>(<argument><expr><name>v_sumsB4</name></expr></argument>, <argument><expr><name>vb1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>v_sumsB5</name> <init>= <expr><call><name>vec_add</name><argument_list>(<argument><expr><name>temp51</name></expr></argument>, <argument><expr><name>vb8</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>temp61</name> <init>= <expr><call><name>vec_sub</name><argument_list>(<argument><expr><name>v_sumsB5</name></expr></argument>, <argument><expr><name>vb2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>v_sumsB6</name> <init>= <expr><call><name>vec_add</name><argument_list>(<argument><expr><name>temp61</name></expr></argument>, <argument><expr><name>v_last</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>temp71</name> <init>= <expr><call><name>vec_sub</name><argument_list>(<argument><expr><name>v_sumsB6</name></expr></argument>, <argument><expr><name>vb3</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>v_sumsB7</name> <init>= <expr><call><name>vec_add</name><argument_list>(<argument><expr><name>temp71</name></expr></argument>, <argument><expr><name>v_last</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>temp81</name> <init>= <expr><call><name>vec_sub</name><argument_list>(<argument><expr><name>v_sumsB7</name></expr></argument>, <argument><expr><name>vb4</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>v_sumsB8</name> <init>= <expr><call><name>vec_add</name><argument_list>(<argument><expr><name>temp81</name></expr></argument>, <argument><expr><name>v_last</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>temp91</name> <init>= <expr><call><name>vec_sub</name><argument_list>(<argument><expr><name>v_sumsB8</name></expr></argument>, <argument><expr><name>vb5</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>v_sumsB9</name> <init>= <expr><call><name>vec_add</name><argument_list>(<argument><expr><name>temp91</name></expr></argument>, <argument><expr><name>v_last</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPUTE_VR</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>j</name></type></parameter>, <parameter><type><name>k</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>const vector signed short temps1##i = vec_add(v_sumsB##i, v_sumsB##k); const vector signed short temps2##i = vec_mladd(vb##j, (vector signed short)v_2, temps1##i); const vector signed short vr##j = vec_sra(temps2##i, v_4)</cpp:value></cpp:define>

<expr_stmt><expr><call><name>COMPUTE_VR</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>COMPUTE_VR</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>COMPUTE_VR</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>COMPUTE_VR</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>COMPUTE_VR</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>COMPUTE_VR</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>COMPUTE_VR</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>COMPUTE_VR</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>signed</name> <name>char</name></type> <name>neg1</name> <init>= <expr><call><name>vec_splat_s8</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>char</name></type> <name>permHH</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><block>{<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x07</literal></expr>,

<expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0x1A</literal></expr>, <expr><literal type="number">0x1B</literal></expr>, <expr><literal type="number">0x1C</literal></expr>, <expr><literal type="number">0x1D</literal></expr>, <expr><literal type="number">0x1E</literal></expr>, <expr><literal type="number">0x1F</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PACK_AND_STORE</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ const vector unsigned char perms##i = vec_lvsr(i * stride, src2); const vector unsigned char vf##i = vec_packsu(vr##i, (vector signed short)zero); const vector unsigned char vg##i = vec_perm(vf##i, vbT##i, permHH); const vector unsigned char mask##i = vec_perm((vector unsigned char)zero, (vector unsigned char)neg1, perms##i); const vector unsigned char vg2##i = vec_perm(vg##i, vg##i, perms##i); const vector unsigned char svA##i = vec_sel(vbA##i, vg2##i, mask##i); const vector unsigned char svB##i = vec_sel(vg2##i, vbB##i, mask##i); vec_st(svA##i, i * stride, src2); vec_st(svB##i, i * stride + 16, src2);}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PACK_AND_STORE_ALIGNED</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ const vector unsigned char vf##i = vec_packsu(vr##i, (vector signed short)zero); const vector unsigned char vg##i = vec_perm(vf##i, vbT##i, permHH); vec_st(vg##i, i * stride, src2);}</cpp:value></cpp:define>

<if_stmt><if>if <condition>(<expr><name>properStride</name> <operator>&amp;&amp;</operator> <name>srcAlign</name></expr>)</condition> <block>{<block_content>

<macro><name>PACK_AND_STORE_ALIGNED</name><argument_list>(<argument><literal type="number">1</literal></argument>)</argument_list></macro>

<macro><name>PACK_AND_STORE_ALIGNED</name><argument_list>(<argument><literal type="number">2</literal></argument>)</argument_list></macro>

<macro><name>PACK_AND_STORE_ALIGNED</name><argument_list>(<argument><literal type="number">3</literal></argument>)</argument_list></macro>

<macro><name>PACK_AND_STORE_ALIGNED</name><argument_list>(<argument><literal type="number">4</literal></argument>)</argument_list></macro>

<macro><name>PACK_AND_STORE_ALIGNED</name><argument_list>(<argument><literal type="number">5</literal></argument>)</argument_list></macro>

<macro><name>PACK_AND_STORE_ALIGNED</name><argument_list>(<argument><literal type="number">6</literal></argument>)</argument_list></macro>

<macro><name>PACK_AND_STORE_ALIGNED</name><argument_list>(<argument><literal type="number">7</literal></argument>)</argument_list></macro>

<macro><name>PACK_AND_STORE_ALIGNED</name><argument_list>(<argument><literal type="number">8</literal></argument>)</argument_list></macro>

</block_content>}</block></if> <else>else <block>{<block_content>

<macro><name>PACK_AND_STORE</name><argument_list>(<argument><literal type="number">1</literal></argument>)</argument_list></macro>

<macro><name>PACK_AND_STORE</name><argument_list>(<argument><literal type="number">2</literal></argument>)</argument_list></macro>

<macro><name>PACK_AND_STORE</name><argument_list>(<argument><literal type="number">3</literal></argument>)</argument_list></macro>

<macro><name>PACK_AND_STORE</name><argument_list>(<argument><literal type="number">4</literal></argument>)</argument_list></macro>

<macro><name>PACK_AND_STORE</name><argument_list>(<argument><literal type="number">5</literal></argument>)</argument_list></macro>

<macro><name>PACK_AND_STORE</name><argument_list>(<argument><literal type="number">6</literal></argument>)</argument_list></macro>

<macro><name>PACK_AND_STORE</name><argument_list>(<argument><literal type="number">7</literal></argument>)</argument_list></macro>

<macro><name>PACK_AND_STORE</name><argument_list>(<argument><literal type="number">8</literal></argument>)</argument_list></macro>

</block_content>}</block></else></if_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PACK_AND_STORE</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PACK_AND_STORE_ALIGNED</name></cpp:undef>

</block_content>}</block>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>doVertDefFilter_altivec</name><parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name><name>src</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>PPContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src2</name> <init>= <expr><name>src</name> <operator>+</operator> <name>stride</name><operator>*</operator><literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>signed</name> <name>int</name></type> <name>zero</name> <init>= <expr><call><name>vec_splat_s32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>short</name></expr></argument>, <argument><expr><name>qp</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">8</literal></expr>]</index> <operator>=</operator> <block>{<expr><literal type="number">8</literal><operator>*</operator><name><name>c</name><operator>-&gt;</operator><name>QP</name></name></expr>}</block></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vector</name> <name>signed</name> <name>short</name></type> <name>vqp</name> <init>= <expr><call><name>vec_splat</name><argument_list>(

<argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>short</name><operator>)</operator><call><name>vec_ld</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>qp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOAD_LINE</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>const vector unsigned char perm##i = vec_lvsl(i * stride, src2); const vector unsigned char vbA##i = vec_ld(i * stride, src2); const vector unsigned char vbB##i = vec_ld(i * stride + 16, src2); const vector unsigned char vbT##i = vec_perm(vbA##i, vbB##i, perm##i); const vector signed short vb##i = (vector signed short)vec_mergeh((vector unsigned char)zero, (vector unsigned char)vbT##i)</cpp:value></cpp:define>

<expr_stmt><expr><call><name>LOAD_LINE</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOAD_LINE</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOAD_LINE</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOAD_LINE</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOAD_LINE</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOAD_LINE</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOAD_LINE</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOAD_LINE</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>LOAD_LINE</name></cpp:undef>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>v_1</name> <init>= <expr><call><name>vec_splat_s16</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>v_2</name> <init>= <expr><call><name>vec_splat_s16</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>v_5</name> <init>= <expr><call><name>vec_splat_s16</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>v_32</name> <init>= <expr><call><name>vec_sl</name><argument_list>(<argument><expr><name>v_1</name></expr></argument>,

<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><name>v_5</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>l3minusl6</name> <init>= <expr><call><name>vec_sub</name><argument_list>(<argument><expr><name>vb3</name></expr></argument>, <argument><expr><name>vb6</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>l5minusl4</name> <init>= <expr><call><name>vec_sub</name><argument_list>(<argument><expr><name>vb5</name></expr></argument>, <argument><expr><name>vb4</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>twotimes_l3minusl6</name> <init>= <expr><call><name>vec_mladd</name><argument_list>(<argument><expr><name>v_2</name></expr></argument>, <argument><expr><name>l3minusl6</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>short</name><operator>)</operator><name>zero</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>mE</name> <init>= <expr><call><name>vec_mladd</name><argument_list>(<argument><expr><name>v_5</name></expr></argument>, <argument><expr><name>l5minusl4</name></expr></argument>, <argument><expr><name>twotimes_l3minusl6</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>absmE</name> <init>= <expr><call><name>vec_abs</name><argument_list>(<argument><expr><name>mE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>l1minusl4</name> <init>= <expr><call><name>vec_sub</name><argument_list>(<argument><expr><name>vb1</name></expr></argument>, <argument><expr><name>vb4</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>l3minusl2</name> <init>= <expr><call><name>vec_sub</name><argument_list>(<argument><expr><name>vb3</name></expr></argument>, <argument><expr><name>vb2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>l5minusl8</name> <init>= <expr><call><name>vec_sub</name><argument_list>(<argument><expr><name>vb5</name></expr></argument>, <argument><expr><name>vb8</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>l7minusl6</name> <init>= <expr><call><name>vec_sub</name><argument_list>(<argument><expr><name>vb7</name></expr></argument>, <argument><expr><name>vb6</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>twotimes_l1minusl4</name> <init>= <expr><call><name>vec_mladd</name><argument_list>(<argument><expr><name>v_2</name></expr></argument>, <argument><expr><name>l1minusl4</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>short</name><operator>)</operator><name>zero</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>twotimes_l5minusl8</name> <init>= <expr><call><name>vec_mladd</name><argument_list>(<argument><expr><name>v_2</name></expr></argument>, <argument><expr><name>l5minusl8</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>short</name><operator>)</operator><name>zero</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>lE</name> <init>= <expr><call><name>vec_mladd</name><argument_list>(<argument><expr><name>v_5</name></expr></argument>, <argument><expr><name>l3minusl2</name></expr></argument>, <argument><expr><name>twotimes_l1minusl4</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>rE</name> <init>= <expr><call><name>vec_mladd</name><argument_list>(<argument><expr><name>v_5</name></expr></argument>, <argument><expr><name>l7minusl6</name></expr></argument>, <argument><expr><name>twotimes_l5minusl8</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>ddiff</name> <init>= <expr><call><name>vec_sub</name><argument_list>(<argument><expr><name>absmE</name></expr></argument>,

<argument><expr><call><name>vec_min</name><argument_list>(<argument><expr><call><name>vec_abs</name><argument_list>(<argument><expr><name>lE</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>vec_abs</name><argument_list>(<argument><expr><name>rE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>ddiffclamp</name> <init>= <expr><call><name>vec_max</name><argument_list>(<argument><expr><name>ddiff</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>short</name><operator>)</operator><name>zero</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>dtimes64</name> <init>= <expr><call><name>vec_mladd</name><argument_list>(<argument><expr><name>v_5</name></expr></argument>, <argument><expr><name>ddiffclamp</name></expr></argument>, <argument><expr><name>v_32</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>d</name> <init>= <expr><call><name>vec_sra</name><argument_list>(<argument><expr><name>dtimes64</name></expr></argument>, <argument><expr><call><name>vec_splat_u16</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>minusd</name> <init>= <expr><call><name>vec_sub</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>short</name><operator>)</operator><name>zero</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>finald</name> <init>= <expr><call><name>vec_sel</name><argument_list>(<argument><expr><name>minusd</name></expr></argument>,

<argument><expr><name>d</name></expr></argument>,

<argument><expr><call><name>vec_cmpgt</name><argument_list>(<argument><expr><call><name>vec_sub</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>short</name><operator>)</operator><name>zero</name></expr></argument>, <argument><expr><name>mE</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>short</name><operator>)</operator><name>zero</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>qtimes2</name> <init>= <expr><call><name>vec_sub</name><argument_list>(<argument><expr><name>vb4</name></expr></argument>, <argument><expr><name>vb5</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>rounddown</name> <init>= <expr><call><name>vec_sel</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>short</name><operator>)</operator><name>zero</name></expr></argument>,

<argument><expr><name>v_1</name></expr></argument>,

<argument><expr><call><name>vec_cmplt</name><argument_list>(<argument><expr><name>qtimes2</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>short</name><operator>)</operator><name>zero</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>q</name> <init>= <expr><call><name>vec_sra</name><argument_list>(<argument><expr><call><name>vec_add</name><argument_list>(<argument><expr><name>qtimes2</name></expr></argument>, <argument><expr><name>rounddown</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>vec_splat_u16</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>dclamp_P1</name> <init>= <expr><call><name>vec_max</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>short</name><operator>)</operator><name>zero</name></expr></argument>, <argument><expr><name>finald</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>dclamp_P</name> <init>= <expr><call><name>vec_min</name><argument_list>(<argument><expr><name>dclamp_P1</name></expr></argument>, <argument><expr><name>q</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>dclamp_N1</name> <init>= <expr><call><name>vec_min</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>short</name><operator>)</operator><name>zero</name></expr></argument>, <argument><expr><name>finald</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>dclamp_N</name> <init>= <expr><call><name>vec_max</name><argument_list>(<argument><expr><name>dclamp_N1</name></expr></argument>, <argument><expr><name>q</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>dclampedfinal</name> <init>= <expr><call><name>vec_sel</name><argument_list>(<argument><expr><name>dclamp_N</name></expr></argument>,

<argument><expr><name>dclamp_P</name></expr></argument>,

<argument><expr><call><name>vec_cmpgt</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>short</name><operator>)</operator><name>zero</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>dornotd</name> <init>= <expr><call><name>vec_sel</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>short</name><operator>)</operator><name>zero</name></expr></argument>,

<argument><expr><name>dclampedfinal</name></expr></argument>,

<argument><expr><call><name>vec_cmplt</name><argument_list>(<argument><expr><name>absmE</name></expr></argument>, <argument><expr><name>vqp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>vb4minusd</name> <init>= <expr><call><name>vec_sub</name><argument_list>(<argument><expr><name>vb4</name></expr></argument>, <argument><expr><name>dornotd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>vb5plusd</name> <init>= <expr><call><name>vec_add</name><argument_list>(<argument><expr><name>vb5</name></expr></argument>, <argument><expr><name>dornotd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>char</name></type> <name>st4</name> <init>= <expr><call><name>vec_packsu</name><argument_list>(<argument><expr><name>vb4minusd</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>short</name><operator>)</operator><name>zero</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>char</name></type> <name>st5</name> <init>= <expr><call><name>vec_packsu</name><argument_list>(<argument><expr><name>vb5plusd</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>short</name><operator>)</operator><name>zero</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>signed</name> <name>char</name></type> <name>neg1</name> <init>= <expr><call><name>vec_splat_s8</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>char</name></type> <name>permHH</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><block>{<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x07</literal></expr>,

<expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0x1A</literal></expr>, <expr><literal type="number">0x1B</literal></expr>, <expr><literal type="number">0x1C</literal></expr>, <expr><literal type="number">0x1D</literal></expr>, <expr><literal type="number">0x1E</literal></expr>, <expr><literal type="number">0x1F</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STORE</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ const vector unsigned char perms##i = vec_lvsr(i * stride, src2); const vector unsigned char vg##i = vec_perm(st##i, vbT##i, permHH); const vector unsigned char mask##i = vec_perm((vector unsigned char)zero, (vector unsigned char)neg1, perms##i); const vector unsigned char vg2##i = vec_perm(vg##i, vg##i, perms##i); const vector unsigned char svA##i = vec_sel(vbA##i, vg2##i, mask##i); const vector unsigned char svB##i = vec_sel(vg2##i, vbB##i, mask##i); vec_st(svA##i, i * stride, src2); vec_st(svB##i, i * stride + 16, src2);}</cpp:value></cpp:define>

<macro><name>STORE</name><argument_list>(<argument><literal type="number">4</literal></argument>)</argument_list></macro>

<macro><name>STORE</name><argument_list>(<argument><literal type="number">5</literal></argument>)</argument_list></macro>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>dering_altivec</name><parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name><name>src</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>PPContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>signed</name> <name>int</name></type> <name>vsint32_8</name> <init>= <expr><call><name>vec_splat_s32</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>int</name></type> <name>vuint32_4</name> <init>= <expr><call><name>vec_splat_u32</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>signed</name> <name>char</name></type> <name>neg1</name> <init>= <expr><call><name>vec_splat_s8</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>char</name></type> <name>permA1</name> <init>= <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator>

<block>{<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x1F</literal></expr>, <expr><literal type="number">0x1F</literal></expr>,

<expr><literal type="number">0x1F</literal></expr>, <expr><literal type="number">0x1F</literal></expr>, <expr><literal type="number">0x1F</literal></expr>, <expr><literal type="number">0x1F</literal></expr>, <expr><literal type="number">0x1F</literal></expr>, <expr><literal type="number">0x1F</literal></expr>, <expr><literal type="number">0x1F</literal></expr>, <expr><literal type="number">0x1F</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>char</name></type> <name>permA2</name> <init>= <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator>

<block>{<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x11</literal></expr>,

<expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x1F</literal></expr>, <expr><literal type="number">0x1F</literal></expr>, <expr><literal type="number">0x1F</literal></expr>, <expr><literal type="number">0x1F</literal></expr>, <expr><literal type="number">0x1F</literal></expr>, <expr><literal type="number">0x1F</literal></expr>, <expr><literal type="number">0x1F</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>char</name></type> <name>permA1inc</name> <init>= <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator>

<block>{<expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>,

<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>char</name></type> <name>permA2inc</name> <init>= <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator>

<block>{<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>,

<expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>char</name></type> <name>magic</name> <init>= <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator>

<block>{<expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>,

<expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>char</name></type> <name>extractPerm</name> <init>= <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator>

<block>{<expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x01</literal></expr>,

<expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x01</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>char</name></type> <name>extractPermInc</name> <init>= <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator>

<block>{<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>,

<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>char</name></type> <name>identity</name> <init>= <expr><call><name>vec_lvsl</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>char</name></type> <name>tenRight</name> <init>= <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator>

<block>{<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>,

<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>char</name></type> <name>eightLeft</name> <init>= <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator>

<block>{<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>,

<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x08</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>srcCopy</name> <init>= <expr><name>src</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>dt</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">16</literal></expr>]</index> <operator>=</operator> <block>{ <expr><name>deringThreshold</name></expr> }</block></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>signed</name> <name>int</name></type> <name>zero</name> <init>= <expr><call><name>vec_splat_s32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>v_dt</name> <init>= <expr><call><name>vec_splat</name><argument_list>(<argument><expr><call><name>vec_ld</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dt</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOAD_LINE</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>const vector unsigned char perm##i = vec_lvsl(i * stride, srcCopy); vector unsigned char sA##i = vec_ld(i * stride, srcCopy); vector unsigned char sB##i = vec_ld(i * stride + 16, srcCopy); vector unsigned char src##i = vec_perm(sA##i, sB##i, perm##i)</cpp:value></cpp:define>

<expr_stmt><expr><call><name>LOAD_LINE</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOAD_LINE</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOAD_LINE</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOAD_LINE</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOAD_LINE</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOAD_LINE</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOAD_LINE</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOAD_LINE</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOAD_LINE</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOAD_LINE</name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>LOAD_LINE</name></cpp:undef>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>v_avg</name></decl>;</decl_stmt>

<macro><name>DECLARE_ALIGNED</name><argument_list>(<argument><literal type="number">16</literal></argument>, <argument>signed int</argument>, <argument>S</argument>)</argument_list></macro><expr_stmt><expr><index>[<expr><literal type="number">8</literal></expr>]</index></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><name>tQP2</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">4</literal></expr>]</index> <operator>=</operator> <block>{ <expr><name><name>c</name><operator>-&gt;</operator><name>QP</name></name><operator>/</operator><literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr> }</block></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>vQP2</name> <init>= <expr><call><name>vec_ld</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>tQP2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>vQP2</name> <operator>=</operator> <call><name>vec_splat</name><argument_list>(<argument><expr><name>vQP2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>char</name></type> <name>trunc_perm</name> <init>= <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator>

<block>{<expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x08</literal></expr>,

<expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x18</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>char</name></type> <name>trunc_src12</name> <init>= <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>trunc_perm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>char</name></type> <name>trunc_src34</name> <init>= <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>, <argument><expr><name>trunc_perm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>char</name></type> <name>trunc_src56</name> <init>= <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>src5</name></expr></argument>, <argument><expr><name>src6</name></expr></argument>, <argument><expr><name>trunc_perm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>char</name></type> <name>trunc_src78</name> <init>= <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>src7</name></expr></argument>, <argument><expr><name>src8</name></expr></argument>, <argument><expr><name>trunc_perm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXTRACT</name><parameter_list>(<parameter><type><name>op</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { const vector unsigned char s_1 = vec_##op(trunc_src12, trunc_src34); const vector unsigned char s_2 = vec_##op(trunc_src56, trunc_src78); const vector unsigned char s_6 = vec_##op(s_1, s_2); const vector unsigned char s_8h = vec_mergeh(s_6, s_6); const vector unsigned char s_8l = vec_mergel(s_6, s_6); const vector unsigned char s_9 = vec_##op(s_8h, s_8l); const vector unsigned char s_9h = vec_mergeh(s_9, s_9); const vector unsigned char s_9l = vec_mergel(s_9, s_9); const vector unsigned char s_10 = vec_##op(s_9h, s_9l); const vector unsigned char s_10h = vec_mergeh(s_10, s_10); const vector unsigned char s_10l = vec_mergel(s_10, s_10); const vector unsigned char s_11 = vec_##op(s_10h, s_10l); const vector unsigned char s_11h = vec_mergeh(s_11, s_11); const vector unsigned char s_11l = vec_mergel(s_11, s_11); v_##op = vec_##op(s_11h, s_11l); } while (0)</cpp:value></cpp:define>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>v_min</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>v_max</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>EXTRACT</name><argument_list>(<argument><expr><name>min</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXTRACT</name><argument_list>(<argument><expr><name>max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>EXTRACT</name></cpp:undef>

<if_stmt><if>if <condition>(<expr><call><name>vec_all_lt</name><argument_list>(<argument><expr><call><name>vec_sub</name><argument_list>(<argument><expr><name>v_max</name></expr></argument>, <argument><expr><name>v_min</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>v_dt</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>v_avg</name> <operator>=</operator> <call><name>vec_avg</name><argument_list>(<argument><expr><name>v_min</name></expr></argument>, <argument><expr><name>v_max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>short</name></type> <name>mask1</name> <init>= <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator>

<block>{<expr><literal type="number">0x0001</literal></expr>, <expr><literal type="number">0x0002</literal></expr>, <expr><literal type="number">0x0004</literal></expr>, <expr><literal type="number">0x0008</literal></expr>,

<expr><literal type="number">0x0010</literal></expr>, <expr><literal type="number">0x0020</literal></expr>, <expr><literal type="number">0x0040</literal></expr>, <expr><literal type="number">0x0080</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>short</name></type> <name>mask2</name> <init>= <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator>

<block>{<expr><literal type="number">0x0100</literal></expr>, <expr><literal type="number">0x0200</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>,

<expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>int</name></type> <name>vuint32_16</name> <init>= <expr><call><name>vec_sl</name><argument_list>(<argument><expr><call><name>vec_splat_u32</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>vec_splat_u32</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>int</name></type> <name>vuint32_1</name> <init>= <expr><call><name>vec_splat_u32</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>sumA2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>sumB2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>sum0</name></decl>, <decl><type ref="prev"/><name>sum1</name></decl>, <decl><type ref="prev"/><name>sum2</name></decl>, <decl><type ref="prev"/><name>sum3</name></decl>, <decl><type ref="prev"/><name>sum4</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>sum5</name></decl>, <decl><type ref="prev"/><name>sum6</name></decl>, <decl><type ref="prev"/><name>sum7</name></decl>, <decl><type ref="prev"/><name>sum8</name></decl>, <decl><type ref="prev"/><name>sum9</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPARE</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { const vector unsigned char cmp = (vector unsigned char)vec_cmpgt(src##i, v_avg); const vector unsigned short cmpHi = (vector unsigned short)vec_mergeh(cmp, cmp); const vector unsigned short cmpLi = (vector unsigned short)vec_mergel(cmp, cmp); const vector signed short cmpHf = (vector signed short)vec_and(cmpHi, mask1); const vector signed short cmpLf = (vector signed short)vec_and(cmpLi, mask2); const vector signed int sump = vec_sum4s(cmpHf, zero); const vector signed int sumq = vec_sum4s(cmpLf, sump); sum##i = vec_sums(sumq, zero); } while (0)</cpp:value></cpp:define>

<expr_stmt><expr><call><name>COMPARE</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>COMPARE</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>COMPARE</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>COMPARE</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>COMPARE</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>COMPARE</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>COMPARE</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>COMPARE</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>COMPARE</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>COMPARE</name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>COMPARE</name></cpp:undef>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>signed</name> <name>int</name></type> <name>sump02</name> <init>= <expr><call><name>vec_mergel</name><argument_list>(<argument><expr><name>sum0</name></expr></argument>, <argument><expr><name>sum2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>signed</name> <name>int</name></type> <name>sump13</name> <init>= <expr><call><name>vec_mergel</name><argument_list>(<argument><expr><name>sum1</name></expr></argument>, <argument><expr><name>sum3</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>signed</name> <name>int</name></type> <name>sumA</name> <init>= <expr><call><name>vec_mergel</name><argument_list>(<argument><expr><name>sump02</name></expr></argument>, <argument><expr><name>sump13</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>signed</name> <name>int</name></type> <name>sump46</name> <init>= <expr><call><name>vec_mergel</name><argument_list>(<argument><expr><name>sum4</name></expr></argument>, <argument><expr><name>sum6</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>signed</name> <name>int</name></type> <name>sump57</name> <init>= <expr><call><name>vec_mergel</name><argument_list>(<argument><expr><name>sum5</name></expr></argument>, <argument><expr><name>sum7</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>signed</name> <name>int</name></type> <name>sumB</name> <init>= <expr><call><name>vec_mergel</name><argument_list>(<argument><expr><name>sump46</name></expr></argument>, <argument><expr><name>sump57</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>signed</name> <name>int</name></type> <name>sump8A</name> <init>= <expr><call><name>vec_mergel</name><argument_list>(<argument><expr><name>sum8</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>signed</name> <name>int</name></type> <name>sump9B</name> <init>= <expr><call><name>vec_mergel</name><argument_list>(<argument><expr><name>sum9</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>signed</name> <name>int</name></type> <name>sumC</name> <init>= <expr><call><name>vec_mergel</name><argument_list>(<argument><expr><name>sump8A</name></expr></argument>, <argument><expr><name>sump9B</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>signed</name> <name>int</name></type> <name>tA</name> <init>= <expr><call><name>vec_sl</name><argument_list>(<argument><expr><call><name>vec_nor</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>sumA</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>vuint32_16</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>signed</name> <name>int</name></type> <name>tB</name> <init>= <expr><call><name>vec_sl</name><argument_list>(<argument><expr><call><name>vec_nor</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>sumB</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>vuint32_16</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>signed</name> <name>int</name></type> <name>tC</name> <init>= <expr><call><name>vec_sl</name><argument_list>(<argument><expr><call><name>vec_nor</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>sumC</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>vuint32_16</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>signed</name> <name>int</name></type> <name>t2A</name> <init>= <expr><call><name>vec_or</name><argument_list>(<argument><expr><name>sumA</name></expr></argument>, <argument><expr><name>tA</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>signed</name> <name>int</name></type> <name>t2B</name> <init>= <expr><call><name>vec_or</name><argument_list>(<argument><expr><name>sumB</name></expr></argument>, <argument><expr><name>tB</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>signed</name> <name>int</name></type> <name>t2C</name> <init>= <expr><call><name>vec_or</name><argument_list>(<argument><expr><name>sumC</name></expr></argument>, <argument><expr><name>tC</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>signed</name> <name>int</name></type> <name>t3A</name> <init>= <expr><call><name>vec_and</name><argument_list>(<argument><expr><call><name>vec_sra</name><argument_list>(<argument><expr><name>t2A</name></expr></argument>, <argument><expr><name>vuint32_1</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>vec_sl</name><argument_list>(<argument><expr><name>t2A</name></expr></argument>, <argument><expr><name>vuint32_1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>signed</name> <name>int</name></type> <name>t3B</name> <init>= <expr><call><name>vec_and</name><argument_list>(<argument><expr><call><name>vec_sra</name><argument_list>(<argument><expr><name>t2B</name></expr></argument>, <argument><expr><name>vuint32_1</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>vec_sl</name><argument_list>(<argument><expr><name>t2B</name></expr></argument>, <argument><expr><name>vuint32_1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>signed</name> <name>int</name></type> <name>t3C</name> <init>= <expr><call><name>vec_and</name><argument_list>(<argument><expr><call><name>vec_sra</name><argument_list>(<argument><expr><name>t2C</name></expr></argument>, <argument><expr><name>vuint32_1</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>vec_sl</name><argument_list>(<argument><expr><name>t2C</name></expr></argument>, <argument><expr><name>vuint32_1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>signed</name> <name>int</name></type> <name>yA</name> <init>= <expr><call><name>vec_and</name><argument_list>(<argument><expr><name>t2A</name></expr></argument>, <argument><expr><name>t3A</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>signed</name> <name>int</name></type> <name>yB</name> <init>= <expr><call><name>vec_and</name><argument_list>(<argument><expr><name>t2B</name></expr></argument>, <argument><expr><name>t3B</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>signed</name> <name>int</name></type> <name>yC</name> <init>= <expr><call><name>vec_and</name><argument_list>(<argument><expr><name>t2C</name></expr></argument>, <argument><expr><name>t3C</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>char</name></type> <name>strangeperm1</name> <init>= <expr><call><name>vec_lvsl</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>char</name></type> <name>strangeperm2</name> <init>= <expr><call><name>vec_lvsl</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>signed</name> <name>int</name></type> <name>sumAd4</name> <init>= <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>yA</name></expr></argument>, <argument><expr><name>yB</name></expr></argument>, <argument><expr><name>strangeperm1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>signed</name> <name>int</name></type> <name>sumAd8</name> <init>= <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>yA</name></expr></argument>, <argument><expr><name>yB</name></expr></argument>, <argument><expr><name>strangeperm2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>signed</name> <name>int</name></type> <name>sumBd4</name> <init>= <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>yB</name></expr></argument>, <argument><expr><name>yC</name></expr></argument>, <argument><expr><name>strangeperm1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>signed</name> <name>int</name></type> <name>sumBd8</name> <init>= <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>yB</name></expr></argument>, <argument><expr><name>yC</name></expr></argument>, <argument><expr><name>strangeperm2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>signed</name> <name>int</name></type> <name>sumAp</name> <init>= <expr><call><name>vec_and</name><argument_list>(<argument><expr><name>yA</name></expr></argument>,

<argument><expr><call><name>vec_and</name><argument_list>(<argument><expr><name>sumAd4</name></expr></argument>,<argument><expr><name>sumAd8</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>signed</name> <name>int</name></type> <name>sumBp</name> <init>= <expr><call><name>vec_and</name><argument_list>(<argument><expr><name>yB</name></expr></argument>,

<argument><expr><call><name>vec_and</name><argument_list>(<argument><expr><name>sumBd4</name></expr></argument>,<argument><expr><name>sumBd8</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>sumA2</name> <operator>=</operator> <call><name>vec_or</name><argument_list>(<argument><expr><name>sumAp</name></expr></argument>,

<argument><expr><call><name>vec_sra</name><argument_list>(<argument><expr><name>sumAp</name></expr></argument>,

<argument><expr><name>vuint32_16</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sumB2</name> <operator>=</operator> <call><name>vec_or</name><argument_list>(<argument><expr><name>sumBp</name></expr></argument>,

<argument><expr><call><name>vec_sra</name><argument_list>(<argument><expr><name>sumBp</name></expr></argument>,

<argument><expr><name>vuint32_16</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>vec_st</name><argument_list>(<argument><expr><name>sumA2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>S</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vec_st</name><argument_list>(<argument><expr><name>sumB2</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>S</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_INIT</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>vector unsigned char tenRightM = tenRight; vector unsigned char permA1M = permA1; vector unsigned char permA2M = permA2; vector unsigned char extractPermM = extractPerm</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F2</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>j</name></type></parameter>, <parameter><type><name>k</name></type></parameter>, <parameter><type><name>l</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (S[i] &amp; (1 &lt;&lt; (l+1))) { const vector unsigned char a_A = vec_perm(src##i, src##j, permA1M); const vector unsigned char a_B = vec_perm(a_A, src##k, permA2M); const vector signed int a_sump = (vector signed int)vec_msum(a_B, magic, (vector unsigned int)zero);vector signed int F = vec_sr(vec_sums(a_sump, vsint32_8), vuint32_4); const vector signed int p = (vector signed int)vec_perm(src##j, (vector unsigned char)zero, extractPermM); const vector signed int sum = vec_add(p, vQP2); const vector signed int diff = vec_sub(p, vQP2); vector signed int newpm; vector unsigned char newpm2, mask; F = vec_splat(F, 3); if (vec_all_lt(sum, F)) newpm = sum; else if (vec_all_gt(diff, F)) newpm = diff; else newpm = F; newpm2 = vec_splat((vector unsigned char)newpm, 15); mask = vec_add(identity, tenRightM); src##j = vec_perm(src##j, newpm2, mask); } permA1M = vec_add(permA1M, permA1inc); permA2M = vec_add(permA2M, permA2inc); tenRightM = vec_sro(tenRightM, eightLeft); extractPermM = vec_add(extractPermM, extractPermInc)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ITER</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>j</name></type></parameter>, <parameter><type><name>k</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { F_INIT(); F2(i, j, k, 0); F2(i, j, k, 1); F2(i, j, k, 2); F2(i, j, k, 3); F2(i, j, k, 4); F2(i, j, k, 5); F2(i, j, k, 6); F2(i, j, k, 7); } while (0)</cpp:value></cpp:define>

<expr_stmt><expr><call><name>ITER</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ITER</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ITER</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ITER</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ITER</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ITER</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ITER</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ITER</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STORE_LINE</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { const vector unsigned char permST = vec_lvsr(i * stride, srcCopy); const vector unsigned char maskST = vec_perm((vector unsigned char)zero, (vector unsigned char)neg1, permST); src##i = vec_perm(src##i ,src##i, permST); sA##i= vec_sel(sA##i, src##i, maskST); sB##i= vec_sel(src##i, sB##i, maskST); vec_st(sA##i, i * stride, srcCopy); vec_st(sB##i, i * stride + 16, srcCopy); } while (0)</cpp:value></cpp:define>

<expr_stmt><expr><call><name>STORE_LINE</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STORE_LINE</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STORE_LINE</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STORE_LINE</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STORE_LINE</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STORE_LINE</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STORE_LINE</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STORE_LINE</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>STORE_LINE</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ITER</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>F2</name></cpp:undef>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>doHorizLowPass_altivec</name><parameter_list>(<parameter><type><name>a</name><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>doHorizLowPass_C(a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>doHorizDefFilter_altivec</name><parameter_list>(<parameter><type><name>a</name><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>doHorizDefFilter_C(a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>do_a_deblock_altivec</name><parameter_list>(<parameter><type><name>a</name><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do_a_deblock_C(a)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>tempNoiseReducer_altivec</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>tempBlurred</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>tempBlurredPast</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>maxNoise</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>signed</name> <name>char</name></type> <name>neg1</name> <init>= <expr><call><name>vec_splat_s8</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>char</name></type> <name>permHH</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><block>{<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x07</literal></expr>,

<expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0x1A</literal></expr>, <expr><literal type="number">0x1B</literal></expr>, <expr><literal type="number">0x1C</literal></expr>, <expr><literal type="number">0x1D</literal></expr>, <expr><literal type="number">0x1E</literal></expr>, <expr><literal type="number">0x1F</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>signed</name> <name>int</name></type> <name>zero</name> <init>= <expr><call><name>vec_splat_s32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>vsint16_1</name> <init>= <expr><call><name>vec_splat_s16</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>v_dp</name> <init>= <expr><name>zero</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>v_sysdp</name> <init>= <expr><name>zero</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>d</name></decl>, <decl><type ref="prev"/><name>sysd</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOAD_LINE</name><parameter_list>(<parameter><type><name>src</name></type></parameter>, <parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>register int j##src##i = i * stride; vector unsigned char perm##src##i = vec_lvsl(j##src##i, src); const vector unsigned char v_##src##A1##i = vec_ld(j##src##i, src); const vector unsigned char v_##src##A2##i = vec_ld(j##src##i + 16, src); const vector unsigned char v_##src##A##i = vec_perm(v_##src##A1##i, v_##src##A2##i, perm##src##i); vector signed short v_##src##Ass##i = (vector signed short)vec_mergeh((vector signed char)zero, (vector signed char)v_##src##A##i)</cpp:value></cpp:define>

<expr_stmt><expr><call><name>LOAD_LINE</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOAD_LINE</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOAD_LINE</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOAD_LINE</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOAD_LINE</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOAD_LINE</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOAD_LINE</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOAD_LINE</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOAD_LINE</name><argument_list>(<argument><expr><name>tempBlurred</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOAD_LINE</name><argument_list>(<argument><expr><name>tempBlurred</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOAD_LINE</name><argument_list>(<argument><expr><name>tempBlurred</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOAD_LINE</name><argument_list>(<argument><expr><name>tempBlurred</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOAD_LINE</name><argument_list>(<argument><expr><name>tempBlurred</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOAD_LINE</name><argument_list>(<argument><expr><name>tempBlurred</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOAD_LINE</name><argument_list>(<argument><expr><name>tempBlurred</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOAD_LINE</name><argument_list>(<argument><expr><name>tempBlurred</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>LOAD_LINE</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ACCUMULATE_DIFFS</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { vector signed short v_d = vec_sub(v_tempBlurredAss##i, v_srcAss##i); v_dp = vec_msums(v_d, v_d, v_dp); v_sysdp = vec_msums(v_d, vsint16_1, v_sysdp); } while (0)</cpp:value></cpp:define>

<expr_stmt><expr><call><name>ACCUMULATE_DIFFS</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ACCUMULATE_DIFFS</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ACCUMULATE_DIFFS</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ACCUMULATE_DIFFS</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ACCUMULATE_DIFFS</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ACCUMULATE_DIFFS</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ACCUMULATE_DIFFS</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ACCUMULATE_DIFFS</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ACCUMULATE_DIFFS</name></cpp:undef>

<expr_stmt><expr><name><name>tempBlurredPast</name><index>[<expr><literal type="number">127</literal></expr>]</index></name><operator>=</operator> <name><name>maxNoise</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tempBlurredPast</name><index>[<expr><literal type="number">128</literal></expr>]</index></name><operator>=</operator> <name><name>maxNoise</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tempBlurredPast</name><index>[<expr><literal type="number">129</literal></expr>]</index></name><operator>=</operator> <name><name>maxNoise</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>v_dp</name> <operator>=</operator> <call><name>vec_sums</name><argument_list>(<argument><expr><name>v_dp</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>v_sysdp</name> <operator>=</operator> <call><name>vec_sums</name><argument_list>(<argument><expr><name>v_sysdp</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>v_dp</name> <operator>=</operator> <call><name>vec_splat</name><argument_list>(<argument><expr><name>v_dp</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>v_sysdp</name> <operator>=</operator> <call><name>vec_splat</name><argument_list>(<argument><expr><name>v_sysdp</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vec_ste</name><argument_list>(<argument><expr><name>v_dp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vec_ste</name><argument_list>(<argument><expr><name>v_sysdp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>sysd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <operator>(</operator><literal type="number">4</literal><operator>*</operator><name>d</name>

<operator>+</operator><operator>(</operator><operator>*</operator><operator>(</operator><name>tempBlurredPast</name><operator>-</operator><literal type="number">256</literal><operator>)</operator><operator>)</operator>

<operator>+</operator><operator>(</operator><operator>*</operator><operator>(</operator><name>tempBlurredPast</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>+</operator> <operator>(</operator><operator>*</operator><operator>(</operator><name>tempBlurredPast</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator>

<operator>+</operator><operator>(</operator><operator>*</operator><operator>(</operator><name>tempBlurredPast</name><operator>+</operator><literal type="number">256</literal><operator>)</operator><operator>)</operator>

<operator>+</operator><literal type="number">4</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>tempBlurredPast</name><operator>=</operator><name>i</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>d</name> <operator>&gt;</operator> <name><name>maxNoise</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>d</name> <operator>&lt;</operator> <name><name>maxNoise</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>v_tempBlurredAss##i = vec_avg(v_tempBlurredAss##i, v_srcAss##i);</cpp:value></cpp:define>

<expr_stmt><expr><call><name>OP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OP</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OP</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OP</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OP</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OP</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OP</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OP</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>OP</name></cpp:undef>

</block_content>}</block></if> <else>else <block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>v_tempBlurredAss##i = v_srcAss##i;</cpp:value></cpp:define>

<expr_stmt><expr><call><name>OP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OP</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OP</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OP</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OP</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OP</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OP</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OP</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>OP</name></cpp:undef>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>d</name> <operator>&lt;</operator> <name><name>maxNoise</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>vsint16_7</name> <init>= <expr><call><name>vec_splat_s16</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>vsint16_4</name> <init>= <expr><call><name>vec_splat_s16</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>short</name></type> <name>vuint16_3</name> <init>= <expr><call><name>vec_splat_u16</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { const vector signed short v_temp = vec_mladd(v_tempBlurredAss##i, vsint16_7, v_srcAss##i); const vector signed short v_temp2 = vec_add(v_temp, vsint16_4); v_tempBlurredAss##i = vec_sr(v_temp2, vuint16_3); } while (0)</cpp:value></cpp:define>

<expr_stmt><expr><call><name>OP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OP</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OP</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OP</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OP</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OP</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OP</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OP</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>OP</name></cpp:undef>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>vsint16_3</name> <init>= <expr><call><name>vec_splat_s16</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>vsint16_2</name> <init>= <expr><call><name>vec_splat_s16</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { const vector signed short v_temp = vec_mladd(v_tempBlurredAss##i, vsint16_3, v_srcAss##i); const vector signed short v_temp2 = vec_add(v_temp, vsint16_2); v_tempBlurredAss##i = vec_sr(v_temp2, (vector unsigned short)vsint16_2); } while (0)</cpp:value></cpp:define>

<expr_stmt><expr><call><name>OP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OP</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OP</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OP</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OP</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OP</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OP</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OP</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>OP</name></cpp:undef>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PACK_AND_STORE</name><parameter_list>(<parameter><type><name>src</name></type></parameter>, <parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { const vector unsigned char perms = vec_lvsr(i * stride, src); const vector unsigned char vf = vec_packsu(v_tempBlurredAss##1, (vector signed short)zero); const vector unsigned char vg = vec_perm(vf, v_##src##A##i, permHH); const vector unsigned char mask = vec_perm((vector unsigned char)zero, (vector unsigned char)neg1, perms); const vector unsigned char vg2 = vec_perm(vg, vg, perms); const vector unsigned char svA = vec_sel(v_##src##A1##i, vg2, mask); const vector unsigned char svB = vec_sel(vg2, v_##src##A2##i, mask); vec_st(svA, i * stride, src); vec_st(svB, i * stride + 16, src); } while (0)</cpp:value></cpp:define>

<expr_stmt><expr><call><name>PACK_AND_STORE</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PACK_AND_STORE</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PACK_AND_STORE</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PACK_AND_STORE</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PACK_AND_STORE</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PACK_AND_STORE</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PACK_AND_STORE</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PACK_AND_STORE</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PACK_AND_STORE</name><argument_list>(<argument><expr><name>tempBlurred</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PACK_AND_STORE</name><argument_list>(<argument><expr><name>tempBlurred</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PACK_AND_STORE</name><argument_list>(<argument><expr><name>tempBlurred</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PACK_AND_STORE</name><argument_list>(<argument><expr><name>tempBlurred</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PACK_AND_STORE</name><argument_list>(<argument><expr><name>tempBlurred</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PACK_AND_STORE</name><argument_list>(<argument><expr><name>tempBlurred</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PACK_AND_STORE</name><argument_list>(<argument><expr><name>tempBlurred</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PACK_AND_STORE</name><argument_list>(<argument><expr><name>tempBlurred</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PACK_AND_STORE</name></cpp:undef>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>transpose_16x8_char_toPackedAlign_altivec</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>char</name></type> <name>zero</name> <init>= <expr><call><name>vec_splat_u8</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOAD_DOUBLE_LINE</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>j</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>vector unsigned char perm1##i = vec_lvsl(i * stride, src); vector unsigned char perm2##i = vec_lvsl(j * stride, src); vector unsigned char srcA##i = vec_ld(i * stride, src); vector unsigned char srcB##i = vec_ld(i * stride + 16, src); vector unsigned char srcC##i = vec_ld(j * stride, src); vector unsigned char srcD##i = vec_ld(j * stride+ 16, src); vector unsigned char src##i = vec_perm(srcA##i, srcB##i, perm1##i); vector unsigned char src##j = vec_perm(srcC##i, srcD##i, perm2##i)</cpp:value></cpp:define>

<expr_stmt><expr><call><name>LOAD_DOUBLE_LINE</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOAD_DOUBLE_LINE</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOAD_DOUBLE_LINE</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOAD_DOUBLE_LINE</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>LOAD_DOUBLE_LINE</name></cpp:undef>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>tempA</name> <init>= <expr><call><name>vec_mergeh</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>tempB</name> <init>= <expr><call><name>vec_mergel</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>tempC</name> <init>= <expr><call><name>vec_mergeh</name><argument_list>(<argument><expr><name>src1</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>tempD</name> <init>= <expr><call><name>vec_mergel</name><argument_list>(<argument><expr><name>src1</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>tempE</name> <init>= <expr><call><name>vec_mergeh</name><argument_list>(<argument><expr><name>src2</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>tempF</name> <init>= <expr><call><name>vec_mergel</name><argument_list>(<argument><expr><name>src2</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>tempG</name> <init>= <expr><call><name>vec_mergeh</name><argument_list>(<argument><expr><name>src3</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>tempH</name> <init>= <expr><call><name>vec_mergel</name><argument_list>(<argument><expr><name>src3</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>tempI</name> <init>= <expr><call><name>vec_mergeh</name><argument_list>(<argument><expr><name>src4</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>tempJ</name> <init>= <expr><call><name>vec_mergel</name><argument_list>(<argument><expr><name>src4</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>tempK</name> <init>= <expr><call><name>vec_mergeh</name><argument_list>(<argument><expr><name>src5</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>tempL</name> <init>= <expr><call><name>vec_mergel</name><argument_list>(<argument><expr><name>src5</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>tempM</name> <init>= <expr><call><name>vec_mergeh</name><argument_list>(<argument><expr><name>src6</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>tempN</name> <init>= <expr><call><name>vec_mergel</name><argument_list>(<argument><expr><name>src6</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>tempO</name> <init>= <expr><call><name>vec_mergeh</name><argument_list>(<argument><expr><name>src7</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>tempP</name> <init>= <expr><call><name>vec_mergel</name><argument_list>(<argument><expr><name>src7</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>temp0</name> <init>= <expr><call><name>vec_mergeh</name><argument_list>(<argument><expr><name>tempA</name></expr></argument>, <argument><expr><name>tempI</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>temp1</name> <init>= <expr><call><name>vec_mergel</name><argument_list>(<argument><expr><name>tempA</name></expr></argument>, <argument><expr><name>tempI</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>temp2</name> <init>= <expr><call><name>vec_mergeh</name><argument_list>(<argument><expr><name>tempB</name></expr></argument>, <argument><expr><name>tempJ</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>temp3</name> <init>= <expr><call><name>vec_mergel</name><argument_list>(<argument><expr><name>tempB</name></expr></argument>, <argument><expr><name>tempJ</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>temp4</name> <init>= <expr><call><name>vec_mergeh</name><argument_list>(<argument><expr><name>tempC</name></expr></argument>, <argument><expr><name>tempK</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>temp5</name> <init>= <expr><call><name>vec_mergel</name><argument_list>(<argument><expr><name>tempC</name></expr></argument>, <argument><expr><name>tempK</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>temp6</name> <init>= <expr><call><name>vec_mergeh</name><argument_list>(<argument><expr><name>tempD</name></expr></argument>, <argument><expr><name>tempL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>temp7</name> <init>= <expr><call><name>vec_mergel</name><argument_list>(<argument><expr><name>tempD</name></expr></argument>, <argument><expr><name>tempL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>temp8</name> <init>= <expr><call><name>vec_mergeh</name><argument_list>(<argument><expr><name>tempE</name></expr></argument>, <argument><expr><name>tempM</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>temp9</name> <init>= <expr><call><name>vec_mergel</name><argument_list>(<argument><expr><name>tempE</name></expr></argument>, <argument><expr><name>tempM</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>temp10</name> <init>= <expr><call><name>vec_mergeh</name><argument_list>(<argument><expr><name>tempF</name></expr></argument>, <argument><expr><name>tempN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>temp11</name> <init>= <expr><call><name>vec_mergel</name><argument_list>(<argument><expr><name>tempF</name></expr></argument>, <argument><expr><name>tempN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>temp12</name> <init>= <expr><call><name>vec_mergeh</name><argument_list>(<argument><expr><name>tempG</name></expr></argument>, <argument><expr><name>tempO</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>temp13</name> <init>= <expr><call><name>vec_mergel</name><argument_list>(<argument><expr><name>tempG</name></expr></argument>, <argument><expr><name>tempO</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>temp14</name> <init>= <expr><call><name>vec_mergeh</name><argument_list>(<argument><expr><name>tempH</name></expr></argument>, <argument><expr><name>tempP</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>temp15</name> <init>= <expr><call><name>vec_mergel</name><argument_list>(<argument><expr><name>tempH</name></expr></argument>, <argument><expr><name>tempP</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>tempA</name> <operator>=</operator> <call><name>vec_mergeh</name><argument_list>(<argument><expr><name>temp0</name></expr></argument>, <argument><expr><name>temp8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tempB</name> <operator>=</operator> <call><name>vec_mergel</name><argument_list>(<argument><expr><name>temp0</name></expr></argument>, <argument><expr><name>temp8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tempC</name> <operator>=</operator> <call><name>vec_mergeh</name><argument_list>(<argument><expr><name>temp1</name></expr></argument>, <argument><expr><name>temp9</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tempD</name> <operator>=</operator> <call><name>vec_mergel</name><argument_list>(<argument><expr><name>temp1</name></expr></argument>, <argument><expr><name>temp9</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tempE</name> <operator>=</operator> <call><name>vec_mergeh</name><argument_list>(<argument><expr><name>temp2</name></expr></argument>, <argument><expr><name>temp10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tempF</name> <operator>=</operator> <call><name>vec_mergel</name><argument_list>(<argument><expr><name>temp2</name></expr></argument>, <argument><expr><name>temp10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tempG</name> <operator>=</operator> <call><name>vec_mergeh</name><argument_list>(<argument><expr><name>temp3</name></expr></argument>, <argument><expr><name>temp11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tempH</name> <operator>=</operator> <call><name>vec_mergel</name><argument_list>(<argument><expr><name>temp3</name></expr></argument>, <argument><expr><name>temp11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tempI</name> <operator>=</operator> <call><name>vec_mergeh</name><argument_list>(<argument><expr><name>temp4</name></expr></argument>, <argument><expr><name>temp12</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tempJ</name> <operator>=</operator> <call><name>vec_mergel</name><argument_list>(<argument><expr><name>temp4</name></expr></argument>, <argument><expr><name>temp12</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tempK</name> <operator>=</operator> <call><name>vec_mergeh</name><argument_list>(<argument><expr><name>temp5</name></expr></argument>, <argument><expr><name>temp13</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tempL</name> <operator>=</operator> <call><name>vec_mergel</name><argument_list>(<argument><expr><name>temp5</name></expr></argument>, <argument><expr><name>temp13</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tempM</name> <operator>=</operator> <call><name>vec_mergeh</name><argument_list>(<argument><expr><name>temp6</name></expr></argument>, <argument><expr><name>temp14</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tempN</name> <operator>=</operator> <call><name>vec_mergel</name><argument_list>(<argument><expr><name>temp6</name></expr></argument>, <argument><expr><name>temp14</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tempO</name> <operator>=</operator> <call><name>vec_mergeh</name><argument_list>(<argument><expr><name>temp7</name></expr></argument>, <argument><expr><name>temp15</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tempP</name> <operator>=</operator> <call><name>vec_mergel</name><argument_list>(<argument><expr><name>temp7</name></expr></argument>, <argument><expr><name>temp15</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp0</name> <operator>=</operator> <call><name>vec_mergeh</name><argument_list>(<argument><expr><name>tempA</name></expr></argument>, <argument><expr><name>tempI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp1</name> <operator>=</operator> <call><name>vec_mergel</name><argument_list>(<argument><expr><name>tempA</name></expr></argument>, <argument><expr><name>tempI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp2</name> <operator>=</operator> <call><name>vec_mergeh</name><argument_list>(<argument><expr><name>tempB</name></expr></argument>, <argument><expr><name>tempJ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp3</name> <operator>=</operator> <call><name>vec_mergel</name><argument_list>(<argument><expr><name>tempB</name></expr></argument>, <argument><expr><name>tempJ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp4</name> <operator>=</operator> <call><name>vec_mergeh</name><argument_list>(<argument><expr><name>tempC</name></expr></argument>, <argument><expr><name>tempK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp5</name> <operator>=</operator> <call><name>vec_mergel</name><argument_list>(<argument><expr><name>tempC</name></expr></argument>, <argument><expr><name>tempK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp6</name> <operator>=</operator> <call><name>vec_mergeh</name><argument_list>(<argument><expr><name>tempD</name></expr></argument>, <argument><expr><name>tempL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp7</name> <operator>=</operator> <call><name>vec_mergel</name><argument_list>(<argument><expr><name>tempD</name></expr></argument>, <argument><expr><name>tempL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp8</name> <operator>=</operator> <call><name>vec_mergeh</name><argument_list>(<argument><expr><name>tempE</name></expr></argument>, <argument><expr><name>tempM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp9</name> <operator>=</operator> <call><name>vec_mergel</name><argument_list>(<argument><expr><name>tempE</name></expr></argument>, <argument><expr><name>tempM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp10</name> <operator>=</operator> <call><name>vec_mergeh</name><argument_list>(<argument><expr><name>tempF</name></expr></argument>, <argument><expr><name>tempN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp11</name> <operator>=</operator> <call><name>vec_mergel</name><argument_list>(<argument><expr><name>tempF</name></expr></argument>, <argument><expr><name>tempN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp12</name> <operator>=</operator> <call><name>vec_mergeh</name><argument_list>(<argument><expr><name>tempG</name></expr></argument>, <argument><expr><name>tempO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp13</name> <operator>=</operator> <call><name>vec_mergel</name><argument_list>(<argument><expr><name>tempG</name></expr></argument>, <argument><expr><name>tempO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp14</name> <operator>=</operator> <call><name>vec_mergeh</name><argument_list>(<argument><expr><name>tempH</name></expr></argument>, <argument><expr><name>tempP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp15</name> <operator>=</operator> <call><name>vec_mergel</name><argument_list>(<argument><expr><name>tempH</name></expr></argument>, <argument><expr><name>tempP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vec_st</name><argument_list>(<argument><expr><name>temp0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vec_st</name><argument_list>(<argument><expr><name>temp1</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vec_st</name><argument_list>(<argument><expr><name>temp2</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vec_st</name><argument_list>(<argument><expr><name>temp3</name></expr></argument>, <argument><expr><literal type="number">48</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vec_st</name><argument_list>(<argument><expr><name>temp4</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vec_st</name><argument_list>(<argument><expr><name>temp5</name></expr></argument>, <argument><expr><literal type="number">80</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vec_st</name><argument_list>(<argument><expr><name>temp6</name></expr></argument>, <argument><expr><literal type="number">96</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vec_st</name><argument_list>(<argument><expr><name>temp7</name></expr></argument>, <argument><expr><literal type="number">112</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vec_st</name><argument_list>(<argument><expr><name>temp8</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vec_st</name><argument_list>(<argument><expr><name>temp9</name></expr></argument>, <argument><expr><literal type="number">144</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vec_st</name><argument_list>(<argument><expr><name>temp10</name></expr></argument>, <argument><expr><literal type="number">160</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vec_st</name><argument_list>(<argument><expr><name>temp11</name></expr></argument>, <argument><expr><literal type="number">176</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vec_st</name><argument_list>(<argument><expr><name>temp12</name></expr></argument>, <argument><expr><literal type="number">192</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vec_st</name><argument_list>(<argument><expr><name>temp13</name></expr></argument>, <argument><expr><literal type="number">208</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vec_st</name><argument_list>(<argument><expr><name>temp14</name></expr></argument>, <argument><expr><literal type="number">224</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vec_st</name><argument_list>(<argument><expr><name>temp15</name></expr></argument>, <argument><expr><literal type="number">240</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>transpose_8x16_char_fromPackedAlign_altivec</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>char</name></type> <name>zero</name> <init>= <expr><call><name>vec_splat_u8</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>signed</name> <name>char</name></type> <name>neg1</name> <init>= <expr><call><name>vec_splat_s8</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOAD_DOUBLE_LINE</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>j</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>vector unsigned char src##i = vec_ld(i * 16, src); vector unsigned char src##j = vec_ld(j * 16, src)</cpp:value></cpp:define>

<expr_stmt><expr><call><name>LOAD_DOUBLE_LINE</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOAD_DOUBLE_LINE</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOAD_DOUBLE_LINE</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOAD_DOUBLE_LINE</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOAD_DOUBLE_LINE</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOAD_DOUBLE_LINE</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOAD_DOUBLE_LINE</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOAD_DOUBLE_LINE</name><argument_list>(<argument><expr><literal type="number">14</literal></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>LOAD_DOUBLE_LINE</name></cpp:undef>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>tempA</name> <init>= <expr><call><name>vec_mergeh</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src8</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>tempB</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>tempC</name> <init>= <expr><call><name>vec_mergeh</name><argument_list>(<argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src9</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>tempD</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>tempE</name> <init>= <expr><call><name>vec_mergeh</name><argument_list>(<argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src10</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>tempG</name> <init>= <expr><call><name>vec_mergeh</name><argument_list>(<argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src11</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>tempI</name> <init>= <expr><call><name>vec_mergeh</name><argument_list>(<argument><expr><name>src4</name></expr></argument>, <argument><expr><name>src12</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>tempJ</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>tempK</name> <init>= <expr><call><name>vec_mergeh</name><argument_list>(<argument><expr><name>src5</name></expr></argument>, <argument><expr><name>src13</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>tempL</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>tempM</name> <init>= <expr><call><name>vec_mergeh</name><argument_list>(<argument><expr><name>src6</name></expr></argument>, <argument><expr><name>src14</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>tempO</name> <init>= <expr><call><name>vec_mergeh</name><argument_list>(<argument><expr><name>src7</name></expr></argument>, <argument><expr><name>src15</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>temp0</name> <init>= <expr><call><name>vec_mergeh</name><argument_list>(<argument><expr><name>tempA</name></expr></argument>, <argument><expr><name>tempI</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>temp1</name> <init>= <expr><call><name>vec_mergel</name><argument_list>(<argument><expr><name>tempA</name></expr></argument>, <argument><expr><name>tempI</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>temp2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>temp3</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>temp4</name> <init>= <expr><call><name>vec_mergeh</name><argument_list>(<argument><expr><name>tempC</name></expr></argument>, <argument><expr><name>tempK</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>temp5</name> <init>= <expr><call><name>vec_mergel</name><argument_list>(<argument><expr><name>tempC</name></expr></argument>, <argument><expr><name>tempK</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>temp6</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>temp7</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>temp8</name> <init>= <expr><call><name>vec_mergeh</name><argument_list>(<argument><expr><name>tempE</name></expr></argument>, <argument><expr><name>tempM</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>temp9</name> <init>= <expr><call><name>vec_mergel</name><argument_list>(<argument><expr><name>tempE</name></expr></argument>, <argument><expr><name>tempM</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>temp12</name> <init>= <expr><call><name>vec_mergeh</name><argument_list>(<argument><expr><name>tempG</name></expr></argument>, <argument><expr><name>tempO</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>temp13</name> <init>= <expr><call><name>vec_mergel</name><argument_list>(<argument><expr><name>tempG</name></expr></argument>, <argument><expr><name>tempO</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>tempA</name> <operator>=</operator> <call><name>vec_mergeh</name><argument_list>(<argument><expr><name>temp0</name></expr></argument>, <argument><expr><name>temp8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tempB</name> <operator>=</operator> <call><name>vec_mergel</name><argument_list>(<argument><expr><name>temp0</name></expr></argument>, <argument><expr><name>temp8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tempC</name> <operator>=</operator> <call><name>vec_mergeh</name><argument_list>(<argument><expr><name>temp1</name></expr></argument>, <argument><expr><name>temp9</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tempD</name> <operator>=</operator> <call><name>vec_mergel</name><argument_list>(<argument><expr><name>temp1</name></expr></argument>, <argument><expr><name>temp9</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tempI</name> <operator>=</operator> <call><name>vec_mergeh</name><argument_list>(<argument><expr><name>temp4</name></expr></argument>, <argument><expr><name>temp12</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tempJ</name> <operator>=</operator> <call><name>vec_mergel</name><argument_list>(<argument><expr><name>temp4</name></expr></argument>, <argument><expr><name>temp12</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tempK</name> <operator>=</operator> <call><name>vec_mergeh</name><argument_list>(<argument><expr><name>temp5</name></expr></argument>, <argument><expr><name>temp13</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tempL</name> <operator>=</operator> <call><name>vec_mergel</name><argument_list>(<argument><expr><name>temp5</name></expr></argument>, <argument><expr><name>temp13</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp0</name> <operator>=</operator> <call><name>vec_mergeh</name><argument_list>(<argument><expr><name>tempA</name></expr></argument>, <argument><expr><name>tempI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp1</name> <operator>=</operator> <call><name>vec_mergel</name><argument_list>(<argument><expr><name>tempA</name></expr></argument>, <argument><expr><name>tempI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp2</name> <operator>=</operator> <call><name>vec_mergeh</name><argument_list>(<argument><expr><name>tempB</name></expr></argument>, <argument><expr><name>tempJ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp3</name> <operator>=</operator> <call><name>vec_mergel</name><argument_list>(<argument><expr><name>tempB</name></expr></argument>, <argument><expr><name>tempJ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp4</name> <operator>=</operator> <call><name>vec_mergeh</name><argument_list>(<argument><expr><name>tempC</name></expr></argument>, <argument><expr><name>tempK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp5</name> <operator>=</operator> <call><name>vec_mergel</name><argument_list>(<argument><expr><name>tempC</name></expr></argument>, <argument><expr><name>tempK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp6</name> <operator>=</operator> <call><name>vec_mergeh</name><argument_list>(<argument><expr><name>tempD</name></expr></argument>, <argument><expr><name>tempL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp7</name> <operator>=</operator> <call><name>vec_mergel</name><argument_list>(<argument><expr><name>tempD</name></expr></argument>, <argument><expr><name>tempL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STORE_DOUBLE_LINE</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>j</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { vector unsigned char dstAi = vec_ld(i * stride, dst); vector unsigned char dstBi = vec_ld(i * stride + 16, dst); vector unsigned char dstAj = vec_ld(j * stride, dst); vector unsigned char dstBj = vec_ld(j * stride+ 16, dst); vector unsigned char aligni = vec_lvsr(i * stride, dst); vector unsigned char alignj = vec_lvsr(j * stride, dst); vector unsigned char maski = vec_perm(zero, (vector unsigned char)neg1, aligni); vector unsigned char maskj = vec_perm(zero, (vector unsigned char)neg1, alignj); vector unsigned char dstRi = vec_perm(temp##i, temp##i, aligni); vector unsigned char dstRj = vec_perm(temp##j, temp##j, alignj); vector unsigned char dstAFi = vec_sel(dstAi, dstRi, maski); vector unsigned char dstBFi = vec_sel(dstRi, dstBi, maski); vector unsigned char dstAFj = vec_sel(dstAj, dstRj, maskj); vector unsigned char dstBFj = vec_sel(dstRj, dstBj, maskj); vec_st(dstAFi, i * stride, dst); vec_st(dstBFi, i * stride + 16, dst); vec_st(dstAFj, j * stride, dst); vec_st(dstBFj, j * stride + 16, dst); } while (0)</cpp:value></cpp:define>

<expr_stmt><expr><call><name>STORE_DOUBLE_LINE</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STORE_DOUBLE_LINE</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STORE_DOUBLE_LINE</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STORE_DOUBLE_LINE</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>,<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
