<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libpostproc\postprocess_template.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/x86/asm.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TEMPLATE_PP_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RENAME</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a ##_C</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEMPLATE_PP_C</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TEMPLATE_PP_ALTIVEC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RENAME</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a ##_altivec</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEMPLATE_PP_ALTIVEC</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TEMPLATE_PP_MMX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RENAME</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a ##_MMX</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEMPLATE_PP_MMX</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TEMPLATE_PP_MMXEXT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TEMPLATE_PP_MMX</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEMPLATE_PP_MMX</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RENAME</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a ##_MMX2</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEMPLATE_PP_MMXEXT</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TEMPLATE_PP_3DNOW</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TEMPLATE_PP_MMX</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEMPLATE_PP_MMX</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RENAME</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a ##_3DNow</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEMPLATE_PP_3DNOW</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TEMPLATE_PP_SSE2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TEMPLATE_PP_MMX</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEMPLATE_PP_MMX</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TEMPLATE_PP_MMXEXT</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEMPLATE_PP_MMXEXT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RENAME</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a ##_SSE2</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEMPLATE_PP_SSE2</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>REAL_PAVGB</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PAVGB</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PMINUB</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PMAXUB</name></cpp:undef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>TEMPLATE_PP_MMXEXT</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REAL_PAVGB</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>"pavgb " #a ", " #b " \n\t"</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>TEMPLATE_PP_3DNOW</name></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REAL_PAVGB</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>"pavgusb " #a ", " #b " \n\t"</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PAVGB</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>REAL_PAVGB(a,b)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>TEMPLATE_PP_MMXEXT</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PMINUB</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>"pminub " #a ", " #b " \n\t"</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>TEMPLATE_PP_MMX</name></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PMINUB</name><parameter_list>(<parameter><type><name>b</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>"movq " #a ", " #t " \n\t""psubusb " #b ", " #t " \n\t""psubb " #t ", " #a " \n\t"
</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>TEMPLATE_PP_MMXEXT</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PMAXUB</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>"pmaxub " #a ", " #b " \n\t"</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>TEMPLATE_PP_MMX</name></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PMAXUB</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>"psubusb " #a ", " #b " \n\t""paddb " #a ", " #b " \n\t"
</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>TEMPLATE_PP_MMX</name></expr></cpp:if>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name> <name>RENAME</name></type>(<name>vertClassify</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>src</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>PPContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>numEq</name><init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>dcOk</name></decl>;</decl_stmt>

<expr_stmt><expr><name>src</name><operator>+=</operator> <name>stride</name><operator>*</operator><literal type="number">4</literal></expr>;</expr_stmt> 

<asm>__asm__ <specifier>volatile</specifier>(

"movq %0, %%mm7 \n\t"

"movq %1, %%mm6 \n\t"

: : "m" (c-&gt;mmxDcOffset[c-&gt;nonBQP]), "m" (c-&gt;mmxDcThreshold[c-&gt;nonBQP])

);</asm>

<asm>__asm__ <specifier>volatile</specifier>(

"lea (%2, %3), %%"FF_REG_a" \n\t"

"movq (%2), %%mm0 \n\t"

"movq (%%"FF_REG_a"), %%mm1 \n\t"

"movq %%mm0, %%mm3 \n\t"

"movq %%mm0, %%mm4 \n\t"

PMAXUB(%%mm1, %%mm4)

PMINUB(%%mm1, %%mm3, %%mm5)

"psubb %%mm1, %%mm0 \n\t" 

"paddb %%mm7, %%mm0 \n\t"

"pcmpgtb %%mm6, %%mm0 \n\t"

"movq (%%"FF_REG_a",%3), %%mm2 \n\t"

PMAXUB(%%mm2, %%mm4)

PMINUB(%%mm2, %%mm3, %%mm5)

"psubb %%mm2, %%mm1 \n\t"

"paddb %%mm7, %%mm1 \n\t"

"pcmpgtb %%mm6, %%mm1 \n\t"

"paddb %%mm1, %%mm0 \n\t"

"movq (%%"FF_REG_a", %3, 2), %%mm1 \n\t"

PMAXUB(%%mm1, %%mm4)

PMINUB(%%mm1, %%mm3, %%mm5)

"psubb %%mm1, %%mm2 \n\t"

"paddb %%mm7, %%mm2 \n\t"

"pcmpgtb %%mm6, %%mm2 \n\t"

"paddb %%mm2, %%mm0 \n\t"

"lea (%%"FF_REG_a", %3, 4), %%"FF_REG_a"\n\t"

"movq (%2, %3, 4), %%mm2 \n\t"

PMAXUB(%%mm2, %%mm4)

PMINUB(%%mm2, %%mm3, %%mm5)

"psubb %%mm2, %%mm1 \n\t"

"paddb %%mm7, %%mm1 \n\t"

"pcmpgtb %%mm6, %%mm1 \n\t"

"paddb %%mm1, %%mm0 \n\t"

"movq (%%"FF_REG_a"), %%mm1 \n\t"

PMAXUB(%%mm1, %%mm4)

PMINUB(%%mm1, %%mm3, %%mm5)

"psubb %%mm1, %%mm2 \n\t"

"paddb %%mm7, %%mm2 \n\t"

"pcmpgtb %%mm6, %%mm2 \n\t"

"paddb %%mm2, %%mm0 \n\t"

"movq (%%"FF_REG_a", %3), %%mm2 \n\t"

PMAXUB(%%mm2, %%mm4)

PMINUB(%%mm2, %%mm3, %%mm5)

"psubb %%mm2, %%mm1 \n\t"

"paddb %%mm7, %%mm1 \n\t"

"pcmpgtb %%mm6, %%mm1 \n\t"

"paddb %%mm1, %%mm0 \n\t"

"movq (%%"FF_REG_a", %3, 2), %%mm1 \n\t"

PMAXUB(%%mm1, %%mm4)

PMINUB(%%mm1, %%mm3, %%mm5)

"psubb %%mm1, %%mm2 \n\t"

"paddb %%mm7, %%mm2 \n\t"

"pcmpgtb %%mm6, %%mm2 \n\t"

"paddb %%mm2, %%mm0 \n\t"

"psubusb %%mm3, %%mm4 \n\t"

" \n\t"

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>TEMPLATE_PP_MMXEXT</name></expr></cpp:if>

"pxor %%mm7, %%mm7 \n\t"

"psadbw %%mm7, %%mm0 \n\t"

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

"movq %%mm0, %%mm1 \n\t"

"psrlw $8, %%mm0 \n\t"

"paddb %%mm1, %%mm0 \n\t"

"movq %%mm0, %%mm1 \n\t"

"psrlq $16, %%mm0 \n\t"

"paddb %%mm1, %%mm0 \n\t"

"movq %%mm0, %%mm1 \n\t"

"psrlq $32, %%mm0 \n\t"

"paddb %%mm1, %%mm0 \n\t"

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

"movq %4, %%mm7 \n\t" 

"paddusb %%mm7, %%mm7 \n\t" 

"psubusb %%mm7, %%mm4 \n\t" 

"packssdw %%mm4, %%mm4 \n\t"

"movd %%mm0, %0 \n\t"

"movd %%mm4, %1 \n\t"

: "=r" (numEq), "=r" (dcOk)

: "r" (src), "r" ((x86_reg)stride), "m" (c-&gt;pQPb)

: "%"FF_REG_a

);</asm>

<expr_stmt><expr><name>numEq</name><operator>=</operator> <operator>(</operator><operator>-</operator><name>numEq</name><operator>)</operator> <operator>&amp;</operator><literal type="number">0xFF</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>numEq</name> <operator>&gt;</operator> <name><name>c</name><operator>-&gt;</operator><name>ppMode</name><operator>.</operator><name>flatnessThreshold</name></name></expr>)</condition><block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>dcOk</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<return>return <expr><literal type="number">2</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>TEMPLATE_PP_ALTIVEC</name></expr></cpp:if>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <name>RENAME</name></type>(<name>doVertLowPass</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>PPContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>TEMPLATE_PP_MMXEXT</name> <operator>||</operator> <name>TEMPLATE_PP_3DNOW</name></expr></cpp:if>

<expr_stmt><expr><name>src</name><operator>+=</operator> <name>stride</name><operator>*</operator><literal type="number">3</literal></expr>;</expr_stmt>

<asm>__asm__ <specifier>volatile</specifier>( 

"movq %2, %%mm0 \n\t" 

"pxor %%mm4, %%mm4 \n\t"

"movq (%0), %%mm6 \n\t"

"movq (%0, %1), %%mm5 \n\t"

"movq %%mm5, %%mm1 \n\t"

"movq %%mm6, %%mm2 \n\t"

"psubusb %%mm6, %%mm5 \n\t"

"psubusb %%mm1, %%mm2 \n\t"

"por %%mm5, %%mm2 \n\t" 

"psubusb %%mm0, %%mm2 \n\t" 

"pcmpeqb %%mm4, %%mm2 \n\t" 

"pand %%mm2, %%mm6 \n\t"

"pandn %%mm1, %%mm2 \n\t"

"por %%mm2, %%mm6 \n\t"

"movq (%0, %1, 8), %%mm5 \n\t"

"lea (%0, %1, 4), %%"FF_REG_a" \n\t"

"lea (%0, %1, 8), %%"FF_REG_c" \n\t"

"sub %1, %%"FF_REG_c" \n\t"

"add %1, %0 \n\t" 

"movq (%0, %1, 8), %%mm7 \n\t"

"movq %%mm5, %%mm1 \n\t"

"movq %%mm7, %%mm2 \n\t"

"psubusb %%mm7, %%mm5 \n\t"

"psubusb %%mm1, %%mm2 \n\t"

"por %%mm5, %%mm2 \n\t" 

"psubusb %%mm0, %%mm2 \n\t" 

"pcmpeqb %%mm4, %%mm2 \n\t" 

"pand %%mm2, %%mm7 \n\t"

"pandn %%mm1, %%mm2 \n\t"

"por %%mm2, %%mm7 \n\t" 

"movq (%0, %1), %%mm0 \n\t" 

"movq %%mm0, %%mm1 \n\t" 

PAVGB(%%mm6, %%mm0) 

PAVGB(%%mm6, %%mm0) 

"movq (%0, %1, 4), %%mm2 \n\t" 

"movq %%mm2, %%mm5 \n\t" 

PAVGB((%%FF_REGa), %%mm2) 

PAVGB((%0, %1, 2), %%mm2) 

"movq %%mm2, %%mm3 \n\t" 

"movq (%0), %%mm4 \n\t" 

PAVGB(%%mm4, %%mm3) 

PAVGB(%%mm0, %%mm3) 

"movq %%mm3, (%0) \n\t" 

"movq %%mm1, %%mm0 \n\t" 

PAVGB(%%mm6, %%mm0) 

"movq %%mm4, %%mm3 \n\t" 

PAVGB((%0,%1,2), %%mm3) 

PAVGB((%%FF_REGa,%1,2), %%mm5) 

PAVGB((%%FF_REGa), %%mm5) 

PAVGB(%%mm5, %%mm3) 

PAVGB(%%mm0, %%mm3) 

"movq %%mm3, (%0,%1) \n\t" 

PAVGB(%%mm4, %%mm6) 

"movq (%%"FF_REG_c"), %%mm0 \n\t" 

PAVGB((%%FF_REGa, %1, 2), %%mm0) 

"movq %%mm0, %%mm3 \n\t" 

PAVGB(%%mm1, %%mm0) 

PAVGB(%%mm6, %%mm0) 

PAVGB(%%mm2, %%mm0) 

"movq (%0, %1, 2), %%mm2 \n\t" 

"movq %%mm0, (%0, %1, 2) \n\t" 

"movq (%%"FF_REG_a", %1, 4), %%mm0 \n\t" 

PAVGB((%%FF_REGc), %%mm0) 

PAVGB(%%mm0, %%mm6) 

PAVGB(%%mm1, %%mm4) 

PAVGB(%%mm2, %%mm1) 

PAVGB(%%mm1, %%mm6) 

PAVGB(%%mm5, %%mm6) 

"movq (%%"FF_REG_a"), %%mm5 \n\t" 

"movq %%mm6, (%%"FF_REG_a") \n\t" 

"movq (%%"FF_REG_a", %1, 4), %%mm6 \n\t" 

PAVGB(%%mm7, %%mm6) 

PAVGB(%%mm4, %%mm6) 

PAVGB(%%mm3, %%mm6) 

PAVGB(%%mm5, %%mm2) 

"movq (%0, %1, 4), %%mm4 \n\t" 

PAVGB(%%mm4, %%mm2) 

PAVGB(%%mm2, %%mm6) 

"movq %%mm6, (%0, %1, 4) \n\t" 

PAVGB(%%mm7, %%mm1) 

PAVGB(%%mm4, %%mm5) 

PAVGB(%%mm5, %%mm0) 

"movq (%%"FF_REG_a", %1, 2), %%mm6 \n\t" 

PAVGB(%%mm6, %%mm1) 

PAVGB(%%mm0, %%mm1) 

"movq %%mm1, (%%"FF_REG_a", %1, 2) \n\t" 

PAVGB((%%FF_REGc), %%mm2) 

"movq (%%"FF_REG_a", %1, 4), %%mm0 \n\t" 

PAVGB(%%mm0, %%mm6) 

PAVGB(%%mm7, %%mm6) 

PAVGB(%%mm2, %%mm6) 

"movq %%mm6, (%%"FF_REG_c") \n\t" 

PAVGB(%%mm7, %%mm5) 

PAVGB(%%mm7, %%mm5) 

PAVGB(%%mm3, %%mm0) 

PAVGB(%%mm0, %%mm5) 

"movq %%mm5, (%%"FF_REG_a", %1, 4) \n\t" 

"sub %1, %0 \n\t"

:

: "r" (src), "r" ((x86_reg)stride), "m" (c-&gt;pQPb)

: "%"FF_REG_a, "%"FF_REG_c

);</asm>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>l1</name><init>= <expr><name>stride</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>l2</name><init>= <expr><name>stride</name> <operator>+</operator> <name>l1</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>l3</name><init>= <expr><name>stride</name> <operator>+</operator> <name>l2</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>l4</name><init>= <expr><name>stride</name> <operator>+</operator> <name>l3</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>l5</name><init>= <expr><name>stride</name> <operator>+</operator> <name>l4</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>l6</name><init>= <expr><name>stride</name> <operator>+</operator> <name>l5</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>l7</name><init>= <expr><name>stride</name> <operator>+</operator> <name>l6</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>l8</name><init>= <expr><name>stride</name> <operator>+</operator> <name>l7</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>l9</name><init>= <expr><name>stride</name> <operator>+</operator> <name>l8</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>

<expr_stmt><expr><name>src</name><operator>+=</operator> <name>stride</name><operator>*</operator><literal type="number">3</literal></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>x</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name><operator>&lt;</operator><name>BLOCK_SIZE</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>first</name><init>= <expr><ternary><condition><expr><call><name>FFABS</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[<expr><name>l1</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>QP</name></name></expr> ?</condition><then> <expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> </then><else>: <expr><name><name>src</name><index>[<expr><name>l1</name></expr>]</index></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>last</name><init>= <expr><ternary><condition><expr><call><name>FFABS</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><name>l8</name></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[<expr><name>l9</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>QP</name></name></expr> ?</condition><then> <expr><name><name>src</name><index>[<expr><name>l9</name></expr>]</index></name></expr> </then><else>: <expr><name><name>src</name><index>[<expr><name>l8</name></expr>]</index></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>sums</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>sums</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">4</literal><operator>*</operator><name>first</name> <operator>+</operator> <name><name>src</name><index>[<expr><name>l1</name></expr>]</index></name> <operator>+</operator> <name><name>src</name><index>[<expr><name>l2</name></expr>]</index></name> <operator>+</operator> <name><name>src</name><index>[<expr><name>l3</name></expr>]</index></name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sums</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>sums</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name>first</name> <operator>+</operator> <name><name>src</name><index>[<expr><name>l4</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sums</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>sums</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name>first</name> <operator>+</operator> <name><name>src</name><index>[<expr><name>l5</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sums</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>sums</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <name>first</name> <operator>+</operator> <name><name>src</name><index>[<expr><name>l6</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sums</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>sums</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <name>first</name> <operator>+</operator> <name><name>src</name><index>[<expr><name>l7</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sums</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name><name>sums</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[<expr><name>l1</name></expr>]</index></name> <operator>+</operator> <name><name>src</name><index>[<expr><name>l8</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sums</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name><name>sums</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[<expr><name>l2</name></expr>]</index></name> <operator>+</operator> <name>last</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sums</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name><name>sums</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[<expr><name>l3</name></expr>]</index></name> <operator>+</operator> <name>last</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sums</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name><name>sums</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[<expr><name>l4</name></expr>]</index></name> <operator>+</operator> <name>last</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sums</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <name><name>sums</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[<expr><name>l5</name></expr>]</index></name> <operator>+</operator> <name>last</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><name>l1</name></expr>]</index></name><operator>=</operator> <operator>(</operator><name><name>sums</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>sums</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name><name>src</name><index>[<expr><name>l1</name></expr>]</index></name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><name>l2</name></expr>]</index></name><operator>=</operator> <operator>(</operator><name><name>sums</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>sums</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name><name>src</name><index>[<expr><name>l2</name></expr>]</index></name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><name>l3</name></expr>]</index></name><operator>=</operator> <operator>(</operator><name><name>sums</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>sums</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name><name>src</name><index>[<expr><name>l3</name></expr>]</index></name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><name>l4</name></expr>]</index></name><operator>=</operator> <operator>(</operator><name><name>sums</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name><name>sums</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name><name>src</name><index>[<expr><name>l4</name></expr>]</index></name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><name>l5</name></expr>]</index></name><operator>=</operator> <operator>(</operator><name><name>sums</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>+</operator> <name><name>sums</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name><name>src</name><index>[<expr><name>l5</name></expr>]</index></name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><name>l6</name></expr>]</index></name><operator>=</operator> <operator>(</operator><name><name>sums</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>+</operator> <name><name>sums</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name><name>src</name><index>[<expr><name>l6</name></expr>]</index></name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><name>l7</name></expr>]</index></name><operator>=</operator> <operator>(</operator><name><name>sums</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>+</operator> <name><name>sums</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name><name>src</name><index>[<expr><name>l7</name></expr>]</index></name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><name>l8</name></expr>]</index></name><operator>=</operator> <operator>(</operator><name><name>sums</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>+</operator> <name><name>sums</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name><name>src</name><index>[<expr><name>l8</name></expr>]</index></name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <name>RENAME</name></type>(<name>vertX1Filter</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>PPContext</name> <modifier>*</modifier></type><name>co</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>TEMPLATE_PP_MMXEXT</name> <operator>||</operator> <name>TEMPLATE_PP_3DNOW</name></expr></cpp:if>

<expr_stmt><expr><name>src</name><operator>+=</operator> <name>stride</name><operator>*</operator><literal type="number">3</literal></expr>;</expr_stmt>

<asm>__asm__ <specifier>volatile</specifier>(

"pxor %%mm7, %%mm7 \n\t" 

"lea (%0, %1), %%"FF_REG_a" \n\t"

"lea (%%"FF_REG_a", %1, 4), %%"FF_REG_c"\n\t"

"movq (%%"FF_REG_a", %1, 2), %%mm0 \n\t" 

"movq (%0, %1, 4), %%mm1 \n\t" 

"movq %%mm1, %%mm2 \n\t" 

"psubusb %%mm0, %%mm1 \n\t"

"psubusb %%mm2, %%mm0 \n\t"

"por %%mm1, %%mm0 \n\t" 

"movq (%%"FF_REG_c"), %%mm3 \n\t" 

"movq (%%"FF_REG_c", %1), %%mm4 \n\t" 

"movq %%mm3, %%mm5 \n\t" 

"psubusb %%mm4, %%mm3 \n\t"

"psubusb %%mm5, %%mm4 \n\t"

"por %%mm4, %%mm3 \n\t" 

PAVGB(%%mm3, %%mm0) 

"movq %%mm2, %%mm1 \n\t" 

"psubusb %%mm5, %%mm2 \n\t"

"movq %%mm2, %%mm4 \n\t"

"pcmpeqb %%mm7, %%mm2 \n\t" 

"psubusb %%mm1, %%mm5 \n\t"

"por %%mm5, %%mm4 \n\t" 

"psubusb %%mm0, %%mm4 \n\t" 

"movq %%mm4, %%mm3 \n\t" 

"movq %2, %%mm0 \n\t"

"paddusb %%mm0, %%mm0 \n\t"

"psubusb %%mm0, %%mm4 \n\t"

"pcmpeqb %%mm7, %%mm4 \n\t" 

"psubusb "MANGLE(b01)", %%mm3 \n\t"

"pand %%mm4, %%mm3 \n\t" 

PAVGB(%%mm7, %%mm3) 

"movq %%mm3, %%mm1 \n\t" 

PAVGB(%%mm7, %%mm3) 

PAVGB(%%mm1, %%mm3) 

"movq (%0, %1, 4), %%mm0 \n\t" 

"pxor %%mm2, %%mm0 \n\t" 

"psubusb %%mm3, %%mm0 \n\t"

"pxor %%mm2, %%mm0 \n\t"

"movq %%mm0, (%0, %1, 4) \n\t" 

"movq (%%"FF_REG_c"), %%mm0 \n\t" 

"pxor %%mm2, %%mm0 \n\t" 

"paddusb %%mm3, %%mm0 \n\t"

"pxor %%mm2, %%mm0 \n\t"

"movq %%mm0, (%%"FF_REG_c") \n\t" 

PAVGB(%%mm7, %%mm1) 

"movq (%%"FF_REG_a", %1, 2), %%mm0 \n\t" 

"pxor %%mm2, %%mm0 \n\t" 

"psubusb %%mm1, %%mm0 \n\t"

"pxor %%mm2, %%mm0 \n\t"

"movq %%mm0, (%%"FF_REG_a", %1, 2) \n\t" 

"movq (%%"FF_REG_c", %1), %%mm0 \n\t" 

"pxor %%mm2, %%mm0 \n\t" 

"paddusb %%mm1, %%mm0 \n\t"

"pxor %%mm2, %%mm0 \n\t"

"movq %%mm0, (%%"FF_REG_c", %1) \n\t" 

PAVGB(%%mm7, %%mm1) 

"movq (%%"FF_REG_a", %1), %%mm0 \n\t" 

"pxor %%mm2, %%mm0 \n\t" 

"psubusb %%mm1, %%mm0 \n\t"

"pxor %%mm2, %%mm0 \n\t"

"movq %%mm0, (%%"FF_REG_a", %1) \n\t" 

"movq (%%"FF_REG_c", %1, 2), %%mm0 \n\t" 

"pxor %%mm2, %%mm0 \n\t" 

"paddusb %%mm1, %%mm0 \n\t"

"pxor %%mm2, %%mm0 \n\t"

"movq %%mm0, (%%"FF_REG_c", %1, 2) \n\t" 

:

: "r" (src), "r" ((x86_reg)stride), "m" (co-&gt;pQPb)

NAMED_CONSTRAINTS_ADD(b01)

: "%"FF_REG_a, "%"FF_REG_c

);</asm>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>l1</name><init>= <expr><name>stride</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>l2</name><init>= <expr><name>stride</name> <operator>+</operator> <name>l1</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>l3</name><init>= <expr><name>stride</name> <operator>+</operator> <name>l2</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>l4</name><init>= <expr><name>stride</name> <operator>+</operator> <name>l3</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>l5</name><init>= <expr><name>stride</name> <operator>+</operator> <name>l4</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>l6</name><init>= <expr><name>stride</name> <operator>+</operator> <name>l5</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>l7</name><init>= <expr><name>stride</name> <operator>+</operator> <name>l6</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>

<expr_stmt><expr><name>src</name><operator>+=</operator> <name>stride</name><operator>*</operator><literal type="number">3</literal></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>x</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name><operator>&lt;</operator><name>BLOCK_SIZE</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>a</name><init>= <expr><name><name>src</name><index>[<expr><name>l3</name></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[<expr><name>l4</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>b</name><init>= <expr><name><name>src</name><index>[<expr><name>l4</name></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[<expr><name>l5</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>c</name><init>= <expr><name><name>src</name><index>[<expr><name>l5</name></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[<expr><name>l6</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>d</name><init>= <expr><call><name>FFABS</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>-</operator> <operator>(</operator><operator>(</operator><call><name>FFABS</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>d</name><operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>d</name> <operator>&lt;</operator> <name><name>co</name><operator>-&gt;</operator><name>QP</name></name><operator>*</operator><literal type="number">2</literal></expr>)</condition><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><name>d</name> <operator>*</operator> <call><name>FFSIGN</name><argument_list>(<argument><expr><operator>-</operator><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><name>l2</name></expr>]</index></name> <operator>+=</operator><name>v</name><operator>&gt;&gt;</operator><literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><name>l3</name></expr>]</index></name> <operator>+=</operator><name>v</name><operator>&gt;&gt;</operator><literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><name>l4</name></expr>]</index></name> <operator>+=</operator><operator>(</operator><literal type="number">3</literal><operator>*</operator><name>v</name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><name>l5</name></expr>]</index></name> <operator>-=</operator><operator>(</operator><literal type="number">3</literal><operator>*</operator><name>v</name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><name>l6</name></expr>]</index></name> <operator>-=</operator><name>v</name><operator>&gt;&gt;</operator><literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><name>l7</name></expr>]</index></name> <operator>-=</operator><name>v</name><operator>&gt;&gt;</operator><literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>src</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>TEMPLATE_PP_ALTIVEC</name></expr></cpp:if>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <name>RENAME</name></type>(<name>doVertDefFilter</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name><name>src</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>PPContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>TEMPLATE_PP_MMXEXT</name> <operator>||</operator> <name>TEMPLATE_PP_3DNOW</name></expr></cpp:if>

<expr_stmt><expr><name>src</name><operator>+=</operator> <name>stride</name><operator>*</operator><literal type="number">4</literal></expr>;</expr_stmt>

<asm>__asm__ <specifier>volatile</specifier>(

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if> 

"pxor %%mm7, %%mm7 \n\t" 

"lea (%0, %1), %%"FF_REG_a" \n\t"

"lea (%%"FF_REG_a", %1, 4), %%"FF_REG_c"\n\t"

"movq (%0, %1, 2), %%mm0 \n\t" 

"movq (%0), %%mm1 \n\t" 

"movq %%mm0, %%mm2 \n\t" 

PAVGB(%%mm7, %%mm0) 

PAVGB(%%mm1, %%mm0) 

PAVGB(%%mm2, %%mm0) 

"movq (%%"FF_REG_a"), %%mm1 \n\t" 

"movq (%%"FF_REG_a", %1, 2), %%mm3 \n\t" 

"movq %%mm1, %%mm4 \n\t" 

PAVGB(%%mm7, %%mm1) 

PAVGB(%%mm3, %%mm1) 

PAVGB(%%mm4, %%mm1) 

"movq %%mm0, %%mm4 \n\t" 

"psubusb %%mm1, %%mm0 \n\t"

"psubusb %%mm4, %%mm1 \n\t"

"por %%mm0, %%mm1 \n\t" 

"movq (%0, %1, 4), %%mm0 \n\t" 

"movq %%mm0, %%mm4 \n\t" 

PAVGB(%%mm7, %%mm0) 

PAVGB(%%mm2, %%mm0) 

PAVGB(%%mm4, %%mm0) 

"movq (%%"FF_REG_c"), %%mm2 \n\t" 

"movq %%mm3, %%mm5 \n\t" 

PAVGB(%%mm7, %%mm3) 

PAVGB(%%mm2, %%mm3) 

PAVGB(%%mm5, %%mm3) 

"movq %%mm0, %%mm6 \n\t" 

"psubusb %%mm3, %%mm0 \n\t"

"psubusb %%mm6, %%mm3 \n\t"

"por %%mm0, %%mm3 \n\t" 

"pcmpeqb %%mm7, %%mm0 \n\t" 

"movq (%%"FF_REG_c", %1), %%mm6 \n\t" 

"movq %%mm6, %%mm5 \n\t" 

PAVGB(%%mm7, %%mm6) 

PAVGB(%%mm4, %%mm6) 

PAVGB(%%mm5, %%mm6) 

"movq (%%"FF_REG_c", %1, 2), %%mm5 \n\t" 

"movq %%mm2, %%mm4 \n\t" 

PAVGB(%%mm7, %%mm2) 

PAVGB(%%mm5, %%mm2) 

PAVGB(%%mm4, %%mm2) 

"movq %%mm6, %%mm4 \n\t" 

"psubusb %%mm2, %%mm6 \n\t"

"psubusb %%mm4, %%mm2 \n\t"

"por %%mm6, %%mm2 \n\t" 

PMINUB(%%mm2, %%mm1, %%mm4) 

"movq %2, %%mm4 \n\t" 

"paddusb "MANGLE(b01)", %%mm4 \n\t"

"pcmpgtb %%mm3, %%mm4 \n\t" 

"psubusb %%mm1, %%mm3 \n\t" 

"pand %%mm4, %%mm3 \n\t"

"movq %%mm3, %%mm1 \n\t"

PAVGB(%%mm7, %%mm3)

PAVGB(%%mm7, %%mm3)

"paddusb %%mm1, %%mm3 \n\t"

"movq (%%"FF_REG_a", %1, 2), %%mm6 \n\t" 

"movq (%0, %1, 4), %%mm5 \n\t" 

"movq (%0, %1, 4), %%mm4 \n\t" 

"psubusb %%mm6, %%mm5 \n\t"

"psubusb %%mm4, %%mm6 \n\t"

"por %%mm6, %%mm5 \n\t" 

"pcmpeqb %%mm7, %%mm6 \n\t" 

"pxor %%mm6, %%mm0 \n\t"

"pand %%mm0, %%mm3 \n\t"

PMINUB(%%mm5, %%mm3, %%mm0)

"psubusb "MANGLE(b01)", %%mm3 \n\t"

PAVGB(%%mm7, %%mm3)

"movq (%%"FF_REG_a", %1, 2), %%mm0 \n\t"

"movq (%0, %1, 4), %%mm2 \n\t"

"pxor %%mm6, %%mm0 \n\t"

"pxor %%mm6, %%mm2 \n\t"

"psubb %%mm3, %%mm0 \n\t"

"paddb %%mm3, %%mm2 \n\t"

"pxor %%mm6, %%mm0 \n\t"

"pxor %%mm6, %%mm2 \n\t"

"movq %%mm0, (%%"FF_REG_a", %1, 2) \n\t"

"movq %%mm2, (%0, %1, 4) \n\t"

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

"lea (%0, %1), %%"FF_REG_a" \n\t"

"pcmpeqb %%mm6, %%mm6 \n\t" 

"movq (%%"FF_REG_a", %1, 2), %%mm1 \n\t" 

"movq (%0, %1, 4), %%mm0 \n\t" 

"pxor %%mm6, %%mm1 \n\t" 

PAVGB(%%mm1, %%mm0) 

"movq (%%"FF_REG_a", %1, 4), %%mm2 \n\t" 

"movq (%%"FF_REG_a", %1), %%mm3 \n\t" 

"pxor %%mm6, %%mm2 \n\t" 

"movq %%mm2, %%mm5 \n\t" 

"movq "MANGLE(b80)", %%mm4 \n\t" 

"lea (%%"FF_REG_a", %1, 4), %%"FF_REG_c"\n\t"

PAVGB(%%mm3, %%mm2) 

PAVGB(%%mm0, %%mm4) 

PAVGB(%%mm2, %%mm4) 

PAVGB(%%mm0, %%mm4) 

"movq (%%"FF_REG_a"), %%mm2 \n\t" 

"pxor %%mm6, %%mm2 \n\t" 

PAVGB(%%mm3, %%mm2) 

PAVGB((%0), %%mm1) 

"movq "MANGLE(b80)", %%mm3 \n\t" 

PAVGB(%%mm2, %%mm3) 

PAVGB(%%mm1, %%mm3) 

PAVGB(%%mm2, %%mm3) 

PAVGB((%%FF_REGc, %1), %%mm5) 

"movq (%%"FF_REG_c", %1, 2), %%mm1 \n\t" 

"pxor %%mm6, %%mm1 \n\t" 

PAVGB((%0, %1, 4), %%mm1) 

"movq "MANGLE(b80)", %%mm2 \n\t" 

PAVGB(%%mm5, %%mm2) 

PAVGB(%%mm1, %%mm2) 

PAVGB(%%mm5, %%mm2) 

"movq "MANGLE(b00)", %%mm1 \n\t" 

"movq "MANGLE(b00)", %%mm5 \n\t" 

"psubb %%mm2, %%mm1 \n\t" 

"psubb %%mm3, %%mm5 \n\t" 

PMAXUB(%%mm1, %%mm2) 

PMAXUB(%%mm5, %%mm3) 

PMINUB(%%mm2, %%mm3, %%mm1) 

"movq "MANGLE(b00)", %%mm7 \n\t" 

"movq %2, %%mm2 \n\t" 

PAVGB(%%mm6, %%mm2) 

"psubb %%mm6, %%mm2 \n\t"

"movq %%mm4, %%mm1 \n\t"

"pcmpgtb %%mm7, %%mm1 \n\t" 

"pxor %%mm1, %%mm4 \n\t"

"psubb %%mm1, %%mm4 \n\t" 

"pcmpgtb %%mm4, %%mm2 \n\t" 

"psubusb %%mm3, %%mm4 \n\t" 

"movq %%mm4, %%mm3 \n\t" 

"psubusb "MANGLE(b01)", %%mm4 \n\t"

PAVGB(%%mm7, %%mm4) 

PAVGB(%%mm7, %%mm4) 

"paddb %%mm3, %%mm4 \n\t" 

"pand %%mm2, %%mm4 \n\t"

"movq "MANGLE(b80)", %%mm5 \n\t" 

"psubb %%mm0, %%mm5 \n\t" 

"paddsb %%mm6, %%mm5 \n\t" 

"pcmpgtb %%mm5, %%mm7 \n\t" 

"pxor %%mm7, %%mm5 \n\t"

PMINUB(%%mm5, %%mm4, %%mm3) 

"pxor %%mm1, %%mm7 \n\t" 

"pand %%mm7, %%mm4 \n\t"

"movq (%%"FF_REG_a", %1, 2), %%mm0 \n\t"

"movq (%0, %1, 4), %%mm2 \n\t"

"pxor %%mm1, %%mm0 \n\t"

"pxor %%mm1, %%mm2 \n\t"

"paddb %%mm4, %%mm0 \n\t"

"psubb %%mm4, %%mm2 \n\t"

"pxor %%mm1, %%mm0 \n\t"

"pxor %%mm1, %%mm2 \n\t"

"movq %%mm0, (%%"FF_REG_a", %1, 2) \n\t"

"movq %%mm2, (%0, %1, 4) \n\t"

:

: "r" (src), "r" ((x86_reg)stride), "m" (c-&gt;pQPb)

NAMED_CONSTRAINTS_ADD(b80,b00,b01)

: "%"FF_REG_a, "%"FF_REG_c

);</asm>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>TEMPLATE_PP_MMX</name></expr></cpp:elif>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">4</literal></expr>]</index></expr>;</expr_stmt> 

<expr_stmt><expr><name>src</name><operator>+=</operator> <name>stride</name><operator>*</operator><literal type="number">4</literal></expr>;</expr_stmt>

<asm>__asm__ <specifier>volatile</specifier>(

"pxor %%mm7, %%mm7 \n\t"

"movq (%0), %%mm0 \n\t"

"movq %%mm0, %%mm1 \n\t"

"punpcklbw %%mm7, %%mm0 \n\t" 

"punpckhbw %%mm7, %%mm1 \n\t" 

"movq (%0, %1), %%mm2 \n\t"

"lea (%0, %1, 2), %%"FF_REG_a" \n\t"

"movq %%mm2, %%mm3 \n\t"

"punpcklbw %%mm7, %%mm2 \n\t" 

"punpckhbw %%mm7, %%mm3 \n\t" 

"movq (%%"FF_REG_a"), %%mm4 \n\t"

"movq %%mm4, %%mm5 \n\t"

"punpcklbw %%mm7, %%mm4 \n\t" 

"punpckhbw %%mm7, %%mm5 \n\t" 

"paddw %%mm0, %%mm0 \n\t" 

"paddw %%mm1, %%mm1 \n\t" 

"psubw %%mm4, %%mm2 \n\t" 

"psubw %%mm5, %%mm3 \n\t" 

"psubw %%mm2, %%mm0 \n\t" 

"psubw %%mm3, %%mm1 \n\t" 

"psllw $2, %%mm2 \n\t" 

"psllw $2, %%mm3 \n\t" 

"psubw %%mm2, %%mm0 \n\t" 

"psubw %%mm3, %%mm1 \n\t" 

"movq (%%"FF_REG_a", %1), %%mm2 \n\t"

"movq %%mm2, %%mm3 \n\t"

"punpcklbw %%mm7, %%mm2 \n\t" 

"punpckhbw %%mm7, %%mm3 \n\t" 

"psubw %%mm2, %%mm0 \n\t" 

"psubw %%mm3, %%mm1 \n\t" 

"psubw %%mm2, %%mm0 \n\t" 

"psubw %%mm3, %%mm1 \n\t" 

"movq %%mm0, (%3) \n\t" 

"movq %%mm1, 8(%3) \n\t" 

"movq (%%"FF_REG_a", %1, 2), %%mm0 \n\t"

"movq %%mm0, %%mm1 \n\t"

"punpcklbw %%mm7, %%mm0 \n\t" 

"punpckhbw %%mm7, %%mm1 \n\t" 

"psubw %%mm0, %%mm2 \n\t" 

"psubw %%mm1, %%mm3 \n\t" 

"movq %%mm2, 16(%3) \n\t" 

"movq %%mm3, 24(%3) \n\t" 

"paddw %%mm4, %%mm4 \n\t" 

"paddw %%mm5, %%mm5 \n\t" 

"psubw %%mm2, %%mm4 \n\t" 

"psubw %%mm3, %%mm5 \n\t" 

"lea (%%"FF_REG_a", %1), %0 \n\t"

"psllw $2, %%mm2 \n\t" 

"psllw $2, %%mm3 \n\t" 

"psubw %%mm2, %%mm4 \n\t" 

"psubw %%mm3, %%mm5 \n\t" 

"movq (%0, %1, 2), %%mm2 \n\t"

"movq %%mm2, %%mm3 \n\t"

"punpcklbw %%mm7, %%mm2 \n\t" 

"punpckhbw %%mm7, %%mm3 \n\t" 

"psubw %%mm2, %%mm4 \n\t" 

"psubw %%mm3, %%mm5 \n\t" 

"psubw %%mm2, %%mm4 \n\t" 

"psubw %%mm3, %%mm5 \n\t" 

"movq (%%"FF_REG_a", %1, 4), %%mm6 \n\t"

"punpcklbw %%mm7, %%mm6 \n\t" 

"psubw %%mm6, %%mm2 \n\t" 

"movq (%%"FF_REG_a", %1, 4), %%mm6 \n\t"

"punpckhbw %%mm7, %%mm6 \n\t" 

"psubw %%mm6, %%mm3 \n\t" 

"paddw %%mm0, %%mm0 \n\t" 

"paddw %%mm1, %%mm1 \n\t" 

"psubw %%mm2, %%mm0 \n\t" 

"psubw %%mm3, %%mm1 \n\t" 

"psllw $2, %%mm2 \n\t" 

"psllw $2, %%mm3 \n\t" 

"psubw %%mm2, %%mm0 \n\t" 

"psubw %%mm3, %%mm1 \n\t" 

"movq (%0, %1, 4), %%mm2 \n\t"

"movq %%mm2, %%mm3 \n\t"

"punpcklbw %%mm7, %%mm2 \n\t" 

"punpckhbw %%mm7, %%mm3 \n\t" 

"paddw %%mm2, %%mm2 \n\t" 

"paddw %%mm3, %%mm3 \n\t" 

"psubw %%mm2, %%mm0 \n\t" 

"psubw %%mm3, %%mm1 \n\t" 

"movq (%3), %%mm2 \n\t" 

"movq 8(%3), %%mm3 \n\t" 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>TEMPLATE_PP_MMXEXT</name></expr></cpp:if>

"movq %%mm7, %%mm6 \n\t" 

"psubw %%mm0, %%mm6 \n\t"

"pmaxsw %%mm6, %%mm0 \n\t" 

"movq %%mm7, %%mm6 \n\t" 

"psubw %%mm1, %%mm6 \n\t"

"pmaxsw %%mm6, %%mm1 \n\t" 

"movq %%mm7, %%mm6 \n\t" 

"psubw %%mm2, %%mm6 \n\t"

"pmaxsw %%mm6, %%mm2 \n\t" 

"movq %%mm7, %%mm6 \n\t" 

"psubw %%mm3, %%mm6 \n\t"

"pmaxsw %%mm6, %%mm3 \n\t" 

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

"movq %%mm7, %%mm6 \n\t" 

"pcmpgtw %%mm0, %%mm6 \n\t"

"pxor %%mm6, %%mm0 \n\t"

"psubw %%mm6, %%mm0 \n\t" 

"movq %%mm7, %%mm6 \n\t" 

"pcmpgtw %%mm1, %%mm6 \n\t"

"pxor %%mm6, %%mm1 \n\t"

"psubw %%mm6, %%mm1 \n\t" 

"movq %%mm7, %%mm6 \n\t" 

"pcmpgtw %%mm2, %%mm6 \n\t"

"pxor %%mm6, %%mm2 \n\t"

"psubw %%mm6, %%mm2 \n\t" 

"movq %%mm7, %%mm6 \n\t" 

"pcmpgtw %%mm3, %%mm6 \n\t"

"pxor %%mm6, %%mm3 \n\t"

"psubw %%mm6, %%mm3 \n\t" 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>TEMPLATE_PP_MMXEXT</name></expr></cpp:if>

"pminsw %%mm2, %%mm0 \n\t"

"pminsw %%mm3, %%mm1 \n\t"

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

"movq %%mm0, %%mm6 \n\t"

"psubusw %%mm2, %%mm6 \n\t"

"psubw %%mm6, %%mm0 \n\t"

"movq %%mm1, %%mm6 \n\t"

"psubusw %%mm3, %%mm6 \n\t"

"psubw %%mm6, %%mm1 \n\t"

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

"movd %2, %%mm2 \n\t" 

"punpcklbw %%mm7, %%mm2 \n\t"

"movq %%mm7, %%mm6 \n\t" 

"pcmpgtw %%mm4, %%mm6 \n\t" 

"pxor %%mm6, %%mm4 \n\t"

"psubw %%mm6, %%mm4 \n\t" 

"pcmpgtw %%mm5, %%mm7 \n\t" 

"pxor %%mm7, %%mm5 \n\t"

"psubw %%mm7, %%mm5 \n\t" 

"psllw $3, %%mm2 \n\t" 

"movq %%mm2, %%mm3 \n\t" 

"pcmpgtw %%mm4, %%mm2 \n\t"

"pcmpgtw %%mm5, %%mm3 \n\t"

"pand %%mm2, %%mm4 \n\t"

"pand %%mm3, %%mm5 \n\t"

"psubusw %%mm0, %%mm4 \n\t" 

"psubusw %%mm1, %%mm5 \n\t" 

"movq "MANGLE(w05)", %%mm2 \n\t" 

"pmullw %%mm2, %%mm4 \n\t"

"pmullw %%mm2, %%mm5 \n\t"

"movq "MANGLE(w20)", %%mm2 \n\t" 

"paddw %%mm2, %%mm4 \n\t"

"paddw %%mm2, %%mm5 \n\t"

"psrlw $6, %%mm4 \n\t"

"psrlw $6, %%mm5 \n\t"

"movq 16(%3), %%mm0 \n\t" 

"movq 24(%3), %%mm1 \n\t" 

"pxor %%mm2, %%mm2 \n\t"

"pxor %%mm3, %%mm3 \n\t"

"pcmpgtw %%mm0, %%mm2 \n\t" 

"pcmpgtw %%mm1, %%mm3 \n\t" 

"pxor %%mm2, %%mm0 \n\t"

"pxor %%mm3, %%mm1 \n\t"

"psubw %%mm2, %%mm0 \n\t" 

"psubw %%mm3, %%mm1 \n\t" 

"psrlw $1, %%mm0 \n\t" 

"psrlw $1, %%mm1 \n\t" 

"pxor %%mm6, %%mm2 \n\t"

"pxor %%mm7, %%mm3 \n\t"

"pand %%mm2, %%mm4 \n\t"

"pand %%mm3, %%mm5 \n\t"

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>TEMPLATE_PP_MMXEXT</name></expr></cpp:if>

"pminsw %%mm0, %%mm4 \n\t"

"pminsw %%mm1, %%mm5 \n\t"

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

"movq %%mm4, %%mm2 \n\t"

"psubusw %%mm0, %%mm2 \n\t"

"psubw %%mm2, %%mm4 \n\t"

"movq %%mm5, %%mm2 \n\t"

"psubusw %%mm1, %%mm2 \n\t"

"psubw %%mm2, %%mm5 \n\t"

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

"pxor %%mm6, %%mm4 \n\t"

"pxor %%mm7, %%mm5 \n\t"

"psubw %%mm6, %%mm4 \n\t"

"psubw %%mm7, %%mm5 \n\t"

"packsswb %%mm5, %%mm4 \n\t"

"movq (%0), %%mm0 \n\t"

"paddb %%mm4, %%mm0 \n\t"

"movq %%mm0, (%0) \n\t"

"movq (%0, %1), %%mm0 \n\t"

"psubb %%mm4, %%mm0 \n\t"

"movq %%mm0, (%0, %1) \n\t"

: "+r" (src)

: "r" ((x86_reg)stride), "m" (c-&gt;pQPb), "r"(tmp)

NAMED_CONSTRAINTS_ADD(w05,w20)

: "%"FF_REG_a

);</asm>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>l1</name><init>= <expr><name>stride</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>l2</name><init>= <expr><name>stride</name> <operator>+</operator> <name>l1</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>l3</name><init>= <expr><name>stride</name> <operator>+</operator> <name>l2</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>l4</name><init>= <expr><name>stride</name> <operator>+</operator> <name>l3</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>l5</name><init>= <expr><name>stride</name> <operator>+</operator> <name>l4</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>l6</name><init>= <expr><name>stride</name> <operator>+</operator> <name>l5</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>l7</name><init>= <expr><name>stride</name> <operator>+</operator> <name>l6</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>l8</name><init>= <expr><name>stride</name> <operator>+</operator> <name>l7</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>

<expr_stmt><expr><name>src</name><operator>+=</operator> <name>stride</name><operator>*</operator><literal type="number">3</literal></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>x</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name><operator>&lt;</operator><name>BLOCK_SIZE</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>middleEnergy</name><init>= <expr><literal type="number">5</literal><operator>*</operator><operator>(</operator><name><name>src</name><index>[<expr><name>l5</name></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[<expr><name>l4</name></expr>]</index></name><operator>)</operator> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><operator>(</operator><name><name>src</name><index>[<expr><name>l3</name></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[<expr><name>l6</name></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>FFABS</name><argument_list>(<argument><expr><name>middleEnergy</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">8</literal><operator>*</operator><name><name>c</name><operator>-&gt;</operator><name>QP</name></name></expr>)</condition><block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>q</name><init>=<expr><operator>(</operator><name><name>src</name><index>[<expr><name>l4</name></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[<expr><name>l5</name></expr>]</index></name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>leftEnergy</name><init>= <expr><literal type="number">5</literal><operator>*</operator><operator>(</operator><name><name>src</name><index>[<expr><name>l3</name></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[<expr><name>l2</name></expr>]</index></name><operator>)</operator> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><operator>(</operator><name><name>src</name><index>[<expr><name>l1</name></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[<expr><name>l4</name></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>rightEnergy</name><init>= <expr><literal type="number">5</literal><operator>*</operator><operator>(</operator><name><name>src</name><index>[<expr><name>l7</name></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[<expr><name>l6</name></expr>]</index></name><operator>)</operator> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><operator>(</operator><name><name>src</name><index>[<expr><name>l5</name></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[<expr><name>l8</name></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>d</name><init>= <expr><call><name>FFABS</name><argument_list>(<argument><expr><name>middleEnergy</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>FFMIN</name><argument_list>( <argument><expr><call><name>FFABS</name><argument_list>(<argument><expr><name>leftEnergy</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>FFABS</name><argument_list>(<argument><expr><name>rightEnergy</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>d</name><operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>d</name><operator>=</operator> <operator>(</operator><literal type="number">5</literal><operator>*</operator><name>d</name> <operator>+</operator> <literal type="number">32</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>d</name><operator>*=</operator> <call><name>FFSIGN</name><argument_list>(<argument><expr><operator>-</operator><name>middleEnergy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>q</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><name>l4</name></expr>]</index></name><operator>-=</operator> <name>d</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><name>l5</name></expr>]</index></name><operator>+=</operator> <name>d</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>src</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>TEMPLATE_PP_ALTIVEC</name></expr></cpp:if>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <name>RENAME</name></type>(<name>dering</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name><name>src</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>PPContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_7REGS</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>TEMPLATE_PP_MMXEXT</name> <operator>||</operator> <name>TEMPLATE_PP_3DNOW</name><operator>)</operator></expr></cpp:if>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">3</literal></expr>]</index></expr>;</expr_stmt>

<asm>__asm__ <specifier>volatile</specifier>(

"pxor %%mm6, %%mm6 \n\t"

"pcmpeqb %%mm7, %%mm7 \n\t"

"movq %2, %%mm0 \n\t"

"punpcklbw %%mm6, %%mm0 \n\t"

"psrlw $1, %%mm0 \n\t"

"psubw %%mm7, %%mm0 \n\t"

"packuswb %%mm0, %%mm0 \n\t"

"movq %%mm0, %3 \n\t"

"lea (%0, %1), %%"FF_REG_a" \n\t"

"lea (%%"FF_REG_a", %1, 4), %%"FF_REG_d"\n\t"

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>REAL_FIND_MIN_MAX</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>FIND_MIN_MAX</name></cpp:undef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>TEMPLATE_PP_MMXEXT</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REAL_FIND_MIN_MAX</name><parameter_list>(<parameter><type><name>addr</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>"movq " #addr ", %%mm0 \n\t""pminub %%mm0, %%mm7 \n\t""pmaxub %%mm0, %%mm6 \n\t"
</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REAL_FIND_MIN_MAX</name><parameter_list>(<parameter><type><name>addr</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>"movq " #addr ", %%mm0 \n\t""movq %%mm7, %%mm1 \n\t""psubusb %%mm0, %%mm6 \n\t""paddb %%mm0, %%mm6 \n\t""psubusb %%mm0, %%mm1 \n\t""psubb %%mm1, %%mm7 \n\t"
</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIND_MIN_MAX</name><parameter_list>(<parameter><type><name>addr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>REAL_FIND_MIN_MAX(addr)</cpp:value></cpp:define>

FIND_MIN_MAX((%%FF_REGa))

FIND_MIN_MAX((%%FF_REGa, %1))

FIND_MIN_MAX((%%FF_REGa, %1, 2))

FIND_MIN_MAX((%0, %1, 4))

FIND_MIN_MAX((%%FF_REGd))

FIND_MIN_MAX((%%FF_REGd, %1))

FIND_MIN_MAX((%%FF_REGd, %1, 2))

FIND_MIN_MAX((%0, %1, 8))

"movq %%mm7, %%mm4 \n\t"

"psrlq $8, %%mm7 \n\t"

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>TEMPLATE_PP_MMXEXT</name></expr></cpp:if>

"pminub %%mm4, %%mm7 \n\t" 

"pshufw $0xF9, %%mm7, %%mm4 \n\t"

"pminub %%mm4, %%mm7 \n\t" 

"pshufw $0xFE, %%mm7, %%mm4 \n\t"

"pminub %%mm4, %%mm7 \n\t"

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

"movq %%mm7, %%mm1 \n\t"

"psubusb %%mm4, %%mm1 \n\t"

"psubb %%mm1, %%mm7 \n\t"

"movq %%mm7, %%mm4 \n\t"

"psrlq $16, %%mm7 \n\t"

"movq %%mm7, %%mm1 \n\t"

"psubusb %%mm4, %%mm1 \n\t"

"psubb %%mm1, %%mm7 \n\t"

"movq %%mm7, %%mm4 \n\t"

"psrlq $32, %%mm7 \n\t"

"movq %%mm7, %%mm1 \n\t"

"psubusb %%mm4, %%mm1 \n\t"

"psubb %%mm1, %%mm7 \n\t"

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

"movq %%mm6, %%mm4 \n\t"

"psrlq $8, %%mm6 \n\t"

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>TEMPLATE_PP_MMXEXT</name></expr></cpp:if>

"pmaxub %%mm4, %%mm6 \n\t" 

"pshufw $0xF9, %%mm6, %%mm4 \n\t"

"pmaxub %%mm4, %%mm6 \n\t"

"pshufw $0xFE, %%mm6, %%mm4 \n\t"

"pmaxub %%mm4, %%mm6 \n\t"

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

"psubusb %%mm4, %%mm6 \n\t"

"paddb %%mm4, %%mm6 \n\t"

"movq %%mm6, %%mm4 \n\t"

"psrlq $16, %%mm6 \n\t"

"psubusb %%mm4, %%mm6 \n\t"

"paddb %%mm4, %%mm6 \n\t"

"movq %%mm6, %%mm4 \n\t"

"psrlq $32, %%mm6 \n\t"

"psubusb %%mm4, %%mm6 \n\t"

"paddb %%mm4, %%mm6 \n\t"

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

"movq %%mm6, %%mm0 \n\t" 

"psubb %%mm7, %%mm6 \n\t" 

"push %%"FF_REG_a" \n\t"

"movd %%mm6, %%eax \n\t"

"cmpb "MANGLE(deringThreshold)", %%al \n\t"

"pop %%"FF_REG_a" \n\t"

" jb 1f \n\t"

PAVGB(%%mm0, %%mm7) 

"punpcklbw %%mm7, %%mm7 \n\t"

"punpcklbw %%mm7, %%mm7 \n\t"

"punpcklbw %%mm7, %%mm7 \n\t"

"movq %%mm7, (%4) \n\t"

"movq (%0), %%mm0 \n\t" 

"movq %%mm0, %%mm1 \n\t" 

"movq %%mm0, %%mm2 \n\t" 

"psllq $8, %%mm1 \n\t"

"psrlq $8, %%mm2 \n\t"

"movd -4(%0), %%mm3 \n\t"

"movd 8(%0), %%mm4 \n\t"

"psrlq $24, %%mm3 \n\t"

"psllq $56, %%mm4 \n\t"

"por %%mm3, %%mm1 \n\t" 

"por %%mm4, %%mm2 \n\t" 

"movq %%mm1, %%mm3 \n\t" 

PAVGB(%%mm2, %%mm1) 

PAVGB(%%mm0, %%mm1) 

"psubusb %%mm7, %%mm0 \n\t"

"psubusb %%mm7, %%mm2 \n\t"

"psubusb %%mm7, %%mm3 \n\t"

"pcmpeqb "MANGLE(b00)", %%mm0 \n\t" 

"pcmpeqb "MANGLE(b00)", %%mm2 \n\t" 

"pcmpeqb "MANGLE(b00)", %%mm3 \n\t" 

"paddb %%mm2, %%mm0 \n\t"

"paddb %%mm3, %%mm0 \n\t"

"movq (%%"FF_REG_a"), %%mm2 \n\t" 

"movq %%mm2, %%mm3 \n\t" 

"movq %%mm2, %%mm4 \n\t" 

"psllq $8, %%mm3 \n\t"

"psrlq $8, %%mm4 \n\t"

"movd -4(%%"FF_REG_a"), %%mm5 \n\t"

"movd 8(%%"FF_REG_a"), %%mm6 \n\t"

"psrlq $24, %%mm5 \n\t"

"psllq $56, %%mm6 \n\t"

"por %%mm5, %%mm3 \n\t" 

"por %%mm6, %%mm4 \n\t" 

"movq %%mm3, %%mm5 \n\t" 

PAVGB(%%mm4, %%mm3) 

PAVGB(%%mm2, %%mm3) 

"psubusb %%mm7, %%mm2 \n\t"

"psubusb %%mm7, %%mm4 \n\t"

"psubusb %%mm7, %%mm5 \n\t"

"pcmpeqb "MANGLE(b00)", %%mm2 \n\t" 

"pcmpeqb "MANGLE(b00)", %%mm4 \n\t" 

"pcmpeqb "MANGLE(b00)", %%mm5 \n\t" 

"paddb %%mm4, %%mm2 \n\t"

"paddb %%mm5, %%mm2 \n\t"

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REAL_DERING_CORE</name><parameter_list>(<parameter><type><name>dst</name></type></parameter>,<parameter><type><name>src</name></type></parameter>,<parameter><type><name>ppsx</name></type></parameter>,<parameter><type><name>psx</name></type></parameter>,<parameter><type><name>sx</name></type></parameter>,<parameter><type><name>pplx</name></type></parameter>,<parameter><type><name>plx</name></type></parameter>,<parameter><type><name>lx</name></type></parameter>,<parameter><type><name>t0</name></type></parameter>,<parameter><type><name>t1</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>"movq " #src ", " #sx " \n\t" "movq " #sx ", " #lx " \n\t" "movq " #sx ", " #t0 " \n\t" "psllq $8, " #lx " \n\t""psrlq $8, " #t0 " \n\t""movd -4" #src ", " #t1 " \n\t""psrlq $24, " #t1 " \n\t""por " #t1 ", " #lx " \n\t" /* src[-1] */"movd 8" #src ", " #t1 " \n\t""psllq $56, " #t1 " \n\t""por " #t1 ", " #t0 " \n\t" /* src[+1] */"movq " #lx ", " #t1 " \n\t" /* src[-1] */PAVGB(t0, lx) /* (src[-1] + src[+1])/2 */PAVGB(sx, lx) /* (src[-1] + 2src[0] + src[+1])/4 */PAVGB(lx, pplx) "movq " #lx ", 8(%4) \n\t""movq (%4), " #lx " \n\t""psubusb " #lx ", " #t1 " \n\t""psubusb " #lx ", " #t0 " \n\t""psubusb " #lx ", " #sx " \n\t""movq "MANGLE(b00)", " #lx " \n\t""pcmpeqb " #lx ", " #t1 " \n\t" /* src[-1] &gt; a ? 0 : -1*/"pcmpeqb " #lx ", " #t0 " \n\t" /* src[+1] &gt; a ? 0 : -1*/"pcmpeqb " #lx ", " #sx " \n\t" /* src[0] &gt; a ? 0 : -1*/"paddb " #t1 ", " #t0 " \n\t""paddb " #t0 ", " #sx " \n\t"PAVGB(plx, pplx) /* filtered */"movq " #dst ", " #t0 " \n\t" /* dst */"movq " #t0 ", " #t1 " \n\t" /* dst */"psubusb %3, " #t0 " \n\t""paddusb %3, " #t1 " \n\t"PMAXUB(t0, pplx)PMINUB(t1, pplx, t0)"paddb " #sx ", " #ppsx " \n\t""paddb " #psx ", " #ppsx " \n\t""#paddb "MANGLE(b02)", " #ppsx " \n\t""pand "MANGLE(b08)", " #ppsx " \n\t""pcmpeqb " #lx ", " #ppsx " \n\t""pand " #ppsx ", " #pplx " \n\t""pandn " #dst ", " #ppsx " \n\t""por " #pplx ", " #ppsx " \n\t""movq " #ppsx ", " #dst " \n\t""movq 8(%4), " #lx " \n\t"
</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DERING_CORE</name><parameter_list>(<parameter><type><name>dst</name></type></parameter>,<parameter><type><name>src</name></type></parameter>,<parameter><type><name>ppsx</name></type></parameter>,<parameter><type><name>psx</name></type></parameter>,<parameter><type><name>sx</name></type></parameter>,<parameter><type><name>pplx</name></type></parameter>,<parameter><type><name>plx</name></type></parameter>,<parameter><type><name>lx</name></type></parameter>,<parameter><type><name>t0</name></type></parameter>,<parameter><type><name>t1</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>REAL_DERING_CORE(dst,src,ppsx,psx,sx,pplx,plx,lx,t0,t1)</cpp:value></cpp:define>

<comment type="block">/*

0000000

1111111

1111110

1111101

1111100

1111011

1111010

1111001

1111000

1110111

*/</comment>

<comment type="line">//DERING_CORE(dst ,src ,ppsx ,psx ,sx ,pplx ,plx ,lx ,t0 ,t1)</comment>

DERING_CORE((%%FF_REGa) ,(%%FF_REGa, %1) ,%%mm0,%%mm2,%%mm4,%%mm1,%%mm3,%%mm5,%%mm6,%%mm7)

DERING_CORE((%%FF_REGa, %1) ,(%%FF_REGa, %1, 2),%%mm2,%%mm4,%%mm0,%%mm3,%%mm5,%%mm1,%%mm6,%%mm7)

DERING_CORE((%%FF_REGa, %1, 2),(%0, %1, 4) ,%%mm4,%%mm0,%%mm2,%%mm5,%%mm1,%%mm3,%%mm6,%%mm7)

DERING_CORE((%0, %1, 4) ,(%%FF_REGd) ,%%mm0,%%mm2,%%mm4,%%mm1,%%mm3,%%mm5,%%mm6,%%mm7)

DERING_CORE((%%FF_REGd) ,(%%FF_REGd, %1) ,%%mm2,%%mm4,%%mm0,%%mm3,%%mm5,%%mm1,%%mm6,%%mm7)

DERING_CORE((%%FF_REGd, %1) ,(%%FF_REGd, %1, 2),%%mm4,%%mm0,%%mm2,%%mm5,%%mm1,%%mm3,%%mm6,%%mm7)

DERING_CORE((%%FF_REGd, %1, 2),(%0, %1, 8) ,%%mm0,%%mm2,%%mm4,%%mm1,%%mm3,%%mm5,%%mm6,%%mm7)

DERING_CORE((%0, %1, 8) ,(%%FF_REGd, %1, 4),%%mm2,%%mm4,%%mm0,%%mm3,%%mm5,%%mm1,%%mm6,%%mm7)

"1: \n\t"

: : "r" (src), "r" ((x86_reg)stride), "m" (c-&gt;pQPb), "m"(c-&gt;pQPb2), "q"(tmp)

NAMED_CONSTRAINTS_ADD(deringThreshold,b00,b02,b08)

: "%"FF_REG_a, "%"FF_REG_d

);</asm>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="line">// HAVE_7REGS &amp;&amp; (TEMPLATE_PP_MMXEXT || TEMPLATE_PP_3DNOW)</comment>

<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>min</name><init>=<expr><literal type="number">255</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>max</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>avg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>s</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>QP2</name><init>= <expr><name><name>c</name><operator>-&gt;</operator><name>QP</name></name><operator>/</operator><literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>src</name> <operator>--</operator></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>y</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>y</name><operator>&lt;</operator><literal type="number">9</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name><operator>=</operator> <name>src</name> <operator>+</operator> <name>stride</name><operator>*</operator><name>y</name></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>x</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>x</name><operator>&lt;</operator><literal type="number">9</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name>p</name> <operator>&gt;</operator> <name>max</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>max</name><operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name>p</name> <operator>&lt;</operator> <name>min</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>min</name><operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><name>avg</name><operator>=</operator> <operator>(</operator><name>min</name> <operator>+</operator> <name>max</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>max</name> <operator>-</operator> <name>min</name> <operator>&lt;</operator><name>deringThreshold</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<for>for<control>(<init><expr><name>y</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name><operator>&lt;</operator><literal type="number">10</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>t</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>src</name><index>[<expr><name>stride</name><operator>*</operator><name>y</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <name>avg</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>t</name><operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>src</name><index>[<expr><name>stride</name><operator>*</operator><name>y</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&gt;</operator> <name>avg</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>t</name><operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>src</name><index>[<expr><name>stride</name><operator>*</operator><name>y</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>&gt;</operator> <name>avg</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>t</name><operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>src</name><index>[<expr><name>stride</name><operator>*</operator><name>y</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>&gt;</operator> <name>avg</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>t</name><operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>src</name><index>[<expr><name>stride</name><operator>*</operator><name>y</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name> <operator>&gt;</operator> <name>avg</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>t</name><operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>src</name><index>[<expr><name>stride</name><operator>*</operator><name>y</name> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name> <operator>&gt;</operator> <name>avg</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>t</name><operator>+=</operator> <literal type="number">32</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>src</name><index>[<expr><name>stride</name><operator>*</operator><name>y</name> <operator>+</operator> <literal type="number">6</literal></expr>]</index></name> <operator>&gt;</operator> <name>avg</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>t</name><operator>+=</operator> <literal type="number">64</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>src</name><index>[<expr><name>stride</name><operator>*</operator><name>y</name> <operator>+</operator> <literal type="number">7</literal></expr>]</index></name> <operator>&gt;</operator> <name>avg</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>t</name><operator>+=</operator> <literal type="number">128</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>src</name><index>[<expr><name>stride</name><operator>*</operator><name>y</name> <operator>+</operator> <literal type="number">8</literal></expr>]</index></name> <operator>&gt;</operator> <name>avg</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>t</name><operator>+=</operator> <literal type="number">256</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>src</name><index>[<expr><name>stride</name><operator>*</operator><name>y</name> <operator>+</operator> <literal type="number">9</literal></expr>]</index></name> <operator>&gt;</operator> <name>avg</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>t</name><operator>+=</operator> <literal type="number">512</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>t</name> <operator>|=</operator> <operator>(</operator><operator>~</operator><name>t</name><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>&amp;=</operator> <operator>(</operator><name>t</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>t</name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><index>[<expr><name>y</name></expr>]</index></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for<control>(<init><expr><name>y</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>y</name><operator>&lt;</operator><literal type="number">9</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>t</name> <init>= <expr><name><name>s</name><index>[<expr><name>y</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <name><name>s</name><index>[<expr><name>y</name></expr>]</index></name> <operator>&amp;</operator> <name><name>s</name><index>[<expr><name>y</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>t</name><operator>|=</operator> <name>t</name><operator>&gt;&gt;</operator><literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><index>[<expr><name>y</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>=</operator> <name>t</name></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for<control>(<init><expr><name>y</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>y</name><operator>&lt;</operator><literal type="number">9</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>t</name> <init>= <expr><name><name>s</name><index>[<expr><name>y</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name><operator>=</operator> <name>src</name> <operator>+</operator> <name>stride</name><operator>*</operator><name>y</name></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>x</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>x</name><operator>&lt;</operator><literal type="number">9</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>t</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>x</name><operator>)</operator></expr>)</condition><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>f</name><init>= <expr><operator>(</operator><operator>*</operator><operator>(</operator><name>p</name><operator>-</operator><name>stride</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><operator>(</operator><operator>*</operator><operator>(</operator><name>p</name><operator>-</operator><name>stride</name><operator>)</operator><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>*</operator><operator>(</operator><name>p</name><operator>-</operator><name>stride</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator>

<operator>+</operator><literal type="number">2</literal><operator>*</operator><operator>(</operator><operator>*</operator><operator>(</operator><name>p</name> <operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>+</operator> <literal type="number">4</literal><operator>*</operator><operator>(</operator><operator>*</operator><name>p</name> <operator>)</operator> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><operator>(</operator><operator>*</operator><operator>(</operator><name>p</name> <operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator>

<operator>+</operator><operator>(</operator><operator>*</operator><operator>(</operator><name>p</name><operator>+</operator><name>stride</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><operator>(</operator><operator>*</operator><operator>(</operator><name>p</name><operator>+</operator><name>stride</name><operator>)</operator><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>*</operator><operator>(</operator><name>p</name><operator>+</operator><name>stride</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>f</name><operator>=</operator> <operator>(</operator><name>f</name> <operator>+</operator> <literal type="number">8</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">4</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_DERING_THRESHOLD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<asm>__asm__ <specifier>volatile</specifier>("emms\n\t":);</asm>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>uint64_t</name></type> <name>numPixels</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>x</name><operator>!=</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>x</name><operator>!=</operator><literal type="number">8</literal> <operator>&amp;&amp;</operator> <name>y</name><operator>!=</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>y</name><operator>!=</operator><literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>numPixels</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<comment type="line">// if((max-min)&lt;20 || (max-min)*QP&lt;200)</comment>

<comment type="line">// if((max-min)*QP &lt; 500)</comment>

<comment type="line">// if(max-min&lt;QP/2)</comment>

<if_stmt><if>if<condition>(<expr><name>max</name><operator>-</operator><name>min</name> <operator>&lt;</operator> <literal type="number">20</literal></expr>)</condition><block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>numSkipped</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>errorSum</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>worstQP</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>worstRange</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>worstDiff</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>diff</name><init>= <expr><operator>(</operator><name>f</name> <operator>-</operator> <operator>*</operator><name>p</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>absDiff</name><init>= <expr><call><name>FFABS</name><argument_list>(<argument><expr><name>diff</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>error</name><init>= <expr><name>diff</name><operator>*</operator><name>diff</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>x</name><operator>==</operator><literal type="number">1</literal> <operator>||</operator> <name>x</name><operator>==</operator><literal type="number">8</literal> <operator>||</operator> <name>y</name><operator>==</operator><literal type="number">1</literal> <operator>||</operator> <name>y</name><operator>==</operator><literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>numSkipped</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>absDiff</name> <operator>&gt;</operator> <name>worstDiff</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>worstDiff</name><operator>=</operator> <name>absDiff</name></expr>;</expr_stmt>

<expr_stmt><expr><name>worstQP</name><operator>=</operator> <name>QP</name></expr>;</expr_stmt>

<expr_stmt><expr><name>worstRange</name><operator>=</operator> <name>max</name><operator>-</operator><name>min</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>errorSum</name><operator>+=</operator> <name>error</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><literal type="number">1024LL</literal><operator>*</operator><literal type="number">1024LL</literal><operator>*</operator><literal type="number">1024LL</literal> <operator>%</operator> <name>numSkipped</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"sum:%1.3f, skip:%d, wQP:%d, "</literal>

<literal type="string">"wRange:%d, wDiff:%d, relSkip:%1.3f\n"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>errorSum</name><operator>/</operator><name>numSkipped</name></expr></argument>, <argument><expr><name>numSkipped</name></expr></argument>, <argument><expr><name>worstQP</name></expr></argument>, <argument><expr><name>worstRange</name></expr></argument>,

<argument><expr><name>worstDiff</name></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>numSkipped</name><operator>/</operator><name>numPixels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>+</operator> <name>QP2</name> <operator>&lt;</operator> <name>f</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>p</name><operator>=</operator> <operator>*</operator><name>p</name> <operator>+</operator> <name>QP2</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><operator>*</operator><name>p</name> <operator>-</operator> <name>QP2</name> <operator>&gt;</operator> <name>f</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>p</name><operator>=</operator> <operator>*</operator><name>p</name> <operator>-</operator> <name>QP2</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>p</name><operator>=</operator><name>f</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_DERING_THRESHOLD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name>max</name><operator>-</operator><name>min</name> <operator>&lt;</operator> <literal type="number">20</literal></expr>)</condition><block>{<block_content>

<for>for<control>(<init><expr><name>y</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>y</name><operator>&lt;</operator><literal type="number">9</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>t</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name><operator>=</operator> <name>src</name> <operator>+</operator> <name>stride</name><operator>*</operator><name>y</name></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>x</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>x</name><operator>&lt;</operator><literal type="number">9</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><operator>*</operator><name>p</name> <operator>+</operator> <literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<comment type="line">// src[0] = src[7]=src[stride*7]=src[stride*7 + 7]=255;</comment>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">//TEMPLATE_PP_MMXEXT || TEMPLATE_PP_3DNOW</comment>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">//TEMPLATE_PP_ALTIVEC</comment>

<comment type="block" format="doxygen">/**

* Deinterlace the given block by linearly interpolating every second line.

* will be called for every 8x8 block and can read &amp; write from line 4-15

* lines 0-3 have been passed through the deblock / dering filters already, but can be read, too.

* lines 4-12 will be read into the deblocking filter and should be deinterlaced

*/</comment>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <name>RENAME</name></type>(<name>deInterlaceInterpolateLinear</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name><name>src</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>TEMPLATE_PP_MMXEXT</name> <operator>||</operator> <name>TEMPLATE_PP_3DNOW</name></expr></cpp:if>

<expr_stmt><expr><name>src</name><operator>+=</operator> <literal type="number">4</literal><operator>*</operator><name>stride</name></expr>;</expr_stmt>

<asm>__asm__ <specifier>volatile</specifier>(

"lea (%0, %1), %%"FF_REG_a" \n\t"

"lea (%%"FF_REG_a", %1, 4), %%"FF_REG_c"\n\t"

<comment type="line">// 0 1 2 3 4 5 6 7 8 9</comment>

<comment type="line">// %0 eax eax+%1 eax+2%1 %0+4%1 ecx ecx+%1 ecx+2%1 %0+8%1 ecx+4%1</comment>

"movq (%0), %%mm0 \n\t"

"movq (%%"FF_REG_a", %1), %%mm1 \n\t"

PAVGB(%%mm1, %%mm0)

"movq %%mm0, (%%"FF_REG_a") \n\t"

"movq (%0, %1, 4), %%mm0 \n\t"

PAVGB(%%mm0, %%mm1)

"movq %%mm1, (%%"FF_REG_a", %1, 2) \n\t"

"movq (%%"FF_REG_c", %1), %%mm1 \n\t"

PAVGB(%%mm1, %%mm0)

"movq %%mm0, (%%"FF_REG_c") \n\t"

"movq (%0, %1, 8), %%mm0 \n\t"

PAVGB(%%mm0, %%mm1)

"movq %%mm1, (%%"FF_REG_c", %1, 2) \n\t"

: : "r" (src), "r" ((x86_reg)stride)

: "%"FF_REG_a, "%"FF_REG_c

);</asm>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>x</name></decl>;</decl_stmt>

<expr_stmt><expr><name>src</name><operator>+=</operator> <literal type="number">4</literal><operator>*</operator><name>stride</name></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>x</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name><operator>&lt;</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name>a</name><operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>src</name><index>[<expr><name>stride</name><operator>*</operator><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name><operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>src</name><index>[<expr><name>stride</name><operator>*</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>src</name><index>[<expr><name>stride</name><operator>*</operator><literal type="number">1</literal></expr>]</index></name><operator>=</operator> <operator>(</operator><name>a</name><operator>|</operator><name>b</name><operator>)</operator> <operator>-</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>a</name><operator>^</operator><name>b</name><operator>)</operator><operator>&amp;</operator><literal type="number">0xFEFEFEFEUL</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>a</name><operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>src</name><index>[<expr><name>stride</name><operator>*</operator><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>src</name><index>[<expr><name>stride</name><operator>*</operator><literal type="number">3</literal></expr>]</index></name><operator>=</operator> <operator>(</operator><name>a</name><operator>|</operator><name>b</name><operator>)</operator> <operator>-</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>a</name><operator>^</operator><name>b</name><operator>)</operator><operator>&amp;</operator><literal type="number">0xFEFEFEFEUL</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name><operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>src</name><index>[<expr><name>stride</name><operator>*</operator><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>src</name><index>[<expr><name>stride</name><operator>*</operator><literal type="number">5</literal></expr>]</index></name><operator>=</operator> <operator>(</operator><name>a</name><operator>|</operator><name>b</name><operator>)</operator> <operator>-</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>a</name><operator>^</operator><name>b</name><operator>)</operator><operator>&amp;</operator><literal type="number">0xFEFEFEFEUL</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>a</name><operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>src</name><index>[<expr><name>stride</name><operator>*</operator><literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>src</name><index>[<expr><name>stride</name><operator>*</operator><literal type="number">7</literal></expr>]</index></name><operator>=</operator> <operator>(</operator><name>a</name><operator>|</operator><name>b</name><operator>)</operator> <operator>-</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>a</name><operator>^</operator><name>b</name><operator>)</operator><operator>&amp;</operator><literal type="number">0xFEFEFEFEUL</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<comment type="block" format="doxygen">/**

* Deinterlace the given block by cubic interpolating every second line.

* will be called for every 8x8 block and can read &amp; write from line 4-15

* lines 0-3 have been passed through the deblock / dering filters already, but can be read, too.

* lines 4-12 will be read into the deblocking filter and should be deinterlaced

* this filter will read lines 3-15 and write 7-13

*/</comment>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <name>RENAME</name></type>(<name>deInterlaceInterpolateCubic</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name><name>src</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>TEMPLATE_PP_SSE2</name> <operator>||</operator> <name>TEMPLATE_PP_MMXEXT</name> <operator>||</operator> <name>TEMPLATE_PP_3DNOW</name></expr></cpp:if>

<expr_stmt><expr><name>src</name><operator>+=</operator> <name>stride</name><operator>*</operator><literal type="number">3</literal></expr>;</expr_stmt>

<asm>__asm__ <specifier>volatile</specifier>(

"lea (%0, %1), %%"FF_REG_a" \n\t"

"lea (%%"FF_REG_a", %1, 4), %%"FF_REG_d"\n\t"

"lea (%%"FF_REG_d", %1, 4), %%"FF_REG_c"\n\t"

"add %1, %%"FF_REG_c" \n\t"

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>TEMPLATE_PP_SSE2</name></expr></cpp:if>

"pxor %%xmm7, %%xmm7 \n\t"

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REAL_DEINT_CUBIC</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>,<parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>"movq " #a ", %%xmm0 \n\t""movq " #b ", %%xmm1 \n\t""movq " #d ", %%xmm2 \n\t""movq " #e ", %%xmm3 \n\t""pavgb %%xmm2, %%xmm1 \n\t""pavgb %%xmm3, %%xmm0 \n\t""punpcklbw %%xmm7, %%xmm0 \n\t""punpcklbw %%xmm7, %%xmm1 \n\t""psubw %%xmm1, %%xmm0 \n\t""psraw $3, %%xmm0 \n\t""psubw %%xmm0, %%xmm1 \n\t""packuswb %%xmm1, %%xmm1 \n\t""movlps %%xmm1, " #c " \n\t"
</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="line">//TEMPLATE_PP_SSE2</comment>

"pxor %%mm7, %%mm7 \n\t"

<comment type="line">// 0 1 2 3 4 5 6 7 8 9 10</comment>

<comment type="line">// %0 eax eax+%1 eax+2%1 %0+4%1 edx edx+%1 edx+2%1 %0+8%1 edx+4%1 ecx</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REAL_DEINT_CUBIC</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>,<parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>"movq " #a ", %%mm0 \n\t""movq " #b ", %%mm1 \n\t""movq " #d ", %%mm2 \n\t""movq " #e ", %%mm3 \n\t"PAVGB(%%mm2, %%mm1) /* (b+d) /2 */PAVGB(%%mm3, %%mm0) /* (a+e) /2 */"movq %%mm0, %%mm2 \n\t""punpcklbw %%mm7, %%mm0 \n\t""punpckhbw %%mm7, %%mm2 \n\t""movq %%mm1, %%mm3 \n\t""punpcklbw %%mm7, %%mm1 \n\t""punpckhbw %%mm7, %%mm3 \n\t""psubw %%mm1, %%mm0 \n\t" /* L(a+e - (b+d))/2 */"psubw %%mm3, %%mm2 \n\t" /* H(a+e - (b+d))/2 */"psraw $3, %%mm0 \n\t" /* L(a+e - (b+d))/16 */"psraw $3, %%mm2 \n\t" /* H(a+e - (b+d))/16 */"psubw %%mm0, %%mm1 \n\t" /* L(9b + 9d - a - e)/16 */"psubw %%mm2, %%mm3 \n\t" /* H(9b + 9d - a - e)/16 */"packuswb %%mm3, %%mm1 \n\t""movq %%mm1, " #c " \n\t"
</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">//TEMPLATE_PP_SSE2</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEINT_CUBIC</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>,<parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>REAL_DEINT_CUBIC(a,b,c,d,e)</cpp:value></cpp:define>

DEINT_CUBIC((%0) , (%%FF_REGa, %1), (%%FF_REGa, %1, 2), (%0, %1, 4) , (%%FF_REGd, %1))

DEINT_CUBIC((%%FF_REGa, %1), (%0, %1, 4) , (%%FF_REGd) , (%%FF_REGd, %1), (%0, %1, 8))

DEINT_CUBIC((%0, %1, 4) , (%%FF_REGd, %1), (%%FF_REGd, %1, 2), (%0, %1, 8) , (%%FF_REGc))

DEINT_CUBIC((%%FF_REGd, %1), (%0, %1, 8) , (%%FF_REGd, %1, 4), (%%FF_REGc) , (%%FF_REGc, %1, 2))

: : "r" (src), "r" ((x86_reg)stride)

:

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>TEMPLATE_PP_SSE2</name></expr></cpp:if>

XMM_CLOBBERS("%xmm0", "%xmm1", "%xmm2", "%xmm3", "%xmm7",)

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

"%"FF_REG_a, "%"FF_REG_d, "%"FF_REG_c

);</asm>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>REAL_DEINT_CUBIC</name></cpp:undef>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="line">//TEMPLATE_PP_SSE2 || TEMPLATE_PP_MMXEXT || TEMPLATE_PP_3DNOW</comment>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>

<expr_stmt><expr><name>src</name><operator>+=</operator> <name>stride</name><operator>*</operator><literal type="number">3</literal></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>x</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name><operator>&lt;</operator><literal type="number">8</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name><name>src</name><index>[<expr><name>stride</name><operator>*</operator><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><operator>(</operator><operator>-</operator><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">9</literal><operator>*</operator><name><name>src</name><index>[<expr><name>stride</name><operator>*</operator><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <literal type="number">9</literal><operator>*</operator><name><name>src</name><index>[<expr><name>stride</name><operator>*</operator><literal type="number">4</literal></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[<expr><name>stride</name><operator>*</operator><literal type="number">6</literal></expr>]</index></name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><name>stride</name><operator>*</operator><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><operator>(</operator><operator>-</operator><name><name>src</name><index>[<expr><name>stride</name><operator>*</operator><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <literal type="number">9</literal><operator>*</operator><name><name>src</name><index>[<expr><name>stride</name><operator>*</operator><literal type="number">4</literal></expr>]</index></name> <operator>+</operator> <literal type="number">9</literal><operator>*</operator><name><name>src</name><index>[<expr><name>stride</name><operator>*</operator><literal type="number">6</literal></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[<expr><name>stride</name><operator>*</operator><literal type="number">8</literal></expr>]</index></name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><name>stride</name><operator>*</operator><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><operator>(</operator><operator>-</operator><name><name>src</name><index>[<expr><name>stride</name><operator>*</operator><literal type="number">4</literal></expr>]</index></name> <operator>+</operator> <literal type="number">9</literal><operator>*</operator><name><name>src</name><index>[<expr><name>stride</name><operator>*</operator><literal type="number">6</literal></expr>]</index></name> <operator>+</operator> <literal type="number">9</literal><operator>*</operator><name><name>src</name><index>[<expr><name>stride</name><operator>*</operator><literal type="number">8</literal></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[<expr><name>stride</name><operator>*</operator><literal type="number">10</literal></expr>]</index></name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><name>stride</name><operator>*</operator><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><operator>(</operator><operator>-</operator><name><name>src</name><index>[<expr><name>stride</name><operator>*</operator><literal type="number">6</literal></expr>]</index></name> <operator>+</operator> <literal type="number">9</literal><operator>*</operator><name><name>src</name><index>[<expr><name>stride</name><operator>*</operator><literal type="number">8</literal></expr>]</index></name> <operator>+</operator> <literal type="number">9</literal><operator>*</operator><name><name>src</name><index>[<expr><name>stride</name><operator>*</operator><literal type="number">10</literal></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[<expr><name>stride</name><operator>*</operator><literal type="number">12</literal></expr>]</index></name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">//TEMPLATE_PP_SSE2 || TEMPLATE_PP_MMXEXT || TEMPLATE_PP_3DNOW</comment>

</block_content>}</block></function>

<comment type="block" format="doxygen">/**

* Deinterlace the given block by filtering every second line with a (-1 4 2 4 -1) filter.

* will be called for every 8x8 block and can read &amp; write from line 4-15

* lines 0-3 have been passed through the deblock / dering filters already, but can be read, too.

* lines 4-12 will be read into the deblocking filter and should be deinterlaced

* this filter will read lines 4-13 and write 5-11

*/</comment>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <name>RENAME</name></type>(<name>deInterlaceFF</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name><name>src</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>tmp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>TEMPLATE_PP_MMXEXT</name> <operator>||</operator> <name>TEMPLATE_PP_3DNOW</name></expr></cpp:if>

<expr_stmt><expr><name>src</name><operator>+=</operator> <name>stride</name><operator>*</operator><literal type="number">4</literal></expr>;</expr_stmt>

<asm>__asm__ <specifier>volatile</specifier>(

"lea (%0, %1), %%"FF_REG_a" \n\t"

"lea (%%"FF_REG_a", %1, 4), %%"FF_REG_d"\n\t"

"pxor %%mm7, %%mm7 \n\t"

"movq (%2), %%mm0 \n\t"

<comment type="line">// 0 1 2 3 4 5 6 7 8 9 10</comment>

<comment type="line">// %0 eax eax+%1 eax+2%1 %0+4%1 edx edx+%1 edx+2%1 %0+8%1 edx+4%1 ecx</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REAL_DEINT_FF</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>"movq " #a ", %%mm1 \n\t""movq " #b ", %%mm2 \n\t""movq " #c ", %%mm3 \n\t""movq " #d ", %%mm4 \n\t"PAVGB(%%mm3, %%mm1) PAVGB(%%mm4, %%mm0) "movq %%mm0, %%mm3 \n\t""punpcklbw %%mm7, %%mm0 \n\t""punpckhbw %%mm7, %%mm3 \n\t""movq %%mm1, %%mm4 \n\t""punpcklbw %%mm7, %%mm1 \n\t""punpckhbw %%mm7, %%mm4 \n\t""psllw $2, %%mm1 \n\t""psllw $2, %%mm4 \n\t""psubw %%mm0, %%mm1 \n\t""psubw %%mm3, %%mm4 \n\t""movq %%mm2, %%mm5 \n\t""movq %%mm2, %%mm0 \n\t""punpcklbw %%mm7, %%mm2 \n\t""punpckhbw %%mm7, %%mm5 \n\t""paddw %%mm2, %%mm1 \n\t""paddw %%mm5, %%mm4 \n\t""psraw $2, %%mm1 \n\t""psraw $2, %%mm4 \n\t""packuswb %%mm4, %%mm1 \n\t""movq %%mm1, " #b " \n\t"
</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEINT_FF</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>REAL_DEINT_FF(a,b,c,d)</cpp:value></cpp:define>

DEINT_FF((%0) , (%%FF_REGa) , (%%FF_REGa, %1), (%%FF_REGa, %1, 2))

DEINT_FF((%%FF_REGa, %1), (%%FF_REGa, %1, 2), (%0, %1, 4) , (%%FF_REGd) )

DEINT_FF((%0, %1, 4) , (%%FF_REGd) , (%%FF_REGd, %1), (%%FF_REGd, %1, 2))

DEINT_FF((%%FF_REGd, %1), (%%FF_REGd, %1, 2), (%0, %1, 8) , (%%FF_REGd, %1, 4))

"movq %%mm0, (%2) \n\t"

: : "r" (src), "r" ((x86_reg)stride), "r"(tmp)

: "%"FF_REG_a, "%"FF_REG_d

);</asm>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="line">//TEMPLATE_PP_MMXEXT || TEMPLATE_PP_3DNOW</comment>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>

<expr_stmt><expr><name>src</name><operator>+=</operator> <name>stride</name><operator>*</operator><literal type="number">4</literal></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>x</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name><operator>&lt;</operator><literal type="number">8</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>t1</name><init>= <expr><name><name>tmp</name><index>[<expr><name>x</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>t2</name><init>= <expr><name><name>src</name><index>[<expr><name>stride</name><operator>*</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><name>stride</name><operator>*</operator><literal type="number">1</literal></expr>]</index></name><operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><operator>(</operator><operator>-</operator><name>t1</name> <operator>+</operator> <literal type="number">4</literal><operator>*</operator><name><name>src</name><index>[<expr><name>stride</name><operator>*</operator><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>t2</name> <operator>+</operator> <literal type="number">4</literal><operator>*</operator><name><name>src</name><index>[<expr><name>stride</name><operator>*</operator><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[<expr><name>stride</name><operator>*</operator><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>t1</name><operator>=</operator> <name><name>src</name><index>[<expr><name>stride</name><operator>*</operator><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><name>stride</name><operator>*</operator><literal type="number">3</literal></expr>]</index></name><operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><operator>(</operator><operator>-</operator><name>t2</name> <operator>+</operator> <literal type="number">4</literal><operator>*</operator><name><name>src</name><index>[<expr><name>stride</name><operator>*</operator><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>t1</name> <operator>+</operator> <literal type="number">4</literal><operator>*</operator><name><name>src</name><index>[<expr><name>stride</name><operator>*</operator><literal type="number">4</literal></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[<expr><name>stride</name><operator>*</operator><literal type="number">5</literal></expr>]</index></name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>t2</name><operator>=</operator> <name><name>src</name><index>[<expr><name>stride</name><operator>*</operator><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><name>stride</name><operator>*</operator><literal type="number">5</literal></expr>]</index></name><operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><operator>(</operator><operator>-</operator><name>t1</name> <operator>+</operator> <literal type="number">4</literal><operator>*</operator><name><name>src</name><index>[<expr><name>stride</name><operator>*</operator><literal type="number">4</literal></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>t2</name> <operator>+</operator> <literal type="number">4</literal><operator>*</operator><name><name>src</name><index>[<expr><name>stride</name><operator>*</operator><literal type="number">6</literal></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[<expr><name>stride</name><operator>*</operator><literal type="number">7</literal></expr>]</index></name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>t1</name><operator>=</operator> <name><name>src</name><index>[<expr><name>stride</name><operator>*</operator><literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><name>stride</name><operator>*</operator><literal type="number">7</literal></expr>]</index></name><operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><operator>(</operator><operator>-</operator><name>t2</name> <operator>+</operator> <literal type="number">4</literal><operator>*</operator><name><name>src</name><index>[<expr><name>stride</name><operator>*</operator><literal type="number">6</literal></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>t1</name> <operator>+</operator> <literal type="number">4</literal><operator>*</operator><name><name>src</name><index>[<expr><name>stride</name><operator>*</operator><literal type="number">8</literal></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[<expr><name>stride</name><operator>*</operator><literal type="number">9</literal></expr>]</index></name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmp</name><index>[<expr><name>x</name></expr>]</index></name><operator>=</operator> <name>t1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">//TEMPLATE_PP_MMXEXT || TEMPLATE_PP_3DNOW</comment>

</block_content>}</block></function>

<comment type="block" format="doxygen">/**

* Deinterlace the given block by filtering every line with a (-1 2 6 2 -1) filter.

* will be called for every 8x8 block and can read &amp; write from line 4-15

* lines 0-3 have been passed through the deblock / dering filters already, but can be read, too.

* lines 4-12 will be read into the deblocking filter and should be deinterlaced

* this filter will read lines 4-13 and write 4-11

*/</comment>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <name>RENAME</name></type>(<name>deInterlaceL5</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name><name>src</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>tmp</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>tmp2</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>TEMPLATE_PP_MMXEXT</name> <operator>||</operator> <name>TEMPLATE_PP_3DNOW</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>HAVE_6REGS</name></expr></cpp:if>

<expr_stmt><expr><name>src</name><operator>+=</operator> <name>stride</name><operator>*</operator><literal type="number">4</literal></expr>;</expr_stmt>

<asm>__asm__ <specifier>volatile</specifier>(

"lea (%0, %1), %%"FF_REG_a" \n\t"

"lea (%%"FF_REG_a", %1, 4), %%"FF_REG_d"\n\t"

"pxor %%mm7, %%mm7 \n\t"

"movq (%2), %%mm0 \n\t"

"movq (%3), %%mm1 \n\t"

<comment type="line">// 0 1 2 3 4 5 6 7 8 9 10</comment>

<comment type="line">// %0 eax eax+%1 eax+2%1 %0+4%1 edx edx+%1 edx+2%1 %0+8%1 edx+4%1 ecx</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REAL_DEINT_L5</name><parameter_list>(<parameter><type><name>t1</name></type></parameter>,<parameter><type><name>t2</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>"movq " #a ", %%mm2 \n\t""movq " #b ", %%mm3 \n\t""movq " #c ", %%mm4 \n\t"PAVGB(t2, %%mm3) PAVGB(t1, %%mm4) "movq %%mm2, %%mm5 \n\t""movq %%mm2, " #t1 " \n\t""punpcklbw %%mm7, %%mm2 \n\t""punpckhbw %%mm7, %%mm5 \n\t""movq %%mm2, %%mm6 \n\t""paddw %%mm2, %%mm2 \n\t""paddw %%mm6, %%mm2 \n\t""movq %%mm5, %%mm6 \n\t""paddw %%mm5, %%mm5 \n\t""paddw %%mm6, %%mm5 \n\t""movq %%mm3, %%mm6 \n\t""punpcklbw %%mm7, %%mm3 \n\t""punpckhbw %%mm7, %%mm6 \n\t""paddw %%mm3, %%mm3 \n\t""paddw %%mm6, %%mm6 \n\t""paddw %%mm3, %%mm2 \n\t""paddw %%mm6, %%mm5 \n\t""movq %%mm4, %%mm6 \n\t""punpcklbw %%mm7, %%mm4 \n\t""punpckhbw %%mm7, %%mm6 \n\t""psubw %%mm4, %%mm2 \n\t""psubw %%mm6, %%mm5 \n\t""psraw $2, %%mm2 \n\t""psraw $2, %%mm5 \n\t""packuswb %%mm5, %%mm2 \n\t""movq %%mm2, " #a " \n\t"
</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEINT_L5</name><parameter_list>(<parameter><type><name>t1</name></type></parameter>,<parameter><type><name>t2</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>REAL_DEINT_L5(t1,t2,a,b,c)</cpp:value></cpp:define>

DEINT_L5(%%mm0, %%mm1, (%0) , (%%FF_REGa) , (%%FF_REGa, %1) )

DEINT_L5(%%mm1, %%mm0, (%%FF_REGa) , (%%FF_REGa, %1) , (%%FF_REGa, %1, 2))

DEINT_L5(%%mm0, %%mm1, (%%FF_REGa, %1) , (%%FF_REGa, %1, 2), (%0, %1, 4) )

DEINT_L5(%%mm1, %%mm0, (%%FF_REGa, %1, 2), (%0, %1, 4) , (%%FF_REGd) )

DEINT_L5(%%mm0, %%mm1, (%0, %1, 4) , (%%FF_REGd) , (%%FF_REGd, %1) )

DEINT_L5(%%mm1, %%mm0, (%%FF_REGd) , (%%FF_REGd, %1) , (%%FF_REGd, %1, 2))

DEINT_L5(%%mm0, %%mm1, (%%FF_REGd, %1) , (%%FF_REGd, %1, 2), (%0, %1, 8) )

DEINT_L5(%%mm1, %%mm0, (%%FF_REGd, %1, 2), (%0, %1, 8) , (%%FF_REGd, %1, 4))

"movq %%mm0, (%2) \n\t"

"movq %%mm1, (%3) \n\t"

: : "r" (src), "r" ((x86_reg)stride), "r"(tmp), "r"(tmp2)

: "%"FF_REG_a, "%"FF_REG_d

);</asm>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="line">//(TEMPLATE_PP_MMXEXT || TEMPLATE_PP_3DNOW) &amp;&amp; HAVE_6REGS</comment>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>

<expr_stmt><expr><name>src</name><operator>+=</operator> <name>stride</name><operator>*</operator><literal type="number">4</literal></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>x</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name><operator>&lt;</operator><literal type="number">8</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>t1</name><init>= <expr><name><name>tmp</name><index>[<expr><name>x</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>t2</name><init>= <expr><name><name>tmp2</name><index>[<expr><name>x</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>t3</name><init>= <expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><name>stride</name><operator>*</operator><literal type="number">0</literal></expr>]</index></name><operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><operator>(</operator><operator>-</operator><operator>(</operator><name>t1</name> <operator>+</operator> <name><name>src</name><index>[<expr><name>stride</name><operator>*</operator><literal type="number">2</literal></expr>]</index></name><operator>)</operator> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><operator>(</operator><name>t2</name> <operator>+</operator> <name><name>src</name><index>[<expr><name>stride</name><operator>*</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>+</operator> <literal type="number">6</literal><operator>*</operator><name>t3</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>t1</name><operator>=</operator> <name><name>src</name><index>[<expr><name>stride</name><operator>*</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><name>stride</name><operator>*</operator><literal type="number">1</literal></expr>]</index></name><operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><operator>(</operator><operator>-</operator><operator>(</operator><name>t2</name> <operator>+</operator> <name><name>src</name><index>[<expr><name>stride</name><operator>*</operator><literal type="number">3</literal></expr>]</index></name><operator>)</operator> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><operator>(</operator><name>t3</name> <operator>+</operator> <name><name>src</name><index>[<expr><name>stride</name><operator>*</operator><literal type="number">2</literal></expr>]</index></name><operator>)</operator> <operator>+</operator> <literal type="number">6</literal><operator>*</operator><name>t1</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>t2</name><operator>=</operator> <name><name>src</name><index>[<expr><name>stride</name><operator>*</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><name>stride</name><operator>*</operator><literal type="number">2</literal></expr>]</index></name><operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><operator>(</operator><operator>-</operator><operator>(</operator><name>t3</name> <operator>+</operator> <name><name>src</name><index>[<expr><name>stride</name><operator>*</operator><literal type="number">4</literal></expr>]</index></name><operator>)</operator> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><operator>(</operator><name>t1</name> <operator>+</operator> <name><name>src</name><index>[<expr><name>stride</name><operator>*</operator><literal type="number">3</literal></expr>]</index></name><operator>)</operator> <operator>+</operator> <literal type="number">6</literal><operator>*</operator><name>t2</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>t3</name><operator>=</operator> <name><name>src</name><index>[<expr><name>stride</name><operator>*</operator><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><name>stride</name><operator>*</operator><literal type="number">3</literal></expr>]</index></name><operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><operator>(</operator><operator>-</operator><operator>(</operator><name>t1</name> <operator>+</operator> <name><name>src</name><index>[<expr><name>stride</name><operator>*</operator><literal type="number">5</literal></expr>]</index></name><operator>)</operator> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><operator>(</operator><name>t2</name> <operator>+</operator> <name><name>src</name><index>[<expr><name>stride</name><operator>*</operator><literal type="number">4</literal></expr>]</index></name><operator>)</operator> <operator>+</operator> <literal type="number">6</literal><operator>*</operator><name>t3</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>t1</name><operator>=</operator> <name><name>src</name><index>[<expr><name>stride</name><operator>*</operator><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><name>stride</name><operator>*</operator><literal type="number">4</literal></expr>]</index></name><operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><operator>(</operator><operator>-</operator><operator>(</operator><name>t2</name> <operator>+</operator> <name><name>src</name><index>[<expr><name>stride</name><operator>*</operator><literal type="number">6</literal></expr>]</index></name><operator>)</operator> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><operator>(</operator><name>t3</name> <operator>+</operator> <name><name>src</name><index>[<expr><name>stride</name><operator>*</operator><literal type="number">5</literal></expr>]</index></name><operator>)</operator> <operator>+</operator> <literal type="number">6</literal><operator>*</operator><name>t1</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>t2</name><operator>=</operator> <name><name>src</name><index>[<expr><name>stride</name><operator>*</operator><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><name>stride</name><operator>*</operator><literal type="number">5</literal></expr>]</index></name><operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><operator>(</operator><operator>-</operator><operator>(</operator><name>t3</name> <operator>+</operator> <name><name>src</name><index>[<expr><name>stride</name><operator>*</operator><literal type="number">7</literal></expr>]</index></name><operator>)</operator> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><operator>(</operator><name>t1</name> <operator>+</operator> <name><name>src</name><index>[<expr><name>stride</name><operator>*</operator><literal type="number">6</literal></expr>]</index></name><operator>)</operator> <operator>+</operator> <literal type="number">6</literal><operator>*</operator><name>t2</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>t3</name><operator>=</operator> <name><name>src</name><index>[<expr><name>stride</name><operator>*</operator><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><name>stride</name><operator>*</operator><literal type="number">6</literal></expr>]</index></name><operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><operator>(</operator><operator>-</operator><operator>(</operator><name>t1</name> <operator>+</operator> <name><name>src</name><index>[<expr><name>stride</name><operator>*</operator><literal type="number">8</literal></expr>]</index></name><operator>)</operator> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><operator>(</operator><name>t2</name> <operator>+</operator> <name><name>src</name><index>[<expr><name>stride</name><operator>*</operator><literal type="number">7</literal></expr>]</index></name><operator>)</operator> <operator>+</operator> <literal type="number">6</literal><operator>*</operator><name>t3</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>t1</name><operator>=</operator> <name><name>src</name><index>[<expr><name>stride</name><operator>*</operator><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><name>stride</name><operator>*</operator><literal type="number">7</literal></expr>]</index></name><operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><operator>(</operator><operator>-</operator><operator>(</operator><name>t2</name> <operator>+</operator> <name><name>src</name><index>[<expr><name>stride</name><operator>*</operator><literal type="number">9</literal></expr>]</index></name><operator>)</operator> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><operator>(</operator><name>t3</name> <operator>+</operator> <name><name>src</name><index>[<expr><name>stride</name><operator>*</operator><literal type="number">8</literal></expr>]</index></name><operator>)</operator> <operator>+</operator> <literal type="number">6</literal><operator>*</operator><name>t1</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmp</name><index>[<expr><name>x</name></expr>]</index></name><operator>=</operator> <name>t3</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmp2</name><index>[<expr><name>x</name></expr>]</index></name><operator>=</operator> <name>t1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">//(TEMPLATE_PP_MMXEXT || TEMPLATE_PP_3DNOW) &amp;&amp; HAVE_6REGS</comment>

</block_content>}</block></function>

<comment type="block" format="doxygen">/**

* Deinterlace the given block by filtering all lines with a (1 2 1) filter.

* will be called for every 8x8 block and can read &amp; write from line 4-15

* lines 0-3 have been passed through the deblock / dering filters already, but can be read, too.

* lines 4-12 will be read into the deblocking filter and should be deinterlaced

* this filter will read lines 4-13 and write 4-11

*/</comment>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <name>RENAME</name></type>(<name>deInterlaceBlendLinear</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name><name>src</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>tmp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>TEMPLATE_PP_MMXEXT</name> <operator>||</operator> <name>TEMPLATE_PP_3DNOW</name></expr></cpp:if>

<expr_stmt><expr><name>src</name><operator>+=</operator> <literal type="number">4</literal><operator>*</operator><name>stride</name></expr>;</expr_stmt>

<asm>__asm__ <specifier>volatile</specifier>(

"lea (%0, %1), %%"FF_REG_a" \n\t"

"lea (%%"FF_REG_a", %1, 4), %%"FF_REG_d"\n\t"

<comment type="line">// 0 1 2 3 4 5 6 7 8 9</comment>

<comment type="line">// %0 eax eax+%1 eax+2%1 %0+4%1 edx edx+%1 edx+2%1 %0+8%1 edx+4%1</comment>

"movq (%2), %%mm0 \n\t" <comment type="line">// L0</comment>

"movq (%%"FF_REG_a"), %%mm1 \n\t" <comment type="line">// L2</comment>

PAVGB(%%mm1, %%mm0) <comment type="line">// L0+L2</comment>

"movq (%0), %%mm2 \n\t" <comment type="line">// L1</comment>

PAVGB(%%mm2, %%mm0)

"movq %%mm0, (%0) \n\t"

"movq (%%"FF_REG_a", %1), %%mm0 \n\t" <comment type="line">// L3</comment>

PAVGB(%%mm0, %%mm2) <comment type="line">// L1+L3</comment>

PAVGB(%%mm1, %%mm2) <comment type="line">// 2L2 + L1 + L3</comment>

"movq %%mm2, (%%"FF_REG_a") \n\t"

"movq (%%"FF_REG_a", %1, 2), %%mm2 \n\t" <comment type="line">// L4</comment>

PAVGB(%%mm2, %%mm1) <comment type="line">// L2+L4</comment>

PAVGB(%%mm0, %%mm1) <comment type="line">// 2L3 + L2 + L4</comment>

"movq %%mm1, (%%"FF_REG_a", %1) \n\t"

"movq (%0, %1, 4), %%mm1 \n\t" <comment type="line">// L5</comment>

PAVGB(%%mm1, %%mm0) <comment type="line">// L3+L5</comment>

PAVGB(%%mm2, %%mm0) <comment type="line">// 2L4 + L3 + L5</comment>

"movq %%mm0, (%%"FF_REG_a", %1, 2) \n\t"

"movq (%%"FF_REG_d"), %%mm0 \n\t" <comment type="line">// L6</comment>

PAVGB(%%mm0, %%mm2) <comment type="line">// L4+L6</comment>

PAVGB(%%mm1, %%mm2) <comment type="line">// 2L5 + L4 + L6</comment>

"movq %%mm2, (%0, %1, 4) \n\t"

"movq (%%"FF_REG_d", %1), %%mm2 \n\t" <comment type="line">// L7</comment>

PAVGB(%%mm2, %%mm1) <comment type="line">// L5+L7</comment>

PAVGB(%%mm0, %%mm1) <comment type="line">// 2L6 + L5 + L7</comment>

"movq %%mm1, (%%"FF_REG_d") \n\t"

"movq (%%"FF_REG_d", %1, 2), %%mm1 \n\t" <comment type="line">// L8</comment>

PAVGB(%%mm1, %%mm0) <comment type="line">// L6+L8</comment>

PAVGB(%%mm2, %%mm0) <comment type="line">// 2L7 + L6 + L8</comment>

"movq %%mm0, (%%"FF_REG_d", %1) \n\t"

"movq (%0, %1, 8), %%mm0 \n\t" <comment type="line">// L9</comment>

PAVGB(%%mm0, %%mm2) <comment type="line">// L7+L9</comment>

PAVGB(%%mm1, %%mm2) <comment type="line">// 2L8 + L7 + L9</comment>

"movq %%mm2, (%%"FF_REG_d", %1, 2) \n\t"

"movq %%mm1, (%2) \n\t"

: : "r" (src), "r" ((x86_reg)stride), "r" (tmp)

: "%"FF_REG_a, "%"FF_REG_d

);</asm>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="line">//TEMPLATE_PP_MMXEXT || TEMPLATE_PP_3DNOW</comment>

<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>, <decl><type ref="prev"/><name>x</name></decl>;</decl_stmt>

<expr_stmt><expr><name>src</name><operator>+=</operator> <literal type="number">4</literal><operator>*</operator><name>stride</name></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>x</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name><operator>&lt;</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name>a</name><operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>tmp</name><index>[<expr><name>stride</name><operator>*</operator><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name><operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>src</name><index>[<expr><name>stride</name><operator>*</operator><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name><operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>src</name><index>[<expr><name>stride</name><operator>*</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>a</name><operator>=</operator> <operator>(</operator><name>a</name><operator>&amp;</operator><name>c</name><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>a</name><operator>^</operator><name>c</name><operator>)</operator><operator>&amp;</operator><literal type="number">0xFEFEFEFEUL</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>src</name><index>[<expr><name>stride</name><operator>*</operator><literal type="number">0</literal></expr>]</index></name><operator>=</operator> <operator>(</operator><name>a</name><operator>|</operator><name>b</name><operator>)</operator> <operator>-</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>a</name><operator>^</operator><name>b</name><operator>)</operator><operator>&amp;</operator><literal type="number">0xFEFEFEFEUL</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>a</name><operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>src</name><index>[<expr><name>stride</name><operator>*</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name><operator>=</operator> <operator>(</operator><name>a</name><operator>&amp;</operator><name>b</name><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>a</name><operator>^</operator><name>b</name><operator>)</operator><operator>&amp;</operator><literal type="number">0xFEFEFEFEUL</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>src</name><index>[<expr><name>stride</name><operator>*</operator><literal type="number">1</literal></expr>]</index></name><operator>=</operator> <operator>(</operator><name>c</name><operator>|</operator><name>b</name><operator>)</operator> <operator>-</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>c</name><operator>^</operator><name>b</name><operator>)</operator><operator>&amp;</operator><literal type="number">0xFEFEFEFEUL</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name><operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>src</name><index>[<expr><name>stride</name><operator>*</operator><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name><operator>=</operator> <operator>(</operator><name>b</name><operator>&amp;</operator><name>c</name><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>b</name><operator>^</operator><name>c</name><operator>)</operator><operator>&amp;</operator><literal type="number">0xFEFEFEFEUL</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>src</name><index>[<expr><name>stride</name><operator>*</operator><literal type="number">2</literal></expr>]</index></name><operator>=</operator> <operator>(</operator><name>c</name><operator>|</operator><name>a</name><operator>)</operator> <operator>-</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>c</name><operator>^</operator><name>a</name><operator>)</operator><operator>&amp;</operator><literal type="number">0xFEFEFEFEUL</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name><operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>src</name><index>[<expr><name>stride</name><operator>*</operator><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>a</name><operator>=</operator> <operator>(</operator><name>a</name><operator>&amp;</operator><name>c</name><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>a</name><operator>^</operator><name>c</name><operator>)</operator><operator>&amp;</operator><literal type="number">0xFEFEFEFEUL</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>src</name><index>[<expr><name>stride</name><operator>*</operator><literal type="number">3</literal></expr>]</index></name><operator>=</operator> <operator>(</operator><name>a</name><operator>|</operator><name>b</name><operator>)</operator> <operator>-</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>a</name><operator>^</operator><name>b</name><operator>)</operator><operator>&amp;</operator><literal type="number">0xFEFEFEFEUL</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>a</name><operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>src</name><index>[<expr><name>stride</name><operator>*</operator><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name><operator>=</operator> <operator>(</operator><name>a</name><operator>&amp;</operator><name>b</name><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>a</name><operator>^</operator><name>b</name><operator>)</operator><operator>&amp;</operator><literal type="number">0xFEFEFEFEUL</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>src</name><index>[<expr><name>stride</name><operator>*</operator><literal type="number">4</literal></expr>]</index></name><operator>=</operator> <operator>(</operator><name>c</name><operator>|</operator><name>b</name><operator>)</operator> <operator>-</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>c</name><operator>^</operator><name>b</name><operator>)</operator><operator>&amp;</operator><literal type="number">0xFEFEFEFEUL</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name><operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>src</name><index>[<expr><name>stride</name><operator>*</operator><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name><operator>=</operator> <operator>(</operator><name>b</name><operator>&amp;</operator><name>c</name><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>b</name><operator>^</operator><name>c</name><operator>)</operator><operator>&amp;</operator><literal type="number">0xFEFEFEFEUL</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>src</name><index>[<expr><name>stride</name><operator>*</operator><literal type="number">5</literal></expr>]</index></name><operator>=</operator> <operator>(</operator><name>c</name><operator>|</operator><name>a</name><operator>)</operator> <operator>-</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>c</name><operator>^</operator><name>a</name><operator>)</operator><operator>&amp;</operator><literal type="number">0xFEFEFEFEUL</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name><operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>src</name><index>[<expr><name>stride</name><operator>*</operator><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>a</name><operator>=</operator> <operator>(</operator><name>a</name><operator>&amp;</operator><name>c</name><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>a</name><operator>^</operator><name>c</name><operator>)</operator><operator>&amp;</operator><literal type="number">0xFEFEFEFEUL</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>src</name><index>[<expr><name>stride</name><operator>*</operator><literal type="number">6</literal></expr>]</index></name><operator>=</operator> <operator>(</operator><name>a</name><operator>|</operator><name>b</name><operator>)</operator> <operator>-</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>a</name><operator>^</operator><name>b</name><operator>)</operator><operator>&amp;</operator><literal type="number">0xFEFEFEFEUL</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>a</name><operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>src</name><index>[<expr><name>stride</name><operator>*</operator><literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name><operator>=</operator> <operator>(</operator><name>a</name><operator>&amp;</operator><name>b</name><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>a</name><operator>^</operator><name>b</name><operator>)</operator><operator>&amp;</operator><literal type="number">0xFEFEFEFEUL</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>src</name><index>[<expr><name>stride</name><operator>*</operator><literal type="number">7</literal></expr>]</index></name><operator>=</operator> <operator>(</operator><name>c</name><operator>|</operator><name>b</name><operator>)</operator> <operator>-</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>c</name><operator>^</operator><name>b</name><operator>)</operator><operator>&amp;</operator><literal type="number">0xFEFEFEFEUL</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>tmp</name><index>[<expr><name>stride</name><operator>*</operator><literal type="number">0</literal></expr>]</index></name><operator>=</operator> <name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">//TEMPLATE_PP_MMXEXT || TEMPLATE_PP_3DNOW</comment>

</block_content>}</block></function>

<comment type="block" format="doxygen">/**

* Deinterlace the given block by applying a median filter to every second line.

* will be called for every 8x8 block and can read &amp; write from line 4-15,

* lines 0-3 have been passed through the deblock / dering filters already, but can be read, too.

* lines 4-12 will be read into the deblocking filter and should be deinterlaced

*/</comment>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <name>RENAME</name></type>(<name>deInterlaceMedian</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name><name>src</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>TEMPLATE_PP_MMX</name></expr></cpp:if>

<expr_stmt><expr><name>src</name><operator>+=</operator> <literal type="number">4</literal><operator>*</operator><name>stride</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>TEMPLATE_PP_MMXEXT</name></expr></cpp:if>

<asm>__asm__ <specifier>volatile</specifier>(

"lea (%0, %1), %%"FF_REG_a" \n\t"

"lea (%%"FF_REG_a", %1, 4), %%"FF_REG_d"\n\t"

<comment type="line">// 0 1 2 3 4 5 6 7 8 9</comment>

<comment type="line">// %0 eax eax+%1 eax+2%1 %0+4%1 edx edx+%1 edx+2%1 %0+8%1 edx+4%1</comment>

"movq (%0), %%mm0 \n\t"

"movq (%%"FF_REG_a", %1), %%mm2 \n\t"

"movq (%%"FF_REG_a"), %%mm1 \n\t"

"movq %%mm0, %%mm3 \n\t"

"pmaxub %%mm1, %%mm0 \n\t"

"pminub %%mm3, %%mm1 \n\t"

"pmaxub %%mm2, %%mm1 \n\t"

"pminub %%mm1, %%mm0 \n\t"

"movq %%mm0, (%%"FF_REG_a") \n\t"

"movq (%0, %1, 4), %%mm0 \n\t"

"movq (%%"FF_REG_a", %1, 2), %%mm1 \n\t"

"movq %%mm2, %%mm3 \n\t"

"pmaxub %%mm1, %%mm2 \n\t"

"pminub %%mm3, %%mm1 \n\t"

"pmaxub %%mm0, %%mm1 \n\t"

"pminub %%mm1, %%mm2 \n\t"

"movq %%mm2, (%%"FF_REG_a", %1, 2) \n\t"

"movq (%%"FF_REG_d"), %%mm2 \n\t"

"movq (%%"FF_REG_d", %1), %%mm1 \n\t"

"movq %%mm2, %%mm3 \n\t"

"pmaxub %%mm0, %%mm2 \n\t"

"pminub %%mm3, %%mm0 \n\t"

"pmaxub %%mm1, %%mm0 \n\t"

"pminub %%mm0, %%mm2 \n\t"

"movq %%mm2, (%%"FF_REG_d") \n\t"

"movq (%%"FF_REG_d", %1, 2), %%mm2 \n\t"

"movq (%0, %1, 8), %%mm0 \n\t"

"movq %%mm2, %%mm3 \n\t"

"pmaxub %%mm0, %%mm2 \n\t"

"pminub %%mm3, %%mm0 \n\t"

"pmaxub %%mm1, %%mm0 \n\t"

"pminub %%mm0, %%mm2 \n\t"

"movq %%mm2, (%%"FF_REG_d", %1, 2) \n\t"

: : "r" (src), "r" ((x86_reg)stride)

: "%"FF_REG_a, "%"FF_REG_d

);</asm>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="line">// MMX without MMX2</comment>

<asm>__asm__ <specifier>volatile</specifier>(

"lea (%0, %1), %%"FF_REG_a" \n\t"

"lea (%%"FF_REG_a", %1, 4), %%"FF_REG_d"\n\t"

<comment type="line">// 0 1 2 3 4 5 6 7 8 9</comment>

<comment type="line">// %0 eax eax+%1 eax+2%1 %0+4%1 edx edx+%1 edx+2%1 %0+8%1 edx+4%1</comment>

"pxor %%mm7, %%mm7 \n\t"

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REAL_MEDIAN</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>"movq " #a ", %%mm0 \n\t""movq " #b ", %%mm2 \n\t""movq " #c ", %%mm1 \n\t""movq %%mm0, %%mm3 \n\t""movq %%mm1, %%mm4 \n\t""movq %%mm2, %%mm5 \n\t""psubusb %%mm1, %%mm3 \n\t""psubusb %%mm2, %%mm4 \n\t""psubusb %%mm0, %%mm5 \n\t""pcmpeqb %%mm7, %%mm3 \n\t""pcmpeqb %%mm7, %%mm4 \n\t""pcmpeqb %%mm7, %%mm5 \n\t""movq %%mm3, %%mm6 \n\t""pxor %%mm4, %%mm3 \n\t""pxor %%mm5, %%mm4 \n\t""pxor %%mm6, %%mm5 \n\t""por %%mm3, %%mm1 \n\t""por %%mm4, %%mm2 \n\t""por %%mm5, %%mm0 \n\t""pand %%mm2, %%mm0 \n\t""pand %%mm1, %%mm0 \n\t""movq %%mm0, " #b " \n\t"
</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEDIAN</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>REAL_MEDIAN(a,b,c)</cpp:value></cpp:define>

MEDIAN((%0) , (%%FF_REGa) , (%%FF_REGa, %1))

MEDIAN((%%FF_REGa, %1), (%%FF_REGa, %1, 2), (%0, %1, 4))

MEDIAN((%0, %1, 4) , (%%FF_REGd) , (%%FF_REGd, %1))

MEDIAN((%%FF_REGd, %1), (%%FF_REGd, %1, 2), (%0, %1, 8))

: : "r" (src), "r" ((x86_reg)stride)

: "%"FF_REG_a, "%"FF_REG_d

);</asm>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">//TEMPLATE_PP_MMXEXT</comment>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="line">//TEMPLATE_PP_MMX</comment>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<expr_stmt><expr><name>src</name><operator>+=</operator> <literal type="number">4</literal><operator>*</operator><name>stride</name></expr>;</expr_stmt>

<comment type="line">// FIXME - there should be a way to do a few columns in parallel like w/mmx</comment>

<for>for<control>(<init><expr><name>x</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name><operator>&lt;</operator><literal type="number">8</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>colsrc</name> <init>= <expr><name>src</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name><operator>&lt;</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>, <decl><type ref="prev"/><name>d</name></decl>, <decl><type ref="prev"/><name>e</name></decl>, <decl><type ref="prev"/><name>f</name></decl>;</decl_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <name><name>colsrc</name><index>[<expr><literal type="number">0</literal></expr> ]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>colsrc</name><index>[<expr><name>stride</name></expr> ]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>colsrc</name><index>[<expr><name>stride</name><operator>*</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <operator>(</operator><name>a</name><operator>-</operator><name>b</name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">31</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <operator>(</operator><name>b</name><operator>-</operator><name>c</name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">31</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>f</name> <operator>=</operator> <operator>(</operator><name>c</name><operator>-</operator><name>a</name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">31</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>colsrc</name><index>[<expr><name>stride</name></expr> ]</index></name> <operator>=</operator> <operator>(</operator><name>a</name><operator>|</operator><operator>(</operator><name>d</name><operator>^</operator><name>f</name><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>b</name><operator>|</operator><operator>(</operator><name>d</name><operator>^</operator><name>e</name><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>c</name><operator>|</operator><operator>(</operator><name>e</name><operator>^</operator><name>f</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>colsrc</name> <operator>+=</operator> <name>stride</name><operator>*</operator><literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>src</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">//TEMPLATE_PP_MMX</comment>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>TEMPLATE_PP_MMX</name></expr></cpp:if>

<comment type="block" format="doxygen">/**

* Transpose and shift the given 8x8 Block into dst1 and dst2.

*/</comment>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <name>RENAME</name></type>(<name>transpose1</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst1</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst2</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcStride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<asm>__asm__(

"lea (%0, %1), %%"FF_REG_a" \n\t"

<comment type="line">// 0 1 2 3 4 5 6 7 8 9</comment>

<comment type="line">// %0 eax eax+%1 eax+2%1 %0+4%1 edx edx+%1 edx+2%1 %0+8%1 edx+4%1</comment>

"movq (%0), %%mm0 \n\t" <comment type="line">// 12345678</comment>

"movq (%%"FF_REG_a"), %%mm1 \n\t" <comment type="line">// abcdefgh</comment>

"movq %%mm0, %%mm2 \n\t" <comment type="line">// 12345678</comment>

"punpcklbw %%mm1, %%mm0 \n\t" <comment type="line">// 1a2b3c4d</comment>

"punpckhbw %%mm1, %%mm2 \n\t" <comment type="line">// 5e6f7g8h</comment>

"movq (%%"FF_REG_a", %1), %%mm1 \n\t"

"movq (%%"FF_REG_a", %1, 2), %%mm3 \n\t"

"movq %%mm1, %%mm4 \n\t"

"punpcklbw %%mm3, %%mm1 \n\t"

"punpckhbw %%mm3, %%mm4 \n\t"

"movq %%mm0, %%mm3 \n\t"

"punpcklwd %%mm1, %%mm0 \n\t"

"punpckhwd %%mm1, %%mm3 \n\t"

"movq %%mm2, %%mm1 \n\t"

"punpcklwd %%mm4, %%mm2 \n\t"

"punpckhwd %%mm4, %%mm1 \n\t"

"movd %%mm0, 128(%2) \n\t"

"psrlq $32, %%mm0 \n\t"

"movd %%mm0, 144(%2) \n\t"

"movd %%mm3, 160(%2) \n\t"

"psrlq $32, %%mm3 \n\t"

"movd %%mm3, 176(%2) \n\t"

"movd %%mm3, 48(%3) \n\t"

"movd %%mm2, 192(%2) \n\t"

"movd %%mm2, 64(%3) \n\t"

"psrlq $32, %%mm2 \n\t"

"movd %%mm2, 80(%3) \n\t"

"movd %%mm1, 96(%3) \n\t"

"psrlq $32, %%mm1 \n\t"

"movd %%mm1, 112(%3) \n\t"

"lea (%%"FF_REG_a", %1, 4), %%"FF_REG_a"\n\t"

"movq (%0, %1, 4), %%mm0 \n\t" <comment type="line">// 12345678</comment>

"movq (%%"FF_REG_a"), %%mm1 \n\t" <comment type="line">// abcdefgh</comment>

"movq %%mm0, %%mm2 \n\t" <comment type="line">// 12345678</comment>

"punpcklbw %%mm1, %%mm0 \n\t" <comment type="line">// 1a2b3c4d</comment>

"punpckhbw %%mm1, %%mm2 \n\t" <comment type="line">// 5e6f7g8h</comment>

"movq (%%"FF_REG_a", %1), %%mm1 \n\t"

"movq (%%"FF_REG_a", %1, 2), %%mm3 \n\t"

"movq %%mm1, %%mm4 \n\t"

"punpcklbw %%mm3, %%mm1 \n\t"

"punpckhbw %%mm3, %%mm4 \n\t"

"movq %%mm0, %%mm3 \n\t"

"punpcklwd %%mm1, %%mm0 \n\t"

"punpckhwd %%mm1, %%mm3 \n\t"

"movq %%mm2, %%mm1 \n\t"

"punpcklwd %%mm4, %%mm2 \n\t"

"punpckhwd %%mm4, %%mm1 \n\t"

"movd %%mm0, 132(%2) \n\t"

"psrlq $32, %%mm0 \n\t"

"movd %%mm0, 148(%2) \n\t"

"movd %%mm3, 164(%2) \n\t"

"psrlq $32, %%mm3 \n\t"

"movd %%mm3, 180(%2) \n\t"

"movd %%mm3, 52(%3) \n\t"

"movd %%mm2, 196(%2) \n\t"

"movd %%mm2, 68(%3) \n\t"

"psrlq $32, %%mm2 \n\t"

"movd %%mm2, 84(%3) \n\t"

"movd %%mm1, 100(%3) \n\t"

"psrlq $32, %%mm1 \n\t"

"movd %%mm1, 116(%3) \n\t"

:: "r" (src), "r" ((x86_reg)srcStride), "r" (dst1), "r" (dst2)

: "%"FF_REG_a

);</asm>

</block_content>}</block></function>

<comment type="block" format="doxygen">/**

* Transpose the given 8x8 block.

*/</comment>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <name>RENAME</name></type>(<name>transpose2</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dstStride</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<asm>__asm__(

"lea (%0, %1), %%"FF_REG_a" \n\t"

"lea (%%"FF_REG_a",%1,4), %%"FF_REG_d" \n\t"

<comment type="line">// 0 1 2 3 4 5 6 7 8 9</comment>

<comment type="line">// %0 eax eax+%1 eax+2%1 %0+4%1 edx edx+%1 edx+2%1 %0+8%1 edx+4%1</comment>

"movq (%2), %%mm0 \n\t" <comment type="line">// 12345678</comment>

"movq 16(%2), %%mm1 \n\t" <comment type="line">// abcdefgh</comment>

"movq %%mm0, %%mm2 \n\t" <comment type="line">// 12345678</comment>

"punpcklbw %%mm1, %%mm0 \n\t" <comment type="line">// 1a2b3c4d</comment>

"punpckhbw %%mm1, %%mm2 \n\t" <comment type="line">// 5e6f7g8h</comment>

"movq 32(%2), %%mm1 \n\t"

"movq 48(%2), %%mm3 \n\t"

"movq %%mm1, %%mm4 \n\t"

"punpcklbw %%mm3, %%mm1 \n\t"

"punpckhbw %%mm3, %%mm4 \n\t"

"movq %%mm0, %%mm3 \n\t"

"punpcklwd %%mm1, %%mm0 \n\t"

"punpckhwd %%mm1, %%mm3 \n\t"

"movq %%mm2, %%mm1 \n\t"

"punpcklwd %%mm4, %%mm2 \n\t"

"punpckhwd %%mm4, %%mm1 \n\t"

"movd %%mm0, (%0) \n\t"

"psrlq $32, %%mm0 \n\t"

"movd %%mm0, (%%"FF_REG_a") \n\t"

"movd %%mm3, (%%"FF_REG_a", %1) \n\t"

"psrlq $32, %%mm3 \n\t"

"movd %%mm3, (%%"FF_REG_a", %1, 2) \n\t"

"movd %%mm2, (%0, %1, 4) \n\t"

"psrlq $32, %%mm2 \n\t"

"movd %%mm2, (%%"FF_REG_d") \n\t"

"movd %%mm1, (%%"FF_REG_d", %1) \n\t"

"psrlq $32, %%mm1 \n\t"

"movd %%mm1, (%%"FF_REG_d", %1, 2) \n\t"

"movq 64(%2), %%mm0 \n\t" <comment type="line">// 12345678</comment>

"movq 80(%2), %%mm1 \n\t" <comment type="line">// abcdefgh</comment>

"movq %%mm0, %%mm2 \n\t" <comment type="line">// 12345678</comment>

"punpcklbw %%mm1, %%mm0 \n\t" <comment type="line">// 1a2b3c4d</comment>

"punpckhbw %%mm1, %%mm2 \n\t" <comment type="line">// 5e6f7g8h</comment>

"movq 96(%2), %%mm1 \n\t"

"movq 112(%2), %%mm3 \n\t"

"movq %%mm1, %%mm4 \n\t"

"punpcklbw %%mm3, %%mm1 \n\t"

"punpckhbw %%mm3, %%mm4 \n\t"

"movq %%mm0, %%mm3 \n\t"

"punpcklwd %%mm1, %%mm0 \n\t"

"punpckhwd %%mm1, %%mm3 \n\t"

"movq %%mm2, %%mm1 \n\t"

"punpcklwd %%mm4, %%mm2 \n\t"

"punpckhwd %%mm4, %%mm1 \n\t"

"movd %%mm0, 4(%0) \n\t"

"psrlq $32, %%mm0 \n\t"

"movd %%mm0, 4(%%"FF_REG_a") \n\t"

"movd %%mm3, 4(%%"FF_REG_a", %1) \n\t"

"psrlq $32, %%mm3 \n\t"

"movd %%mm3, 4(%%"FF_REG_a", %1, 2) \n\t"

"movd %%mm2, 4(%0, %1, 4) \n\t"

"psrlq $32, %%mm2 \n\t"

"movd %%mm2, 4(%%"FF_REG_d") \n\t"

"movd %%mm1, 4(%%"FF_REG_d", %1) \n\t"

"psrlq $32, %%mm1 \n\t"

"movd %%mm1, 4(%%"FF_REG_d", %1, 2) \n\t"

:: "r" (dst), "r" ((x86_reg)dstStride), "r" (src)

: "%"FF_REG_a, "%"FF_REG_d

);</asm>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">//TEMPLATE_PP_MMX</comment>

<comment type="line">//static long test=0;</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>TEMPLATE_PP_ALTIVEC</name></expr></cpp:if>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <name>RENAME</name></type>(<name>tempNoiseReducer</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>tempBlurred</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>tempBlurredPast</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>maxNoise</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<comment type="line">// to save a register (FIXME do this outside of the loops)</comment>

<expr_stmt><expr><name><name>tempBlurredPast</name><index>[<expr><literal type="number">127</literal></expr>]</index></name><operator>=</operator> <name><name>maxNoise</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tempBlurredPast</name><index>[<expr><literal type="number">128</literal></expr>]</index></name><operator>=</operator> <name><name>maxNoise</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tempBlurredPast</name><index>[<expr><literal type="number">129</literal></expr>]</index></name><operator>=</operator> <name><name>maxNoise</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FAST_L2_DIFF</name></cpp:macro></cpp:define>

<comment type="line">//#define L1_DIFF //u should change the thresholds too if u try that one</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>TEMPLATE_PP_MMXEXT</name> <operator>||</operator> <name>TEMPLATE_PP_3DNOW</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>HAVE_6REGS</name></expr></cpp:if>

<asm>__asm__ <specifier>volatile</specifier>(

"lea (%2, %2, 2), %%"FF_REG_a" \n\t" <comment type="line">// 3*stride</comment>

"lea (%2, %2, 4), %%"FF_REG_d" \n\t" <comment type="line">// 5*stride</comment>

"lea (%%"FF_REG_d", %2, 2), %%"FF_REG_c"\n\t" <comment type="line">// 7*stride</comment>

<comment type="line">// 0 1 2 3 4 5 6 7 8 9</comment>

<comment type="line">// %x %x+%2 %x+2%2 %x+eax %x+4%2 %x+edx %x+2eax %x+ecx %x+8%2</comment>

<comment type="line">//FIXME reorder?</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><macro><name>defined</name><argument_list>(<argument>L1_DIFF <comment type="line">//needs mmx2)</comment>
<literal type="string">"movq (%0), %%mm0 \n\t"</literal> <comment type="line">// L0</comment>

<literal type="string">"psadbw (%1), %%mm0 \n\t"</literal> <comment type="line">// |L0-R0|</comment>

<literal type="string">"movq (%0, %2), %%mm1 \n\t"</literal> <comment type="line">// L1</comment>

<literal type="string">"psadbw (%1, %2), %%mm1 \n\t"</literal> <comment type="line">// |L1-R1|</comment>

<literal type="string">"movq (%0, %2, 2), %%mm2 \n\t"</literal> <comment type="line">// L2</comment>

<literal type="string">"psadbw (%1, %2, 2), %%mm2 \n\t"</literal> <comment type="line">// |L2-R2|</comment>

<literal type="string">"movq (%0, %%"</literal>FF_REG_a<literal type="string">"), %%mm3 \n\t"</literal> <comment type="line">// L3</comment>

<literal type="string">"psadbw (%1, %%"</literal>FF_REG_a<literal type="string">"), %%mm3 \n\t"</literal> <comment type="line">// |L3-R3|</comment>

<literal type="string">"movq (%0, %2, 4), %%mm4 \n\t"</literal> <comment type="line">// L4</comment>

<literal type="string">"paddw %%mm1, %%mm0 \n\t"</literal>

<literal type="string">"psadbw (%1, %2, 4), %%mm4 \n\t"</literal> <comment type="line">// |L4-R4|</comment>

<literal type="string">"movq (%0, %%"</literal>FF_REG_d<literal type="string">"), %%mm5 \n\t"</literal> <comment type="line">// L5</comment>

<literal type="string">"paddw %%mm2, %%mm0 \n\t"</literal>

<literal type="string">"psadbw (%1, %%"</literal>FF_REG_d<literal type="string">"), %%mm5 \n\t"</literal> <comment type="line">// |L5-R5|</comment>

<literal type="string">"movq (%0, %%"</literal>FF_REG_a<literal type="string">", 2), %%mm6 \n\t"</literal> <comment type="line">// L6</comment>

<literal type="string">"paddw %%mm3, %%mm0 \n\t"</literal>

<literal type="string">"psadbw (%1, %%"</literal>FF_REG_a<literal type="string">", 2), %%mm6 \n\t"</literal> <comment type="line">// |L6-R6|</comment>

<literal type="string">"movq (%0, %%"</literal>FF_REG_c<literal type="string">"), %%mm7 \n\t"</literal> <comment type="line">// L7</comment>

<literal type="string">"paddw %%mm4, %%mm0 \n\t"</literal>

<literal type="string">"psadbw (%1, %%"</literal>FF_REG_c<literal type="string">"), %%mm7 \n\t"</literal> <comment type="line">// |L7-R7|</comment>

<literal type="string">"paddw %%mm5, %%mm6 \n\t"</literal>

<literal type="string">"paddw %%mm7, %%mm6 \n\t"</literal>

<literal type="string">"paddw %%mm6, %%mm0 \n\t"</literal>

#else <comment type="line">//L1_DIFF</comment>

#if defined (FAST_L2_DIFF)

<literal type="string">"pcmpeqb %%mm7, %%mm7 \n\t"</literal>

<literal type="string">"movq "</literal>MANGLE(b80)<literal type="string">", %%mm6 \n\t"</literal>

<literal type="string">"pxor %%mm0, %%mm0 \n\t"</literal>

#define REAL_L2_DIFF_CORE(a, b)<literal type="string">"movq "</literal> #a <literal type="string">", %%mm5 \n\t""</literal>movq <literal type="string">" #b "</literal></argument>, <argument>%%mm2 \n\t<literal type="string">""</literal>pxor %%mm7</argument>, <argument>%%mm2 \n\t<literal type="string">"PAVGB(%%mm2, %%mm5)"</literal>paddb %%mm6</argument>, <argument>%%mm5 \n\t<literal type="string">""</literal>movq %%mm5</argument>, <argument>%%mm2 \n\t<literal type="string">""</literal>psllw $8</argument>, <argument>%%mm5 \n\t<literal type="string">""</literal>pmaddwd %%mm5</argument>, <argument>%%mm5 \n\t<literal type="string">""</literal>pmaddwd %%mm2</argument>, <argument>%%mm2 \n\t<literal type="string">""</literal>paddd %%mm2</argument>, <argument>%%mm5 \n\t<literal type="string">""</literal>psrld $14</argument>, <argument>%%mm5 \n\t<literal type="string">""</literal>paddd %%mm5</argument>, <argument>%%mm0 \n\t<literal type="string">"
</literal>
#else <comment type="line">//defined (FAST_L2_DIFF)</comment>

<literal type="string">"pxor %%mm7, %%mm7 \n\t"</literal>

<literal type="string">"pxor %%mm0, %%mm0 \n\t"</literal>

#define REAL_L2_DIFF_CORE(a, b)<literal type="string">"movq "</literal> #a <literal type="string">", %%mm5 \n\t""</literal>movq <literal type="string">" #b "</literal></argument>, <argument>%%mm2 \n\t<literal type="string">""</literal>movq %%mm5</argument>, <argument>%%mm1 \n\t<literal type="string">""</literal>movq %%mm2</argument>, <argument>%%mm3 \n\t<literal type="string">""</literal>punpcklbw %%mm7</argument>, <argument>%%mm5 \n\t<literal type="string">""</literal>punpckhbw %%mm7</argument>, <argument>%%mm1 \n\t<literal type="string">""</literal>punpcklbw %%mm7</argument>, <argument>%%mm2 \n\t<literal type="string">""</literal>punpckhbw %%mm7</argument>, <argument>%%mm3 \n\t<literal type="string">""</literal>psubw %%mm2</argument>, <argument>%%mm5 \n\t<literal type="string">""</literal>psubw %%mm3</argument>, <argument>%%mm1 \n\t<literal type="string">""</literal>pmaddwd %%mm5</argument>, <argument>%%mm5 \n\t<literal type="string">""</literal>pmaddwd %%mm1</argument>, <argument>%%mm1 \n\t<literal type="string">""</literal>paddd %%mm1</argument>, <argument>%%mm5 \n\t<literal type="string">""</literal>paddd %%mm5</argument>, <argument>%%mm0 \n\t<literal type="string">"
</literal>
#endif <comment type="line">//defined (FAST_L2_DIFF)</comment>

#define L2_DIFF_CORE(a, b) REAL_L2_DIFF_CORE(a, b)

L2_DIFF_CORE((%<literal type="number">0</literal>) , (%<literal type="number">1</literal>))

L2_DIFF_CORE((%<literal type="number">0</literal>, %<literal type="number">2</literal>) , (%<literal type="number">1</literal>, %<literal type="number">2</literal>))

L2_DIFF_CORE((%<literal type="number">0</literal>, %<literal type="number">2</literal>, <literal type="number">2</literal>) , (%<literal type="number">1</literal>, %<literal type="number">2</literal>, <literal type="number">2</literal>))

L2_DIFF_CORE((%<literal type="number">0</literal>, %%FF_REGa) , (%<literal type="number">1</literal>, %%FF_REGa))

L2_DIFF_CORE((%<literal type="number">0</literal>, %<literal type="number">2</literal>, <literal type="number">4</literal>) , (%<literal type="number">1</literal>, %<literal type="number">2</literal>, <literal type="number">4</literal>))

L2_DIFF_CORE((%<literal type="number">0</literal>, %%FF_REGd) , (%<literal type="number">1</literal>, %%FF_REGd))

L2_DIFF_CORE((%<literal type="number">0</literal>, %%FF_REGa,<literal type="number">2</literal>), (%<literal type="number">1</literal>, %%FF_REGa,<literal type="number">2</literal>))

L2_DIFF_CORE((%<literal type="number">0</literal>, %%FF_REGc) , (%<literal type="number">1</literal>, %%FF_REGc))

#endif <comment type="line">//L1_DIFF</comment>

<literal type="string">"movq %%mm0, %%mm4 \n\t"</literal>

<literal type="string">"psrlq $32, %%mm0 \n\t"</literal>

<literal type="string">"paddd %%mm0, %%mm4 \n\t"</literal>

<literal type="string">"movd %%mm4, %%ecx \n\t"</literal>

<literal type="string">"shll $2, %%ecx \n\t"</literal>

<literal type="string">"mov %3, %%"</literal>FF_REG_d<literal type="string">" \n\t"</literal>

<literal type="string">"addl -4(%%"</literal>FF_REG_d<literal type="string">"), %%ecx \n\t"</literal>

<literal type="string">"addl 4(%%"</literal>FF_REG_d<literal type="string">"), %%ecx \n\t"</literal>

<literal type="string">"addl -1024(%%"</literal>FF_REG_d<literal type="string">"), %%ecx \n\t"</literal>

<literal type="string">"addl $4, %%ecx \n\t"</literal>

<literal type="string">"addl 1024(%%"</literal>FF_REG_d<literal type="string">"), %%ecx \n\t"</literal>

<literal type="string">"shrl $3, %%ecx \n\t"</literal>

<literal type="string">"movl %%ecx, (%%"</literal>FF_REG_d<literal type="string">") \n\t"</literal>

<comment type="line">// "mov %3, %%"FF_REG_c" \n\t"</comment>

<comment type="line">// "mov %%"FF_REG_c", test \n\t"</comment>

<comment type="line">// "jmp 4f \n\t"</comment>

<literal type="string">"cmpl 512(%%"</literal>FF_REG_d<literal type="string">"), %%ecx \n\t"</literal>

<literal type="string">" jb 2f \n\t"</literal>

<literal type="string">"cmpl 516(%%"</literal>FF_REG_d<literal type="string">"), %%ecx \n\t"</literal>

<literal type="string">" jb 1f \n\t"</literal>

<literal type="string">"lea (%%"</literal>FF_REG_a<literal type="string">", %2, 2), %%"</literal>FF_REG_d<literal type="string">"\n\t"</literal> <comment type="line">// 5*stride</comment>

<literal type="string">"lea (%%"</literal>FF_REG_d<literal type="string">", %2, 2), %%"</literal>FF_REG_c<literal type="string">"\n\t"</literal> <comment type="line">// 7*stride</comment>

<literal type="string">"movq (%0), %%mm0 \n\t"</literal> <comment type="line">// L0</comment>

<literal type="string">"movq (%0, %2), %%mm1 \n\t"</literal> <comment type="line">// L1</comment>

<literal type="string">"movq (%0, %2, 2), %%mm2 \n\t"</literal> <comment type="line">// L2</comment>

<literal type="string">"movq (%0, %%"</literal>FF_REG_a<literal type="string">"), %%mm3 \n\t"</literal> <comment type="line">// L3</comment>

<literal type="string">"movq (%0, %2, 4), %%mm4 \n\t"</literal> <comment type="line">// L4</comment>

<literal type="string">"movq (%0, %%"</literal>FF_REG_d<literal type="string">"), %%mm5 \n\t"</literal> <comment type="line">// L5</comment>

<literal type="string">"movq (%0, %%"</literal>FF_REG_a<literal type="string">", 2), %%mm6 \n\t"</literal> <comment type="line">// L6</comment>

<literal type="string">"movq (%0, %%"</literal>FF_REG_c<literal type="string">"), %%mm7 \n\t"</literal> <comment type="line">// L7</comment>

<literal type="string">"movq %%mm0, (%1) \n\t"</literal> <comment type="line">// L0</comment>

<literal type="string">"movq %%mm1, (%1, %2) \n\t"</literal> <comment type="line">// L1</comment>

<literal type="string">"movq %%mm2, (%1, %2, 2) \n\t"</literal> <comment type="line">// L2</comment>

<literal type="string">"movq %%mm3, (%1, %%"</literal>FF_REG_a<literal type="string">") \n\t"</literal> <comment type="line">// L3</comment>

<literal type="string">"movq %%mm4, (%1, %2, 4) \n\t"</literal> <comment type="line">// L4</comment>

<literal type="string">"movq %%mm5, (%1, %%"</literal>FF_REG_d<literal type="string">") \n\t"</literal> <comment type="line">// L5</comment>

<literal type="string">"movq %%mm6, (%1, %%"</literal>FF_REG_a<literal type="string">", 2) \n\t"</literal> <comment type="line">// L6</comment>

<literal type="string">"movq %%mm7, (%1, %%"</literal>FF_REG_c<literal type="string">") \n\t"</literal> <comment type="line">// L7</comment>

<literal type="string">"jmp 4f \n\t"</literal>

<literal type="string">"1: \n\t"</literal>

<literal type="string">"lea (%%"</literal>FF_REG_a<literal type="string">", %2, 2), %%"</literal>FF_REG_d<literal type="string">"\n\t"</literal> <comment type="line">// 5*stride</comment>

<literal type="string">"lea (%%"</literal>FF_REG_d<literal type="string">", %2, 2), %%"</literal>FF_REG_c<literal type="string">"\n\t"</literal> <comment type="line">// 7*stride</comment>

<literal type="string">"movq (%0), %%mm0 \n\t"</literal> <comment type="line">// L0</comment>

PAVGB((%<literal type="number">1</literal>), %%mm0) <comment type="line">// L0</comment>

<literal type="string">"movq (%0, %2), %%mm1 \n\t"</literal> <comment type="line">// L1</comment>

PAVGB((%<literal type="number">1</literal>, %<literal type="number">2</literal>), %%mm1) <comment type="line">// L1</comment>

<literal type="string">"movq (%0, %2, 2), %%mm2 \n\t"</literal> <comment type="line">// L2</comment>

PAVGB((%<literal type="number">1</literal>, %<literal type="number">2</literal>, <literal type="number">2</literal>), %%mm2) <comment type="line">// L2</comment>

<literal type="string">"movq (%0, %%"</literal>FF_REG_a<literal type="string">"), %%mm3 \n\t"</literal> <comment type="line">// L3</comment>

PAVGB((%<literal type="number">1</literal>, %%FF_REGa), %%mm3) <comment type="line">// L3</comment>

<literal type="string">"movq (%0, %2, 4), %%mm4 \n\t"</literal> <comment type="line">// L4</comment>

PAVGB((%<literal type="number">1</literal>, %<literal type="number">2</literal>, <literal type="number">4</literal>), %%mm4) <comment type="line">// L4</comment>

<literal type="string">"movq (%0, %%"</literal>FF_REG_d<literal type="string">"), %%mm5 \n\t"</literal> <comment type="line">// L5</comment>

PAVGB((%<literal type="number">1</literal>, %%FF_REGd), %%mm5) <comment type="line">// L5</comment>

<literal type="string">"movq (%0, %%"</literal>FF_REG_a<literal type="string">", 2), %%mm6 \n\t"</literal> <comment type="line">// L6</comment>

PAVGB((%<literal type="number">1</literal>, %%FF_REGa, <literal type="number">2</literal>), %%mm6) <comment type="line">// L6</comment>

<literal type="string">"movq (%0, %%"</literal>FF_REG_c<literal type="string">"), %%mm7 \n\t"</literal> <comment type="line">// L7</comment>

PAVGB((%<literal type="number">1</literal>, %%FF_REGc), %%mm7) <comment type="line">// L7</comment>

<literal type="string">"movq %%mm0, (%1) \n\t"</literal> <comment type="line">// R0</comment>

<literal type="string">"movq %%mm1, (%1, %2) \n\t"</literal> <comment type="line">// R1</comment>

<literal type="string">"movq %%mm2, (%1, %2, 2) \n\t"</literal> <comment type="line">// R2</comment>

<literal type="string">"movq %%mm3, (%1, %%"</literal>FF_REG_a<literal type="string">") \n\t"</literal> <comment type="line">// R3</comment>

<literal type="string">"movq %%mm4, (%1, %2, 4) \n\t"</literal> <comment type="line">// R4</comment>

<literal type="string">"movq %%mm5, (%1, %%"</literal>FF_REG_d<literal type="string">") \n\t"</literal> <comment type="line">// R5</comment>

<literal type="string">"movq %%mm6, (%1, %%"</literal>FF_REG_a<literal type="string">", 2) \n\t"</literal> <comment type="line">// R6</comment>

<literal type="string">"movq %%mm7, (%1, %%"</literal>FF_REG_c<literal type="string">") \n\t"</literal> <comment type="line">// R7</comment>

<literal type="string">"movq %%mm0, (%0) \n\t"</literal> <comment type="line">// L0</comment>

<literal type="string">"movq %%mm1, (%0, %2) \n\t"</literal> <comment type="line">// L1</comment>

<literal type="string">"movq %%mm2, (%0, %2, 2) \n\t"</literal> <comment type="line">// L2</comment>

<literal type="string">"movq %%mm3, (%0, %%"</literal>FF_REG_a<literal type="string">") \n\t"</literal> <comment type="line">// L3</comment>

<literal type="string">"movq %%mm4, (%0, %2, 4) \n\t"</literal> <comment type="line">// L4</comment>

<literal type="string">"movq %%mm5, (%0, %%"</literal>FF_REG_d<literal type="string">") \n\t"</literal> <comment type="line">// L5</comment>

<literal type="string">"movq %%mm6, (%0, %%"</literal>FF_REG_a<literal type="string">", 2) \n\t"</literal> <comment type="line">// L6</comment>

<literal type="string">"movq %%mm7, (%0, %%"</literal>FF_REG_c<literal type="string">") \n\t"</literal> <comment type="line">// L7</comment>

<literal type="string">"jmp 4f \n\t"</literal>

<literal type="string">"2: \n\t"</literal>

<literal type="string">"cmpl 508(%%"</literal>FF_REG_d<literal type="string">"), %%ecx \n\t"</literal>

<literal type="string">" jb 3f \n\t"</literal>

<literal type="string">"lea (%%"</literal>FF_REG_a<literal type="string">", %2, 2), %%"</literal>FF_REG_d<literal type="string">"\n\t"</literal> <comment type="line">// 5*stride</comment>

<literal type="string">"lea (%%"</literal>FF_REG_d<literal type="string">", %2, 2), %%"</literal>FF_REG_c<literal type="string">"\n\t"</literal> <comment type="line">// 7*stride</comment>

<literal type="string">"movq (%0), %%mm0 \n\t"</literal> <comment type="line">// L0</comment>

<literal type="string">"movq (%0, %2), %%mm1 \n\t"</literal> <comment type="line">// L1</comment>

<literal type="string">"movq (%0, %2, 2), %%mm2 \n\t"</literal> <comment type="line">// L2</comment>

<literal type="string">"movq (%0, %%"</literal>FF_REG_a<literal type="string">"), %%mm3 \n\t"</literal> <comment type="line">// L3</comment>

<literal type="string">"movq (%1), %%mm4 \n\t"</literal> <comment type="line">// R0</comment>

<literal type="string">"movq (%1, %2), %%mm5 \n\t"</literal> <comment type="line">// R1</comment>

<literal type="string">"movq (%1, %2, 2), %%mm6 \n\t"</literal> <comment type="line">// R2</comment>

<literal type="string">"movq (%1, %%"</literal>FF_REG_a<literal type="string">"), %%mm7 \n\t"</literal> <comment type="line">// R3</comment>

PAVGB(%%mm4, %%mm0)

PAVGB(%%mm5, %%mm1)

PAVGB(%%mm6, %%mm2)

PAVGB(%%mm7, %%mm3)

PAVGB(%%mm4, %%mm0)

PAVGB(%%mm5, %%mm1)

PAVGB(%%mm6, %%mm2)

PAVGB(%%mm7, %%mm3)

<literal type="string">"movq %%mm0, (%1) \n\t"</literal> <comment type="line">// R0</comment>

<literal type="string">"movq %%mm1, (%1, %2) \n\t"</literal> <comment type="line">// R1</comment>

<literal type="string">"movq %%mm2, (%1, %2, 2) \n\t"</literal> <comment type="line">// R2</comment>

<literal type="string">"movq %%mm3, (%1, %%"</literal>FF_REG_a<literal type="string">") \n\t"</literal> <comment type="line">// R3</comment>

<literal type="string">"movq %%mm0, (%0) \n\t"</literal> <comment type="line">// L0</comment>

<literal type="string">"movq %%mm1, (%0, %2) \n\t"</literal> <comment type="line">// L1</comment>

<literal type="string">"movq %%mm2, (%0, %2, 2) \n\t"</literal> <comment type="line">// L2</comment>

<literal type="string">"movq %%mm3, (%0, %%"</literal>FF_REG_a<literal type="string">") \n\t"</literal> <comment type="line">// L3</comment>

<literal type="string">"movq (%0, %2, 4), %%mm0 \n\t"</literal> <comment type="line">// L4</comment>

<literal type="string">"movq (%0, %%"</literal>FF_REG_d<literal type="string">"), %%mm1 \n\t"</literal> <comment type="line">// L5</comment>

<literal type="string">"movq (%0, %%"</literal>FF_REG_a<literal type="string">", 2), %%mm2 \n\t"</literal> <comment type="line">// L6</comment>

<literal type="string">"movq (%0, %%"</literal>FF_REG_c<literal type="string">"), %%mm3 \n\t"</literal> <comment type="line">// L7</comment>

<literal type="string">"movq (%1, %2, 4), %%mm4 \n\t"</literal> <comment type="line">// R4</comment>

<literal type="string">"movq (%1, %%"</literal>FF_REG_d<literal type="string">"), %%mm5 \n\t"</literal> <comment type="line">// R5</comment>

<literal type="string">"movq (%1, %%"</literal>FF_REG_a<literal type="string">", 2), %%mm6 \n\t"</literal> <comment type="line">// R6</comment>

<literal type="string">"movq (%1, %%"</literal>FF_REG_c<literal type="string">"), %%mm7 \n\t"</literal> <comment type="line">// R7</comment>

PAVGB(%%mm4, %%mm0)

PAVGB(%%mm5, %%mm1)

PAVGB(%%mm6, %%mm2)

PAVGB(%%mm7, %%mm3)

PAVGB(%%mm4, %%mm0)

PAVGB(%%mm5, %%mm1)

PAVGB(%%mm6, %%mm2)

PAVGB(%%mm7, %%mm3)

<literal type="string">"movq %%mm0, (%1, %2, 4) \n\t"</literal> <comment type="line">// R4</comment>

<literal type="string">"movq %%mm1, (%1, %%"</literal>FF_REG_d<literal type="string">") \n\t"</literal> <comment type="line">// R5</comment>

<literal type="string">"movq %%mm2, (%1, %%"</literal>FF_REG_a<literal type="string">", 2) \n\t"</literal> <comment type="line">// R6</comment>

<literal type="string">"movq %%mm3, (%1, %%"</literal>FF_REG_c<literal type="string">") \n\t"</literal> <comment type="line">// R7</comment>

<literal type="string">"movq %%mm0, (%0, %2, 4) \n\t"</literal> <comment type="line">// L4</comment>

<literal type="string">"movq %%mm1, (%0, %%"</literal>FF_REG_d<literal type="string">") \n\t"</literal> <comment type="line">// L5</comment>

<literal type="string">"movq %%mm2, (%0, %%"</literal>FF_REG_a<literal type="string">", 2) \n\t"</literal> <comment type="line">// L6</comment>

<literal type="string">"movq %%mm3, (%0, %%"</literal>FF_REG_c<literal type="string">") \n\t"</literal> <comment type="line">// L7</comment>

<literal type="string">"jmp 4f \n\t"</literal>

<literal type="string">"3: \n\t"</literal>

<literal type="string">"lea (%%"</literal>FF_REG_a<literal type="string">", %2, 2), %%"</literal>FF_REG_d<literal type="string">"\n\t"</literal> <comment type="line">// 5*stride</comment>

<literal type="string">"lea (%%"</literal>FF_REG_d<literal type="string">", %2, 2), %%"</literal>FF_REG_c<literal type="string">"\n\t"</literal> <comment type="line">// 7*stride</comment>

<literal type="string">"movq (%0), %%mm0 \n\t"</literal> <comment type="line">// L0</comment>

<literal type="string">"movq (%0, %2), %%mm1 \n\t"</literal> <comment type="line">// L1</comment>

<literal type="string">"movq (%0, %2, 2), %%mm2 \n\t"</literal> <comment type="line">// L2</comment>

<literal type="string">"movq (%0, %%"</literal>FF_REG_a<literal type="string">"), %%mm3 \n\t"</literal> <comment type="line">// L3</comment>

<literal type="string">"movq (%1), %%mm4 \n\t"</literal> <comment type="line">// R0</comment>

<literal type="string">"movq (%1, %2), %%mm5 \n\t"</literal> <comment type="line">// R1</comment>

<literal type="string">"movq (%1, %2, 2), %%mm6 \n\t"</literal> <comment type="line">// R2</comment>

<literal type="string">"movq (%1, %%"</literal>FF_REG_a<literal type="string">"), %%mm7 \n\t"</literal> <comment type="line">// R3</comment>

PAVGB(%%mm4, %%mm0)

PAVGB(%%mm5, %%mm1)

PAVGB(%%mm6, %%mm2)

PAVGB(%%mm7, %%mm3)

PAVGB(%%mm4, %%mm0)

PAVGB(%%mm5, %%mm1)

PAVGB(%%mm6, %%mm2)

PAVGB(%%mm7, %%mm3)

PAVGB(%%mm4, %%mm0)

PAVGB(%%mm5, %%mm1)

PAVGB(%%mm6, %%mm2)

PAVGB(%%mm7, %%mm3)

<literal type="string">"movq %%mm0, (%1) \n\t"</literal> <comment type="line">// R0</comment>

<literal type="string">"movq %%mm1, (%1, %2) \n\t"</literal> <comment type="line">// R1</comment>

<literal type="string">"movq %%mm2, (%1, %2, 2) \n\t"</literal> <comment type="line">// R2</comment>

<literal type="string">"movq %%mm3, (%1, %%"</literal>FF_REG_a<literal type="string">") \n\t"</literal> <comment type="line">// R3</comment>

<literal type="string">"movq %%mm0, (%0) \n\t"</literal> <comment type="line">// L0</comment>

<literal type="string">"movq %%mm1, (%0, %2) \n\t"</literal> <comment type="line">// L1</comment>

<literal type="string">"movq %%mm2, (%0, %2, 2) \n\t"</literal> <comment type="line">// L2</comment>

<literal type="string">"movq %%mm3, (%0, %%"</literal>FF_REG_a<literal type="string">") \n\t"</literal> <comment type="line">// L3</comment>

<literal type="string">"movq (%0, %2, 4), %%mm0 \n\t"</literal> <comment type="line">// L4</comment>

<literal type="string">"movq (%0, %%"</literal>FF_REG_d<literal type="string">"), %%mm1 \n\t"</literal> <comment type="line">// L5</comment>

<literal type="string">"movq (%0, %%"</literal>FF_REG_a<literal type="string">", 2), %%mm2 \n\t"</literal> <comment type="line">// L6</comment>

<literal type="string">"movq (%0, %%"</literal>FF_REG_c<literal type="string">"), %%mm3 \n\t"</literal> <comment type="line">// L7</comment>

<literal type="string">"movq (%1, %2, 4), %%mm4 \n\t"</literal> <comment type="line">// R4</comment>

<literal type="string">"movq (%1, %%"</literal>FF_REG_d<literal type="string">"), %%mm5 \n\t"</literal> <comment type="line">// R5</comment>

<literal type="string">"movq (%1, %%"</literal>FF_REG_a<literal type="string">", 2), %%mm6 \n\t"</literal> <comment type="line">// R6</comment>

<literal type="string">"movq (%1, %%"</literal>FF_REG_c<literal type="string">"), %%mm7 \n\t"</literal> <comment type="line">// R7</comment>

PAVGB(%%mm4, %%mm0)

PAVGB(%%mm5, %%mm1)

PAVGB(%%mm6, %%mm2)

PAVGB(%%mm7, %%mm3)

PAVGB(%%mm4, %%mm0)

PAVGB(%%mm5, %%mm1)

PAVGB(%%mm6, %%mm2)

PAVGB(%%mm7, %%mm3)

PAVGB(%%mm4, %%mm0)

PAVGB(%%mm5, %%mm1)

PAVGB(%%mm6, %%mm2)

PAVGB(%%mm7, %%mm3)

<literal type="string">"movq %%mm0, (%1, %2, 4) \n\t"</literal> <comment type="line">// R4</comment>

<literal type="string">"movq %%mm1, (%1, %%"</literal>FF_REG_d<literal type="string">") \n\t"</literal> <comment type="line">// R5</comment>

<literal type="string">"movq %%mm2, (%1, %%"</literal>FF_REG_a<literal type="string">", 2) \n\t"</literal> <comment type="line">// R6</comment>

<literal type="string">"movq %%mm3, (%1, %%"</literal>FF_REG_c<literal type="string">") \n\t"</literal> <comment type="line">// R7</comment>

<literal type="string">"movq %%mm0, (%0, %2, 4) \n\t"</literal> <comment type="line">// L4</comment>

<literal type="string">"movq %%mm1, (%0, %%"</literal>FF_REG_d<literal type="string">") \n\t"</literal> <comment type="line">// L5</comment>

<literal type="string">"movq %%mm2, (%0, %%"</literal>FF_REG_a<literal type="string">", 2) \n\t"</literal> <comment type="line">// L6</comment>

<literal type="string">"movq %%mm3, (%0, %%"</literal>FF_REG_c<literal type="string">") \n\t"</literal> <comment type="line">// L7</comment>

<literal type="string">"4: \n\t"</literal>

:: <literal type="string">"r"</literal> (src)</argument>, <argument><literal type="string">"r"</literal> (tempBlurred)</argument>, <argument><literal type="string">"r"</literal>((x86_reg)stride)</argument>, <argument><literal type="string">"m"</literal> (tempBlurredPast)

NAMED_CONSTRAINTS_ADD(b80)

: <literal type="string">"%"</literal>FF_REG_a</argument>, <argument><literal type="string">"%"</literal>FF_REG_d</argument>, <argument><literal type="string">"%"</literal>FF_REG_c</argument>, <argument><literal type="string">"memory"</literal>

</argument>)</argument_list></macro>;</expr></cpp:if>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="line">//(TEMPLATE_PP_MMXEXT || TEMPLATE_PP_3DNOW) &amp;&amp; HAVE_6REGS</comment>

{

int y;

int d=0;

<comment type="line">// int sysd=0;</comment>

int i;

for(y=0; y&lt;8; y++){

int x;

for(x=0; x&lt;8; x++){

int ref= tempBlurred[ x + y*stride ];

int cur= src[ x + y*stride ];

int d1=ref - cur;

<comment type="line">// if(x==0 || x==7) d1+= d1&gt;&gt;1;</comment>

<comment type="line">// if(y==0 || y==7) d1+= d1&gt;&gt;1;</comment>

<comment type="line">// d+= FFABS(d1);</comment>

d+= d1*d1;

<comment type="line">// sysd+= d1;</comment>

}

}

i=d;

d= (

4*d

+(*(tempBlurredPast-256))

+(*(tempBlurredPast-1))+ (*(tempBlurredPast+1))

+(*(tempBlurredPast+256))

+4)&gt;&gt;3;

*tempBlurredPast=i;

<comment type="line">// ((*tempBlurredPast)*3 + d + 2)&gt;&gt;2;</comment>

<comment type="block">/*

Switch between

1 0 0 0 0 0 0 (0)

64 32 16 8 4 2 1 (1)

64 48 36 27 20 15 11 (33) (approx)

64 56 49 43 37 33 29 (200) (approx)

*/</comment>

if(d &gt; maxNoise[1]){

if(d &lt; maxNoise[2]){

for(y=0; y&lt;8; y++){

int x;

for(x=0; x&lt;8; x++){

int ref= tempBlurred[ x + y*stride ];

int cur= src[ x + y*stride ];

tempBlurred[ x + y*stride ]=

src[ x + y*stride ]=

(ref + cur + 1)&gt;&gt;1;

}

}

}else{

for(y=0; y&lt;8; y++){

int x;

for(x=0; x&lt;8; x++){

tempBlurred[ x + y*stride ]= src[ x + y*stride ];

}

}

}

}else{

if(d &lt; maxNoise[0]){

for(y=0; y&lt;8; y++){

int x;

for(x=0; x&lt;8; x++){

int ref= tempBlurred[ x + y*stride ];

int cur= src[ x + y*stride ];

tempBlurred[ x + y*stride ]=

src[ x + y*stride ]=

(ref*7 + cur + 4)&gt;&gt;3;

}

}

}else{

for(y=0; y&lt;8; y++){

int x;

for(x=0; x&lt;8; x++){

int ref= tempBlurred[ x + y*stride ];

int cur= src[ x + y*stride ];

tempBlurred[ x + y*stride ]=

src[ x + y*stride ]=

(ref*3 + cur + 2)&gt;&gt;2;

}

}

}

}

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">//(TEMPLATE_PP_MMXEXT || TEMPLATE_PP_3DNOW) &amp;&amp; HAVE_6REGS</comment>

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">//TEMPLATE_PP_ALTIVEC</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>TEMPLATE_PP_MMX</name></expr></cpp:if>

<comment type="block" format="doxygen">/**

* accurate deblock filter

*/</comment>

static av_always_inline void RENAME(do_a_deblock)(uint8_t *src, int step, int stride, const PPContext *c, int mode){

int64_t dc_mask, eq_mask, both_masks;

int64_t sums[10*8*2];

src+= step*3; <comment type="line">// src points to begin of the 8x8 Block</comment>

__asm__ volatile(

"movq %0, %%mm7 \n\t"

"movq %1, %%mm6 \n\t"

: : "m" (c-&gt;mmxDcOffset[c-&gt;nonBQP]), "m" (c-&gt;mmxDcThreshold[c-&gt;nonBQP])

);

__asm__ volatile(

"lea (%2, %3), %%"FF_REG_a" \n\t"

<comment type="line">// 0 1 2 3 4 5 6 7 8 9</comment>

<comment type="line">// %1 eax eax+%2 eax+2%2 %1+4%2 ecx ecx+%2 ecx+2%2 %1+8%2 ecx+4%2</comment>

"movq (%2), %%mm0 \n\t"

"movq (%%"FF_REG_a"), %%mm1 \n\t"

"movq %%mm1, %%mm3 \n\t"

"movq %%mm1, %%mm4 \n\t"

"psubb %%mm1, %%mm0 \n\t" <comment type="line">// mm0 = difference</comment>

"paddb %%mm7, %%mm0 \n\t"

"pcmpgtb %%mm6, %%mm0 \n\t"

"movq (%%"FF_REG_a",%3), %%mm2 \n\t"

PMAXUB(%%mm2, %%mm4)

PMINUB(%%mm2, %%mm3, %%mm5)

"psubb %%mm2, %%mm1 \n\t"

"paddb %%mm7, %%mm1 \n\t"

"pcmpgtb %%mm6, %%mm1 \n\t"

"paddb %%mm1, %%mm0 \n\t"

"movq (%%"FF_REG_a", %3, 2), %%mm1 \n\t"

PMAXUB(%%mm1, %%mm4)

PMINUB(%%mm1, %%mm3, %%mm5)

"psubb %%mm1, %%mm2 \n\t"

"paddb %%mm7, %%mm2 \n\t"

"pcmpgtb %%mm6, %%mm2 \n\t"

"paddb %%mm2, %%mm0 \n\t"

"lea (%%"FF_REG_a", %3, 4), %%"FF_REG_a"\n\t"

"movq (%2, %3, 4), %%mm2 \n\t"

PMAXUB(%%mm2, %%mm4)

PMINUB(%%mm2, %%mm3, %%mm5)

"psubb %%mm2, %%mm1 \n\t"

"paddb %%mm7, %%mm1 \n\t"

"pcmpgtb %%mm6, %%mm1 \n\t"

"paddb %%mm1, %%mm0 \n\t"

"movq (%%"FF_REG_a"), %%mm1 \n\t"

PMAXUB(%%mm1, %%mm4)

PMINUB(%%mm1, %%mm3, %%mm5)

"psubb %%mm1, %%mm2 \n\t"

"paddb %%mm7, %%mm2 \n\t"

"pcmpgtb %%mm6, %%mm2 \n\t"

"paddb %%mm2, %%mm0 \n\t"

"movq (%%"FF_REG_a", %3), %%mm2 \n\t"

PMAXUB(%%mm2, %%mm4)

PMINUB(%%mm2, %%mm3, %%mm5)

"psubb %%mm2, %%mm1 \n\t"

"paddb %%mm7, %%mm1 \n\t"

"pcmpgtb %%mm6, %%mm1 \n\t"

"paddb %%mm1, %%mm0 \n\t"

"movq (%%"FF_REG_a", %3, 2), %%mm1 \n\t"

PMAXUB(%%mm1, %%mm4)

PMINUB(%%mm1, %%mm3, %%mm5)

"psubb %%mm1, %%mm2 \n\t"

"paddb %%mm7, %%mm2 \n\t"

"pcmpgtb %%mm6, %%mm2 \n\t"

"paddb %%mm2, %%mm0 \n\t"

"movq (%2, %3, 8), %%mm2 \n\t"

PMAXUB(%%mm2, %%mm4)

PMINUB(%%mm2, %%mm3, %%mm5)

"psubb %%mm2, %%mm1 \n\t"

"paddb %%mm7, %%mm1 \n\t"

"pcmpgtb %%mm6, %%mm1 \n\t"

"paddb %%mm1, %%mm0 \n\t"

"movq (%%"FF_REG_a", %3, 4), %%mm1 \n\t"

"psubb %%mm1, %%mm2 \n\t"

"paddb %%mm7, %%mm2 \n\t"

"pcmpgtb %%mm6, %%mm2 \n\t"

"paddb %%mm2, %%mm0 \n\t"

"psubusb %%mm3, %%mm4 \n\t"

"pxor %%mm6, %%mm6 \n\t"

"movq %4, %%mm7 \n\t" <comment type="line">// QP,..., QP</comment>

"paddusb %%mm7, %%mm7 \n\t" <comment type="line">// 2QP ... 2QP</comment>

"psubusb %%mm4, %%mm7 \n\t" <comment type="line">// Diff &gt;=2QP -&gt; 0</comment>

"pcmpeqb %%mm6, %%mm7 \n\t" <comment type="line">// Diff &lt; 2QP -&gt; 0</comment>

"pcmpeqb %%mm6, %%mm7 \n\t" <comment type="line">// Diff &lt; 2QP -&gt; 0</comment>

"movq %%mm7, %1 \n\t"

"movq %5, %%mm7 \n\t"

"punpcklbw %%mm7, %%mm7 \n\t"

"punpcklbw %%mm7, %%mm7 \n\t"

"punpcklbw %%mm7, %%mm7 \n\t"

"psubb %%mm0, %%mm6 \n\t"

"pcmpgtb %%mm7, %%mm6 \n\t"

"movq %%mm6, %0 \n\t"

: "=m" (eq_mask), "=m" (dc_mask)

: "r" (src), "r" ((x86_reg)step), "m" (c-&gt;pQPb), "m"(c-&gt;ppMode.flatnessThreshold)

: "%"FF_REG_a

);

both_masks = dc_mask &amp; eq_mask;

if(both_masks){

x86_reg offset= -8*step;

int64_t *temp_sums= sums;

__asm__ volatile(

"movq %2, %%mm0 \n\t" <comment type="line">// QP,..., QP</comment>

"pxor %%mm4, %%mm4 \n\t"

"movq (%0), %%mm6 \n\t"

"movq (%0, %1), %%mm5 \n\t"

"movq %%mm5, %%mm1 \n\t"

"movq %%mm6, %%mm2 \n\t"

"psubusb %%mm6, %%mm5 \n\t"

"psubusb %%mm1, %%mm2 \n\t"

"por %%mm5, %%mm2 \n\t" <comment type="line">// ABS Diff of lines</comment>

"psubusb %%mm2, %%mm0 \n\t" <comment type="line">// diff &gt;= QP -&gt; 0</comment>

"pcmpeqb %%mm4, %%mm0 \n\t" <comment type="line">// diff &gt;= QP -&gt; FF</comment>

"pxor %%mm6, %%mm1 \n\t"

"pand %%mm0, %%mm1 \n\t"

"pxor %%mm1, %%mm6 \n\t"

<comment type="line">// 0:QP 6:First</comment>

"movq (%0, %1, 8), %%mm5 \n\t"

"add %1, %0 \n\t" <comment type="line">// %0 points to line 1 not 0</comment>

"movq (%0, %1, 8), %%mm7 \n\t"

"movq %%mm5, %%mm1 \n\t"

"movq %%mm7, %%mm2 \n\t"

"psubusb %%mm7, %%mm5 \n\t"

"psubusb %%mm1, %%mm2 \n\t"

"por %%mm5, %%mm2 \n\t" <comment type="line">// ABS Diff of lines</comment>

"movq %2, %%mm0 \n\t" <comment type="line">// QP,..., QP</comment>

"psubusb %%mm2, %%mm0 \n\t" <comment type="line">// diff &gt;= QP -&gt; 0</comment>

"pcmpeqb %%mm4, %%mm0 \n\t" <comment type="line">// diff &gt;= QP -&gt; FF</comment>

"pxor %%mm7, %%mm1 \n\t"

"pand %%mm0, %%mm1 \n\t"

"pxor %%mm1, %%mm7 \n\t"

"movq %%mm6, %%mm5 \n\t"

"punpckhbw %%mm4, %%mm6 \n\t"

"punpcklbw %%mm4, %%mm5 \n\t"

<comment type="line">// 4:0 5/6:First 7:Last</comment>

"movq %%mm5, %%mm0 \n\t"

"movq %%mm6, %%mm1 \n\t"

"psllw $2, %%mm0 \n\t"

"psllw $2, %%mm1 \n\t"

"paddw "MANGLE(w04)", %%mm0 \n\t"

"paddw "MANGLE(w04)", %%mm1 \n\t"

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEXT</name></cpp:macro><cpp:value>"movq (%0), %%mm2 \n\t""movq (%0), %%mm3 \n\t""add %1, %0 \n\t""punpcklbw %%mm4, %%mm2 \n\t""punpckhbw %%mm4, %%mm3 \n\t""paddw %%mm2, %%mm0 \n\t""paddw %%mm3, %%mm1 \n\t"
</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PREV</name></cpp:macro><cpp:value>"movq (%0), %%mm2 \n\t""movq (%0), %%mm3 \n\t""add %1, %0 \n\t""punpcklbw %%mm4, %%mm2 \n\t""punpckhbw %%mm4, %%mm3 \n\t""psubw %%mm2, %%mm0 \n\t""psubw %%mm3, %%mm1 \n\t"
</cpp:value></cpp:define>
NEXT <comment type="line">//0</comment>

NEXT <comment type="line">//1</comment>

NEXT <comment type="line">//2</comment>

"movq %%mm0, (%3) \n\t"

"movq %%mm1, 8(%3) \n\t"

NEXT <comment type="line">//3</comment>

"psubw %%mm5, %%mm0 \n\t"

"psubw %%mm6, %%mm1 \n\t"

"movq %%mm0, 16(%3) \n\t"

"movq %%mm1, 24(%3) \n\t"

NEXT <comment type="line">//4</comment>

"psubw %%mm5, %%mm0 \n\t"

"psubw %%mm6, %%mm1 \n\t"

"movq %%mm0, 32(%3) \n\t"

"movq %%mm1, 40(%3) \n\t"

NEXT <comment type="line">//5</comment>

"psubw %%mm5, %%mm0 \n\t"

"psubw %%mm6, %%mm1 \n\t"

"movq %%mm0, 48(%3) \n\t"

"movq %%mm1, 56(%3) \n\t"

NEXT <comment type="line">//6</comment>

"psubw %%mm5, %%mm0 \n\t"

"psubw %%mm6, %%mm1 \n\t"

"movq %%mm0, 64(%3) \n\t"

"movq %%mm1, 72(%3) \n\t"

"movq %%mm7, %%mm6 \n\t"

"punpckhbw %%mm4, %%mm7 \n\t"

"punpcklbw %%mm4, %%mm6 \n\t"

NEXT <comment type="line">//7</comment>

"mov %4, %0 \n\t"

"add %1, %0 \n\t"

PREV <comment type="line">//0</comment>

"movq %%mm0, 80(%3) \n\t"

"movq %%mm1, 88(%3) \n\t"

PREV <comment type="line">//1</comment>

"paddw %%mm6, %%mm0 \n\t"

"paddw %%mm7, %%mm1 \n\t"

"movq %%mm0, 96(%3) \n\t"

"movq %%mm1, 104(%3) \n\t"

PREV <comment type="line">//2</comment>

"paddw %%mm6, %%mm0 \n\t"

"paddw %%mm7, %%mm1 \n\t"

"movq %%mm0, 112(%3) \n\t"

"movq %%mm1, 120(%3) \n\t"

PREV <comment type="line">//3</comment>

"paddw %%mm6, %%mm0 \n\t"

"paddw %%mm7, %%mm1 \n\t"

"movq %%mm0, 128(%3) \n\t"

"movq %%mm1, 136(%3) \n\t"

PREV <comment type="line">//4</comment>

"paddw %%mm6, %%mm0 \n\t"

"paddw %%mm7, %%mm1 \n\t"

"movq %%mm0, 144(%3) \n\t"

"movq %%mm1, 152(%3) \n\t"

"mov %4, %0 \n\t" <comment type="line">//FIXME</comment>

: "+&amp;r"(src)

: "r" ((x86_reg)step), "m" (c-&gt;pQPb), "r"(sums), "g"(src)

NAMED_CONSTRAINTS_ADD(w04)

);

src+= step; <comment type="line">// src points to begin of the 8x8 Block</comment>

__asm__ volatile(

"movq %4, %%mm6 \n\t"

"pcmpeqb %%mm5, %%mm5 \n\t"

"pxor %%mm6, %%mm5 \n\t"

"pxor %%mm7, %%mm7 \n\t"

"1: \n\t"

"movq (%1), %%mm0 \n\t"

"movq 8(%1), %%mm1 \n\t"

"paddw 32(%1), %%mm0 \n\t"

"paddw 40(%1), %%mm1 \n\t"

"movq (%0, %3), %%mm2 \n\t"

"movq %%mm2, %%mm3 \n\t"

"movq %%mm2, %%mm4 \n\t"

"punpcklbw %%mm7, %%mm2 \n\t"

"punpckhbw %%mm7, %%mm3 \n\t"

"paddw %%mm2, %%mm0 \n\t"

"paddw %%mm3, %%mm1 \n\t"

"paddw %%mm2, %%mm0 \n\t"

"paddw %%mm3, %%mm1 \n\t"

"psrlw $4, %%mm0 \n\t"

"psrlw $4, %%mm1 \n\t"

"packuswb %%mm1, %%mm0 \n\t"

"pand %%mm6, %%mm0 \n\t"

"pand %%mm5, %%mm4 \n\t"

"por %%mm4, %%mm0 \n\t"

"movq %%mm0, (%0, %3) \n\t"

"add $16, %1 \n\t"

"add %2, %0 \n\t"

" js 1b \n\t"

: "+r"(offset), "+r"(temp_sums)

: "r" ((x86_reg)step), "r"(src - offset), "m"(both_masks)

);

}else

src+= step; <comment type="line">// src points to begin of the 8x8 Block</comment>

if(eq_mask != -1LL){

uint8_t *temp_src= src;

DECLARE_ALIGNED(8, uint64_t, tmp)[4]; <comment type="line">// make space for 4 8-byte vars</comment>

__asm__ volatile(

"pxor %%mm7, %%mm7 \n\t"

<comment type="line">// 0 1 2 3 4 5 6 7 8 9</comment>

<comment type="line">// %0 eax eax+%1 eax+2%1 %0+4%1 ecx ecx+%1 ecx+2%1 %1+8%1 ecx+4%1</comment>

"movq (%0), %%mm0 \n\t"

"movq %%mm0, %%mm1 \n\t"

"punpcklbw %%mm7, %%mm0 \n\t" <comment type="line">// low part of line 0</comment>

"punpckhbw %%mm7, %%mm1 \n\t" <comment type="line">// high part of line 0</comment>

"movq (%0, %1), %%mm2 \n\t"

"lea (%0, %1, 2), %%"FF_REG_a" \n\t"

"movq %%mm2, %%mm3 \n\t"

"punpcklbw %%mm7, %%mm2 \n\t" <comment type="line">// low part of line 1</comment>

"punpckhbw %%mm7, %%mm3 \n\t" <comment type="line">// high part of line 1</comment>

"movq (%%"FF_REG_a"), %%mm4 \n\t"

"movq %%mm4, %%mm5 \n\t"

"punpcklbw %%mm7, %%mm4 \n\t" <comment type="line">// low part of line 2</comment>

"punpckhbw %%mm7, %%mm5 \n\t" <comment type="line">// high part of line 2</comment>

"paddw %%mm0, %%mm0 \n\t" <comment type="line">// 2L0</comment>

"paddw %%mm1, %%mm1 \n\t" <comment type="line">// 2H0</comment>

"psubw %%mm4, %%mm2 \n\t" <comment type="line">// L1 - L2</comment>

"psubw %%mm5, %%mm3 \n\t" <comment type="line">// H1 - H2</comment>

"psubw %%mm2, %%mm0 \n\t" <comment type="line">// 2L0 - L1 + L2</comment>

"psubw %%mm3, %%mm1 \n\t" <comment type="line">// 2H0 - H1 + H2</comment>

"psllw $2, %%mm2 \n\t" <comment type="line">// 4L1 - 4L2</comment>

"psllw $2, %%mm3 \n\t" <comment type="line">// 4H1 - 4H2</comment>

"psubw %%mm2, %%mm0 \n\t" <comment type="line">// 2L0 - 5L1 + 5L2</comment>

"psubw %%mm3, %%mm1 \n\t" <comment type="line">// 2H0 - 5H1 + 5H2</comment>

"movq (%%"FF_REG_a", %1), %%mm2 \n\t"

"movq %%mm2, %%mm3 \n\t"

"punpcklbw %%mm7, %%mm2 \n\t" <comment type="line">// L3</comment>

"punpckhbw %%mm7, %%mm3 \n\t" <comment type="line">// H3</comment>

"psubw %%mm2, %%mm0 \n\t" <comment type="line">// 2L0 - 5L1 + 5L2 - L3</comment>

"psubw %%mm3, %%mm1 \n\t" <comment type="line">// 2H0 - 5H1 + 5H2 - H3</comment>

"psubw %%mm2, %%mm0 \n\t" <comment type="line">// 2L0 - 5L1 + 5L2 - 2L3</comment>

"psubw %%mm3, %%mm1 \n\t" <comment type="line">// 2H0 - 5H1 + 5H2 - 2H3</comment>

"movq %%mm0, (%4) \n\t" <comment type="line">// 2L0 - 5L1 + 5L2 - 2L3</comment>

"movq %%mm1, 8(%4) \n\t" <comment type="line">// 2H0 - 5H1 + 5H2 - 2H3</comment>

"movq (%%"FF_REG_a", %1, 2), %%mm0 \n\t"

"movq %%mm0, %%mm1 \n\t"

"punpcklbw %%mm7, %%mm0 \n\t" <comment type="line">// L4</comment>

"punpckhbw %%mm7, %%mm1 \n\t" <comment type="line">// H4</comment>

"psubw %%mm0, %%mm2 \n\t" <comment type="line">// L3 - L4</comment>

"psubw %%mm1, %%mm3 \n\t" <comment type="line">// H3 - H4</comment>

"movq %%mm2, 16(%4) \n\t" <comment type="line">// L3 - L4</comment>

"movq %%mm3, 24(%4) \n\t" <comment type="line">// H3 - H4</comment>

"paddw %%mm4, %%mm4 \n\t" <comment type="line">// 2L2</comment>

"paddw %%mm5, %%mm5 \n\t" <comment type="line">// 2H2</comment>

"psubw %%mm2, %%mm4 \n\t" <comment type="line">// 2L2 - L3 + L4</comment>

"psubw %%mm3, %%mm5 \n\t" <comment type="line">// 2H2 - H3 + H4</comment>

"lea (%%"FF_REG_a", %1), %0 \n\t"

"psllw $2, %%mm2 \n\t" <comment type="line">// 4L3 - 4L4</comment>

"psllw $2, %%mm3 \n\t" <comment type="line">// 4H3 - 4H4</comment>

"psubw %%mm2, %%mm4 \n\t" <comment type="line">// 2L2 - 5L3 + 5L4</comment>

"psubw %%mm3, %%mm5 \n\t" <comment type="line">// 2H2 - 5H3 + 5H4</comment>

<comment type="line">//50 opcodes so far</comment>

"movq (%0, %1, 2), %%mm2 \n\t"

"movq %%mm2, %%mm3 \n\t"

"punpcklbw %%mm7, %%mm2 \n\t" <comment type="line">// L5</comment>

"punpckhbw %%mm7, %%mm3 \n\t" <comment type="line">// H5</comment>

"psubw %%mm2, %%mm4 \n\t" <comment type="line">// 2L2 - 5L3 + 5L4 - L5</comment>

"psubw %%mm3, %%mm5 \n\t" <comment type="line">// 2H2 - 5H3 + 5H4 - H5</comment>

"psubw %%mm2, %%mm4 \n\t" <comment type="line">// 2L2 - 5L3 + 5L4 - 2L5</comment>

"psubw %%mm3, %%mm5 \n\t" <comment type="line">// 2H2 - 5H3 + 5H4 - 2H5</comment>

"movq (%%"FF_REG_a", %1, 4), %%mm6 \n\t"

"punpcklbw %%mm7, %%mm6 \n\t" <comment type="line">// L6</comment>

"psubw %%mm6, %%mm2 \n\t" <comment type="line">// L5 - L6</comment>

"movq (%%"FF_REG_a", %1, 4), %%mm6 \n\t"

"punpckhbw %%mm7, %%mm6 \n\t" <comment type="line">// H6</comment>

"psubw %%mm6, %%mm3 \n\t" <comment type="line">// H5 - H6</comment>

"paddw %%mm0, %%mm0 \n\t" <comment type="line">// 2L4</comment>

"paddw %%mm1, %%mm1 \n\t" <comment type="line">// 2H4</comment>

"psubw %%mm2, %%mm0 \n\t" <comment type="line">// 2L4 - L5 + L6</comment>

"psubw %%mm3, %%mm1 \n\t" <comment type="line">// 2H4 - H5 + H6</comment>

"psllw $2, %%mm2 \n\t" <comment type="line">// 4L5 - 4L6</comment>

"psllw $2, %%mm3 \n\t" <comment type="line">// 4H5 - 4H6</comment>

"psubw %%mm2, %%mm0 \n\t" <comment type="line">// 2L4 - 5L5 + 5L6</comment>

"psubw %%mm3, %%mm1 \n\t" <comment type="line">// 2H4 - 5H5 + 5H6</comment>

"movq (%0, %1, 4), %%mm2 \n\t"

"movq %%mm2, %%mm3 \n\t"

"punpcklbw %%mm7, %%mm2 \n\t" <comment type="line">// L7</comment>

"punpckhbw %%mm7, %%mm3 \n\t" <comment type="line">// H7</comment>

"paddw %%mm2, %%mm2 \n\t" <comment type="line">// 2L7</comment>

"paddw %%mm3, %%mm3 \n\t" <comment type="line">// 2H7</comment>

"psubw %%mm2, %%mm0 \n\t" <comment type="line">// 2L4 - 5L5 + 5L6 - 2L7</comment>

"psubw %%mm3, %%mm1 \n\t" <comment type="line">// 2H4 - 5H5 + 5H6 - 2H7</comment>

"movq (%4), %%mm2 \n\t" <comment type="line">// 2L0 - 5L1 + 5L2 - 2L3</comment>

"movq 8(%4), %%mm3 \n\t" <comment type="line">// 2H0 - 5H1 + 5H2 - 2H3</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>TEMPLATE_PP_MMXEXT</name></expr></cpp:if>

"movq %%mm7, %%mm6 \n\t" <comment type="line">// 0</comment>

"psubw %%mm0, %%mm6 \n\t"

"pmaxsw %%mm6, %%mm0 \n\t" <comment type="line">// |2L4 - 5L5 + 5L6 - 2L7|</comment>

"movq %%mm7, %%mm6 \n\t" <comment type="line">// 0</comment>

"psubw %%mm1, %%mm6 \n\t"

"pmaxsw %%mm6, %%mm1 \n\t" <comment type="line">// |2H4 - 5H5 + 5H6 - 2H7|</comment>

"movq %%mm7, %%mm6 \n\t" <comment type="line">// 0</comment>

"psubw %%mm2, %%mm6 \n\t"

"pmaxsw %%mm6, %%mm2 \n\t" <comment type="line">// |2L0 - 5L1 + 5L2 - 2L3|</comment>

"movq %%mm7, %%mm6 \n\t" <comment type="line">// 0</comment>

"psubw %%mm3, %%mm6 \n\t"

"pmaxsw %%mm6, %%mm3 \n\t" <comment type="line">// |2H0 - 5H1 + 5H2 - 2H3|</comment>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

"movq %%mm7, %%mm6 \n\t" <comment type="line">// 0</comment>

"pcmpgtw %%mm0, %%mm6 \n\t"

"pxor %%mm6, %%mm0 \n\t"

"psubw %%mm6, %%mm0 \n\t" <comment type="line">// |2L4 - 5L5 + 5L6 - 2L7|</comment>

"movq %%mm7, %%mm6 \n\t" <comment type="line">// 0</comment>

"pcmpgtw %%mm1, %%mm6 \n\t"

"pxor %%mm6, %%mm1 \n\t"

"psubw %%mm6, %%mm1 \n\t" <comment type="line">// |2H4 - 5H5 + 5H6 - 2H7|</comment>

"movq %%mm7, %%mm6 \n\t" <comment type="line">// 0</comment>

"pcmpgtw %%mm2, %%mm6 \n\t"

"pxor %%mm6, %%mm2 \n\t"

"psubw %%mm6, %%mm2 \n\t" <comment type="line">// |2L0 - 5L1 + 5L2 - 2L3|</comment>

"movq %%mm7, %%mm6 \n\t" <comment type="line">// 0</comment>

"pcmpgtw %%mm3, %%mm6 \n\t"

"pxor %%mm6, %%mm3 \n\t"

"psubw %%mm6, %%mm3 \n\t" <comment type="line">// |2H0 - 5H1 + 5H2 - 2H3|</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>TEMPLATE_PP_MMXEXT</name></expr></cpp:if>

"pminsw %%mm2, %%mm0 \n\t"

"pminsw %%mm3, %%mm1 \n\t"

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

"movq %%mm0, %%mm6 \n\t"

"psubusw %%mm2, %%mm6 \n\t"

"psubw %%mm6, %%mm0 \n\t"

"movq %%mm1, %%mm6 \n\t"

"psubusw %%mm3, %%mm6 \n\t"

"psubw %%mm6, %%mm1 \n\t"

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

"movd %2, %%mm2 \n\t" <comment type="line">// QP</comment>

"punpcklbw %%mm7, %%mm2 \n\t"

"movq %%mm7, %%mm6 \n\t" <comment type="line">// 0</comment>

"pcmpgtw %%mm4, %%mm6 \n\t" <comment type="line">// sign(2L2 - 5L3 + 5L4 - 2L5)</comment>

"pxor %%mm6, %%mm4 \n\t"

"psubw %%mm6, %%mm4 \n\t" <comment type="line">// |2L2 - 5L3 + 5L4 - 2L5|</comment>

"pcmpgtw %%mm5, %%mm7 \n\t" <comment type="line">// sign(2H2 - 5H3 + 5H4 - 2H5)</comment>

"pxor %%mm7, %%mm5 \n\t"

"psubw %%mm7, %%mm5 \n\t" <comment type="line">// |2H2 - 5H3 + 5H4 - 2H5|</comment>

<comment type="line">// 100 opcodes</comment>

"psllw $3, %%mm2 \n\t" <comment type="line">// 8QP</comment>

"movq %%mm2, %%mm3 \n\t" <comment type="line">// 8QP</comment>

"pcmpgtw %%mm4, %%mm2 \n\t"

"pcmpgtw %%mm5, %%mm3 \n\t"

"pand %%mm2, %%mm4 \n\t"

"pand %%mm3, %%mm5 \n\t"

"psubusw %%mm0, %%mm4 \n\t" <comment type="line">// hd</comment>

"psubusw %%mm1, %%mm5 \n\t" <comment type="line">// ld</comment>

"movq "MANGLE(w05)", %%mm2 \n\t" <comment type="line">// 5</comment>

"pmullw %%mm2, %%mm4 \n\t"

"pmullw %%mm2, %%mm5 \n\t"

"movq "MANGLE(w20)", %%mm2 \n\t" <comment type="line">// 32</comment>

"paddw %%mm2, %%mm4 \n\t"

"paddw %%mm2, %%mm5 \n\t"

"psrlw $6, %%mm4 \n\t"

"psrlw $6, %%mm5 \n\t"

"movq 16(%4), %%mm0 \n\t" <comment type="line">// L3 - L4</comment>

"movq 24(%4), %%mm1 \n\t" <comment type="line">// H3 - H4</comment>

"pxor %%mm2, %%mm2 \n\t"

"pxor %%mm3, %%mm3 \n\t"

"pcmpgtw %%mm0, %%mm2 \n\t" <comment type="line">// sign (L3-L4)</comment>

"pcmpgtw %%mm1, %%mm3 \n\t" <comment type="line">// sign (H3-H4)</comment>

"pxor %%mm2, %%mm0 \n\t"

"pxor %%mm3, %%mm1 \n\t"

"psubw %%mm2, %%mm0 \n\t" <comment type="line">// |L3-L4|</comment>

"psubw %%mm3, %%mm1 \n\t" <comment type="line">// |H3-H4|</comment>

"psrlw $1, %%mm0 \n\t" <comment type="line">// |L3 - L4|/2</comment>

"psrlw $1, %%mm1 \n\t" <comment type="line">// |H3 - H4|/2</comment>

"pxor %%mm6, %%mm2 \n\t"

"pxor %%mm7, %%mm3 \n\t"

"pand %%mm2, %%mm4 \n\t"

"pand %%mm3, %%mm5 \n\t"

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>TEMPLATE_PP_MMXEXT</name></expr></cpp:if>

"pminsw %%mm0, %%mm4 \n\t"

"pminsw %%mm1, %%mm5 \n\t"

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

"movq %%mm4, %%mm2 \n\t"

"psubusw %%mm0, %%mm2 \n\t"

"psubw %%mm2, %%mm4 \n\t"

"movq %%mm5, %%mm2 \n\t"

"psubusw %%mm1, %%mm2 \n\t"

"psubw %%mm2, %%mm5 \n\t"

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

"pxor %%mm6, %%mm4 \n\t"

"pxor %%mm7, %%mm5 \n\t"

"psubw %%mm6, %%mm4 \n\t"

"psubw %%mm7, %%mm5 \n\t"

"packsswb %%mm5, %%mm4 \n\t"

"movq %3, %%mm1 \n\t"

"pandn %%mm4, %%mm1 \n\t"

"movq (%0), %%mm0 \n\t"

"paddb %%mm1, %%mm0 \n\t"

"movq %%mm0, (%0) \n\t"

"movq (%0, %1), %%mm0 \n\t"

"psubb %%mm1, %%mm0 \n\t"

"movq %%mm0, (%0, %1) \n\t"

: "+r" (temp_src)

: "r" ((x86_reg)step), "m" (c-&gt;pQPb), "m"(eq_mask), "r"(tmp)

NAMED_CONSTRAINTS_ADD(w05,w20)

: "%"FF_REG_a

);

}

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">//TEMPLATE_PP_MMX</comment>

static void RENAME(postProcess)(const uint8_t src[], int srcStride, uint8_t dst[], int dstStride, int width, int height,

const int8_t QPs[], int QPStride, int isColor, PPContext *c);

<comment type="block" format="doxygen">/**

* Copy a block from src to dst and fixes the blacklevel.

* levelFix == 0 -&gt; do not touch the brightness &amp; contrast

*/</comment>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>REAL_SCALED_CPY</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SCALED_CPY</name></cpp:undef>

static inline void RENAME(blockCopy)(uint8_t dst[], int dstStride, const uint8_t src[], int srcStride,

int levelFix, int64_t *packedOffsetAndScale)

{

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>TEMPLATE_PP_MMX</name> <operator>||</operator> <operator>!</operator><name>HAVE_6REGS</name></expr></cpp:if>

int i;

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

if(levelFix){

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>TEMPLATE_PP_MMX</name> <operator>&amp;&amp;</operator> <name>HAVE_6REGS</name></expr></cpp:if>

__asm__ volatile(

"movq (%%"FF_REG_a"), %%mm2 \n\t" <comment type="line">// packedYOffset</comment>

"movq 8(%%"FF_REG_a"), %%mm3 \n\t" <comment type="line">// packedYScale</comment>

"lea (%2,%4), %%"FF_REG_a" \n\t"

"lea (%3,%5), %%"FF_REG_d" \n\t"

"pxor %%mm4, %%mm4 \n\t"

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>TEMPLATE_PP_MMXEXT</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REAL_SCALED_CPY</name><parameter_list>(<parameter><type><name>src1</name></type></parameter>, <parameter><type><name>src2</name></type></parameter>, <parameter><type><name>dst1</name></type></parameter>, <parameter><type><name>dst2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>"movq " #src1 ", %%mm0 \n\t""movq " #src1 ", %%mm5 \n\t""movq " #src2 ", %%mm1 \n\t""movq " #src2 ", %%mm6 \n\t""punpcklbw %%mm0, %%mm0 \n\t""punpckhbw %%mm5, %%mm5 \n\t""punpcklbw %%mm1, %%mm1 \n\t""punpckhbw %%mm6, %%mm6 \n\t""pmulhuw %%mm3, %%mm0 \n\t""pmulhuw %%mm3, %%mm5 \n\t""pmulhuw %%mm3, %%mm1 \n\t""pmulhuw %%mm3, %%mm6 \n\t""psubw %%mm2, %%mm0 \n\t""psubw %%mm2, %%mm5 \n\t""psubw %%mm2, %%mm1 \n\t""psubw %%mm2, %%mm6 \n\t""packuswb %%mm5, %%mm0 \n\t""packuswb %%mm6, %%mm1 \n\t""movq %%mm0, " #dst1 " \n\t""movq %%mm1, " #dst2 " \n\t"
</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="line">//TEMPLATE_PP_MMXEXT</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REAL_SCALED_CPY</name><parameter_list>(<parameter><type><name>src1</name></type></parameter>, <parameter><type><name>src2</name></type></parameter>, <parameter><type><name>dst1</name></type></parameter>, <parameter><type><name>dst2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>"movq " #src1 ", %%mm0 \n\t""movq " #src1 ", %%mm5 \n\t""punpcklbw %%mm4, %%mm0 \n\t""punpckhbw %%mm4, %%mm5 \n\t""psubw %%mm2, %%mm0 \n\t""psubw %%mm2, %%mm5 \n\t""movq " #src2 ", %%mm1 \n\t""psllw $6, %%mm0 \n\t""psllw $6, %%mm5 \n\t""pmulhw %%mm3, %%mm0 \n\t""movq " #src2 ", %%mm6 \n\t""pmulhw %%mm3, %%mm5 \n\t""punpcklbw %%mm4, %%mm1 \n\t""punpckhbw %%mm4, %%mm6 \n\t""psubw %%mm2, %%mm1 \n\t""psubw %%mm2, %%mm6 \n\t""psllw $6, %%mm1 \n\t""psllw $6, %%mm6 \n\t""pmulhw %%mm3, %%mm1 \n\t""pmulhw %%mm3, %%mm6 \n\t""packuswb %%mm5, %%mm0 \n\t""packuswb %%mm6, %%mm1 \n\t""movq %%mm0, " #dst1 " \n\t""movq %%mm1, " #dst2 " \n\t"
</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">//TEMPLATE_PP_MMXEXT</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCALED_CPY</name><parameter_list>(<parameter><type><name>src1</name></type></parameter>, <parameter><type><name>src2</name></type></parameter>, <parameter><type><name>dst1</name></type></parameter>, <parameter><type><name>dst2</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>REAL_SCALED_CPY(src1, src2, dst1, dst2)</cpp:value></cpp:define>

SCALED_CPY((%2) , (%2, %4) , (%3) , (%3, %5))

SCALED_CPY((%2, %4, 2), (%%FF_REGa, %4, 2), (%3, %5, 2), (%%FF_REGd, %5, 2))

SCALED_CPY((%2, %4, 4), (%%FF_REGa, %4, 4), (%3, %5, 4), (%%FF_REGd, %5, 4))

"lea (%%"FF_REG_a",%4,4), %%"FF_REG_a" \n\t"

"lea (%%"FF_REG_d",%5,4), %%"FF_REG_d" \n\t"

SCALED_CPY((%%FF_REGa, %4), (%%FF_REGa, %4, 2), (%%FF_REGd, %5), (%%FF_REGd, %5, 2))

: "=&amp;a" (packedOffsetAndScale)

: "0" (packedOffsetAndScale),

"r"(src),

"r"(dst),

"r" ((x86_reg)srcStride),

"r" ((x86_reg)dstStride)

: "%"FF_REG_d

);

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="line">//TEMPLATE_PP_MMX &amp;&amp; HAVE_6REGS</comment>

for(i=0; i&lt;8; i++)

memcpy( &amp;(dst[dstStride*i]),

&amp;(src[srcStride*i]), BLOCK_SIZE);

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">//TEMPLATE_PP_MMX &amp;&amp; HAVE_6REGS</comment>

}else{

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>TEMPLATE_PP_MMX</name> <operator>&amp;&amp;</operator> <name>HAVE_6REGS</name></expr></cpp:if>

__asm__ volatile(

"lea (%0,%2), %%"FF_REG_a" \n\t"

"lea (%1,%3), %%"FF_REG_d" \n\t"

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REAL_SIMPLE_CPY</name><parameter_list>(<parameter><type><name>src1</name></type></parameter>, <parameter><type><name>src2</name></type></parameter>, <parameter><type><name>dst1</name></type></parameter>, <parameter><type><name>dst2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>"movq " #src1 ", %%mm0 \n\t""movq " #src2 ", %%mm1 \n\t""movq %%mm0, " #dst1 " \n\t""movq %%mm1, " #dst2 " \n\t"
</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIMPLE_CPY</name><parameter_list>(<parameter><type><name>src1</name></type></parameter>, <parameter><type><name>src2</name></type></parameter>, <parameter><type><name>dst1</name></type></parameter>, <parameter><type><name>dst2</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>REAL_SIMPLE_CPY(src1, src2, dst1, dst2)</cpp:value></cpp:define>

SIMPLE_CPY((%0) , (%0, %2) , (%1) , (%1, %3))

SIMPLE_CPY((%0, %2, 2), (%%FF_REGa, %2, 2), (%1, %3, 2), (%%FF_REGd, %3, 2))

SIMPLE_CPY((%0, %2, 4), (%%FF_REGa, %2, 4), (%1, %3, 4), (%%FF_REGd, %3, 4))

"lea (%%"FF_REG_a",%2,4), %%"FF_REG_a" \n\t"

"lea (%%"FF_REG_d",%3,4), %%"FF_REG_d" \n\t"

SIMPLE_CPY((%%FF_REGa, %2), (%%FF_REGa, %2, 2), (%%FF_REGd, %3), (%%FF_REGd, %3, 2))

: : "r" (src),

"r" (dst),

"r" ((x86_reg)srcStride),

"r" ((x86_reg)dstStride)

: "%"FF_REG_a, "%"FF_REG_d

);

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="line">//TEMPLATE_PP_MMX &amp;&amp; HAVE_6REGS</comment>

for(i=0; i&lt;8; i++)

memcpy( &amp;(dst[dstStride*i]),

&amp;(src[srcStride*i]), BLOCK_SIZE);

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">//TEMPLATE_PP_MMX &amp;&amp; HAVE_6REGS</comment>

}

}

<comment type="block" format="doxygen">/**

* Duplicate the given 8 src pixels ? times upward

*/</comment>

static inline void RENAME(duplicate)(uint8_t src[], int stride)

{

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>TEMPLATE_PP_MMX</name></expr></cpp:if>

__asm__ volatile(

"movq (%0), %%mm0 \n\t"

"movq %%mm0, (%0, %1, 4) \n\t"

"add %1, %0 \n\t"

"movq %%mm0, (%0) \n\t"

"movq %%mm0, (%0, %1) \n\t"

"movq %%mm0, (%0, %1, 2) \n\t"

"movq %%mm0, (%0, %1, 4) \n\t"

: "+r" (src)

: "r" ((x86_reg)-stride)

);

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

int i;

uint8_t *p=src;

for(i=0; i&lt;5; i++){

p-= stride;

memcpy(p, src, 8);

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCH_X86</name> <operator>&amp;&amp;</operator> <name>TEMPLATE_PP_MMXEXT</name></expr></cpp:if>

static inline void RENAME(prefetchnta)(const void *p)

{

__asm__ volatile( "prefetchnta (%0)\n\t"

: : "r" (p)

);

}

static inline void RENAME(prefetcht0)(const void *p)

{

__asm__ volatile( "prefetcht0 (%0)\n\t"

: : "r" (p)

);

}

static inline void RENAME(prefetcht1)(const void *p)

{

__asm__ volatile( "prefetcht1 (%0)\n\t"

: : "r" (p)

);

}

static inline void RENAME(prefetcht2)(const void *p)

{

__asm__ volatile( "prefetcht2 (%0)\n\t"

: : "r" (p)

);

}

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>!</operator><name>ARCH_X86</name> <operator>&amp;&amp;</operator> <call><name>AV_GCC_VERSION_AT_LEAST</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></cpp:elif>

static inline void RENAME(prefetchnta)(const void *p)

{

__builtin_prefetch(p,0,0);

}

static inline void RENAME(prefetcht0)(const void *p)

{

__builtin_prefetch(p,0,1);

}

static inline void RENAME(prefetcht1)(const void *p)

{

__builtin_prefetch(p,0,2);

}

static inline void RENAME(prefetcht2)(const void *p)

{

__builtin_prefetch(p,0,3);

}

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

static inline void RENAME(prefetchnta)(const void *p)

{

return;

}

static inline void RENAME(prefetcht0)(const void *p)

{

return;

}

static inline void RENAME(prefetcht1)(const void *p)

{

return;

}

static inline void RENAME(prefetcht2)(const void *p)

{

return;

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block" format="doxygen">/**

* Filter array of bytes (Y or U or V values)

*/</comment>

static void RENAME(postProcess)(const uint8_t src[], int srcStride, uint8_t dst[], int dstStride, int width, int height,

const int8_t QPs[], int QPStride, int isColor, PPContext *c2)

{

DECLARE_ALIGNED(8, PPContext, c)= *c2; <comment type="line">//copy to stack for faster access</comment>

int x,y;

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TEMPLATE_PP_TIME_MODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
const int mode= TEMPLATE_PP_TIME_MODE;

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

const int mode= isColor <operator>?</operator> c.ppMode.chromMode : c.ppMode.lumMode;

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

int black=0, white=255; <comment type="line">// blackest black and whitest white in the picture</comment>

int QPCorrecture= 256*256;

int copyAhead;

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>TEMPLATE_PP_MMX</name></expr></cpp:if>

int i;

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

const int qpHShift= isColor <operator>?</operator> 4-c.hChromaSubSample : 4;

const int qpVShift= isColor <operator>?</operator> 4-c.vChromaSubSample : 4;

<comment type="line">//FIXME remove</comment>

uint64_t * const yHistogram= c.yHistogram;

uint8_t * const tempSrc= srcStride &gt; 0 <operator>?</operator> c.tempSrc : c.tempSrc - 23*srcStride;

uint8_t * const tempDst= (dstStride &gt; 0 <operator>?</operator> c.tempDst : c.tempDst - 23*dstStride) + 32;

<comment type="line">//const int mbWidth= isColor ? (width+7)&gt;&gt;3 : (width+15)&gt;&gt;4;</comment>

if (mode &amp; VISUALIZE){

if(!(mode &amp; (V_A_DEBLOCK | H_A_DEBLOCK)) || TEMPLATE_PP_MMX) {

av_log(c2, AV_LOG_WARNING, "Visualization is currently only supported with the accurate deblock filter without SIMD\n");

}

}

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>TEMPLATE_PP_MMX</name></expr></cpp:if>

for(i=0; i&lt;57; i++){

int offset= ((i*c.ppMode.baseDcDiff)&gt;&gt;8) + 1;

int threshold= offset*2 + 1;

c.mmxDcOffset[i]= 0x7F - offset;

c.mmxDcThreshold[i]= 0x7F - threshold;

c.mmxDcOffset[i]*= 0x0101010101010101LL;

c.mmxDcThreshold[i]*= 0x0101010101010101LL;

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

if(mode &amp; CUBIC_IPOL_DEINT_FILTER) copyAhead=16;

else if( (mode &amp; LINEAR_BLEND_DEINT_FILTER)

|| (mode &amp; FFMPEG_DEINT_FILTER)

|| (mode &amp; LOWPASS5_DEINT_FILTER)) copyAhead=14;

else if( (mode &amp; V_DEBLOCK)

|| (mode &amp; LINEAR_IPOL_DEINT_FILTER)

|| (mode &amp; MEDIAN_DEINT_FILTER)

|| (mode &amp; V_A_DEBLOCK)) copyAhead=13;

else if(mode &amp; V_X1_FILTER) copyAhead=11;

<comment type="line">// else if(mode &amp; V_RK1_FILTER) copyAhead=10;</comment>

else if(mode &amp; DERING) copyAhead=9;

else copyAhead=8;

copyAhead-= 8;

if(!isColor){

uint64_t sum= 0;

int i;

uint64_t maxClipped;

uint64_t clipped;

AVRational scale;

c.frameNum++;

<comment type="line">// first frame is fscked so we ignore it</comment>

if(c.frameNum == 1) yHistogram[0]= width*(uint64_t)height/64*15/256;

for(i=0; i&lt;256; i++){

sum+= yHistogram[i];

}

<comment type="block">/* We always get a completely black picture first. */</comment>

maxClipped= av_rescale(sum, c.ppMode.maxClippedThreshold.num, c.ppMode.maxClippedThreshold.den);

clipped= sum;

for(black=255; black&gt;0; black--){

if(clipped &lt; maxClipped) break;

clipped-= yHistogram[black];

}

clipped= sum;

for(white=0; white&lt;256; white++){

if(clipped &lt; maxClipped) break;

clipped-= yHistogram[white];

}

scale = (AVRational){c.ppMode.maxAllowedY - c.ppMode.minAllowedY, white - black};

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>TEMPLATE_PP_MMXEXT</name></expr></cpp:if>

c.packedYScale = (uint16_t)av_rescale(scale.num, 256, scale.den);

c.packedYOffset= (((black*c.packedYScale)&gt;&gt;8) - c.ppMode.minAllowedY) &amp; 0xFFFF;

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

c.packedYScale = (uint16_t)av_rescale(scale.num, 1024, scale.den);

c.packedYOffset= (black - c.ppMode.minAllowedY) &amp; 0xFFFF;

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

c.packedYOffset|= c.packedYOffset&lt;&lt;32;

c.packedYOffset|= c.packedYOffset&lt;&lt;16;

c.packedYScale|= c.packedYScale&lt;&lt;32;

c.packedYScale|= c.packedYScale&lt;&lt;16;

if(mode &amp; LEVEL_FIX) QPCorrecture= (int)av_rescale(scale.num, 256*256, scale.den);

else QPCorrecture= 256*256;

}else{

c.packedYScale= 0x0100010001000100LL;

c.packedYOffset= 0;

QPCorrecture= 256*256;

}

<comment type="block">/* copy &amp; deinterlace first row of blocks */</comment>

y=-BLOCK_SIZE;

{

const uint8_t *srcBlock= &amp;(src[y*srcStride]);

uint8_t *dstBlock= tempDst + dstStride;

<comment type="line">// From this point on it is guaranteed that we can read and write 16 lines downward</comment>

<comment type="line">// finish 1 block before the next otherwise we might have a problem</comment>

<comment type="line">// with the L1 Cache of the P4 ... or only a few blocks at a time or something</comment>

for(x=0; x&lt;width; x+=BLOCK_SIZE){

RENAME(prefetchnta)(srcBlock + (((x&gt;&gt;2)&amp;6) + copyAhead)*srcStride + 32);

RENAME(prefetchnta)(srcBlock + (((x&gt;&gt;2)&amp;6) + copyAhead+1)*srcStride + 32);

RENAME(prefetcht0)(dstBlock + (((x&gt;&gt;2)&amp;6) + copyAhead)*dstStride + 32);

RENAME(prefetcht0)(dstBlock + (((x&gt;&gt;2)&amp;6) + copyAhead+1)*dstStride + 32);

RENAME(blockCopy)(dstBlock + dstStride*8, dstStride,

srcBlock + srcStride*8, srcStride, mode &amp; LEVEL_FIX, &amp;c.packedYOffset);

RENAME(duplicate)(dstBlock + dstStride*8, dstStride);

if(mode &amp; LINEAR_IPOL_DEINT_FILTER)

RENAME(deInterlaceInterpolateLinear)(dstBlock, dstStride);

else if(mode &amp; LINEAR_BLEND_DEINT_FILTER)

RENAME(deInterlaceBlendLinear)(dstBlock, dstStride, c.deintTemp + x);

else if(mode &amp; MEDIAN_DEINT_FILTER)

RENAME(deInterlaceMedian)(dstBlock, dstStride);

else if(mode &amp; CUBIC_IPOL_DEINT_FILTER)

RENAME(deInterlaceInterpolateCubic)(dstBlock, dstStride);

else if(mode &amp; FFMPEG_DEINT_FILTER)

RENAME(deInterlaceFF)(dstBlock, dstStride, c.deintTemp + x);

else if(mode &amp; LOWPASS5_DEINT_FILTER)

RENAME(deInterlaceL5)(dstBlock, dstStride, c.deintTemp + x, c.deintTemp + width + x);

<comment type="block">/* else if(mode &amp; CUBIC_BLEND_DEINT_FILTER)

RENAME(deInterlaceBlendCubic)(dstBlock, dstStride);

*/</comment>

dstBlock+=8;

srcBlock+=8;

}

if(width==FFABS(dstStride))

linecpy(dst, tempDst + 9*dstStride, copyAhead, dstStride);

else{

int i;

for(i=0; i&lt;copyAhead; i++){

memcpy(dst + i*dstStride, tempDst + (9+i)*dstStride, width);

}

}

}

for(y=0; y&lt;height; y+=BLOCK_SIZE){

<comment type="line">//1% speedup if these are here instead of the inner loop</comment>

const uint8_t *srcBlock= &amp;(src[y*srcStride]);

uint8_t *dstBlock= &amp;(dst[y*dstStride]);

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>TEMPLATE_PP_MMX</name></expr></cpp:if>

uint8_t *tempBlock1= c.tempBlocks;

uint8_t *tempBlock2= c.tempBlocks + 8;

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

const int8_t *QPptr= &amp;QPs[(y&gt;&gt;qpVShift)*QPStride];

int8_t *nonBQPptr= &amp;c.nonBQPTable[(y&gt;&gt;qpVShift)*FFABS(QPStride)];

int QP=0, nonBQP=0;

<comment type="block">/* can we mess with a 8x16 block from srcBlock/dstBlock downwards and 1 line upwards

if not than use a temporary buffer */</comment>

if(y+15 &gt;= height){

int i;

<comment type="block">/* copy from line (copyAhead) to (copyAhead+7) of src, these will be copied with

blockcopy to dst later */</comment>

linecpy(tempSrc + srcStride*copyAhead, srcBlock + srcStride*copyAhead,

FFMAX(height-y-copyAhead, 0), srcStride);

<comment type="block">/* duplicate last line of src to fill the void up to line (copyAhead+7) */</comment>

for(i=FFMAX(height-y, 8); i&lt;copyAhead+8; i++)

memcpy(tempSrc + srcStride*i, src + srcStride*(height-1), FFABS(srcStride));

<comment type="block">/* copy up to (copyAhead+1) lines of dst (line -1 to (copyAhead-1))*/</comment>

linecpy(tempDst, dstBlock - dstStride, FFMIN(height-y+1, copyAhead+1), dstStride);

<comment type="block">/* duplicate last line of dst to fill the void up to line (copyAhead) */</comment>

for(i=height-y+1; i&lt;=copyAhead; i++)

memcpy(tempDst + dstStride*i, dst + dstStride*(height-1), FFABS(dstStride));

dstBlock= tempDst + dstStride;

srcBlock= tempSrc;

}

<comment type="line">// From this point on it is guaranteed that we can read and write 16 lines downward</comment>

<comment type="line">// finish 1 block before the next otherwise we might have a problem</comment>

<comment type="line">// with the L1 Cache of the P4 ... or only a few blocks at a time or something</comment>

for(x=0; x&lt;width; ){

int startx = x;

int endx = FFMIN(width, x+32);

uint8_t *dstBlockStart = dstBlock;

const uint8_t *srcBlockStart = srcBlock;

int qp_index = 0;

for(qp_index=0; qp_index &lt; (endx-startx)/BLOCK_SIZE; qp_index++){

QP = QPptr[(x+qp_index*BLOCK_SIZE)&gt;&gt;qpHShift];

nonBQP = nonBQPptr[(x+qp_index*BLOCK_SIZE)&gt;&gt;qpHShift];

if(!isColor){

QP= (QP* QPCorrecture + 256*128)&gt;&gt;16;

nonBQP= (nonBQP* QPCorrecture + 256*128)&gt;&gt;16;

yHistogram[(srcBlock+qp_index*8)[srcStride*12 + 4]]++;

}

c.QP_block[qp_index] = QP;

c.nonBQP_block[qp_index] = nonBQP;

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>TEMPLATE_PP_MMX</name></expr></cpp:if>

__asm__ volatile(

"movd %1, %%mm7 \n\t"

"packuswb %%mm7, %%mm7 \n\t" <comment type="line">// 0, 0, 0, QP, 0, 0, 0, QP</comment>

"packuswb %%mm7, %%mm7 \n\t" <comment type="line">// 0,QP, 0, QP, 0,QP, 0, QP</comment>

"packuswb %%mm7, %%mm7 \n\t" <comment type="line">// QP,..., QP</comment>

"movq %%mm7, %0 \n\t"

: "=m" (c.pQPb_block[qp_index])

: "r" (QP)

);

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}

for(; x &lt; endx; x+=BLOCK_SIZE){

RENAME(prefetchnta)(srcBlock + (((x&gt;&gt;2)&amp;6) + copyAhead)*srcStride + 32);

RENAME(prefetchnta)(srcBlock + (((x&gt;&gt;2)&amp;6) + copyAhead+1)*srcStride + 32);

RENAME(prefetcht0)(dstBlock + (((x&gt;&gt;2)&amp;6) + copyAhead)*dstStride + 32);

RENAME(prefetcht0)(dstBlock + (((x&gt;&gt;2)&amp;6) + copyAhead+1)*dstStride + 32);

RENAME(blockCopy)(dstBlock + dstStride*copyAhead, dstStride,

srcBlock + srcStride*copyAhead, srcStride, mode &amp; LEVEL_FIX, &amp;c.packedYOffset);

if(mode &amp; LINEAR_IPOL_DEINT_FILTER)

RENAME(deInterlaceInterpolateLinear)(dstBlock, dstStride);

else if(mode &amp; LINEAR_BLEND_DEINT_FILTER)

RENAME(deInterlaceBlendLinear)(dstBlock, dstStride, c.deintTemp + x);

else if(mode &amp; MEDIAN_DEINT_FILTER)

RENAME(deInterlaceMedian)(dstBlock, dstStride);

else if(mode &amp; CUBIC_IPOL_DEINT_FILTER)

RENAME(deInterlaceInterpolateCubic)(dstBlock, dstStride);

else if(mode &amp; FFMPEG_DEINT_FILTER)

RENAME(deInterlaceFF)(dstBlock, dstStride, c.deintTemp + x);

else if(mode &amp; LOWPASS5_DEINT_FILTER)

RENAME(deInterlaceL5)(dstBlock, dstStride, c.deintTemp + x, c.deintTemp + width + x);

<comment type="block">/* else if(mode &amp; CUBIC_BLEND_DEINT_FILTER)

RENAME(deInterlaceBlendCubic)(dstBlock, dstStride);

*/</comment>

dstBlock+=8;

srcBlock+=8;

}

dstBlock = dstBlockStart;

srcBlock = srcBlockStart;

for(x = startx, qp_index = 0; x &lt; endx; x+=BLOCK_SIZE, qp_index++){

const int stride= dstStride;

<comment type="line">//temporary while changing QP stuff to make things continue to work</comment>

<comment type="line">//eventually QP,nonBQP,etc will be arrays and this will be unnecessary</comment>

c.QP = c.QP_block[qp_index];

c.nonBQP = c.nonBQP_block[qp_index];

c.pQPb = c.pQPb_block[qp_index];

c.pQPb2 = c.pQPb2_block[qp_index];

<comment type="block">/* only deblock if we have 2 blocks */</comment>

if(y + 8 &lt; height){

if(mode &amp; V_X1_FILTER)

RENAME(vertX1Filter)(dstBlock, stride, &amp;c);

else if(mode &amp; V_DEBLOCK){

const int t= RENAME(vertClassify)(dstBlock, stride, &amp;c);

if(t==1)

RENAME(doVertLowPass)(dstBlock, stride, &amp;c);

else if(t==2)

RENAME(doVertDefFilter)(dstBlock, stride, &amp;c);

}else if(mode &amp; V_A_DEBLOCK){

RENAME(do_a_deblock)(dstBlock, stride, 1, &amp;c, mode);

}

}

dstBlock+=8;

srcBlock+=8;

}

dstBlock = dstBlockStart;

srcBlock = srcBlockStart;

for(x = startx, qp_index=0; x &lt; endx; x+=BLOCK_SIZE, qp_index++){

const int stride= dstStride;

av_unused uint8_t *tmpXchg;

c.QP = c.QP_block[qp_index];

c.nonBQP = c.nonBQP_block[qp_index];

c.pQPb = c.pQPb_block[qp_index];

c.pQPb2 = c.pQPb2_block[qp_index];

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>TEMPLATE_PP_MMX</name></expr></cpp:if>

RENAME(transpose1)(tempBlock1, tempBlock2, dstBlock, dstStride);

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* check if we have a previous block to deblock it with dstBlock */</comment>

if(x - 8 &gt;= 0){

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>TEMPLATE_PP_MMX</name></expr></cpp:if>

if(mode &amp; H_X1_FILTER)

RENAME(vertX1Filter)(tempBlock1, 16, &amp;c);

else if(mode &amp; H_DEBLOCK){

const int t= RENAME(vertClassify)(tempBlock1, 16, &amp;c);

if(t==1)

RENAME(doVertLowPass)(tempBlock1, 16, &amp;c);

else if(t==2)

RENAME(doVertDefFilter)(tempBlock1, 16, &amp;c);

}else if(mode &amp; H_A_DEBLOCK){

RENAME(do_a_deblock)(tempBlock1, 16, 1, &amp;c, mode);

}

RENAME(transpose2)(dstBlock-4, dstStride, tempBlock1 + 4*16);

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

if(mode &amp; H_X1_FILTER)

horizX1Filter(dstBlock-4, stride, c.QP);

else if(mode &amp; H_DEBLOCK){

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>TEMPLATE_PP_ALTIVEC</name></expr></cpp:if>

DECLARE_ALIGNED(16, unsigned char, tempBlock)[272];

int t;

transpose_16x8_char_toPackedAlign_altivec(tempBlock, dstBlock - (4 + 1), stride);

t = vertClassify_altivec(tempBlock-48, 16, &amp;c);

if(t==1) {

doVertLowPass_altivec(tempBlock-48, 16, &amp;c);

transpose_8x16_char_fromPackedAlign_altivec(dstBlock - (4 + 1), tempBlock, stride);

}

else if(t==2) {

doVertDefFilter_altivec(tempBlock-48, 16, &amp;c);

transpose_8x16_char_fromPackedAlign_altivec(dstBlock - (4 + 1), tempBlock, stride);

}

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

const int t= RENAME(horizClassify)(dstBlock-4, stride, &amp;c);

if(t==1)

RENAME(doHorizLowPass)(dstBlock-4, stride, &amp;c);

else if(t==2)

RENAME(doHorizDefFilter)(dstBlock-4, stride, &amp;c);

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}else if(mode &amp; H_A_DEBLOCK){

RENAME(do_a_deblock)(dstBlock-8, 1, stride, &amp;c, mode);

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">//TEMPLATE_PP_MMX</comment>

if(mode &amp; DERING){

<comment type="line">//FIXME filter first line</comment>

if(y&gt;0) RENAME(dering)(dstBlock - stride - 8, stride, &amp;c);

}

if(mode &amp; TEMP_NOISE_FILTER)

{

RENAME(tempNoiseReducer)(dstBlock-8, stride,

c.tempBlurred[isColor] + y*dstStride + x,

c.tempBlurredPast[isColor] + (y&gt;&gt;3)*256 + (x&gt;&gt;3) + 256,

c.ppMode.maxTmpNoise);

}

}

dstBlock+=8;

srcBlock+=8;

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>TEMPLATE_PP_MMX</name></expr></cpp:if>

tmpXchg= tempBlock1;

tempBlock1= tempBlock2;

tempBlock2 = tmpXchg;

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}

}

if(mode &amp; DERING){

if(y &gt; 0) RENAME(dering)(dstBlock - dstStride - 8, dstStride, &amp;c);

}

if((mode &amp; TEMP_NOISE_FILTER)){

RENAME(tempNoiseReducer)(dstBlock-8, dstStride,

c.tempBlurred[isColor] + y*dstStride + x,

c.tempBlurredPast[isColor] + (y&gt;&gt;3)*256 + (x&gt;&gt;3) + 256,

c.ppMode.maxTmpNoise);

}

<comment type="block">/* did we use a tmp buffer for the last lines*/</comment>

if(y+15 &gt;= height){

uint8_t *dstBlock= &amp;(dst[y*dstStride]);

if(width==FFABS(dstStride))

linecpy(dstBlock, tempDst + dstStride, height-y, dstStride);

else{

int i;

for(i=0; i&lt;height-y; i++){

memcpy(dstBlock + i*dstStride, tempDst + (i+1)*dstStride, width);

}

}

}

}

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>TEMPLATE_PP_3DNOW</name></expr></cpp:if>

__asm__ volatile("femms");

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>TEMPLATE_PP_MMX</name></expr></cpp:elif>

__asm__ volatile("emms");

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_BRIGHTNESS</name></expr></argument>)</argument_list></call></expr></cpp:if>
if(!isColor){

int max=1;

int i;

for(i=0; i&lt;256; i++)

if(yHistogram[i] &gt; max) max=yHistogram[i];

for(i=1; i&lt;256; i++){

int x;

int start=yHistogram[i-1]/(max/256+1);

int end=yHistogram[i]/(max/256+1);

int inc= end &gt; start <operator>?</operator> 1 : -1;

for(x=start; x!=end+inc; x+=inc)

dst[ i*dstStride + x]+=128;

}

for(i=0; i&lt;100; i+=2){

dst[ (white)*dstStride + i]+=128;

dst[ (black)*dstStride + i]+=128;

}

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

*c2= c; <comment type="line">//copy local context back</comment>

}</asm></block_content></block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>RENAME</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TEMPLATE_PP_C</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TEMPLATE_PP_ALTIVEC</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TEMPLATE_PP_MMX</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TEMPLATE_PP_MMXEXT</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TEMPLATE_PP_3DNOW</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TEMPLATE_PP_SSE2</name></cpp:undef>

</unit>
