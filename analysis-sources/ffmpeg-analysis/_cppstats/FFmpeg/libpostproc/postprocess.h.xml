<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libpostproc\postprocess.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libpostproc/version.h"</cpp:file></cpp:include>

<function_decl><type><name>unsigned</name></type> <name>postproc_version</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>postproc_configuration</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>postproc_license</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PP_QUALITY_MAX</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><name>void</name></type> <name>pp_context</name>;</typedef>

<typedef>typedef <type><name>void</name></type> <name>pp_mode</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LIBPOSTPROC_VERSION_INT</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">52</literal><operator>&lt;&lt;</operator><literal type="number">16</literal><operator>)</operator></expr></cpp:if>

<typedef>typedef <type><name>pp_context</name></type> <name>pp_context_t</name>;</typedef>

<typedef>typedef <type><name>pp_mode</name></type> <name>pp_mode_t</name>;</typedef>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>pp_help</name></decl>;</decl_stmt> 

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>pp_help</name><index>[]</index></name></decl>;</decl_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><name>void</name></type> <name>pp_postprocess</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type> <name><name>src</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name><name>srcStride</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type> <name><name>dst</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name><name>dstStride</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>horizontalSize</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>verticalSize</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int8_t</name> <modifier>*</modifier></type><name>QP_store</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>QP_stride</name></decl></parameter>,

<parameter><decl><type><name>pp_mode</name> <modifier>*</modifier></type><name>mode</name></decl></parameter>, <parameter><decl><type><name>pp_context</name> <modifier>*</modifier></type><name>ppContext</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pict_type</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>pp_mode</name> <modifier>*</modifier></type><name>pp_get_mode_by_name_and_quality</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>quality</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>pp_free_mode</name><parameter_list>(<parameter><decl><type><name>pp_mode</name> <modifier>*</modifier></type><name>mode</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>pp_context</name> <modifier>*</modifier></type><name>pp_get_context</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>pp_free_context</name><parameter_list>(<parameter><decl><type><name>pp_context</name> <modifier>*</modifier></type><name>ppContext</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PP_CPU_CAPS_MMX</name></cpp:macro> <cpp:value>0x80000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PP_CPU_CAPS_MMX2</name></cpp:macro> <cpp:value>0x20000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PP_CPU_CAPS_3DNOW</name></cpp:macro> <cpp:value>0x40000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PP_CPU_CAPS_ALTIVEC</name></cpp:macro> <cpp:value>0x10000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PP_CPU_CAPS_AUTO</name></cpp:macro> <cpp:value>0x00080000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PP_FORMAT</name></cpp:macro> <cpp:value>0x00000008</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PP_FORMAT_420</name></cpp:macro> <cpp:value>(0x00000011|PP_FORMAT)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PP_FORMAT_422</name></cpp:macro> <cpp:value>(0x00000001|PP_FORMAT)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PP_FORMAT_411</name></cpp:macro> <cpp:value>(0x00000002|PP_FORMAT)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PP_FORMAT_444</name></cpp:macro> <cpp:value>(0x00000000|PP_FORMAT)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PP_FORMAT_440</name></cpp:macro> <cpp:value>(0x00000010|PP_FORMAT)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PP_PICT_TYPE_QP2</name></cpp:macro> <cpp:value>0x00000010</cpp:value></cpp:define> 

</unit>
