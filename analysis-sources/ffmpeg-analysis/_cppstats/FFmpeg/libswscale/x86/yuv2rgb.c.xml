<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libswscale\x86\yuv2rgb.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libswscale/rgb2rgb.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libswscale/swscale.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libswscale/swscale_internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/x86/asm.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/x86/cpu.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/cpu.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_X86ASM</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DITHER1XBPP</name></cpp:macro></cpp:define> 

<expr_stmt><expr><call><name>DECLARE_ASM_CONST</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>mmx_00ffw</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0x00ff00ff00ff00ffULL</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ASM_CONST</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>mmx_redmask</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0xf8f8f8f8f8f8f8f8ULL</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ASM_CONST</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>mmx_grnmask</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0xfcfcfcfcfcfcfcfcULL</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ASM_CONST</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>pb_e0</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0xe0e0e0e0e0e0e0e0ULL</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ASM_CONST</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>pb_03</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0x0303030303030303ULL</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ASM_CONST</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>pb_07</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0x0707070707070707ULL</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_MMX</name></expr></cpp:if>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>RENAME</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>COMPILE_TEMPLATE_MMXEXT</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILE_TEMPLATE_MMXEXT</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RENAME</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a ##_mmx</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"yuv2rgb_template.c"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_MMXEXT</name></expr></cpp:if>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>RENAME</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>COMPILE_TEMPLATE_MMXEXT</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILE_TEMPLATE_MMXEXT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RENAME</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a ##_mmxext</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"yuv2rgb_template.c"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_SSSE3</name></expr></cpp:if>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>RENAME</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>COMPILE_TEMPLATE_MMXEXT</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILE_TEMPLATE_MMXEXT</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RENAME</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a ##_ssse3</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"yuv2rgb_template.c"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><name>av_cold</name> <name>SwsFunc</name></type> <name>ff_yuv2rgb_init_x86</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_X86ASM</name></expr></cpp:if>

<decl_stmt><decl><type><name>int</name></type> <name>cpu_flags</name> <init>= <expr><call><name>av_get_cpu_flags</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>EXTERNAL_SSSE3</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<switch>switch <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>dstFormat</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_PIX_FMT_RGB32</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>srcFormat</name></name> <operator>==</operator> <name>AV_PIX_FMT_YUVA420P</name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_SWSCALE_ALPHA</name></expr></cpp:if>

<return>return <expr><name>yuva420_rgb32_ssse3</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<break>break;</break>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<return>return <expr><name>yuv420_rgb32_ssse3</name></expr>;</return></block_content></block></else></if_stmt>

<case>case <expr><name>AV_PIX_FMT_BGR32</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>srcFormat</name></name> <operator>==</operator> <name>AV_PIX_FMT_YUVA420P</name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_SWSCALE_ALPHA</name></expr></cpp:if>

<return>return <expr><name>yuva420_bgr32_ssse3</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<break>break;</break>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<return>return <expr><name>yuv420_bgr32_ssse3</name></expr>;</return></block_content></block></else></if_stmt>

<case>case <expr><name>AV_PIX_FMT_RGB24</name></expr>:</case>

<return>return <expr><name>yuv420_rgb24_ssse3</name></expr>;</return>

<case>case <expr><name>AV_PIX_FMT_BGR24</name></expr>:</case>

<return>return <expr><name>yuv420_bgr24_ssse3</name></expr>;</return>

<case>case <expr><name>AV_PIX_FMT_RGB565</name></expr>:</case>

<return>return <expr><name>yuv420_rgb16_ssse3</name></expr>;</return>

<case>case <expr><name>AV_PIX_FMT_RGB555</name></expr>:</case>

<return>return <expr><name>yuv420_rgb15_ssse3</name></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>EXTERNAL_MMXEXT</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<switch>switch <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>dstFormat</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_PIX_FMT_RGB24</name></expr>:</case>

<return>return <expr><name>yuv420_rgb24_mmxext</name></expr>;</return>

<case>case <expr><name>AV_PIX_FMT_BGR24</name></expr>:</case>

<return>return <expr><name>yuv420_bgr24_mmxext</name></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>EXTERNAL_MMX</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<switch>switch <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>dstFormat</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_PIX_FMT_RGB32</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>srcFormat</name></name> <operator>==</operator> <name>AV_PIX_FMT_YUVA420P</name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_SWSCALE_ALPHA</name></expr></cpp:if>

<return>return <expr><name>yuva420_rgb32_mmx</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<break>break;</break>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<return>return <expr><name>yuv420_rgb32_mmx</name></expr>;</return></block_content></block></else></if_stmt>

<case>case <expr><name>AV_PIX_FMT_BGR32</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>srcFormat</name></name> <operator>==</operator> <name>AV_PIX_FMT_YUVA420P</name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_SWSCALE_ALPHA</name></expr></cpp:if>

<return>return <expr><name>yuva420_bgr32_mmx</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<break>break;</break>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<return>return <expr><name>yuv420_bgr32_mmx</name></expr>;</return></block_content></block></else></if_stmt>

<case>case <expr><name>AV_PIX_FMT_RGB24</name></expr>:</case>

<return>return <expr><name>yuv420_rgb24_mmx</name></expr>;</return>

<case>case <expr><name>AV_PIX_FMT_BGR24</name></expr>:</case>

<return>return <expr><name>yuv420_bgr24_mmx</name></expr>;</return>

<case>case <expr><name>AV_PIX_FMT_RGB565</name></expr>:</case>

<return>return <expr><name>yuv420_rgb16_mmx</name></expr>;</return>

<case>case <expr><name>AV_PIX_FMT_RGB555</name></expr>:</case>

<return>return <expr><name>yuv420_rgb15_mmx</name></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

</unit>
