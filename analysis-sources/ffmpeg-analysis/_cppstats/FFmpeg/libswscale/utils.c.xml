<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libswscale\utils.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DEFAULT_SOURCE</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_SVID_SOURCE</name></cpp:macro></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DARWIN_C_SOURCE</name></cpp:macro></cpp:define> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_MMAP</name></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/mman.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MAP_ANON</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MAP_ANONYMOUS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAP_ANONYMOUS</name></cpp:macro> <cpp:value>MAP_ANON</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_VIRTUALALLOC</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WIN32_LEAN_AND_MEAN</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avutil.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/bswap.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/cpu.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/imgutils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/libm.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mathematics.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixdesc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/aarch64/cpu.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/ppc/cpu.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/x86/asm.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/x86/cpu.h"</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>attribute_deprecated</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>attribute_deprecated</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rgb2rgb.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"swscale.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"swscale_internal.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>FF_API_SWS_VECTOR</name></expr></cpp:if>

<function_decl><type><specifier>static</specifier> <name>SwsVector</name> <modifier>*</modifier></type><name>sws_getIdentityVec</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>sws_addVec</name><parameter_list>(<parameter><decl><type><name>SwsVector</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>SwsVector</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>sws_shiftVec</name><parameter_list>(<parameter><decl><type><name>SwsVector</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>shift</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>sws_printVec2</name><parameter_list>(<parameter><decl><type><name>SwsVector</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>AVClass</name> <modifier>*</modifier></type><name>log_ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>log_level</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>handle_formats</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>unsigned</name></type> <name>swscale_version</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>LIBSWSCALE_VERSION_MICRO</name> <operator>&gt;=</operator> <literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>LIBSWSCALE_VERSION_INT</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>swscale_configuration</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>FFMPEG_CONFIGURATION</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>swscale_license</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LICENSE_PREFIX</name></cpp:macro> <cpp:value>"libswscale license: "</cpp:value></cpp:define>

<return>return <expr><operator>&amp;</operator><name>LICENSE_PREFIX</name> <name><name>FFMPEG_LICENSE</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>LICENSE_PREFIX</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<typedef>typedef <type><struct>struct <name>FormatEntry</name> <block>{

<decl_stmt><decl><type><name>uint8_t</name></type> <name>is_supported_in</name> <range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>is_supported_out</name> <range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>is_supported_endianness</name> <range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

}</block></struct></type> <name>FormatEntry</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>FormatEntry</name></type> <name><name>format_entries</name><index>[]</index></name> <init>= <expr><block>{

<expr><index>[<expr><name>AV_PIX_FMT_YUV420P</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_YUYV422</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_RGB24</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_BGR24</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_YUV422P</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_YUV444P</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_YUV410P</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_YUV411P</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_GRAY8</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_MONOWHITE</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_MONOBLACK</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_PAL8</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_YUVJ420P</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_YUVJ411P</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_YUVJ422P</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_YUVJ444P</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_YVYU422</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_UYVY422</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_UYYVYY411</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_BGR8</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_BGR4</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_BGR4_BYTE</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_RGB8</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_RGB4</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_RGB4_BYTE</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_NV12</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_NV21</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_ARGB</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_RGBA</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_ABGR</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_BGRA</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_0RGB</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_RGB0</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_0BGR</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_BGR0</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_GRAY9BE</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_GRAY9LE</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_GRAY10BE</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_GRAY10LE</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_GRAY12BE</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_GRAY12LE</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_GRAY14BE</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_GRAY14LE</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_GRAY16BE</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_GRAY16LE</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_YUV440P</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_YUVJ440P</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_YUV440P10LE</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_YUV440P10BE</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_YUV440P12LE</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_YUV440P12BE</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_YUVA420P</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_YUVA422P</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_YUVA444P</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_YUVA420P9BE</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_YUVA420P9LE</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_YUVA422P9BE</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_YUVA422P9LE</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_YUVA444P9BE</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_YUVA444P9LE</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_YUVA420P10BE</name></expr>]</index><operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_YUVA420P10LE</name></expr>]</index><operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_YUVA422P10BE</name></expr>]</index><operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_YUVA422P10LE</name></expr>]</index><operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_YUVA444P10BE</name></expr>]</index><operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_YUVA444P10LE</name></expr>]</index><operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_YUVA420P16BE</name></expr>]</index><operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_YUVA420P16LE</name></expr>]</index><operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_YUVA422P16BE</name></expr>]</index><operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_YUVA422P16LE</name></expr>]</index><operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_YUVA444P16BE</name></expr>]</index><operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_YUVA444P16LE</name></expr>]</index><operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_RGB48BE</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_RGB48LE</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_RGBA64BE</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_RGBA64LE</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_RGB565BE</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_RGB565LE</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_RGB555BE</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_RGB555LE</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_BGR565BE</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_BGR565LE</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_BGR555BE</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_BGR555LE</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_YUV420P16LE</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_YUV420P16BE</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_YUV422P16LE</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_YUV422P16BE</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_YUV444P16LE</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_YUV444P16BE</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_RGB444LE</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_RGB444BE</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_BGR444LE</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_BGR444BE</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_YA8</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_YA16BE</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_YA16LE</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_BGR48BE</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_BGR48LE</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_BGRA64BE</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_BGRA64LE</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_YUV420P9BE</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_YUV420P9LE</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_YUV420P10BE</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_YUV420P10LE</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_YUV420P12BE</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_YUV420P12LE</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_YUV420P14BE</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_YUV420P14LE</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_YUV422P9BE</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_YUV422P9LE</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_YUV422P10BE</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_YUV422P10LE</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_YUV422P12BE</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_YUV422P12LE</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_YUV422P14BE</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_YUV422P14LE</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_YUV444P9BE</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_YUV444P9LE</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_YUV444P10BE</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_YUV444P10LE</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_YUV444P12BE</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_YUV444P12LE</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_YUV444P14BE</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_YUV444P14LE</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_GBRP</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_GBRP9LE</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_GBRP9BE</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_GBRP10LE</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_GBRP10BE</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_GBRAP10LE</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_GBRAP10BE</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_GBRP12LE</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_GBRP12BE</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_GBRAP12LE</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_GBRAP12BE</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_GBRP14LE</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_GBRP14BE</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_GBRP16LE</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_GBRP16BE</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_GBRAP</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_GBRAP16LE</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_GBRAP16BE</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_BAYER_BGGR8</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_BAYER_RGGB8</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_BAYER_GBRG8</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_BAYER_GRBG8</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_BAYER_BGGR16LE</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_BAYER_BGGR16BE</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_BAYER_RGGB16LE</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_BAYER_RGGB16BE</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_BAYER_GBRG16LE</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_BAYER_GBRG16BE</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_BAYER_GRBG16LE</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_BAYER_GRBG16BE</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_XYZ12BE</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_XYZ12LE</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_AYUV64LE</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_P010LE</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_P010BE</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_P016LE</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_P016BE</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_GRAYF32LE</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_GRAYF32BE</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_YUVA422P12BE</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_YUVA422P12LE</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_YUVA444P12BE</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_YUVA444P12LE</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_NV24</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_NV42</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>AV_PIX_FMT_Y210LE</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>sws_isSupportedInput</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>pix_fmt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><ternary><condition><expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>pix_fmt</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>format_entries</name></expr></argument>)</argument_list></call></expr> ?</condition><then>

<expr><name><name>format_entries</name><index>[<expr><name>pix_fmt</name></expr>]</index></name><operator>.</operator><name>is_supported_in</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>sws_isSupportedOutput</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>pix_fmt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><ternary><condition><expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>pix_fmt</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>format_entries</name></expr></argument>)</argument_list></call></expr> ?</condition><then>

<expr><name><name>format_entries</name><index>[<expr><name>pix_fmt</name></expr>]</index></name><operator>.</operator><name>is_supported_out</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>sws_isSupportedEndiannessConversion</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>pix_fmt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><ternary><condition><expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>pix_fmt</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>format_entries</name></expr></argument>)</argument_list></call></expr> ?</condition><then>

<expr><name><name>format_entries</name><index>[<expr><name>pix_fmt</name></expr>]</index></name><operator>.</operator><name>is_supported_endianness</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name></type> <name>getSplineCoeff</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>d</name></decl></parameter>,

<parameter><decl><type><name>double</name></type> <name>dist</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>dist</name> <operator>&lt;=</operator> <literal type="number">1.0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><operator>(</operator><name>d</name> <operator>*</operator> <name>dist</name> <operator>+</operator> <name>c</name><operator>)</operator> <operator>*</operator> <name>dist</name> <operator>+</operator> <name>b</name><operator>)</operator> <operator>*</operator> <name>dist</name> <operator>+</operator> <name>a</name></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><call><name>getSplineCoeff</name><argument_list>(<argument><expr><literal type="number">0.0</literal></expr></argument>,

<argument><expr><name>b</name> <operator>+</operator> <literal type="number">2.0</literal> <operator>*</operator> <name>c</name> <operator>+</operator> <literal type="number">3.0</literal> <operator>*</operator> <name>d</name></expr></argument>,

<argument><expr><name>c</name> <operator>+</operator> <literal type="number">3.0</literal> <operator>*</operator> <name>d</name></expr></argument>,

<argument><expr><operator>-</operator><name>b</name> <operator>-</operator> <literal type="number">3.0</literal> <operator>*</operator> <name>c</name> <operator>-</operator> <literal type="number">6.0</literal> <operator>*</operator> <name>d</name></expr></argument>,

<argument><expr><name>dist</name> <operator>-</operator> <literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>get_local_pos</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>chr_subsample</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dir</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>pos</name> <operator>&lt;=</operator> <operator>-</operator><literal type="number">513</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <operator>(</operator><literal type="number">128</literal> <operator>&lt;&lt;</operator> <name>chr_subsample</name><operator>)</operator> <operator>-</operator> <literal type="number">128</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pos</name> <operator>+=</operator> <literal type="number">128</literal></expr>;</expr_stmt> 

<return>return <expr><name>pos</name> <operator>&gt;&gt;</operator> <name>chr_subsample</name></expr>;</return>

</block_content>}</block></function>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>int</name></type> <name>flag</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>description</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>size_factor</name></decl>;</decl_stmt> 

}</block></struct></type> <name>ScaleAlgorithm</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ScaleAlgorithm</name></type> <name><name>scale_algorithms</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><name>SWS_AREA</name></expr>, <expr><literal type="string">"area averaging"</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>SWS_BICUBIC</name></expr>, <expr><literal type="string">"bicubic"</literal></expr>, <expr><literal type="number">4</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>SWS_BICUBLIN</name></expr>, <expr><literal type="string">"luma bicubic / chroma bilinear"</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>SWS_BILINEAR</name></expr>, <expr><literal type="string">"bilinear"</literal></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>SWS_FAST_BILINEAR</name></expr>, <expr><literal type="string">"fast bilinear"</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>SWS_GAUSS</name></expr>, <expr><literal type="string">"Gaussian"</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>SWS_LANCZOS</name></expr>, <expr><literal type="string">"Lanczos"</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>SWS_POINT</name></expr>, <expr><literal type="string">"nearest neighbor / point"</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>SWS_SINC</name></expr>, <expr><literal type="string">"sinc"</literal></expr>, <expr><literal type="number">20</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>SWS_SPLINE</name></expr>, <expr><literal type="string">"bicubic spline"</literal></expr>, <expr><literal type="number">20</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>SWS_X</name></expr>, <expr><literal type="string">"experimental"</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>initFilter</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>outFilter</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>filterPos</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>outFilterSize</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>xInc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcW</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>dstW</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>filterAlign</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>one</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cpu_flags</name></decl></parameter>,

<parameter><decl><type><name>SwsVector</name> <modifier>*</modifier></type><name>srcFilter</name></decl></parameter>, <parameter><decl><type><name>SwsVector</name> <modifier>*</modifier></type><name>dstFilter</name></decl></parameter>,

<parameter><decl><type><name>double</name></type> <name><name>param</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcPos</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dstPos</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>filterSize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>filter2Size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>minFilterSize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>filter2</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>fone</name> <init>= <expr><literal type="number">1LL</literal> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">54</literal> <operator>-</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><call><name>av_log2</name><argument_list>(<argument><expr><name>srcW</name><operator>/</operator><name>dstW</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>emms_c</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>FF_ALLOC_ARRAY_OR_GOTO</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>*</operator><name>filterPos</name></expr></argument>, <argument><expr><operator>(</operator><name>dstW</name> <operator>+</operator> <literal type="number">3</literal><operator>)</operator></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><operator>*</operator><name>filterPos</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FFABS</name><argument_list>(<argument><expr><name>xInc</name> <operator>-</operator> <literal type="number">0x10000</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">10</literal> <operator>&amp;&amp;</operator> <name>srcPos</name> <operator>==</operator> <name>dstPos</name></expr>)</condition> <block>{<block_content> 

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>filterSize</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FF_ALLOCZ_ARRAY_OR_GOTO</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>,

<argument><expr><name>dstW</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>filter</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>filterSize</name></expr></argument>, <argument><expr><name>fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dstW</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>filter</name><index>[<expr><name>i</name> <operator>*</operator> <name>filterSize</name></expr>]</index></name> <operator>=</operator> <name>fone</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>filterPos</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>SWS_POINT</name></expr>)</condition> <block>{<block_content> 

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>xDstInSrc</name></decl>;</decl_stmt>

<expr_stmt><expr><name>filterSize</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FF_ALLOC_ARRAY_OR_GOTO</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>,

<argument><expr><name>dstW</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>filter</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>filterSize</name></expr></argument>, <argument><expr><name>fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>xDstInSrc</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>dstPos</name><operator>*</operator><operator>(</operator><name>int64_t</name><operator>)</operator><name>xInc</name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">8</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><operator>(</operator><name>srcPos</name><operator>*</operator><literal type="number">0x8000LL</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">7</literal><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dstW</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>xx</name> <init>= <expr><operator>(</operator><name>xDstInSrc</name> <operator>-</operator> <operator>(</operator><operator>(</operator><name>filterSize</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">15</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>filterPos</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index> <operator>=</operator> <name>xx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>filter</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>fone</name></expr>;</expr_stmt>

<expr_stmt><expr><name>xDstInSrc</name> <operator>+=</operator> <name>xInc</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>xInc</name> <operator>&lt;=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SWS_AREA</name><operator>)</operator><operator>)</operator> <operator>||</operator>

<operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SWS_FAST_BILINEAR</name><operator>)</operator></expr>)</condition> <block>{<block_content> 

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>xDstInSrc</name></decl>;</decl_stmt>

<expr_stmt><expr><name>filterSize</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FF_ALLOC_ARRAY_OR_GOTO</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>,

<argument><expr><name>dstW</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>filter</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>filterSize</name></expr></argument>, <argument><expr><name>fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>xDstInSrc</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>dstPos</name><operator>*</operator><operator>(</operator><name>int64_t</name><operator>)</operator><name>xInc</name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">8</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><operator>(</operator><name>srcPos</name><operator>*</operator><literal type="number">0x8000LL</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">7</literal><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dstW</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>xx</name> <init>= <expr><operator>(</operator><name>xDstInSrc</name> <operator>-</operator> <operator>(</operator><operator>(</operator><name>filterSize</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">15</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>filterPos</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index> <operator>=</operator> <name>xx</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>filterSize</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>coeff</name> <init>= <expr><name>fone</name> <operator>-</operator> <call><name>FFABS</name><argument_list>(<argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name>xx</name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>-</operator> <name>xDstInSrc</name></expr></argument>)</argument_list></call> <operator>*</operator> <operator>(</operator><name>fone</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>coeff</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>coeff</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>filter</name><index>[<expr><name>i</name> <operator>*</operator> <name>filterSize</name> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>=</operator> <name>coeff</name></expr>;</expr_stmt>

<expr_stmt><expr><name>xx</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>xDstInSrc</name> <operator>+=</operator> <name>xInc</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>xDstInSrc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sizeFactor</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>scale_algorithms</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name><name>scale_algorithms</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>flag</name> <operator>&amp;&amp;</operator> <name><name>scale_algorithms</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size_factor</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>sizeFactor</name> <operator>=</operator> <name><name>scale_algorithms</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size_factor</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>SWS_LANCZOS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>sizeFactor</name> <operator>=</operator> <ternary><condition><expr><name><name>param</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>SWS_PARAM_DEFAULT</name></expr> ?</condition><then> <expr><call><name>ceil</name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>*</operator> <name><name>param</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">6</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>sizeFactor</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>xInc</name> <operator>&lt;=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>filterSize</name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <name>sizeFactor</name></expr>;</expr_stmt></block_content></block></if> 

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>filterSize</name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <operator>(</operator><name>sizeFactor</name> <operator>*</operator> <name>srcW</name> <operator>+</operator> <name>dstW</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>dstW</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>filterSize</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>filterSize</name></expr></argument>, <argument><expr><name>srcW</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>filterSize</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>filterSize</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FF_ALLOC_ARRAY_OR_GOTO</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>,

<argument><expr><name>dstW</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>filter</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>filterSize</name></expr></argument>, <argument><expr><name>fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>xDstInSrc</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>dstPos</name><operator>*</operator><operator>(</operator><name>int64_t</name><operator>)</operator><name>xInc</name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">7</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><operator>(</operator><name>srcPos</name><operator>*</operator><literal type="number">0x10000LL</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">7</literal><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dstW</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>xx</name> <init>= <expr><operator>(</operator><name>xDstInSrc</name> <operator>-</operator> <operator>(</operator><name>filterSize</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><literal type="number">1LL</literal><operator>&lt;&lt;</operator><literal type="number">16</literal><operator>)</operator><operator>)</operator> <operator>/</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">17</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>filterPos</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index> <operator>=</operator> <name>xx</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>filterSize</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>d</name> <init>= <expr><operator>(</operator><call><name>FFABS</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>int64_t</name><operator>)</operator><name>xx</name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">17</literal><operator>)</operator><operator>)</operator> <operator>-</operator> <name>xDstInSrc</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">13</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>floatd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>coeff</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>xInc</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>d</name> <operator>=</operator> <name>d</name> <operator>*</operator> <name>dstW</name> <operator>/</operator> <name>srcW</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>floatd</name> <operator>=</operator> <name>d</name> <operator>*</operator> <operator>(</operator><literal type="number">1.0</literal> <operator>/</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">30</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>SWS_BICUBIC</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>B</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name><name>param</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>SWS_PARAM_DEFAULT</name></expr> ?</condition><then> <expr><name><name>param</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>C</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name><name>param</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>SWS_PARAM_DEFAULT</name></expr> ?</condition><then> <expr><name><name>param</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0.6</literal></expr></else></ternary><operator>)</operator> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>d</name> <operator>&gt;=</operator> <literal type="number">1LL</literal> <operator>&lt;&lt;</operator> <literal type="number">31</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>coeff</name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>dd</name> <init>= <expr><operator>(</operator><name>d</name> <operator>*</operator> <name>d</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">30</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>ddd</name> <init>= <expr><operator>(</operator><name>dd</name> <operator>*</operator> <name>d</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">30</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>d</name> <operator>&lt;</operator> <literal type="number">1LL</literal> <operator>&lt;&lt;</operator> <literal type="number">30</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>coeff</name> <operator>=</operator> <operator>(</operator><literal type="number">12</literal> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>-</operator> <literal type="number">9</literal> <operator>*</operator> <name>B</name> <operator>-</operator> <literal type="number">6</literal> <operator>*</operator> <name>C</name><operator>)</operator> <operator>*</operator> <name>ddd</name> <operator>+</operator>

<operator>(</operator><operator>-</operator><literal type="number">18</literal> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>+</operator> <literal type="number">12</literal> <operator>*</operator> <name>B</name> <operator>+</operator> <literal type="number">6</literal> <operator>*</operator> <name>C</name><operator>)</operator> <operator>*</operator> <name>dd</name> <operator>+</operator>

<operator>(</operator><literal type="number">6</literal> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name>B</name><operator>)</operator> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">30</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>coeff</name> <operator>=</operator> <operator>(</operator><operator>-</operator><name>B</name> <operator>-</operator> <literal type="number">6</literal> <operator>*</operator> <name>C</name><operator>)</operator> <operator>*</operator> <name>ddd</name> <operator>+</operator>

<operator>(</operator><literal type="number">6</literal> <operator>*</operator> <name>B</name> <operator>+</operator> <literal type="number">30</literal> <operator>*</operator> <name>C</name><operator>)</operator> <operator>*</operator> <name>dd</name> <operator>+</operator>

<operator>(</operator><operator>-</operator><literal type="number">12</literal> <operator>*</operator> <name>B</name> <operator>-</operator> <literal type="number">48</literal> <operator>*</operator> <name>C</name><operator>)</operator> <operator>*</operator> <name>d</name> <operator>+</operator>

<operator>(</operator><literal type="number">8</literal> <operator>*</operator> <name>B</name> <operator>+</operator> <literal type="number">24</literal> <operator>*</operator> <name>C</name><operator>)</operator> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">30</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>coeff</name> <operator>/=</operator> <operator>(</operator><literal type="number">1LL</literal><operator>&lt;&lt;</operator><literal type="number">54</literal><operator>)</operator><operator>/</operator><name>fone</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>SWS_X</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>A</name> <init>= <expr><ternary><condition><expr><name><name>param</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>SWS_PARAM_DEFAULT</name></expr> ?</condition><then> <expr><name><name>param</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> </then><else>: <expr><literal type="number">1.0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>c</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>floatd</name> <operator>&lt;</operator> <literal type="number">1.0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>cos</name><argument_list>(<argument><expr><name>floatd</name> <operator>*</operator> <name>M_PI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>-</operator><literal type="number">1.0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="number">0.0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>-</operator><call><name>pow</name><argument_list>(<argument><expr><operator>-</operator><name>c</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>pow</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>coeff</name> <operator>=</operator> <operator>(</operator><name>c</name> <operator>*</operator> <literal type="number">0.5</literal> <operator>+</operator> <literal type="number">0.5</literal><operator>)</operator> <operator>*</operator> <name>fone</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>SWS_AREA</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>d2</name> <init>= <expr><name>d</name> <operator>-</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">29</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>d2</name> <operator>*</operator> <name>xInc</name> <operator>&lt;</operator> <operator>-</operator><operator>(</operator><literal type="number">1LL</literal> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">29</literal> <operator>+</operator> <literal type="number">16</literal><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>coeff</name> <operator>=</operator> <literal type="number">1.0</literal> <operator>*</operator> <operator>(</operator><literal type="number">1LL</literal> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">30</literal> <operator>+</operator> <literal type="number">16</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>d2</name> <operator>*</operator> <name>xInc</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">1LL</literal> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">29</literal> <operator>+</operator> <literal type="number">16</literal><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>coeff</name> <operator>=</operator> <operator>-</operator><name>d2</name> <operator>*</operator> <name>xInc</name> <operator>+</operator> <operator>(</operator><literal type="number">1LL</literal> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">29</literal> <operator>+</operator> <literal type="number">16</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>coeff</name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>coeff</name> <operator>*=</operator> <name>fone</name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">30</literal> <operator>+</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>SWS_GAUSS</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>p</name> <init>= <expr><ternary><condition><expr><name><name>param</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>SWS_PARAM_DEFAULT</name></expr> ?</condition><then> <expr><name><name>param</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> </then><else>: <expr><literal type="number">3.0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>coeff</name> <operator>=</operator> <call><name>exp2</name><argument_list>(<argument><expr><operator>-</operator><name>p</name> <operator>*</operator> <name>floatd</name> <operator>*</operator> <name>floatd</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>fone</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>SWS_SINC</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>coeff</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>d</name></expr> ?</condition><then> <expr><call><name>sin</name><argument_list>(<argument><expr><name>floatd</name> <operator>*</operator> <name>M_PI</name></expr></argument>)</argument_list></call> <operator>/</operator> <operator>(</operator><name>floatd</name> <operator>*</operator> <name>M_PI</name><operator>)</operator></expr> </then><else>: <expr><literal type="number">1.0</literal></expr></else></ternary><operator>)</operator> <operator>*</operator> <name>fone</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>SWS_LANCZOS</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>p</name> <init>= <expr><ternary><condition><expr><name><name>param</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>SWS_PARAM_DEFAULT</name></expr> ?</condition><then> <expr><name><name>param</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> </then><else>: <expr><literal type="number">3.0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>coeff</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>d</name></expr> ?</condition><then> <expr><call><name>sin</name><argument_list>(<argument><expr><name>floatd</name> <operator>*</operator> <name>M_PI</name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>sin</name><argument_list>(<argument><expr><name>floatd</name> <operator>*</operator> <name>M_PI</name> <operator>/</operator> <name>p</name></expr></argument>)</argument_list></call> <operator>/</operator>

<operator>(</operator><name>floatd</name> <operator>*</operator> <name>floatd</name> <operator>*</operator> <name>M_PI</name> <operator>*</operator> <name>M_PI</name> <operator>/</operator> <name>p</name><operator>)</operator></expr> </then><else>: <expr><literal type="number">1.0</literal></expr></else></ternary><operator>)</operator> <operator>*</operator> <name>fone</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>floatd</name> <operator>&gt;</operator> <name>p</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>coeff</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>SWS_BILINEAR</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>coeff</name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">30</literal><operator>)</operator> <operator>-</operator> <name>d</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>coeff</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>coeff</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>coeff</name> <operator>*=</operator> <name>fone</name> <operator>&gt;&gt;</operator> <literal type="number">30</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>SWS_SPLINE</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>p</name> <init>= <expr><operator>-</operator><literal type="number">2.196152422706632</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>coeff</name> <operator>=</operator> <call><name>getSplineCoeff</name><argument_list>(<argument><expr><literal type="number">1.0</literal></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><operator>-</operator><name>p</name> <operator>-</operator> <literal type="number">1.0</literal></expr></argument>, <argument><expr><name>floatd</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>fone</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>filter</name><index>[<expr><name>i</name> <operator>*</operator> <name>filterSize</name> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>=</operator> <name>coeff</name></expr>;</expr_stmt>

<expr_stmt><expr><name>xx</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>xDstInSrc</name> <operator>+=</operator> <literal type="number">2</literal> <operator>*</operator> <name>xInc</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>filterSize</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>filter2Size</name> <operator>=</operator> <name>filterSize</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>srcFilter</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>filter2Size</name> <operator>+=</operator> <name><name>srcFilter</name><operator>-&gt;</operator><name>length</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dstFilter</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>filter2Size</name> <operator>+=</operator> <name><name>dstFilter</name><operator>-&gt;</operator><name>length</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>filter2Size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FF_ALLOCZ_ARRAY_OR_GOTO</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>filter2</name></expr></argument>, <argument><expr><name>dstW</name></expr></argument>, <argument><expr><name>filter2Size</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>filter2</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dstW</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>srcFilter</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>srcFilter</name><operator>-&gt;</operator><name>length</name></name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>filterSize</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>filter2</name><index>[<expr><name>i</name> <operator>*</operator> <name>filter2Size</name> <operator>+</operator> <name>k</name> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>+=</operator>

<name><name>srcFilter</name><operator>-&gt;</operator><name>coeff</name><index>[<expr><name>k</name></expr>]</index></name> <operator>*</operator> <name><name>filter</name><index>[<expr><name>i</name> <operator>*</operator> <name>filterSize</name> <operator>+</operator> <name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>filterSize</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>filter2</name><index>[<expr><name>i</name> <operator>*</operator> <name>filter2Size</name> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>=</operator> <name><name>filter</name><index>[<expr><name>i</name> <operator>*</operator> <name>filterSize</name> <operator>+</operator> <name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>filterPos</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index> <operator>+=</operator> <operator>(</operator><name>filterSize</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <operator>(</operator><name>filter2Size</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>minFilterSize</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>dstW</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>min</name> <init>= <expr><name>filter2Size</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>cutOff</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>filter2Size</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>;</decl_stmt>

<expr_stmt><expr><name>cutOff</name> <operator>+=</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name><name>filter2</name><index>[<expr><name>i</name> <operator>*</operator> <name>filter2Size</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cutOff</name> <operator>&gt;</operator> <name>SWS_MAX_REDUCE_CUTOFF</name> <operator>*</operator> <name>fone</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>dstW</name> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>filterPos</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index> <operator>&gt;=</operator> <operator>(</operator><operator>*</operator><name>filterPos</name><operator>)</operator><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>filter2Size</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>filter2</name><index>[<expr><name>i</name> <operator>*</operator> <name>filter2Size</name> <operator>+</operator> <name>k</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>filter2</name><index>[<expr><name>i</name> <operator>*</operator> <name>filter2Size</name> <operator>+</operator> <name>k</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>filter2</name><index>[<expr><name>i</name> <operator>*</operator> <name>filter2Size</name> <operator>+</operator> <name>k</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>filterPos</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>cutOff</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>filter2Size</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>j</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>cutOff</name> <operator>+=</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name><name>filter2</name><index>[<expr><name>i</name> <operator>*</operator> <name>filter2Size</name> <operator>+</operator> <name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cutOff</name> <operator>&gt;</operator> <name>SWS_MAX_REDUCE_CUTOFF</name> <operator>*</operator> <name>fone</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>min</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>min</name> <operator>&gt;</operator> <name>minFilterSize</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>minFilterSize</name> <operator>=</operator> <name>min</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><call><name>PPC_ALTIVEC</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>minFilterSize</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>filterAlign</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>minFilterSize</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>filterAlign</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>HAVE_MMX</name> <operator>&amp;&amp;</operator> <name>cpu_flags</name> <operator>&amp;</operator> <name>AV_CPU_FLAG_MMX</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>minFilterSize</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>filterAlign</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>filterAlign</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>minFilterSize</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>filterSize</name> <operator>=</operator> <operator>(</operator><name>minFilterSize</name> <operator>+</operator> <operator>(</operator><name>filterAlign</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><operator>~</operator><operator>(</operator><name>filterAlign</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>filterSize</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>filter</name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name>dstW</name></expr></argument>, <argument><expr><name>filterSize</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>filter</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>filter</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>filterSize</name> <operator>&gt;=</operator> <name>MAX_FILTER_SIZE</name> <operator>*</operator> <literal type="number">16</literal> <operator>/</operator>

<operator>(</operator><ternary><condition><expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SWS_ACCURATE_RND</name><operator>)</operator></expr> ?</condition><then> <expr><name>APCK_SIZE</name></expr> </then><else>: <expr><literal type="number">16</literal></expr></else></ternary><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>RETCODE_USE_CASCADE</name></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>outFilterSize</name> <operator>=</operator> <name>filterSize</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>SWS_PRINT_INFO</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>,

<argument><expr><literal type="string">"SwScaler: reducing / aligning filtersize %d -&gt; %d\n"</literal></expr></argument>,

<argument><expr><name>filter2Size</name></expr></argument>, <argument><expr><name>filterSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dstW</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>filterSize</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&gt;=</operator> <name>filter2Size</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>filter</name><index>[<expr><name>i</name> <operator>*</operator> <name>filterSize</name> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>filter</name><index>[<expr><name>i</name> <operator>*</operator> <name>filterSize</name> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>=</operator> <name><name>filter2</name><index>[<expr><name>i</name> <operator>*</operator> <name>filter2Size</name> <operator>+</operator> <name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SWS_BITEXACT</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>j</name> <operator>&gt;=</operator> <name>minFilterSize</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>filter</name><index>[<expr><name>i</name> <operator>*</operator> <name>filterSize</name> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dstW</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>filterPos</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>filterSize</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>left</name> <init>= <expr><call><name>FFMAX</name><argument_list>(<argument><expr><name>j</name> <operator>+</operator> <operator>(</operator><operator>*</operator><name>filterPos</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>filter</name><index>[<expr><name>i</name> <operator>*</operator> <name>filterSize</name> <operator>+</operator> <name>left</name></expr>]</index></name> <operator>+=</operator> <name><name>filter</name><index>[<expr><name>i</name> <operator>*</operator> <name>filterSize</name> <operator>+</operator> <name>j</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>filter</name><index>[<expr><name>i</name> <operator>*</operator> <name>filterSize</name> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>filterPos</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index><operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>filterPos</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index> <operator>+</operator> <name>filterSize</name> <operator>&gt;</operator> <name>srcW</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>shift</name> <init>= <expr><operator>(</operator><operator>*</operator><name>filterPos</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index> <operator>+</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>filterSize</name> <operator>-</operator> <name>srcW</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>acc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>filterSize</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>j</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>filterPos</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index> <operator>+</operator> <name>j</name> <operator>&gt;=</operator> <name>srcW</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>acc</name> <operator>+=</operator> <name><name>filter</name><index>[<expr><name>i</name> <operator>*</operator> <name>filterSize</name> <operator>+</operator> <name>j</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>filter</name><index>[<expr><name>i</name> <operator>*</operator> <name>filterSize</name> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>filterSize</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>j</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&lt;</operator> <name>shift</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>filter</name><index>[<expr><name>i</name> <operator>*</operator> <name>filterSize</name> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>filter</name><index>[<expr><name>i</name> <operator>*</operator> <name>filterSize</name> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>=</operator> <name><name>filter</name><index>[<expr><name>i</name> <operator>*</operator> <name>filterSize</name> <operator>+</operator> <name>j</name> <operator>-</operator> <name>shift</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>filterPos</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index><operator>-=</operator> <name>shift</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>filter</name><index>[<expr><name>i</name> <operator>*</operator> <name>filterSize</name> <operator>+</operator> <name>srcW</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <operator>(</operator><operator>*</operator><name>filterPos</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index></expr>]</index></name> <operator>+=</operator> <name>acc</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>filterPos</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>filterPos</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index> <operator>&lt;</operator> <name>srcW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>filterPos</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index> <operator>+</operator> <name>filterSize</name> <operator>&gt;</operator> <name>srcW</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>filterSize</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>filterPos</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index> <operator>+</operator> <name>j</name> <operator>&lt;</operator> <name>srcW</name> <operator>||</operator> <operator>!</operator><name><name>filter</name><index>[<expr><name>i</name> <operator>*</operator> <name>filterSize</name> <operator>+</operator> <name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>FF_ALLOCZ_ARRAY_OR_GOTO</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>*</operator><name>outFilter</name></expr></argument>,

<argument><expr><operator>(</operator><name>dstW</name> <operator>+</operator> <literal type="number">3</literal><operator>)</operator></expr></argument>, <argument><expr><operator>*</operator><name>outFilterSize</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dstW</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>error</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>filterSize</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>sum</name> <operator>+=</operator> <name><name>filter</name><index>[<expr><name>i</name> <operator>*</operator> <name>filterSize</name> <operator>+</operator> <name>j</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>sum</name> <operator>=</operator> <operator>(</operator><name>sum</name> <operator>+</operator> <name>one</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>/</operator> <name>one</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sum</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"SwScaler: zero vector in scaling\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sum</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <operator>*</operator><name>outFilterSize</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>v</name> <init>= <expr><name><name>filter</name><index>[<expr><name>i</name> <operator>*</operator> <name>filterSize</name> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>+</operator> <name>error</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>intV</name> <init>= <expr><call><name>ROUNDED_DIV</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>sum</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>outFilter</name><operator>)</operator><index>[<expr><name>i</name> <operator>*</operator> <operator>(</operator><operator>*</operator><name>outFilterSize</name><operator>)</operator> <operator>+</operator> <name>j</name></expr>]</index> <operator>=</operator> <name>intV</name></expr>;</expr_stmt>

<expr_stmt><expr><name>error</name> <operator>=</operator> <name>v</name> <operator>-</operator> <name>intV</name> <operator>*</operator> <name>sum</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>filterPos</name><operator>)</operator><index>[<expr><name>dstW</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index> <operator>=</operator>

<operator>(</operator><operator>*</operator><name>filterPos</name><operator>)</operator><index>[<expr><name>dstW</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index> <operator>=</operator>

<operator>(</operator><operator>*</operator><name>filterPos</name><operator>)</operator><index>[<expr><name>dstW</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index> <operator>=</operator> <operator>(</operator><operator>*</operator><name>filterPos</name><operator>)</operator><index>[<expr><name>dstW</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></expr>;</expr_stmt> 

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>*</operator><name>outFilterSize</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>k</name> <init>= <expr><operator>(</operator><name>dstW</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><operator>*</operator><name>outFilterSize</name><operator>)</operator> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>outFilter</name><operator>)</operator><index>[<expr><name>k</name> <operator>+</operator> <literal type="number">1</literal> <operator>*</operator> <operator>(</operator><operator>*</operator><name>outFilterSize</name><operator>)</operator></expr>]</index> <operator>=</operator>

<operator>(</operator><operator>*</operator><name>outFilter</name><operator>)</operator><index>[<expr><name>k</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator><operator>*</operator><name>outFilterSize</name><operator>)</operator></expr>]</index> <operator>=</operator>

<operator>(</operator><operator>*</operator><name>outFilter</name><operator>)</operator><index>[<expr><name>k</name> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <operator>(</operator><operator>*</operator><name>outFilterSize</name><operator>)</operator></expr>]</index> <operator>=</operator> <operator>(</operator><operator>*</operator><name>outFilter</name><operator>)</operator><index>[<expr><name>k</name></expr>]</index></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>fail</name>:</label>

<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><ternary><condition><expr><name>ret</name> <operator>==</operator> <name>RETCODE_USE_CASCADE</name></expr> ?</condition><then> <expr><name>AV_LOG_DEBUG</name></expr> </then><else>: <expr><name>AV_LOG_ERROR</name></expr></else></ternary></expr></argument>, <argument><expr><literal type="string">"sws: initFilter failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>filter2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fill_rgb2yuv_table</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name><name>table</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dstRange</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>W</name></decl>, <decl><type ref="prev"/><name>V</name></decl>, <decl><type ref="prev"/><name>Z</name></decl>, <decl><type ref="prev"/><name>Cy</name></decl>, <decl><type ref="prev"/><name>Cu</name></decl>, <decl><type ref="prev"/><name>Cv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>vr</name> <init>= <expr><name><name>table</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>ub</name> <init>= <expr><name><name>table</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>ug</name> <init>= <expr><operator>-</operator><name><name>table</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>vg</name> <init>= <expr><operator>-</operator><name><name>table</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>ONE</name> <init>= <expr><literal type="number">65536</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>cy</name> <init>= <expr><name>ONE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name><name>c</name><operator>-&gt;</operator><name>input_rgb2yuv_table</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int8_t</name></type> <name><name>map</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>BY_IDX</name></expr>, <expr><name>GY_IDX</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> , <expr><name>BY_IDX</name></expr>, <expr><name>BY_IDX</name></expr>, <expr><name>GY_IDX</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> , <expr><name>BY_IDX</name></expr>,

<expr><name>RY_IDX</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> , <expr><name>GY_IDX</name></expr>, <expr><name>RY_IDX</name></expr>, <expr><name>RY_IDX</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> , <expr><name>GY_IDX</name></expr>, <expr><name>RY_IDX</name></expr>,

<expr><name>RY_IDX</name></expr>, <expr><name>GY_IDX</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> , <expr><name>RY_IDX</name></expr>, <expr><name>RY_IDX</name></expr>, <expr><name>GY_IDX</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> , <expr><name>RY_IDX</name></expr>,

<expr><name>BY_IDX</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> , <expr><name>GY_IDX</name></expr>, <expr><name>BY_IDX</name></expr>, <expr><name>BY_IDX</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> , <expr><name>GY_IDX</name></expr>, <expr><name>BY_IDX</name></expr>,

<expr><name>BU_IDX</name></expr>, <expr><name>GU_IDX</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> , <expr><name>BU_IDX</name></expr>, <expr><name>BU_IDX</name></expr>, <expr><name>GU_IDX</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> , <expr><name>BU_IDX</name></expr>,

<expr><name>RU_IDX</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> , <expr><name>GU_IDX</name></expr>, <expr><name>RU_IDX</name></expr>, <expr><name>RU_IDX</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> , <expr><name>GU_IDX</name></expr>, <expr><name>RU_IDX</name></expr>,

<expr><name>RU_IDX</name></expr>, <expr><name>GU_IDX</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> , <expr><name>RU_IDX</name></expr>, <expr><name>RU_IDX</name></expr>, <expr><name>GU_IDX</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> , <expr><name>RU_IDX</name></expr>,

<expr><name>BU_IDX</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> , <expr><name>GU_IDX</name></expr>, <expr><name>BU_IDX</name></expr>, <expr><name>BU_IDX</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> , <expr><name>GU_IDX</name></expr>, <expr><name>BU_IDX</name></expr>,

<expr><name>BV_IDX</name></expr>, <expr><name>GV_IDX</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> , <expr><name>BV_IDX</name></expr>, <expr><name>BV_IDX</name></expr>, <expr><name>GV_IDX</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> , <expr><name>BV_IDX</name></expr>,

<expr><name>RV_IDX</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> , <expr><name>GV_IDX</name></expr>, <expr><name>RV_IDX</name></expr>, <expr><name>RV_IDX</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> , <expr><name>GV_IDX</name></expr>, <expr><name>RV_IDX</name></expr>,

<expr><name>RV_IDX</name></expr>, <expr><name>GV_IDX</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> , <expr><name>RV_IDX</name></expr>, <expr><name>RV_IDX</name></expr>, <expr><name>GV_IDX</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> , <expr><name>RV_IDX</name></expr>,

<expr><name>BV_IDX</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> , <expr><name>GV_IDX</name></expr>, <expr><name>BV_IDX</name></expr>, <expr><name>BV_IDX</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> , <expr><name>GV_IDX</name></expr>, <expr><name>BV_IDX</name></expr>,

<expr><name>RY_IDX</name></expr>, <expr><name>BY_IDX</name></expr>, <expr><name>RY_IDX</name></expr>, <expr><name>BY_IDX</name></expr>, <expr><name>RY_IDX</name></expr>, <expr><name>BY_IDX</name></expr>, <expr><name>RY_IDX</name></expr>, <expr><name>BY_IDX</name></expr>,

<expr><name>BY_IDX</name></expr>, <expr><name>RY_IDX</name></expr>, <expr><name>BY_IDX</name></expr>, <expr><name>RY_IDX</name></expr>, <expr><name>BY_IDX</name></expr>, <expr><name>RY_IDX</name></expr>, <expr><name>BY_IDX</name></expr>, <expr><name>RY_IDX</name></expr>,

<expr><name>GY_IDX</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> , <expr><name>GY_IDX</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> , <expr><name>GY_IDX</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> , <expr><name>GY_IDX</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> ,

<expr><operator>-</operator><literal type="number">1</literal></expr> , <expr><name>GY_IDX</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> , <expr><name>GY_IDX</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> , <expr><name>GY_IDX</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> , <expr><name>GY_IDX</name></expr>,

<expr><name>RU_IDX</name></expr>, <expr><name>BU_IDX</name></expr>, <expr><name>RU_IDX</name></expr>, <expr><name>BU_IDX</name></expr>, <expr><name>RU_IDX</name></expr>, <expr><name>BU_IDX</name></expr>, <expr><name>RU_IDX</name></expr>, <expr><name>BU_IDX</name></expr>,

<expr><name>BU_IDX</name></expr>, <expr><name>RU_IDX</name></expr>, <expr><name>BU_IDX</name></expr>, <expr><name>RU_IDX</name></expr>, <expr><name>BU_IDX</name></expr>, <expr><name>RU_IDX</name></expr>, <expr><name>BU_IDX</name></expr>, <expr><name>RU_IDX</name></expr>,

<expr><name>GU_IDX</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> , <expr><name>GU_IDX</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> , <expr><name>GU_IDX</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> , <expr><name>GU_IDX</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> ,

<expr><operator>-</operator><literal type="number">1</literal></expr> , <expr><name>GU_IDX</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> , <expr><name>GU_IDX</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> , <expr><name>GU_IDX</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> , <expr><name>GU_IDX</name></expr>,

<expr><name>RV_IDX</name></expr>, <expr><name>BV_IDX</name></expr>, <expr><name>RV_IDX</name></expr>, <expr><name>BV_IDX</name></expr>, <expr><name>RV_IDX</name></expr>, <expr><name>BV_IDX</name></expr>, <expr><name>RV_IDX</name></expr>, <expr><name>BV_IDX</name></expr>,

<expr><name>BV_IDX</name></expr>, <expr><name>RV_IDX</name></expr>, <expr><name>BV_IDX</name></expr>, <expr><name>RV_IDX</name></expr>, <expr><name>BV_IDX</name></expr>, <expr><name>RV_IDX</name></expr>, <expr><name>BV_IDX</name></expr>, <expr><name>RV_IDX</name></expr>,

<expr><name>GV_IDX</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> , <expr><name>GV_IDX</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> , <expr><name>GV_IDX</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> , <expr><name>GV_IDX</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> ,

<expr><operator>-</operator><literal type="number">1</literal></expr> , <expr><name>GV_IDX</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> , <expr><name>GV_IDX</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> , <expr><name>GV_IDX</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> , <expr><name>GV_IDX</name></expr>, 

<expr><operator>-</operator><literal type="number">1</literal></expr> , <expr><operator>-</operator><literal type="number">1</literal></expr> , <expr><operator>-</operator><literal type="number">1</literal></expr> , <expr><operator>-</operator><literal type="number">1</literal></expr> , <expr><operator>-</operator><literal type="number">1</literal></expr> , <expr><operator>-</operator><literal type="number">1</literal></expr> , <expr><operator>-</operator><literal type="number">1</literal></expr> , <expr><operator>-</operator><literal type="number">1</literal></expr> , 

<expr><operator>-</operator><literal type="number">1</literal></expr> , <expr><operator>-</operator><literal type="number">1</literal></expr> , <expr><operator>-</operator><literal type="number">1</literal></expr> , <expr><operator>-</operator><literal type="number">1</literal></expr> , <expr><operator>-</operator><literal type="number">1</literal></expr> , <expr><operator>-</operator><literal type="number">1</literal></expr> , <expr><operator>-</operator><literal type="number">1</literal></expr> , <expr><operator>-</operator><literal type="number">1</literal></expr> , 

<expr><operator>-</operator><literal type="number">1</literal></expr> , <expr><operator>-</operator><literal type="number">1</literal></expr> , <expr><operator>-</operator><literal type="number">1</literal></expr> , <expr><operator>-</operator><literal type="number">1</literal></expr> , <expr><operator>-</operator><literal type="number">1</literal></expr> , <expr><operator>-</operator><literal type="number">1</literal></expr> , <expr><operator>-</operator><literal type="number">1</literal></expr> , <expr><operator>-</operator><literal type="number">1</literal></expr> , 

<expr><operator>-</operator><literal type="number">1</literal></expr> , <expr><operator>-</operator><literal type="number">1</literal></expr> , <expr><operator>-</operator><literal type="number">1</literal></expr> , <expr><operator>-</operator><literal type="number">1</literal></expr> , <expr><operator>-</operator><literal type="number">1</literal></expr> , <expr><operator>-</operator><literal type="number">1</literal></expr> , <expr><operator>-</operator><literal type="number">1</literal></expr> , <expr><operator>-</operator><literal type="number">1</literal></expr> , 

<expr><operator>-</operator><literal type="number">1</literal></expr> , <expr><operator>-</operator><literal type="number">1</literal></expr> , <expr><operator>-</operator><literal type="number">1</literal></expr> , <expr><operator>-</operator><literal type="number">1</literal></expr> , <expr><operator>-</operator><literal type="number">1</literal></expr> , <expr><operator>-</operator><literal type="number">1</literal></expr> , <expr><operator>-</operator><literal type="number">1</literal></expr> , <expr><operator>-</operator><literal type="number">1</literal></expr> , 

<expr><operator>-</operator><literal type="number">1</literal></expr> , <expr><operator>-</operator><literal type="number">1</literal></expr> , <expr><operator>-</operator><literal type="number">1</literal></expr> , <expr><operator>-</operator><literal type="number">1</literal></expr> , <expr><operator>-</operator><literal type="number">1</literal></expr> , <expr><operator>-</operator><literal type="number">1</literal></expr> , <expr><operator>-</operator><literal type="number">1</literal></expr> , <expr><operator>-</operator><literal type="number">1</literal></expr> , 

<expr><operator>-</operator><literal type="number">1</literal></expr> , <expr><operator>-</operator><literal type="number">1</literal></expr> , <expr><operator>-</operator><literal type="number">1</literal></expr> , <expr><operator>-</operator><literal type="number">1</literal></expr> , <expr><operator>-</operator><literal type="number">1</literal></expr> , <expr><operator>-</operator><literal type="number">1</literal></expr> , <expr><operator>-</operator><literal type="number">1</literal></expr> , <expr><operator>-</operator><literal type="number">1</literal></expr> , 

<expr><operator>-</operator><literal type="number">1</literal></expr> , <expr><operator>-</operator><literal type="number">1</literal></expr> , <expr><operator>-</operator><literal type="number">1</literal></expr> , <expr><operator>-</operator><literal type="number">1</literal></expr> , <expr><operator>-</operator><literal type="number">1</literal></expr> , <expr><operator>-</operator><literal type="number">1</literal></expr> , <expr><operator>-</operator><literal type="number">1</literal></expr> , <expr><operator>-</operator><literal type="number">1</literal></expr> , 

<expr><name>BY_IDX</name></expr>, <expr><name>GY_IDX</name></expr>, <expr><name>RY_IDX</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> , <expr><operator>-</operator><literal type="number">1</literal></expr> , <expr><operator>-</operator><literal type="number">1</literal></expr> , <expr><operator>-</operator><literal type="number">1</literal></expr> , <expr><operator>-</operator><literal type="number">1</literal></expr> , 

<expr><name>BU_IDX</name></expr>, <expr><name>GU_IDX</name></expr>, <expr><name>RU_IDX</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> , <expr><operator>-</operator><literal type="number">1</literal></expr> , <expr><operator>-</operator><literal type="number">1</literal></expr> , <expr><operator>-</operator><literal type="number">1</literal></expr> , <expr><operator>-</operator><literal type="number">1</literal></expr> , 

<expr><name>BV_IDX</name></expr>, <expr><name>GV_IDX</name></expr>, <expr><name>RV_IDX</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> , <expr><operator>-</operator><literal type="number">1</literal></expr> , <expr><operator>-</operator><literal type="number">1</literal></expr> , <expr><operator>-</operator><literal type="number">1</literal></expr> , <expr><operator>-</operator><literal type="number">1</literal></expr> , 

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>dstRange</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dstRange</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cy</name> <operator>=</operator> <name>cy</name> <operator>*</operator> <literal type="number">255</literal> <operator>/</operator> <literal type="number">219</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>vr</name> <operator>=</operator> <name>vr</name> <operator>*</operator> <literal type="number">224</literal> <operator>/</operator> <literal type="number">255</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ub</name> <operator>=</operator> <name>ub</name> <operator>*</operator> <literal type="number">224</literal> <operator>/</operator> <literal type="number">255</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ug</name> <operator>=</operator> <name>ug</name> <operator>*</operator> <literal type="number">224</literal> <operator>/</operator> <literal type="number">255</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>vg</name> <operator>=</operator> <name>vg</name> <operator>*</operator> <literal type="number">224</literal> <operator>/</operator> <literal type="number">255</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>W</name> <operator>=</operator> <call><name>ROUNDED_DIV</name><argument_list>(<argument><expr><name>ONE</name><operator>*</operator><name>ONE</name><operator>*</operator><name>ug</name></expr></argument>, <argument><expr><name>ub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>V</name> <operator>=</operator> <call><name>ROUNDED_DIV</name><argument_list>(<argument><expr><name>ONE</name><operator>*</operator><name>ONE</name><operator>*</operator><name>vg</name></expr></argument>, <argument><expr><name>vr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>Z</name> <operator>=</operator> <name>ONE</name><operator>*</operator><name>ONE</name><operator>-</operator><name>W</name><operator>-</operator><name>V</name></expr>;</expr_stmt>

<expr_stmt><expr><name>Cy</name> <operator>=</operator> <call><name>ROUNDED_DIV</name><argument_list>(<argument><expr><name>cy</name><operator>*</operator><name>Z</name></expr></argument>, <argument><expr><name>ONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>Cu</name> <operator>=</operator> <call><name>ROUNDED_DIV</name><argument_list>(<argument><expr><name>ub</name><operator>*</operator><name>Z</name></expr></argument>, <argument><expr><name>ONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>Cv</name> <operator>=</operator> <call><name>ROUNDED_DIV</name><argument_list>(<argument><expr><name>vr</name><operator>*</operator><name>Z</name></expr></argument>, <argument><expr><name>ONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>input_rgb2yuv_table</name><index>[<expr><name>RY_IDX</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><call><name>ROUNDED_DIV</name><argument_list>(<argument><expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>RGB2YUV_SHIFT</name><operator>)</operator><operator>*</operator><name>V</name></expr></argument> , <argument><expr><name>Cy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>input_rgb2yuv_table</name><index>[<expr><name>GY_IDX</name></expr>]</index></name> <operator>=</operator> <call><name>ROUNDED_DIV</name><argument_list>(<argument><expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>RGB2YUV_SHIFT</name><operator>)</operator><operator>*</operator><name>ONE</name><operator>*</operator><name>ONE</name></expr></argument> , <argument><expr><name>Cy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>input_rgb2yuv_table</name><index>[<expr><name>BY_IDX</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><call><name>ROUNDED_DIV</name><argument_list>(<argument><expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>RGB2YUV_SHIFT</name><operator>)</operator><operator>*</operator><name>W</name></expr></argument> , <argument><expr><name>Cy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>input_rgb2yuv_table</name><index>[<expr><name>RU_IDX</name></expr>]</index></name> <operator>=</operator> <call><name>ROUNDED_DIV</name><argument_list>(<argument><expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>RGB2YUV_SHIFT</name><operator>)</operator><operator>*</operator><name>V</name></expr></argument> , <argument><expr><name>Cu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>input_rgb2yuv_table</name><index>[<expr><name>GU_IDX</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><call><name>ROUNDED_DIV</name><argument_list>(<argument><expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>RGB2YUV_SHIFT</name><operator>)</operator><operator>*</operator><name>ONE</name><operator>*</operator><name>ONE</name></expr></argument> , <argument><expr><name>Cu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>input_rgb2yuv_table</name><index>[<expr><name>BU_IDX</name></expr>]</index></name> <operator>=</operator> <call><name>ROUNDED_DIV</name><argument_list>(<argument><expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>RGB2YUV_SHIFT</name><operator>)</operator><operator>*</operator><operator>(</operator><name>Z</name><operator>+</operator><name>W</name><operator>)</operator></expr></argument> , <argument><expr><name>Cu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>input_rgb2yuv_table</name><index>[<expr><name>RV_IDX</name></expr>]</index></name> <operator>=</operator> <call><name>ROUNDED_DIV</name><argument_list>(<argument><expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>RGB2YUV_SHIFT</name><operator>)</operator><operator>*</operator><operator>(</operator><name>V</name><operator>+</operator><name>Z</name><operator>)</operator></expr></argument> , <argument><expr><name>Cv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>input_rgb2yuv_table</name><index>[<expr><name>GV_IDX</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><call><name>ROUNDED_DIV</name><argument_list>(<argument><expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>RGB2YUV_SHIFT</name><operator>)</operator><operator>*</operator><name>ONE</name><operator>*</operator><name>ONE</name></expr></argument> , <argument><expr><name>Cv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>input_rgb2yuv_table</name><index>[<expr><name>BV_IDX</name></expr>]</index></name> <operator>=</operator> <call><name>ROUNDED_DIV</name><argument_list>(<argument><expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>RGB2YUV_SHIFT</name><operator>)</operator><operator>*</operator><name>W</name></expr></argument> , <argument><expr><name>Cv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name><name>ff_yuv2rgb_coeffs</name><index>[<expr><name>SWS_CS_DEFAULT</name></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ff_yuv2rgb_coeffs</name><index>[<expr><name>SWS_CS_DEFAULT</name></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>input_rgb2yuv_table</name><index>[<expr><name>BY_IDX</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><literal type="number">0.114</literal> <operator>*</operator> <literal type="number">219</literal> <operator>/</operator> <literal type="number">255</literal> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>RGB2YUV_SHIFT</name><operator>)</operator> <operator>+</operator> <literal type="number">0.5</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>input_rgb2yuv_table</name><index>[<expr><name>BV_IDX</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>-</operator><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><literal type="number">0.081</literal> <operator>*</operator> <literal type="number">224</literal> <operator>/</operator> <literal type="number">255</literal> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>RGB2YUV_SHIFT</name><operator>)</operator> <operator>+</operator> <literal type="number">0.5</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>input_rgb2yuv_table</name><index>[<expr><name>BU_IDX</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><literal type="number">0.500</literal> <operator>*</operator> <literal type="number">224</literal> <operator>/</operator> <literal type="number">255</literal> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>RGB2YUV_SHIFT</name><operator>)</operator> <operator>+</operator> <literal type="number">0.5</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>input_rgb2yuv_table</name><index>[<expr><name>GY_IDX</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><literal type="number">0.587</literal> <operator>*</operator> <literal type="number">219</literal> <operator>/</operator> <literal type="number">255</literal> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>RGB2YUV_SHIFT</name><operator>)</operator> <operator>+</operator> <literal type="number">0.5</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>input_rgb2yuv_table</name><index>[<expr><name>GV_IDX</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>-</operator><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><literal type="number">0.419</literal> <operator>*</operator> <literal type="number">224</literal> <operator>/</operator> <literal type="number">255</literal> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>RGB2YUV_SHIFT</name><operator>)</operator> <operator>+</operator> <literal type="number">0.5</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>input_rgb2yuv_table</name><index>[<expr><name>GU_IDX</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>-</operator><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><literal type="number">0.331</literal> <operator>*</operator> <literal type="number">224</literal> <operator>/</operator> <literal type="number">255</literal> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>RGB2YUV_SHIFT</name><operator>)</operator> <operator>+</operator> <literal type="number">0.5</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>input_rgb2yuv_table</name><index>[<expr><name>RY_IDX</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><literal type="number">0.299</literal> <operator>*</operator> <literal type="number">219</literal> <operator>/</operator> <literal type="number">255</literal> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>RGB2YUV_SHIFT</name><operator>)</operator> <operator>+</operator> <literal type="number">0.5</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>input_rgb2yuv_table</name><index>[<expr><name>RV_IDX</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><literal type="number">0.500</literal> <operator>*</operator> <literal type="number">224</literal> <operator>/</operator> <literal type="number">255</literal> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>RGB2YUV_SHIFT</name><operator>)</operator> <operator>+</operator> <literal type="number">0.5</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>input_rgb2yuv_table</name><index>[<expr><name>RU_IDX</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>-</operator><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><literal type="number">0.169</literal> <operator>*</operator> <literal type="number">224</literal> <operator>/</operator> <literal type="number">255</literal> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>RGB2YUV_SHIFT</name><operator>)</operator> <operator>+</operator> <literal type="number">0.5</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>map</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>AV_WL16</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">16</literal><operator>*</operator><literal type="number">4</literal> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>i</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>map</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>c</name><operator>-&gt;</operator><name>input_rgb2yuv_table</name><index>[<expr><name><name>map</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fill_xyztables</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SwsContext</name></name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>xyzgamma</name> <init>= <expr><name>XYZ_GAMMA</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>rgbgamma</name> <init>= <expr><literal type="number">1.0</literal> <operator>/</operator> <name>RGB_GAMMA</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>xyzgammainv</name> <init>= <expr><literal type="number">1.0</literal> <operator>/</operator> <name>XYZ_GAMMA</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>rgbgammainv</name> <init>= <expr><name>RGB_GAMMA</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int16_t</name></type> <name><name>xyz2rgb_matrix</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{

<expr><block>{<expr><literal type="number">13270</literal></expr>, <expr><operator>-</operator><literal type="number">6295</literal></expr>, <expr><operator>-</operator><literal type="number">2041</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>-</operator><literal type="number">3969</literal></expr>, <expr><literal type="number">7682</literal></expr>, <expr><literal type="number">170</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="number">228</literal></expr>, <expr><operator>-</operator><literal type="number">835</literal></expr>, <expr><literal type="number">4329</literal></expr>}</block></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int16_t</name></type> <name><name>rgb2xyz_matrix</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{

<expr><block>{<expr><literal type="number">1689</literal></expr>, <expr><literal type="number">1464</literal></expr>, <expr><literal type="number">739</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="number">871</literal></expr>, <expr><literal type="number">2929</literal></expr>, <expr><literal type="number">296</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="number">79</literal></expr>, <expr><literal type="number">488</literal></expr>, <expr><literal type="number">3891</literal></expr>}</block></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int16_t</name></type> <name><name>xyzgamma_tab</name><index>[<expr><literal type="number">4096</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>rgbgamma_tab</name><index>[<expr><literal type="number">4096</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>xyzgammainv_tab</name><index>[<expr><literal type="number">4096</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>rgbgammainv_tab</name><index>[<expr><literal type="number">4096</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>xyz2rgb_matrix</name></name></expr></argument>, <argument><expr><name>xyz2rgb_matrix</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>xyz2rgb_matrix</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>rgb2xyz_matrix</name></name></expr></argument>, <argument><expr><name>rgb2xyz_matrix</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>rgb2xyz_matrix</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>xyzgamma</name></name> <operator>=</operator> <name>xyzgamma_tab</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>rgbgamma</name></name> <operator>=</operator> <name>rgbgamma_tab</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>xyzgammainv</name></name> <operator>=</operator> <name>xyzgammainv_tab</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>rgbgammainv</name></name> <operator>=</operator> <name>rgbgammainv_tab</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rgbgamma_tab</name><index>[<expr><literal type="number">4095</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4096</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>xyzgamma_tab</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>lrint</name><argument_list>(<argument><expr><call><name>pow</name><argument_list>(<argument><expr><name>i</name> <operator>/</operator> <literal type="number">4095.0</literal></expr></argument>, <argument><expr><name>xyzgamma</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">4095.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rgbgamma_tab</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>lrint</name><argument_list>(<argument><expr><call><name>pow</name><argument_list>(<argument><expr><name>i</name> <operator>/</operator> <literal type="number">4095.0</literal></expr></argument>, <argument><expr><name>rgbgamma</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">4095.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xyzgammainv_tab</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>lrint</name><argument_list>(<argument><expr><call><name>pow</name><argument_list>(<argument><expr><name>i</name> <operator>/</operator> <literal type="number">4095.0</literal></expr></argument>, <argument><expr><name>xyzgammainv</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">4095.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rgbgammainv_tab</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>lrint</name><argument_list>(<argument><expr><call><name>pow</name><argument_list>(<argument><expr><name>i</name> <operator>/</operator> <literal type="number">4095.0</literal></expr></argument>, <argument><expr><name>rgbgammainv</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">4095.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>sws_setColorspaceDetails</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SwsContext</name></name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name><name>inv_table</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>srcRange</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name><name>table</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dstRange</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>brightness</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>contrast</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>saturation</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc_dst</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc_src</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>need_reinit</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>handle_formats</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>desc_dst</name> <operator>=</operator> <call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>dstFormat</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>desc_src</name> <operator>=</operator> <call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>srcFormat</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>isYUV</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>dstFormat</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isGray</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>dstFormat</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>dstRange</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>isYUV</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>srcFormat</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isGray</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>srcFormat</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>srcRange</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>srcRange</name></name> <operator>!=</operator> <name>srcRange</name> <operator>||</operator>

<name><name>c</name><operator>-&gt;</operator><name>dstRange</name></name> <operator>!=</operator> <name>dstRange</name> <operator>||</operator>

<name><name>c</name><operator>-&gt;</operator><name>brightness</name></name> <operator>!=</operator> <name>brightness</name> <operator>||</operator>

<name><name>c</name><operator>-&gt;</operator><name>contrast</name></name> <operator>!=</operator> <name>contrast</name> <operator>||</operator>

<name><name>c</name><operator>-&gt;</operator><name>saturation</name></name> <operator>!=</operator> <name>saturation</name> <operator>||</operator>

<call><name>memcmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>srcColorspaceTable</name></name></expr></argument>, <argument><expr><name>inv_table</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>||</operator>

<call><name>memcmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>dstColorspaceTable</name></name></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>

)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>need_reinit</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>srcColorspaceTable</name></name></expr></argument>, <argument><expr><name>inv_table</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>dstColorspaceTable</name></name></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>brightness</name></name> <operator>=</operator> <name>brightness</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>contrast</name></name> <operator>=</operator> <name>contrast</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>saturation</name></name> <operator>=</operator> <name>saturation</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>srcRange</name></name> <operator>=</operator> <name>srcRange</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>dstRange</name></name> <operator>=</operator> <name>dstRange</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>need_reinit</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>srcBpc</name></name> <operator>==</operator> <literal type="number">8</literal> <operator>||</operator> <operator>!</operator><call><name>isYUV</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>srcFormat</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_sws_init_range_convert</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>dstFormatBpp</name></name> <operator>=</operator> <call><name>av_get_bits_per_pixel</name><argument_list>(<argument><expr><name>desc_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>srcFormatBpp</name></name> <operator>=</operator> <call><name>av_get_bits_per_pixel</name><argument_list>(<argument><expr><name>desc_src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>cascaded_context</name><index>[<expr><name><name>c</name><operator>-&gt;</operator><name>cascaded_mainindex</name></name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>sws_setColorspaceDetails</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>cascaded_context</name><index>[<expr><name><name>c</name><operator>-&gt;</operator><name>cascaded_mainindex</name></name></expr>]</index></name></expr></argument>,<argument><expr><name>inv_table</name></expr></argument>, <argument><expr><name>srcRange</name></expr></argument>,<argument><expr><name>table</name></expr></argument>, <argument><expr><name>dstRange</name></expr></argument>, <argument><expr><name>brightness</name></expr></argument>, <argument><expr><name>contrast</name></expr></argument>, <argument><expr><name>saturation</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>need_reinit</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>isYUV</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>dstFormat</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>isGray</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>dstFormat</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>isYUV</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>srcFormat</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>isGray</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>srcFormat</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>cascaded_context</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator>

<call><name>memcmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>dstColorspaceTable</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>srcColorspaceTable</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<name><name>c</name><operator>-&gt;</operator><name>srcW</name></name> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>srcH</name></name> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>dstW</name></name> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>dstH</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>tmp_format</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tmp_width</name></decl>, <decl><type ref="prev"/><name>tmp_height</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>srcW</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>srcW</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>srcH</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>srcH</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dstW</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>dstW</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dstH</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>dstH</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"YUV color matrix differs for YUV-&gt;YUV, using intermediate RGB to convert\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>isNBPS</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>dstFormat</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>is16BPS</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>dstFormat</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>isALPHA</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>srcFormat</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>isALPHA</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>dstFormat</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tmp_format</name> <operator>=</operator> <name>AV_PIX_FMT_BGRA64</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>tmp_format</name> <operator>=</operator> <name>AV_PIX_FMT_BGR48</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>isALPHA</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>srcFormat</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>isALPHA</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>dstFormat</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tmp_format</name> <operator>=</operator> <name>AV_PIX_FMT_BGRA</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>tmp_format</name> <operator>=</operator> <name>AV_PIX_FMT_BGR24</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>srcW</name><operator>*</operator><name>srcH</name> <operator>&gt;</operator> <name>dstW</name><operator>*</operator><name>dstH</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tmp_width</name> <operator>=</operator> <name>dstW</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp_height</name> <operator>=</operator> <name>dstH</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>tmp_width</name> <operator>=</operator> <name>srcW</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp_height</name> <operator>=</operator> <name>srcH</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_image_alloc</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>cascaded_tmp</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>cascaded_tmpStride</name></name></expr></argument>,

<argument><expr><name>tmp_width</name></expr></argument>, <argument><expr><name>tmp_height</name></expr></argument>, <argument><expr><name>tmp_format</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>cascaded_context</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>sws_alloc_set_opts</name><argument_list>(<argument><expr><name>srcW</name></expr></argument>, <argument><expr><name>srcH</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>srcFormat</name></name></expr></argument>,

<argument><expr><name>tmp_width</name></expr></argument>, <argument><expr><name>tmp_height</name></expr></argument>, <argument><expr><name>tmp_format</name></expr></argument>,

<argument><expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>param</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>cascaded_context</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>cascaded_context</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>alphablend</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>alphablend</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>sws_init_context</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>cascaded_context</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>sws_setColorspaceDetails</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>cascaded_context</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>inv_table</name></expr></argument>,

<argument><expr><name>srcRange</name></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><name>dstRange</name></expr></argument>,

<argument><expr><name>brightness</name></expr></argument>, <argument><expr><name>contrast</name></expr></argument>, <argument><expr><name>saturation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>cascaded_context</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>sws_getContext</name><argument_list>(<argument><expr><name>tmp_width</name></expr></argument>, <argument><expr><name>tmp_height</name></expr></argument>, <argument><expr><name>tmp_format</name></expr></argument>,

<argument><expr><name>dstW</name></expr></argument>, <argument><expr><name>dstH</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>dstFormat</name></name></expr></argument>,

<argument><expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>param</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>cascaded_context</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>sws_setColorspaceDetails</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>cascaded_context</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>inv_table</name></expr></argument>,

<argument><expr><name>srcRange</name></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><name>dstRange</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isYUV</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>dstFormat</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isGray</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>dstFormat</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ff_yuv2rgb_c_init_tables</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>inv_table</name></expr></argument>, <argument><expr><name>srcRange</name></expr></argument>, <argument><expr><name>brightness</name></expr></argument>,

<argument><expr><name>contrast</name></expr></argument>, <argument><expr><name>saturation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ARCH_PPC</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_yuv2rgb_init_tables_ppc</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>inv_table</name></expr></argument>, <argument><expr><name>brightness</name></expr></argument>,

<argument><expr><name>contrast</name></expr></argument>, <argument><expr><name>saturation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>fill_rgb2yuv_table</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><name>dstRange</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>sws_getColorspaceDetails</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SwsContext</name></name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier><modifier>*</modifier></type><name>inv_table</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>srcRange</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier><modifier>*</modifier></type><name>table</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>dstRange</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>brightness</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>contrast</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>saturation</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>c</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>inv_table</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>srcColorspaceTable</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>table</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>dstColorspaceTable</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>srcRange</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>srcRange</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>dstRange</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>dstRange</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>brightness</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>brightness</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>contrast</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>contrast</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>saturation</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>saturation</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>handle_jpeg</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name> <modifier>*</modifier></type><name>format</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><operator>*</operator><name>format</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_PIX_FMT_YUVJ420P</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>format</name> <operator>=</operator> <name>AV_PIX_FMT_YUV420P</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

<case>case <expr><name>AV_PIX_FMT_YUVJ411P</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>format</name> <operator>=</operator> <name>AV_PIX_FMT_YUV411P</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

<case>case <expr><name>AV_PIX_FMT_YUVJ422P</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>format</name> <operator>=</operator> <name>AV_PIX_FMT_YUV422P</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

<case>case <expr><name>AV_PIX_FMT_YUVJ444P</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>format</name> <operator>=</operator> <name>AV_PIX_FMT_YUV444P</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

<case>case <expr><name>AV_PIX_FMT_YUVJ440P</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>format</name> <operator>=</operator> <name>AV_PIX_FMT_YUV440P</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

<case>case <expr><name>AV_PIX_FMT_GRAY8</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_YA8</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_GRAY9LE</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_GRAY9BE</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_GRAY10LE</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_GRAY10BE</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_GRAY12LE</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_GRAY12BE</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_GRAY14LE</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_GRAY14BE</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_GRAY16LE</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_GRAY16BE</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_YA16BE</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_YA16LE</name></expr>:</case>

<return>return <expr><literal type="number">1</literal></expr>;</return>

<default>default:</default>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>handle_0alpha</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name> <modifier>*</modifier></type><name>format</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><operator>*</operator><name>format</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_PIX_FMT_0BGR</name></expr> :</case> <expr_stmt><expr><operator>*</operator><name>format</name> <operator>=</operator> <name>AV_PIX_FMT_ABGR</name></expr> ;</expr_stmt> <return>return <expr><literal type="number">1</literal></expr>;</return>

<case>case <expr><name>AV_PIX_FMT_BGR0</name></expr> :</case> <expr_stmt><expr><operator>*</operator><name>format</name> <operator>=</operator> <name>AV_PIX_FMT_BGRA</name></expr> ;</expr_stmt> <return>return <expr><literal type="number">4</literal></expr>;</return>

<case>case <expr><name>AV_PIX_FMT_0RGB</name></expr> :</case> <expr_stmt><expr><operator>*</operator><name>format</name> <operator>=</operator> <name>AV_PIX_FMT_ARGB</name></expr> ;</expr_stmt> <return>return <expr><literal type="number">1</literal></expr>;</return>

<case>case <expr><name>AV_PIX_FMT_RGB0</name></expr> :</case> <expr_stmt><expr><operator>*</operator><name>format</name> <operator>=</operator> <name>AV_PIX_FMT_RGBA</name></expr> ;</expr_stmt> <return>return <expr><literal type="number">4</literal></expr>;</return>

<default>default:</default> <return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>handle_xyz</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name> <modifier>*</modifier></type><name>format</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><operator>*</operator><name>format</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_PIX_FMT_XYZ12BE</name></expr> :</case> <expr_stmt><expr><operator>*</operator><name>format</name> <operator>=</operator> <name>AV_PIX_FMT_RGB48BE</name></expr>;</expr_stmt> <return>return <expr><literal type="number">1</literal></expr>;</return>

<case>case <expr><name>AV_PIX_FMT_XYZ12LE</name></expr> :</case> <expr_stmt><expr><operator>*</operator><name>format</name> <operator>=</operator> <name>AV_PIX_FMT_RGB48LE</name></expr>;</expr_stmt> <return>return <expr><literal type="number">1</literal></expr>;</return>

<default>default:</default> <return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handle_formats</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>src0Alpha</name></name> <operator>|=</operator> <call><name>handle_0alpha</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>srcFormat</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>dst0Alpha</name></name> <operator>|=</operator> <call><name>handle_0alpha</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>dstFormat</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>srcXYZ</name></name> <operator>|=</operator> <call><name>handle_xyz</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>srcFormat</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>dstXYZ</name></name> <operator>|=</operator> <call><name>handle_xyz</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>dstFormat</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>srcXYZ</name></name> <operator>||</operator> <name><name>c</name><operator>-&gt;</operator><name>dstXYZ</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fill_xyztables</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>SwsContext</name> <modifier>*</modifier></type><name>sws_alloc_context</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SwsContext</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><call><name>offsetof</name><argument_list>(<argument><expr><name>SwsContext</name></expr></argument>, <argument><expr><name>redDither</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>DITHER32_INT</name> <operator>==</operator> <call><name>offsetof</name><argument_list>(<argument><expr><name>SwsContext</name></expr></argument>, <argument><expr><name>dither32</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>av_class</name></name> <operator>=</operator> <operator>&amp;</operator><name>ff_sws_context_class</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_opt_set_defaults</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>c</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint16_t</name> <modifier>*</modifier></type> <name>alloc_gamma_tbl</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>e</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type> <name>tbl</name></decl>;</decl_stmt>

<expr_stmt><expr><name>tbl</name> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>*</operator><operator>)</operator><call><name>av_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint16_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tbl</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">65536</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>tbl</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>pow</name><argument_list>(<argument><expr><name>i</name> <operator>/</operator> <literal type="number">65535.0</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">65535.0</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>tbl</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>alphaless_fmt</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>fmt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch<condition>(<expr><name>fmt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_PIX_FMT_ARGB</name></expr>:</case> <return>return <expr><name>AV_PIX_FMT_RGB24</name></expr>;</return>

<case>case <expr><name>AV_PIX_FMT_RGBA</name></expr>:</case> <return>return <expr><name>AV_PIX_FMT_RGB24</name></expr>;</return>

<case>case <expr><name>AV_PIX_FMT_ABGR</name></expr>:</case> <return>return <expr><name>AV_PIX_FMT_BGR24</name></expr>;</return>

<case>case <expr><name>AV_PIX_FMT_BGRA</name></expr>:</case> <return>return <expr><name>AV_PIX_FMT_BGR24</name></expr>;</return>

<case>case <expr><name>AV_PIX_FMT_YA8</name></expr>:</case> <return>return <expr><name>AV_PIX_FMT_GRAY8</name></expr>;</return>

<case>case <expr><name>AV_PIX_FMT_YUVA420P</name></expr>:</case> <return>return <expr><name>AV_PIX_FMT_YUV420P</name></expr>;</return>

<case>case <expr><name>AV_PIX_FMT_YUVA422P</name></expr>:</case> <return>return <expr><name>AV_PIX_FMT_YUV422P</name></expr>;</return>

<case>case <expr><name>AV_PIX_FMT_YUVA444P</name></expr>:</case> <return>return <expr><name>AV_PIX_FMT_YUV444P</name></expr>;</return>

<case>case <expr><name>AV_PIX_FMT_GBRAP</name></expr>:</case> <return>return <expr><name>AV_PIX_FMT_GBRP</name></expr>;</return>

<case>case <expr><name>AV_PIX_FMT_GBRAP10LE</name></expr>:</case> <return>return <expr><name>AV_PIX_FMT_GBRP10</name></expr>;</return>

<case>case <expr><name>AV_PIX_FMT_GBRAP10BE</name></expr>:</case> <return>return <expr><name>AV_PIX_FMT_GBRP10</name></expr>;</return>

<case>case <expr><name>AV_PIX_FMT_GBRAP12LE</name></expr>:</case> <return>return <expr><name>AV_PIX_FMT_GBRP12</name></expr>;</return>

<case>case <expr><name>AV_PIX_FMT_GBRAP12BE</name></expr>:</case> <return>return <expr><name>AV_PIX_FMT_GBRP12</name></expr>;</return>

<case>case <expr><name>AV_PIX_FMT_GBRAP16LE</name></expr>:</case> <return>return <expr><name>AV_PIX_FMT_GBRP16</name></expr>;</return>

<case>case <expr><name>AV_PIX_FMT_GBRAP16BE</name></expr>:</case> <return>return <expr><name>AV_PIX_FMT_GBRP16</name></expr>;</return>

<case>case <expr><name>AV_PIX_FMT_RGBA64LE</name></expr>:</case> <return>return <expr><name>AV_PIX_FMT_RGB48</name></expr>;</return>

<case>case <expr><name>AV_PIX_FMT_RGBA64BE</name></expr>:</case> <return>return <expr><name>AV_PIX_FMT_RGB48</name></expr>;</return>

<case>case <expr><name>AV_PIX_FMT_BGRA64LE</name></expr>:</case> <return>return <expr><name>AV_PIX_FMT_BGR48</name></expr>;</return>

<case>case <expr><name>AV_PIX_FMT_BGRA64BE</name></expr>:</case> <return>return <expr><name>AV_PIX_FMT_BGR48</name></expr>;</return>

<case>case <expr><name>AV_PIX_FMT_YA16BE</name></expr>:</case> <return>return <expr><name>AV_PIX_FMT_GRAY16</name></expr>;</return>

<case>case <expr><name>AV_PIX_FMT_YA16LE</name></expr>:</case> <return>return <expr><name>AV_PIX_FMT_GRAY16</name></expr>;</return>

<case>case <expr><name>AV_PIX_FMT_YUVA420P9BE</name></expr>:</case> <return>return <expr><name>AV_PIX_FMT_YUV420P9</name></expr>;</return>

<case>case <expr><name>AV_PIX_FMT_YUVA422P9BE</name></expr>:</case> <return>return <expr><name>AV_PIX_FMT_YUV422P9</name></expr>;</return>

<case>case <expr><name>AV_PIX_FMT_YUVA444P9BE</name></expr>:</case> <return>return <expr><name>AV_PIX_FMT_YUV444P9</name></expr>;</return>

<case>case <expr><name>AV_PIX_FMT_YUVA420P9LE</name></expr>:</case> <return>return <expr><name>AV_PIX_FMT_YUV420P9</name></expr>;</return>

<case>case <expr><name>AV_PIX_FMT_YUVA422P9LE</name></expr>:</case> <return>return <expr><name>AV_PIX_FMT_YUV422P9</name></expr>;</return>

<case>case <expr><name>AV_PIX_FMT_YUVA444P9LE</name></expr>:</case> <return>return <expr><name>AV_PIX_FMT_YUV444P9</name></expr>;</return>

<case>case <expr><name>AV_PIX_FMT_YUVA420P10BE</name></expr>:</case> <return>return <expr><name>AV_PIX_FMT_YUV420P10</name></expr>;</return>

<case>case <expr><name>AV_PIX_FMT_YUVA422P10BE</name></expr>:</case> <return>return <expr><name>AV_PIX_FMT_YUV422P10</name></expr>;</return>

<case>case <expr><name>AV_PIX_FMT_YUVA444P10BE</name></expr>:</case> <return>return <expr><name>AV_PIX_FMT_YUV444P10</name></expr>;</return>

<case>case <expr><name>AV_PIX_FMT_YUVA420P10LE</name></expr>:</case> <return>return <expr><name>AV_PIX_FMT_YUV420P10</name></expr>;</return>

<case>case <expr><name>AV_PIX_FMT_YUVA422P10LE</name></expr>:</case> <return>return <expr><name>AV_PIX_FMT_YUV422P10</name></expr>;</return>

<case>case <expr><name>AV_PIX_FMT_YUVA444P10LE</name></expr>:</case> <return>return <expr><name>AV_PIX_FMT_YUV444P10</name></expr>;</return>

<case>case <expr><name>AV_PIX_FMT_YUVA420P16BE</name></expr>:</case> <return>return <expr><name>AV_PIX_FMT_YUV420P16</name></expr>;</return>

<case>case <expr><name>AV_PIX_FMT_YUVA422P16BE</name></expr>:</case> <return>return <expr><name>AV_PIX_FMT_YUV422P16</name></expr>;</return>

<case>case <expr><name>AV_PIX_FMT_YUVA444P16BE</name></expr>:</case> <return>return <expr><name>AV_PIX_FMT_YUV444P16</name></expr>;</return>

<case>case <expr><name>AV_PIX_FMT_YUVA420P16LE</name></expr>:</case> <return>return <expr><name>AV_PIX_FMT_YUV420P16</name></expr>;</return>

<case>case <expr><name>AV_PIX_FMT_YUVA422P16LE</name></expr>:</case> <return>return <expr><name>AV_PIX_FMT_YUV422P16</name></expr>;</return>

<case>case <expr><name>AV_PIX_FMT_YUVA444P16LE</name></expr>:</case> <return>return <expr><name>AV_PIX_FMT_YUV444P16</name></expr>;</return>

<default>default:</default> <return>return <expr><name>AV_PIX_FMT_NONE</name></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><name>av_cold</name> <name>int</name></type> <name>sws_init_context</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>SwsFilter</name> <modifier>*</modifier></type><name>srcFilter</name></decl></parameter>,

<parameter><decl><type><name>SwsFilter</name> <modifier>*</modifier></type><name>dstFilter</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>usesVFilter</name></decl>, <decl><type ref="prev"/><name>usesHFilter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>unscaled</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SwsFilter</name></type> <name>dummyFilter</name> <init>= <expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>srcW</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>srcW</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>srcH</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>srcH</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dstW</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>dstW</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dstH</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>dstH</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dst_stride</name> <init>= <expr><call><name>FFALIGN</name><argument_list>(<argument><expr><name>dstW</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <literal type="number">66</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>, <decl><type ref="prev"/><name>cpu_flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>srcFormat</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>srcFormat</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>dstFormat</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>dstFormat</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc_src</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc_dst</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>tmpFmt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>float</name></type> <name>float_mult</name> <init>= <expr><literal type="number">1.0f</literal> <operator>/</operator> <literal type="number">255.0f</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>cpu_flags</name> <operator>=</operator> <call><name>av_get_cpu_flags</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>flags</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>flags</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>emms_c</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rgb15to16</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_sws_rgb2rgb_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>unscaled</name> <operator>=</operator> <operator>(</operator><name>srcW</name> <operator>==</operator> <name>dstW</name> <operator>&amp;&amp;</operator> <name>srcH</name> <operator>==</operator> <name>dstH</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>srcRange</name></name> <operator>|=</operator> <call><name>handle_jpeg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>srcFormat</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>dstRange</name></name> <operator>|=</operator> <call><name>handle_jpeg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>dstFormat</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>srcFormat</name><operator>!=</operator><name><name>c</name><operator>-&gt;</operator><name>srcFormat</name></name> <operator>||</operator> <name>dstFormat</name><operator>!=</operator><name><name>c</name><operator>-&gt;</operator><name>dstFormat</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"deprecated pixel format used, make sure you did set range correctly\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>contrast</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>saturation</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>dstFormatBpp</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>sws_setColorspaceDetails</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>ff_yuv2rgb_coeffs</name><index>[<expr><name>SWS_CS_DEFAULT</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>srcRange</name></name></expr></argument>,

<argument><expr><name><name>ff_yuv2rgb_coeffs</name><index>[<expr><name>SWS_CS_DEFAULT</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>c</name><operator>-&gt;</operator><name>dstRange</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>handle_formats</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>srcFormat</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>srcFormat</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dstFormat</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>dstFormat</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>desc_src</name> <operator>=</operator> <call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name>srcFormat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>desc_dst</name> <operator>=</operator> <call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name>dstFormat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>src0Alpha</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>alphablend</name></name> <operator>=</operator> <name>SWS_ALPHA_BLEND_NONE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>unscaled</name> <operator>&amp;&amp;</operator> <call><name>sws_isSupportedEndiannessConversion</name><argument_list>(<argument><expr><name>srcFormat</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<call><name>av_pix_fmt_swap_endianness</name><argument_list>(<argument><expr><name>srcFormat</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>dstFormat</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>sws_isSupportedInput</name><argument_list>(<argument><expr><name>srcFormat</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"%s is not supported as input pixel format\n"</literal></expr></argument>,

<argument><expr><call><name>av_get_pix_fmt_name</name><argument_list>(<argument><expr><name>srcFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>sws_isSupportedOutput</name><argument_list>(<argument><expr><name>dstFormat</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"%s is not supported as output pixel format\n"</literal></expr></argument>,

<argument><expr><call><name>av_get_pix_fmt_name</name><argument_list>(<argument><expr><name>dstFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name>desc_src</name> <operator>&amp;&amp;</operator> <name>desc_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name>flags</name> <operator>&amp;</operator> <operator>(</operator><name>SWS_POINT</name> <operator>|</operator>

<name>SWS_AREA</name> <operator>|</operator>

<name>SWS_BILINEAR</name> <operator>|</operator>

<name>SWS_FAST_BILINEAR</name> <operator>|</operator>

<name>SWS_BICUBIC</name> <operator>|</operator>

<name>SWS_X</name> <operator>|</operator>

<name>SWS_GAUSS</name> <operator>|</operator>

<name>SWS_LANCZOS</name> <operator>|</operator>

<name>SWS_SINC</name> <operator>|</operator>

<name>SWS_SPLINE</name> <operator>|</operator>

<name>SWS_BICUBLIN</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>i</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>dstW</name> <operator>&lt;</operator> <name>srcW</name> <operator>&amp;&amp;</operator> <name>dstH</name> <operator>&lt;</operator> <name>srcH</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>SWS_BICUBIC</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>dstW</name> <operator>&gt;</operator> <name>srcW</name> <operator>&amp;&amp;</operator> <name>dstH</name> <operator>&gt;</operator> <name>srcH</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>SWS_BICUBIC</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>SWS_BICUBIC</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>i</name> <operator>&amp;</operator> <operator>(</operator><name>i</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Exactly one scaler algorithm must be chosen, got %X\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>srcW</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <name>srcH</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <name>dstW</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <name>dstH</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"%dx%d -&gt; %dx%d is invalid scaling dimension\n"</literal></expr></argument>,

<argument><expr><name>srcW</name></expr></argument>, <argument><expr><name>srcH</name></expr></argument>, <argument><expr><name>dstW</name></expr></argument>, <argument><expr><name>dstH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>SWS_FAST_BILINEAR</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>srcW</name> <operator>&lt;</operator> <literal type="number">8</literal> <operator>||</operator> <name>dstW</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>flags</name> <operator>^=</operator> <name>SWS_FAST_BILINEAR</name> <operator>|</operator> <name>SWS_BILINEAR</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dstFilter</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>dstFilter</name> <operator>=</operator> <operator>&amp;</operator><name>dummyFilter</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>srcFilter</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>srcFilter</name> <operator>=</operator> <operator>&amp;</operator><name>dummyFilter</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>lumXInc</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>int64_t</name><operator>)</operator><name>srcW</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>dstW</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>/</operator> <name>dstW</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>lumYInc</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>int64_t</name><operator>)</operator><name>srcH</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>dstH</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>/</operator> <name>dstH</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>dstFormatBpp</name></name> <operator>=</operator> <call><name>av_get_bits_per_pixel</name><argument_list>(<argument><expr><name>desc_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>srcFormatBpp</name></name> <operator>=</operator> <call><name>av_get_bits_per_pixel</name><argument_list>(<argument><expr><name>desc_src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>vRounder</name></name> <operator>=</operator> <literal type="number">4</literal> <operator>*</operator> <literal type="number">0x0001000100010001ULL</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>usesVFilter</name> <operator>=</operator> <operator>(</operator><name><name>srcFilter</name><operator>-&gt;</operator><name>lumV</name></name> <operator>&amp;&amp;</operator> <name><name>srcFilter</name><operator>-&gt;</operator><name>lumV</name><operator>-&gt;</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>||</operator>

<operator>(</operator><name><name>srcFilter</name><operator>-&gt;</operator><name>chrV</name></name> <operator>&amp;&amp;</operator> <name><name>srcFilter</name><operator>-&gt;</operator><name>chrV</name><operator>-&gt;</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>||</operator>

<operator>(</operator><name><name>dstFilter</name><operator>-&gt;</operator><name>lumV</name></name> <operator>&amp;&amp;</operator> <name><name>dstFilter</name><operator>-&gt;</operator><name>lumV</name><operator>-&gt;</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>||</operator>

<operator>(</operator><name><name>dstFilter</name><operator>-&gt;</operator><name>chrV</name></name> <operator>&amp;&amp;</operator> <name><name>dstFilter</name><operator>-&gt;</operator><name>chrV</name><operator>-&gt;</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>usesHFilter</name> <operator>=</operator> <operator>(</operator><name><name>srcFilter</name><operator>-&gt;</operator><name>lumH</name></name> <operator>&amp;&amp;</operator> <name><name>srcFilter</name><operator>-&gt;</operator><name>lumH</name><operator>-&gt;</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>||</operator>

<operator>(</operator><name><name>srcFilter</name><operator>-&gt;</operator><name>chrH</name></name> <operator>&amp;&amp;</operator> <name><name>srcFilter</name><operator>-&gt;</operator><name>chrH</name><operator>-&gt;</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>||</operator>

<operator>(</operator><name><name>dstFilter</name><operator>-&gt;</operator><name>lumH</name></name> <operator>&amp;&amp;</operator> <name><name>dstFilter</name><operator>-&gt;</operator><name>lumH</name><operator>-&gt;</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>||</operator>

<operator>(</operator><name><name>dstFilter</name><operator>-&gt;</operator><name>chrH</name></name> <operator>&amp;&amp;</operator> <name><name>dstFilter</name><operator>-&gt;</operator><name>chrH</name><operator>-&gt;</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_pix_fmt_get_chroma_sub_sample</name><argument_list>(<argument><expr><name>srcFormat</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>chrSrcHSubSample</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>chrSrcVSubSample</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_pix_fmt_get_chroma_sub_sample</name><argument_list>(<argument><expr><name>dstFormat</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>chrDstHSubSample</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>chrDstVSubSample</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>isAnyRGB</name><argument_list>(<argument><expr><name>dstFormat</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>flags</name><operator>&amp;</operator><name>SWS_FULL_CHR_H_INT</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>dstW</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Forcing full internal H chroma due to odd output size\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>SWS_FULL_CHR_H_INT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name><name>c</name><operator>-&gt;</operator><name>chrSrcHSubSample</name></name> <operator>==</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>chrSrcVSubSample</name></name> <operator>==</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>dither</name></name> <operator>!=</operator> <name>SWS_DITHER_BAYER</name> 

<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SWS_FAST_BILINEAR</name><operator>)</operator></expr>

)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Forcing full internal H chroma due to input having non subsampled chroma\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>SWS_FULL_CHR_H_INT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>dither</name></name> <operator>==</operator> <name>SWS_DITHER_AUTO</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>SWS_ERROR_DIFFUSION</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>dither</name></name> <operator>=</operator> <name>SWS_DITHER_ED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>dstFormat</name> <operator>==</operator> <name>AV_PIX_FMT_BGR4_BYTE</name> <operator>||</operator>

<name>dstFormat</name> <operator>==</operator> <name>AV_PIX_FMT_RGB4_BYTE</name> <operator>||</operator>

<name>dstFormat</name> <operator>==</operator> <name>AV_PIX_FMT_BGR8</name> <operator>||</operator>

<name>dstFormat</name> <operator>==</operator> <name>AV_PIX_FMT_RGB8</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>dither</name></name> <operator>==</operator> <name>SWS_DITHER_AUTO</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>dither</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SWS_FULL_CHR_H_INT</name><operator>)</operator></expr> ?</condition><then> <expr><name>SWS_DITHER_ED</name></expr> </then><else>: <expr><name>SWS_DITHER_BAYER</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SWS_FULL_CHR_H_INT</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>dither</name></name> <operator>==</operator> <name>SWS_DITHER_ED</name> <operator>||</operator> <name><name>c</name><operator>-&gt;</operator><name>dither</name></name> <operator>==</operator> <name>SWS_DITHER_A_DITHER</name> <operator>||</operator> <name><name>c</name><operator>-&gt;</operator><name>dither</name></name> <operator>==</operator> <name>SWS_DITHER_X_DITHER</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>,

<argument><expr><literal type="string">"Desired dithering only supported in full chroma interpolation for destination format '%s'\n"</literal></expr></argument>,

<argument><expr><call><name>av_get_pix_fmt_name</name><argument_list>(<argument><expr><name>dstFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>SWS_FULL_CHR_H_INT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>SWS_FULL_CHR_H_INT</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>dither</name></name> <operator>==</operator> <name>SWS_DITHER_BAYER</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>,

<argument><expr><literal type="string">"Ordered dither is not supported in full chroma interpolation for destination format '%s'\n"</literal></expr></argument>,

<argument><expr><call><name>av_get_pix_fmt_name</name><argument_list>(<argument><expr><name>dstFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>dither</name></name> <operator>=</operator> <name>SWS_DITHER_ED</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>isPlanarRGB</name><argument_list>(<argument><expr><name>dstFormat</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SWS_FULL_CHR_H_INT</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>,

<argument><expr><literal type="string">"%s output is not supported with half chroma resolution, switching to full\n"</literal></expr></argument>,

<argument><expr><call><name>av_get_pix_fmt_name</name><argument_list>(<argument><expr><name>dstFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>SWS_FULL_CHR_H_INT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>SWS_FULL_CHR_H_INT</name> <operator>&amp;&amp;</operator>

<call><name>isAnyRGB</name><argument_list>(<argument><expr><name>dstFormat</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<operator>!</operator><call><name>isPlanarRGB</name><argument_list>(<argument><expr><name>dstFormat</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<name>dstFormat</name> <operator>!=</operator> <name>AV_PIX_FMT_RGBA64LE</name> <operator>&amp;&amp;</operator>

<name>dstFormat</name> <operator>!=</operator> <name>AV_PIX_FMT_RGBA64BE</name> <operator>&amp;&amp;</operator>

<name>dstFormat</name> <operator>!=</operator> <name>AV_PIX_FMT_BGRA64LE</name> <operator>&amp;&amp;</operator>

<name>dstFormat</name> <operator>!=</operator> <name>AV_PIX_FMT_BGRA64BE</name> <operator>&amp;&amp;</operator>

<name>dstFormat</name> <operator>!=</operator> <name>AV_PIX_FMT_RGB48LE</name> <operator>&amp;&amp;</operator>

<name>dstFormat</name> <operator>!=</operator> <name>AV_PIX_FMT_RGB48BE</name> <operator>&amp;&amp;</operator>

<name>dstFormat</name> <operator>!=</operator> <name>AV_PIX_FMT_BGR48LE</name> <operator>&amp;&amp;</operator>

<name>dstFormat</name> <operator>!=</operator> <name>AV_PIX_FMT_BGR48BE</name> <operator>&amp;&amp;</operator>

<name>dstFormat</name> <operator>!=</operator> <name>AV_PIX_FMT_RGBA</name> <operator>&amp;&amp;</operator>

<name>dstFormat</name> <operator>!=</operator> <name>AV_PIX_FMT_ARGB</name> <operator>&amp;&amp;</operator>

<name>dstFormat</name> <operator>!=</operator> <name>AV_PIX_FMT_BGRA</name> <operator>&amp;&amp;</operator>

<name>dstFormat</name> <operator>!=</operator> <name>AV_PIX_FMT_ABGR</name> <operator>&amp;&amp;</operator>

<name>dstFormat</name> <operator>!=</operator> <name>AV_PIX_FMT_RGB24</name> <operator>&amp;&amp;</operator>

<name>dstFormat</name> <operator>!=</operator> <name>AV_PIX_FMT_BGR24</name> <operator>&amp;&amp;</operator>

<name>dstFormat</name> <operator>!=</operator> <name>AV_PIX_FMT_BGR4_BYTE</name> <operator>&amp;&amp;</operator>

<name>dstFormat</name> <operator>!=</operator> <name>AV_PIX_FMT_RGB4_BYTE</name> <operator>&amp;&amp;</operator>

<name>dstFormat</name> <operator>!=</operator> <name>AV_PIX_FMT_BGR8</name> <operator>&amp;&amp;</operator>

<name>dstFormat</name> <operator>!=</operator> <name>AV_PIX_FMT_RGB8</name></expr>

)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,

<argument><expr><literal type="string">"full chroma interpolation for destination format '%s' not yet implemented\n"</literal></expr></argument>,

<argument><expr><call><name>av_get_pix_fmt_name</name><argument_list>(<argument><expr><name>dstFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>flags</name> <operator>&amp;=</operator> <operator>~</operator><name>SWS_FULL_CHR_H_INT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>isAnyRGB</name><argument_list>(<argument><expr><name>dstFormat</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SWS_FULL_CHR_H_INT</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>chrDstHSubSample</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>vChrDrop</name></name> <operator>=</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SWS_SRC_V_CHR_DROP_MASK</name><operator>)</operator> <operator>&gt;&gt;</operator>

<name>SWS_SRC_V_CHR_DROP_SHIFT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>chrSrcVSubSample</name></name> <operator>+=</operator> <name><name>c</name><operator>-&gt;</operator><name>vChrDrop</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>isAnyRGB</name><argument_list>(<argument><expr><name>srcFormat</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SWS_FULL_CHR_H_INP</name><operator>)</operator> <operator>&amp;&amp;</operator>

<name>srcFormat</name> <operator>!=</operator> <name>AV_PIX_FMT_RGB8</name> <operator>&amp;&amp;</operator> <name>srcFormat</name> <operator>!=</operator> <name>AV_PIX_FMT_BGR8</name> <operator>&amp;&amp;</operator>

<name>srcFormat</name> <operator>!=</operator> <name>AV_PIX_FMT_RGB4</name> <operator>&amp;&amp;</operator> <name>srcFormat</name> <operator>!=</operator> <name>AV_PIX_FMT_BGR4</name> <operator>&amp;&amp;</operator>

<name>srcFormat</name> <operator>!=</operator> <name>AV_PIX_FMT_RGB4_BYTE</name> <operator>&amp;&amp;</operator> <name>srcFormat</name> <operator>!=</operator> <name>AV_PIX_FMT_BGR4_BYTE</name> <operator>&amp;&amp;</operator>

<name>srcFormat</name> <operator>!=</operator> <name>AV_PIX_FMT_GBRP9BE</name> <operator>&amp;&amp;</operator> <name>srcFormat</name> <operator>!=</operator> <name>AV_PIX_FMT_GBRP9LE</name> <operator>&amp;&amp;</operator>

<name>srcFormat</name> <operator>!=</operator> <name>AV_PIX_FMT_GBRP10BE</name> <operator>&amp;&amp;</operator> <name>srcFormat</name> <operator>!=</operator> <name>AV_PIX_FMT_GBRP10LE</name> <operator>&amp;&amp;</operator>

<name>srcFormat</name> <operator>!=</operator> <name>AV_PIX_FMT_GBRAP10BE</name> <operator>&amp;&amp;</operator> <name>srcFormat</name> <operator>!=</operator> <name>AV_PIX_FMT_GBRAP10LE</name> <operator>&amp;&amp;</operator>

<name>srcFormat</name> <operator>!=</operator> <name>AV_PIX_FMT_GBRP12BE</name> <operator>&amp;&amp;</operator> <name>srcFormat</name> <operator>!=</operator> <name>AV_PIX_FMT_GBRP12LE</name> <operator>&amp;&amp;</operator>

<name>srcFormat</name> <operator>!=</operator> <name>AV_PIX_FMT_GBRAP12BE</name> <operator>&amp;&amp;</operator> <name>srcFormat</name> <operator>!=</operator> <name>AV_PIX_FMT_GBRAP12LE</name> <operator>&amp;&amp;</operator>

<name>srcFormat</name> <operator>!=</operator> <name>AV_PIX_FMT_GBRP14BE</name> <operator>&amp;&amp;</operator> <name>srcFormat</name> <operator>!=</operator> <name>AV_PIX_FMT_GBRP14LE</name> <operator>&amp;&amp;</operator>

<name>srcFormat</name> <operator>!=</operator> <name>AV_PIX_FMT_GBRP16BE</name> <operator>&amp;&amp;</operator> <name>srcFormat</name> <operator>!=</operator> <name>AV_PIX_FMT_GBRP16LE</name> <operator>&amp;&amp;</operator>

<name>srcFormat</name> <operator>!=</operator> <name>AV_PIX_FMT_GBRAP16BE</name> <operator>&amp;&amp;</operator> <name>srcFormat</name> <operator>!=</operator> <name>AV_PIX_FMT_GBRAP16LE</name> <operator>&amp;&amp;</operator>

<operator>(</operator><operator>(</operator><name>dstW</name> <operator>&gt;&gt;</operator> <name><name>c</name><operator>-&gt;</operator><name>chrDstHSubSample</name></name><operator>)</operator> <operator>&lt;=</operator> <operator>(</operator><name>srcW</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>||</operator>

<operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SWS_FAST_BILINEAR</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>chrSrcHSubSample</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>chrSrcW</name></name> <operator>=</operator> <call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name>srcW</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>chrSrcHSubSample</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>chrSrcH</name></name> <operator>=</operator> <call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name>srcH</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>chrSrcVSubSample</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>chrDstW</name></name> <operator>=</operator> <call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name>dstW</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>chrDstHSubSample</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>chrDstH</name></name> <operator>=</operator> <call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name>dstH</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>chrDstVSubSample</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FF_ALLOCZ_OR_GOTO</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>formatConvBuffer</name></name></expr></argument>, <argument><expr><call><name>FFALIGN</name><argument_list>(<argument><expr><name>srcW</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">78</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>srcBpc</name></name> <operator>=</operator> <name><name>desc_src</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>depth</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>srcBpc</name></name> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>srcBpc</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>dstBpc</name></name> <operator>=</operator> <name><name>desc_dst</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>depth</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>dstBpc</name></name> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>dstBpc</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>isAnyRGB</name><argument_list>(<argument><expr><name>srcFormat</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>srcFormat</name> <operator>==</operator> <name>AV_PIX_FMT_PAL8</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>srcBpc</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>dstBpc</name></name> <operator>==</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>dst_stride</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>INLINE_MMXEXT</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>srcBpc</name></name> <operator>==</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>dstBpc</name></name> <operator>&lt;=</operator> <literal type="number">14</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>canMMXEXTBeUsed</name></name> <operator>=</operator> <name>dstW</name> <operator>&gt;=</operator> <name>srcW</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>dstW</name> <operator>&amp;</operator> <literal type="number">31</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<name><name>c</name><operator>-&gt;</operator><name>chrDstW</name></name> <operator>&gt;=</operator> <name><name>c</name><operator>-&gt;</operator><name>chrSrcW</name></name> <operator>&amp;&amp;</operator>

<operator>(</operator><name>srcW</name> <operator>&amp;</operator> <literal type="number">15</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>canMMXEXTBeUsed</name></name> <operator>&amp;&amp;</operator> <name>dstW</name> <operator>&gt;=</operator> <name>srcW</name> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>chrDstW</name></name> <operator>&gt;=</operator> <name><name>c</name><operator>-&gt;</operator><name>chrSrcW</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name>srcW</name> <operator>&amp;</operator> <literal type="number">15</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SWS_FAST_BILINEAR</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>SWS_PRINT_INFO</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>,

<argument><expr><literal type="string">"output width is not a multiple of 32 -&gt; no MMXEXT scaler\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>usesHFilter</name> <operator>||</operator> <call><name>isNBPS</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>srcFormat</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>is16BPS</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>srcFormat</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>isAnyRGB</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>srcFormat</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>canMMXEXTBeUsed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>canMMXEXTBeUsed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>chrXInc</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>c</name><operator>-&gt;</operator><name>chrSrcW</name></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>chrDstW</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>/</operator> <name><name>c</name><operator>-&gt;</operator><name>chrDstW</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>chrYInc</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>c</name><operator>-&gt;</operator><name>chrSrcH</name></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>chrDstH</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>/</operator> <name><name>c</name><operator>-&gt;</operator><name>chrDstH</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>SWS_FAST_BILINEAR</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>canMMXEXTBeUsed</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>lumXInc</name></name> <operator>+=</operator> <literal type="number">20</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>chrXInc</name></name> <operator>+=</operator> <literal type="number">20</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>INLINE_MMX</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>dstBpc</name></name> <operator>&lt;=</operator> <literal type="number">14</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>lumXInc</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><name>srcW</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>/</operator> <operator>(</operator><name>dstW</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator> <operator>-</operator> <literal type="number">20</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>chrXInc</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>chrSrcW</name></name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>/</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>chrDstW</name></name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator> <operator>-</operator> <literal type="number">20</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>gamma_value</name></name> <operator>=</operator> <literal type="number">2.2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>tmpFmt</name> <operator>=</operator> <name>AV_PIX_FMT_RGBA64LE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>unscaled</name> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>gamma_flag</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name>srcFormat</name> <operator>!=</operator> <name>tmpFmt</name> <operator>||</operator> <name>dstFormat</name> <operator>!=</operator> <name>tmpFmt</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c2</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>cascaded_context</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_image_alloc</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>cascaded_tmp</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>cascaded_tmpStride</name></name></expr></argument>,

<argument><expr><name>srcW</name></expr></argument>, <argument><expr><name>srcH</name></expr></argument>, <argument><expr><name>tmpFmt</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>cascaded_context</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>sws_getContext</name><argument_list>(<argument><expr><name>srcW</name></expr></argument>, <argument><expr><name>srcH</name></expr></argument>, <argument><expr><name>srcFormat</name></expr></argument>,

<argument><expr><name>srcW</name></expr></argument>, <argument><expr><name>srcH</name></expr></argument>, <argument><expr><name>tmpFmt</name></expr></argument>,

<argument><expr><name>flags</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>param</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>cascaded_context</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>cascaded_context</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>sws_getContext</name><argument_list>(<argument><expr><name>srcW</name></expr></argument>, <argument><expr><name>srcH</name></expr></argument>, <argument><expr><name>tmpFmt</name></expr></argument>,

<argument><expr><name>dstW</name></expr></argument>, <argument><expr><name>dstH</name></expr></argument>, <argument><expr><name>tmpFmt</name></expr></argument>,

<argument><expr><name>flags</name></expr></argument>, <argument><expr><name>srcFilter</name></expr></argument>, <argument><expr><name>dstFilter</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>param</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>cascaded_context</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>c2</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>cascaded_context</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c2</name><operator>-&gt;</operator><name>is_internal_gamma</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c2</name><operator>-&gt;</operator><name>gamma</name></name> <operator>=</operator> <call><name>alloc_gamma_tbl</name><argument_list>( <argument><expr><name><name>c</name><operator>-&gt;</operator><name>gamma_value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c2</name><operator>-&gt;</operator><name>inv_gamma</name></name> <operator>=</operator> <call><name>alloc_gamma_tbl</name><argument_list>(<argument><expr><literal type="number">1.f</literal><operator>/</operator><name><name>c</name><operator>-&gt;</operator><name>gamma_value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c2</name><operator>-&gt;</operator><name>gamma</name></name> <operator>||</operator> <operator>!</operator><name><name>c2</name><operator>-&gt;</operator><name>inv_gamma</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ff_free_filters</name><argument_list>(<argument><expr><name>c2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ff_init_filters</name><argument_list>(<argument><expr><name>c2</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>sws_freeContext</name><argument_list>(<argument><expr><name>c2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>cascaded_context</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>cascaded_context</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dstFormat</name> <operator>!=</operator> <name>tmpFmt</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_image_alloc</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>cascaded1_tmp</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>cascaded1_tmpStride</name></name></expr></argument>,

<argument><expr><name>dstW</name></expr></argument>, <argument><expr><name>dstH</name></expr></argument>, <argument><expr><name>tmpFmt</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>cascaded_context</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>sws_getContext</name><argument_list>(<argument><expr><name>dstW</name></expr></argument>, <argument><expr><name>dstH</name></expr></argument>, <argument><expr><name>tmpFmt</name></expr></argument>,

<argument><expr><name>dstW</name></expr></argument>, <argument><expr><name>dstH</name></expr></argument>, <argument><expr><name>dstFormat</name></expr></argument>,

<argument><expr><name>flags</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>param</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>cascaded_context</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>isBayer</name><argument_list>(<argument><expr><name>srcFormat</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>unscaled</name> <operator>||</operator>

<operator>(</operator><name>dstFormat</name> <operator>!=</operator> <name>AV_PIX_FMT_RGB24</name> <operator>&amp;&amp;</operator> <name>dstFormat</name> <operator>!=</operator> <name>AV_PIX_FMT_YUV420P</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>tmpFormat</name> <init>= <expr><name>AV_PIX_FMT_RGB24</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_image_alloc</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>cascaded_tmp</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>cascaded_tmpStride</name></name></expr></argument>,

<argument><expr><name>srcW</name></expr></argument>, <argument><expr><name>srcH</name></expr></argument>, <argument><expr><name>tmpFormat</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>cascaded_context</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>sws_getContext</name><argument_list>(<argument><expr><name>srcW</name></expr></argument>, <argument><expr><name>srcH</name></expr></argument>, <argument><expr><name>srcFormat</name></expr></argument>,

<argument><expr><name>srcW</name></expr></argument>, <argument><expr><name>srcH</name></expr></argument>, <argument><expr><name>tmpFormat</name></expr></argument>,

<argument><expr><name>flags</name></expr></argument>, <argument><expr><name>srcFilter</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>param</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>cascaded_context</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>cascaded_context</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>sws_getContext</name><argument_list>(<argument><expr><name>srcW</name></expr></argument>, <argument><expr><name>srcH</name></expr></argument>, <argument><expr><name>tmpFormat</name></expr></argument>,

<argument><expr><name>dstW</name></expr></argument>, <argument><expr><name>dstH</name></expr></argument>, <argument><expr><name>dstFormat</name></expr></argument>,

<argument><expr><name>flags</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>dstFilter</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>param</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>cascaded_context</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>unscaled</name> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>srcBpc</name></name> <operator>==</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <name>dstFormat</name> <operator>==</operator> <name>AV_PIX_FMT_GRAYF32</name></expr>)</condition><block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>uint2float_lut</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name>i</name> <operator>*</operator> <name>float_mult</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>srcFormat</name> <operator>==</operator> <name>AV_PIX_FMT_GRAYF32BE</name> <operator>||</operator> <name>srcFormat</name> <operator>==</operator> <name>AV_PIX_FMT_GRAYF32LE</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><operator>!</operator><name>unscaled</name> <operator>||</operator> <name>unscaled</name> <operator>&amp;&amp;</operator> <name>dstFormat</name> <operator>!=</operator> <name>srcFormat</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>srcFormat</name> <operator>!=</operator> <name>AV_PIX_FMT_GRAYF32</name> <operator>||</operator>

<name>dstFormat</name> <operator>!=</operator> <name>AV_PIX_FMT_GRAY8</name><operator>)</operator><operator>)</operator></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>srcBpc</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>CONFIG_SWSCALE_ALPHA</name> <operator>&amp;&amp;</operator> <call><name>isALPHA</name><argument_list>(<argument><expr><name>srcFormat</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isALPHA</name><argument_list>(<argument><expr><name>dstFormat</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>tmpFormat</name> <init>= <expr><call><name>alphaless_fmt</name><argument_list>(<argument><expr><name>srcFormat</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>tmpFormat</name> <operator>!=</operator> <name>AV_PIX_FMT_NONE</name> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>alphablend</name></name> <operator>!=</operator> <name>SWS_ALPHA_BLEND_NONE</name></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>unscaled</name> <operator>||</operator>

<name>dstFormat</name> <operator>!=</operator> <name>tmpFormat</name> <operator>||</operator>

<name>usesHFilter</name> <operator>||</operator> <name>usesVFilter</name> <operator>||</operator>

<name><name>c</name><operator>-&gt;</operator><name>srcRange</name></name> <operator>!=</operator> <name><name>c</name><operator>-&gt;</operator><name>dstRange</name></name></expr>

)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>cascaded_mainindex</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_image_alloc</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>cascaded_tmp</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>cascaded_tmpStride</name></name></expr></argument>,

<argument><expr><name>srcW</name></expr></argument>, <argument><expr><name>srcH</name></expr></argument>, <argument><expr><name>tmpFormat</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>cascaded_context</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>sws_alloc_set_opts</name><argument_list>(<argument><expr><name>srcW</name></expr></argument>, <argument><expr><name>srcH</name></expr></argument>, <argument><expr><name>srcFormat</name></expr></argument>,

<argument><expr><name>srcW</name></expr></argument>, <argument><expr><name>srcH</name></expr></argument>, <argument><expr><name>tmpFormat</name></expr></argument>,

<argument><expr><name>flags</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>param</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>cascaded_context</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>cascaded_context</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>alphablend</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>alphablend</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>sws_init_context</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>cascaded_context</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>cascaded_context</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>sws_alloc_set_opts</name><argument_list>(<argument><expr><name>srcW</name></expr></argument>, <argument><expr><name>srcH</name></expr></argument>, <argument><expr><name>tmpFormat</name></expr></argument>,

<argument><expr><name>dstW</name></expr></argument>, <argument><expr><name>dstH</name></expr></argument>, <argument><expr><name>dstFormat</name></expr></argument>,

<argument><expr><name>flags</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>param</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>cascaded_context</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>cascaded_context</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>srcRange</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>srcRange</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>cascaded_context</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>dstRange</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>dstRange</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>sws_init_context</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>cascaded_context</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>srcFilter</name></expr></argument> , <argument><expr><name>dstFilter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_MMAP</name> <operator>&amp;&amp;</operator> <name>HAVE_MPROTECT</name> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MAP_ANONYMOUS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_MMAP</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_MMAP</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_MMXEXT_INLINE</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>canMMXEXTBeUsed</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SWS_FAST_BILINEAR</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>lumMmxextFilterCodeSize</name></name> <operator>=</operator> <call><name>ff_init_hscaler_mmxext</name><argument_list>(<argument><expr><name>dstW</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>lumXInc</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>chrMmxextFilterCodeSize</name></name> <operator>=</operator> <call><name>ff_init_hscaler_mmxext</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>chrDstW</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>chrXInc</name></name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_MMAP</name></expr></cpp:if>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>lumMmxextFilterCode</name></name> <operator>=</operator> <call><name>mmap</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>lumMmxextFilterCodeSize</name></name></expr></argument>,

<argument><expr><name>PROT_READ</name> <operator>|</operator> <name>PROT_WRITE</name></expr></argument>,

<argument><expr><name>MAP_PRIVATE</name> <operator>|</operator> <name>MAP_ANONYMOUS</name></expr></argument>,

<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>chrMmxextFilterCode</name></name> <operator>=</operator> <call><name>mmap</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>chrMmxextFilterCodeSize</name></name></expr></argument>,

<argument><expr><name>PROT_READ</name> <operator>|</operator> <name>PROT_WRITE</name></expr></argument>,

<argument><expr><name>MAP_PRIVATE</name> <operator>|</operator> <name>MAP_ANONYMOUS</name></expr></argument>,

<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>HAVE_VIRTUALALLOC</name></expr></cpp:elif>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>lumMmxextFilterCode</name></name> <operator>=</operator> <call><name>VirtualAlloc</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name><name>c</name><operator>-&gt;</operator><name>lumMmxextFilterCodeSize</name></name></expr></argument>,

<argument><expr><name>MEM_COMMIT</name></expr></argument>,

<argument><expr><name>PAGE_EXECUTE_READWRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>chrMmxextFilterCode</name></name> <operator>=</operator> <call><name>VirtualAlloc</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name><name>c</name><operator>-&gt;</operator><name>chrMmxextFilterCodeSize</name></name></expr></argument>,

<argument><expr><name>MEM_COMMIT</name></expr></argument>,

<argument><expr><name>PAGE_EXECUTE_READWRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>lumMmxextFilterCode</name></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>lumMmxextFilterCodeSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>chrMmxextFilterCode</name></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>chrMmxextFilterCodeSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MAP_ANONYMOUS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>lumMmxextFilterCode</name></name> <operator>==</operator> <name>MAP_FAILED</name> <operator>||</operator> <name><name>c</name><operator>-&gt;</operator><name>chrMmxextFilterCode</name></name> <operator>==</operator> <name>MAP_FAILED</name></expr>)</condition><block type="pseudo"><block_content>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>lumMmxextFilterCode</name></name> <operator>||</operator> <operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>chrMmxextFilterCode</name></name></expr>)</condition>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to allocate MMX2FilterCode\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>FF_ALLOCZ_OR_GOTO</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>hLumFilter</name></name></expr></argument>, <argument><expr><operator>(</operator><name>dstW</name> <operator>/</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">8</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FF_ALLOCZ_OR_GOTO</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>hChrFilter</name></name></expr></argument>, <argument><expr><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>chrDstW</name></name> <operator>/</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">8</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FF_ALLOCZ_OR_GOTO</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>hLumFilterPos</name></name></expr></argument>, <argument><expr><operator>(</operator><name>dstW</name> <operator>/</operator> <literal type="number">2</literal> <operator>/</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">8</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FF_ALLOCZ_OR_GOTO</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>hChrFilterPos</name></name></expr></argument>, <argument><expr><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>chrDstW</name></name> <operator>/</operator> <literal type="number">2</literal> <operator>/</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">8</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_init_hscaler_mmxext</name><argument_list>( <argument><expr><name>dstW</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>lumXInc</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>lumMmxextFilterCode</name></name></expr></argument>,

<argument><expr><name><name>c</name><operator>-&gt;</operator><name>hLumFilter</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><name><name>c</name><operator>-&gt;</operator><name>hLumFilterPos</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_init_hscaler_mmxext</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>chrDstW</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>chrXInc</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>chrMmxextFilterCode</name></name></expr></argument>,

<argument><expr><name><name>c</name><operator>-&gt;</operator><name>hChrFilter</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><name><name>c</name><operator>-&gt;</operator><name>hChrFilterPos</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_MMAP</name></expr></cpp:if>

<if_stmt><if>if <condition>( <expr><call><name>mprotect</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>lumMmxextFilterCode</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>lumMmxextFilterCodeSize</name></name></expr></argument>, <argument><expr><name>PROT_EXEC</name> <operator>|</operator> <name>PROT_READ</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal>

<operator>||</operator> <call><name>mprotect</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>chrMmxextFilterCode</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>chrMmxextFilterCodeSize</name></name></expr></argument>, <argument><expr><name>PROT_EXEC</name> <operator>|</operator> <name>PROT_READ</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"mprotect failed, cannot use fast bilinear scaler\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if> <else>else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>filterAlign</name> <init>= <expr><ternary><condition><expr><call><name>X86_MMX</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> </then><else>:

<expr><ternary><condition><expr><call><name>PPC_ALTIVEC</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">8</literal></expr> </then><else>:

<expr><ternary><condition><expr><call><name>have_neon</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">8</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>initFilter</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>hLumFilter</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>hLumFilterPos</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>hLumFilterSize</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>lumXInc</name></name></expr></argument>,

<argument><expr><name>srcW</name></expr></argument>, <argument><expr><name>dstW</name></expr></argument>, <argument><expr><name>filterAlign</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">14</literal></expr></argument>,

<argument><expr><ternary><condition><expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SWS_BICUBLIN</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>flags</name> <operator>|</operator> <name>SWS_BICUBIC</name><operator>)</operator></expr> </then><else>: <expr><name>flags</name></expr></else></ternary></expr></argument>,

<argument><expr><name>cpu_flags</name></expr></argument>, <argument><expr><name><name>srcFilter</name><operator>-&gt;</operator><name>lumH</name></name></expr></argument>, <argument><expr><name><name>dstFilter</name><operator>-&gt;</operator><name>lumH</name></name></expr></argument>,

<argument><expr><name><name>c</name><operator>-&gt;</operator><name>param</name></name></expr></argument>,

<argument><expr><call><name>get_local_pos</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>get_local_pos</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>initFilter</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>hChrFilter</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>hChrFilterPos</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>hChrFilterSize</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>chrXInc</name></name></expr></argument>,

<argument><expr><name><name>c</name><operator>-&gt;</operator><name>chrSrcW</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>chrDstW</name></name></expr></argument>, <argument><expr><name>filterAlign</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">14</literal></expr></argument>,

<argument><expr><ternary><condition><expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SWS_BICUBLIN</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>flags</name> <operator>|</operator> <name>SWS_BILINEAR</name><operator>)</operator></expr> </then><else>: <expr><name>flags</name></expr></else></ternary></expr></argument>,

<argument><expr><name>cpu_flags</name></expr></argument>, <argument><expr><name><name>srcFilter</name><operator>-&gt;</operator><name>chrH</name></name></expr></argument>, <argument><expr><name><name>dstFilter</name><operator>-&gt;</operator><name>chrH</name></name></expr></argument>,

<argument><expr><name><name>c</name><operator>-&gt;</operator><name>param</name></name></expr></argument>,

<argument><expr><call><name>get_local_pos</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>chrSrcHSubSample</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>src_h_chr_pos</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>get_local_pos</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>chrDstHSubSample</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>dst_h_chr_pos</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block> 

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>filterAlign</name> <init>= <expr><ternary><condition><expr><call><name>X86_MMX</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>:

<expr><ternary><condition><expr><call><name>PPC_ALTIVEC</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">8</literal></expr> </then><else>:

<expr><ternary><condition><expr><call><name>have_neon</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>initFilter</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>vLumFilter</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>vLumFilterPos</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>vLumFilterSize</name></name></expr></argument>,

<argument><expr><name><name>c</name><operator>-&gt;</operator><name>lumYInc</name></name></expr></argument>, <argument><expr><name>srcH</name></expr></argument>, <argument><expr><name>dstH</name></expr></argument>, <argument><expr><name>filterAlign</name></expr></argument>, <argument><expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">12</literal><operator>)</operator></expr></argument>,

<argument><expr><ternary><condition><expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SWS_BICUBLIN</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>flags</name> <operator>|</operator> <name>SWS_BICUBIC</name><operator>)</operator></expr> </then><else>: <expr><name>flags</name></expr></else></ternary></expr></argument>,

<argument><expr><name>cpu_flags</name></expr></argument>, <argument><expr><name><name>srcFilter</name><operator>-&gt;</operator><name>lumV</name></name></expr></argument>, <argument><expr><name><name>dstFilter</name><operator>-&gt;</operator><name>lumV</name></name></expr></argument>,

<argument><expr><name><name>c</name><operator>-&gt;</operator><name>param</name></name></expr></argument>,

<argument><expr><call><name>get_local_pos</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>get_local_pos</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>initFilter</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>vChrFilter</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>vChrFilterPos</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>vChrFilterSize</name></name></expr></argument>,

<argument><expr><name><name>c</name><operator>-&gt;</operator><name>chrYInc</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>chrSrcH</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>chrDstH</name></name></expr></argument>,

<argument><expr><name>filterAlign</name></expr></argument>, <argument><expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">12</literal><operator>)</operator></expr></argument>,

<argument><expr><ternary><condition><expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SWS_BICUBLIN</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>flags</name> <operator>|</operator> <name>SWS_BILINEAR</name><operator>)</operator></expr> </then><else>: <expr><name>flags</name></expr></else></ternary></expr></argument>,

<argument><expr><name>cpu_flags</name></expr></argument>, <argument><expr><name><name>srcFilter</name><operator>-&gt;</operator><name>chrV</name></name></expr></argument>, <argument><expr><name><name>dstFilter</name><operator>-&gt;</operator><name>chrV</name></name></expr></argument>,

<argument><expr><name><name>c</name><operator>-&gt;</operator><name>param</name></name></expr></argument>,

<argument><expr><call><name>get_local_pos</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>chrSrcVSubSample</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>src_v_chr_pos</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>get_local_pos</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>chrDstVSubSample</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>dst_v_chr_pos</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_ALTIVEC</name></expr></cpp:if>

<expr_stmt><expr><call><name>FF_ALLOC_OR_GOTO</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>vYCoeffsBank</name></name></expr></argument>, <argument><expr>sizeof<operator>(</operator><name>vector</name> <name>signed</name> <name>short</name><operator>)</operator> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>vLumFilterSize</name></name> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>dstH</name></name></expr></argument>, <argument><expr><name>fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FF_ALLOC_OR_GOTO</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>vCCoeffsBank</name></name></expr></argument>, <argument><expr>sizeof<operator>(</operator><name>vector</name> <name>signed</name> <name>short</name><operator>)</operator> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>vChrFilterSize</name></name> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>chrDstH</name></name></expr></argument>, <argument><expr><name>fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>vLumFilterSize</name></name> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>dstH</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>short</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>short</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>vYCoeffsBank</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>vLumFilter</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>vChrFilterSize</name></name> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>chrDstH</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>short</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>short</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>vCCoeffsBank</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>vChrFilter</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></for>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>FF_ALLOCZ_OR_GOTO</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>dither_error</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>dstW</name></name><operator>+</operator><literal type="number">2</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>needAlpha</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>CONFIG_SWSCALE_ALPHA</name> <operator>&amp;&amp;</operator> <call><name>isALPHA</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>srcFormat</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>isALPHA</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>dstFormat</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>uv_off</name></name> <operator>=</operator> <operator>(</operator><name>dst_stride</name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">64</literal> <operator>/</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>dstBpc</name></name> <operator>&amp;</operator><operator>~</operator> <literal type="number">7</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>uv_offx2</name></name> <operator>=</operator> <name>dst_stride</name> <operator>+</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>chrDstH</name></name> <operator>&lt;=</operator> <name>dstH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>SWS_PRINT_INFO</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>scaler</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cpucaps</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>scale_algorithms</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name><name>scale_algorithms</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>flag</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>scaler</name> <operator>=</operator> <name><name>scale_algorithms</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>description</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>scaler</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>scaler</name> <operator>=</operator> <literal type="string">"ehh flags invalid?!"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"%s scaler, from %s to %s%s "</literal></expr></argument>,

<argument><expr><name>scaler</name></expr></argument>,

<argument><expr><call><name>av_get_pix_fmt_name</name><argument_list>(<argument><expr><name>srcFormat</name></expr></argument>)</argument_list></call></expr></argument>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><ternary><condition><expr><call><name>defined</name><argument_list>(<argument><expr><name>DITHER1XBPP</name></expr></argument>)</argument_list></call></expr></condition></ternary></expr></cpp:if>
<argument><expr><ternary><condition><expr><name>dstFormat</name> <operator>==</operator> <name>AV_PIX_FMT_BGR555</name> <operator>||</operator> <name>dstFormat</name> <operator>==</operator> <name>AV_PIX_FMT_BGR565</name> <operator>||</operator>

<name>dstFormat</name> <operator>==</operator> <name>AV_PIX_FMT_RGB444BE</name> <operator>||</operator> <name>dstFormat</name> <operator>==</operator> <name>AV_PIX_FMT_RGB444LE</name> <operator>||</operator>

<name>dstFormat</name> <operator>==</operator> <name>AV_PIX_FMT_BGR444BE</name> <operator>||</operator> <name>dstFormat</name> <operator>==</operator> <name>AV_PIX_FMT_BGR444LE</name></expr> ?</condition><then>

<expr><literal type="string">"dithered "</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<argument><expr><literal type="string">""</literal></expr></argument>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<argument><expr><call><name>av_get_pix_fmt_name</name><argument_list>(<argument><expr><name>dstFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>INLINE_MMXEXT</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>cpucaps</name> <operator>=</operator> <literal type="string">"MMXEXT"</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>INLINE_AMD3DNOW</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>cpucaps</name> <operator>=</operator> <literal type="string">"3DNOW"</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>INLINE_MMX</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>cpucaps</name> <operator>=</operator> <literal type="string">"MMX"</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>PPC_ALTIVEC</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>cpucaps</name> <operator>=</operator> <literal type="string">"AltiVec"</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>cpucaps</name> <operator>=</operator> <literal type="string">"C"</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"using %s\n"</literal></expr></argument>, <argument><expr><name>cpucaps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"%dx%d -&gt; %dx%d\n"</literal></expr></argument>, <argument><expr><name>srcW</name></expr></argument>, <argument><expr><name>srcH</name></expr></argument>, <argument><expr><name>dstW</name></expr></argument>, <argument><expr><name>dstH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>,

<argument><expr><literal type="string">"lum srcW=%d srcH=%d dstW=%d dstH=%d xInc=%d yInc=%d\n"</literal></expr></argument>,

<argument><expr><name><name>c</name><operator>-&gt;</operator><name>srcW</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>srcH</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>dstW</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>dstH</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>lumXInc</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>lumYInc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>,

<argument><expr><literal type="string">"chr srcW=%d srcH=%d dstW=%d dstH=%d xInc=%d yInc=%d\n"</literal></expr></argument>,

<argument><expr><name><name>c</name><operator>-&gt;</operator><name>chrSrcW</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>chrSrcH</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>chrDstW</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>chrDstH</name></name></expr></argument>,

<argument><expr><name><name>c</name><operator>-&gt;</operator><name>chrXInc</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>chrYInc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>unscaled</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>usesHFilter</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>usesVFilter</name> <operator>&amp;&amp;</operator>

<name><name>c</name><operator>-&gt;</operator><name>alphablend</name></name> <operator>!=</operator> <name>SWS_ALPHA_BLEND_NONE</name> <operator>&amp;&amp;</operator>

<call><name>isALPHA</name><argument_list>(<argument><expr><name>srcFormat</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>srcRange</name></name> <operator>==</operator> <name><name>c</name><operator>-&gt;</operator><name>dstRange</name></name> <operator>||</operator> <call><name>isAnyRGB</name><argument_list>(<argument><expr><name>dstFormat</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>

<call><name>alphaless_fmt</name><argument_list>(<argument><expr><name>srcFormat</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>dstFormat</name></expr>

)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>swscale</name></name> <operator>=</operator> <name>ff_sws_alphablendaway</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>SWS_PRINT_INFO</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>,

<argument><expr><literal type="string">"using alpha blendaway %s -&gt; %s special converter\n"</literal></expr></argument>,

<argument><expr><call><name>av_get_pix_fmt_name</name><argument_list>(<argument><expr><name>srcFormat</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>av_get_pix_fmt_name</name><argument_list>(<argument><expr><name>dstFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>unscaled</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>usesHFilter</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>usesVFilter</name> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>srcRange</name></name> <operator>==</operator> <name><name>c</name><operator>-&gt;</operator><name>dstRange</name></name> <operator>||</operator> <call><name>isAnyRGB</name><argument_list>(<argument><expr><name>dstFormat</name></expr></argument>)</argument_list></call> <operator>||</operator>

<call><name>isFloat</name><argument_list>(<argument><expr><name>srcFormat</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>isFloat</name><argument_list>(<argument><expr><name>dstFormat</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>ff_get_unscaled_swscale</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>swscale</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>SWS_PRINT_INFO</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>,

<argument><expr><literal type="string">"using unscaled %s -&gt; %s special converter\n"</literal></expr></argument>,

<argument><expr><call><name>av_get_pix_fmt_name</name><argument_list>(<argument><expr><name>srcFormat</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>av_get_pix_fmt_name</name><argument_list>(<argument><expr><name>dstFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>swscale</name></name> <operator>=</operator> <call><name>ff_getSwsFunc</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>ff_init_filters</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return>

<label><name>fail</name>:</label> 

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>RETCODE_USE_CASCADE</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>tmpW</name> <init>= <expr><call><name>sqrt</name><argument_list>(<argument><expr><name>srcW</name> <operator>*</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name>dstW</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tmpH</name> <init>= <expr><call><name>sqrt</name><argument_list>(<argument><expr><name>srcH</name> <operator>*</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name>dstH</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>tmpFormat</name> <init>= <expr><name>AV_PIX_FMT_YUV420P</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>isALPHA</name><argument_list>(<argument><expr><name>srcFormat</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>tmpFormat</name> <operator>=</operator> <name>AV_PIX_FMT_YUVA420P</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>srcW</name><operator>*</operator><operator>(</operator><name>int64_t</name><operator>)</operator><name>srcH</name> <operator>&lt;=</operator> <literal type="number">4LL</literal><operator>*</operator><name>dstW</name><operator>*</operator><name>dstH</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_image_alloc</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>cascaded_tmp</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>cascaded_tmpStride</name></name></expr></argument>,

<argument><expr><name>tmpW</name></expr></argument>, <argument><expr><name>tmpH</name></expr></argument>, <argument><expr><name>tmpFormat</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>cascaded_context</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>sws_getContext</name><argument_list>(<argument><expr><name>srcW</name></expr></argument>, <argument><expr><name>srcH</name></expr></argument>, <argument><expr><name>srcFormat</name></expr></argument>,

<argument><expr><name>tmpW</name></expr></argument>, <argument><expr><name>tmpH</name></expr></argument>, <argument><expr><name>tmpFormat</name></expr></argument>,

<argument><expr><name>flags</name></expr></argument>, <argument><expr><name>srcFilter</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>param</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>cascaded_context</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>cascaded_context</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>sws_getContext</name><argument_list>(<argument><expr><name>tmpW</name></expr></argument>, <argument><expr><name>tmpH</name></expr></argument>, <argument><expr><name>tmpFormat</name></expr></argument>,

<argument><expr><name>dstW</name></expr></argument>, <argument><expr><name>dstH</name></expr></argument>, <argument><expr><name>dstFormat</name></expr></argument>,

<argument><expr><name>flags</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>dstFilter</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>param</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>cascaded_context</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>SwsContext</name> <modifier>*</modifier></type><name>sws_alloc_set_opts</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>srcW</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcH</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>srcFormat</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>dstW</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dstH</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>dstFormat</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>double</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>c</name> <operator>=</operator> <call><name>sws_alloc_context</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>srcW</name></name> <operator>=</operator> <name>srcW</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>srcH</name></name> <operator>=</operator> <name>srcH</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>dstW</name></name> <operator>=</operator> <name>dstW</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>dstH</name></name> <operator>=</operator> <name>dstH</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>srcFormat</name></name> <operator>=</operator> <name>srcFormat</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>dstFormat</name></name> <operator>=</operator> <name>dstFormat</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>param</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>param</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>param</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>param</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>param</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>c</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>SwsContext</name> <modifier>*</modifier></type><name>sws_getContext</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>srcW</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcH</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>srcFormat</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>dstW</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dstH</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>dstFormat</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>SwsFilter</name> <modifier>*</modifier></type><name>srcFilter</name></decl></parameter>,

<parameter><decl><type><name>SwsFilter</name> <modifier>*</modifier></type><name>dstFilter</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>double</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>sws_alloc_set_opts</name><argument_list>(<argument><expr><name>srcW</name></expr></argument>, <argument><expr><name>srcH</name></expr></argument>, <argument><expr><name>srcFormat</name></expr></argument>,

<argument><expr><name>dstW</name></expr></argument>, <argument><expr><name>dstH</name></expr></argument>, <argument><expr><name>dstFormat</name></expr></argument>,

<argument><expr><name>flags</name></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>c</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>sws_init_context</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>srcFilter</name></expr></argument>, <argument><expr><name>dstFilter</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>sws_freeContext</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>c</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>isnan_vec</name><parameter_list>(<parameter><decl><type><name>SwsVector</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>a</name><operator>-&gt;</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>isnan</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>coeff</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>makenan_vec</name><parameter_list>(<parameter><decl><type><name>SwsVector</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>a</name><operator>-&gt;</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>coeff</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NAN</name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><name>SwsFilter</name> <modifier>*</modifier></type><name>sws_getDefaultFilter</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>lumaGBlur</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>chromaGBlur</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>lumaSharpen</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>chromaSharpen</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>chromaHShift</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>chromaVShift</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>verbose</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>SwsFilter</name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><call><name>av_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SwsFilter</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>filter</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>lumaGBlur</name> <operator>!=</operator> <literal type="number">0.0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>lumH</name></name> <operator>=</operator> <call><name>sws_getGaussianVec</name><argument_list>(<argument><expr><name>lumaGBlur</name></expr></argument>, <argument><expr><literal type="number">3.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>lumV</name></name> <operator>=</operator> <call><name>sws_getGaussianVec</name><argument_list>(<argument><expr><name>lumaGBlur</name></expr></argument>, <argument><expr><literal type="number">3.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>lumH</name></name> <operator>=</operator> <call><name>sws_getIdentityVec</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>lumV</name></name> <operator>=</operator> <call><name>sws_getIdentityVec</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>chromaGBlur</name> <operator>!=</operator> <literal type="number">0.0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>chrH</name></name> <operator>=</operator> <call><name>sws_getGaussianVec</name><argument_list>(<argument><expr><name>chromaGBlur</name></expr></argument>, <argument><expr><literal type="number">3.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>chrV</name></name> <operator>=</operator> <call><name>sws_getGaussianVec</name><argument_list>(<argument><expr><name>chromaGBlur</name></expr></argument>, <argument><expr><literal type="number">3.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>chrH</name></name> <operator>=</operator> <call><name>sws_getIdentityVec</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>chrV</name></name> <operator>=</operator> <call><name>sws_getIdentityVec</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>filter</name><operator>-&gt;</operator><name>lumH</name></name> <operator>||</operator> <operator>!</operator><name><name>filter</name><operator>-&gt;</operator><name>lumV</name></name> <operator>||</operator> <operator>!</operator><name><name>filter</name><operator>-&gt;</operator><name>chrH</name></name> <operator>||</operator> <operator>!</operator><name><name>filter</name><operator>-&gt;</operator><name>chrV</name></name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>chromaSharpen</name> <operator>!=</operator> <literal type="number">0.0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>SwsVector</name> <modifier>*</modifier></type><name>id</name> <init>= <expr><call><name>sws_getIdentityVec</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>id</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>sws_scaleVec</name><argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>chrH</name></name></expr></argument>, <argument><expr><operator>-</operator><name>chromaSharpen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sws_scaleVec</name><argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>chrV</name></name></expr></argument>, <argument><expr><operator>-</operator><name>chromaSharpen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sws_addVec</name><argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>chrH</name></name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sws_addVec</name><argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>chrV</name></name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sws_freeVec</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>lumaSharpen</name> <operator>!=</operator> <literal type="number">0.0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>SwsVector</name> <modifier>*</modifier></type><name>id</name> <init>= <expr><call><name>sws_getIdentityVec</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>id</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>sws_scaleVec</name><argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>lumH</name></name></expr></argument>, <argument><expr><operator>-</operator><name>lumaSharpen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sws_scaleVec</name><argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>lumV</name></name></expr></argument>, <argument><expr><operator>-</operator><name>lumaSharpen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sws_addVec</name><argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>lumH</name></name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sws_addVec</name><argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>lumV</name></name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sws_freeVec</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>chromaHShift</name> <operator>!=</operator> <literal type="number">0.0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>sws_shiftVec</name><argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>chrH</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>chromaHShift</name> <operator>+</operator> <literal type="number">0.5</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>chromaVShift</name> <operator>!=</operator> <literal type="number">0.0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>sws_shiftVec</name><argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>chrV</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>chromaVShift</name> <operator>+</operator> <literal type="number">0.5</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>sws_normalizeVec</name><argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>chrH</name></name></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sws_normalizeVec</name><argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>chrV</name></name></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sws_normalizeVec</name><argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>lumH</name></name></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sws_normalizeVec</name><argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>lumV</name></name></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>isnan_vec</name><argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>chrH</name></name></expr></argument>)</argument_list></call> <operator>||</operator>

<call><name>isnan_vec</name><argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>chrV</name></name></expr></argument>)</argument_list></call> <operator>||</operator>

<call><name>isnan_vec</name><argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>lumH</name></name></expr></argument>)</argument_list></call> <operator>||</operator>

<call><name>isnan_vec</name><argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>lumV</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>verbose</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>sws_printVec2</name><argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>chrH</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>verbose</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>sws_printVec2</name><argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>lumH</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>filter</name></expr>;</return>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>sws_freeVec</name><argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>lumH</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sws_freeVec</name><argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>lumV</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sws_freeVec</name><argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>chrH</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sws_freeVec</name><argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>chrV</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>SwsVector</name> <modifier>*</modifier></type><name>sws_allocVec</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>SwsVector</name> <modifier>*</modifier></type><name>vec</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>length</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>length</name> <operator>&gt;</operator> <name>INT_MAX</name><operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>vec</name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SwsVector</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>vec</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>vec</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <name>length</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vec</name><operator>-&gt;</operator><name>coeff</name></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>vec</name><operator>-&gt;</operator><name>coeff</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>vec</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>SwsVector</name> <modifier>*</modifier></type><name>sws_getGaussianVec</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>variance</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>quality</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>length</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>variance</name> <operator>*</operator> <name>quality</name> <operator>+</operator> <literal type="number">0.5</literal><operator>)</operator> <operator>|</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>middle</name> <init>= <expr><operator>(</operator><name>length</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">0.5</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SwsVector</name> <modifier>*</modifier></type><name>vec</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>variance</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>quality</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>vec</name> <operator>=</operator> <call><name>sws_allocVec</name><argument_list>(<argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>vec</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>length</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>dist</name> <init>= <expr><name>i</name> <operator>-</operator> <name>middle</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>vec</name><operator>-&gt;</operator><name>coeff</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>exp</name><argument_list>(<argument><expr><operator>-</operator><name>dist</name> <operator>*</operator> <name>dist</name> <operator>/</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>variance</name> <operator>*</operator> <name>variance</name><operator>)</operator></expr></argument>)</argument_list></call> <operator>/</operator>

<call><name>sqrt</name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>*</operator> <name>variance</name> <operator>*</operator> <name>M_PI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>sws_normalizeVec</name><argument_list>(<argument><expr><name>vec</name></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>vec</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>FF_API_SWS_VECTOR</name></expr></cpp:if>

<function><type><specifier>static</specifier>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>SwsVector</name> <modifier>*</modifier></type><name>sws_getConstVec</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SwsVector</name> <modifier>*</modifier></type><name>vec</name> <init>= <expr><call><name>sws_allocVec</name><argument_list>(<argument><expr><name>length</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>vec</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>length</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>vec</name><operator>-&gt;</operator><name>coeff</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><name>vec</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>FF_API_SWS_VECTOR</name></expr></cpp:if>

<function><type><specifier>static</specifier>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>SwsVector</name> <modifier>*</modifier></type><name>sws_getIdentityVec</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>sws_getConstVec</name><argument_list>(<argument><expr><literal type="number">1.0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name></type> <name>sws_dcVec</name><parameter_list>(<parameter><decl><type><name>SwsVector</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>a</name><operator>-&gt;</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>sum</name> <operator>+=</operator> <name><name>a</name><operator>-&gt;</operator><name>coeff</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><name>sum</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>sws_scaleVec</name><parameter_list>(<parameter><decl><type><name>SwsVector</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>scalar</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>a</name><operator>-&gt;</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>coeff</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*=</operator> <name>scalar</name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>sws_normalizeVec</name><parameter_list>(<parameter><decl><type><name>SwsVector</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>height</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>sws_scaleVec</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>height</name> <operator>/</operator> <call><name>sws_dcVec</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_SWS_VECTOR</name></expr></cpp:if>

<function><type><specifier>static</specifier> <name>SwsVector</name> <modifier>*</modifier></type><name>sws_getConvVec</name><parameter_list>(<parameter><decl><type><name>SwsVector</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>SwsVector</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>length</name> <init>= <expr><name><name>a</name><operator>-&gt;</operator><name>length</name></name> <operator>+</operator> <name><name>b</name><operator>-&gt;</operator><name>length</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SwsVector</name> <modifier>*</modifier></type><name>vec</name> <init>= <expr><call><name>sws_getConstVec</name><argument_list>(<argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>vec</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>a</name><operator>-&gt;</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>b</name><operator>-&gt;</operator><name>length</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>vec</name><operator>-&gt;</operator><name>coeff</name><index>[<expr><name>i</name> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>+=</operator> <name><name>a</name><operator>-&gt;</operator><name>coeff</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>b</name><operator>-&gt;</operator><name>coeff</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<return>return <expr><name>vec</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>SwsVector</name> <modifier>*</modifier></type><name>sws_sumVec</name><parameter_list>(<parameter><decl><type><name>SwsVector</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>SwsVector</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>length</name> <init>= <expr><call><name>FFMAX</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>length</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SwsVector</name> <modifier>*</modifier></type><name>vec</name> <init>= <expr><call><name>sws_getConstVec</name><argument_list>(<argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>vec</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>a</name><operator>-&gt;</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>vec</name><operator>-&gt;</operator><name>coeff</name><index>[<expr><name>i</name> <operator>+</operator> <operator>(</operator><name>length</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>length</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>]</index></name> <operator>+=</operator> <name><name>a</name><operator>-&gt;</operator><name>coeff</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>b</name><operator>-&gt;</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>vec</name><operator>-&gt;</operator><name>coeff</name><index>[<expr><name>i</name> <operator>+</operator> <operator>(</operator><name>length</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <operator>(</operator><name><name>b</name><operator>-&gt;</operator><name>length</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>]</index></name> <operator>+=</operator> <name><name>b</name><operator>-&gt;</operator><name>coeff</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><name>vec</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_SWS_VECTOR</name></expr></cpp:if>

<function><type><specifier>static</specifier> <name>SwsVector</name> <modifier>*</modifier></type><name>sws_diffVec</name><parameter_list>(<parameter><decl><type><name>SwsVector</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>SwsVector</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>length</name> <init>= <expr><call><name>FFMAX</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>length</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SwsVector</name> <modifier>*</modifier></type><name>vec</name> <init>= <expr><call><name>sws_getConstVec</name><argument_list>(<argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>vec</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>a</name><operator>-&gt;</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>vec</name><operator>-&gt;</operator><name>coeff</name><index>[<expr><name>i</name> <operator>+</operator> <operator>(</operator><name>length</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>length</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>]</index></name> <operator>+=</operator> <name><name>a</name><operator>-&gt;</operator><name>coeff</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>b</name><operator>-&gt;</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>vec</name><operator>-&gt;</operator><name>coeff</name><index>[<expr><name>i</name> <operator>+</operator> <operator>(</operator><name>length</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <operator>(</operator><name><name>b</name><operator>-&gt;</operator><name>length</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>]</index></name> <operator>-=</operator> <name><name>b</name><operator>-&gt;</operator><name>coeff</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><name>vec</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>SwsVector</name> <modifier>*</modifier></type><name>sws_getShiftedVec</name><parameter_list>(<parameter><decl><type><name>SwsVector</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>shift</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>length</name> <init>= <expr><name><name>a</name><operator>-&gt;</operator><name>length</name></name> <operator>+</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name>shift</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SwsVector</name> <modifier>*</modifier></type><name>vec</name> <init>= <expr><call><name>sws_getConstVec</name><argument_list>(<argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>vec</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>a</name><operator>-&gt;</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>vec</name><operator>-&gt;</operator><name>coeff</name><index>[<expr><name>i</name> <operator>+</operator> <operator>(</operator><name>length</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator>

<operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>length</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>shift</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>coeff</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>vec</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>FF_API_SWS_VECTOR</name></expr></cpp:if>

<function><type><specifier>static</specifier>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>void</name></type> <name>sws_shiftVec</name><parameter_list>(<parameter><decl><type><name>SwsVector</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>shift</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>SwsVector</name> <modifier>*</modifier></type><name>shifted</name> <init>= <expr><call><name>sws_getShiftedVec</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>shift</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>shifted</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>makenan_vec</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>coeff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>coeff</name></name> <operator>=</operator> <name><name>shifted</name><operator>-&gt;</operator><name>coeff</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <name><name>shifted</name><operator>-&gt;</operator><name>length</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>shifted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>FF_API_SWS_VECTOR</name></expr></cpp:if>

<function><type><specifier>static</specifier>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>void</name></type> <name>sws_addVec</name><parameter_list>(<parameter><decl><type><name>SwsVector</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>SwsVector</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>SwsVector</name> <modifier>*</modifier></type><name>sum</name> <init>= <expr><call><name>sws_sumVec</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sum</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>makenan_vec</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>coeff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>coeff</name></name> <operator>=</operator> <name><name>sum</name><operator>-&gt;</operator><name>coeff</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <name><name>sum</name><operator>-&gt;</operator><name>length</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>sum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_SWS_VECTOR</name></expr></cpp:if>

<function><type><name>void</name></type> <name>sws_subVec</name><parameter_list>(<parameter><decl><type><name>SwsVector</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>SwsVector</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>SwsVector</name> <modifier>*</modifier></type><name>diff</name> <init>= <expr><call><name>sws_diffVec</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>diff</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>makenan_vec</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>coeff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>coeff</name></name> <operator>=</operator> <name><name>diff</name><operator>-&gt;</operator><name>coeff</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <name><name>diff</name><operator>-&gt;</operator><name>length</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>diff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>sws_convVec</name><parameter_list>(<parameter><decl><type><name>SwsVector</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>SwsVector</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>SwsVector</name> <modifier>*</modifier></type><name>conv</name> <init>= <expr><call><name>sws_getConvVec</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>conv</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>makenan_vec</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>coeff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>coeff</name></name> <operator>=</operator> <name><name>conv</name><operator>-&gt;</operator><name>coeff</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <name><name>conv</name><operator>-&gt;</operator><name>length</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>conv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>SwsVector</name> <modifier>*</modifier></type><name>sws_cloneVec</name><parameter_list>(<parameter><decl><type><name>SwsVector</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>SwsVector</name> <modifier>*</modifier></type><name>vec</name> <init>= <expr><call><name>sws_allocVec</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>vec</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>vec</name><operator>-&gt;</operator><name>coeff</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>coeff</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>length</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>a</name><operator>-&gt;</operator><name>coeff</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>vec</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>FF_API_SWS_VECTOR</name></expr></cpp:if>

<function><type><specifier>static</specifier>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>void</name></type> <name>sws_printVec2</name><parameter_list>(<parameter><decl><type><name>SwsVector</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>AVClass</name> <modifier>*</modifier></type><name>log_ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>log_level</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>max</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>min</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>range</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>a</name><operator>-&gt;</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>coeff</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name>max</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>max</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>coeff</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>a</name><operator>-&gt;</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>coeff</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <name>min</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>min</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>coeff</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><name>range</name> <operator>=</operator> <name>max</name> <operator>-</operator> <name>min</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>a</name><operator>-&gt;</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>coeff</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name>min</name><operator>)</operator> <operator>*</operator> <literal type="number">60.0</literal> <operator>/</operator> <name>range</name> <operator>+</operator> <literal type="number">0.5</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>log_ctx</name></expr></argument>, <argument><expr><name>log_level</name></expr></argument>, <argument><expr><literal type="string">"%1.3f "</literal></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>coeff</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>x</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>x</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>log_ctx</name></expr></argument>, <argument><expr><name>log_level</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>log_ctx</name></expr></argument>, <argument><expr><name>log_level</name></expr></argument>, <argument><expr><literal type="string">"|\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>sws_freeVec</name><parameter_list>(<parameter><decl><type><name>SwsVector</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>a</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>coeff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>sws_freeFilter</name><parameter_list>(<parameter><decl><type><name>SwsFilter</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>filter</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>sws_freeVec</name><argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>lumH</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sws_freeVec</name><argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>lumV</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sws_freeVec</name><argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>chrH</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sws_freeVec</name><argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>chrV</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>sws_freeContext</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>c</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>dither_error</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>vLumFilter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>vChrFilter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>hLumFilter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>hChrFilter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_ALTIVEC</name></expr></cpp:if>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>vYCoeffsBank</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>vCCoeffsBank</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>vLumFilterPos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>vChrFilterPos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>hLumFilterPos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>hChrFilterPos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_MMX_INLINE</name></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_MMAP</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>lumMmxextFilterCode</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>munmap</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>lumMmxextFilterCode</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>lumMmxextFilterCodeSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>chrMmxextFilterCode</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>munmap</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>chrMmxextFilterCode</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>chrMmxextFilterCodeSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>HAVE_VIRTUALALLOC</name></expr></cpp:elif>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>lumMmxextFilterCode</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>VirtualFree</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>lumMmxextFilterCode</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>MEM_RELEASE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>chrMmxextFilterCode</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>VirtualFree</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>chrMmxextFilterCode</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>MEM_RELEASE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>lumMmxextFilterCode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>chrMmxextFilterCode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>lumMmxextFilterCode</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>chrMmxextFilterCode</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>yuvTable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>formatConvBuffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sws_freeContext</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>cascaded_context</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sws_freeContext</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>cascaded_context</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sws_freeContext</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>cascaded_context</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>cascaded_context</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>cascaded_context</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>cascaded_tmp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>cascaded1_tmp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>gamma</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>inv_gamma</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_free_filters</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name><name>struct</name> <name>SwsContext</name></name> <modifier>*</modifier></type><name>sws_getCachedContext</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SwsContext</name></name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcW</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>srcH</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>srcFormat</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>dstW</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dstH</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>dstFormat</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>,

<parameter><decl><type><name>SwsFilter</name> <modifier>*</modifier></type><name>srcFilter</name></decl></parameter>,

<parameter><decl><type><name>SwsFilter</name> <modifier>*</modifier></type><name>dstFilter</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>double</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>double</name></type> <name><name>default_param</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><name>SWS_PARAM_DEFAULT</name></expr>,

<expr><name>SWS_PARAM_DEFAULT</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>src_h_chr_pos</name> <init>= <expr><operator>-</operator><literal type="number">513</literal></expr></init></decl>, <decl><type ref="prev"/><name>dst_h_chr_pos</name> <init>= <expr><operator>-</operator><literal type="number">513</literal></expr></init></decl>,

<decl><type ref="prev"/><name>src_v_chr_pos</name> <init>= <expr><operator>-</operator><literal type="number">513</literal></expr></init></decl>, <decl><type ref="prev"/><name>dst_v_chr_pos</name> <init>= <expr><operator>-</operator><literal type="number">513</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>param</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>param</name> <operator>=</operator> <name>default_param</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>context</name> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>context</name><operator>-&gt;</operator><name>srcW</name></name> <operator>!=</operator> <name>srcW</name> <operator>||</operator>

<name><name>context</name><operator>-&gt;</operator><name>srcH</name></name> <operator>!=</operator> <name>srcH</name> <operator>||</operator>

<name><name>context</name><operator>-&gt;</operator><name>srcFormat</name></name> <operator>!=</operator> <name>srcFormat</name> <operator>||</operator>

<name><name>context</name><operator>-&gt;</operator><name>dstW</name></name> <operator>!=</operator> <name>dstW</name> <operator>||</operator>

<name><name>context</name><operator>-&gt;</operator><name>dstH</name></name> <operator>!=</operator> <name>dstH</name> <operator>||</operator>

<name><name>context</name><operator>-&gt;</operator><name>dstFormat</name></name> <operator>!=</operator> <name>dstFormat</name> <operator>||</operator>

<name><name>context</name><operator>-&gt;</operator><name>flags</name></name> <operator>!=</operator> <name>flags</name> <operator>||</operator>

<name><name>context</name><operator>-&gt;</operator><name>param</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name><name>param</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>||</operator>

<name><name>context</name><operator>-&gt;</operator><name>param</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name><name>param</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_opt_get_int</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"src_h_chr_pos"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>src_h_chr_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_opt_get_int</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"src_v_chr_pos"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>src_v_chr_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_opt_get_int</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"dst_h_chr_pos"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>dst_h_chr_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_opt_get_int</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"dst_v_chr_pos"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>dst_v_chr_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sws_freeContext</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>context</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>context</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>context</name> <operator>=</operator> <call><name>sws_alloc_context</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>srcW</name></name> <operator>=</operator> <name>srcW</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>srcH</name></name> <operator>=</operator> <name>srcH</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>srcFormat</name></name> <operator>=</operator> <name>srcFormat</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>dstW</name></name> <operator>=</operator> <name>dstW</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>dstH</name></name> <operator>=</operator> <name>dstH</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>dstFormat</name></name> <operator>=</operator> <name>dstFormat</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>param</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>param</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>param</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>param</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_opt_set_int</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"src_h_chr_pos"</literal></expr></argument>, <argument><expr><name>src_h_chr_pos</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_opt_set_int</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"src_v_chr_pos"</literal></expr></argument>, <argument><expr><name>src_v_chr_pos</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_opt_set_int</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"dst_h_chr_pos"</literal></expr></argument>, <argument><expr><name>dst_h_chr_pos</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_opt_set_int</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"dst_v_chr_pos"</literal></expr></argument>, <argument><expr><name>dst_v_chr_pos</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>sws_init_context</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>srcFilter</name></expr></argument>, <argument><expr><name>dstFilter</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>sws_freeContext</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>context</name></expr>;</return>

</block_content>}</block></function>

</unit>
