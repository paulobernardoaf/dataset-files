<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libswscale\gamma.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"swscale_internal.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>GammaContext</name>

<block>{

<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>table</name></decl>;</decl_stmt>

}</block></struct></type> <name>GammaContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>gamma_convert</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>SwsFilterDescriptor</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sliceY</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sliceH</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>GammaContext</name> <modifier>*</modifier></type><name>instance</name> <init>= <expr><name><name>desc</name><operator>-&gt;</operator><name>instance</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>table</name> <init>= <expr><name><name>instance</name><operator>-&gt;</operator><name>table</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>srcW</name> <init>= <expr><name><name>desc</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>width</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sliceH</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type> <name>src</name> <init>= <expr><name><name>desc</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>line</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>src_pos</name> <init>= <expr><name>sliceY</name><operator>+</operator><name>i</name> <operator>-</operator> <name><name>desc</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>sliceY</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>src1</name> <init>= <expr><operator>(</operator><name>uint16_t</name><operator>*</operator><operator>)</operator><operator>*</operator><operator>(</operator><name>src</name><operator>+</operator><name>src_pos</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>srcW</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>r</name> <init>= <expr><call><name>AV_RL16</name><argument_list>(<argument><expr><name>src1</name> <operator>+</operator> <name>j</name><operator>*</operator><literal type="number">4</literal> <operator>+</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>g</name> <init>= <expr><call><name>AV_RL16</name><argument_list>(<argument><expr><name>src1</name> <operator>+</operator> <name>j</name><operator>*</operator><literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>b</name> <init>= <expr><call><name>AV_RL16</name><argument_list>(<argument><expr><name>src1</name> <operator>+</operator> <name>j</name><operator>*</operator><literal type="number">4</literal> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AV_WL16</name><argument_list>(<argument><expr><name>src1</name> <operator>+</operator> <name>j</name><operator>*</operator><literal type="number">4</literal> <operator>+</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name><name>table</name><index>[<expr><name>r</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WL16</name><argument_list>(<argument><expr><name>src1</name> <operator>+</operator> <name>j</name><operator>*</operator><literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>table</name><index>[<expr><name>g</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WL16</name><argument_list>(<argument><expr><name>src1</name> <operator>+</operator> <name>j</name><operator>*</operator><literal type="number">4</literal> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name><name>table</name><index>[<expr><name>b</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<return>return <expr><name>sliceH</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_init_gamma_convert</name><parameter_list>(<parameter><decl><type><name>SwsFilterDescriptor</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>SwsSlice</name> <modifier>*</modifier></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>table</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>GammaContext</name> <modifier>*</modifier></type><name>li</name> <init>= <expr><call><name>av_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GammaContext</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>li</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>li</name><operator>-&gt;</operator><name>table</name></name> <operator>=</operator> <name>table</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>instance</name></name> <operator>=</operator> <name>li</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>src</name></name> <operator>=</operator> <name>src</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>process</name></name> <operator>=</operator> <operator>&amp;</operator><name>gamma_convert</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
