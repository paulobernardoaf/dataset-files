<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libswscale\ppc\swscale_altivec.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libswscale/swscale.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libswscale/swscale_internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/cpu.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"yuv2rgb_altivec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/ppc/util_altivec.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_ALTIVEC</name></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_BIGENDIAN</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vzero</name></cpp:macro> <cpp:value>vec_splat_s32(0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_LS</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{vector signed short l2 = vec_ld(((b) &lt;&lt; 1) + 16, s);ls = vec_perm(a, l2, c);a = l2;}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yuv2planeX_8</name><parameter_list>(<parameter><type><name>d1</name></type></parameter>, <parameter><type><name>d2</name></type></parameter>, <parameter><type><name>l1</name></type></parameter>, <parameter><type><name>src</name></type></parameter>, <parameter><type><name>x</name></type></parameter>, <parameter><type><name>perm</name></type></parameter>, <parameter><type><name>filter</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {vector signed short ls;vector signed int vf1, vf2, i1, i2;GET_LS(l1, x, perm, src);i1 = vec_mule(filter, ls);i2 = vec_mulo(filter, ls);vf1 = vec_mergeh(i1, i2);vf2 = vec_mergel(i1, i2);d1 = vec_add(d1, vf1);d2 = vec_add(d2, vf2);} while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOAD_FILTER</name><parameter_list>(<parameter><type><name>vf</name></type></parameter>,<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{vector unsigned char perm0 = vec_lvsl(joffset, f);vf = vec_ld(joffset, f);vf = vec_perm(vf, vf, perm0);}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOAD_L1</name><parameter_list>(<parameter><type><name>ll1</name></type></parameter>,<parameter><type><name>s</name></type></parameter>,<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>{p = vec_lvsl(xoffset, s);ll1 = vec_ld(xoffset, s);}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_VF4</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>vf</name></type></parameter>, <parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{vf = vec_ld(a&lt;&lt; 3, f);if ((a &lt;&lt; 3) % 16)vf = vec_mergel(vf, (vector signed short)vzero);elsevf = vec_mergeh(vf, (vector signed short)vzero);}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIRST_LOAD</name><parameter_list>(<parameter><type><name>sv</name></type></parameter>, <parameter><type><name>pos</name></type></parameter>, <parameter><type><name>s</name></type></parameter>, <parameter><type><name>per</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{sv = vec_ld(pos, s);per = vec_lvsl(pos, s);}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UPDATE_PTR</name><parameter_list>(<parameter><type><name>s0</name></type></parameter>, <parameter><type><name>d0</name></type></parameter>, <parameter><type><name>s1</name></type></parameter>, <parameter><type><name>d1</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{d0 = s0;d1 = s1;}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOAD_SRCV</name><parameter_list>(<parameter><type><name>pos</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>s</name></type></parameter>, <parameter><type><name>per</name></type></parameter>, <parameter><type><name>v0</name></type></parameter>, <parameter><type><name>v1</name></type></parameter>, <parameter><type><name>vf</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{v1 = vec_ld(pos + a + 16, s);vf = vec_perm(v0, v1, per);}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOAD_SRCV8</name><parameter_list>(<parameter><type><name>pos</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>s</name></type></parameter>, <parameter><type><name>per</name></type></parameter>, <parameter><type><name>v0</name></type></parameter>, <parameter><type><name>v1</name></type></parameter>, <parameter><type><name>vf</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{if ((((uintptr_t)s + pos) % 16) &gt; 8) {v1 = vec_ld(pos + a + 16, s);}vf = vec_perm(v0, src_v1, per);}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_VFD</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>f</name></type></parameter>, <parameter><type><name>vf0</name></type></parameter>, <parameter><type><name>vf1</name></type></parameter>, <parameter><type><name>per</name></type></parameter>, <parameter><type><name>vf</name></type></parameter>, <parameter><type><name>off</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{vf1 = vec_ld((a * 2 * filterSize) + (b * 2) + 16 + off, f);vf = vec_perm(vf0, vf1, per);}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUNC</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>name ##_altivec</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"swscale_ppc_template.c"</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>FUNC</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>vzero</name></cpp:undef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>output_pixel</name><parameter_list>(<parameter><type><name>pos</name></type></parameter>, <parameter><type><name>val</name></type></parameter>, <parameter><type><name>bias</name></type></parameter>, <parameter><type><name>signedness</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (big_endian) { AV_WB16(pos, bias + av_clip_ ##signedness ##16(val &gt;&gt; shift)); } else { AV_WL16(pos, bias + av_clip_ ##signedness ##16(val &gt;&gt; shift)); }</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>yuv2plane1_float_u</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dstW</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>big_endian</name> <init>= <expr><name>HAVE_BIGENDIAN</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>shift</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>float</name></type> <name>float_mult</name> <init>= <expr><literal type="number">1.0f</literal> <operator>/</operator> <literal type="number">65535.0f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>val</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>val_uint</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>start</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dstW</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name>val</name> <operator>=</operator> <name><name>src</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>shift</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>output_pixel</name><argument_list>(<argument><expr><operator>&amp;</operator><name>val_uint</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>uint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dest</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>float_mult</name> <operator>*</operator> <operator>(</operator><name>float</name><operator>)</operator><name>val_uint</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>yuv2plane1_float_bswap_u</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dstW</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>big_endian</name> <init>= <expr><name>HAVE_BIGENDIAN</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>shift</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>float</name></type> <name>float_mult</name> <init>= <expr><literal type="number">1.0f</literal> <operator>/</operator> <literal type="number">65535.0f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>val</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>val_uint</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>start</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dstW</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name>val</name> <operator>=</operator> <name><name>src</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>shift</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>output_pixel</name><argument_list>(<argument><expr><operator>&amp;</operator><name>val_uint</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>uint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dest</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_bswap32</name><argument_list>(<argument><expr><call><name>av_float2int</name><argument_list>(<argument><expr><name>float_mult</name> <operator>*</operator> <operator>(</operator><name>float</name><operator>)</operator><name>val_uint</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>yuv2plane1_float_altivec</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dstW</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>dst_u</name> <init>= <expr><operator>-</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>dest</name> <operator>&amp;</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>shift</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>add</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>shift</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>clip</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>fmult</name> <init>= <expr><literal type="number">1.0f</literal> <operator>/</operator> <literal type="number">65535.0f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_u32</name></type> <name>vadd</name> <init>= <expr><operator>(</operator><name>vec_u32</name><operator>)</operator> <block>{<expr><name>add</name></expr>, <expr><name>add</name></expr>, <expr><name>add</name></expr>, <expr><name>add</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_u32</name></type> <name>vshift</name> <init>= <expr><operator>(</operator><name>vec_u32</name><operator>)</operator> <call><name>vec_splat_u32</name><argument_list>(<argument><expr><name>shift</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_u32</name></type> <name>vlargest</name> <init>= <expr><operator>(</operator><name>vec_u32</name><operator>)</operator> <block>{<expr><name>clip</name></expr>, <expr><name>clip</name></expr>, <expr><name>clip</name></expr>, <expr><name>clip</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_f</name></type> <name>vmul</name> <init>= <expr><operator>(</operator><name>vec_f</name><operator>)</operator> <block>{<expr><name>fmult</name></expr>, <expr><name>fmult</name></expr>, <expr><name>fmult</name></expr>, <expr><name>fmult</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_f</name></type> <name>vzero</name> <init>= <expr><operator>(</operator><name>vec_f</name><operator>)</operator> <block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vec_u32</name></type> <name>v</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vec_f</name></type> <name>vd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>yuv2plane1_float_u</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>dst_u</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>dst_u</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dstW</name> <operator>-</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>vec_ld</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>vadd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>vec_sr</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>vshift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>vec_min</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>vlargest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vd</name> <operator>=</operator> <call><name>vec_ctf</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vd</name> <operator>=</operator> <call><name>vec_madd</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><name>vmul</name></expr></argument>, <argument><expr><name>vzero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vec_st</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dest</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>yuv2plane1_float_u</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>dstW</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>yuv2plane1_float_bswap_altivec</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dstW</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>dst_u</name> <init>= <expr><operator>-</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>dest</name> <operator>&amp;</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>shift</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>add</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>shift</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>clip</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>fmult</name> <init>= <expr><literal type="number">1.0f</literal> <operator>/</operator> <literal type="number">65535.0f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_u32</name></type> <name>vadd</name> <init>= <expr><operator>(</operator><name>vec_u32</name><operator>)</operator> <block>{<expr><name>add</name></expr>, <expr><name>add</name></expr>, <expr><name>add</name></expr>, <expr><name>add</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_u32</name></type> <name>vshift</name> <init>= <expr><operator>(</operator><name>vec_u32</name><operator>)</operator> <call><name>vec_splat_u32</name><argument_list>(<argument><expr><name>shift</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_u32</name></type> <name>vlargest</name> <init>= <expr><operator>(</operator><name>vec_u32</name><operator>)</operator> <block>{<expr><name>clip</name></expr>, <expr><name>clip</name></expr>, <expr><name>clip</name></expr>, <expr><name>clip</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_f</name></type> <name>vmul</name> <init>= <expr><operator>(</operator><name>vec_f</name><operator>)</operator> <block>{<expr><name>fmult</name></expr>, <expr><name>fmult</name></expr>, <expr><name>fmult</name></expr>, <expr><name>fmult</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_f</name></type> <name>vzero</name> <init>= <expr><operator>(</operator><name>vec_f</name><operator>)</operator> <block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_u32</name></type> <name>vswapbig</name> <init>= <expr><operator>(</operator><name>vec_u32</name><operator>)</operator> <block>{<expr><literal type="number">16</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">16</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_u16</name></type> <name>vswapsmall</name> <init>= <expr><call><name>vec_splat_u16</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vec_u32</name></type> <name>v</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vec_f</name></type> <name>vd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>yuv2plane1_float_bswap_u</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>dst_u</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>dst_u</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dstW</name> <operator>-</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>vec_ld</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>vadd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>vec_sr</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>vshift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>vec_min</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>vlargest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vd</name> <operator>=</operator> <call><name>vec_ctf</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vd</name> <operator>=</operator> <call><name>vec_madd</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><name>vmul</name></expr></argument>, <argument><expr><name>vzero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vd</name> <operator>=</operator> <operator>(</operator><name>vec_f</name><operator>)</operator> <call><name>vec_rl</name><argument_list>(<argument><expr><operator>(</operator><name>vec_u32</name><operator>)</operator> <name>vd</name></expr></argument>, <argument><expr><name>vswapbig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vd</name> <operator>=</operator> <operator>(</operator><name>vec_f</name><operator>)</operator> <call><name>vec_rl</name><argument_list>(<argument><expr><operator>(</operator><name>vec_u16</name><operator>)</operator> <name>vd</name></expr></argument>, <argument><expr><name>vswapsmall</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vec_st</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>dest</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>yuv2plane1_float_bswap_u</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>dstW</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yuv2plane1_float</name><parameter_list>(<parameter><type><name>template</name></type></parameter>, <parameter><type><name>dest_type</name></type></parameter>, <parameter><type><name>BE_LE</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void yuv2plane1_float ##BE_LE ##_altivec(const int16_t *src, uint8_t *dest, int dstW, const uint8_t *dither, int offset) { template((const int32_t *)src, (dest_type *)dest, dstW); }</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_BIGENDIAN</name></expr></cpp:if>

<macro><name>yuv2plane1_float</name><argument_list>(<argument>yuv2plane1_float_altivec</argument>, <argument>float</argument>, <argument>BE</argument>)</argument_list></macro>

<macro><name>yuv2plane1_float</name><argument_list>(<argument>yuv2plane1_float_bswap_altivec</argument>, <argument>uint32_t</argument>, <argument>LE</argument>)</argument_list></macro>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<macro><name>yuv2plane1_float</name><argument_list>(<argument>yuv2plane1_float_altivec</argument>, <argument>float</argument>, <argument>LE</argument>)</argument_list></macro>

<macro><name>yuv2plane1_float</name><argument_list>(<argument>yuv2plane1_float_bswap_altivec</argument>, <argument>uint32_t</argument>, <argument>BE</argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><name>av_cold</name> <name>void</name></type> <name>ff_sws_init_swscale_ppc</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_ALTIVEC</name></expr></cpp:if>

<decl_stmt><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>dstFormat</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>dstFormat</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>av_get_cpu_flags</name><argument_list>()</argument_list></call> <operator>&amp;</operator> <name>AV_CPU_FLAG_ALTIVEC</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_BIGENDIAN</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>srcBpc</name></name> <operator>==</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>dstBpc</name></name> <operator>&lt;=</operator> <literal type="number">14</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>hyScale</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>hcScale</name></name> <operator>=</operator> <name>hScale_real_altivec</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is16BPS</name><argument_list>(<argument><expr><name>dstFormat</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isNBPS</name><argument_list>(<argument><expr><name>dstFormat</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isSemiPlanarYUV</name><argument_list>(<argument><expr><name>dstFormat</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<name>dstFormat</name> <operator>!=</operator> <name>AV_PIX_FMT_GRAYF32BE</name> <operator>&amp;&amp;</operator> <name>dstFormat</name> <operator>!=</operator> <name>AV_PIX_FMT_GRAYF32LE</name> <operator>&amp;&amp;</operator>

<operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>needAlpha</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>yuv2planeX</name></name> <operator>=</operator> <name>yuv2planeX_altivec</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>dstFormat</name> <operator>==</operator> <name>AV_PIX_FMT_GRAYF32BE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>yuv2plane1</name></name> <operator>=</operator> <name>yuv2plane1_floatBE_altivec</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>dstFormat</name> <operator>==</operator> <name>AV_PIX_FMT_GRAYF32LE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>yuv2plane1</name></name> <operator>=</operator> <name>yuv2plane1_floatLE_altivec</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>SWS_BITEXACT</name> <operator>|</operator> <name>SWS_FULL_CHR_H_INT</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>needAlpha</name></name></expr>)</condition> <block>{<block_content>

<switch>switch <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>dstFormat</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_PIX_FMT_ABGR</name></expr>:</case>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>yuv2packedX</name></name> <operator>=</operator> <name>ff_yuv2abgr_X_altivec</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_BGRA</name></expr>:</case>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>yuv2packedX</name></name> <operator>=</operator> <name>ff_yuv2bgra_X_altivec</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_ARGB</name></expr>:</case>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>yuv2packedX</name></name> <operator>=</operator> <name>ff_yuv2argb_X_altivec</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_RGBA</name></expr>:</case>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>yuv2packedX</name></name> <operator>=</operator> <name>ff_yuv2rgba_X_altivec</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_BGR24</name></expr>:</case>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>yuv2packedX</name></name> <operator>=</operator> <name>ff_yuv2bgr24_X_altivec</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_RGB24</name></expr>:</case>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>yuv2packedX</name></name> <operator>=</operator> <name>ff_yuv2rgb24_X_altivec</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<expr_stmt><expr><call><name>ff_sws_init_swscale_vsx</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
