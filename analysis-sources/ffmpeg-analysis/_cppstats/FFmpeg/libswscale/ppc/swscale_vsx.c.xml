<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libswscale\ppc\swscale_vsx.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libswscale/swscale.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libswscale/swscale_internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/cpu.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"yuv2rgb_altivec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/ppc/util_altivec.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_VSX</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vzero</name></cpp:macro> <cpp:value>vec_splat_s32(0)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>HAVE_BIGENDIAN</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_LS</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ls = a;a = vec_vsx_ld(((b) &lt;&lt; 1) + 16, s);}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yuv2planeX_8</name><parameter_list>(<parameter><type><name>d1</name></type></parameter>, <parameter><type><name>d2</name></type></parameter>, <parameter><type><name>l1</name></type></parameter>, <parameter><type><name>src</name></type></parameter>, <parameter><type><name>x</name></type></parameter>, <parameter><type><name>perm</name></type></parameter>, <parameter><type><name>filter</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {vector signed short ls;vector signed int vf1, vf2, i1, i2;GET_LS(l1, x, perm, src);i1 = vec_mule(filter, ls);i2 = vec_mulo(filter, ls);vf1 = vec_mergeh(i1, i2);vf2 = vec_mergel(i1, i2);d1 = vec_add(d1, vf1);d2 = vec_add(d2, vf2);} while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOAD_FILTER</name><parameter_list>(<parameter><type><name>vf</name></type></parameter>,<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{vf = vec_vsx_ld(joffset, f);}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOAD_L1</name><parameter_list>(<parameter><type><name>ll1</name></type></parameter>,<parameter><type><name>s</name></type></parameter>,<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>{ll1 = vec_vsx_ld(xoffset, s);}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_VF4</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>vf</name></type></parameter>, <parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{vf = (vector signed short)vec_vsx_ld(a &lt;&lt; 3, f);vf = vec_mergeh(vf, (vector signed short)vzero);}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIRST_LOAD</name><parameter_list>(<parameter><type><name>sv</name></type></parameter>, <parameter><type><name>pos</name></type></parameter>, <parameter><type><name>s</name></type></parameter>, <parameter><type><name>per</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UPDATE_PTR</name><parameter_list>(<parameter><type><name>s0</name></type></parameter>, <parameter><type><name>d0</name></type></parameter>, <parameter><type><name>s1</name></type></parameter>, <parameter><type><name>d1</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOAD_SRCV</name><parameter_list>(<parameter><type><name>pos</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>s</name></type></parameter>, <parameter><type><name>per</name></type></parameter>, <parameter><type><name>v0</name></type></parameter>, <parameter><type><name>v1</name></type></parameter>, <parameter><type><name>vf</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{vf = vec_vsx_ld(pos + a, s);}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOAD_SRCV8</name><parameter_list>(<parameter><type><name>pos</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>s</name></type></parameter>, <parameter><type><name>per</name></type></parameter>, <parameter><type><name>v0</name></type></parameter>, <parameter><type><name>v1</name></type></parameter>, <parameter><type><name>vf</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>LOAD_SRCV(pos, a, s, per, v0, v1, vf)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_VFD</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>f</name></type></parameter>, <parameter><type><name>vf0</name></type></parameter>, <parameter><type><name>vf1</name></type></parameter>, <parameter><type><name>per</name></type></parameter>, <parameter><type><name>vf</name></type></parameter>, <parameter><type><name>off</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{vf = vec_vsx_ld((a * 2 * filterSize) + (b * 2) + off, f);}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUNC</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>name ##_vsx</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"swscale_ppc_template.c"</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>FUNC</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>vzero</name></cpp:undef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><specifier>static</specifier> <name>void</name></type> <name>yuv2plane1_8_u</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dstW</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>dither</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>start</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dstW</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>val</name> <init>= <expr><operator>(</operator><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>dither</name><index>[<expr><operator>(</operator><name>i</name> <operator>+</operator> <name>offset</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dest</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>yuv2plane1_8_vsx</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dstW</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>dither</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>dst_u</name> <init>= <expr><operator>-</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>dest</name> <operator>&amp;</operator> <literal type="number">15</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>int16_t</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">16</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_u16</name></type> <name>shifts</name> <init>= <expr><operator>(</operator><name>vec_u16</name><operator>)</operator> <block>{<expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vec_s16</name></type> <name>vi</name></decl>, <decl><type ref="prev"/><name>vileft</name></decl>, <decl><type ref="prev"/><name>ditherleft</name></decl>, <decl><type ref="prev"/><name>ditherright</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vec_u8</name></type> <name>vd</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>val</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>dither</name><index>[<expr><operator>(</operator><name>dst_u</name> <operator>+</operator> <name>offset</name> <operator>+</operator> <name>j</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>ditherleft</name> <operator>=</operator> <call><name>vec_ld</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ditherright</name> <operator>=</operator> <call><name>vec_ld</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>val</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>yuv2plane1_8_u</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>dst_u</name></expr></argument>, <argument><expr><name>dither</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>dst_u</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dstW</name> <operator>-</operator> <literal type="number">15</literal></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">16</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>vi</name> <operator>=</operator> <call><name>vec_vsx_ld</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vi</name> <operator>=</operator> <call><name>vec_adds</name><argument_list>(<argument><expr><name>ditherleft</name></expr></argument>, <argument><expr><name>vi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vileft</name> <operator>=</operator> <call><name>vec_sra</name><argument_list>(<argument><expr><name>vi</name></expr></argument>, <argument><expr><name>shifts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vi</name> <operator>=</operator> <call><name>vec_vsx_ld</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>src</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vi</name> <operator>=</operator> <call><name>vec_adds</name><argument_list>(<argument><expr><name>ditherright</name></expr></argument>, <argument><expr><name>vi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vi</name> <operator>=</operator> <call><name>vec_sra</name><argument_list>(<argument><expr><name>vi</name></expr></argument>, <argument><expr><name>shifts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vd</name> <operator>=</operator> <call><name>vec_packsu</name><argument_list>(<argument><expr><name>vileft</name></expr></argument>, <argument><expr><name>vi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vec_st</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dest</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>yuv2plane1_8_u</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>dstW</name></expr></argument>, <argument><expr><name>dither</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>HAVE_BIGENDIAN</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>output_pixel</name><parameter_list>(<parameter><type><name>pos</name></type></parameter>, <parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (big_endian) { AV_WB16(pos, av_clip_uintp2(val &gt;&gt; shift, output_bits)); } else { AV_WL16(pos, av_clip_uintp2(val &gt;&gt; shift, output_bits)); }</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>yuv2plane1_nbps_u</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dstW</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>big_endian</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>output_bits</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>shift</name> <init>= <expr><literal type="number">15</literal> <operator>-</operator> <name>output_bits</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>start</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dstW</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>val</name> <init>= <expr><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>shift</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>output_pixel</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dest</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>yuv2plane1_nbps_vsx</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dstW</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>big_endian</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>output_bits</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>dst_u</name> <init>= <expr><operator>-</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>dest</name> <operator>&amp;</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>shift</name> <init>= <expr><literal type="number">15</literal> <operator>-</operator> <name>output_bits</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>add</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>shift</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>clip</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>output_bits</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_u16</name></type> <name>vadd</name> <init>= <expr><operator>(</operator><name>vec_u16</name><operator>)</operator> <block>{<expr><name>add</name></expr>, <expr><name>add</name></expr>, <expr><name>add</name></expr>, <expr><name>add</name></expr>, <expr><name>add</name></expr>, <expr><name>add</name></expr>, <expr><name>add</name></expr>, <expr><name>add</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_u16</name></type> <name>vswap</name> <init>= <expr><operator>(</operator><name>vec_u16</name><operator>)</operator> <call><name>vec_splat_u16</name><argument_list>(<argument><expr><ternary><condition><expr><name>big_endian</name></expr> ?</condition><then> <expr><literal type="number">8</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_u16</name></type> <name>vshift</name> <init>= <expr><operator>(</operator><name>vec_u16</name><operator>)</operator> <call><name>vec_splat_u16</name><argument_list>(<argument><expr><name>shift</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_u16</name></type> <name>vlargest</name> <init>= <expr><operator>(</operator><name>vec_u16</name><operator>)</operator> <block>{<expr><name>clip</name></expr>, <expr><name>clip</name></expr>, <expr><name>clip</name></expr>, <expr><name>clip</name></expr>, <expr><name>clip</name></expr>, <expr><name>clip</name></expr>, <expr><name>clip</name></expr>, <expr><name>clip</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vec_u16</name></type> <name>v</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>yuv2plane1_nbps_u</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>dst_u</name></expr></argument>, <argument><expr><name>big_endian</name></expr></argument>, <argument><expr><name>output_bits</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>dst_u</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dstW</name> <operator>-</operator> <literal type="number">7</literal></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">8</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>vec_vsx_ld</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>vadd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>vec_sr</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>vshift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>vec_min</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>vlargest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>vec_rl</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>vswap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vec_st</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dest</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>yuv2plane1_nbps_u</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>dstW</name></expr></argument>, <argument><expr><name>big_endian</name></expr></argument>, <argument><expr><name>output_bits</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>yuv2planeX_nbps_u</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>filterSize</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dstW</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>big_endian</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>output_bits</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>shift</name> <init>= <expr><literal type="number">11</literal> <operator>+</operator> <literal type="number">16</literal> <operator>-</operator> <name>output_bits</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>start</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dstW</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>val</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>shift</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>filterSize</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>val</name> <operator>+=</operator> <name><name>src</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>filter</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>output_pixel</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dest</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>yuv2planeX_nbps_vsx</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>filterSize</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dstW</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>big_endian</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>output_bits</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>dst_u</name> <init>= <expr><operator>-</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>dest</name> <operator>&amp;</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>shift</name> <init>= <expr><literal type="number">11</literal> <operator>+</operator> <literal type="number">16</literal> <operator>-</operator> <name>output_bits</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>add</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>shift</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>clip</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>output_bits</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name></type> <name>swap</name> <init>= <expr><ternary><condition><expr><name>big_endian</name></expr> ?</condition><then> <expr><literal type="number">8</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_u32</name></type> <name>vadd</name> <init>= <expr><operator>(</operator><name>vec_u32</name><operator>)</operator> <block>{<expr><name>add</name></expr>, <expr><name>add</name></expr>, <expr><name>add</name></expr>, <expr><name>add</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_u32</name></type> <name>vshift</name> <init>= <expr><operator>(</operator><name>vec_u32</name><operator>)</operator> <block>{<expr><name>shift</name></expr>, <expr><name>shift</name></expr>, <expr><name>shift</name></expr>, <expr><name>shift</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_u16</name></type> <name>vswap</name> <init>= <expr><operator>(</operator><name>vec_u16</name><operator>)</operator> <block>{<expr><name>swap</name></expr>, <expr><name>swap</name></expr>, <expr><name>swap</name></expr>, <expr><name>swap</name></expr>, <expr><name>swap</name></expr>, <expr><name>swap</name></expr>, <expr><name>swap</name></expr>, <expr><name>swap</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_u16</name></type> <name>vlargest</name> <init>= <expr><operator>(</operator><name>vec_u16</name><operator>)</operator> <block>{<expr><name>clip</name></expr>, <expr><name>clip</name></expr>, <expr><name>clip</name></expr>, <expr><name>clip</name></expr>, <expr><name>clip</name></expr>, <expr><name>clip</name></expr>, <expr><name>clip</name></expr>, <expr><name>clip</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_s16</name></type> <name>vzero</name> <init>= <expr><call><name>vec_splat_s16</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_u8</name></type> <name>vperm</name> <init>= <expr><operator>(</operator><name>vec_u8</name><operator>)</operator> <block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">15</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vec_s16</name></type> <name><name>vfilter</name><index>[<expr><name>MAX_FILTER_SIZE</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name>vin</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vec_u16</name></type> <name>v</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vec_u32</name></type> <name>vleft</name></decl>, <decl><type ref="prev"/><name>vright</name></decl>, <decl><type ref="prev"/><name>vtmp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>filterSize</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>vfilter</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>vec_s16</name><operator>)</operator> <block>{<expr><name><name>filter</name><index>[<expr><name>i</name></expr>]</index></name></expr>, <expr><name><name>filter</name><index>[<expr><name>i</name></expr>]</index></name></expr>, <expr><name><name>filter</name><index>[<expr><name>i</name></expr>]</index></name></expr>, <expr><name><name>filter</name><index>[<expr><name>i</name></expr>]</index></name></expr>,

<expr><name><name>filter</name><index>[<expr><name>i</name></expr>]</index></name></expr>, <expr><name><name>filter</name><index>[<expr><name>i</name></expr>]</index></name></expr>, <expr><name><name>filter</name><index>[<expr><name>i</name></expr>]</index></name></expr>, <expr><name><name>filter</name><index>[<expr><name>i</name></expr>]</index></name></expr>}</block></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>yuv2planeX_nbps_u</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><name>filterSize</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>dst_u</name></expr></argument>, <argument><expr><name>big_endian</name></expr></argument>, <argument><expr><name>output_bits</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>dst_u</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dstW</name> <operator>-</operator> <literal type="number">7</literal></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">8</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>vleft</name> <operator>=</operator> <name>vright</name> <operator>=</operator> <name>vadd</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>filterSize</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>vin</name> <operator>=</operator> <call><name>vec_vsx_ld</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>src</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vtmp</name> <operator>=</operator> <operator>(</operator><name>vec_u32</name><operator>)</operator> <call><name>vec_mule</name><argument_list>(<argument><expr><name>vin</name></expr></argument>, <argument><expr><name><name>vfilter</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vleft</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>vleft</name></expr></argument>, <argument><expr><name>vtmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vtmp</name> <operator>=</operator> <operator>(</operator><name>vec_u32</name><operator>)</operator> <call><name>vec_mulo</name><argument_list>(<argument><expr><name>vin</name></expr></argument>, <argument><expr><name><name>vfilter</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vright</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>vright</name></expr></argument>, <argument><expr><name>vtmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>vleft</name> <operator>=</operator> <call><name>vec_sra</name><argument_list>(<argument><expr><name>vleft</name></expr></argument>, <argument><expr><name>vshift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vright</name> <operator>=</operator> <call><name>vec_sra</name><argument_list>(<argument><expr><name>vright</name></expr></argument>, <argument><expr><name>vshift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>vec_packsu</name><argument_list>(<argument><expr><name>vleft</name></expr></argument>, <argument><expr><name>vright</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><name>vec_u16</name><operator>)</operator> <call><name>vec_max</name><argument_list>(<argument><expr><operator>(</operator><name>vec_s16</name><operator>)</operator> <name>v</name></expr></argument>, <argument><expr><name>vzero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>vec_min</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>vlargest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>vec_rl</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>vswap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>vec_perm</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>vperm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vec_st</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dest</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>yuv2planeX_nbps_u</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><name>filterSize</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>dstW</name></expr></argument>, <argument><expr><name>big_endian</name></expr></argument>, <argument><expr><name>output_bits</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>output_pixel</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>output_pixel</name><parameter_list>(<parameter><type><name>pos</name></type></parameter>, <parameter><type><name>val</name></type></parameter>, <parameter><type><name>bias</name></type></parameter>, <parameter><type><name>signedness</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (big_endian) { AV_WB16(pos, bias + av_clip_ ##signedness ##16(val &gt;&gt; shift)); } else { AV_WL16(pos, bias + av_clip_ ##signedness ##16(val &gt;&gt; shift)); }</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>yuv2plane1_16_u</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dstW</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>big_endian</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>output_bits</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>shift</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>start</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dstW</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>val</name> <init>= <expr><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>shift</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>output_pixel</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dest</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>uint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>yuv2plane1_16_vsx</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dstW</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>big_endian</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>output_bits</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>dst_u</name> <init>= <expr><operator>-</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>dest</name> <operator>&amp;</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>shift</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>add</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>shift</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_u32</name></type> <name>vadd</name> <init>= <expr><operator>(</operator><name>vec_u32</name><operator>)</operator> <block>{<expr><name>add</name></expr>, <expr><name>add</name></expr>, <expr><name>add</name></expr>, <expr><name>add</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_u16</name></type> <name>vswap</name> <init>= <expr><operator>(</operator><name>vec_u16</name><operator>)</operator> <call><name>vec_splat_u16</name><argument_list>(<argument><expr><ternary><condition><expr><name>big_endian</name></expr> ?</condition><then> <expr><literal type="number">8</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_u32</name></type> <name>vshift</name> <init>= <expr><operator>(</operator><name>vec_u32</name><operator>)</operator> <call><name>vec_splat_u32</name><argument_list>(<argument><expr><name>shift</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vec_u32</name></type> <name>v</name></decl>, <decl><type ref="prev"/><name>v2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vec_u16</name></type> <name>vd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>yuv2plane1_16_u</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>dst_u</name></expr></argument>, <argument><expr><name>big_endian</name></expr></argument>, <argument><expr><name>output_bits</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>dst_u</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dstW</name> <operator>-</operator> <literal type="number">7</literal></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">8</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>vec_vsx_ld</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>vadd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>vec_sr</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>vshift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>v2</name> <operator>=</operator> <call><name>vec_vsx_ld</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>src</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>v2</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>v2</name></expr></argument>, <argument><expr><name>vadd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>v2</name> <operator>=</operator> <call><name>vec_sr</name><argument_list>(<argument><expr><name>v2</name></expr></argument>, <argument><expr><name>vshift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vd</name> <operator>=</operator> <call><name>vec_packsu</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>v2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vd</name> <operator>=</operator> <call><name>vec_rl</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><name>vswap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vec_st</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dest</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>yuv2plane1_16_u</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>dstW</name></expr></argument>, <argument><expr><name>big_endian</name></expr></argument>, <argument><expr><name>output_bits</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_POWER8</name></expr></cpp:if>

<function><type><specifier>static</specifier> <name>void</name></type> <name>yuv2planeX_16_u</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>filterSize</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dstW</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>big_endian</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>output_bits</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>shift</name> <init>= <expr><literal type="number">15</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>start</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dstW</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>val</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>shift</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><name>val</name> <operator>-=</operator> <literal type="number">0x40000000</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>filterSize</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>val</name> <operator>+=</operator> <name><name>src</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>filter</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>output_pixel</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dest</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="number">0x8000</literal></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>yuv2planeX_16_vsx</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>filterSize</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dstW</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>big_endian</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>output_bits</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>dst_u</name> <init>= <expr><operator>-</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>dest</name> <operator>&amp;</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>shift</name> <init>= <expr><literal type="number">15</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>bias</name> <init>= <expr><literal type="number">0x8000</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>add</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>shift</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>-</operator> <literal type="number">0x40000000</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name></type> <name>swap</name> <init>= <expr><ternary><condition><expr><name>big_endian</name></expr> ?</condition><then> <expr><literal type="number">8</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_u32</name></type> <name>vadd</name> <init>= <expr><operator>(</operator><name>vec_u32</name><operator>)</operator> <block>{<expr><name>add</name></expr>, <expr><name>add</name></expr>, <expr><name>add</name></expr>, <expr><name>add</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_u32</name></type> <name>vshift</name> <init>= <expr><operator>(</operator><name>vec_u32</name><operator>)</operator> <block>{<expr><name>shift</name></expr>, <expr><name>shift</name></expr>, <expr><name>shift</name></expr>, <expr><name>shift</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_u16</name></type> <name>vswap</name> <init>= <expr><operator>(</operator><name>vec_u16</name><operator>)</operator> <block>{<expr><name>swap</name></expr>, <expr><name>swap</name></expr>, <expr><name>swap</name></expr>, <expr><name>swap</name></expr>, <expr><name>swap</name></expr>, <expr><name>swap</name></expr>, <expr><name>swap</name></expr>, <expr><name>swap</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_u16</name></type> <name>vbias</name> <init>= <expr><operator>(</operator><name>vec_u16</name><operator>)</operator> <block>{<expr><name>bias</name></expr>, <expr><name>bias</name></expr>, <expr><name>bias</name></expr>, <expr><name>bias</name></expr>, <expr><name>bias</name></expr>, <expr><name>bias</name></expr>, <expr><name>bias</name></expr>, <expr><name>bias</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vec_s32</name></type> <name><name>vfilter</name><index>[<expr><name>MAX_FILTER_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vec_u16</name></type> <name>v</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vec_u32</name></type> <name>vleft</name></decl>, <decl><type ref="prev"/><name>vright</name></decl>, <decl><type ref="prev"/><name>vtmp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vec_s32</name></type> <name>vin32l</name></decl>, <decl><type ref="prev"/><name>vin32r</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>filterSize</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>vfilter</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>vec_s32</name><operator>)</operator> <block>{<expr><name><name>filter</name><index>[<expr><name>i</name></expr>]</index></name></expr>, <expr><name><name>filter</name><index>[<expr><name>i</name></expr>]</index></name></expr>, <expr><name><name>filter</name><index>[<expr><name>i</name></expr>]</index></name></expr>, <expr><name><name>filter</name><index>[<expr><name>i</name></expr>]</index></name></expr>}</block></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>yuv2planeX_16_u</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><name>filterSize</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>dst_u</name></expr></argument>, <argument><expr><name>big_endian</name></expr></argument>, <argument><expr><name>output_bits</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>dst_u</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dstW</name> <operator>-</operator> <literal type="number">7</literal></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">8</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>vleft</name> <operator>=</operator> <name>vright</name> <operator>=</operator> <name>vadd</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>filterSize</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>vin32l</name> <operator>=</operator> <call><name>vec_vsx_ld</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>src</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vin32r</name> <operator>=</operator> <call><name>vec_vsx_ld</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>src</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vtmp</name> <operator>=</operator> <operator>(</operator><name>vec_u32</name><operator>)</operator> <call><name>vec_mul</name><argument_list>(<argument><expr><name>vin32l</name></expr></argument>, <argument><expr><name><name>vfilter</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vleft</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>vleft</name></expr></argument>, <argument><expr><name>vtmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vtmp</name> <operator>=</operator> <operator>(</operator><name>vec_u32</name><operator>)</operator> <call><name>vec_mul</name><argument_list>(<argument><expr><name>vin32r</name></expr></argument>, <argument><expr><name><name>vfilter</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vright</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>vright</name></expr></argument>, <argument><expr><name>vtmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>vleft</name> <operator>=</operator> <call><name>vec_sra</name><argument_list>(<argument><expr><name>vleft</name></expr></argument>, <argument><expr><name>vshift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vright</name> <operator>=</operator> <call><name>vec_sra</name><argument_list>(<argument><expr><name>vright</name></expr></argument>, <argument><expr><name>vshift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><name>vec_u16</name><operator>)</operator> <call><name>vec_packs</name><argument_list>(<argument><expr><operator>(</operator><name>vec_s32</name><operator>)</operator> <name>vleft</name></expr></argument>, <argument><expr><operator>(</operator><name>vec_s32</name><operator>)</operator> <name>vright</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>vbias</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>vec_rl</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>vswap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vec_st</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dest</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>yuv2planeX_16_u</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><name>filterSize</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>dstW</name></expr></argument>, <argument><expr><name>big_endian</name></expr></argument>, <argument><expr><name>output_bits</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yuv2NBPS</name><parameter_list>(<parameter><type><name>bits</name></type></parameter>, <parameter><type><name>BE_LE</name></type></parameter>, <parameter><type><name>is_be</name></type></parameter>, <parameter><type><name>template_size</name></type></parameter>, <parameter><type><name>typeX_t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>yuv2NBPS1(bits, BE_LE, is_be, template_size, typeX_t) yuv2NBPSX(bits, BE_LE, is_be, template_size, typeX_t)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yuv2NBPS1</name><parameter_list>(<parameter><type><name>bits</name></type></parameter>, <parameter><type><name>BE_LE</name></type></parameter>, <parameter><type><name>is_be</name></type></parameter>, <parameter><type><name>template_size</name></type></parameter>, <parameter><type><name>typeX_t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void yuv2plane1_ ##bits ##BE_LE ##_vsx(const int16_t *src, uint8_t *dest, int dstW, const uint8_t *dither, int offset) { yuv2plane1_ ##template_size ##_vsx((const typeX_t *) src, (uint16_t *) dest, dstW, is_be, bits); }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yuv2NBPSX</name><parameter_list>(<parameter><type><name>bits</name></type></parameter>, <parameter><type><name>BE_LE</name></type></parameter>, <parameter><type><name>is_be</name></type></parameter>, <parameter><type><name>template_size</name></type></parameter>, <parameter><type><name>typeX_t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void yuv2planeX_ ##bits ##BE_LE ##_vsx(const int16_t *filter, int filterSize, const int16_t **src, uint8_t *dest, int dstW, const uint8_t *dither, int offset){ yuv2planeX_##template_size ##_vsx(filter, filterSize, (const typeX_t **) src, (uint16_t *) dest, dstW, is_be, bits); }</cpp:value></cpp:define>

<macro><name>yuv2NBPS</name><argument_list>( <argument><literal type="number">9</literal></argument>, <argument>BE</argument>, <argument><literal type="number">1</literal></argument>, <argument>nbps</argument>, <argument>int16_t</argument>)</argument_list></macro>

<macro><name>yuv2NBPS</name><argument_list>( <argument><literal type="number">9</literal></argument>, <argument>LE</argument>, <argument><literal type="number">0</literal></argument>, <argument>nbps</argument>, <argument>int16_t</argument>)</argument_list></macro>

<macro><name>yuv2NBPS</name><argument_list>(<argument><literal type="number">10</literal></argument>, <argument>BE</argument>, <argument><literal type="number">1</literal></argument>, <argument>nbps</argument>, <argument>int16_t</argument>)</argument_list></macro>

<macro><name>yuv2NBPS</name><argument_list>(<argument><literal type="number">10</literal></argument>, <argument>LE</argument>, <argument><literal type="number">0</literal></argument>, <argument>nbps</argument>, <argument>int16_t</argument>)</argument_list></macro>

<macro><name>yuv2NBPS</name><argument_list>(<argument><literal type="number">12</literal></argument>, <argument>BE</argument>, <argument><literal type="number">1</literal></argument>, <argument>nbps</argument>, <argument>int16_t</argument>)</argument_list></macro>

<macro><name>yuv2NBPS</name><argument_list>(<argument><literal type="number">12</literal></argument>, <argument>LE</argument>, <argument><literal type="number">0</literal></argument>, <argument>nbps</argument>, <argument>int16_t</argument>)</argument_list></macro>

<macro><name>yuv2NBPS</name><argument_list>(<argument><literal type="number">14</literal></argument>, <argument>BE</argument>, <argument><literal type="number">1</literal></argument>, <argument>nbps</argument>, <argument>int16_t</argument>)</argument_list></macro>

<macro><name>yuv2NBPS</name><argument_list>(<argument><literal type="number">14</literal></argument>, <argument>LE</argument>, <argument><literal type="number">0</literal></argument>, <argument>nbps</argument>, <argument>int16_t</argument>)</argument_list></macro>

<macro><name>yuv2NBPS1</name><argument_list>(<argument><literal type="number">16</literal></argument>, <argument>BE</argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">16</literal></argument>, <argument>int32_t</argument>)</argument_list></macro>

<macro><name>yuv2NBPS1</name><argument_list>(<argument><literal type="number">16</literal></argument>, <argument>LE</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">16</literal></argument>, <argument>int32_t</argument>)</argument_list></macro>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_POWER8</name></expr></cpp:if>

<macro><name>yuv2NBPSX</name><argument_list>(<argument><literal type="number">16</literal></argument>, <argument>BE</argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">16</literal></argument>, <argument>int32_t</argument>)</argument_list></macro>

<macro><name>yuv2NBPSX</name><argument_list>(<argument><literal type="number">16</literal></argument>, <argument>LE</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">16</literal></argument>, <argument>int32_t</argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WRITERGB</name></cpp:macro> <cpp:value>R_l = vec_max(R_l, zero32); R_r = vec_max(R_r, zero32); G_l = vec_max(G_l, zero32); G_r = vec_max(G_r, zero32); B_l = vec_max(B_l, zero32); B_r = vec_max(B_r, zero32); R_l = vec_min(R_l, rgbclip); R_r = vec_min(R_r, rgbclip); G_l = vec_min(G_l, rgbclip); G_r = vec_min(G_r, rgbclip); B_l = vec_min(B_l, rgbclip); B_r = vec_min(B_r, rgbclip); R_l = vec_sr(R_l, shift22); R_r = vec_sr(R_r, shift22); G_l = vec_sr(G_l, shift22); G_r = vec_sr(G_r, shift22); B_l = vec_sr(B_l, shift22); B_r = vec_sr(B_r, shift22); rd16 = vec_packsu(R_l, R_r); gd16 = vec_packsu(G_l, G_r); bd16 = vec_packsu(B_l, B_r); rd = vec_packsu(rd16, zero16); gd = vec_packsu(gd16, zero16); bd = vec_packsu(bd16, zero16); switch(target) { case AV_PIX_FMT_RGB24: out0 = vec_perm(rd, gd, perm3rg0); out0 = vec_perm(out0, bd, perm3tb0); out1 = vec_perm(rd, gd, perm3rg1); out1 = vec_perm(out1, bd, perm3tb1); vec_vsx_st(out0, 0, dest); vec_vsx_st(out1, 16, dest); dest += 24; break; case AV_PIX_FMT_BGR24: out0 = vec_perm(bd, gd, perm3rg0); out0 = vec_perm(out0, rd, perm3tb0); out1 = vec_perm(bd, gd, perm3rg1); out1 = vec_perm(out1, rd, perm3tb1); vec_vsx_st(out0, 0, dest); vec_vsx_st(out1, 16, dest); dest += 24; break; case AV_PIX_FMT_BGRA: out0 = vec_mergeh(bd, gd); out1 = vec_mergeh(rd, ad); tmp8 = (vec_u8) vec_mergeh((vec_u16) out0, (vec_u16) out1); vec_vsx_st(tmp8, 0, dest); tmp8 = (vec_u8) vec_mergel((vec_u16) out0, (vec_u16) out1); vec_vsx_st(tmp8, 16, dest); dest += 32; break; case AV_PIX_FMT_RGBA: out0 = vec_mergeh(rd, gd); out1 = vec_mergeh(bd, ad); tmp8 = (vec_u8) vec_mergeh((vec_u16) out0, (vec_u16) out1); vec_vsx_st(tmp8, 0, dest); tmp8 = (vec_u8) vec_mergel((vec_u16) out0, (vec_u16) out1); vec_vsx_st(tmp8, 16, dest); dest += 32; break; case AV_PIX_FMT_ARGB: out0 = vec_mergeh(ad, rd); out1 = vec_mergeh(gd, bd); tmp8 = (vec_u8) vec_mergeh((vec_u16) out0, (vec_u16) out1); vec_vsx_st(tmp8, 0, dest); tmp8 = (vec_u8) vec_mergel((vec_u16) out0, (vec_u16) out1); vec_vsx_st(tmp8, 16, dest); dest += 32; break; case AV_PIX_FMT_ABGR: out0 = vec_mergeh(ad, bd); out1 = vec_mergeh(gd, rd); tmp8 = (vec_u8) vec_mergeh((vec_u16) out0, (vec_u16) out1); vec_vsx_st(tmp8, 0, dest); tmp8 = (vec_u8) vec_mergel((vec_u16) out0, (vec_u16) out1); vec_vsx_st(tmp8, 16, dest); dest += 32; break; }</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type>

<name>yuv2rgb_full_X_vsx_template</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>lumFilter</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>lumSrc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lumFilterSize</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>chrFilter</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>chrUSrc</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>chrVSrc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>chrFilterSize</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>alpSrc</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>dstW</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hasAlpha</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vec_s16</name></type> <name>vv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vec_s32</name></type> <name>vy32_l</name></decl>, <decl><type ref="prev"/><name>vy32_r</name></decl>, <decl><type ref="prev"/><name>vu32_l</name></decl>, <decl><type ref="prev"/><name>vu32_r</name></decl>, <decl><type ref="prev"/><name>vv32_l</name></decl>, <decl><type ref="prev"/><name>vv32_r</name></decl>, <decl><type ref="prev"/><name>tmp32</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vec_s32</name></type> <name>R_l</name></decl>, <decl><type ref="prev"/><name>R_r</name></decl>, <decl><type ref="prev"/><name>G_l</name></decl>, <decl><type ref="prev"/><name>G_r</name></decl>, <decl><type ref="prev"/><name>B_l</name></decl>, <decl><type ref="prev"/><name>B_r</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vec_s32</name></type> <name>tmp</name></decl>, <decl><type ref="prev"/><name>tmp2</name></decl>, <decl><type ref="prev"/><name>tmp3</name></decl>, <decl><type ref="prev"/><name>tmp4</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vec_u16</name></type> <name>rd16</name></decl>, <decl><type ref="prev"/><name>gd16</name></decl>, <decl><type ref="prev"/><name>bd16</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vec_u8</name></type> <name>rd</name></decl>, <decl><type ref="prev"/><name>bd</name></decl>, <decl><type ref="prev"/><name>gd</name></decl>, <decl><type ref="prev"/><name>ad</name></decl>, <decl><type ref="prev"/><name>out0</name></decl>, <decl><type ref="prev"/><name>out1</name></decl>, <decl><type ref="prev"/><name>tmp8</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vec_s16</name></type> <name><name>vlumFilter</name><index>[<expr><name>MAX_FILTER_SIZE</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>vchrFilter</name><index>[<expr><name>MAX_FILTER_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_s32</name></type> <name>ystart</name> <init>= <expr><call><name>vec_splats</name><argument_list>(<argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">9</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_s32</name></type> <name>uvstart</name> <init>= <expr><call><name>vec_splats</name><argument_list>(<argument><expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">9</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><literal type="number">128</literal> <operator>&lt;&lt;</operator> <literal type="number">19</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_u16</name></type> <name>zero16</name> <init>= <expr><call><name>vec_splat_u16</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_s32</name></type> <name>y_offset</name> <init>= <expr><call><name>vec_splats</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>yuv2rgb_y_offset</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_s32</name></type> <name>y_coeff</name> <init>= <expr><call><name>vec_splats</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>yuv2rgb_y_coeff</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_s32</name></type> <name>y_add</name> <init>= <expr><call><name>vec_splats</name><argument_list>(<argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">21</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_s32</name></type> <name>v2r_coeff</name> <init>= <expr><call><name>vec_splats</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>yuv2rgb_v2r_coeff</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_s32</name></type> <name>v2g_coeff</name> <init>= <expr><call><name>vec_splats</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>yuv2rgb_v2g_coeff</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_s32</name></type> <name>u2g_coeff</name> <init>= <expr><call><name>vec_splats</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>yuv2rgb_u2g_coeff</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_s32</name></type> <name>u2b_coeff</name> <init>= <expr><call><name>vec_splats</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>yuv2rgb_u2b_coeff</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_s32</name></type> <name>rgbclip</name> <init>= <expr><call><name>vec_splats</name><argument_list>(<argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">30</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_s32</name></type> <name>zero32</name> <init>= <expr><call><name>vec_splat_s32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_u32</name></type> <name>shift22</name> <init>= <expr><call><name>vec_splats</name><argument_list>(<argument><expr><literal type="number">22U</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_u32</name></type> <name>shift10</name> <init>= <expr><call><name>vec_splat_u32</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_u8</name></type> <name>perm3rg0</name> <init>= <expr><operator>(</operator><name>vec_u8</name><operator>)</operator> <block>{<expr><literal type="number">0x0</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0x1</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0x2</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0x3</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0x4</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0x5</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_u8</name></type> <name>perm3rg1</name> <init>= <expr><operator>(</operator><name>vec_u8</name><operator>)</operator> <block>{ <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0x6</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0x7</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_u8</name></type> <name>perm3tb0</name> <init>= <expr><operator>(</operator><name>vec_u8</name><operator>)</operator> <block>{<expr><literal type="number">0x0</literal></expr>, <expr><literal type="number">0x1</literal></expr>, <expr><literal type="number">0x10</literal></expr>,

<expr><literal type="number">0x3</literal></expr>, <expr><literal type="number">0x4</literal></expr>, <expr><literal type="number">0x11</literal></expr>,

<expr><literal type="number">0x6</literal></expr>, <expr><literal type="number">0x7</literal></expr>, <expr><literal type="number">0x12</literal></expr>,

<expr><literal type="number">0x9</literal></expr>, <expr><literal type="number">0xa</literal></expr>, <expr><literal type="number">0x13</literal></expr>,

<expr><literal type="number">0xc</literal></expr>, <expr><literal type="number">0xd</literal></expr>, <expr><literal type="number">0x14</literal></expr>,

<expr><literal type="number">0xf</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_u8</name></type> <name>perm3tb1</name> <init>= <expr><operator>(</operator><name>vec_u8</name><operator>)</operator> <block>{ <expr><literal type="number">0x0</literal></expr>, <expr><literal type="number">0x15</literal></expr>,

<expr><literal type="number">0x2</literal></expr>, <expr><literal type="number">0x3</literal></expr>, <expr><literal type="number">0x16</literal></expr>,

<expr><literal type="number">0x5</literal></expr>, <expr><literal type="number">0x6</literal></expr>, <expr><literal type="number">0x17</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ad</name> <operator>=</operator> <call><name>vec_splats</name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator> <literal type="number">255</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>lumFilterSize</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>vlumFilter</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>vec_splats</name><argument_list>(<argument><expr><name><name>lumFilter</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>chrFilterSize</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>vchrFilter</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>vec_splats</name><argument_list>(<argument><expr><name><name>chrFilter</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dstW</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">8</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>vy32_l</name> <operator>=</operator>

<name>vy32_r</name> <operator>=</operator> <name>ystart</name></expr>;</expr_stmt>

<expr_stmt><expr><name>vu32_l</name> <operator>=</operator>

<name>vu32_r</name> <operator>=</operator>

<name>vv32_l</name> <operator>=</operator>

<name>vv32_r</name> <operator>=</operator> <name>uvstart</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>lumFilterSize</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>vv</name> <operator>=</operator> <call><name>vec_ld</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>lumSrc</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>vec_mule</name><argument_list>(<argument><expr><name>vv</name></expr></argument>, <argument><expr><name><name>vlumFilter</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp2</name> <operator>=</operator> <call><name>vec_mulo</name><argument_list>(<argument><expr><name>vv</name></expr></argument>, <argument><expr><name><name>vlumFilter</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp3</name> <operator>=</operator> <call><name>vec_mergeh</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp4</name> <operator>=</operator> <call><name>vec_mergel</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vy32_l</name> <operator>=</operator> <call><name>vec_adds</name><argument_list>(<argument><expr><name>vy32_l</name></expr></argument>, <argument><expr><name>tmp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vy32_r</name> <operator>=</operator> <call><name>vec_adds</name><argument_list>(<argument><expr><name>vy32_r</name></expr></argument>, <argument><expr><name>tmp4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>chrFilterSize</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>vv</name> <operator>=</operator> <call><name>vec_ld</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>chrUSrc</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>vec_mule</name><argument_list>(<argument><expr><name>vv</name></expr></argument>, <argument><expr><name><name>vchrFilter</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp2</name> <operator>=</operator> <call><name>vec_mulo</name><argument_list>(<argument><expr><name>vv</name></expr></argument>, <argument><expr><name><name>vchrFilter</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp3</name> <operator>=</operator> <call><name>vec_mergeh</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp4</name> <operator>=</operator> <call><name>vec_mergel</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vu32_l</name> <operator>=</operator> <call><name>vec_adds</name><argument_list>(<argument><expr><name>vu32_l</name></expr></argument>, <argument><expr><name>tmp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vu32_r</name> <operator>=</operator> <call><name>vec_adds</name><argument_list>(<argument><expr><name>vu32_r</name></expr></argument>, <argument><expr><name>tmp4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vv</name> <operator>=</operator> <call><name>vec_ld</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>chrVSrc</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>vec_mule</name><argument_list>(<argument><expr><name>vv</name></expr></argument>, <argument><expr><name><name>vchrFilter</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp2</name> <operator>=</operator> <call><name>vec_mulo</name><argument_list>(<argument><expr><name>vv</name></expr></argument>, <argument><expr><name><name>vchrFilter</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp3</name> <operator>=</operator> <call><name>vec_mergeh</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp4</name> <operator>=</operator> <call><name>vec_mergel</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vv32_l</name> <operator>=</operator> <call><name>vec_adds</name><argument_list>(<argument><expr><name>vv32_l</name></expr></argument>, <argument><expr><name>tmp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vv32_r</name> <operator>=</operator> <call><name>vec_adds</name><argument_list>(<argument><expr><name>vv32_r</name></expr></argument>, <argument><expr><name>tmp4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>vy32_l</name> <operator>=</operator> <call><name>vec_sra</name><argument_list>(<argument><expr><name>vy32_l</name></expr></argument>, <argument><expr><name>shift10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vy32_r</name> <operator>=</operator> <call><name>vec_sra</name><argument_list>(<argument><expr><name>vy32_r</name></expr></argument>, <argument><expr><name>shift10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vu32_l</name> <operator>=</operator> <call><name>vec_sra</name><argument_list>(<argument><expr><name>vu32_l</name></expr></argument>, <argument><expr><name>shift10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vu32_r</name> <operator>=</operator> <call><name>vec_sra</name><argument_list>(<argument><expr><name>vu32_r</name></expr></argument>, <argument><expr><name>shift10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vv32_l</name> <operator>=</operator> <call><name>vec_sra</name><argument_list>(<argument><expr><name>vv32_l</name></expr></argument>, <argument><expr><name>shift10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vv32_r</name> <operator>=</operator> <call><name>vec_sra</name><argument_list>(<argument><expr><name>vv32_r</name></expr></argument>, <argument><expr><name>shift10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vy32_l</name> <operator>=</operator> <call><name>vec_sub</name><argument_list>(<argument><expr><name>vy32_l</name></expr></argument>, <argument><expr><name>y_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vy32_r</name> <operator>=</operator> <call><name>vec_sub</name><argument_list>(<argument><expr><name>vy32_r</name></expr></argument>, <argument><expr><name>y_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vy32_l</name> <operator>=</operator> <call><name>vec_mul</name><argument_list>(<argument><expr><name>vy32_l</name></expr></argument>, <argument><expr><name>y_coeff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vy32_r</name> <operator>=</operator> <call><name>vec_mul</name><argument_list>(<argument><expr><name>vy32_r</name></expr></argument>, <argument><expr><name>y_coeff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vy32_l</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>vy32_l</name></expr></argument>, <argument><expr><name>y_add</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vy32_r</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>vy32_r</name></expr></argument>, <argument><expr><name>y_add</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>R_l</name> <operator>=</operator> <call><name>vec_mul</name><argument_list>(<argument><expr><name>vv32_l</name></expr></argument>, <argument><expr><name>v2r_coeff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>R_l</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>R_l</name></expr></argument>, <argument><expr><name>vy32_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>R_r</name> <operator>=</operator> <call><name>vec_mul</name><argument_list>(<argument><expr><name>vv32_r</name></expr></argument>, <argument><expr><name>v2r_coeff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>R_r</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>R_r</name></expr></argument>, <argument><expr><name>vy32_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>G_l</name> <operator>=</operator> <call><name>vec_mul</name><argument_list>(<argument><expr><name>vv32_l</name></expr></argument>, <argument><expr><name>v2g_coeff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp32</name> <operator>=</operator> <call><name>vec_mul</name><argument_list>(<argument><expr><name>vu32_l</name></expr></argument>, <argument><expr><name>u2g_coeff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>G_l</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>G_l</name></expr></argument>, <argument><expr><name>vy32_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>G_l</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>G_l</name></expr></argument>, <argument><expr><name>tmp32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>G_r</name> <operator>=</operator> <call><name>vec_mul</name><argument_list>(<argument><expr><name>vv32_r</name></expr></argument>, <argument><expr><name>v2g_coeff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp32</name> <operator>=</operator> <call><name>vec_mul</name><argument_list>(<argument><expr><name>vu32_r</name></expr></argument>, <argument><expr><name>u2g_coeff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>G_r</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>G_r</name></expr></argument>, <argument><expr><name>vy32_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>G_r</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>G_r</name></expr></argument>, <argument><expr><name>tmp32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>B_l</name> <operator>=</operator> <call><name>vec_mul</name><argument_list>(<argument><expr><name>vu32_l</name></expr></argument>, <argument><expr><name>u2b_coeff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>B_l</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>B_l</name></expr></argument>, <argument><expr><name>vy32_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>B_r</name> <operator>=</operator> <call><name>vec_mul</name><argument_list>(<argument><expr><name>vu32_r</name></expr></argument>, <argument><expr><name>u2b_coeff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>B_r</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>B_r</name></expr></argument>, <argument><expr><name>vy32_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>WRITERGB</name></expr></expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SETUP</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>buf0</name></type></parameter>, <parameter><type><name>alpha1</name></type></parameter>, <parameter><type><name>buf1</name></type></parameter>, <parameter><type><name>alpha</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ x = vec_ld(0, buf0); tmp = vec_mule(x, alpha1); tmp2 = vec_mulo(x, alpha1); tmp3 = vec_mergeh(tmp, tmp2); tmp4 = vec_mergel(tmp, tmp2); x = vec_ld(0, buf1); tmp = vec_mule(x, alpha); tmp2 = vec_mulo(x, alpha); tmp5 = vec_mergeh(tmp, tmp2); tmp6 = vec_mergel(tmp, tmp2); tmp3 = vec_add(tmp3, tmp5); tmp4 = vec_add(tmp4, tmp6); }</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type>

<name>yuv2rgb_full_2_vsx_template</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name><name>ubuf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name><name>vbuf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name><name>abuf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dstW</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>yalpha</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>uvalpha</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hasAlpha</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>buf0</name> <init>= <expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>buf1</name> <init>= <expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>,

<decl><type ref="prev"><modifier>*</modifier></type><name>ubuf0</name> <init>= <expr><name><name>ubuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ubuf1</name> <init>= <expr><name><name>ubuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>,

<decl><type ref="prev"><modifier>*</modifier></type><name>vbuf0</name> <init>= <expr><name><name>vbuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>vbuf1</name> <init>= <expr><name><name>vbuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>,

<decl><type ref="prev"><modifier>*</modifier></type><name>abuf0</name> <init>= <expr><ternary><condition><expr><name>hasAlpha</name></expr> ?</condition><then> <expr><name><name>abuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>,

<decl><type ref="prev"><modifier>*</modifier></type><name>abuf1</name> <init>= <expr><ternary><condition><expr><name>hasAlpha</name></expr> ?</condition><then> <expr><name><name>abuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int16_t</name></type> <name>yalpha1</name> <init>= <expr><literal type="number">4096</literal> <operator>-</operator> <name>yalpha</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int16_t</name></type> <name>uvalpha1</name> <init>= <expr><literal type="number">4096</literal> <operator>-</operator> <name>uvalpha</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vec_s16</name></type> <name>vy</name></decl>, <decl><type ref="prev"/><name>vu</name></decl>, <decl><type ref="prev"/><name>vv</name></decl>, <decl><type ref="prev"/><name>A</name> <init>= <expr><call><name>vec_splat_s16</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vec_s32</name></type> <name>vy32_l</name></decl>, <decl><type ref="prev"/><name>vy32_r</name></decl>, <decl><type ref="prev"/><name>vu32_l</name></decl>, <decl><type ref="prev"/><name>vu32_r</name></decl>, <decl><type ref="prev"/><name>vv32_l</name></decl>, <decl><type ref="prev"/><name>vv32_r</name></decl>, <decl><type ref="prev"/><name>tmp32</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vec_s32</name></type> <name>R_l</name></decl>, <decl><type ref="prev"/><name>R_r</name></decl>, <decl><type ref="prev"/><name>G_l</name></decl>, <decl><type ref="prev"/><name>G_r</name></decl>, <decl><type ref="prev"/><name>B_l</name></decl>, <decl><type ref="prev"/><name>B_r</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vec_s32</name></type> <name>tmp</name></decl>, <decl><type ref="prev"/><name>tmp2</name></decl>, <decl><type ref="prev"/><name>tmp3</name></decl>, <decl><type ref="prev"/><name>tmp4</name></decl>, <decl><type ref="prev"/><name>tmp5</name></decl>, <decl><type ref="prev"/><name>tmp6</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vec_u16</name></type> <name>rd16</name></decl>, <decl><type ref="prev"/><name>gd16</name></decl>, <decl><type ref="prev"/><name>bd16</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vec_u8</name></type> <name>rd</name></decl>, <decl><type ref="prev"/><name>bd</name></decl>, <decl><type ref="prev"/><name>gd</name></decl>, <decl><type ref="prev"/><name>ad</name></decl>, <decl><type ref="prev"/><name>out0</name></decl>, <decl><type ref="prev"/><name>out1</name></decl>, <decl><type ref="prev"/><name>tmp8</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_s16</name></type> <name>vyalpha1</name> <init>= <expr><call><name>vec_splats</name><argument_list>(<argument><expr><name>yalpha1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_s16</name></type> <name>vuvalpha1</name> <init>= <expr><call><name>vec_splats</name><argument_list>(<argument><expr><name>uvalpha1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_s16</name></type> <name>vyalpha</name> <init>= <expr><call><name>vec_splats</name><argument_list>(<argument><expr><operator>(</operator><name>int16_t</name><operator>)</operator> <name>yalpha</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_s16</name></type> <name>vuvalpha</name> <init>= <expr><call><name>vec_splats</name><argument_list>(<argument><expr><operator>(</operator><name>int16_t</name><operator>)</operator> <name>uvalpha</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_u16</name></type> <name>zero16</name> <init>= <expr><call><name>vec_splat_u16</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_s32</name></type> <name>y_offset</name> <init>= <expr><call><name>vec_splats</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>yuv2rgb_y_offset</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_s32</name></type> <name>y_coeff</name> <init>= <expr><call><name>vec_splats</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>yuv2rgb_y_coeff</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_s32</name></type> <name>y_add</name> <init>= <expr><call><name>vec_splats</name><argument_list>(<argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">21</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_s32</name></type> <name>v2r_coeff</name> <init>= <expr><call><name>vec_splats</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>yuv2rgb_v2r_coeff</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_s32</name></type> <name>v2g_coeff</name> <init>= <expr><call><name>vec_splats</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>yuv2rgb_v2g_coeff</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_s32</name></type> <name>u2g_coeff</name> <init>= <expr><call><name>vec_splats</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>yuv2rgb_u2g_coeff</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_s32</name></type> <name>u2b_coeff</name> <init>= <expr><call><name>vec_splats</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>yuv2rgb_u2b_coeff</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_s32</name></type> <name>rgbclip</name> <init>= <expr><call><name>vec_splats</name><argument_list>(<argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">30</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_s32</name></type> <name>zero32</name> <init>= <expr><call><name>vec_splat_s32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_u32</name></type> <name>shift19</name> <init>= <expr><call><name>vec_splats</name><argument_list>(<argument><expr><literal type="number">19U</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_u32</name></type> <name>shift22</name> <init>= <expr><call><name>vec_splats</name><argument_list>(<argument><expr><literal type="number">22U</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_u32</name></type> <name>shift10</name> <init>= <expr><call><name>vec_splat_u32</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_s32</name></type> <name>dec128</name> <init>= <expr><call><name>vec_splats</name><argument_list>(<argument><expr><literal type="number">128</literal> <operator>&lt;&lt;</operator> <literal type="number">19</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_s32</name></type> <name>add18</name> <init>= <expr><call><name>vec_splats</name><argument_list>(<argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">18</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_u8</name></type> <name>perm3rg0</name> <init>= <expr><operator>(</operator><name>vec_u8</name><operator>)</operator> <block>{<expr><literal type="number">0x0</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0x1</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0x2</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0x3</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0x4</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0x5</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_u8</name></type> <name>perm3rg1</name> <init>= <expr><operator>(</operator><name>vec_u8</name><operator>)</operator> <block>{ <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0x6</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0x7</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_u8</name></type> <name>perm3tb0</name> <init>= <expr><operator>(</operator><name>vec_u8</name><operator>)</operator> <block>{<expr><literal type="number">0x0</literal></expr>, <expr><literal type="number">0x1</literal></expr>, <expr><literal type="number">0x10</literal></expr>,

<expr><literal type="number">0x3</literal></expr>, <expr><literal type="number">0x4</literal></expr>, <expr><literal type="number">0x11</literal></expr>,

<expr><literal type="number">0x6</literal></expr>, <expr><literal type="number">0x7</literal></expr>, <expr><literal type="number">0x12</literal></expr>,

<expr><literal type="number">0x9</literal></expr>, <expr><literal type="number">0xa</literal></expr>, <expr><literal type="number">0x13</literal></expr>,

<expr><literal type="number">0xc</literal></expr>, <expr><literal type="number">0xd</literal></expr>, <expr><literal type="number">0x14</literal></expr>,

<expr><literal type="number">0xf</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_u8</name></type> <name>perm3tb1</name> <init>= <expr><operator>(</operator><name>vec_u8</name><operator>)</operator> <block>{ <expr><literal type="number">0x0</literal></expr>, <expr><literal type="number">0x15</literal></expr>,

<expr><literal type="number">0x2</literal></expr>, <expr><literal type="number">0x3</literal></expr>, <expr><literal type="number">0x16</literal></expr>,

<expr><literal type="number">0x5</literal></expr>, <expr><literal type="number">0x6</literal></expr>, <expr><literal type="number">0x17</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name>yalpha</name> <operator>&lt;=</operator> <literal type="number">4096U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name>uvalpha</name> <operator>&lt;=</operator> <literal type="number">4096U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dstW</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">8</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>SETUP</name><argument_list>(<argument><expr><name>vy</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>buf0</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>vyalpha1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>buf1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>vyalpha</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vy32_l</name> <operator>=</operator> <call><name>vec_sra</name><argument_list>(<argument><expr><name>tmp3</name></expr></argument>, <argument><expr><name>shift10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vy32_r</name> <operator>=</operator> <call><name>vec_sra</name><argument_list>(<argument><expr><name>tmp4</name></expr></argument>, <argument><expr><name>shift10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SETUP</name><argument_list>(<argument><expr><name>vu</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ubuf0</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>vuvalpha1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ubuf1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>vuvalpha</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp3</name> <operator>=</operator> <call><name>vec_sub</name><argument_list>(<argument><expr><name>tmp3</name></expr></argument>, <argument><expr><name>dec128</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp4</name> <operator>=</operator> <call><name>vec_sub</name><argument_list>(<argument><expr><name>tmp4</name></expr></argument>, <argument><expr><name>dec128</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vu32_l</name> <operator>=</operator> <call><name>vec_sra</name><argument_list>(<argument><expr><name>tmp3</name></expr></argument>, <argument><expr><name>shift10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vu32_r</name> <operator>=</operator> <call><name>vec_sra</name><argument_list>(<argument><expr><name>tmp4</name></expr></argument>, <argument><expr><name>shift10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SETUP</name><argument_list>(<argument><expr><name>vv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vbuf0</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>vuvalpha1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vbuf1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>vuvalpha</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp3</name> <operator>=</operator> <call><name>vec_sub</name><argument_list>(<argument><expr><name>tmp3</name></expr></argument>, <argument><expr><name>dec128</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp4</name> <operator>=</operator> <call><name>vec_sub</name><argument_list>(<argument><expr><name>tmp4</name></expr></argument>, <argument><expr><name>dec128</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vv32_l</name> <operator>=</operator> <call><name>vec_sra</name><argument_list>(<argument><expr><name>tmp3</name></expr></argument>, <argument><expr><name>shift10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vv32_r</name> <operator>=</operator> <call><name>vec_sra</name><argument_list>(<argument><expr><name>tmp4</name></expr></argument>, <argument><expr><name>shift10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>hasAlpha</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>SETUP</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>abuf0</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>vyalpha1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>abuf1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>vyalpha</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp3</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>tmp3</name></expr></argument>, <argument><expr><name>add18</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp4</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>tmp4</name></expr></argument>, <argument><expr><name>add18</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp3</name> <operator>=</operator> <call><name>vec_sra</name><argument_list>(<argument><expr><name>tmp3</name></expr></argument>, <argument><expr><name>shift19</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp4</name> <operator>=</operator> <call><name>vec_sra</name><argument_list>(<argument><expr><name>tmp4</name></expr></argument>, <argument><expr><name>shift19</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>A</name> <operator>=</operator> <call><name>vec_packs</name><argument_list>(<argument><expr><name>tmp3</name></expr></argument>, <argument><expr><name>tmp4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ad</name> <operator>=</operator> <call><name>vec_packsu</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><operator>(</operator><name>vec_s16</name><operator>)</operator> <name>zero16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>ad</name> <operator>=</operator> <call><name>vec_splats</name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator> <literal type="number">255</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>vy32_l</name> <operator>=</operator> <call><name>vec_sub</name><argument_list>(<argument><expr><name>vy32_l</name></expr></argument>, <argument><expr><name>y_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vy32_r</name> <operator>=</operator> <call><name>vec_sub</name><argument_list>(<argument><expr><name>vy32_r</name></expr></argument>, <argument><expr><name>y_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vy32_l</name> <operator>=</operator> <call><name>vec_mul</name><argument_list>(<argument><expr><name>vy32_l</name></expr></argument>, <argument><expr><name>y_coeff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vy32_r</name> <operator>=</operator> <call><name>vec_mul</name><argument_list>(<argument><expr><name>vy32_r</name></expr></argument>, <argument><expr><name>y_coeff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vy32_l</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>vy32_l</name></expr></argument>, <argument><expr><name>y_add</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vy32_r</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>vy32_r</name></expr></argument>, <argument><expr><name>y_add</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>R_l</name> <operator>=</operator> <call><name>vec_mul</name><argument_list>(<argument><expr><name>vv32_l</name></expr></argument>, <argument><expr><name>v2r_coeff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>R_l</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>R_l</name></expr></argument>, <argument><expr><name>vy32_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>R_r</name> <operator>=</operator> <call><name>vec_mul</name><argument_list>(<argument><expr><name>vv32_r</name></expr></argument>, <argument><expr><name>v2r_coeff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>R_r</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>R_r</name></expr></argument>, <argument><expr><name>vy32_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>G_l</name> <operator>=</operator> <call><name>vec_mul</name><argument_list>(<argument><expr><name>vv32_l</name></expr></argument>, <argument><expr><name>v2g_coeff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp32</name> <operator>=</operator> <call><name>vec_mul</name><argument_list>(<argument><expr><name>vu32_l</name></expr></argument>, <argument><expr><name>u2g_coeff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>G_l</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>G_l</name></expr></argument>, <argument><expr><name>vy32_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>G_l</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>G_l</name></expr></argument>, <argument><expr><name>tmp32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>G_r</name> <operator>=</operator> <call><name>vec_mul</name><argument_list>(<argument><expr><name>vv32_r</name></expr></argument>, <argument><expr><name>v2g_coeff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp32</name> <operator>=</operator> <call><name>vec_mul</name><argument_list>(<argument><expr><name>vu32_r</name></expr></argument>, <argument><expr><name>u2g_coeff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>G_r</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>G_r</name></expr></argument>, <argument><expr><name>vy32_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>G_r</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>G_r</name></expr></argument>, <argument><expr><name>tmp32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>B_l</name> <operator>=</operator> <call><name>vec_mul</name><argument_list>(<argument><expr><name>vu32_l</name></expr></argument>, <argument><expr><name>u2b_coeff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>B_l</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>B_l</name></expr></argument>, <argument><expr><name>vy32_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>B_r</name> <operator>=</operator> <call><name>vec_mul</name><argument_list>(<argument><expr><name>vu32_r</name></expr></argument>, <argument><expr><name>u2b_coeff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>B_r</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>B_r</name></expr></argument>, <argument><expr><name>vy32_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>WRITERGB</name></expr></expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type>

<name>yuv2rgb_2_vsx_template</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name><name>ubuf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name><name>vbuf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name><name>abuf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dstW</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>yalpha</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>uvalpha</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hasAlpha</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>buf0</name> <init>= <expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>buf1</name> <init>= <expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>,

<decl><type ref="prev"><modifier>*</modifier></type><name>ubuf0</name> <init>= <expr><name><name>ubuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ubuf1</name> <init>= <expr><name><name>ubuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>,

<decl><type ref="prev"><modifier>*</modifier></type><name>vbuf0</name> <init>= <expr><name><name>vbuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>vbuf1</name> <init>= <expr><name><name>vbuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>,

<decl><type ref="prev"><modifier>*</modifier></type><name>abuf0</name> <init>= <expr><ternary><condition><expr><name>hasAlpha</name></expr> ?</condition><then> <expr><name><name>abuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>,

<decl><type ref="prev"><modifier>*</modifier></type><name>abuf1</name> <init>= <expr><ternary><condition><expr><name>hasAlpha</name></expr> ?</condition><then> <expr><name><name>abuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int16_t</name></type> <name>yalpha1</name> <init>= <expr><literal type="number">4096</literal> <operator>-</operator> <name>yalpha</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int16_t</name></type> <name>uvalpha1</name> <init>= <expr><literal type="number">4096</literal> <operator>-</operator> <name>uvalpha</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vec_s16</name></type> <name>vy</name></decl>, <decl><type ref="prev"/><name>vu</name></decl>, <decl><type ref="prev"/><name>vv</name></decl>, <decl><type ref="prev"/><name>A</name> <init>= <expr><call><name>vec_splat_s16</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vec_s32</name></type> <name>vy32_l</name></decl>, <decl><type ref="prev"/><name>vy32_r</name></decl>, <decl><type ref="prev"/><name>vu32_l</name></decl>, <decl><type ref="prev"/><name>vu32_r</name></decl>, <decl><type ref="prev"/><name>vv32_l</name></decl>, <decl><type ref="prev"/><name>vv32_r</name></decl>, <decl><type ref="prev"/><name>tmp32</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vec_s32</name></type> <name>R_l</name></decl>, <decl><type ref="prev"/><name>R_r</name></decl>, <decl><type ref="prev"/><name>G_l</name></decl>, <decl><type ref="prev"/><name>G_r</name></decl>, <decl><type ref="prev"/><name>B_l</name></decl>, <decl><type ref="prev"/><name>B_r</name></decl>, <decl><type ref="prev"/><name>vud32_l</name></decl>, <decl><type ref="prev"/><name>vud32_r</name></decl>, <decl><type ref="prev"/><name>vvd32_l</name></decl>, <decl><type ref="prev"/><name>vvd32_r</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vec_s32</name></type> <name>tmp</name></decl>, <decl><type ref="prev"/><name>tmp2</name></decl>, <decl><type ref="prev"/><name>tmp3</name></decl>, <decl><type ref="prev"/><name>tmp4</name></decl>, <decl><type ref="prev"/><name>tmp5</name></decl>, <decl><type ref="prev"/><name>tmp6</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vec_u16</name></type> <name>rd16</name></decl>, <decl><type ref="prev"/><name>gd16</name></decl>, <decl><type ref="prev"/><name>bd16</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vec_u8</name></type> <name>rd</name></decl>, <decl><type ref="prev"/><name>bd</name></decl>, <decl><type ref="prev"/><name>gd</name></decl>, <decl><type ref="prev"/><name>ad</name></decl>, <decl><type ref="prev"/><name>out0</name></decl>, <decl><type ref="prev"/><name>out1</name></decl>, <decl><type ref="prev"/><name>tmp8</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_s16</name></type> <name>vyalpha1</name> <init>= <expr><call><name>vec_splats</name><argument_list>(<argument><expr><name>yalpha1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_s16</name></type> <name>vuvalpha1</name> <init>= <expr><call><name>vec_splats</name><argument_list>(<argument><expr><name>uvalpha1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_s16</name></type> <name>vyalpha</name> <init>= <expr><call><name>vec_splats</name><argument_list>(<argument><expr><operator>(</operator><name>int16_t</name><operator>)</operator> <name>yalpha</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_s16</name></type> <name>vuvalpha</name> <init>= <expr><call><name>vec_splats</name><argument_list>(<argument><expr><operator>(</operator><name>int16_t</name><operator>)</operator> <name>uvalpha</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_u16</name></type> <name>zero16</name> <init>= <expr><call><name>vec_splat_u16</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_s32</name></type> <name>y_offset</name> <init>= <expr><call><name>vec_splats</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>yuv2rgb_y_offset</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_s32</name></type> <name>y_coeff</name> <init>= <expr><call><name>vec_splats</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>yuv2rgb_y_coeff</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_s32</name></type> <name>y_add</name> <init>= <expr><call><name>vec_splats</name><argument_list>(<argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">21</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_s32</name></type> <name>v2r_coeff</name> <init>= <expr><call><name>vec_splats</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>yuv2rgb_v2r_coeff</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_s32</name></type> <name>v2g_coeff</name> <init>= <expr><call><name>vec_splats</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>yuv2rgb_v2g_coeff</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_s32</name></type> <name>u2g_coeff</name> <init>= <expr><call><name>vec_splats</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>yuv2rgb_u2g_coeff</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_s32</name></type> <name>u2b_coeff</name> <init>= <expr><call><name>vec_splats</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>yuv2rgb_u2b_coeff</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_s32</name></type> <name>rgbclip</name> <init>= <expr><call><name>vec_splats</name><argument_list>(<argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">30</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_s32</name></type> <name>zero32</name> <init>= <expr><call><name>vec_splat_s32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_u32</name></type> <name>shift19</name> <init>= <expr><call><name>vec_splats</name><argument_list>(<argument><expr><literal type="number">19U</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_u32</name></type> <name>shift22</name> <init>= <expr><call><name>vec_splats</name><argument_list>(<argument><expr><literal type="number">22U</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_u32</name></type> <name>shift10</name> <init>= <expr><call><name>vec_splat_u32</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_s32</name></type> <name>dec128</name> <init>= <expr><call><name>vec_splats</name><argument_list>(<argument><expr><literal type="number">128</literal> <operator>&lt;&lt;</operator> <literal type="number">19</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_s32</name></type> <name>add18</name> <init>= <expr><call><name>vec_splats</name><argument_list>(<argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">18</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_u8</name></type> <name>doubleleft</name> <init>= <expr><operator>(</operator><name>vec_u8</name><operator>)</operator> <block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>,

<expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>,

<expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_u8</name></type> <name>doubleright</name> <init>= <expr><operator>(</operator><name>vec_u8</name><operator>)</operator> <block>{<expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr>,

<expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr>,

<expr><literal type="number">12</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">15</literal></expr>,

<expr><literal type="number">12</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">15</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_u8</name></type> <name>perm3rg0</name> <init>= <expr><operator>(</operator><name>vec_u8</name><operator>)</operator> <block>{<expr><literal type="number">0x0</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0x1</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0x2</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0x3</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0x4</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0x5</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_u8</name></type> <name>perm3rg1</name> <init>= <expr><operator>(</operator><name>vec_u8</name><operator>)</operator> <block>{ <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0x6</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0x7</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_u8</name></type> <name>perm3tb0</name> <init>= <expr><operator>(</operator><name>vec_u8</name><operator>)</operator> <block>{<expr><literal type="number">0x0</literal></expr>, <expr><literal type="number">0x1</literal></expr>, <expr><literal type="number">0x10</literal></expr>,

<expr><literal type="number">0x3</literal></expr>, <expr><literal type="number">0x4</literal></expr>, <expr><literal type="number">0x11</literal></expr>,

<expr><literal type="number">0x6</literal></expr>, <expr><literal type="number">0x7</literal></expr>, <expr><literal type="number">0x12</literal></expr>,

<expr><literal type="number">0x9</literal></expr>, <expr><literal type="number">0xa</literal></expr>, <expr><literal type="number">0x13</literal></expr>,

<expr><literal type="number">0xc</literal></expr>, <expr><literal type="number">0xd</literal></expr>, <expr><literal type="number">0x14</literal></expr>,

<expr><literal type="number">0xf</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_u8</name></type> <name>perm3tb1</name> <init>= <expr><operator>(</operator><name>vec_u8</name><operator>)</operator> <block>{ <expr><literal type="number">0x0</literal></expr>, <expr><literal type="number">0x15</literal></expr>,

<expr><literal type="number">0x2</literal></expr>, <expr><literal type="number">0x3</literal></expr>, <expr><literal type="number">0x16</literal></expr>,

<expr><literal type="number">0x5</literal></expr>, <expr><literal type="number">0x6</literal></expr>, <expr><literal type="number">0x17</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name>yalpha</name> <operator>&lt;=</operator> <literal type="number">4096U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name>uvalpha</name> <operator>&lt;=</operator> <literal type="number">4096U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>i</name> <argument_list type="generic">&lt; <argument><expr><operator>(</operator><name>dstW</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument> &gt;</argument_list></name><operator>&gt;</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">8</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>SETUP</name><argument_list>(<argument><expr><name>vy</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>buf0</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>vyalpha1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>buf1</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>vyalpha</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vy32_l</name> <operator>=</operator> <call><name>vec_sra</name><argument_list>(<argument><expr><name>tmp3</name></expr></argument>, <argument><expr><name>shift10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vy32_r</name> <operator>=</operator> <call><name>vec_sra</name><argument_list>(<argument><expr><name>tmp4</name></expr></argument>, <argument><expr><name>shift10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SETUP</name><argument_list>(<argument><expr><name>vu</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ubuf0</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>vuvalpha1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ubuf1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>vuvalpha</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp3</name> <operator>=</operator> <call><name>vec_sub</name><argument_list>(<argument><expr><name>tmp3</name></expr></argument>, <argument><expr><name>dec128</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp4</name> <operator>=</operator> <call><name>vec_sub</name><argument_list>(<argument><expr><name>tmp4</name></expr></argument>, <argument><expr><name>dec128</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vu32_l</name> <operator>=</operator> <call><name>vec_sra</name><argument_list>(<argument><expr><name>tmp3</name></expr></argument>, <argument><expr><name>shift10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vu32_r</name> <operator>=</operator> <call><name>vec_sra</name><argument_list>(<argument><expr><name>tmp4</name></expr></argument>, <argument><expr><name>shift10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SETUP</name><argument_list>(<argument><expr><name>vv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vbuf0</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>vuvalpha1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vbuf1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>vuvalpha</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp3</name> <operator>=</operator> <call><name>vec_sub</name><argument_list>(<argument><expr><name>tmp3</name></expr></argument>, <argument><expr><name>dec128</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp4</name> <operator>=</operator> <call><name>vec_sub</name><argument_list>(<argument><expr><name>tmp4</name></expr></argument>, <argument><expr><name>dec128</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vv32_l</name> <operator>=</operator> <call><name>vec_sra</name><argument_list>(<argument><expr><name>tmp3</name></expr></argument>, <argument><expr><name>shift10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vv32_r</name> <operator>=</operator> <call><name>vec_sra</name><argument_list>(<argument><expr><name>tmp4</name></expr></argument>, <argument><expr><name>shift10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>hasAlpha</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>SETUP</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>abuf0</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>vyalpha1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>abuf1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>vyalpha</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp3</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>tmp3</name></expr></argument>, <argument><expr><name>add18</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp4</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>tmp4</name></expr></argument>, <argument><expr><name>add18</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp3</name> <operator>=</operator> <call><name>vec_sra</name><argument_list>(<argument><expr><name>tmp3</name></expr></argument>, <argument><expr><name>shift19</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp4</name> <operator>=</operator> <call><name>vec_sra</name><argument_list>(<argument><expr><name>tmp4</name></expr></argument>, <argument><expr><name>shift19</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>A</name> <operator>=</operator> <call><name>vec_packs</name><argument_list>(<argument><expr><name>tmp3</name></expr></argument>, <argument><expr><name>tmp4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ad</name> <operator>=</operator> <call><name>vec_packsu</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><operator>(</operator><name>vec_s16</name><operator>)</operator> <name>zero16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>ad</name> <operator>=</operator> <call><name>vec_splats</name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator> <literal type="number">255</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>vy32_l</name> <operator>=</operator> <call><name>vec_sub</name><argument_list>(<argument><expr><name>vy32_l</name></expr></argument>, <argument><expr><name>y_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vy32_r</name> <operator>=</operator> <call><name>vec_sub</name><argument_list>(<argument><expr><name>vy32_r</name></expr></argument>, <argument><expr><name>y_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vy32_l</name> <operator>=</operator> <call><name>vec_mul</name><argument_list>(<argument><expr><name>vy32_l</name></expr></argument>, <argument><expr><name>y_coeff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vy32_r</name> <operator>=</operator> <call><name>vec_mul</name><argument_list>(<argument><expr><name>vy32_r</name></expr></argument>, <argument><expr><name>y_coeff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vy32_l</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>vy32_l</name></expr></argument>, <argument><expr><name>y_add</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vy32_r</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>vy32_r</name></expr></argument>, <argument><expr><name>y_add</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vud32_l</name> <operator>=</operator> <call><name>vec_perm</name><argument_list>(<argument><expr><name>vu32_l</name></expr></argument>, <argument><expr><name>vu32_l</name></expr></argument>, <argument><expr><name>doubleleft</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vud32_r</name> <operator>=</operator> <call><name>vec_perm</name><argument_list>(<argument><expr><name>vu32_l</name></expr></argument>, <argument><expr><name>vu32_l</name></expr></argument>, <argument><expr><name>doubleright</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vvd32_l</name> <operator>=</operator> <call><name>vec_perm</name><argument_list>(<argument><expr><name>vv32_l</name></expr></argument>, <argument><expr><name>vv32_l</name></expr></argument>, <argument><expr><name>doubleleft</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vvd32_r</name> <operator>=</operator> <call><name>vec_perm</name><argument_list>(<argument><expr><name>vv32_l</name></expr></argument>, <argument><expr><name>vv32_l</name></expr></argument>, <argument><expr><name>doubleright</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>R_l</name> <operator>=</operator> <call><name>vec_mul</name><argument_list>(<argument><expr><name>vvd32_l</name></expr></argument>, <argument><expr><name>v2r_coeff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>R_l</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>R_l</name></expr></argument>, <argument><expr><name>vy32_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>R_r</name> <operator>=</operator> <call><name>vec_mul</name><argument_list>(<argument><expr><name>vvd32_r</name></expr></argument>, <argument><expr><name>v2r_coeff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>R_r</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>R_r</name></expr></argument>, <argument><expr><name>vy32_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>G_l</name> <operator>=</operator> <call><name>vec_mul</name><argument_list>(<argument><expr><name>vvd32_l</name></expr></argument>, <argument><expr><name>v2g_coeff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp32</name> <operator>=</operator> <call><name>vec_mul</name><argument_list>(<argument><expr><name>vud32_l</name></expr></argument>, <argument><expr><name>u2g_coeff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>G_l</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>G_l</name></expr></argument>, <argument><expr><name>vy32_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>G_l</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>G_l</name></expr></argument>, <argument><expr><name>tmp32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>G_r</name> <operator>=</operator> <call><name>vec_mul</name><argument_list>(<argument><expr><name>vvd32_r</name></expr></argument>, <argument><expr><name>v2g_coeff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp32</name> <operator>=</operator> <call><name>vec_mul</name><argument_list>(<argument><expr><name>vud32_r</name></expr></argument>, <argument><expr><name>u2g_coeff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>G_r</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>G_r</name></expr></argument>, <argument><expr><name>vy32_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>G_r</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>G_r</name></expr></argument>, <argument><expr><name>tmp32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>B_l</name> <operator>=</operator> <call><name>vec_mul</name><argument_list>(<argument><expr><name>vud32_l</name></expr></argument>, <argument><expr><name>u2b_coeff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>B_l</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>B_l</name></expr></argument>, <argument><expr><name>vy32_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>B_r</name> <operator>=</operator> <call><name>vec_mul</name><argument_list>(<argument><expr><name>vud32_r</name></expr></argument>, <argument><expr><name>u2b_coeff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>B_r</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>B_r</name></expr></argument>, <argument><expr><name>vy32_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>WRITERGB</name></type>

<name>SETUP</name><argument_list>(<argument><expr><name>vy</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>buf0</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name>vyalpha1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>buf1</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name>vyalpha</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name>vy32_l</name> <operator>=</operator> <call><name>vec_sra</name><argument_list>(<argument><expr><name>tmp3</name></expr></argument>, <argument><expr><name>shift10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vy32_r</name> <operator>=</operator> <call><name>vec_sra</name><argument_list>(<argument><expr><name>tmp4</name></expr></argument>, <argument><expr><name>shift10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vy32_l</name> <operator>=</operator> <call><name>vec_sub</name><argument_list>(<argument><expr><name>vy32_l</name></expr></argument>, <argument><expr><name>y_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vy32_r</name> <operator>=</operator> <call><name>vec_sub</name><argument_list>(<argument><expr><name>vy32_r</name></expr></argument>, <argument><expr><name>y_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vy32_l</name> <operator>=</operator> <call><name>vec_mul</name><argument_list>(<argument><expr><name>vy32_l</name></expr></argument>, <argument><expr><name>y_coeff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vy32_r</name> <operator>=</operator> <call><name>vec_mul</name><argument_list>(<argument><expr><name>vy32_r</name></expr></argument>, <argument><expr><name>y_coeff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vy32_l</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>vy32_l</name></expr></argument>, <argument><expr><name>y_add</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vy32_r</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>vy32_r</name></expr></argument>, <argument><expr><name>y_add</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vud32_l</name> <operator>=</operator> <call><name>vec_perm</name><argument_list>(<argument><expr><name>vu32_r</name></expr></argument>, <argument><expr><name>vu32_r</name></expr></argument>, <argument><expr><name>doubleleft</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vud32_r</name> <operator>=</operator> <call><name>vec_perm</name><argument_list>(<argument><expr><name>vu32_r</name></expr></argument>, <argument><expr><name>vu32_r</name></expr></argument>, <argument><expr><name>doubleright</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vvd32_l</name> <operator>=</operator> <call><name>vec_perm</name><argument_list>(<argument><expr><name>vv32_r</name></expr></argument>, <argument><expr><name>vv32_r</name></expr></argument>, <argument><expr><name>doubleleft</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vvd32_r</name> <operator>=</operator> <call><name>vec_perm</name><argument_list>(<argument><expr><name>vv32_r</name></expr></argument>, <argument><expr><name>vv32_r</name></expr></argument>, <argument><expr><name>doubleright</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>R_l</name> <operator>=</operator> <call><name>vec_mul</name><argument_list>(<argument><expr><name>vvd32_l</name></expr></argument>, <argument><expr><name>v2r_coeff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>R_l</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>R_l</name></expr></argument>, <argument><expr><name>vy32_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>R_r</name> <operator>=</operator> <call><name>vec_mul</name><argument_list>(<argument><expr><name>vvd32_r</name></expr></argument>, <argument><expr><name>v2r_coeff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>R_r</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>R_r</name></expr></argument>, <argument><expr><name>vy32_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>G_l</name> <operator>=</operator> <call><name>vec_mul</name><argument_list>(<argument><expr><name>vvd32_l</name></expr></argument>, <argument><expr><name>v2g_coeff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp32</name> <operator>=</operator> <call><name>vec_mul</name><argument_list>(<argument><expr><name>vud32_l</name></expr></argument>, <argument><expr><name>u2g_coeff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>G_l</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>G_l</name></expr></argument>, <argument><expr><name>vy32_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>G_l</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>G_l</name></expr></argument>, <argument><expr><name>tmp32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>G_r</name> <operator>=</operator> <call><name>vec_mul</name><argument_list>(<argument><expr><name>vvd32_r</name></expr></argument>, <argument><expr><name>v2g_coeff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp32</name> <operator>=</operator> <call><name>vec_mul</name><argument_list>(<argument><expr><name>vud32_r</name></expr></argument>, <argument><expr><name>u2g_coeff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>G_r</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>G_r</name></expr></argument>, <argument><expr><name>vy32_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>G_r</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>G_r</name></expr></argument>, <argument><expr><name>tmp32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>B_l</name> <operator>=</operator> <call><name>vec_mul</name><argument_list>(<argument><expr><name>vud32_l</name></expr></argument>, <argument><expr><name>u2b_coeff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>B_l</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>B_l</name></expr></argument>, <argument><expr><name>vy32_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>B_r</name> <operator>=</operator> <call><name>vec_mul</name><argument_list>(<argument><expr><name>vud32_r</name></expr></argument>, <argument><expr><name>u2b_coeff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>B_r</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>B_r</name></expr></argument>, <argument><expr><name>vy32_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>WRITERGB</name></expr></expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SETUP</name></cpp:undef>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type>

<name>yuv2rgb_full_1_vsx_template</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>buf0</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name><name>ubuf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name><name>vbuf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>abuf0</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dstW</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>uvalpha</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>target</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>hasAlpha</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>ubuf0</name> <init>= <expr><name><name>ubuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>vbuf0</name> <init>= <expr><name><name>vbuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>ubuf1</name> <init>= <expr><name><name>ubuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>vbuf1</name> <init>= <expr><name><name>vbuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vec_s16</name></type> <name>vy</name></decl>, <decl><type ref="prev"/><name>vu</name></decl>, <decl><type ref="prev"/><name>vv</name></decl>, <decl><type ref="prev"/><name>A</name> <init>= <expr><call><name>vec_splat_s16</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>tmp16</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vec_s32</name></type> <name>vy32_l</name></decl>, <decl><type ref="prev"/><name>vy32_r</name></decl>, <decl><type ref="prev"/><name>vu32_l</name></decl>, <decl><type ref="prev"/><name>vu32_r</name></decl>, <decl><type ref="prev"/><name>vv32_l</name></decl>, <decl><type ref="prev"/><name>vv32_r</name></decl>, <decl><type ref="prev"/><name>tmp32</name></decl>, <decl><type ref="prev"/><name>tmp32_2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vec_s32</name></type> <name>R_l</name></decl>, <decl><type ref="prev"/><name>R_r</name></decl>, <decl><type ref="prev"/><name>G_l</name></decl>, <decl><type ref="prev"/><name>G_r</name></decl>, <decl><type ref="prev"/><name>B_l</name></decl>, <decl><type ref="prev"/><name>B_r</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vec_u16</name></type> <name>rd16</name></decl>, <decl><type ref="prev"/><name>gd16</name></decl>, <decl><type ref="prev"/><name>bd16</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vec_u8</name></type> <name>rd</name></decl>, <decl><type ref="prev"/><name>bd</name></decl>, <decl><type ref="prev"/><name>gd</name></decl>, <decl><type ref="prev"/><name>ad</name></decl>, <decl><type ref="prev"/><name>out0</name></decl>, <decl><type ref="prev"/><name>out1</name></decl>, <decl><type ref="prev"/><name>tmp8</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_u16</name></type> <name>zero16</name> <init>= <expr><call><name>vec_splat_u16</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_s32</name></type> <name>y_offset</name> <init>= <expr><call><name>vec_splats</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>yuv2rgb_y_offset</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_s32</name></type> <name>y_coeff</name> <init>= <expr><call><name>vec_splats</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>yuv2rgb_y_coeff</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_s32</name></type> <name>y_add</name> <init>= <expr><call><name>vec_splats</name><argument_list>(<argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">21</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_s32</name></type> <name>v2r_coeff</name> <init>= <expr><call><name>vec_splats</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>yuv2rgb_v2r_coeff</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_s32</name></type> <name>v2g_coeff</name> <init>= <expr><call><name>vec_splats</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>yuv2rgb_v2g_coeff</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_s32</name></type> <name>u2g_coeff</name> <init>= <expr><call><name>vec_splats</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>yuv2rgb_u2g_coeff</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_s32</name></type> <name>u2b_coeff</name> <init>= <expr><call><name>vec_splats</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>yuv2rgb_u2b_coeff</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_s32</name></type> <name>rgbclip</name> <init>= <expr><call><name>vec_splats</name><argument_list>(<argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">30</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_s32</name></type> <name>zero32</name> <init>= <expr><call><name>vec_splat_s32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_u32</name></type> <name>shift2</name> <init>= <expr><call><name>vec_splat_u32</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_u32</name></type> <name>shift22</name> <init>= <expr><call><name>vec_splats</name><argument_list>(<argument><expr><literal type="number">22U</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_u16</name></type> <name>sub7</name> <init>= <expr><call><name>vec_splats</name><argument_list>(<argument><expr><operator>(</operator><name>uint16_t</name><operator>)</operator> <operator>(</operator><literal type="number">128</literal> <operator>&lt;&lt;</operator> <literal type="number">7</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_u16</name></type> <name>sub8</name> <init>= <expr><call><name>vec_splats</name><argument_list>(<argument><expr><operator>(</operator><name>uint16_t</name><operator>)</operator> <operator>(</operator><literal type="number">128</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_s16</name></type> <name>mul4</name> <init>= <expr><call><name>vec_splat_s16</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_s16</name></type> <name>mul8</name> <init>= <expr><call><name>vec_splat_s16</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_s16</name></type> <name>add64</name> <init>= <expr><call><name>vec_splat_s16</name><argument_list>(<argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_u16</name></type> <name>shift7</name> <init>= <expr><call><name>vec_splat_u16</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_s16</name></type> <name>max255</name> <init>= <expr><call><name>vec_splat_s16</name><argument_list>(<argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_u8</name></type> <name>perm3rg0</name> <init>= <expr><operator>(</operator><name>vec_u8</name><operator>)</operator> <block>{<expr><literal type="number">0x0</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0x1</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0x2</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0x3</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0x4</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0x5</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_u8</name></type> <name>perm3rg1</name> <init>= <expr><operator>(</operator><name>vec_u8</name><operator>)</operator> <block>{ <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0x6</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0x7</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_u8</name></type> <name>perm3tb0</name> <init>= <expr><operator>(</operator><name>vec_u8</name><operator>)</operator> <block>{<expr><literal type="number">0x0</literal></expr>, <expr><literal type="number">0x1</literal></expr>, <expr><literal type="number">0x10</literal></expr>,

<expr><literal type="number">0x3</literal></expr>, <expr><literal type="number">0x4</literal></expr>, <expr><literal type="number">0x11</literal></expr>,

<expr><literal type="number">0x6</literal></expr>, <expr><literal type="number">0x7</literal></expr>, <expr><literal type="number">0x12</literal></expr>,

<expr><literal type="number">0x9</literal></expr>, <expr><literal type="number">0xa</literal></expr>, <expr><literal type="number">0x13</literal></expr>,

<expr><literal type="number">0xc</literal></expr>, <expr><literal type="number">0xd</literal></expr>, <expr><literal type="number">0x14</literal></expr>,

<expr><literal type="number">0xf</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_u8</name></type> <name>perm3tb1</name> <init>= <expr><operator>(</operator><name>vec_u8</name><operator>)</operator> <block>{ <expr><literal type="number">0x0</literal></expr>, <expr><literal type="number">0x15</literal></expr>,

<expr><literal type="number">0x2</literal></expr>, <expr><literal type="number">0x3</literal></expr>, <expr><literal type="number">0x16</literal></expr>,

<expr><literal type="number">0x5</literal></expr>, <expr><literal type="number">0x6</literal></expr>, <expr><literal type="number">0x17</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dstW</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">8</literal></expr></incr>)</control> <block>{<block_content> 

<expr_stmt><expr><name>vy</name> <operator>=</operator> <call><name>vec_ld</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>buf0</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vy32_l</name> <operator>=</operator> <call><name>vec_unpackh</name><argument_list>(<argument><expr><name>vy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vy32_r</name> <operator>=</operator> <call><name>vec_unpackl</name><argument_list>(<argument><expr><name>vy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vy32_l</name> <operator>=</operator> <call><name>vec_sl</name><argument_list>(<argument><expr><name>vy32_l</name></expr></argument>, <argument><expr><name>shift2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vy32_r</name> <operator>=</operator> <call><name>vec_sl</name><argument_list>(<argument><expr><name>vy32_r</name></expr></argument>, <argument><expr><name>shift2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vu</name> <operator>=</operator> <call><name>vec_ld</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ubuf0</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vv</name> <operator>=</operator> <call><name>vec_ld</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vbuf0</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>uvalpha</name> <operator>&lt;</operator> <literal type="number">2048</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>vu</name> <operator>=</operator> <operator>(</operator><name>vec_s16</name><operator>)</operator> <call><name>vec_sub</name><argument_list>(<argument><expr><operator>(</operator><name>vec_u16</name><operator>)</operator> <name>vu</name></expr></argument>, <argument><expr><name>sub7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vv</name> <operator>=</operator> <operator>(</operator><name>vec_s16</name><operator>)</operator> <call><name>vec_sub</name><argument_list>(<argument><expr><operator>(</operator><name>vec_u16</name><operator>)</operator> <name>vv</name></expr></argument>, <argument><expr><name>sub7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp32</name> <operator>=</operator> <call><name>vec_mule</name><argument_list>(<argument><expr><name>vu</name></expr></argument>, <argument><expr><name>mul4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp32_2</name> <operator>=</operator> <call><name>vec_mulo</name><argument_list>(<argument><expr><name>vu</name></expr></argument>, <argument><expr><name>mul4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vu32_l</name> <operator>=</operator> <call><name>vec_mergeh</name><argument_list>(<argument><expr><name>tmp32</name></expr></argument>, <argument><expr><name>tmp32_2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vu32_r</name> <operator>=</operator> <call><name>vec_mergel</name><argument_list>(<argument><expr><name>tmp32</name></expr></argument>, <argument><expr><name>tmp32_2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp32</name> <operator>=</operator> <call><name>vec_mule</name><argument_list>(<argument><expr><name>vv</name></expr></argument>, <argument><expr><name>mul4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp32_2</name> <operator>=</operator> <call><name>vec_mulo</name><argument_list>(<argument><expr><name>vv</name></expr></argument>, <argument><expr><name>mul4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vv32_l</name> <operator>=</operator> <call><name>vec_mergeh</name><argument_list>(<argument><expr><name>tmp32</name></expr></argument>, <argument><expr><name>tmp32_2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vv32_r</name> <operator>=</operator> <call><name>vec_mergel</name><argument_list>(<argument><expr><name>tmp32</name></expr></argument>, <argument><expr><name>tmp32_2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>tmp16</name> <operator>=</operator> <call><name>vec_ld</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ubuf1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vu</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>vu</name></expr></argument>, <argument><expr><name>tmp16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vu</name> <operator>=</operator> <operator>(</operator><name>vec_s16</name><operator>)</operator> <call><name>vec_sub</name><argument_list>(<argument><expr><operator>(</operator><name>vec_u16</name><operator>)</operator> <name>vu</name></expr></argument>, <argument><expr><name>sub8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp16</name> <operator>=</operator> <call><name>vec_ld</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vbuf1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vv</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>vv</name></expr></argument>, <argument><expr><name>tmp16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vv</name> <operator>=</operator> <operator>(</operator><name>vec_s16</name><operator>)</operator> <call><name>vec_sub</name><argument_list>(<argument><expr><operator>(</operator><name>vec_u16</name><operator>)</operator> <name>vv</name></expr></argument>, <argument><expr><name>sub8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vu32_l</name> <operator>=</operator> <call><name>vec_mule</name><argument_list>(<argument><expr><name>vu</name></expr></argument>, <argument><expr><name>mul8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vu32_r</name> <operator>=</operator> <call><name>vec_mulo</name><argument_list>(<argument><expr><name>vu</name></expr></argument>, <argument><expr><name>mul8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vv32_l</name> <operator>=</operator> <call><name>vec_mule</name><argument_list>(<argument><expr><name>vv</name></expr></argument>, <argument><expr><name>mul8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vv32_r</name> <operator>=</operator> <call><name>vec_mulo</name><argument_list>(<argument><expr><name>vv</name></expr></argument>, <argument><expr><name>mul8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>hasAlpha</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>A</name> <operator>=</operator> <call><name>vec_ld</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>abuf0</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>A</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>add64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>A</name> <operator>=</operator> <call><name>vec_sr</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>shift7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>A</name> <operator>=</operator> <call><name>vec_max</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>max255</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ad</name> <operator>=</operator> <call><name>vec_packsu</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><operator>(</operator><name>vec_s16</name><operator>)</operator> <name>zero16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>ad</name> <operator>=</operator> <call><name>vec_splats</name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator> <literal type="number">255</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>vy32_l</name> <operator>=</operator> <call><name>vec_sub</name><argument_list>(<argument><expr><name>vy32_l</name></expr></argument>, <argument><expr><name>y_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vy32_r</name> <operator>=</operator> <call><name>vec_sub</name><argument_list>(<argument><expr><name>vy32_r</name></expr></argument>, <argument><expr><name>y_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vy32_l</name> <operator>=</operator> <call><name>vec_mul</name><argument_list>(<argument><expr><name>vy32_l</name></expr></argument>, <argument><expr><name>y_coeff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vy32_r</name> <operator>=</operator> <call><name>vec_mul</name><argument_list>(<argument><expr><name>vy32_r</name></expr></argument>, <argument><expr><name>y_coeff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vy32_l</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>vy32_l</name></expr></argument>, <argument><expr><name>y_add</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vy32_r</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>vy32_r</name></expr></argument>, <argument><expr><name>y_add</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>R_l</name> <operator>=</operator> <call><name>vec_mul</name><argument_list>(<argument><expr><name>vv32_l</name></expr></argument>, <argument><expr><name>v2r_coeff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>R_l</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>R_l</name></expr></argument>, <argument><expr><name>vy32_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>R_r</name> <operator>=</operator> <call><name>vec_mul</name><argument_list>(<argument><expr><name>vv32_r</name></expr></argument>, <argument><expr><name>v2r_coeff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>R_r</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>R_r</name></expr></argument>, <argument><expr><name>vy32_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>G_l</name> <operator>=</operator> <call><name>vec_mul</name><argument_list>(<argument><expr><name>vv32_l</name></expr></argument>, <argument><expr><name>v2g_coeff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp32</name> <operator>=</operator> <call><name>vec_mul</name><argument_list>(<argument><expr><name>vu32_l</name></expr></argument>, <argument><expr><name>u2g_coeff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>G_l</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>G_l</name></expr></argument>, <argument><expr><name>vy32_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>G_l</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>G_l</name></expr></argument>, <argument><expr><name>tmp32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>G_r</name> <operator>=</operator> <call><name>vec_mul</name><argument_list>(<argument><expr><name>vv32_r</name></expr></argument>, <argument><expr><name>v2g_coeff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp32</name> <operator>=</operator> <call><name>vec_mul</name><argument_list>(<argument><expr><name>vu32_r</name></expr></argument>, <argument><expr><name>u2g_coeff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>G_r</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>G_r</name></expr></argument>, <argument><expr><name>vy32_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>G_r</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>G_r</name></expr></argument>, <argument><expr><name>tmp32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>B_l</name> <operator>=</operator> <call><name>vec_mul</name><argument_list>(<argument><expr><name>vu32_l</name></expr></argument>, <argument><expr><name>u2b_coeff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>B_l</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>B_l</name></expr></argument>, <argument><expr><name>vy32_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>B_r</name> <operator>=</operator> <call><name>vec_mul</name><argument_list>(<argument><expr><name>vu32_r</name></expr></argument>, <argument><expr><name>u2b_coeff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>B_r</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>B_r</name></expr></argument>, <argument><expr><name>vy32_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>WRITERGB</name></expr></expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type>

<name>yuv2rgb_1_vsx_template</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>buf0</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name><name>ubuf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name><name>vbuf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>abuf0</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dstW</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>uvalpha</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>target</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>hasAlpha</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>ubuf0</name> <init>= <expr><name><name>ubuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>vbuf0</name> <init>= <expr><name><name>vbuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>ubuf1</name> <init>= <expr><name><name>ubuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>vbuf1</name> <init>= <expr><name><name>vbuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vec_s16</name></type> <name>vy</name></decl>, <decl><type ref="prev"/><name>vu</name></decl>, <decl><type ref="prev"/><name>vv</name></decl>, <decl><type ref="prev"/><name>A</name> <init>= <expr><call><name>vec_splat_s16</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>tmp16</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vec_s32</name></type> <name>vy32_l</name></decl>, <decl><type ref="prev"/><name>vy32_r</name></decl>, <decl><type ref="prev"/><name>vu32_l</name></decl>, <decl><type ref="prev"/><name>vu32_r</name></decl>, <decl><type ref="prev"/><name>vv32_l</name></decl>, <decl><type ref="prev"/><name>vv32_r</name></decl>, <decl><type ref="prev"/><name>tmp32</name></decl>, <decl><type ref="prev"/><name>tmp32_2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vec_s32</name></type> <name>vud32_l</name></decl>, <decl><type ref="prev"/><name>vud32_r</name></decl>, <decl><type ref="prev"/><name>vvd32_l</name></decl>, <decl><type ref="prev"/><name>vvd32_r</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vec_s32</name></type> <name>R_l</name></decl>, <decl><type ref="prev"/><name>R_r</name></decl>, <decl><type ref="prev"/><name>G_l</name></decl>, <decl><type ref="prev"/><name>G_r</name></decl>, <decl><type ref="prev"/><name>B_l</name></decl>, <decl><type ref="prev"/><name>B_r</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vec_u16</name></type> <name>rd16</name></decl>, <decl><type ref="prev"/><name>gd16</name></decl>, <decl><type ref="prev"/><name>bd16</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vec_u8</name></type> <name>rd</name></decl>, <decl><type ref="prev"/><name>bd</name></decl>, <decl><type ref="prev"/><name>gd</name></decl>, <decl><type ref="prev"/><name>ad</name></decl>, <decl><type ref="prev"/><name>out0</name></decl>, <decl><type ref="prev"/><name>out1</name></decl>, <decl><type ref="prev"/><name>tmp8</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_u16</name></type> <name>zero16</name> <init>= <expr><call><name>vec_splat_u16</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_s32</name></type> <name>y_offset</name> <init>= <expr><call><name>vec_splats</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>yuv2rgb_y_offset</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_s32</name></type> <name>y_coeff</name> <init>= <expr><call><name>vec_splats</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>yuv2rgb_y_coeff</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_s32</name></type> <name>y_add</name> <init>= <expr><call><name>vec_splats</name><argument_list>(<argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">21</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_s32</name></type> <name>v2r_coeff</name> <init>= <expr><call><name>vec_splats</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>yuv2rgb_v2r_coeff</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_s32</name></type> <name>v2g_coeff</name> <init>= <expr><call><name>vec_splats</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>yuv2rgb_v2g_coeff</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_s32</name></type> <name>u2g_coeff</name> <init>= <expr><call><name>vec_splats</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>yuv2rgb_u2g_coeff</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_s32</name></type> <name>u2b_coeff</name> <init>= <expr><call><name>vec_splats</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>yuv2rgb_u2b_coeff</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_s32</name></type> <name>rgbclip</name> <init>= <expr><call><name>vec_splats</name><argument_list>(<argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">30</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_s32</name></type> <name>zero32</name> <init>= <expr><call><name>vec_splat_s32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_u32</name></type> <name>shift2</name> <init>= <expr><call><name>vec_splat_u32</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_u32</name></type> <name>shift22</name> <init>= <expr><call><name>vec_splats</name><argument_list>(<argument><expr><literal type="number">22U</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_u16</name></type> <name>sub7</name> <init>= <expr><call><name>vec_splats</name><argument_list>(<argument><expr><operator>(</operator><name>uint16_t</name><operator>)</operator> <operator>(</operator><literal type="number">128</literal> <operator>&lt;&lt;</operator> <literal type="number">7</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_u16</name></type> <name>sub8</name> <init>= <expr><call><name>vec_splats</name><argument_list>(<argument><expr><operator>(</operator><name>uint16_t</name><operator>)</operator> <operator>(</operator><literal type="number">128</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_s16</name></type> <name>mul4</name> <init>= <expr><call><name>vec_splat_s16</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_s16</name></type> <name>mul8</name> <init>= <expr><call><name>vec_splat_s16</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_s16</name></type> <name>add64</name> <init>= <expr><call><name>vec_splat_s16</name><argument_list>(<argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_u16</name></type> <name>shift7</name> <init>= <expr><call><name>vec_splat_u16</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_s16</name></type> <name>max255</name> <init>= <expr><call><name>vec_splat_s16</name><argument_list>(<argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_u8</name></type> <name>doubleleft</name> <init>= <expr><operator>(</operator><name>vec_u8</name><operator>)</operator> <block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>,

<expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>,

<expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_u8</name></type> <name>doubleright</name> <init>= <expr><operator>(</operator><name>vec_u8</name><operator>)</operator> <block>{<expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr>,

<expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr>,

<expr><literal type="number">12</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">15</literal></expr>,

<expr><literal type="number">12</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">15</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_u8</name></type> <name>perm3rg0</name> <init>= <expr><operator>(</operator><name>vec_u8</name><operator>)</operator> <block>{<expr><literal type="number">0x0</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0x1</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0x2</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0x3</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0x4</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0x5</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_u8</name></type> <name>perm3rg1</name> <init>= <expr><operator>(</operator><name>vec_u8</name><operator>)</operator> <block>{ <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0x6</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0x7</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_u8</name></type> <name>perm3tb0</name> <init>= <expr><operator>(</operator><name>vec_u8</name><operator>)</operator> <block>{<expr><literal type="number">0x0</literal></expr>, <expr><literal type="number">0x1</literal></expr>, <expr><literal type="number">0x10</literal></expr>,

<expr><literal type="number">0x3</literal></expr>, <expr><literal type="number">0x4</literal></expr>, <expr><literal type="number">0x11</literal></expr>,

<expr><literal type="number">0x6</literal></expr>, <expr><literal type="number">0x7</literal></expr>, <expr><literal type="number">0x12</literal></expr>,

<expr><literal type="number">0x9</literal></expr>, <expr><literal type="number">0xa</literal></expr>, <expr><literal type="number">0x13</literal></expr>,

<expr><literal type="number">0xc</literal></expr>, <expr><literal type="number">0xd</literal></expr>, <expr><literal type="number">0x14</literal></expr>,

<expr><literal type="number">0xf</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_u8</name></type> <name>perm3tb1</name> <init>= <expr><operator>(</operator><name>vec_u8</name><operator>)</operator> <block>{ <expr><literal type="number">0x0</literal></expr>, <expr><literal type="number">0x15</literal></expr>,

<expr><literal type="number">0x2</literal></expr>, <expr><literal type="number">0x3</literal></expr>, <expr><literal type="number">0x16</literal></expr>,

<expr><literal type="number">0x5</literal></expr>, <expr><literal type="number">0x6</literal></expr>, <expr><literal type="number">0x17</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>i</name> <argument_list type="generic">&lt; <argument><expr><operator>(</operator><name>dstW</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument> &gt;</argument_list></name><operator>&gt;</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">8</literal></expr></incr>)</control> <block>{<block_content> 

<expr_stmt><expr><name>vy</name> <operator>=</operator> <call><name>vec_ld</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>buf0</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vy32_l</name> <operator>=</operator> <call><name>vec_unpackh</name><argument_list>(<argument><expr><name>vy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vy32_r</name> <operator>=</operator> <call><name>vec_unpackl</name><argument_list>(<argument><expr><name>vy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vy32_l</name> <operator>=</operator> <call><name>vec_sl</name><argument_list>(<argument><expr><name>vy32_l</name></expr></argument>, <argument><expr><name>shift2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vy32_r</name> <operator>=</operator> <call><name>vec_sl</name><argument_list>(<argument><expr><name>vy32_r</name></expr></argument>, <argument><expr><name>shift2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vu</name> <operator>=</operator> <call><name>vec_ld</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ubuf0</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vv</name> <operator>=</operator> <call><name>vec_ld</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vbuf0</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>uvalpha</name> <operator>&lt;</operator> <literal type="number">2048</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>vu</name> <operator>=</operator> <operator>(</operator><name>vec_s16</name><operator>)</operator> <call><name>vec_sub</name><argument_list>(<argument><expr><operator>(</operator><name>vec_u16</name><operator>)</operator> <name>vu</name></expr></argument>, <argument><expr><name>sub7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vv</name> <operator>=</operator> <operator>(</operator><name>vec_s16</name><operator>)</operator> <call><name>vec_sub</name><argument_list>(<argument><expr><operator>(</operator><name>vec_u16</name><operator>)</operator> <name>vv</name></expr></argument>, <argument><expr><name>sub7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp32</name> <operator>=</operator> <call><name>vec_mule</name><argument_list>(<argument><expr><name>vu</name></expr></argument>, <argument><expr><name>mul4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp32_2</name> <operator>=</operator> <call><name>vec_mulo</name><argument_list>(<argument><expr><name>vu</name></expr></argument>, <argument><expr><name>mul4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vu32_l</name> <operator>=</operator> <call><name>vec_mergeh</name><argument_list>(<argument><expr><name>tmp32</name></expr></argument>, <argument><expr><name>tmp32_2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vu32_r</name> <operator>=</operator> <call><name>vec_mergel</name><argument_list>(<argument><expr><name>tmp32</name></expr></argument>, <argument><expr><name>tmp32_2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp32</name> <operator>=</operator> <call><name>vec_mule</name><argument_list>(<argument><expr><name>vv</name></expr></argument>, <argument><expr><name>mul4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp32_2</name> <operator>=</operator> <call><name>vec_mulo</name><argument_list>(<argument><expr><name>vv</name></expr></argument>, <argument><expr><name>mul4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vv32_l</name> <operator>=</operator> <call><name>vec_mergeh</name><argument_list>(<argument><expr><name>tmp32</name></expr></argument>, <argument><expr><name>tmp32_2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vv32_r</name> <operator>=</operator> <call><name>vec_mergel</name><argument_list>(<argument><expr><name>tmp32</name></expr></argument>, <argument><expr><name>tmp32_2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>tmp16</name> <operator>=</operator> <call><name>vec_ld</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ubuf1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vu</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>vu</name></expr></argument>, <argument><expr><name>tmp16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vu</name> <operator>=</operator> <operator>(</operator><name>vec_s16</name><operator>)</operator> <call><name>vec_sub</name><argument_list>(<argument><expr><operator>(</operator><name>vec_u16</name><operator>)</operator> <name>vu</name></expr></argument>, <argument><expr><name>sub8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp16</name> <operator>=</operator> <call><name>vec_ld</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vbuf1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vv</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>vv</name></expr></argument>, <argument><expr><name>tmp16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vv</name> <operator>=</operator> <operator>(</operator><name>vec_s16</name><operator>)</operator> <call><name>vec_sub</name><argument_list>(<argument><expr><operator>(</operator><name>vec_u16</name><operator>)</operator> <name>vv</name></expr></argument>, <argument><expr><name>sub8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vu32_l</name> <operator>=</operator> <call><name>vec_mule</name><argument_list>(<argument><expr><name>vu</name></expr></argument>, <argument><expr><name>mul8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vu32_r</name> <operator>=</operator> <call><name>vec_mulo</name><argument_list>(<argument><expr><name>vu</name></expr></argument>, <argument><expr><name>mul8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vv32_l</name> <operator>=</operator> <call><name>vec_mule</name><argument_list>(<argument><expr><name>vv</name></expr></argument>, <argument><expr><name>mul8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vv32_r</name> <operator>=</operator> <call><name>vec_mulo</name><argument_list>(<argument><expr><name>vv</name></expr></argument>, <argument><expr><name>mul8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>hasAlpha</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>A</name> <operator>=</operator> <call><name>vec_ld</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>abuf0</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>A</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>add64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>A</name> <operator>=</operator> <call><name>vec_sr</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>shift7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>A</name> <operator>=</operator> <call><name>vec_max</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>max255</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ad</name> <operator>=</operator> <call><name>vec_packsu</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><operator>(</operator><name>vec_s16</name><operator>)</operator> <name>zero16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>ad</name> <operator>=</operator> <call><name>vec_splats</name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator> <literal type="number">255</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>vy32_l</name> <operator>=</operator> <call><name>vec_sub</name><argument_list>(<argument><expr><name>vy32_l</name></expr></argument>, <argument><expr><name>y_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vy32_r</name> <operator>=</operator> <call><name>vec_sub</name><argument_list>(<argument><expr><name>vy32_r</name></expr></argument>, <argument><expr><name>y_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vy32_l</name> <operator>=</operator> <call><name>vec_mul</name><argument_list>(<argument><expr><name>vy32_l</name></expr></argument>, <argument><expr><name>y_coeff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vy32_r</name> <operator>=</operator> <call><name>vec_mul</name><argument_list>(<argument><expr><name>vy32_r</name></expr></argument>, <argument><expr><name>y_coeff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vy32_l</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>vy32_l</name></expr></argument>, <argument><expr><name>y_add</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vy32_r</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>vy32_r</name></expr></argument>, <argument><expr><name>y_add</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vud32_l</name> <operator>=</operator> <call><name>vec_perm</name><argument_list>(<argument><expr><name>vu32_l</name></expr></argument>, <argument><expr><name>vu32_l</name></expr></argument>, <argument><expr><name>doubleleft</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vud32_r</name> <operator>=</operator> <call><name>vec_perm</name><argument_list>(<argument><expr><name>vu32_l</name></expr></argument>, <argument><expr><name>vu32_l</name></expr></argument>, <argument><expr><name>doubleright</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vvd32_l</name> <operator>=</operator> <call><name>vec_perm</name><argument_list>(<argument><expr><name>vv32_l</name></expr></argument>, <argument><expr><name>vv32_l</name></expr></argument>, <argument><expr><name>doubleleft</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vvd32_r</name> <operator>=</operator> <call><name>vec_perm</name><argument_list>(<argument><expr><name>vv32_l</name></expr></argument>, <argument><expr><name>vv32_l</name></expr></argument>, <argument><expr><name>doubleright</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>R_l</name> <operator>=</operator> <call><name>vec_mul</name><argument_list>(<argument><expr><name>vvd32_l</name></expr></argument>, <argument><expr><name>v2r_coeff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>R_l</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>R_l</name></expr></argument>, <argument><expr><name>vy32_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>R_r</name> <operator>=</operator> <call><name>vec_mul</name><argument_list>(<argument><expr><name>vvd32_r</name></expr></argument>, <argument><expr><name>v2r_coeff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>R_r</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>R_r</name></expr></argument>, <argument><expr><name>vy32_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>G_l</name> <operator>=</operator> <call><name>vec_mul</name><argument_list>(<argument><expr><name>vvd32_l</name></expr></argument>, <argument><expr><name>v2g_coeff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp32</name> <operator>=</operator> <call><name>vec_mul</name><argument_list>(<argument><expr><name>vud32_l</name></expr></argument>, <argument><expr><name>u2g_coeff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>G_l</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>G_l</name></expr></argument>, <argument><expr><name>vy32_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>G_l</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>G_l</name></expr></argument>, <argument><expr><name>tmp32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>G_r</name> <operator>=</operator> <call><name>vec_mul</name><argument_list>(<argument><expr><name>vvd32_r</name></expr></argument>, <argument><expr><name>v2g_coeff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp32</name> <operator>=</operator> <call><name>vec_mul</name><argument_list>(<argument><expr><name>vud32_r</name></expr></argument>, <argument><expr><name>u2g_coeff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>G_r</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>G_r</name></expr></argument>, <argument><expr><name>vy32_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>G_r</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>G_r</name></expr></argument>, <argument><expr><name>tmp32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>B_l</name> <operator>=</operator> <call><name>vec_mul</name><argument_list>(<argument><expr><name>vud32_l</name></expr></argument>, <argument><expr><name>u2b_coeff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>B_l</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>B_l</name></expr></argument>, <argument><expr><name>vy32_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>B_r</name> <operator>=</operator> <call><name>vec_mul</name><argument_list>(<argument><expr><name>vud32_r</name></expr></argument>, <argument><expr><name>u2b_coeff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>B_r</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>B_r</name></expr></argument>, <argument><expr><name>vy32_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>WRITERGB</name></type>

<name>vy</name> <init>= <expr><call><name>vec_ld</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>buf0</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>vy32_l</name> <operator>=</operator> <call><name>vec_unpackh</name><argument_list>(<argument><expr><name>vy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vy32_r</name> <operator>=</operator> <call><name>vec_unpackl</name><argument_list>(<argument><expr><name>vy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vy32_l</name> <operator>=</operator> <call><name>vec_sl</name><argument_list>(<argument><expr><name>vy32_l</name></expr></argument>, <argument><expr><name>shift2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vy32_r</name> <operator>=</operator> <call><name>vec_sl</name><argument_list>(<argument><expr><name>vy32_r</name></expr></argument>, <argument><expr><name>shift2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vy32_l</name> <operator>=</operator> <call><name>vec_sub</name><argument_list>(<argument><expr><name>vy32_l</name></expr></argument>, <argument><expr><name>y_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vy32_r</name> <operator>=</operator> <call><name>vec_sub</name><argument_list>(<argument><expr><name>vy32_r</name></expr></argument>, <argument><expr><name>y_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vy32_l</name> <operator>=</operator> <call><name>vec_mul</name><argument_list>(<argument><expr><name>vy32_l</name></expr></argument>, <argument><expr><name>y_coeff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vy32_r</name> <operator>=</operator> <call><name>vec_mul</name><argument_list>(<argument><expr><name>vy32_r</name></expr></argument>, <argument><expr><name>y_coeff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vy32_l</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>vy32_l</name></expr></argument>, <argument><expr><name>y_add</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vy32_r</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>vy32_r</name></expr></argument>, <argument><expr><name>y_add</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vud32_l</name> <operator>=</operator> <call><name>vec_perm</name><argument_list>(<argument><expr><name>vu32_r</name></expr></argument>, <argument><expr><name>vu32_r</name></expr></argument>, <argument><expr><name>doubleleft</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vud32_r</name> <operator>=</operator> <call><name>vec_perm</name><argument_list>(<argument><expr><name>vu32_r</name></expr></argument>, <argument><expr><name>vu32_r</name></expr></argument>, <argument><expr><name>doubleright</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vvd32_l</name> <operator>=</operator> <call><name>vec_perm</name><argument_list>(<argument><expr><name>vv32_r</name></expr></argument>, <argument><expr><name>vv32_r</name></expr></argument>, <argument><expr><name>doubleleft</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vvd32_r</name> <operator>=</operator> <call><name>vec_perm</name><argument_list>(<argument><expr><name>vv32_r</name></expr></argument>, <argument><expr><name>vv32_r</name></expr></argument>, <argument><expr><name>doubleright</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>R_l</name> <operator>=</operator> <call><name>vec_mul</name><argument_list>(<argument><expr><name>vvd32_l</name></expr></argument>, <argument><expr><name>v2r_coeff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>R_l</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>R_l</name></expr></argument>, <argument><expr><name>vy32_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>R_r</name> <operator>=</operator> <call><name>vec_mul</name><argument_list>(<argument><expr><name>vvd32_r</name></expr></argument>, <argument><expr><name>v2r_coeff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>R_r</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>R_r</name></expr></argument>, <argument><expr><name>vy32_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>G_l</name> <operator>=</operator> <call><name>vec_mul</name><argument_list>(<argument><expr><name>vvd32_l</name></expr></argument>, <argument><expr><name>v2g_coeff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp32</name> <operator>=</operator> <call><name>vec_mul</name><argument_list>(<argument><expr><name>vud32_l</name></expr></argument>, <argument><expr><name>u2g_coeff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>G_l</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>G_l</name></expr></argument>, <argument><expr><name>vy32_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>G_l</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>G_l</name></expr></argument>, <argument><expr><name>tmp32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>G_r</name> <operator>=</operator> <call><name>vec_mul</name><argument_list>(<argument><expr><name>vvd32_r</name></expr></argument>, <argument><expr><name>v2g_coeff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp32</name> <operator>=</operator> <call><name>vec_mul</name><argument_list>(<argument><expr><name>vud32_r</name></expr></argument>, <argument><expr><name>u2g_coeff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>G_r</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>G_r</name></expr></argument>, <argument><expr><name>vy32_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>G_r</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>G_r</name></expr></argument>, <argument><expr><name>tmp32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>B_l</name> <operator>=</operator> <call><name>vec_mul</name><argument_list>(<argument><expr><name>vud32_l</name></expr></argument>, <argument><expr><name>u2b_coeff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>B_l</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>B_l</name></expr></argument>, <argument><expr><name>vy32_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>B_r</name> <operator>=</operator> <call><name>vec_mul</name><argument_list>(<argument><expr><name>vud32_r</name></expr></argument>, <argument><expr><name>u2b_coeff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>B_r</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>B_r</name></expr></argument>, <argument><expr><name>vy32_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>WRITERGB</name></expr></expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>WRITERGB</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YUV2RGBWRAPPERX</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>base</name></type></parameter>, <parameter><type><name>ext</name></type></parameter>, <parameter><type><name>fmt</name></type></parameter>, <parameter><type><name>hasAlpha</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void name ##ext ##_X_vsx(SwsContext *c, const int16_t *lumFilter, const int16_t **lumSrc, int lumFilterSize, const int16_t *chrFilter, const int16_t **chrUSrc, const int16_t **chrVSrc, int chrFilterSize, const int16_t **alpSrc, uint8_t *dest, int dstW, int y) { name ##base ##_X_vsx_template(c, lumFilter, lumSrc, lumFilterSize, chrFilter, chrUSrc, chrVSrc, chrFilterSize, alpSrc, dest, dstW, y, fmt, hasAlpha); }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YUV2RGBWRAPPERX2</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>base</name></type></parameter>, <parameter><type><name>ext</name></type></parameter>, <parameter><type><name>fmt</name></type></parameter>, <parameter><type><name>hasAlpha</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void name ##ext ##_2_vsx(SwsContext *c, const int16_t *buf[2], const int16_t *ubuf[2], const int16_t *vbuf[2], const int16_t *abuf[2], uint8_t *dest, int dstW, int yalpha, int uvalpha, int y) { name ##base ##_2_vsx_template(c, buf, ubuf, vbuf, abuf, dest, dstW, yalpha, uvalpha, y, fmt, hasAlpha); }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YUV2RGBWRAPPER</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>base</name></type></parameter>, <parameter><type><name>ext</name></type></parameter>, <parameter><type><name>fmt</name></type></parameter>, <parameter><type><name>hasAlpha</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void name ##ext ##_1_vsx(SwsContext *c, const int16_t *buf0, const int16_t *ubuf[2], const int16_t *vbuf[2], const int16_t *abuf0, uint8_t *dest, int dstW, int uvalpha, int y) { name ##base ##_1_vsx_template(c, buf0, ubuf, vbuf, abuf0, dest, dstW, uvalpha, y, fmt, hasAlpha); }</cpp:value></cpp:define>

<macro><name>YUV2RGBWRAPPER</name><argument_list>(<argument>yuv2</argument>, <argument>rgb</argument>, <argument>bgrx32</argument>, <argument>AV_PIX_FMT_BGRA</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>

<macro><name>YUV2RGBWRAPPER</name><argument_list>(<argument>yuv2</argument>, <argument>rgb</argument>, <argument>rgbx32</argument>, <argument>AV_PIX_FMT_RGBA</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>

<macro><name>YUV2RGBWRAPPER</name><argument_list>(<argument>yuv2</argument>, <argument>rgb</argument>, <argument>xrgb32</argument>, <argument>AV_PIX_FMT_ARGB</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>

<macro><name>YUV2RGBWRAPPER</name><argument_list>(<argument>yuv2</argument>, <argument>rgb</argument>, <argument>xbgr32</argument>, <argument>AV_PIX_FMT_ABGR</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>

<macro><name>YUV2RGBWRAPPER</name><argument_list>(<argument>yuv2</argument>, <argument>rgb</argument>, <argument>rgb24</argument>, <argument>AV_PIX_FMT_RGB24</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>

<macro><name>YUV2RGBWRAPPER</name><argument_list>(<argument>yuv2</argument>, <argument>rgb</argument>, <argument>bgr24</argument>, <argument>AV_PIX_FMT_BGR24</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>

<macro><name>YUV2RGBWRAPPERX2</name><argument_list>(<argument>yuv2</argument>, <argument>rgb</argument>, <argument>bgrx32</argument>, <argument>AV_PIX_FMT_BGRA</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>

<macro><name>YUV2RGBWRAPPERX2</name><argument_list>(<argument>yuv2</argument>, <argument>rgb</argument>, <argument>rgbx32</argument>, <argument>AV_PIX_FMT_RGBA</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>

<macro><name>YUV2RGBWRAPPERX2</name><argument_list>(<argument>yuv2</argument>, <argument>rgb</argument>, <argument>xrgb32</argument>, <argument>AV_PIX_FMT_ARGB</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>

<macro><name>YUV2RGBWRAPPERX2</name><argument_list>(<argument>yuv2</argument>, <argument>rgb</argument>, <argument>xbgr32</argument>, <argument>AV_PIX_FMT_ABGR</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>

<macro><name>YUV2RGBWRAPPERX2</name><argument_list>(<argument>yuv2</argument>, <argument>rgb</argument>, <argument>rgb24</argument>, <argument>AV_PIX_FMT_RGB24</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>

<macro><name>YUV2RGBWRAPPERX2</name><argument_list>(<argument>yuv2</argument>, <argument>rgb</argument>, <argument>bgr24</argument>, <argument>AV_PIX_FMT_BGR24</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>

<macro><name>YUV2RGBWRAPPER</name><argument_list>(<argument>yuv2</argument>, <argument>rgb_full</argument>, <argument>bgrx32_full</argument>, <argument>AV_PIX_FMT_BGRA</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>

<macro><name>YUV2RGBWRAPPER</name><argument_list>(<argument>yuv2</argument>, <argument>rgb_full</argument>, <argument>rgbx32_full</argument>, <argument>AV_PIX_FMT_RGBA</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>

<macro><name>YUV2RGBWRAPPER</name><argument_list>(<argument>yuv2</argument>, <argument>rgb_full</argument>, <argument>xrgb32_full</argument>, <argument>AV_PIX_FMT_ARGB</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>

<macro><name>YUV2RGBWRAPPER</name><argument_list>(<argument>yuv2</argument>, <argument>rgb_full</argument>, <argument>xbgr32_full</argument>, <argument>AV_PIX_FMT_ABGR</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>

<macro><name>YUV2RGBWRAPPER</name><argument_list>(<argument>yuv2</argument>, <argument>rgb_full</argument>, <argument>rgb24_full</argument>, <argument>AV_PIX_FMT_RGB24</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>

<macro><name>YUV2RGBWRAPPER</name><argument_list>(<argument>yuv2</argument>, <argument>rgb_full</argument>, <argument>bgr24_full</argument>, <argument>AV_PIX_FMT_BGR24</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>

<macro><name>YUV2RGBWRAPPERX2</name><argument_list>(<argument>yuv2</argument>, <argument>rgb_full</argument>, <argument>bgrx32_full</argument>, <argument>AV_PIX_FMT_BGRA</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>

<macro><name>YUV2RGBWRAPPERX2</name><argument_list>(<argument>yuv2</argument>, <argument>rgb_full</argument>, <argument>rgbx32_full</argument>, <argument>AV_PIX_FMT_RGBA</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>

<macro><name>YUV2RGBWRAPPERX2</name><argument_list>(<argument>yuv2</argument>, <argument>rgb_full</argument>, <argument>xrgb32_full</argument>, <argument>AV_PIX_FMT_ARGB</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>

<macro><name>YUV2RGBWRAPPERX2</name><argument_list>(<argument>yuv2</argument>, <argument>rgb_full</argument>, <argument>xbgr32_full</argument>, <argument>AV_PIX_FMT_ABGR</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>

<macro><name>YUV2RGBWRAPPERX2</name><argument_list>(<argument>yuv2</argument>, <argument>rgb_full</argument>, <argument>rgb24_full</argument>, <argument>AV_PIX_FMT_RGB24</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>

<macro><name>YUV2RGBWRAPPERX2</name><argument_list>(<argument>yuv2</argument>, <argument>rgb_full</argument>, <argument>bgr24_full</argument>, <argument>AV_PIX_FMT_BGR24</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>

<macro><name>YUV2RGBWRAPPERX</name><argument_list>(<argument>yuv2</argument>, <argument>rgb_full</argument>, <argument>bgrx32_full</argument>, <argument>AV_PIX_FMT_BGRA</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>

<macro><name>YUV2RGBWRAPPERX</name><argument_list>(<argument>yuv2</argument>, <argument>rgb_full</argument>, <argument>rgbx32_full</argument>, <argument>AV_PIX_FMT_RGBA</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>

<macro><name>YUV2RGBWRAPPERX</name><argument_list>(<argument>yuv2</argument>, <argument>rgb_full</argument>, <argument>xrgb32_full</argument>, <argument>AV_PIX_FMT_ARGB</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>

<macro><name>YUV2RGBWRAPPERX</name><argument_list>(<argument>yuv2</argument>, <argument>rgb_full</argument>, <argument>xbgr32_full</argument>, <argument>AV_PIX_FMT_ABGR</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>

<macro><name>YUV2RGBWRAPPERX</name><argument_list>(<argument>yuv2</argument>, <argument>rgb_full</argument>, <argument>rgb24_full</argument>, <argument>AV_PIX_FMT_RGB24</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>

<macro><name>YUV2RGBWRAPPERX</name><argument_list>(<argument>yuv2</argument>, <argument>rgb_full</argument>, <argument>bgr24_full</argument>, <argument>AV_PIX_FMT_BGR24</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type>

<name>write422</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>vec_s16</name></type> <name>vy1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vec_s16</name></type> <name>vy2</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>vec_s16</name></type> <name>vu</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vec_s16</name></type> <name>vv</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>target</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vec_u8</name></type> <name>vd1</name></decl>, <decl><type ref="prev"/><name>vd2</name></decl>, <decl><type ref="prev"/><name>tmp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_u8</name></type> <name>yuyv1</name> <init>= <expr><operator>(</operator><name>vec_u8</name><operator>)</operator> <block>{

<expr><literal type="number">0x0</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x1</literal></expr>, <expr><literal type="number">0x18</literal></expr>,

<expr><literal type="number">0x2</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x3</literal></expr>, <expr><literal type="number">0x19</literal></expr>,

<expr><literal type="number">0x4</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x5</literal></expr>, <expr><literal type="number">0x1a</literal></expr>,

<expr><literal type="number">0x6</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x7</literal></expr>, <expr><literal type="number">0x1b</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_u8</name></type> <name>yuyv2</name> <init>= <expr><operator>(</operator><name>vec_u8</name><operator>)</operator> <block>{

<expr><literal type="number">0x8</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x9</literal></expr>, <expr><literal type="number">0x1c</literal></expr>,

<expr><literal type="number">0xa</literal></expr>, <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0xb</literal></expr>, <expr><literal type="number">0x1d</literal></expr>,

<expr><literal type="number">0xc</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0xd</literal></expr>, <expr><literal type="number">0x1e</literal></expr>,

<expr><literal type="number">0xe</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0xf</literal></expr>, <expr><literal type="number">0x1f</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_u8</name></type> <name>yvyu1</name> <init>= <expr><operator>(</operator><name>vec_u8</name><operator>)</operator> <block>{

<expr><literal type="number">0x0</literal></expr>, <expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0x1</literal></expr>, <expr><literal type="number">0x10</literal></expr>,

<expr><literal type="number">0x2</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0x3</literal></expr>, <expr><literal type="number">0x11</literal></expr>,

<expr><literal type="number">0x4</literal></expr>, <expr><literal type="number">0x1a</literal></expr>, <expr><literal type="number">0x5</literal></expr>, <expr><literal type="number">0x12</literal></expr>,

<expr><literal type="number">0x6</literal></expr>, <expr><literal type="number">0x1b</literal></expr>, <expr><literal type="number">0x7</literal></expr>, <expr><literal type="number">0x13</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_u8</name></type> <name>yvyu2</name> <init>= <expr><operator>(</operator><name>vec_u8</name><operator>)</operator> <block>{

<expr><literal type="number">0x8</literal></expr>, <expr><literal type="number">0x1c</literal></expr>, <expr><literal type="number">0x9</literal></expr>, <expr><literal type="number">0x14</literal></expr>,

<expr><literal type="number">0xa</literal></expr>, <expr><literal type="number">0x1d</literal></expr>, <expr><literal type="number">0xb</literal></expr>, <expr><literal type="number">0x15</literal></expr>,

<expr><literal type="number">0xc</literal></expr>, <expr><literal type="number">0x1e</literal></expr>, <expr><literal type="number">0xd</literal></expr>, <expr><literal type="number">0x16</literal></expr>,

<expr><literal type="number">0xe</literal></expr>, <expr><literal type="number">0x1f</literal></expr>, <expr><literal type="number">0xf</literal></expr>, <expr><literal type="number">0x17</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_u8</name></type> <name>uyvy1</name> <init>= <expr><operator>(</operator><name>vec_u8</name><operator>)</operator> <block>{

<expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x0</literal></expr>, <expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0x1</literal></expr>,

<expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x2</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0x3</literal></expr>,

<expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x4</literal></expr>, <expr><literal type="number">0x1a</literal></expr>, <expr><literal type="number">0x5</literal></expr>,

<expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x6</literal></expr>, <expr><literal type="number">0x1b</literal></expr>, <expr><literal type="number">0x7</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_u8</name></type> <name>uyvy2</name> <init>= <expr><operator>(</operator><name>vec_u8</name><operator>)</operator> <block>{

<expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x8</literal></expr>, <expr><literal type="number">0x1c</literal></expr>, <expr><literal type="number">0x9</literal></expr>,

<expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0xa</literal></expr>, <expr><literal type="number">0x1d</literal></expr>, <expr><literal type="number">0xb</literal></expr>,

<expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0xc</literal></expr>, <expr><literal type="number">0x1e</literal></expr>, <expr><literal type="number">0xd</literal></expr>,

<expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0xe</literal></expr>, <expr><literal type="number">0x1f</literal></expr>, <expr><literal type="number">0xf</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>vd1</name> <operator>=</operator> <call><name>vec_packsu</name><argument_list>(<argument><expr><name>vy1</name></expr></argument>, <argument><expr><name>vy2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vd2</name> <operator>=</operator> <call><name>vec_packsu</name><argument_list>(<argument><expr><name>vu</name></expr></argument>, <argument><expr><name>vv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>target</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_PIX_FMT_YUYV422</name></expr>:</case>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>vec_perm</name><argument_list>(<argument><expr><name>vd1</name></expr></argument>, <argument><expr><name>vd2</name></expr></argument>, <argument><expr><name>yuyv1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vec_st</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>vec_perm</name><argument_list>(<argument><expr><name>vd1</name></expr></argument>, <argument><expr><name>vd2</name></expr></argument>, <argument><expr><name>yuyv2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vec_st</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_YVYU422</name></expr>:</case>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>vec_perm</name><argument_list>(<argument><expr><name>vd1</name></expr></argument>, <argument><expr><name>vd2</name></expr></argument>, <argument><expr><name>yvyu1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vec_st</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>vec_perm</name><argument_list>(<argument><expr><name>vd1</name></expr></argument>, <argument><expr><name>vd2</name></expr></argument>, <argument><expr><name>yvyu2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vec_st</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_UYVY422</name></expr>:</case>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>vec_perm</name><argument_list>(<argument><expr><name>vd1</name></expr></argument>, <argument><expr><name>vd2</name></expr></argument>, <argument><expr><name>uyvy1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vec_st</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>vec_perm</name><argument_list>(<argument><expr><name>vd1</name></expr></argument>, <argument><expr><name>vd2</name></expr></argument>, <argument><expr><name>uyvy2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vec_st</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type>

<name>yuv2422_X_vsx_template</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>lumFilter</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>lumSrc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lumFilterSize</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>chrFilter</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>chrUSrc</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>chrVSrc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>chrFilterSize</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>alpSrc</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dstW</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>target</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vec_s16</name></type> <name>vy1</name></decl>, <decl><type ref="prev"/><name>vy2</name></decl>, <decl><type ref="prev"/><name>vu</name></decl>, <decl><type ref="prev"/><name>vv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vec_s32</name></type> <name><name>vy32</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>vu32</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>vv32</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name>tmp</name></decl>, <decl><type ref="prev"/><name>tmp2</name></decl>, <decl><type ref="prev"/><name>tmp3</name></decl>, <decl><type ref="prev"/><name>tmp4</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vec_s16</name></type> <name><name>vlumFilter</name><index>[<expr><name>MAX_FILTER_SIZE</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>vchrFilter</name><index>[<expr><name>MAX_FILTER_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_s32</name></type> <name>start</name> <init>= <expr><call><name>vec_splats</name><argument_list>(<argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">18</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_u32</name></type> <name>shift19</name> <init>= <expr><call><name>vec_splats</name><argument_list>(<argument><expr><literal type="number">19U</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>lumFilterSize</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>vlumFilter</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>vec_splats</name><argument_list>(<argument><expr><name><name>lumFilter</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>chrFilterSize</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>vchrFilter</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>vec_splats</name><argument_list>(<argument><expr><name><name>chrFilter</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><operator>(</operator><name>dstW</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">8</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>vy32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator>

<name><name>vy32</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator>

<name><name>vy32</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator>

<name><name>vy32</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator>

<name><name>vu32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator>

<name><name>vu32</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator>

<name><name>vv32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator>

<name><name>vv32</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>start</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>lumFilterSize</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>vv</name> <operator>=</operator> <call><name>vec_ld</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>lumSrc</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>vec_mule</name><argument_list>(<argument><expr><name>vv</name></expr></argument>, <argument><expr><name><name>vlumFilter</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp2</name> <operator>=</operator> <call><name>vec_mulo</name><argument_list>(<argument><expr><name>vv</name></expr></argument>, <argument><expr><name><name>vlumFilter</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp3</name> <operator>=</operator> <call><name>vec_mergeh</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp4</name> <operator>=</operator> <call><name>vec_mergel</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vy32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>vec_adds</name><argument_list>(<argument><expr><name><name>vy32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>tmp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vy32</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>vec_adds</name><argument_list>(<argument><expr><name><name>vy32</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>tmp4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vv</name> <operator>=</operator> <call><name>vec_ld</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>lumSrc</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>vec_mule</name><argument_list>(<argument><expr><name>vv</name></expr></argument>, <argument><expr><name><name>vlumFilter</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp2</name> <operator>=</operator> <call><name>vec_mulo</name><argument_list>(<argument><expr><name>vv</name></expr></argument>, <argument><expr><name><name>vlumFilter</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp3</name> <operator>=</operator> <call><name>vec_mergeh</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp4</name> <operator>=</operator> <call><name>vec_mergel</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vy32</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>vec_adds</name><argument_list>(<argument><expr><name><name>vy32</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>tmp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vy32</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>vec_adds</name><argument_list>(<argument><expr><name><name>vy32</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>tmp4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>chrFilterSize</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>vv</name> <operator>=</operator> <call><name>vec_ld</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>chrUSrc</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>vec_mule</name><argument_list>(<argument><expr><name>vv</name></expr></argument>, <argument><expr><name><name>vchrFilter</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp2</name> <operator>=</operator> <call><name>vec_mulo</name><argument_list>(<argument><expr><name>vv</name></expr></argument>, <argument><expr><name><name>vchrFilter</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp3</name> <operator>=</operator> <call><name>vec_mergeh</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp4</name> <operator>=</operator> <call><name>vec_mergel</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vu32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>vec_adds</name><argument_list>(<argument><expr><name><name>vu32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>tmp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vu32</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>vec_adds</name><argument_list>(<argument><expr><name><name>vu32</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>tmp4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vv</name> <operator>=</operator> <call><name>vec_ld</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>chrVSrc</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>vec_mule</name><argument_list>(<argument><expr><name>vv</name></expr></argument>, <argument><expr><name><name>vchrFilter</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp2</name> <operator>=</operator> <call><name>vec_mulo</name><argument_list>(<argument><expr><name>vv</name></expr></argument>, <argument><expr><name><name>vchrFilter</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp3</name> <operator>=</operator> <call><name>vec_mergeh</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp4</name> <operator>=</operator> <call><name>vec_mergel</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vv32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>vec_adds</name><argument_list>(<argument><expr><name><name>vv32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>tmp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vv32</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>vec_adds</name><argument_list>(<argument><expr><name><name>vv32</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>tmp4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>vy32</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>vec_sra</name><argument_list>(<argument><expr><name><name>vy32</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>shift19</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>vu32</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>vec_sra</name><argument_list>(<argument><expr><name><name>vu32</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>shift19</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vv32</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>vec_sra</name><argument_list>(<argument><expr><name><name>vv32</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>shift19</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>vy1</name> <operator>=</operator> <call><name>vec_packs</name><argument_list>(<argument><expr><name><name>vy32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>vy32</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vy2</name> <operator>=</operator> <call><name>vec_packs</name><argument_list>(<argument><expr><name><name>vy32</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>vy32</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vu</name> <operator>=</operator> <call><name>vec_packs</name><argument_list>(<argument><expr><name><name>vu32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>vu32</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vv</name> <operator>=</operator> <call><name>vec_packs</name><argument_list>(<argument><expr><name><name>vv32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>vv32</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>write422</name><argument_list>(<argument><expr><name>vy1</name></expr></argument>, <argument><expr><name>vy2</name></expr></argument>, <argument><expr><name>vu</name></expr></argument>, <argument><expr><name>vv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dest</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SETUP</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>buf0</name></type></parameter>, <parameter><type><name>buf1</name></type></parameter>, <parameter><type><name>alpha</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ x = vec_ld(0, buf0); tmp = vec_mule(x, alpha); tmp2 = vec_mulo(x, alpha); tmp3 = vec_mergeh(tmp, tmp2); tmp4 = vec_mergel(tmp, tmp2); x = vec_ld(0, buf1); tmp = vec_mule(x, alpha); tmp2 = vec_mulo(x, alpha); tmp5 = vec_mergeh(tmp, tmp2); tmp6 = vec_mergel(tmp, tmp2); tmp3 = vec_add(tmp3, tmp5); tmp4 = vec_add(tmp4, tmp6); tmp3 = vec_sra(tmp3, shift19); tmp4 = vec_sra(tmp4, shift19); x = vec_packs(tmp3, tmp4); }</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type>

<name>yuv2422_2_vsx_template</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name><name>ubuf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name><name>vbuf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name><name>abuf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dstW</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>yalpha</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>uvalpha</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>target</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>buf0</name> <init>= <expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>buf1</name> <init>= <expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>,

<decl><type ref="prev"><modifier>*</modifier></type><name>ubuf0</name> <init>= <expr><name><name>ubuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ubuf1</name> <init>= <expr><name><name>ubuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>,

<decl><type ref="prev"><modifier>*</modifier></type><name>vbuf0</name> <init>= <expr><name><name>vbuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>vbuf1</name> <init>= <expr><name><name>vbuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int16_t</name></type> <name>yalpha1</name> <init>= <expr><literal type="number">4096</literal> <operator>-</operator> <name>yalpha</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int16_t</name></type> <name>uvalpha1</name> <init>= <expr><literal type="number">4096</literal> <operator>-</operator> <name>uvalpha</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vec_s16</name></type> <name>vy1</name></decl>, <decl><type ref="prev"/><name>vy2</name></decl>, <decl><type ref="prev"/><name>vu</name></decl>, <decl><type ref="prev"/><name>vv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vec_s32</name></type> <name>tmp</name></decl>, <decl><type ref="prev"/><name>tmp2</name></decl>, <decl><type ref="prev"/><name>tmp3</name></decl>, <decl><type ref="prev"/><name>tmp4</name></decl>, <decl><type ref="prev"/><name>tmp5</name></decl>, <decl><type ref="prev"/><name>tmp6</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_s16</name></type> <name>vyalpha1</name> <init>= <expr><call><name>vec_splats</name><argument_list>(<argument><expr><name>yalpha1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_s16</name></type> <name>vuvalpha1</name> <init>= <expr><call><name>vec_splats</name><argument_list>(<argument><expr><name>uvalpha1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_u32</name></type> <name>shift19</name> <init>= <expr><call><name>vec_splats</name><argument_list>(<argument><expr><literal type="number">19U</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name>yalpha</name> <operator>&lt;=</operator> <literal type="number">4096U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name>uvalpha</name> <operator>&lt;=</operator> <literal type="number">4096U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><operator>(</operator><name>dstW</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">8</literal></expr></incr>)</control> <block>{<block_content>

<macro><name>SETUP</name><argument_list>(<argument>vy1</argument>, <argument>&amp;buf0[i * <literal type="number">2</literal>]</argument>, <argument>&amp;buf1[i * <literal type="number">2</literal>]</argument>, <argument>vyalpha1</argument>)</argument_list></macro>

<macro><name>SETUP</name><argument_list>(<argument>vy2</argument>, <argument>&amp;buf0[(i + <literal type="number">4</literal>) * <literal type="number">2</literal>]</argument>, <argument>&amp;buf1[(i + <literal type="number">4</literal>) * <literal type="number">2</literal>]</argument>, <argument>vyalpha1</argument>)</argument_list></macro>

<macro><name>SETUP</name><argument_list>(<argument>vu</argument>, <argument>&amp;ubuf0[i]</argument>, <argument>&amp;ubuf1[i]</argument>, <argument>vuvalpha1</argument>)</argument_list></macro>

<macro><name>SETUP</name><argument_list>(<argument>vv</argument>, <argument>&amp;vbuf0[i]</argument>, <argument>&amp;vbuf1[i]</argument>, <argument>vuvalpha1</argument>)</argument_list></macro>

<expr_stmt><expr><call><name>write422</name><argument_list>(<argument><expr><name>vy1</name></expr></argument>, <argument><expr><name>vy2</name></expr></argument>, <argument><expr><name>vu</name></expr></argument>, <argument><expr><name>vv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dest</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SETUP</name></cpp:undef>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type>

<name>yuv2422_1_vsx_template</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>buf0</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name><name>ubuf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name><name>vbuf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>abuf0</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dstW</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>uvalpha</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>target</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>ubuf0</name> <init>= <expr><name><name>ubuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>vbuf0</name> <init>= <expr><name><name>vbuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vec_s16</name></type> <name>vy1</name></decl>, <decl><type ref="prev"/><name>vy2</name></decl>, <decl><type ref="prev"/><name>vu</name></decl>, <decl><type ref="prev"/><name>vv</name></decl>, <decl><type ref="prev"/><name>tmp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_s16</name></type> <name>add64</name> <init>= <expr><call><name>vec_splats</name><argument_list>(<argument><expr><operator>(</operator><name>int16_t</name><operator>)</operator> <literal type="number">64</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_s16</name></type> <name>add128</name> <init>= <expr><call><name>vec_splats</name><argument_list>(<argument><expr><operator>(</operator><name>int16_t</name><operator>)</operator> <literal type="number">128</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_u16</name></type> <name>shift7</name> <init>= <expr><call><name>vec_splat_u16</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_u16</name></type> <name>shift8</name> <init>= <expr><call><name>vec_splat_u16</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>uvalpha</name> <operator>&lt;</operator> <literal type="number">2048</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><operator>(</operator><name>dstW</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">8</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>vy1</name> <operator>=</operator> <call><name>vec_ld</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>buf0</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vy2</name> <operator>=</operator> <call><name>vec_ld</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>buf0</name><index>[<expr><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vu</name> <operator>=</operator> <call><name>vec_ld</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ubuf0</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vv</name> <operator>=</operator> <call><name>vec_ld</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vbuf0</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vy1</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>vy1</name></expr></argument>, <argument><expr><name>add64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vy2</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>vy2</name></expr></argument>, <argument><expr><name>add64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vu</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>vu</name></expr></argument>, <argument><expr><name>add64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vv</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>vv</name></expr></argument>, <argument><expr><name>add64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vy1</name> <operator>=</operator> <call><name>vec_sra</name><argument_list>(<argument><expr><name>vy1</name></expr></argument>, <argument><expr><name>shift7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vy2</name> <operator>=</operator> <call><name>vec_sra</name><argument_list>(<argument><expr><name>vy2</name></expr></argument>, <argument><expr><name>shift7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vu</name> <operator>=</operator> <call><name>vec_sra</name><argument_list>(<argument><expr><name>vu</name></expr></argument>, <argument><expr><name>shift7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vv</name> <operator>=</operator> <call><name>vec_sra</name><argument_list>(<argument><expr><name>vv</name></expr></argument>, <argument><expr><name>shift7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>write422</name><argument_list>(<argument><expr><name>vy1</name></expr></argument>, <argument><expr><name>vy2</name></expr></argument>, <argument><expr><name>vu</name></expr></argument>, <argument><expr><name>vv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dest</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>ubuf1</name> <init>= <expr><name><name>ubuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>vbuf1</name> <init>= <expr><name><name>vbuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><operator>(</operator><name>dstW</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">8</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>vy1</name> <operator>=</operator> <call><name>vec_ld</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>buf0</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vy2</name> <operator>=</operator> <call><name>vec_ld</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>buf0</name><index>[<expr><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vu</name> <operator>=</operator> <call><name>vec_ld</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ubuf0</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>vec_ld</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ubuf1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vu</name> <operator>=</operator> <call><name>vec_adds</name><argument_list>(<argument><expr><name>vu</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vv</name> <operator>=</operator> <call><name>vec_ld</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vbuf0</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>vec_ld</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vbuf1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vv</name> <operator>=</operator> <call><name>vec_adds</name><argument_list>(<argument><expr><name>vv</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vy1</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>vy1</name></expr></argument>, <argument><expr><name>add64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vy2</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>vy2</name></expr></argument>, <argument><expr><name>add64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vu</name> <operator>=</operator> <call><name>vec_adds</name><argument_list>(<argument><expr><name>vu</name></expr></argument>, <argument><expr><name>add128</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vv</name> <operator>=</operator> <call><name>vec_adds</name><argument_list>(<argument><expr><name>vv</name></expr></argument>, <argument><expr><name>add128</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vy1</name> <operator>=</operator> <call><name>vec_sra</name><argument_list>(<argument><expr><name>vy1</name></expr></argument>, <argument><expr><name>shift7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vy2</name> <operator>=</operator> <call><name>vec_sra</name><argument_list>(<argument><expr><name>vy2</name></expr></argument>, <argument><expr><name>shift7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vu</name> <operator>=</operator> <call><name>vec_sra</name><argument_list>(<argument><expr><name>vu</name></expr></argument>, <argument><expr><name>shift8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vv</name> <operator>=</operator> <call><name>vec_sra</name><argument_list>(<argument><expr><name>vv</name></expr></argument>, <argument><expr><name>shift8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>write422</name><argument_list>(<argument><expr><name>vy1</name></expr></argument>, <argument><expr><name>vy2</name></expr></argument>, <argument><expr><name>vu</name></expr></argument>, <argument><expr><name>vv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dest</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YUV2PACKEDWRAPPERX</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>base</name></type></parameter>, <parameter><type><name>ext</name></type></parameter>, <parameter><type><name>fmt</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void name ##ext ##_X_vsx(SwsContext *c, const int16_t *lumFilter, const int16_t **lumSrc, int lumFilterSize, const int16_t *chrFilter, const int16_t **chrUSrc, const int16_t **chrVSrc, int chrFilterSize, const int16_t **alpSrc, uint8_t *dest, int dstW, int y) { name ##base ##_X_vsx_template(c, lumFilter, lumSrc, lumFilterSize, chrFilter, chrUSrc, chrVSrc, chrFilterSize, alpSrc, dest, dstW, y, fmt); }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YUV2PACKEDWRAPPER2</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>base</name></type></parameter>, <parameter><type><name>ext</name></type></parameter>, <parameter><type><name>fmt</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>YUV2PACKEDWRAPPERX(name, base, ext, fmt) static void name ##ext ##_2_vsx(SwsContext *c, const int16_t *buf[2], const int16_t *ubuf[2], const int16_t *vbuf[2], const int16_t *abuf[2], uint8_t *dest, int dstW, int yalpha, int uvalpha, int y) { name ##base ##_2_vsx_template(c, buf, ubuf, vbuf, abuf, dest, dstW, yalpha, uvalpha, y, fmt); }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YUV2PACKEDWRAPPER</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>base</name></type></parameter>, <parameter><type><name>ext</name></type></parameter>, <parameter><type><name>fmt</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>YUV2PACKEDWRAPPER2(name, base, ext, fmt) static void name ##ext ##_1_vsx(SwsContext *c, const int16_t *buf0, const int16_t *ubuf[2], const int16_t *vbuf[2], const int16_t *abuf0, uint8_t *dest, int dstW, int uvalpha, int y) { name ##base ##_1_vsx_template(c, buf0, ubuf, vbuf, abuf0, dest, dstW, uvalpha, y, fmt); }</cpp:value></cpp:define>

<macro><name>YUV2PACKEDWRAPPER</name><argument_list>(<argument>yuv2</argument>, <argument><literal type="number">422</literal></argument>, <argument>yuyv422</argument>, <argument>AV_PIX_FMT_YUYV422</argument>)</argument_list></macro>

<macro><name>YUV2PACKEDWRAPPER</name><argument_list>(<argument>yuv2</argument>, <argument><literal type="number">422</literal></argument>, <argument>yvyu422</argument>, <argument>AV_PIX_FMT_YVYU422</argument>)</argument_list></macro>

<macro><name>YUV2PACKEDWRAPPER</name><argument_list>(<argument>yuv2</argument>, <argument><literal type="number">422</literal></argument>, <argument>uyvy422</argument>, <argument>AV_PIX_FMT_UYVY422</argument>)</argument_list></macro>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hyscale_fast_vsx</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dstWidth</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcW</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>xInc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>xpos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>xx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vec_u8</name></type> <name>vin</name></decl>, <decl><type ref="prev"/><name>vin2</name></decl>, <decl><type ref="prev"/><name>vperm</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vec_s8</name></type> <name>vmul</name></decl>, <decl><type ref="prev"/><name>valpha</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vec_s16</name></type> <name>vtmp</name></decl>, <decl><type ref="prev"/><name>vtmp2</name></decl>, <decl><type ref="prev"/><name>vtmp3</name></decl>, <decl><type ref="prev"/><name>vtmp4</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vec_u16</name></type> <name>vd_l</name></decl>, <decl><type ref="prev"/><name>vd_r</name></decl>, <decl><type ref="prev"/><name><name>vcoord16</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vec_u32</name></type> <name><name>vcoord</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_u32</name></type> <name>vadd</name> <init>= <expr><operator>(</operator><name>vec_u32</name><operator>)</operator> <block>{

<expr><literal type="number">0</literal></expr>,

<expr><name>xInc</name> <operator>*</operator> <literal type="number">1</literal></expr>,

<expr><name>xInc</name> <operator>*</operator> <literal type="number">2</literal></expr>,

<expr><name>xInc</name> <operator>*</operator> <literal type="number">3</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_u16</name></type> <name>vadd16</name> <init>= <expr><operator>(</operator><name>vec_u16</name><operator>)</operator> <block>{ 

<expr><literal type="number">0</literal></expr>,

<expr><name>xInc</name> <operator>*</operator> <literal type="number">1</literal></expr>,

<expr><name>xInc</name> <operator>*</operator> <literal type="number">2</literal></expr>,

<expr><name>xInc</name> <operator>*</operator> <literal type="number">3</literal></expr>,

<expr><name>xInc</name> <operator>*</operator> <literal type="number">4</literal></expr>,

<expr><name>xInc</name> <operator>*</operator> <literal type="number">5</literal></expr>,

<expr><name>xInc</name> <operator>*</operator> <literal type="number">6</literal></expr>,

<expr><name>xInc</name> <operator>*</operator> <literal type="number">7</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_u32</name></type> <name>vshift16</name> <init>= <expr><call><name>vec_splats</name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_u16</name></type> <name>vshift9</name> <init>= <expr><call><name>vec_splat_u16</name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_u8</name></type> <name>vzero</name> <init>= <expr><call><name>vec_splat_u8</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_u16</name></type> <name>vshift</name> <init>= <expr><call><name>vec_splat_u16</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dstWidth</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">16</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>vcoord16</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>vec_splats</name><argument_list>(<argument><expr><operator>(</operator><name>uint16_t</name><operator>)</operator> <name>xpos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vcoord16</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>vec_splats</name><argument_list>(<argument><expr><operator>(</operator><name>uint16_t</name><operator>)</operator> <operator>(</operator><name>xpos</name> <operator>+</operator> <name>xInc</name> <operator>*</operator> <literal type="number">8</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vcoord16</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name><name>vcoord16</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>vadd16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vcoord16</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name><name>vcoord16</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>vadd16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vcoord16</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>vec_sr</name><argument_list>(<argument><expr><name><name>vcoord16</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>vshift9</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vcoord16</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>vec_sr</name><argument_list>(<argument><expr><name><name>vcoord16</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>vshift9</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>valpha</name> <operator>=</operator> <operator>(</operator><name>vec_s8</name><operator>)</operator> <call><name>vec_pack</name><argument_list>(<argument><expr><name><name>vcoord16</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>vcoord16</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>xx</name> <operator>=</operator> <name>xpos</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>vin</name> <operator>=</operator> <call><name>vec_vsx_ld</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>src</name><index>[<expr><name>xx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vcoord</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>vec_splats</name><argument_list>(<argument><expr><name>xpos</name> <operator>&amp;</operator> <literal type="number">0xffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vcoord</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>vec_splats</name><argument_list>(<argument><expr><operator>(</operator><name>xpos</name> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator> <operator>+</operator> <name>xInc</name> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vcoord</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>vec_splats</name><argument_list>(<argument><expr><operator>(</operator><name>xpos</name> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator> <operator>+</operator> <name>xInc</name> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vcoord</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>vec_splats</name><argument_list>(<argument><expr><operator>(</operator><name>xpos</name> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator> <operator>+</operator> <name>xInc</name> <operator>*</operator> <literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vcoord</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name><name>vcoord</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>vadd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vcoord</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name><name>vcoord</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>vadd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vcoord</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name><name>vcoord</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>vadd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vcoord</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name><name>vcoord</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>vadd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vcoord</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>vec_sr</name><argument_list>(<argument><expr><name><name>vcoord</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>vshift16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vcoord</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>vec_sr</name><argument_list>(<argument><expr><name><name>vcoord</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>vshift16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vcoord</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>vec_sr</name><argument_list>(<argument><expr><name><name>vcoord</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>vshift16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vcoord</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>vec_sr</name><argument_list>(<argument><expr><name><name>vcoord</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>vshift16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vcoord16</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>vec_pack</name><argument_list>(<argument><expr><name><name>vcoord</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>vcoord</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vcoord16</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>vec_pack</name><argument_list>(<argument><expr><name><name>vcoord</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>vcoord</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vperm</name> <operator>=</operator> <call><name>vec_pack</name><argument_list>(<argument><expr><name><name>vcoord16</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>vcoord16</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vin</name> <operator>=</operator> <call><name>vec_perm</name><argument_list>(<argument><expr><name>vin</name></expr></argument>, <argument><expr><name>vin</name></expr></argument>, <argument><expr><name>vperm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vin2</name> <operator>=</operator> <call><name>vec_vsx_ld</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>src</name><index>[<expr><name>xx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vin2</name> <operator>=</operator> <call><name>vec_perm</name><argument_list>(<argument><expr><name>vin2</name></expr></argument>, <argument><expr><name>vin2</name></expr></argument>, <argument><expr><name>vperm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vmul</name> <operator>=</operator> <operator>(</operator><name>vec_s8</name><operator>)</operator> <call><name>vec_sub</name><argument_list>(<argument><expr><name>vin2</name></expr></argument>, <argument><expr><name>vin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vtmp</name> <operator>=</operator> <call><name>vec_mule</name><argument_list>(<argument><expr><name>vmul</name></expr></argument>, <argument><expr><name>valpha</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vtmp2</name> <operator>=</operator> <call><name>vec_mulo</name><argument_list>(<argument><expr><name>vmul</name></expr></argument>, <argument><expr><name>valpha</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vtmp3</name> <operator>=</operator> <call><name>vec_mergeh</name><argument_list>(<argument><expr><name>vtmp</name></expr></argument>, <argument><expr><name>vtmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vtmp4</name> <operator>=</operator> <call><name>vec_mergel</name><argument_list>(<argument><expr><name>vtmp</name></expr></argument>, <argument><expr><name>vtmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vd_l</name> <operator>=</operator> <operator>(</operator><name>vec_u16</name><operator>)</operator> <call><name>vec_mergeh</name><argument_list>(<argument><expr><name>vin</name></expr></argument>, <argument><expr><name>vzero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vd_r</name> <operator>=</operator> <operator>(</operator><name>vec_u16</name><operator>)</operator> <call><name>vec_mergel</name><argument_list>(<argument><expr><name>vin</name></expr></argument>, <argument><expr><name>vzero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vd_l</name> <operator>=</operator> <call><name>vec_sl</name><argument_list>(<argument><expr><name>vd_l</name></expr></argument>, <argument><expr><name>vshift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vd_r</name> <operator>=</operator> <call><name>vec_sl</name><argument_list>(<argument><expr><name>vd_r</name></expr></argument>, <argument><expr><name>vshift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vd_l</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>vd_l</name></expr></argument>, <argument><expr><operator>(</operator><name>vec_u16</name><operator>)</operator> <name>vtmp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vd_r</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>vd_r</name></expr></argument>, <argument><expr><operator>(</operator><name>vec_u16</name><operator>)</operator> <name>vtmp4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vec_st</name><argument_list>(<argument><expr><operator>(</operator><name>vec_s16</name><operator>)</operator> <name>vd_l</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vec_st</name><argument_list>(<argument><expr><operator>(</operator><name>vec_s16</name><operator>)</operator> <name>vd_r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dst</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>xpos</name> <operator>+=</operator> <name>xInc</name> <operator>*</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><name>dstWidth</name><operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><operator>(</operator><name>i</name><operator>*</operator><name>xInc</name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">16</literal> <operator>&gt;=</operator><name>srcW</name><operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>src</name><index>[<expr><name>srcW</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>*</operator><literal type="number">128</literal></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HCSCALE</name><parameter_list>(<parameter><type><name>in</name></type></parameter>, <parameter><type><name>out</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>vin = vec_vsx_ld(0, &amp;in[xx]); vin = vec_perm(vin, vin, vperm); vin2 = vec_vsx_ld(1, &amp;in[xx]); vin2 = vec_perm(vin2, vin2, vperm); vtmp = vec_mule(vin, valphaxor); vtmp2 = vec_mulo(vin, valphaxor); vtmp3 = vec_mergeh(vtmp, vtmp2); vtmp4 = vec_mergel(vtmp, vtmp2); vtmp = vec_mule(vin2, valpha); vtmp2 = vec_mulo(vin2, valpha); vd_l = vec_mergeh(vtmp, vtmp2); vd_r = vec_mergel(vtmp, vtmp2); vd_l = vec_add(vd_l, vtmp3); vd_r = vec_add(vd_r, vtmp4); vec_st((vec_s16) vd_l, 0, &amp;out[i]); vec_st((vec_s16) vd_r, 0, &amp;out[i + 8])</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hcscale_fast_vsx</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>dst1</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>dst2</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>dstWidth</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src1</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcW</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>xInc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>xpos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>xx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vec_u8</name></type> <name>vin</name></decl>, <decl><type ref="prev"/><name>vin2</name></decl>, <decl><type ref="prev"/><name>vperm</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vec_u8</name></type> <name>valpha</name></decl>, <decl><type ref="prev"/><name>valphaxor</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vec_u16</name></type> <name>vtmp</name></decl>, <decl><type ref="prev"/><name>vtmp2</name></decl>, <decl><type ref="prev"/><name>vtmp3</name></decl>, <decl><type ref="prev"/><name>vtmp4</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vec_u16</name></type> <name>vd_l</name></decl>, <decl><type ref="prev"/><name>vd_r</name></decl>, <decl><type ref="prev"/><name><name>vcoord16</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vec_u32</name></type> <name><name>vcoord</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_u8</name></type> <name>vxor</name> <init>= <expr><call><name>vec_splats</name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator> <literal type="number">127</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_u32</name></type> <name>vadd</name> <init>= <expr><operator>(</operator><name>vec_u32</name><operator>)</operator> <block>{

<expr><literal type="number">0</literal></expr>,

<expr><name>xInc</name> <operator>*</operator> <literal type="number">1</literal></expr>,

<expr><name>xInc</name> <operator>*</operator> <literal type="number">2</literal></expr>,

<expr><name>xInc</name> <operator>*</operator> <literal type="number">3</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_u16</name></type> <name>vadd16</name> <init>= <expr><operator>(</operator><name>vec_u16</name><operator>)</operator> <block>{ 

<expr><literal type="number">0</literal></expr>,

<expr><name>xInc</name> <operator>*</operator> <literal type="number">1</literal></expr>,

<expr><name>xInc</name> <operator>*</operator> <literal type="number">2</literal></expr>,

<expr><name>xInc</name> <operator>*</operator> <literal type="number">3</literal></expr>,

<expr><name>xInc</name> <operator>*</operator> <literal type="number">4</literal></expr>,

<expr><name>xInc</name> <operator>*</operator> <literal type="number">5</literal></expr>,

<expr><name>xInc</name> <operator>*</operator> <literal type="number">6</literal></expr>,

<expr><name>xInc</name> <operator>*</operator> <literal type="number">7</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_u32</name></type> <name>vshift16</name> <init>= <expr><call><name>vec_splats</name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_u16</name></type> <name>vshift9</name> <init>= <expr><call><name>vec_splat_u16</name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dstWidth</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">16</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>vcoord16</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>vec_splats</name><argument_list>(<argument><expr><operator>(</operator><name>uint16_t</name><operator>)</operator> <name>xpos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vcoord16</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>vec_splats</name><argument_list>(<argument><expr><operator>(</operator><name>uint16_t</name><operator>)</operator> <operator>(</operator><name>xpos</name> <operator>+</operator> <name>xInc</name> <operator>*</operator> <literal type="number">8</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vcoord16</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name><name>vcoord16</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>vadd16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vcoord16</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name><name>vcoord16</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>vadd16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vcoord16</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>vec_sr</name><argument_list>(<argument><expr><name><name>vcoord16</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>vshift9</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vcoord16</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>vec_sr</name><argument_list>(<argument><expr><name><name>vcoord16</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>vshift9</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>valpha</name> <operator>=</operator> <call><name>vec_pack</name><argument_list>(<argument><expr><name><name>vcoord16</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>vcoord16</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>valphaxor</name> <operator>=</operator> <call><name>vec_xor</name><argument_list>(<argument><expr><name>valpha</name></expr></argument>, <argument><expr><name>vxor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>xx</name> <operator>=</operator> <name>xpos</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vcoord</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>vec_splats</name><argument_list>(<argument><expr><name>xpos</name> <operator>&amp;</operator> <literal type="number">0xffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vcoord</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>vec_splats</name><argument_list>(<argument><expr><operator>(</operator><name>xpos</name> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator> <operator>+</operator> <name>xInc</name> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vcoord</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>vec_splats</name><argument_list>(<argument><expr><operator>(</operator><name>xpos</name> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator> <operator>+</operator> <name>xInc</name> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vcoord</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>vec_splats</name><argument_list>(<argument><expr><operator>(</operator><name>xpos</name> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator> <operator>+</operator> <name>xInc</name> <operator>*</operator> <literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vcoord</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name><name>vcoord</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>vadd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vcoord</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name><name>vcoord</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>vadd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vcoord</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name><name>vcoord</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>vadd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vcoord</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name><name>vcoord</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>vadd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vcoord</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>vec_sr</name><argument_list>(<argument><expr><name><name>vcoord</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>vshift16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vcoord</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>vec_sr</name><argument_list>(<argument><expr><name><name>vcoord</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>vshift16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vcoord</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>vec_sr</name><argument_list>(<argument><expr><name><name>vcoord</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>vshift16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vcoord</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>vec_sr</name><argument_list>(<argument><expr><name><name>vcoord</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>vshift16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vcoord16</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>vec_pack</name><argument_list>(<argument><expr><name><name>vcoord</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>vcoord</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vcoord16</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>vec_pack</name><argument_list>(<argument><expr><name><name>vcoord</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>vcoord</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vperm</name> <operator>=</operator> <call><name>vec_pack</name><argument_list>(<argument><expr><name><name>vcoord16</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>vcoord16</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HCSCALE</name><argument_list>(<argument><expr><name>src1</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HCSCALE</name><argument_list>(<argument><expr><name>src2</name></expr></argument>, <argument><expr><name>dst2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>xpos</name> <operator>+=</operator> <name>xInc</name> <operator>*</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><name>dstWidth</name><operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><operator>(</operator><name>i</name><operator>*</operator><name>xInc</name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">16</literal> <operator>&gt;=</operator><name>srcW</name><operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>dst1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>src1</name><index>[<expr><name>srcW</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>*</operator><literal type="number">128</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>src2</name><index>[<expr><name>srcW</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>*</operator><literal type="number">128</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HCSCALE</name></cpp:undef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hScale8To19_vsx</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dstW</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name>filterPos</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>filterSize</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>int32_t</name> <operator>*</operator><operator>)</operator> <name>_dst</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vec_s16</name></type> <name>vfilter</name></decl>, <decl><type ref="prev"/><name>vin</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vec_u8</name></type> <name>vin8</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vec_s32</name></type> <name>vout</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_u8</name></type> <name>vzero</name> <init>= <expr><call><name>vec_splat_u8</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_u8</name></type> <name><name>vunusedtab</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{

<expr><operator>(</operator><name>vec_u8</name><operator>)</operator> <block>{<expr><literal type="number">0x0</literal></expr>, <expr><literal type="number">0x1</literal></expr>, <expr><literal type="number">0x2</literal></expr>, <expr><literal type="number">0x3</literal></expr>, <expr><literal type="number">0x4</literal></expr>, <expr><literal type="number">0x5</literal></expr>, <expr><literal type="number">0x6</literal></expr>, <expr><literal type="number">0x7</literal></expr>,

<expr><literal type="number">0x8</literal></expr>, <expr><literal type="number">0x9</literal></expr>, <expr><literal type="number">0xa</literal></expr>, <expr><literal type="number">0xb</literal></expr>, <expr><literal type="number">0xc</literal></expr>, <expr><literal type="number">0xd</literal></expr>, <expr><literal type="number">0xe</literal></expr>, <expr><literal type="number">0xf</literal></expr>}</block></expr>,

<expr><operator>(</operator><name>vec_u8</name><operator>)</operator> <block>{<expr><literal type="number">0x0</literal></expr>, <expr><literal type="number">0x1</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>,

<expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>}</block></expr>,

<expr><operator>(</operator><name>vec_u8</name><operator>)</operator> <block>{<expr><literal type="number">0x0</literal></expr>, <expr><literal type="number">0x1</literal></expr>, <expr><literal type="number">0x2</literal></expr>, <expr><literal type="number">0x3</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>,

<expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>}</block></expr>,

<expr><operator>(</operator><name>vec_u8</name><operator>)</operator> <block>{<expr><literal type="number">0x0</literal></expr>, <expr><literal type="number">0x1</literal></expr>, <expr><literal type="number">0x2</literal></expr>, <expr><literal type="number">0x3</literal></expr>, <expr><literal type="number">0x4</literal></expr>, <expr><literal type="number">0x5</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>,

<expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>}</block></expr>,

<expr><operator>(</operator><name>vec_u8</name><operator>)</operator> <block>{<expr><literal type="number">0x0</literal></expr>, <expr><literal type="number">0x1</literal></expr>, <expr><literal type="number">0x2</literal></expr>, <expr><literal type="number">0x3</literal></expr>, <expr><literal type="number">0x4</literal></expr>, <expr><literal type="number">0x5</literal></expr>, <expr><literal type="number">0x6</literal></expr>, <expr><literal type="number">0x7</literal></expr>,

<expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>}</block></expr>,

<expr><operator>(</operator><name>vec_u8</name><operator>)</operator> <block>{<expr><literal type="number">0x0</literal></expr>, <expr><literal type="number">0x1</literal></expr>, <expr><literal type="number">0x2</literal></expr>, <expr><literal type="number">0x3</literal></expr>, <expr><literal type="number">0x4</literal></expr>, <expr><literal type="number">0x5</literal></expr>, <expr><literal type="number">0x6</literal></expr>, <expr><literal type="number">0x7</literal></expr>,

<expr><literal type="number">0x8</literal></expr>, <expr><literal type="number">0x9</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>}</block></expr>,

<expr><operator>(</operator><name>vec_u8</name><operator>)</operator> <block>{<expr><literal type="number">0x0</literal></expr>, <expr><literal type="number">0x1</literal></expr>, <expr><literal type="number">0x2</literal></expr>, <expr><literal type="number">0x3</literal></expr>, <expr><literal type="number">0x4</literal></expr>, <expr><literal type="number">0x5</literal></expr>, <expr><literal type="number">0x6</literal></expr>, <expr><literal type="number">0x7</literal></expr>,

<expr><literal type="number">0x8</literal></expr>, <expr><literal type="number">0x9</literal></expr>, <expr><literal type="number">0xa</literal></expr>, <expr><literal type="number">0xb</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>}</block></expr>,

<expr><operator>(</operator><name>vec_u8</name><operator>)</operator> <block>{<expr><literal type="number">0x0</literal></expr>, <expr><literal type="number">0x1</literal></expr>, <expr><literal type="number">0x2</literal></expr>, <expr><literal type="number">0x3</literal></expr>, <expr><literal type="number">0x4</literal></expr>, <expr><literal type="number">0x5</literal></expr>, <expr><literal type="number">0x6</literal></expr>, <expr><literal type="number">0x7</literal></expr>,

<expr><literal type="number">0x8</literal></expr>, <expr><literal type="number">0x9</literal></expr>, <expr><literal type="number">0xa</literal></expr>, <expr><literal type="number">0xb</literal></expr>, <expr><literal type="number">0xc</literal></expr>, <expr><literal type="number">0xd</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>}</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_u8</name></type> <name>vunused</name> <init>= <expr><name><name>vunusedtab</name><index>[<expr><name>filterSize</name> <operator>%</operator> <literal type="number">8</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>filterSize</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dstW</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>srcPos</name> <init>= <expr><name><name>filterPos</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>val</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>filterSize</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>val</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name><name>src</name><index>[<expr><name>srcPos</name> <operator>+</operator> <name>j</name></expr>]</index></name><operator>)</operator> <operator>*</operator> <name><name>filter</name><index>[<expr><name>filterSize</name> <operator>*</operator> <name>i</name> <operator>+</operator> <name>j</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>val</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">19</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dstW</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>srcPos</name> <init>= <expr><name><name>filterPos</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>vout</name> <operator>=</operator> <call><name>vec_splat_s32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>filterSize</name></expr>;</condition> <incr><expr><name>j</name> <operator>+=</operator> <literal type="number">8</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>vin8</name> <operator>=</operator> <call><name>vec_vsx_ld</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>src</name><index>[<expr><name>srcPos</name> <operator>+</operator> <name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vin</name> <operator>=</operator> <operator>(</operator><name>vec_s16</name><operator>)</operator> <call><name>vec_mergeh</name><argument_list>(<argument><expr><name>vin8</name></expr></argument>, <argument><expr><name>vzero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>j</name> <operator>+</operator> <literal type="number">8</literal> <operator>&gt;</operator> <name>filterSize</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>vin</name> <operator>=</operator> <call><name>vec_perm</name><argument_list>(<argument><expr><name>vin</name></expr></argument>, <argument><expr><operator>(</operator><name>vec_s16</name><operator>)</operator> <name>vzero</name></expr></argument>, <argument><expr><name>vunused</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>vfilter</name> <operator>=</operator> <call><name>vec_vsx_ld</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>filter</name><index>[<expr><name>filterSize</name> <operator>*</operator> <name>i</name> <operator>+</operator> <name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vout</name> <operator>=</operator> <call><name>vec_msums</name><argument_list>(<argument><expr><name>vin</name></expr></argument>, <argument><expr><name>vfilter</name></expr></argument>, <argument><expr><name>vout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>vout</name> <operator>=</operator> <call><name>vec_sums</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><operator>(</operator><name>vec_s32</name><operator>)</operator> <name>vzero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>vout</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">19</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hScale16To19_vsx</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dstW</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>_src</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name>filterPos</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>filterSize</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>srcFormat</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>int32_t</name> <operator>*</operator><operator>)</operator> <name>_dst</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator> <name>_src</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bits</name> <init>= <expr><name><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>depth</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sh</name> <init>= <expr><name>bits</name> <operator>-</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vec_s16</name></type> <name>vfilter</name></decl>, <decl><type ref="prev"/><name>vin</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vec_s32</name></type> <name>vout</name></decl>, <decl><type ref="prev"/><name>vtmp</name></decl>, <decl><type ref="prev"/><name>vtmp2</name></decl>, <decl><type ref="prev"/><name>vfilter32_l</name></decl>, <decl><type ref="prev"/><name>vfilter32_r</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_u8</name></type> <name>vzero</name> <init>= <expr><call><name>vec_splat_u8</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_u8</name></type> <name><name>vunusedtab</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{

<expr><operator>(</operator><name>vec_u8</name><operator>)</operator> <block>{<expr><literal type="number">0x0</literal></expr>, <expr><literal type="number">0x1</literal></expr>, <expr><literal type="number">0x2</literal></expr>, <expr><literal type="number">0x3</literal></expr>, <expr><literal type="number">0x4</literal></expr>, <expr><literal type="number">0x5</literal></expr>, <expr><literal type="number">0x6</literal></expr>, <expr><literal type="number">0x7</literal></expr>,

<expr><literal type="number">0x8</literal></expr>, <expr><literal type="number">0x9</literal></expr>, <expr><literal type="number">0xa</literal></expr>, <expr><literal type="number">0xb</literal></expr>, <expr><literal type="number">0xc</literal></expr>, <expr><literal type="number">0xd</literal></expr>, <expr><literal type="number">0xe</literal></expr>, <expr><literal type="number">0xf</literal></expr>}</block></expr>,

<expr><operator>(</operator><name>vec_u8</name><operator>)</operator> <block>{<expr><literal type="number">0x0</literal></expr>, <expr><literal type="number">0x1</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>,

<expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>}</block></expr>,

<expr><operator>(</operator><name>vec_u8</name><operator>)</operator> <block>{<expr><literal type="number">0x0</literal></expr>, <expr><literal type="number">0x1</literal></expr>, <expr><literal type="number">0x2</literal></expr>, <expr><literal type="number">0x3</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>,

<expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>}</block></expr>,

<expr><operator>(</operator><name>vec_u8</name><operator>)</operator> <block>{<expr><literal type="number">0x0</literal></expr>, <expr><literal type="number">0x1</literal></expr>, <expr><literal type="number">0x2</literal></expr>, <expr><literal type="number">0x3</literal></expr>, <expr><literal type="number">0x4</literal></expr>, <expr><literal type="number">0x5</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>,

<expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>}</block></expr>,

<expr><operator>(</operator><name>vec_u8</name><operator>)</operator> <block>{<expr><literal type="number">0x0</literal></expr>, <expr><literal type="number">0x1</literal></expr>, <expr><literal type="number">0x2</literal></expr>, <expr><literal type="number">0x3</literal></expr>, <expr><literal type="number">0x4</literal></expr>, <expr><literal type="number">0x5</literal></expr>, <expr><literal type="number">0x6</literal></expr>, <expr><literal type="number">0x7</literal></expr>,

<expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>}</block></expr>,

<expr><operator>(</operator><name>vec_u8</name><operator>)</operator> <block>{<expr><literal type="number">0x0</literal></expr>, <expr><literal type="number">0x1</literal></expr>, <expr><literal type="number">0x2</literal></expr>, <expr><literal type="number">0x3</literal></expr>, <expr><literal type="number">0x4</literal></expr>, <expr><literal type="number">0x5</literal></expr>, <expr><literal type="number">0x6</literal></expr>, <expr><literal type="number">0x7</literal></expr>,

<expr><literal type="number">0x8</literal></expr>, <expr><literal type="number">0x9</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>}</block></expr>,

<expr><operator>(</operator><name>vec_u8</name><operator>)</operator> <block>{<expr><literal type="number">0x0</literal></expr>, <expr><literal type="number">0x1</literal></expr>, <expr><literal type="number">0x2</literal></expr>, <expr><literal type="number">0x3</literal></expr>, <expr><literal type="number">0x4</literal></expr>, <expr><literal type="number">0x5</literal></expr>, <expr><literal type="number">0x6</literal></expr>, <expr><literal type="number">0x7</literal></expr>,

<expr><literal type="number">0x8</literal></expr>, <expr><literal type="number">0x9</literal></expr>, <expr><literal type="number">0xa</literal></expr>, <expr><literal type="number">0xb</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>}</block></expr>,

<expr><operator>(</operator><name>vec_u8</name><operator>)</operator> <block>{<expr><literal type="number">0x0</literal></expr>, <expr><literal type="number">0x1</literal></expr>, <expr><literal type="number">0x2</literal></expr>, <expr><literal type="number">0x3</literal></expr>, <expr><literal type="number">0x4</literal></expr>, <expr><literal type="number">0x5</literal></expr>, <expr><literal type="number">0x6</literal></expr>, <expr><literal type="number">0x7</literal></expr>,

<expr><literal type="number">0x8</literal></expr>, <expr><literal type="number">0x9</literal></expr>, <expr><literal type="number">0xa</literal></expr>, <expr><literal type="number">0xb</literal></expr>, <expr><literal type="number">0xc</literal></expr>, <expr><literal type="number">0xd</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>}</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_u8</name></type> <name>vunused</name> <init>= <expr><name><name>vunusedtab</name><index>[<expr><name>filterSize</name> <operator>%</operator> <literal type="number">8</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>isAnyRGB</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>srcFormat</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>c</name><operator>-&gt;</operator><name>srcFormat</name></name><operator>==</operator><name>AV_PIX_FMT_PAL8</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>depth</name><operator>&lt;</operator><literal type="number">16</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>sh</name> <operator>=</operator> <literal type="number">9</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>desc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PIX_FMT_FLAG_FLOAT</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>sh</name> <operator>=</operator> <literal type="number">16</literal> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>filterSize</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dstW</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>srcPos</name> <init>= <expr><name><name>filterPos</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>val</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>filterSize</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>val</name> <operator>+=</operator> <name><name>src</name><index>[<expr><name>srcPos</name> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>*</operator> <name><name>filter</name><index>[<expr><name>filterSize</name> <operator>*</operator> <name>i</name> <operator>+</operator> <name>j</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>val</name> <operator>&gt;&gt;</operator> <name>sh</name></expr></argument>, <argument><expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">19</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dstW</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>srcPos</name> <init>= <expr><name><name>filterPos</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>vout</name> <operator>=</operator> <call><name>vec_splat_s32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>filterSize</name></expr>;</condition> <incr><expr><name>j</name> <operator>+=</operator> <literal type="number">8</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>vin</name> <operator>=</operator> <operator>(</operator><name>vec_s16</name><operator>)</operator> <call><name>vec_vsx_ld</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>src</name><index>[<expr><name>srcPos</name> <operator>+</operator> <name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>j</name> <operator>+</operator> <literal type="number">8</literal> <operator>&gt;</operator> <name>filterSize</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>vin</name> <operator>=</operator> <call><name>vec_perm</name><argument_list>(<argument><expr><name>vin</name></expr></argument>, <argument><expr><operator>(</operator><name>vec_s16</name><operator>)</operator> <name>vzero</name></expr></argument>, <argument><expr><name>vunused</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>vfilter</name> <operator>=</operator> <call><name>vec_vsx_ld</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>filter</name><index>[<expr><name>filterSize</name> <operator>*</operator> <name>i</name> <operator>+</operator> <name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vfilter32_l</name> <operator>=</operator> <call><name>vec_unpackh</name><argument_list>(<argument><expr><name>vfilter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vfilter32_r</name> <operator>=</operator> <call><name>vec_unpackl</name><argument_list>(<argument><expr><name>vfilter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vtmp</name> <operator>=</operator> <operator>(</operator><name>vec_s32</name><operator>)</operator> <call><name>vec_mergeh</name><argument_list>(<argument><expr><name>vin</name></expr></argument>, <argument><expr><operator>(</operator><name>vec_s16</name><operator>)</operator> <name>vzero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vtmp2</name> <operator>=</operator> <operator>(</operator><name>vec_s32</name><operator>)</operator> <call><name>vec_mergel</name><argument_list>(<argument><expr><name>vin</name></expr></argument>, <argument><expr><operator>(</operator><name>vec_s16</name><operator>)</operator> <name>vzero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vtmp</name> <operator>=</operator> <call><name>vec_mul</name><argument_list>(<argument><expr><name>vtmp</name></expr></argument>, <argument><expr><name>vfilter32_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vtmp2</name> <operator>=</operator> <call><name>vec_mul</name><argument_list>(<argument><expr><name>vtmp2</name></expr></argument>, <argument><expr><name>vfilter32_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vout</name> <operator>=</operator> <call><name>vec_adds</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><name>vtmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vout</name> <operator>=</operator> <call><name>vec_adds</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><name>vtmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>vout</name> <operator>=</operator> <call><name>vec_sums</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><operator>(</operator><name>vec_s32</name><operator>)</operator> <name>vzero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>vout</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <name>sh</name></expr></argument>, <argument><expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">19</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hScale16To15_vsx</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dstW</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>_src</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name>filterPos</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>filterSize</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>srcFormat</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator> <name>_src</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sh</name> <init>= <expr><name><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>depth</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vec_s16</name></type> <name>vfilter</name></decl>, <decl><type ref="prev"/><name>vin</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vec_s32</name></type> <name>vout</name></decl>, <decl><type ref="prev"/><name>vtmp</name></decl>, <decl><type ref="prev"/><name>vtmp2</name></decl>, <decl><type ref="prev"/><name>vfilter32_l</name></decl>, <decl><type ref="prev"/><name>vfilter32_r</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_u8</name></type> <name>vzero</name> <init>= <expr><call><name>vec_splat_u8</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_u8</name></type> <name><name>vunusedtab</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{

<expr><operator>(</operator><name>vec_u8</name><operator>)</operator> <block>{<expr><literal type="number">0x0</literal></expr>, <expr><literal type="number">0x1</literal></expr>, <expr><literal type="number">0x2</literal></expr>, <expr><literal type="number">0x3</literal></expr>, <expr><literal type="number">0x4</literal></expr>, <expr><literal type="number">0x5</literal></expr>, <expr><literal type="number">0x6</literal></expr>, <expr><literal type="number">0x7</literal></expr>,

<expr><literal type="number">0x8</literal></expr>, <expr><literal type="number">0x9</literal></expr>, <expr><literal type="number">0xa</literal></expr>, <expr><literal type="number">0xb</literal></expr>, <expr><literal type="number">0xc</literal></expr>, <expr><literal type="number">0xd</literal></expr>, <expr><literal type="number">0xe</literal></expr>, <expr><literal type="number">0xf</literal></expr>}</block></expr>,

<expr><operator>(</operator><name>vec_u8</name><operator>)</operator> <block>{<expr><literal type="number">0x0</literal></expr>, <expr><literal type="number">0x1</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>,

<expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>}</block></expr>,

<expr><operator>(</operator><name>vec_u8</name><operator>)</operator> <block>{<expr><literal type="number">0x0</literal></expr>, <expr><literal type="number">0x1</literal></expr>, <expr><literal type="number">0x2</literal></expr>, <expr><literal type="number">0x3</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>,

<expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>}</block></expr>,

<expr><operator>(</operator><name>vec_u8</name><operator>)</operator> <block>{<expr><literal type="number">0x0</literal></expr>, <expr><literal type="number">0x1</literal></expr>, <expr><literal type="number">0x2</literal></expr>, <expr><literal type="number">0x3</literal></expr>, <expr><literal type="number">0x4</literal></expr>, <expr><literal type="number">0x5</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>,

<expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>}</block></expr>,

<expr><operator>(</operator><name>vec_u8</name><operator>)</operator> <block>{<expr><literal type="number">0x0</literal></expr>, <expr><literal type="number">0x1</literal></expr>, <expr><literal type="number">0x2</literal></expr>, <expr><literal type="number">0x3</literal></expr>, <expr><literal type="number">0x4</literal></expr>, <expr><literal type="number">0x5</literal></expr>, <expr><literal type="number">0x6</literal></expr>, <expr><literal type="number">0x7</literal></expr>,

<expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>}</block></expr>,

<expr><operator>(</operator><name>vec_u8</name><operator>)</operator> <block>{<expr><literal type="number">0x0</literal></expr>, <expr><literal type="number">0x1</literal></expr>, <expr><literal type="number">0x2</literal></expr>, <expr><literal type="number">0x3</literal></expr>, <expr><literal type="number">0x4</literal></expr>, <expr><literal type="number">0x5</literal></expr>, <expr><literal type="number">0x6</literal></expr>, <expr><literal type="number">0x7</literal></expr>,

<expr><literal type="number">0x8</literal></expr>, <expr><literal type="number">0x9</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>}</block></expr>,

<expr><operator>(</operator><name>vec_u8</name><operator>)</operator> <block>{<expr><literal type="number">0x0</literal></expr>, <expr><literal type="number">0x1</literal></expr>, <expr><literal type="number">0x2</literal></expr>, <expr><literal type="number">0x3</literal></expr>, <expr><literal type="number">0x4</literal></expr>, <expr><literal type="number">0x5</literal></expr>, <expr><literal type="number">0x6</literal></expr>, <expr><literal type="number">0x7</literal></expr>,

<expr><literal type="number">0x8</literal></expr>, <expr><literal type="number">0x9</literal></expr>, <expr><literal type="number">0xa</literal></expr>, <expr><literal type="number">0xb</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>}</block></expr>,

<expr><operator>(</operator><name>vec_u8</name><operator>)</operator> <block>{<expr><literal type="number">0x0</literal></expr>, <expr><literal type="number">0x1</literal></expr>, <expr><literal type="number">0x2</literal></expr>, <expr><literal type="number">0x3</literal></expr>, <expr><literal type="number">0x4</literal></expr>, <expr><literal type="number">0x5</literal></expr>, <expr><literal type="number">0x6</literal></expr>, <expr><literal type="number">0x7</literal></expr>,

<expr><literal type="number">0x8</literal></expr>, <expr><literal type="number">0x9</literal></expr>, <expr><literal type="number">0xa</literal></expr>, <expr><literal type="number">0xb</literal></expr>, <expr><literal type="number">0xc</literal></expr>, <expr><literal type="number">0xd</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>}</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_u8</name></type> <name>vunused</name> <init>= <expr><name><name>vunusedtab</name><index>[<expr><name>filterSize</name> <operator>%</operator> <literal type="number">8</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>sh</name><operator>&lt;</operator><literal type="number">15</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>sh</name> <operator>=</operator> <ternary><condition><expr><call><name>isAnyRGB</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>srcFormat</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>c</name><operator>-&gt;</operator><name>srcFormat</name></name><operator>==</operator><name>AV_PIX_FMT_PAL8</name></expr> ?</condition><then> <expr><literal type="number">13</literal></expr> </then><else>: <expr><operator>(</operator><name><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>depth</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>desc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PIX_FMT_FLAG_FLOAT</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>sh</name> <operator>=</operator> <literal type="number">16</literal> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>filterSize</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dstW</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>srcPos</name> <init>= <expr><name><name>filterPos</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>val</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>filterSize</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>val</name> <operator>+=</operator> <name><name>src</name><index>[<expr><name>srcPos</name> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>*</operator> <name><name>filter</name><index>[<expr><name>filterSize</name> <operator>*</operator> <name>i</name> <operator>+</operator> <name>j</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>val</name> <operator>&gt;&gt;</operator> <name>sh</name></expr></argument>, <argument><expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dstW</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>srcPos</name> <init>= <expr><name><name>filterPos</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>vout</name> <operator>=</operator> <call><name>vec_splat_s32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>filterSize</name></expr>;</condition> <incr><expr><name>j</name> <operator>+=</operator> <literal type="number">8</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>vin</name> <operator>=</operator> <operator>(</operator><name>vec_s16</name><operator>)</operator> <call><name>vec_vsx_ld</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>src</name><index>[<expr><name>srcPos</name> <operator>+</operator> <name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>j</name> <operator>+</operator> <literal type="number">8</literal> <operator>&gt;</operator> <name>filterSize</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>vin</name> <operator>=</operator> <call><name>vec_perm</name><argument_list>(<argument><expr><name>vin</name></expr></argument>, <argument><expr><operator>(</operator><name>vec_s16</name><operator>)</operator> <name>vzero</name></expr></argument>, <argument><expr><name>vunused</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>vfilter</name> <operator>=</operator> <call><name>vec_vsx_ld</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>filter</name><index>[<expr><name>filterSize</name> <operator>*</operator> <name>i</name> <operator>+</operator> <name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vfilter32_l</name> <operator>=</operator> <call><name>vec_unpackh</name><argument_list>(<argument><expr><name>vfilter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vfilter32_r</name> <operator>=</operator> <call><name>vec_unpackl</name><argument_list>(<argument><expr><name>vfilter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vtmp</name> <operator>=</operator> <operator>(</operator><name>vec_s32</name><operator>)</operator> <call><name>vec_mergeh</name><argument_list>(<argument><expr><name>vin</name></expr></argument>, <argument><expr><operator>(</operator><name>vec_s16</name><operator>)</operator> <name>vzero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vtmp2</name> <operator>=</operator> <operator>(</operator><name>vec_s32</name><operator>)</operator> <call><name>vec_mergel</name><argument_list>(<argument><expr><name>vin</name></expr></argument>, <argument><expr><operator>(</operator><name>vec_s16</name><operator>)</operator> <name>vzero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vtmp</name> <operator>=</operator> <call><name>vec_mul</name><argument_list>(<argument><expr><name>vtmp</name></expr></argument>, <argument><expr><name>vfilter32_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vtmp2</name> <operator>=</operator> <call><name>vec_mul</name><argument_list>(<argument><expr><name>vtmp2</name></expr></argument>, <argument><expr><name>vfilter32_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vout</name> <operator>=</operator> <call><name>vec_adds</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><name>vtmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vout</name> <operator>=</operator> <call><name>vec_adds</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><name>vtmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>vout</name> <operator>=</operator> <call><name>vec_sums</name><argument_list>(<argument><expr><name>vout</name></expr></argument>, <argument><expr><operator>(</operator><name>vec_s32</name><operator>)</operator> <name>vzero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>vout</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <name>sh</name></expr></argument>, <argument><expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><name>av_cold</name> <name>void</name></type> <name>ff_sws_init_swscale_vsx</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_VSX</name></expr></cpp:if>

<decl_stmt><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>dstFormat</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>dstFormat</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>cpu_flags</name> <init>= <expr><call><name>av_get_cpu_flags</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name>power8</name> <init>= <expr><name>HAVE_POWER8</name> <operator>&amp;&amp;</operator> <name>cpu_flags</name> <operator>&amp;</operator> <name>AV_CPU_FLAG_POWER8</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>cpu_flags</name> <operator>&amp;</operator> <name>AV_CPU_FLAG_VSX</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>HAVE_BIGENDIAN</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>srcBpc</name></name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>dstBpc</name></name> <operator>&lt;=</operator> <literal type="number">14</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>hyScale</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>hcScale</name></name> <operator>=</operator> <name>hScale_real_vsx</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SWS_FAST_BILINEAR</name> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>dstW</name></name> <operator>&gt;=</operator> <name><name>c</name><operator>-&gt;</operator><name>srcW</name></name> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>chrDstW</name></name> <operator>&gt;=</operator> <name><name>c</name><operator>-&gt;</operator><name>chrSrcW</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>hyscale_fast</name></name> <operator>=</operator> <name>hyscale_fast_vsx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>hcscale_fast</name></name> <operator>=</operator> <name>hcscale_fast_vsx</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>hyScale</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>hcScale</name></name> <operator>=</operator> <name>hScale8To19_vsx</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>power8</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>hyScale</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>hcScale</name></name> <operator>=</operator> <ternary><condition><expr><name><name>c</name><operator>-&gt;</operator><name>dstBpc</name></name> <operator>&gt;</operator> <literal type="number">14</literal></expr> ?</condition><then> <expr><name>hScale16To19_vsx</name></expr>

</then><else>: <expr><name>hScale16To15_vsx</name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is16BPS</name><argument_list>(<argument><expr><name>dstFormat</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isNBPS</name><argument_list>(<argument><expr><name>dstFormat</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isSemiPlanarYUV</name><argument_list>(<argument><expr><name>dstFormat</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<name>dstFormat</name> <operator>!=</operator> <name>AV_PIX_FMT_GRAYF32BE</name> <operator>&amp;&amp;</operator> <name>dstFormat</name> <operator>!=</operator> <name>AV_PIX_FMT_GRAYF32LE</name> <operator>&amp;&amp;</operator>

<operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>needAlpha</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>yuv2planeX</name></name> <operator>=</operator> <name>yuv2planeX_vsx</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>SWS_BITEXACT</name> <operator>|</operator> <name>SWS_FULL_CHR_H_INT</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>needAlpha</name></name></expr>)</condition> <block>{<block_content>

<switch>switch <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>dstBpc</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">8</literal></expr>:</case>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>yuv2plane1</name></name> <operator>=</operator> <name>yuv2plane1_8_vsx</name></expr>;</expr_stmt>

<break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>HAVE_BIGENDIAN</name></expr></cpp:if>

<case>case <expr><literal type="number">9</literal></expr>:</case>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>yuv2plane1</name></name> <operator>=</operator> <ternary><condition><expr><call><name>isBE</name><argument_list>(<argument><expr><name>dstFormat</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>yuv2plane1_9BE_vsx</name></expr> </then><else>: <expr><name>yuv2plane1_9LE_vsx</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>yuv2planeX</name></name> <operator>=</operator> <ternary><condition><expr><call><name>isBE</name><argument_list>(<argument><expr><name>dstFormat</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>yuv2planeX_9BE_vsx</name></expr> </then><else>: <expr><name>yuv2planeX_9LE_vsx</name></expr></else></ternary></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">10</literal></expr>:</case>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>yuv2plane1</name></name> <operator>=</operator> <ternary><condition><expr><call><name>isBE</name><argument_list>(<argument><expr><name>dstFormat</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>yuv2plane1_10BE_vsx</name></expr> </then><else>: <expr><name>yuv2plane1_10LE_vsx</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>yuv2planeX</name></name> <operator>=</operator> <ternary><condition><expr><call><name>isBE</name><argument_list>(<argument><expr><name>dstFormat</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>yuv2planeX_10BE_vsx</name></expr> </then><else>: <expr><name>yuv2planeX_10LE_vsx</name></expr></else></ternary></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">12</literal></expr>:</case>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>yuv2plane1</name></name> <operator>=</operator> <ternary><condition><expr><call><name>isBE</name><argument_list>(<argument><expr><name>dstFormat</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>yuv2plane1_12BE_vsx</name></expr> </then><else>: <expr><name>yuv2plane1_12LE_vsx</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>yuv2planeX</name></name> <operator>=</operator> <ternary><condition><expr><call><name>isBE</name><argument_list>(<argument><expr><name>dstFormat</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>yuv2planeX_12BE_vsx</name></expr> </then><else>: <expr><name>yuv2planeX_12LE_vsx</name></expr></else></ternary></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">14</literal></expr>:</case>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>yuv2plane1</name></name> <operator>=</operator> <ternary><condition><expr><call><name>isBE</name><argument_list>(<argument><expr><name>dstFormat</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>yuv2plane1_14BE_vsx</name></expr> </then><else>: <expr><name>yuv2plane1_14LE_vsx</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>yuv2planeX</name></name> <operator>=</operator> <ternary><condition><expr><call><name>isBE</name><argument_list>(<argument><expr><name>dstFormat</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>yuv2planeX_14BE_vsx</name></expr> </then><else>: <expr><name>yuv2planeX_14LE_vsx</name></expr></else></ternary></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">16</literal></expr>:</case>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>yuv2plane1</name></name> <operator>=</operator> <ternary><condition><expr><call><name>isBE</name><argument_list>(<argument><expr><name>dstFormat</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>yuv2plane1_16BE_vsx</name></expr> </then><else>: <expr><name>yuv2plane1_16LE_vsx</name></expr></else></ternary></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_POWER8</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>cpu_flags</name> <operator>&amp;</operator> <name>AV_CPU_FLAG_POWER8</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>yuv2planeX</name></name> <operator>=</operator> <ternary><condition><expr><call><name>isBE</name><argument_list>(<argument><expr><name>dstFormat</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>yuv2planeX_16BE_vsx</name></expr> </then><else>: <expr><name>yuv2planeX_16LE_vsx</name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</block_content>}</block></switch>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SWS_BITEXACT</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>HAVE_BIGENDIAN</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SWS_FULL_CHR_H_INT</name></expr>)</condition> <block>{<block_content>

<switch>switch <condition>(<expr><name>dstFormat</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_PIX_FMT_RGB24</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>power8</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>yuv2packed1</name></name> <operator>=</operator> <name>yuv2rgb24_full_1_vsx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>yuv2packed2</name></name> <operator>=</operator> <name>yuv2rgb24_full_2_vsx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>yuv2packedX</name></name> <operator>=</operator> <name>yuv2rgb24_full_X_vsx</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_BGR24</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>power8</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>yuv2packed1</name></name> <operator>=</operator> <name>yuv2bgr24_full_1_vsx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>yuv2packed2</name></name> <operator>=</operator> <name>yuv2bgr24_full_2_vsx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>yuv2packedX</name></name> <operator>=</operator> <name>yuv2bgr24_full_X_vsx</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_BGRA</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>power8</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>needAlpha</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>yuv2packed1</name></name> <operator>=</operator> <name>yuv2bgrx32_full_1_vsx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>yuv2packed2</name></name> <operator>=</operator> <name>yuv2bgrx32_full_2_vsx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>yuv2packedX</name></name> <operator>=</operator> <name>yuv2bgrx32_full_X_vsx</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_RGBA</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>power8</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>needAlpha</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>yuv2packed1</name></name> <operator>=</operator> <name>yuv2rgbx32_full_1_vsx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>yuv2packed2</name></name> <operator>=</operator> <name>yuv2rgbx32_full_2_vsx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>yuv2packedX</name></name> <operator>=</operator> <name>yuv2rgbx32_full_X_vsx</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_ARGB</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>power8</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>needAlpha</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>yuv2packed1</name></name> <operator>=</operator> <name>yuv2xrgb32_full_1_vsx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>yuv2packed2</name></name> <operator>=</operator> <name>yuv2xrgb32_full_2_vsx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>yuv2packedX</name></name> <operator>=</operator> <name>yuv2xrgb32_full_X_vsx</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_ABGR</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>power8</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>needAlpha</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>yuv2packed1</name></name> <operator>=</operator> <name>yuv2xbgr32_full_1_vsx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>yuv2packed2</name></name> <operator>=</operator> <name>yuv2xbgr32_full_2_vsx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>yuv2packedX</name></name> <operator>=</operator> <name>yuv2xbgr32_full_X_vsx</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></if> <else>else <block>{<block_content> 

<switch>switch <condition>(<expr><name>dstFormat</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_PIX_FMT_YUYV422</name></expr>:</case>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>yuv2packed1</name></name> <operator>=</operator> <name>yuv2yuyv422_1_vsx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>yuv2packed2</name></name> <operator>=</operator> <name>yuv2yuyv422_2_vsx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>yuv2packedX</name></name> <operator>=</operator> <name>yuv2yuyv422_X_vsx</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_YVYU422</name></expr>:</case>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>yuv2packed1</name></name> <operator>=</operator> <name>yuv2yvyu422_1_vsx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>yuv2packed2</name></name> <operator>=</operator> <name>yuv2yvyu422_2_vsx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>yuv2packedX</name></name> <operator>=</operator> <name>yuv2yvyu422_X_vsx</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_UYVY422</name></expr>:</case>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>yuv2packed1</name></name> <operator>=</operator> <name>yuv2uyvy422_1_vsx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>yuv2packed2</name></name> <operator>=</operator> <name>yuv2uyvy422_2_vsx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>yuv2packedX</name></name> <operator>=</operator> <name>yuv2uyvy422_X_vsx</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_BGRA</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>power8</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>needAlpha</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>yuv2packed1</name></name> <operator>=</operator> <name>yuv2bgrx32_1_vsx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>yuv2packed2</name></name> <operator>=</operator> <name>yuv2bgrx32_2_vsx</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_RGBA</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>power8</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>needAlpha</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>yuv2packed1</name></name> <operator>=</operator> <name>yuv2rgbx32_1_vsx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>yuv2packed2</name></name> <operator>=</operator> <name>yuv2rgbx32_2_vsx</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_ARGB</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>power8</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>needAlpha</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>yuv2packed1</name></name> <operator>=</operator> <name>yuv2xrgb32_1_vsx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>yuv2packed2</name></name> <operator>=</operator> <name>yuv2xrgb32_2_vsx</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_ABGR</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>power8</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>needAlpha</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>yuv2packed1</name></name> <operator>=</operator> <name>yuv2xbgr32_1_vsx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>yuv2packed2</name></name> <operator>=</operator> <name>yuv2xbgr32_2_vsx</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_RGB24</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>power8</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>yuv2packed1</name></name> <operator>=</operator> <name>yuv2rgb24_1_vsx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>yuv2packed2</name></name> <operator>=</operator> <name>yuv2rgb24_2_vsx</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_BGR24</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>power8</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>yuv2packed1</name></name> <operator>=</operator> <name>yuv2bgr24_1_vsx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>yuv2packed2</name></name> <operator>=</operator> <name>yuv2bgr24_2_vsx</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</block_content>}</block></function>

</unit>
