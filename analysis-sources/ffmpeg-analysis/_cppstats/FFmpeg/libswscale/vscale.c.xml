<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libswscale\vscale.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"swscale_internal.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>VScalerContext</name>

<block>{

<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name><name>filter</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>filter_pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>filter_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>isMMX</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pfn</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yuv2packedX_fn</name></type> <name>yuv2packedX</name></decl>;</decl_stmt>

}</block></struct></type> <name>VScalerContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>lum_planar_vscale</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>SwsFilterDescriptor</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sliceY</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sliceH</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VScalerContext</name> <modifier>*</modifier></type><name>inst</name> <init>= <expr><name><name>desc</name><operator>-&gt;</operator><name>instance</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dstW</name> <init>= <expr><name><name>desc</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>width</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>first</name> <init>= <expr><call><name>FFMAX</name><argument_list>(<argument><expr><literal type="number">1</literal><operator>-</operator><name><name>inst</name><operator>-&gt;</operator><name>filter_size</name></name></expr></argument>, <argument><expr><name><name>inst</name><operator>-&gt;</operator><name>filter_pos</name><index>[<expr><name>sliceY</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sp</name> <init>= <expr><name>first</name> <operator>-</operator> <name><name>desc</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>sliceY</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dp</name> <init>= <expr><name>sliceY</name> <operator>-</operator> <name><name>desc</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>sliceY</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>src</name> <init>= <expr><name><name>desc</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>line</name> <operator>+</operator> <name>sp</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>dst</name> <init>= <expr><name><name>desc</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>line</name> <operator>+</operator> <name>dp</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><name><name>inst</name><operator>-&gt;</operator><name>filter</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name><name>inst</name><operator>-&gt;</operator><name>isMMX</name></name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>sliceY</name> <operator>*</operator> <name><name>inst</name><operator>-&gt;</operator><name>filter_size</name></name></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>inst</name><operator>-&gt;</operator><name>filter_size</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>yuv2planar1_fn</name><operator>)</operator><name><name>inst</name><operator>-&gt;</operator><name>pfn</name></name><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>int16_t</name><operator>*</operator><operator>)</operator><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>,</operator> <name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>,</operator> <name>dstW</name><operator>,</operator> <name><name>c</name><operator>-&gt;</operator><name>lumDither8</name></name><operator>,</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>yuv2planarX_fn</name><operator>)</operator><name><name>inst</name><operator>-&gt;</operator><name>pfn</name></name><operator>)</operator><operator>(</operator><name>filter</name><operator>,</operator> <name><name>inst</name><operator>-&gt;</operator><name>filter_size</name></name><operator>,</operator> <operator>(</operator><specifier>const</specifier> <name>int16_t</name><operator>*</operator><operator>*</operator><operator>)</operator><name>src</name><operator>,</operator> <name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>,</operator> <name>dstW</name><operator>,</operator> <name><name>c</name><operator>-&gt;</operator><name>lumDither8</name></name><operator>,</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>desc</name><operator>-&gt;</operator><name>alpha</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>sp</name> <init>= <expr><name>first</name> <operator>-</operator> <name><name>desc</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>sliceY</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dp</name> <init>= <expr><name>sliceY</name> <operator>-</operator> <name><name>desc</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>sliceY</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>src</name> <init>= <expr><name><name>desc</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>line</name> <operator>+</operator> <name>sp</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>dst</name> <init>= <expr><name><name>desc</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>line</name> <operator>+</operator> <name>dp</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><name><name>inst</name><operator>-&gt;</operator><name>filter</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name><name>inst</name><operator>-&gt;</operator><name>isMMX</name></name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>sliceY</name> <operator>*</operator> <name><name>inst</name><operator>-&gt;</operator><name>filter_size</name></name></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>inst</name><operator>-&gt;</operator><name>filter_size</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>yuv2planar1_fn</name><operator>)</operator><name><name>inst</name><operator>-&gt;</operator><name>pfn</name></name><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>int16_t</name><operator>*</operator><operator>)</operator><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>,</operator> <name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>,</operator> <name>dstW</name><operator>,</operator> <name><name>c</name><operator>-&gt;</operator><name>lumDither8</name></name><operator>,</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>yuv2planarX_fn</name><operator>)</operator><name><name>inst</name><operator>-&gt;</operator><name>pfn</name></name><operator>)</operator><operator>(</operator><name>filter</name><operator>,</operator> <name><name>inst</name><operator>-&gt;</operator><name>filter_size</name></name><operator>,</operator> <operator>(</operator><specifier>const</specifier> <name>int16_t</name><operator>*</operator><operator>*</operator><operator>)</operator><name>src</name><operator>,</operator> <name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>,</operator> <name>dstW</name><operator>,</operator> <name><name>c</name><operator>-&gt;</operator><name>lumDither8</name></name><operator>,</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>chr_planar_vscale</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>SwsFilterDescriptor</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sliceY</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sliceH</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>chrSkipMask</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>desc</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>v_chr_sub_sample</name></name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>sliceY</name> <operator>&amp;</operator> <name>chrSkipMask</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><name>VScalerContext</name> <modifier>*</modifier></type><name>inst</name> <init>= <expr><name><name>desc</name><operator>-&gt;</operator><name>instance</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dstW</name> <init>= <expr><call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name><name>desc</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>h_chr_sub_sample</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>chrSliceY</name> <init>= <expr><name>sliceY</name> <operator>&gt;&gt;</operator> <name><name>desc</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>v_chr_sub_sample</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>first</name> <init>= <expr><call><name>FFMAX</name><argument_list>(<argument><expr><literal type="number">1</literal><operator>-</operator><name><name>inst</name><operator>-&gt;</operator><name>filter_size</name></name></expr></argument>, <argument><expr><name><name>inst</name><operator>-&gt;</operator><name>filter_pos</name><index>[<expr><name>chrSliceY</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sp1</name> <init>= <expr><name>first</name> <operator>-</operator> <name><name>desc</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>sliceY</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sp2</name> <init>= <expr><name>first</name> <operator>-</operator> <name><name>desc</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>sliceY</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dp1</name> <init>= <expr><name>chrSliceY</name> <operator>-</operator> <name><name>desc</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>sliceY</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dp2</name> <init>= <expr><name>chrSliceY</name> <operator>-</operator> <name><name>desc</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>sliceY</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>src1</name> <init>= <expr><name><name>desc</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>line</name> <operator>+</operator> <name>sp1</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>src2</name> <init>= <expr><name><name>desc</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>line</name> <operator>+</operator> <name>sp2</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>dst1</name> <init>= <expr><name><name>desc</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>line</name> <operator>+</operator> <name>dp1</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>dst2</name> <init>= <expr><name><name>desc</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>line</name> <operator>+</operator> <name>dp2</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><name><name>inst</name><operator>-&gt;</operator><name>filter</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name><name>inst</name><operator>-&gt;</operator><name>isMMX</name></name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>chrSliceY</name> <operator>*</operator> <name><name>inst</name><operator>-&gt;</operator><name>filter_size</name></name></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>yuv2nv12cX</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>yuv2interleavedX_fn</name><operator>)</operator><name><name>inst</name><operator>-&gt;</operator><name>pfn</name></name><operator>)</operator><operator>(</operator><name>c</name><operator>,</operator> <name>filter</name><operator>,</operator> <name><name>inst</name><operator>-&gt;</operator><name>filter_size</name></name><operator>,</operator> <operator>(</operator><specifier>const</specifier> <name>int16_t</name><operator>*</operator><operator>*</operator><operator>)</operator><name>src1</name><operator>,</operator> <operator>(</operator><specifier>const</specifier> <name>int16_t</name><operator>*</operator><operator>*</operator><operator>)</operator><name>src2</name><operator>,</operator> <name><name>dst1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>,</operator> <name>dstW</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>inst</name><operator>-&gt;</operator><name>filter_size</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>yuv2planar1_fn</name><operator>)</operator><name><name>inst</name><operator>-&gt;</operator><name>pfn</name></name><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>int16_t</name><operator>*</operator><operator>)</operator><name><name>src1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>,</operator> <name><name>dst1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>,</operator> <name>dstW</name><operator>,</operator> <name><name>c</name><operator>-&gt;</operator><name>chrDither8</name></name><operator>,</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>yuv2planar1_fn</name><operator>)</operator><name><name>inst</name><operator>-&gt;</operator><name>pfn</name></name><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>int16_t</name><operator>*</operator><operator>)</operator><name><name>src2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>,</operator> <name><name>dst2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>,</operator> <name>dstW</name><operator>,</operator> <name><name>c</name><operator>-&gt;</operator><name>chrDither8</name></name><operator>,</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>yuv2planarX_fn</name><operator>)</operator><name><name>inst</name><operator>-&gt;</operator><name>pfn</name></name><operator>)</operator><operator>(</operator><name>filter</name><operator>,</operator> <name><name>inst</name><operator>-&gt;</operator><name>filter_size</name></name><operator>,</operator> <operator>(</operator><specifier>const</specifier> <name>int16_t</name><operator>*</operator><operator>*</operator><operator>)</operator><name>src1</name><operator>,</operator> <name><name>dst1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>,</operator> <name>dstW</name><operator>,</operator> <name><name>c</name><operator>-&gt;</operator><name>chrDither8</name></name><operator>,</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>yuv2planarX_fn</name><operator>)</operator><name><name>inst</name><operator>-&gt;</operator><name>pfn</name></name><operator>)</operator><operator>(</operator><name>filter</name><operator>,</operator> <name><name>inst</name><operator>-&gt;</operator><name>filter_size</name></name><operator>,</operator> <operator>(</operator><specifier>const</specifier> <name>int16_t</name><operator>*</operator><operator>*</operator><operator>)</operator><name>src2</name><operator>,</operator> <name><name>dst2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>,</operator> <name>dstW</name><operator>,</operator> <name><name>c</name><operator>-&gt;</operator><name>chrDither8</name></name><operator>,</operator> <ternary><condition><expr><name><name>inst</name><operator>-&gt;</operator><name>isMMX</name></name></expr> ?</condition><then> <expr><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>uv_offx2</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr> </then><else>: <expr><literal type="number">3</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>packed_vscale</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>SwsFilterDescriptor</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sliceY</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sliceH</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VScalerContext</name> <modifier>*</modifier></type><name>inst</name> <init>= <expr><name><name>desc</name><operator>-&gt;</operator><name>instance</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dstW</name> <init>= <expr><name><name>desc</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>width</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>chrSliceY</name> <init>= <expr><name>sliceY</name> <operator>&gt;&gt;</operator> <name><name>desc</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>v_chr_sub_sample</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>lum_fsize</name> <init>= <expr><name><name>inst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>filter_size</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>chr_fsize</name> <init>= <expr><name><name>inst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>filter_size</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>lum_filter</name> <init>= <expr><name><name>inst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>filter</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>chr_filter</name> <init>= <expr><name><name>inst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>filter</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>firstLum</name> <init>= <expr><call><name>FFMAX</name><argument_list>(<argument><expr><literal type="number">1</literal><operator>-</operator><name>lum_fsize</name></expr></argument>, <argument><expr><name><name>inst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>filter_pos</name><index>[ <expr><name>sliceY</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>firstChr</name> <init>= <expr><call><name>FFMAX</name><argument_list>(<argument><expr><literal type="number">1</literal><operator>-</operator><name>chr_fsize</name></expr></argument>, <argument><expr><name><name>inst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>filter_pos</name><index>[<expr><name>chrSliceY</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sp0</name> <init>= <expr><name>firstLum</name> <operator>-</operator> <name><name>desc</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>sliceY</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sp1</name> <init>= <expr><name>firstChr</name> <operator>-</operator> <name><name>desc</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>sliceY</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sp2</name> <init>= <expr><name>firstChr</name> <operator>-</operator> <name><name>desc</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>sliceY</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sp3</name> <init>= <expr><name>firstLum</name> <operator>-</operator> <name><name>desc</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>sliceY</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dp</name> <init>= <expr><name>sliceY</name> <operator>-</operator> <name><name>desc</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>sliceY</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>src0</name> <init>= <expr><name><name>desc</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>line</name> <operator>+</operator> <name>sp0</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>src1</name> <init>= <expr><name><name>desc</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>line</name> <operator>+</operator> <name>sp1</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>src2</name> <init>= <expr><name><name>desc</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>line</name> <operator>+</operator> <name>sp2</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>src3</name> <init>= <expr><ternary><condition><expr><name><name>desc</name><operator>-&gt;</operator><name>alpha</name></name></expr> ?</condition><then> <expr><name><name>desc</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>line</name> <operator>+</operator> <name>sp3</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>dst</name> <init>= <expr><name><name>desc</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>line</name> <operator>+</operator> <name>dp</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>yuv2packed1</name></name> <operator>&amp;&amp;</operator> <name>lum_fsize</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>chr_fsize</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>yuv2packed1_fn</name><operator>)</operator><name><name>inst</name><operator>-&gt;</operator><name>pfn</name></name><operator>)</operator><operator>(</operator><name>c</name><operator>,</operator> <operator>(</operator><specifier>const</specifier> <name>int16_t</name><operator>*</operator><operator>)</operator><operator>*</operator><name>src0</name><operator>,</operator> <operator>(</operator><specifier>const</specifier> <name>int16_t</name><operator>*</operator><operator>*</operator><operator>)</operator><name>src1</name><operator>,</operator> <operator>(</operator><specifier>const</specifier> <name>int16_t</name><operator>*</operator><operator>*</operator><operator>)</operator><name>src2</name><operator>,</operator>

<operator>(</operator><specifier>const</specifier> <name>int16_t</name><operator>*</operator><operator>)</operator><operator>(</operator><ternary><condition><expr><name><name>desc</name><operator>-&gt;</operator><name>alpha</name></name></expr> ?</condition><then> <expr><operator>*</operator><name>src3</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary><operator>)</operator><operator>,</operator> <operator>*</operator><name>dst</name><operator>,</operator> <name>dstW</name><operator>,</operator> <literal type="number">0</literal><operator>,</operator> <name>sliceY</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>yuv2packed1</name></name> <operator>&amp;&amp;</operator> <name>lum_fsize</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>chr_fsize</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator>

<name><name>chr_filter</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>chrSliceY</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>chr_filter</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>chrSliceY</name></expr>]</index></name> <operator>==</operator> <literal type="number">4096</literal> <operator>&amp;&amp;</operator>

<name><name>chr_filter</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>chrSliceY</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&lt;=</operator> <literal type="number">4096U</literal></expr>)</condition> <block>{<block_content> 

<decl_stmt><decl><type><name>int</name></type> <name>chrAlpha</name> <init>= <expr><name><name>chr_filter</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>chrSliceY</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>yuv2packed1_fn</name><operator>)</operator><name><name>inst</name><operator>-&gt;</operator><name>pfn</name></name><operator>)</operator><operator>(</operator><name>c</name><operator>,</operator> <operator>(</operator><specifier>const</specifier> <name>int16_t</name><operator>*</operator><operator>)</operator><operator>*</operator><name>src0</name><operator>,</operator> <operator>(</operator><specifier>const</specifier> <name>int16_t</name><operator>*</operator><operator>*</operator><operator>)</operator><name>src1</name><operator>,</operator> <operator>(</operator><specifier>const</specifier> <name>int16_t</name><operator>*</operator><operator>*</operator><operator>)</operator><name>src2</name><operator>,</operator>

<operator>(</operator><specifier>const</specifier> <name>int16_t</name><operator>*</operator><operator>)</operator><operator>(</operator><ternary><condition><expr><name><name>desc</name><operator>-&gt;</operator><name>alpha</name></name></expr> ?</condition><then> <expr><operator>*</operator><name>src3</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary><operator>)</operator><operator>,</operator> <operator>*</operator><name>dst</name><operator>,</operator> <name>dstW</name><operator>,</operator> <name>chrAlpha</name><operator>,</operator> <name>sliceY</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>yuv2packed2</name></name> <operator>&amp;&amp;</operator> <name>lum_fsize</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>chr_fsize</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator>

<name><name>lum_filter</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>sliceY</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>lum_filter</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>sliceY</name></expr>]</index></name> <operator>==</operator> <literal type="number">4096</literal> <operator>&amp;&amp;</operator>

<name><name>lum_filter</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>sliceY</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&lt;=</operator> <literal type="number">4096U</literal> <operator>&amp;&amp;</operator>

<name><name>chr_filter</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>chrSliceY</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>chr_filter</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>chrSliceY</name></expr>]</index></name> <operator>==</operator> <literal type="number">4096</literal> <operator>&amp;&amp;</operator>

<name><name>chr_filter</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>chrSliceY</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&lt;=</operator> <literal type="number">4096U</literal></expr>

)</condition> <block>{<block_content> 

<decl_stmt><decl><type><name>int</name></type> <name>lumAlpha</name> <init>= <expr><name><name>lum_filter</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>sliceY</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>chrAlpha</name> <init>= <expr><name><name>chr_filter</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>chrSliceY</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>lumMmxFilter</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator>

<name><name>c</name><operator>-&gt;</operator><name>lumMmxFilter</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>lum_filter</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>sliceY</name></expr>]</index></name> <operator>*</operator> <literal type="number">0x10001</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>chrMmxFilter</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator>

<name><name>c</name><operator>-&gt;</operator><name>chrMmxFilter</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>chr_filter</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>chrSliceY</name></expr>]</index></name> <operator>*</operator> <literal type="number">0x10001</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>yuv2packed2_fn</name><operator>)</operator><name><name>inst</name><operator>-&gt;</operator><name>pfn</name></name><operator>)</operator><operator>(</operator><name>c</name><operator>,</operator> <operator>(</operator><specifier>const</specifier> <name>int16_t</name><operator>*</operator><operator>*</operator><operator>)</operator><name>src0</name><operator>,</operator> <operator>(</operator><specifier>const</specifier> <name>int16_t</name><operator>*</operator><operator>*</operator><operator>)</operator><name>src1</name><operator>,</operator> <operator>(</operator><specifier>const</specifier> <name>int16_t</name><operator>*</operator><operator>*</operator><operator>)</operator><name>src2</name><operator>,</operator> <operator>(</operator><specifier>const</specifier> <name>int16_t</name><operator>*</operator><operator>*</operator><operator>)</operator><name>src3</name><operator>,</operator>

<operator>*</operator><name>dst</name><operator>,</operator> <name>dstW</name><operator>,</operator> <name>lumAlpha</name><operator>,</operator> <name>chrAlpha</name><operator>,</operator> <name>sliceY</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>yuv2packed1</name></name> <operator>&amp;&amp;</operator> <name>lum_fsize</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>chr_fsize</name> <operator>==</operator> <literal type="number">2</literal><operator>)</operator> <operator>||</operator>

<operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>yuv2packed2</name></name> <operator>&amp;&amp;</operator> <name>lum_fsize</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>chr_fsize</name> <operator>==</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>warned_unuseable_bilinear</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Optimized 2 tap filter code cannot be used\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>warned_unuseable_bilinear</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name><name>inst</name><operator>-&gt;</operator><name>yuv2packedX</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>lum_filter</name> <operator>+</operator> <name>sliceY</name> <operator>*</operator> <name>lum_fsize</name></expr></argument>,

<argument><expr><operator>(</operator><specifier>const</specifier> <name>int16_t</name><operator>*</operator><operator>*</operator><operator>)</operator><name>src0</name></expr></argument>, <argument><expr><name>lum_fsize</name></expr></argument>, <argument><expr><name>chr_filter</name> <operator>+</operator> <name>chrSliceY</name> <operator>*</operator> <name>chr_fsize</name></expr></argument>,

<argument><expr><operator>(</operator><specifier>const</specifier> <name>int16_t</name><operator>*</operator><operator>*</operator><operator>)</operator><name>src1</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>int16_t</name><operator>*</operator><operator>*</operator><operator>)</operator><name>src2</name></expr></argument>, <argument><expr><name>chr_fsize</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>int16_t</name><operator>*</operator><operator>*</operator><operator>)</operator><name>src3</name></expr></argument>, <argument><expr><operator>*</operator><name>dst</name></expr></argument>, <argument><expr><name>dstW</name></expr></argument>, <argument><expr><name>sliceY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>any_vscale</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>SwsFilterDescriptor</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sliceY</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sliceH</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VScalerContext</name> <modifier>*</modifier></type><name>inst</name> <init>= <expr><name><name>desc</name><operator>-&gt;</operator><name>instance</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dstW</name> <init>= <expr><name><name>desc</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>width</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>chrSliceY</name> <init>= <expr><name>sliceY</name> <operator>&gt;&gt;</operator> <name><name>desc</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>v_chr_sub_sample</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>lum_fsize</name> <init>= <expr><name><name>inst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>filter_size</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>chr_fsize</name> <init>= <expr><name><name>inst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>filter_size</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>lum_filter</name> <init>= <expr><name><name>inst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>filter</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>chr_filter</name> <init>= <expr><name><name>inst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>filter</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>firstLum</name> <init>= <expr><call><name>FFMAX</name><argument_list>(<argument><expr><literal type="number">1</literal><operator>-</operator><name>lum_fsize</name></expr></argument>, <argument><expr><name><name>inst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>filter_pos</name><index>[ <expr><name>sliceY</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>firstChr</name> <init>= <expr><call><name>FFMAX</name><argument_list>(<argument><expr><literal type="number">1</literal><operator>-</operator><name>chr_fsize</name></expr></argument>, <argument><expr><name><name>inst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>filter_pos</name><index>[<expr><name>chrSliceY</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sp0</name> <init>= <expr><name>firstLum</name> <operator>-</operator> <name><name>desc</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>sliceY</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sp1</name> <init>= <expr><name>firstChr</name> <operator>-</operator> <name><name>desc</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>sliceY</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sp2</name> <init>= <expr><name>firstChr</name> <operator>-</operator> <name><name>desc</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>sliceY</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sp3</name> <init>= <expr><name>firstLum</name> <operator>-</operator> <name><name>desc</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>sliceY</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dp0</name> <init>= <expr><name>sliceY</name> <operator>-</operator> <name><name>desc</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>sliceY</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dp1</name> <init>= <expr><name>chrSliceY</name> <operator>-</operator> <name><name>desc</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>sliceY</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dp2</name> <init>= <expr><name>chrSliceY</name> <operator>-</operator> <name><name>desc</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>sliceY</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dp3</name> <init>= <expr><name>sliceY</name> <operator>-</operator> <name><name>desc</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>sliceY</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>src0</name> <init>= <expr><name><name>desc</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>line</name> <operator>+</operator> <name>sp0</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>src1</name> <init>= <expr><name><name>desc</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>line</name> <operator>+</operator> <name>sp1</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>src2</name> <init>= <expr><name><name>desc</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>line</name> <operator>+</operator> <name>sp2</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>src3</name> <init>= <expr><ternary><condition><expr><name><name>desc</name><operator>-&gt;</operator><name>alpha</name></name></expr> ?</condition><then> <expr><name><name>desc</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>line</name> <operator>+</operator> <name>sp3</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>dst</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><name><name>desc</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>line</name><index>[<expr><name>dp0</name></expr>]</index></name></expr>,

<expr><name><name>desc</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>line</name><index>[<expr><name>dp1</name></expr>]</index></name></expr>,

<expr><name><name>desc</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name><name>line</name><index>[<expr><name>dp2</name></expr>]</index></name></expr>,

<expr><name><name>desc</name><operator>-&gt;</operator><name>alpha</name></name> <operator>?</operator> <name><name>desc</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name><name>line</name><index>[<expr><name>dp3</name></expr>]</index></name> <operator>:</operator> <name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert1</name><argument_list>(<argument><expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>yuv2packed1</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>yuv2packed2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>yuv2anyX_fn</name><operator>)</operator><name><name>inst</name><operator>-&gt;</operator><name>pfn</name></name><operator>)</operator><operator>(</operator><name>c</name><operator>,</operator> <name>lum_filter</name> <operator>+</operator> <name>sliceY</name> <operator>*</operator> <name>lum_fsize</name><operator>,</operator>

<operator>(</operator><specifier>const</specifier> <name>int16_t</name><operator>*</operator><operator>*</operator><operator>)</operator><name>src0</name><operator>,</operator> <name>lum_fsize</name><operator>,</operator> <name>chr_filter</name> <operator>+</operator> <name>sliceY</name> <operator>*</operator> <name>chr_fsize</name><operator>,</operator>

<operator>(</operator><specifier>const</specifier> <name>int16_t</name><operator>*</operator><operator>*</operator><operator>)</operator><name>src1</name><operator>,</operator> <operator>(</operator><specifier>const</specifier> <name>int16_t</name><operator>*</operator><operator>*</operator><operator>)</operator><name>src2</name><operator>,</operator> <name>chr_fsize</name><operator>,</operator> <operator>(</operator><specifier>const</specifier> <name>int16_t</name><operator>*</operator><operator>*</operator><operator>)</operator><name>src3</name><operator>,</operator> <name>dst</name><operator>,</operator> <name>dstW</name><operator>,</operator> <name>sliceY</name><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_init_vscale</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>SwsFilterDescriptor</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>SwsSlice</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>SwsSlice</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VScalerContext</name> <modifier>*</modifier></type><name>lumCtx</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VScalerContext</name> <modifier>*</modifier></type><name>chrCtx</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>isPlanarYUV</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>dstFormat</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><call><name>isGray</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>dstFormat</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isALPHA</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>dstFormat</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>lumCtx</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>VScalerContext</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>lumCtx</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>desc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>process</name> <operator>=</operator> <name>lum_planar_vscale</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>desc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>instance</name> <operator>=</operator> <name>lumCtx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>desc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>src</name> <operator>=</operator> <name>src</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>desc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>dst</name> <operator>=</operator> <name>dst</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>desc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>alpha</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>needAlpha</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isGray</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>dstFormat</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>chrCtx</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>VScalerContext</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>chrCtx</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>desc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>process</name> <operator>=</operator> <name>chr_planar_vscale</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>desc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>instance</name> <operator>=</operator> <name>chrCtx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>desc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>src</name> <operator>=</operator> <name>src</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>desc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>dst</name> <operator>=</operator> <name>dst</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>lumCtx</name> <operator>=</operator> <call><name>av_mallocz_array</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>VScalerContext</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>lumCtx</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>chrCtx</name> <operator>=</operator> <operator>&amp;</operator><name><name>lumCtx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>desc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>process</name> <operator>=</operator> <ternary><condition><expr><name><name>c</name><operator>-&gt;</operator><name>yuv2packedX</name></name></expr> ?</condition><then> <expr><name>packed_vscale</name></expr> </then><else>: <expr><name>any_vscale</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>desc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>instance</name> <operator>=</operator> <name>lumCtx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>desc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>src</name> <operator>=</operator> <name>src</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>desc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>dst</name> <operator>=</operator> <name>dst</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>desc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>alpha</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>needAlpha</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>ff_init_vscale_pfn</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>yuv2plane1</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>yuv2planeX</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>yuv2nv12cX</name></name></expr></argument>,

<argument><expr><name><name>c</name><operator>-&gt;</operator><name>yuv2packed1</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>yuv2packed2</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>yuv2packedX</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>yuv2anyX</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>use_mmx_vfilter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_init_vscale_pfn</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>,

<parameter><decl><type><name>yuv2planar1_fn</name></type> <name>yuv2plane1</name></decl></parameter>,

<parameter><decl><type><name>yuv2planarX_fn</name></type> <name>yuv2planeX</name></decl></parameter>,

<parameter><decl><type><name>yuv2interleavedX_fn</name></type> <name>yuv2nv12cX</name></decl></parameter>,

<parameter><decl><type><name>yuv2packed1_fn</name></type> <name>yuv2packed1</name></decl></parameter>,

<parameter><decl><type><name>yuv2packed2_fn</name></type> <name>yuv2packed2</name></decl></parameter>,

<parameter><decl><type><name>yuv2packedX_fn</name></type> <name>yuv2packedX</name></decl></parameter>,

<parameter><decl><type><name>yuv2anyX_fn</name></type> <name>yuv2anyX</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>use_mmx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VScalerContext</name> <modifier>*</modifier></type><name>lumCtx</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VScalerContext</name> <modifier>*</modifier></type><name>chrCtx</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>numDesc</name></name> <operator>-</operator> <operator>(</operator><ternary><condition><expr><name><name>c</name><operator>-&gt;</operator><name>is_internal_gamma</name></name></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt> 

<if_stmt><if>if <condition>(<expr><call><name>isPlanarYUV</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>dstFormat</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><call><name>isGray</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>dstFormat</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isALPHA</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>dstFormat</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isGray</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>dstFormat</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>chrCtx</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>desc</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>instance</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chrCtx</name><operator>-&gt;</operator><name>filter</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>use_mmx</name></expr> ?</condition><then> <expr><operator>(</operator><name>int16_t</name><operator>*</operator><operator>)</operator><name><name>c</name><operator>-&gt;</operator><name>chrMmxFilter</name></name></expr> </then><else>: <expr><name><name>c</name><operator>-&gt;</operator><name>vChrFilter</name></name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chrCtx</name><operator>-&gt;</operator><name>filter_size</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>vChrFilterSize</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chrCtx</name><operator>-&gt;</operator><name>filter_pos</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>vChrFilterPos</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chrCtx</name><operator>-&gt;</operator><name>isMMX</name></name> <operator>=</operator> <name>use_mmx</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name>idx</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>yuv2nv12cX</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>chrCtx</name><operator>-&gt;</operator><name>pfn</name></name> <operator>=</operator> <name>yuv2nv12cX</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>vChrFilterSize</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>chrCtx</name><operator>-&gt;</operator><name>pfn</name></name> <operator>=</operator> <name>yuv2plane1</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>chrCtx</name><operator>-&gt;</operator><name>pfn</name></name> <operator>=</operator> <name>yuv2planeX</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>lumCtx</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>desc</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>instance</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lumCtx</name><operator>-&gt;</operator><name>filter</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>use_mmx</name></expr> ?</condition><then> <expr><operator>(</operator><name>int16_t</name><operator>*</operator><operator>)</operator><name><name>c</name><operator>-&gt;</operator><name>lumMmxFilter</name></name></expr> </then><else>: <expr><name><name>c</name><operator>-&gt;</operator><name>vLumFilter</name></name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lumCtx</name><operator>-&gt;</operator><name>filter</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>use_mmx</name></expr> ?</condition><then> <expr><operator>(</operator><name>int16_t</name><operator>*</operator><operator>)</operator><name><name>c</name><operator>-&gt;</operator><name>alpMmxFilter</name></name></expr> </then><else>: <expr><name><name>c</name><operator>-&gt;</operator><name>vLumFilter</name></name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lumCtx</name><operator>-&gt;</operator><name>filter_size</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>vLumFilterSize</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lumCtx</name><operator>-&gt;</operator><name>filter_pos</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>vLumFilterPos</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lumCtx</name><operator>-&gt;</operator><name>isMMX</name></name> <operator>=</operator> <name>use_mmx</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>vLumFilterSize</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>lumCtx</name><operator>-&gt;</operator><name>pfn</name></name> <operator>=</operator> <name>yuv2plane1</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>lumCtx</name><operator>-&gt;</operator><name>pfn</name></name> <operator>=</operator> <name>yuv2planeX</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>lumCtx</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>desc</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>instance</name></expr>;</expr_stmt>

<expr_stmt><expr><name>chrCtx</name> <operator>=</operator> <operator>&amp;</operator><name><name>lumCtx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lumCtx</name><operator>-&gt;</operator><name>filter</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>vLumFilter</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lumCtx</name><operator>-&gt;</operator><name>filter_size</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>vLumFilterSize</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lumCtx</name><operator>-&gt;</operator><name>filter_pos</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>vLumFilterPos</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chrCtx</name><operator>-&gt;</operator><name>filter</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>vChrFilter</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chrCtx</name><operator>-&gt;</operator><name>filter_size</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>vChrFilterSize</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chrCtx</name><operator>-&gt;</operator><name>filter_pos</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>vChrFilterPos</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lumCtx</name><operator>-&gt;</operator><name>isMMX</name></name> <operator>=</operator> <name>use_mmx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chrCtx</name><operator>-&gt;</operator><name>isMMX</name></name> <operator>=</operator> <name>use_mmx</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>yuv2packedX</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>yuv2packed1</name></name> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>vLumFilterSize</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>vChrFilterSize</name></name> <operator>&lt;=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>lumCtx</name><operator>-&gt;</operator><name>pfn</name></name> <operator>=</operator> <name>yuv2packed1</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>yuv2packed2</name></name> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>vLumFilterSize</name></name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>vChrFilterSize</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>lumCtx</name><operator>-&gt;</operator><name>pfn</name></name> <operator>=</operator> <name>yuv2packed2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>lumCtx</name><operator>-&gt;</operator><name>yuv2packedX</name></name> <operator>=</operator> <name>yuv2packedX</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>lumCtx</name><operator>-&gt;</operator><name>pfn</name></name> <operator>=</operator> <name>yuv2anyX</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

</unit>
