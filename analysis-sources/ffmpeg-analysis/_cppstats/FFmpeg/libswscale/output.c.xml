<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libswscale\output.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avutil.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/bswap.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/cpu.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mathematics.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixdesc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rgb2rgb.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"swscale.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"swscale_internal.h"</cpp:file></cpp:include>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><specifier>const</specifier> <name>uint8_t</name></expr></argument>, <argument><expr><name>ff_dither_2x2_4</name></expr></argument>)</argument_list></call><index>[]</index><index>[<expr><literal type="number">8</literal></expr>]</index> <operator>=</operator> <block>{

<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, }</block></expr>,

}</block></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><specifier>const</specifier> <name>uint8_t</name></expr></argument>, <argument><expr><name>ff_dither_2x2_8</name></expr></argument>)</argument_list></call><index>[]</index><index>[<expr><literal type="number">8</literal></expr>]</index> <operator>=</operator> <block>{

<expr><block>{ <expr><literal type="number">6</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">2</literal></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="number">6</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">2</literal></expr>, }</block></expr>,

}</block></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><specifier>const</specifier> <name>uint8_t</name></expr></argument>, <argument><expr><name>ff_dither_4x4_16</name></expr></argument>)</argument_list></call><index>[]</index><index>[<expr><literal type="number">8</literal></expr>]</index> <operator>=</operator> <block>{

<expr><block>{ <expr><literal type="number">8</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">7</literal></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">13</literal></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="number">10</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">5</literal></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">15</literal></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="number">8</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">7</literal></expr>, }</block></expr>,

}</block></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><specifier>const</specifier> <name>uint8_t</name></expr></argument>, <argument><expr><name>ff_dither_8x8_32</name></expr></argument>)</argument_list></call><index>[]</index><index>[<expr><literal type="number">8</literal></expr>]</index> <operator>=</operator> <block>{

<expr><block>{ <expr><literal type="number">17</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">14</literal></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">26</literal></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="number">21</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">10</literal></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">31</literal></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="number">16</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">15</literal></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">27</literal></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="number">20</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">11</literal></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">30</literal></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="number">17</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">14</literal></expr>, }</block></expr>,

}</block></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><specifier>const</specifier> <name>uint8_t</name></expr></argument>, <argument><expr><name>ff_dither_8x8_73</name></expr></argument>)</argument_list></call><index>[]</index><index>[<expr><literal type="number">8</literal></expr>]</index> <operator>=</operator> <block>{

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">55</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">68</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">58</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">72</literal></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="number">37</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">54</literal></expr>, <expr><literal type="number">35</literal></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="number">9</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">59</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">67</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">63</literal></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="number">46</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">49</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">26</literal></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">57</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">71</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">70</literal></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="number">39</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">52</literal></expr>, <expr><literal type="number">34</literal></expr>, <expr><literal type="number">38</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">51</literal></expr>, <expr><literal type="number">33</literal></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="number">11</literal></expr>, <expr><literal type="number">66</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">62</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">65</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">60</literal></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="number">48</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">43</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">47</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><literal type="number">42</literal></expr>, <expr><literal type="number">24</literal></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">55</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">68</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">58</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">72</literal></expr>, }</block></expr>,

}</block></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><specifier>const</specifier> <name>uint8_t</name></expr></argument>, <argument><expr><name>ff_dither_8x8_220</name></expr></argument>)</argument_list></call><index>[]</index><index>[<expr><literal type="number">8</literal></expr>]</index> <operator>=</operator> <block>{

<expr><block>{<expr><literal type="number">117</literal></expr>, <expr><literal type="number">62</literal></expr>, <expr><literal type="number">158</literal></expr>, <expr><literal type="number">103</literal></expr>, <expr><literal type="number">113</literal></expr>, <expr><literal type="number">58</literal></expr>, <expr><literal type="number">155</literal></expr>, <expr><literal type="number">100</literal></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="number">34</literal></expr>, <expr><literal type="number">199</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">186</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">196</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">182</literal></expr>, }</block></expr>,

<expr><block>{<expr><literal type="number">144</literal></expr>, <expr><literal type="number">89</literal></expr>, <expr><literal type="number">131</literal></expr>, <expr><literal type="number">76</literal></expr>, <expr><literal type="number">141</literal></expr>, <expr><literal type="number">86</literal></expr>, <expr><literal type="number">127</literal></expr>, <expr><literal type="number">72</literal></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">165</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><literal type="number">206</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">175</literal></expr>, <expr><literal type="number">52</literal></expr>, <expr><literal type="number">217</literal></expr>, }</block></expr>,

<expr><block>{<expr><literal type="number">110</literal></expr>, <expr><literal type="number">55</literal></expr>, <expr><literal type="number">151</literal></expr>, <expr><literal type="number">96</literal></expr>, <expr><literal type="number">120</literal></expr>, <expr><literal type="number">65</literal></expr>, <expr><literal type="number">162</literal></expr>, <expr><literal type="number">107</literal></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="number">28</literal></expr>, <expr><literal type="number">193</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">179</literal></expr>, <expr><literal type="number">38</literal></expr>, <expr><literal type="number">203</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">189</literal></expr>, }</block></expr>,

<expr><block>{<expr><literal type="number">138</literal></expr>, <expr><literal type="number">83</literal></expr>, <expr><literal type="number">124</literal></expr>, <expr><literal type="number">69</literal></expr>, <expr><literal type="number">148</literal></expr>, <expr><literal type="number">93</literal></expr>, <expr><literal type="number">134</literal></expr>, <expr><literal type="number">79</literal></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="number">7</literal></expr>, <expr><literal type="number">172</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">213</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">168</literal></expr>, <expr><literal type="number">45</literal></expr>, <expr><literal type="number">210</literal></expr>, }</block></expr>,

<expr><block>{<expr><literal type="number">117</literal></expr>, <expr><literal type="number">62</literal></expr>, <expr><literal type="number">158</literal></expr>, <expr><literal type="number">103</literal></expr>, <expr><literal type="number">113</literal></expr>, <expr><literal type="number">58</literal></expr>, <expr><literal type="number">155</literal></expr>, <expr><literal type="number">100</literal></expr>, }</block></expr>,

}</block></expr>;</expr_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:elif>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><specifier>const</specifier> <name>uint8_t</name></expr></argument>, <argument><expr><name>ff_dither_8x8_220</name></expr></argument>)</argument_list></call><index>[]</index><index>[<expr><literal type="number">8</literal></expr>]</index> <operator>=</operator> <block>{

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">143</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">200</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">156</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">215</literal></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="number">78</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">125</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">89</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">138</literal></expr>, <expr><literal type="number">74</literal></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="number">10</literal></expr>, <expr><literal type="number">180</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">161</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">195</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">175</literal></expr>, }</block></expr>,

<expr><block>{<expr><literal type="number">109</literal></expr>, <expr><literal type="number">51</literal></expr>, <expr><literal type="number">93</literal></expr>, <expr><literal type="number">38</literal></expr>, <expr><literal type="number">121</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><literal type="number">105</literal></expr>, <expr><literal type="number">47</literal></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">152</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">210</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">147</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">205</literal></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="number">85</literal></expr>, <expr><literal type="number">33</literal></expr>, <expr><literal type="number">134</literal></expr>, <expr><literal type="number">71</literal></expr>, <expr><literal type="number">81</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">130</literal></expr>, <expr><literal type="number">67</literal></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="number">14</literal></expr>, <expr><literal type="number">190</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">171</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">185</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">166</literal></expr>, }</block></expr>,

<expr><block>{<expr><literal type="number">117</literal></expr>, <expr><literal type="number">57</literal></expr>, <expr><literal type="number">101</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">113</literal></expr>, <expr><literal type="number">54</literal></expr>, <expr><literal type="number">97</literal></expr>, <expr><literal type="number">41</literal></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">143</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">200</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">156</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">215</literal></expr>, }</block></expr>,

}</block></expr>;</expr_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:elif>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><specifier>const</specifier> <name>uint8_t</name></expr></argument>, <argument><expr><name>ff_dither_8x8_220</name></expr></argument>)</argument_list></call><index>[]</index><index>[<expr><literal type="number">8</literal></expr>]</index> <operator>=</operator> <block>{

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">124</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">193</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">140</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">213</literal></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="number">55</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">104</literal></expr>, <expr><literal type="number">42</literal></expr>, <expr><literal type="number">66</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">119</literal></expr>, <expr><literal type="number">52</literal></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="number">168</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">145</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">187</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">162</literal></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="number">86</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">70</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><literal type="number">39</literal></expr>, <expr><literal type="number">82</literal></expr>, <expr><literal type="number">28</literal></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">134</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">206</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">129</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">200</literal></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="number">62</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">114</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">58</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">109</literal></expr>, <expr><literal type="number">45</literal></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><literal type="number">181</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">157</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">175</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">151</literal></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="number">95</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">78</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">90</literal></expr>, <expr><literal type="number">34</literal></expr>, <expr><literal type="number">74</literal></expr>, <expr><literal type="number">24</literal></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">124</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">193</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">140</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">213</literal></expr>, }</block></expr>,

}</block></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><specifier>const</specifier> <name>uint8_t</name></expr></argument>, <argument><expr><name>ff_dither_8x8_220</name></expr></argument>)</argument_list></call><index>[]</index><index>[<expr><literal type="number">8</literal></expr>]</index> <operator>=</operator> <block>{

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">107</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">187</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">125</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">212</literal></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="number">39</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">86</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">49</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">102</literal></expr>, <expr><literal type="number">36</literal></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">158</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">131</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">180</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">151</literal></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="number">68</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">52</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">81</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">17</literal></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">119</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">203</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">113</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">195</literal></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="number">45</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">96</literal></expr>, <expr><literal type="number">33</literal></expr>, <expr><literal type="number">42</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">91</literal></expr>, <expr><literal type="number">30</literal></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">172</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">144</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">165</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">137</literal></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="number">77</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">72</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">14</literal></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">107</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">187</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">125</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">212</literal></expr>, }</block></expr>,

}</block></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>output_pixel</name><parameter_list>(<parameter><type><name>pos</name></type></parameter>, <parameter><type><name>val</name></type></parameter>, <parameter><type><name>bias</name></type></parameter>, <parameter><type><name>signedness</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (big_endian) { AV_WB16(pos, bias + av_clip_ ##signedness ##16(val &gt;&gt; shift)); } else { AV_WL16(pos, bias + av_clip_ ##signedness ##16(val &gt;&gt; shift)); }</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type>

<name>yuv2plane1_16_c_template</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dstW</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>big_endian</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>output_bits</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>shift</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>output_bits</name> <operator>==</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dstW</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>val</name> <init>= <expr><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>shift</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>output_pixel</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dest</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>uint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type>

<name>yuv2planeX_16_c_template</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>filterSize</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dstW</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>big_endian</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>output_bits</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>shift</name> <init>= <expr><literal type="number">15</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>output_bits</name> <operator>==</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dstW</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>val</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>shift</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><name>val</name> <operator>-=</operator> <literal type="number">0x40000000</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>filterSize</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>val</name> <operator>+=</operator> <name><name>src</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>filter</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>output_pixel</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dest</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="number">0x8000</literal></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>yuv2p016cX_c</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>chrFilter</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>chrFilterSize</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>chrUSrc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>chrVSrc</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest8</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>chrDstW</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dest</name> <init>= <expr><operator>(</operator><name>uint16_t</name><operator>*</operator><operator>)</operator><name>dest8</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>uSrc</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>int32_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>chrUSrc</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>vSrc</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>int32_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>chrVSrc</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>shift</name> <init>= <expr><literal type="number">15</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>big_endian</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>dstFormat</name></name> <operator>==</operator> <name>AV_PIX_FMT_P016BE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>chrDstW</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>u</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>shift</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>shift</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>u</name> <operator>-=</operator> <literal type="number">0x40000000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name> <operator>-=</operator> <literal type="number">0x40000000</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>chrFilterSize</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>u</name> <operator>+=</operator> <name><name>uSrc</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>chrFilter</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name> <operator>+=</operator> <name><name>vSrc</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>chrFilter</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>output_pixel</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dest</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>i</name></expr>]</index></name></expr></argument> , <argument><expr><name>u</name></expr></argument>, <argument><expr><literal type="number">0x8000</literal></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>output_pixel</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dest</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">0x8000</literal></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type>

<name>yuv2plane1_float_c_template</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dstW</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>big_endian</name> <init>= <expr><name>HAVE_BIGENDIAN</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>shift</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>float</name></type> <name>float_mult</name> <init>= <expr><literal type="number">1.0f</literal> <operator>/</operator> <literal type="number">65535.0f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>val</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>val_uint</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dstW</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name>val</name> <operator>=</operator> <name><name>src</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>shift</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>output_pixel</name><argument_list>(<argument><expr><operator>&amp;</operator><name>val_uint</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>uint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dest</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>float_mult</name> <operator>*</operator> <operator>(</operator><name>float</name><operator>)</operator><name>val_uint</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type>

<name>yuv2plane1_float_bswap_c_template</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dstW</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>big_endian</name> <init>= <expr><name>HAVE_BIGENDIAN</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>shift</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>float</name></type> <name>float_mult</name> <init>= <expr><literal type="number">1.0f</literal> <operator>/</operator> <literal type="number">65535.0f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>val</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>val_uint</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dstW</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name>val</name> <operator>=</operator> <name><name>src</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>shift</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>output_pixel</name><argument_list>(<argument><expr><operator>&amp;</operator><name>val_uint</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>uint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dest</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_bswap32</name><argument_list>(<argument><expr><call><name>av_float2int</name><argument_list>(<argument><expr><name>float_mult</name> <operator>*</operator> <operator>(</operator><name>float</name><operator>)</operator><name>val_uint</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type>

<name>yuv2planeX_float_c_template</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>filterSize</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dstW</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>big_endian</name> <init>= <expr><name>HAVE_BIGENDIAN</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>shift</name> <init>= <expr><literal type="number">15</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>float</name></type> <name>float_mult</name> <init>= <expr><literal type="number">1.0f</literal> <operator>/</operator> <literal type="number">65535.0f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>val</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>val_uint</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dstW</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>shift</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>-</operator> <literal type="number">0x40000000</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>filterSize</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name>val</name> <operator>+=</operator> <name><name>src</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>filter</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>output_pixel</name><argument_list>(<argument><expr><operator>&amp;</operator><name>val_uint</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="number">0x8000</literal></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dest</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>float_mult</name> <operator>*</operator> <operator>(</operator><name>float</name><operator>)</operator><name>val_uint</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type>

<name>yuv2planeX_float_bswap_c_template</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>filterSize</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dstW</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>big_endian</name> <init>= <expr><name>HAVE_BIGENDIAN</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>shift</name> <init>= <expr><literal type="number">15</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>float</name></type> <name>float_mult</name> <init>= <expr><literal type="number">1.0f</literal> <operator>/</operator> <literal type="number">65535.0f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>val</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>val_uint</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dstW</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>shift</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>-</operator> <literal type="number">0x40000000</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>filterSize</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name>val</name> <operator>+=</operator> <name><name>src</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>filter</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>output_pixel</name><argument_list>(<argument><expr><operator>&amp;</operator><name>val_uint</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="number">0x8000</literal></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dest</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_bswap32</name><argument_list>(<argument><expr><call><name>av_float2int</name><argument_list>(<argument><expr><name>float_mult</name> <operator>*</operator> <operator>(</operator><name>float</name><operator>)</operator><name>val_uint</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yuv2plane1_float</name><parameter_list>(<parameter><type><name>template</name></type></parameter>, <parameter><type><name>dest_type</name></type></parameter>, <parameter><type><name>BE_LE</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void yuv2plane1_float ##BE_LE ##_c(const int16_t *src, uint8_t *dest, int dstW, const uint8_t *dither, int offset) { template((const int32_t *)src, (dest_type *)dest, dstW); }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yuv2planeX_float</name><parameter_list>(<parameter><type><name>template</name></type></parameter>, <parameter><type><name>dest_type</name></type></parameter>, <parameter><type><name>BE_LE</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void yuv2planeX_float ##BE_LE ##_c(const int16_t *filter, int filterSize, const int16_t **src, uint8_t *dest, int dstW, const uint8_t *dither, int offset) { template(filter, filterSize, (const int32_t **)src, (dest_type *)dest, dstW); }</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_BIGENDIAN</name></expr></cpp:if>

<macro><name>yuv2plane1_float</name><argument_list>(<argument>yuv2plane1_float_c_template</argument>, <argument>float</argument>, <argument>BE</argument>)</argument_list></macro>

<macro><name>yuv2plane1_float</name><argument_list>(<argument>yuv2plane1_float_bswap_c_template</argument>, <argument>uint32_t</argument>, <argument>LE</argument>)</argument_list></macro>

<macro><name>yuv2planeX_float</name><argument_list>(<argument>yuv2planeX_float_c_template</argument>, <argument>float</argument>, <argument>BE</argument>)</argument_list></macro>

<macro><name>yuv2planeX_float</name><argument_list>(<argument>yuv2planeX_float_bswap_c_template</argument>, <argument>uint32_t</argument>, <argument>LE</argument>)</argument_list></macro>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<macro><name>yuv2plane1_float</name><argument_list>(<argument>yuv2plane1_float_c_template</argument>, <argument>float</argument>, <argument>LE</argument>)</argument_list></macro>

<macro><name>yuv2plane1_float</name><argument_list>(<argument>yuv2plane1_float_bswap_c_template</argument>, <argument>uint32_t</argument>, <argument>BE</argument>)</argument_list></macro>

<macro><name>yuv2planeX_float</name><argument_list>(<argument>yuv2planeX_float_c_template</argument>, <argument>float</argument>, <argument>LE</argument>)</argument_list></macro>

<macro><name>yuv2planeX_float</name><argument_list>(<argument>yuv2planeX_float_bswap_c_template</argument>, <argument>uint32_t</argument>, <argument>BE</argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>output_pixel</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>output_pixel</name><parameter_list>(<parameter><type><name>pos</name></type></parameter>, <parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (big_endian) { AV_WB16(pos, av_clip_uintp2(val &gt;&gt; shift, output_bits)); } else { AV_WL16(pos, av_clip_uintp2(val &gt;&gt; shift, output_bits)); }</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type>

<name>yuv2plane1_10_c_template</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dstW</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>big_endian</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>output_bits</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>shift</name> <init>= <expr><literal type="number">15</literal> <operator>-</operator> <name>output_bits</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dstW</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>val</name> <init>= <expr><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>shift</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>output_pixel</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dest</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type>

<name>yuv2planeX_10_c_template</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>filterSize</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dstW</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>big_endian</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>output_bits</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>shift</name> <init>= <expr><literal type="number">11</literal> <operator>+</operator> <literal type="number">16</literal> <operator>-</operator> <name>output_bits</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dstW</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>val</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>shift</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>filterSize</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>val</name> <operator>+=</operator> <name><name>src</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>filter</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>output_pixel</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dest</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>output_pixel</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yuv2NBPS</name><parameter_list>(<parameter><type><name>bits</name></type></parameter>, <parameter><type><name>BE_LE</name></type></parameter>, <parameter><type><name>is_be</name></type></parameter>, <parameter><type><name>template_size</name></type></parameter>, <parameter><type><name>typeX_t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void yuv2plane1_ ##bits ##BE_LE ##_c(const int16_t *src, uint8_t *dest, int dstW, const uint8_t *dither, int offset){ yuv2plane1_ ##template_size ##_c_template((const typeX_t *) src, (uint16_t *) dest, dstW, is_be, bits); }static void yuv2planeX_ ##bits ##BE_LE ##_c(const int16_t *filter, int filterSize, const int16_t **src, uint8_t *dest, int dstW, const uint8_t *dither, int offset){ yuv2planeX_##template_size ##_c_template(filter, filterSize, (const typeX_t **) src, (uint16_t *) dest, dstW, is_be, bits); }</cpp:value></cpp:define>

<macro><name>yuv2NBPS</name><argument_list>( <argument><literal type="number">9</literal></argument>, <argument>BE</argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">10</literal></argument>, <argument>int16_t</argument>)</argument_list></macro>

<macro><name>yuv2NBPS</name><argument_list>( <argument><literal type="number">9</literal></argument>, <argument>LE</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">10</literal></argument>, <argument>int16_t</argument>)</argument_list></macro>

<macro><name>yuv2NBPS</name><argument_list>(<argument><literal type="number">10</literal></argument>, <argument>BE</argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">10</literal></argument>, <argument>int16_t</argument>)</argument_list></macro>

<macro><name>yuv2NBPS</name><argument_list>(<argument><literal type="number">10</literal></argument>, <argument>LE</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">10</literal></argument>, <argument>int16_t</argument>)</argument_list></macro>

<macro><name>yuv2NBPS</name><argument_list>(<argument><literal type="number">12</literal></argument>, <argument>BE</argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">10</literal></argument>, <argument>int16_t</argument>)</argument_list></macro>

<macro><name>yuv2NBPS</name><argument_list>(<argument><literal type="number">12</literal></argument>, <argument>LE</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">10</literal></argument>, <argument>int16_t</argument>)</argument_list></macro>

<macro><name>yuv2NBPS</name><argument_list>(<argument><literal type="number">14</literal></argument>, <argument>BE</argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">10</literal></argument>, <argument>int16_t</argument>)</argument_list></macro>

<macro><name>yuv2NBPS</name><argument_list>(<argument><literal type="number">14</literal></argument>, <argument>LE</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">10</literal></argument>, <argument>int16_t</argument>)</argument_list></macro>

<macro><name>yuv2NBPS</name><argument_list>(<argument><literal type="number">16</literal></argument>, <argument>BE</argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">16</literal></argument>, <argument>int32_t</argument>)</argument_list></macro>

<macro><name>yuv2NBPS</name><argument_list>(<argument><literal type="number">16</literal></argument>, <argument>LE</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">16</literal></argument>, <argument>int32_t</argument>)</argument_list></macro>

<function><type><specifier>static</specifier> <name>void</name></type> <name>yuv2planeX_8_c</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>filterSize</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dstW</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>dither</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>dstW</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>val</name> <init>= <expr><name><name>dither</name><index>[<expr><operator>(</operator><name>i</name> <operator>+</operator> <name>offset</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">12</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name>filterSize</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>val</name> <operator>+=</operator> <name><name>src</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>filter</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>dest</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name>val</name><operator>&gt;&gt;</operator><literal type="number">19</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>yuv2plane1_8_c</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dstW</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>dither</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>dstW</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>val</name> <init>= <expr><operator>(</operator><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>dither</name><index>[<expr><operator>(</operator><name>i</name> <operator>+</operator> <name>offset</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dest</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>yuv2nv12cX_c</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>chrFilter</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>chrFilterSize</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>chrUSrc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>chrVSrc</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>chrDstW</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>dstFormat</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>dstFormat</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>chrDither</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>chrDither8</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>dstFormat</name> <operator>==</operator> <name>AV_PIX_FMT_NV12</name> <operator>||</operator>

<name>dstFormat</name> <operator>==</operator> <name>AV_PIX_FMT_NV24</name></expr>)</condition><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>chrDstW</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>u</name> <init>= <expr><name><name>chrDither</name><index>[<expr><name>i</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">12</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><name><name>chrDither</name><index>[<expr><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">12</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name>chrFilterSize</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>u</name> <operator>+=</operator> <name><name>chrUSrc</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>chrFilter</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name> <operator>+=</operator> <name><name>chrVSrc</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>chrFilter</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>i</name></expr>]</index></name><operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name>u</name><operator>&gt;&gt;</operator><literal type="number">19</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name>v</name><operator>&gt;&gt;</operator><literal type="number">19</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>chrDstW</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>u</name> <init>= <expr><name><name>chrDither</name><index>[<expr><name>i</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">12</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><name><name>chrDither</name><index>[<expr><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">12</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name>chrFilterSize</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>u</name> <operator>+=</operator> <name><name>chrUSrc</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>chrFilter</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name> <operator>+=</operator> <name><name>chrVSrc</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>chrFilter</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>i</name></expr>]</index></name><operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name>v</name><operator>&gt;&gt;</operator><literal type="number">19</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name>u</name><operator>&gt;&gt;</operator><literal type="number">19</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for></block_content></block></else></if_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>output_pixel</name><parameter_list>(<parameter><type><name>pos</name></type></parameter>, <parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (big_endian) { AV_WB16(pos, av_clip_uintp2(val &gt;&gt; shift, 10) &lt;&lt; 6); } else { AV_WL16(pos, av_clip_uintp2(val &gt;&gt; shift, 10) &lt;&lt; 6); }</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>yuv2p010l1_c</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dstW</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>big_endian</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>shift</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dstW</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>val</name> <init>= <expr><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>shift</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>output_pixel</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dest</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>yuv2p010lX_c</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>filterSize</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dstW</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>big_endian</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>shift</name> <init>= <expr><literal type="number">17</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dstW</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>val</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>shift</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>filterSize</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>val</name> <operator>+=</operator> <name><name>src</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>filter</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>output_pixel</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dest</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>yuv2p010cX_c</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>chrFilter</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>chrFilterSize</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>chrUSrc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>chrVSrc</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest8</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>chrDstW</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dest</name> <init>= <expr><operator>(</operator><name>uint16_t</name><operator>*</operator><operator>)</operator><name>dest8</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>shift</name> <init>= <expr><literal type="number">17</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>big_endian</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>dstFormat</name></name> <operator>==</operator> <name>AV_PIX_FMT_P010BE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>chrDstW</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>u</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>shift</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>shift</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>chrFilterSize</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>u</name> <operator>+=</operator> <name><name>chrUSrc</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>chrFilter</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name> <operator>+=</operator> <name><name>chrVSrc</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>chrFilter</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>output_pixel</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dest</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>i</name></expr>]</index></name></expr></argument> , <argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>output_pixel</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dest</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>yuv2p010l1_LE_c</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dstW</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>dither</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>yuv2p010l1_c</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><operator>(</operator><name>uint16_t</name><operator>*</operator><operator>)</operator><name>dest</name></expr></argument>, <argument><expr><name>dstW</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>yuv2p010l1_BE_c</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dstW</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>dither</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>yuv2p010l1_c</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><operator>(</operator><name>uint16_t</name><operator>*</operator><operator>)</operator><name>dest</name></expr></argument>, <argument><expr><name>dstW</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>yuv2p010lX_LE_c</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>filterSize</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dstW</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>dither</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>yuv2p010lX_c</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><name>filterSize</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><operator>(</operator><name>uint16_t</name><operator>*</operator><operator>)</operator><name>dest</name></expr></argument>, <argument><expr><name>dstW</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>yuv2p010lX_BE_c</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>filterSize</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dstW</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>dither</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>yuv2p010lX_c</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><name>filterSize</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><operator>(</operator><name>uint16_t</name><operator>*</operator><operator>)</operator><name>dest</name></expr></argument>, <argument><expr><name>dstW</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>output_pixel</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>accumulate_bit</name><parameter_list>(<parameter><type><name>acc</name></type></parameter>, <parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>acc &lt;&lt;= 1; acc |= (val) &gt;= 234</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>output_pixel</name><parameter_list>(<parameter><type><name>pos</name></type></parameter>, <parameter><type><name>acc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (target == AV_PIX_FMT_MONOBLACK) { pos = acc; } else { pos = ~acc; }</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type>

<name>yuv2mono_X_c_template</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>lumFilter</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>lumSrc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lumFilterSize</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>chrFilter</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>chrUSrc</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>chrVSrc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>chrFilterSize</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>alpSrc</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dstW</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>target</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>d128</name> <init>= <expr><name><name>ff_dither_8x8_220</name><index>[<expr><name>y</name><operator>&amp;</operator><literal type="number">7</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>acc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dstW</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>Y1</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">18</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>Y2</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">18</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>lumFilterSize</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>Y1</name> <operator>+=</operator> <name><name>lumSrc</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>lumFilter</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>Y2</name> <operator>+=</operator> <name><name>lumSrc</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>lumFilter</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>Y1</name> <operator>&gt;&gt;=</operator> <literal type="number">19</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>Y2</name> <operator>&gt;&gt;=</operator> <literal type="number">19</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>Y1</name> <operator>|</operator> <name>Y2</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x100</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>Y1</name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name>Y1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>Y2</name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name>Y2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>dither</name></name> <operator>==</operator> <name>SWS_DITHER_ED</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>Y1</name> <operator>+=</operator> <operator>(</operator><literal type="number">7</literal><operator>*</operator><name>err</name> <operator>+</operator> <literal type="number">1</literal><operator>*</operator><name><name>c</name><operator>-&gt;</operator><name>dither_error</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">5</literal><operator>*</operator><name><name>c</name><operator>-&gt;</operator><name>dither_error</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">3</literal><operator>*</operator><name><name>c</name><operator>-&gt;</operator><name>dither_error</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <literal type="number">8</literal> <operator>-</operator> <literal type="number">256</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>dither_error</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>err</name></expr>;</expr_stmt>

<expr_stmt><expr><name>acc</name> <operator>=</operator> <literal type="number">2</literal><operator>*</operator><name>acc</name> <operator>+</operator> <operator>(</operator><name>Y1</name> <operator>&gt;=</operator> <literal type="number">128</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>Y1</name> <operator>-=</operator> <literal type="number">220</literal><operator>*</operator><operator>(</operator><name>acc</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <name>Y2</name> <operator>+</operator> <operator>(</operator><operator>(</operator><literal type="number">7</literal><operator>*</operator><name>Y1</name> <operator>+</operator> <literal type="number">1</literal><operator>*</operator><name><name>c</name><operator>-&gt;</operator><name>dither_error</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">5</literal><operator>*</operator><name><name>c</name><operator>-&gt;</operator><name>dither_error</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <literal type="number">3</literal><operator>*</operator><name><name>c</name><operator>-&gt;</operator><name>dither_error</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <literal type="number">8</literal> <operator>-</operator> <literal type="number">256</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>dither_error</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>Y1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>acc</name> <operator>=</operator> <literal type="number">2</literal><operator>*</operator><name>acc</name> <operator>+</operator> <operator>(</operator><name>err</name> <operator>&gt;=</operator> <literal type="number">128</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>-=</operator> <literal type="number">220</literal><operator>*</operator><operator>(</operator><name>acc</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>accumulate_bit</name><argument_list>(<argument><expr><name>acc</name></expr></argument>, <argument><expr><name>Y1</name> <operator>+</operator> <name><name>d128</name><index>[<expr><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>accumulate_bit</name><argument_list>(<argument><expr><name>acc</name></expr></argument>, <argument><expr><name>Y2</name> <operator>+</operator> <name><name>d128</name><index>[<expr><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator> <operator>==</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>output_pixel</name><argument_list>(<argument><expr><operator>*</operator><name>dest</name><operator>++</operator></expr></argument>, <argument><expr><name>acc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>dither_error</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>err</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&amp;</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>output_pixel</name><argument_list>(<argument><expr><operator>*</operator><name>dest</name></expr></argument>, <argument><expr><name>acc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type>

<name>yuv2mono_2_c_template</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name><name>ubuf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name><name>vbuf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name><name>abuf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dstW</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>yalpha</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>uvalpha</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>target</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>buf0</name> <init>= <expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>buf1</name> <init>= <expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>d128</name> <init>= <expr><name><name>ff_dither_8x8_220</name><index>[<expr><name>y</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>yalpha1</name> <init>= <expr><literal type="number">4096</literal> <operator>-</operator> <name>yalpha</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name>yalpha</name> <operator>&lt;=</operator> <literal type="number">4096U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>dither</name></name> <operator>==</operator> <name>SWS_DITHER_ED</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>acc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dstW</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator><literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>Y</name></decl>;</decl_stmt>

<expr_stmt><expr><name>Y</name> <operator>=</operator> <operator>(</operator><name><name>buf0</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>yalpha1</name> <operator>+</operator> <name><name>buf1</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>yalpha</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">19</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>Y</name> <operator>+=</operator> <operator>(</operator><literal type="number">7</literal><operator>*</operator><name>err</name> <operator>+</operator> <literal type="number">1</literal><operator>*</operator><name><name>c</name><operator>-&gt;</operator><name>dither_error</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">5</literal><operator>*</operator><name><name>c</name><operator>-&gt;</operator><name>dither_error</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">3</literal><operator>*</operator><name><name>c</name><operator>-&gt;</operator><name>dither_error</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <literal type="number">8</literal> <operator>-</operator> <literal type="number">256</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>dither_error</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>err</name></expr>;</expr_stmt>

<expr_stmt><expr><name>acc</name> <operator>=</operator> <literal type="number">2</literal><operator>*</operator><name>acc</name> <operator>+</operator> <operator>(</operator><name>Y</name> <operator>&gt;=</operator> <literal type="number">128</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>Y</name> <operator>-=</operator> <literal type="number">220</literal><operator>*</operator><operator>(</operator><name>acc</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <operator>(</operator><name><name>buf0</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>yalpha1</name> <operator>+</operator> <name><name>buf1</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>yalpha</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">19</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>+=</operator> <operator>(</operator><literal type="number">7</literal><operator>*</operator><name>Y</name> <operator>+</operator> <literal type="number">1</literal><operator>*</operator><name><name>c</name><operator>-&gt;</operator><name>dither_error</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">5</literal><operator>*</operator><name><name>c</name><operator>-&gt;</operator><name>dither_error</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <literal type="number">3</literal><operator>*</operator><name><name>c</name><operator>-&gt;</operator><name>dither_error</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <literal type="number">8</literal> <operator>-</operator> <literal type="number">256</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>dither_error</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>Y</name></expr>;</expr_stmt>

<expr_stmt><expr><name>acc</name> <operator>=</operator> <literal type="number">2</literal><operator>*</operator><name>acc</name> <operator>+</operator> <operator>(</operator><name>err</name> <operator>&gt;=</operator> <literal type="number">128</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>-=</operator> <literal type="number">220</literal><operator>*</operator><operator>(</operator><name>acc</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator> <operator>==</operator> <literal type="number">6</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>output_pixel</name><argument_list>(<argument><expr><operator>*</operator><name>dest</name><operator>++</operator></expr></argument>, <argument><expr><name>acc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>dither_error</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>err</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dstW</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">8</literal></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>Y</name></decl>, <decl><type ref="prev"/><name>acc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>Y</name> <operator>=</operator> <operator>(</operator><name><name>buf0</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>yalpha1</name> <operator>+</operator> <name><name>buf1</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>yalpha</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">19</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>accumulate_bit</name><argument_list>(<argument><expr><name>acc</name></expr></argument>, <argument><expr><name>Y</name> <operator>+</operator> <name><name>d128</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>Y</name> <operator>=</operator> <operator>(</operator><name><name>buf0</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>yalpha1</name> <operator>+</operator> <name><name>buf1</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>yalpha</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">19</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>accumulate_bit</name><argument_list>(<argument><expr><name>acc</name></expr></argument>, <argument><expr><name>Y</name> <operator>+</operator> <name><name>d128</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>Y</name> <operator>=</operator> <operator>(</operator><name><name>buf0</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name>yalpha1</name> <operator>+</operator> <name><name>buf1</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name>yalpha</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">19</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>accumulate_bit</name><argument_list>(<argument><expr><name>acc</name></expr></argument>, <argument><expr><name>Y</name> <operator>+</operator> <name><name>d128</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>Y</name> <operator>=</operator> <operator>(</operator><name><name>buf0</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <name>yalpha1</name> <operator>+</operator> <name><name>buf1</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <name>yalpha</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">19</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>accumulate_bit</name><argument_list>(<argument><expr><name>acc</name></expr></argument>, <argument><expr><name>Y</name> <operator>+</operator> <name><name>d128</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>Y</name> <operator>=</operator> <operator>(</operator><name><name>buf0</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name> <operator>*</operator> <name>yalpha1</name> <operator>+</operator> <name><name>buf1</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name> <operator>*</operator> <name>yalpha</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">19</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>accumulate_bit</name><argument_list>(<argument><expr><name>acc</name></expr></argument>, <argument><expr><name>Y</name> <operator>+</operator> <name><name>d128</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>Y</name> <operator>=</operator> <operator>(</operator><name><name>buf0</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name> <operator>*</operator> <name>yalpha1</name> <operator>+</operator> <name><name>buf1</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name> <operator>*</operator> <name>yalpha</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">19</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>accumulate_bit</name><argument_list>(<argument><expr><name>acc</name></expr></argument>, <argument><expr><name>Y</name> <operator>+</operator> <name><name>d128</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>Y</name> <operator>=</operator> <operator>(</operator><name><name>buf0</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">6</literal></expr>]</index></name> <operator>*</operator> <name>yalpha1</name> <operator>+</operator> <name><name>buf1</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">6</literal></expr>]</index></name> <operator>*</operator> <name>yalpha</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">19</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>accumulate_bit</name><argument_list>(<argument><expr><name>acc</name></expr></argument>, <argument><expr><name>Y</name> <operator>+</operator> <name><name>d128</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>Y</name> <operator>=</operator> <operator>(</operator><name><name>buf0</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">7</literal></expr>]</index></name> <operator>*</operator> <name>yalpha1</name> <operator>+</operator> <name><name>buf1</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">7</literal></expr>]</index></name> <operator>*</operator> <name>yalpha</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">19</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>accumulate_bit</name><argument_list>(<argument><expr><name>acc</name></expr></argument>, <argument><expr><name>Y</name> <operator>+</operator> <name><name>d128</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>output_pixel</name><argument_list>(<argument><expr><operator>*</operator><name>dest</name><operator>++</operator></expr></argument>, <argument><expr><name>acc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type>

<name>yuv2mono_1_c_template</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>buf0</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name><name>ubuf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name><name>vbuf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>abuf0</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dstW</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>uvalpha</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>target</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>d128</name> <init>= <expr><name><name>ff_dither_8x8_220</name><index>[<expr><name>y</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>dither</name></name> <operator>==</operator> <name>SWS_DITHER_ED</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>acc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dstW</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator><literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>Y</name></decl>;</decl_stmt>

<expr_stmt><expr><name>Y</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>buf0</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">64</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>Y</name> <operator>+=</operator> <operator>(</operator><literal type="number">7</literal><operator>*</operator><name>err</name> <operator>+</operator> <literal type="number">1</literal><operator>*</operator><name><name>c</name><operator>-&gt;</operator><name>dither_error</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">5</literal><operator>*</operator><name><name>c</name><operator>-&gt;</operator><name>dither_error</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">3</literal><operator>*</operator><name><name>c</name><operator>-&gt;</operator><name>dither_error</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <literal type="number">8</literal> <operator>-</operator> <literal type="number">256</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>dither_error</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>err</name></expr>;</expr_stmt>

<expr_stmt><expr><name>acc</name> <operator>=</operator> <literal type="number">2</literal><operator>*</operator><name>acc</name> <operator>+</operator> <operator>(</operator><name>Y</name> <operator>&gt;=</operator> <literal type="number">128</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>Y</name> <operator>-=</operator> <literal type="number">220</literal><operator>*</operator><operator>(</operator><name>acc</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>buf0</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">64</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>+=</operator> <operator>(</operator><literal type="number">7</literal><operator>*</operator><name>Y</name> <operator>+</operator> <literal type="number">1</literal><operator>*</operator><name><name>c</name><operator>-&gt;</operator><name>dither_error</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">5</literal><operator>*</operator><name><name>c</name><operator>-&gt;</operator><name>dither_error</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <literal type="number">3</literal><operator>*</operator><name><name>c</name><operator>-&gt;</operator><name>dither_error</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <literal type="number">8</literal> <operator>-</operator> <literal type="number">256</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>dither_error</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>Y</name></expr>;</expr_stmt>

<expr_stmt><expr><name>acc</name> <operator>=</operator> <literal type="number">2</literal><operator>*</operator><name>acc</name> <operator>+</operator> <operator>(</operator><name>err</name> <operator>&gt;=</operator> <literal type="number">128</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>-=</operator> <literal type="number">220</literal><operator>*</operator><operator>(</operator><name>acc</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator> <operator>==</operator> <literal type="number">6</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>output_pixel</name><argument_list>(<argument><expr><operator>*</operator><name>dest</name><operator>++</operator></expr></argument>, <argument><expr><name>acc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>dither_error</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>err</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dstW</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">8</literal></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>acc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>accumulate_bit</name><argument_list>(<argument><expr><name>acc</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name><name>buf0</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">64</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>+</operator> <name><name>d128</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>accumulate_bit</name><argument_list>(<argument><expr><name>acc</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name><name>buf0</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">64</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>+</operator> <name><name>d128</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>accumulate_bit</name><argument_list>(<argument><expr><name>acc</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name><name>buf0</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <literal type="number">64</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>+</operator> <name><name>d128</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>accumulate_bit</name><argument_list>(<argument><expr><name>acc</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name><name>buf0</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <literal type="number">64</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>+</operator> <name><name>d128</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>accumulate_bit</name><argument_list>(<argument><expr><name>acc</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name><name>buf0</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name> <operator>+</operator> <literal type="number">64</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>+</operator> <name><name>d128</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>accumulate_bit</name><argument_list>(<argument><expr><name>acc</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name><name>buf0</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name> <operator>+</operator> <literal type="number">64</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>+</operator> <name><name>d128</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>accumulate_bit</name><argument_list>(<argument><expr><name>acc</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name><name>buf0</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">6</literal></expr>]</index></name> <operator>+</operator> <literal type="number">64</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>+</operator> <name><name>d128</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>accumulate_bit</name><argument_list>(<argument><expr><name>acc</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name><name>buf0</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">7</literal></expr>]</index></name> <operator>+</operator> <literal type="number">64</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>+</operator> <name><name>d128</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>output_pixel</name><argument_list>(<argument><expr><operator>*</operator><name>dest</name><operator>++</operator></expr></argument>, <argument><expr><name>acc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>output_pixel</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>accumulate_bit</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YUV2PACKEDWRAPPER</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>base</name></type></parameter>, <parameter><type><name>ext</name></type></parameter>, <parameter><type><name>fmt</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void name ##ext ##_X_c(SwsContext *c, const int16_t *lumFilter, const int16_t **lumSrc, int lumFilterSize, const int16_t *chrFilter, const int16_t **chrUSrc, const int16_t **chrVSrc, int chrFilterSize, const int16_t **alpSrc, uint8_t *dest, int dstW, int y) { name ##base ##_X_c_template(c, lumFilter, lumSrc, lumFilterSize, chrFilter, chrUSrc, chrVSrc, chrFilterSize, alpSrc, dest, dstW, y, fmt); } static void name ##ext ##_2_c(SwsContext *c, const int16_t *buf[2], const int16_t *ubuf[2], const int16_t *vbuf[2], const int16_t *abuf[2], uint8_t *dest, int dstW, int yalpha, int uvalpha, int y) { name ##base ##_2_c_template(c, buf, ubuf, vbuf, abuf, dest, dstW, yalpha, uvalpha, y, fmt); } static void name ##ext ##_1_c(SwsContext *c, const int16_t *buf0, const int16_t *ubuf[2], const int16_t *vbuf[2], const int16_t *abuf0, uint8_t *dest, int dstW, int uvalpha, int y) { name ##base ##_1_c_template(c, buf0, ubuf, vbuf, abuf0, dest, dstW, uvalpha, y, fmt); }</cpp:value></cpp:define>

<macro><name>YUV2PACKEDWRAPPER</name><argument_list>(<argument>yuv2mono</argument>,<argument/>, <argument>white</argument>, <argument>AV_PIX_FMT_MONOWHITE</argument>)</argument_list></macro>

<macro><name>YUV2PACKEDWRAPPER</name><argument_list>(<argument>yuv2mono</argument>,<argument/>, <argument>black</argument>, <argument>AV_PIX_FMT_MONOBLACK</argument>)</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>output_pixels</name><parameter_list>(<parameter><type><name>pos</name></type></parameter>, <parameter><type><name>Y1</name></type></parameter>, <parameter><type><name>U</name></type></parameter>, <parameter><type><name>Y2</name></type></parameter>, <parameter><type><name>V</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (target == AV_PIX_FMT_YUYV422) { dest[pos + 0] = Y1; dest[pos + 1] = U; dest[pos + 2] = Y2; dest[pos + 3] = V; } else if (target == AV_PIX_FMT_YVYU422) { dest[pos + 0] = Y1; dest[pos + 1] = V; dest[pos + 2] = Y2; dest[pos + 3] = U; } else { dest[pos + 0] = U; dest[pos + 1] = Y1; dest[pos + 2] = V; dest[pos + 3] = Y2; }</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type>

<name>yuv2422_X_c_template</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>lumFilter</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>lumSrc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lumFilterSize</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>chrFilter</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>chrUSrc</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>chrVSrc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>chrFilterSize</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>alpSrc</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dstW</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>target</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><operator>(</operator><name>dstW</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>Y1</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">18</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>Y2</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">18</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>U</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">18</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>V</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">18</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>lumFilterSize</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>Y1</name> <operator>+=</operator> <name><name>lumSrc</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name><name>lumFilter</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>Y2</name> <operator>+=</operator> <name><name>lumSrc</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>lumFilter</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>chrFilterSize</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>U</name> <operator>+=</operator> <name><name>chrUSrc</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>chrFilter</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>V</name> <operator>+=</operator> <name><name>chrVSrc</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>chrFilter</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>Y1</name> <operator>&gt;&gt;=</operator> <literal type="number">19</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>Y2</name> <operator>&gt;&gt;=</operator> <literal type="number">19</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>U</name> <operator>&gt;&gt;=</operator> <literal type="number">19</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>V</name> <operator>&gt;&gt;=</operator> <literal type="number">19</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>Y1</name> <operator>|</operator> <name>Y2</name> <operator>|</operator> <name>U</name> <operator>|</operator> <name>V</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x100</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>Y1</name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name>Y1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>Y2</name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name>Y2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>U</name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name>U</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>V</name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name>V</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>output_pixels</name><argument_list>(<argument><expr><literal type="number">4</literal><operator>*</operator><name>i</name></expr></argument>, <argument><expr><name>Y1</name></expr></argument>, <argument><expr><name>U</name></expr></argument>, <argument><expr><name>Y2</name></expr></argument>, <argument><expr><name>V</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type>

<name>yuv2422_2_c_template</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name><name>ubuf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name><name>vbuf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name><name>abuf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dstW</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>yalpha</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>uvalpha</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>target</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>buf0</name> <init>= <expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>buf1</name> <init>= <expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>,

<decl><type ref="prev"><modifier>*</modifier></type><name>ubuf0</name> <init>= <expr><name><name>ubuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ubuf1</name> <init>= <expr><name><name>ubuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>,

<decl><type ref="prev"><modifier>*</modifier></type><name>vbuf0</name> <init>= <expr><name><name>vbuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>vbuf1</name> <init>= <expr><name><name>vbuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>yalpha1</name> <init>= <expr><literal type="number">4096</literal> <operator>-</operator> <name>yalpha</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>uvalpha1</name> <init>= <expr><literal type="number">4096</literal> <operator>-</operator> <name>uvalpha</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name>yalpha</name> <operator>&lt;=</operator> <literal type="number">4096U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name>uvalpha</name> <operator>&lt;=</operator> <literal type="number">4096U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><operator>(</operator><name>dstW</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>Y1</name> <init>= <expr><operator>(</operator><name><name>buf0</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name>yalpha1</name> <operator>+</operator> <name><name>buf1</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name>yalpha</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">19</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>Y2</name> <init>= <expr><operator>(</operator><name><name>buf0</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>yalpha1</name> <operator>+</operator> <name><name>buf1</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>yalpha</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">19</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>U</name> <init>= <expr><operator>(</operator><name><name>ubuf0</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>uvalpha1</name> <operator>+</operator> <name><name>ubuf1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>uvalpha</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">19</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>V</name> <init>= <expr><operator>(</operator><name><name>vbuf0</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>uvalpha1</name> <operator>+</operator> <name><name>vbuf1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>uvalpha</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">19</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>Y1</name> <operator>|</operator> <name>Y2</name> <operator>|</operator> <name>U</name> <operator>|</operator> <name>V</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x100</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>Y1</name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name>Y1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>Y2</name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name>Y2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>U</name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name>U</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>V</name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name>V</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>output_pixels</name><argument_list>(<argument><expr><name>i</name> <operator>*</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>Y1</name></expr></argument>, <argument><expr><name>U</name></expr></argument>, <argument><expr><name>Y2</name></expr></argument>, <argument><expr><name>V</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type>

<name>yuv2422_1_c_template</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>buf0</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name><name>ubuf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name><name>vbuf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>abuf0</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dstW</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>uvalpha</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>target</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>ubuf0</name> <init>= <expr><name><name>ubuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>vbuf0</name> <init>= <expr><name><name>vbuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>uvalpha</name> <operator>&lt;</operator> <literal type="number">2048</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><operator>(</operator><name>dstW</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>Y1</name> <init>= <expr><operator>(</operator><name><name>buf0</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">2</literal></expr> ]</index></name><operator>+</operator><literal type="number">64</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>Y2</name> <init>= <expr><operator>(</operator><name><name>buf0</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>+</operator><literal type="number">64</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>U</name> <init>= <expr><operator>(</operator><name><name>ubuf0</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator><literal type="number">64</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>V</name> <init>= <expr><operator>(</operator><name><name>vbuf0</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator><literal type="number">64</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>Y1</name> <operator>|</operator> <name>Y2</name> <operator>|</operator> <name>U</name> <operator>|</operator> <name>V</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x100</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>Y1</name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name>Y1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>Y2</name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name>Y2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>U</name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name>U</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>V</name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name>V</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>output_pixels</name><argument_list>(<argument><expr><name>i</name> <operator>*</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>Y1</name></expr></argument>, <argument><expr><name>U</name></expr></argument>, <argument><expr><name>Y2</name></expr></argument>, <argument><expr><name>V</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>ubuf1</name> <init>= <expr><name><name>ubuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>vbuf1</name> <init>= <expr><name><name>vbuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><operator>(</operator><name>dstW</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>Y1</name> <init>= <expr><operator>(</operator><name><name>buf0</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">2</literal></expr> ]</index></name> <operator>+</operator> <literal type="number">64</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>Y2</name> <init>= <expr><operator>(</operator><name><name>buf0</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">64</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>U</name> <init>= <expr><operator>(</operator><name><name>ubuf0</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>ubuf1</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><literal type="number">128</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>V</name> <init>= <expr><operator>(</operator><name><name>vbuf0</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>vbuf1</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><literal type="number">128</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>Y1</name> <operator>|</operator> <name>Y2</name> <operator>|</operator> <name>U</name> <operator>|</operator> <name>V</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x100</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>Y1</name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name>Y1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>Y2</name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name>Y2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>U</name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name>U</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>V</name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name>V</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>output_pixels</name><argument_list>(<argument><expr><name>i</name> <operator>*</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>Y1</name></expr></argument>, <argument><expr><name>U</name></expr></argument>, <argument><expr><name>Y2</name></expr></argument>, <argument><expr><name>V</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>output_pixels</name></cpp:undef>

<macro><name>YUV2PACKEDWRAPPER</name><argument_list>(<argument>yuv2</argument>, <argument><literal type="number">422</literal></argument>, <argument>yuyv422</argument>, <argument>AV_PIX_FMT_YUYV422</argument>)</argument_list></macro>

<macro><name>YUV2PACKEDWRAPPER</name><argument_list>(<argument>yuv2</argument>, <argument><literal type="number">422</literal></argument>, <argument>yvyu422</argument>, <argument>AV_PIX_FMT_YVYU422</argument>)</argument_list></macro>

<macro><name>YUV2PACKEDWRAPPER</name><argument_list>(<argument>yuv2</argument>, <argument><literal type="number">422</literal></argument>, <argument>uyvy422</argument>, <argument>AV_PIX_FMT_UYVY422</argument>)</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_B</name></cpp:macro> <cpp:value>((target == AV_PIX_FMT_RGB48LE || target == AV_PIX_FMT_RGB48BE || target == AV_PIX_FMT_RGBA64LE || target == AV_PIX_FMT_RGBA64BE) ? R : B)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>B_R</name></cpp:macro> <cpp:value>((target == AV_PIX_FMT_RGB48LE || target == AV_PIX_FMT_RGB48BE || target == AV_PIX_FMT_RGBA64LE || target == AV_PIX_FMT_RGBA64BE) ? B : R)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>output_pixel</name><parameter_list>(<parameter><type><name>pos</name></type></parameter>, <parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (isBE(target)) { AV_WB16(pos, val); } else { AV_WL16(pos, val); }</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type>

<name>yuv2ya16_X_c_template</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>lumFilter</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>lumSrc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lumFilterSize</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>chrFilter</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>unused_chrUSrc</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>unused_chrVSrc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>unused_chrFilterSize</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>alpSrc</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dstW</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>unused_hasAlpha</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>unused_eightbytes</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>hasAlpha</name> <init>= <expr><operator>!</operator><operator>!</operator><name>alpSrc</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dstW</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>Y</name> <init>= <expr><operator>-</operator><literal type="number">0x40000000</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>A</name> <init>= <expr><literal type="number">0xffff</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>lumFilterSize</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>Y</name> <operator>+=</operator> <name><name>lumSrc</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>lumFilter</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>Y</name> <operator>&gt;&gt;=</operator> <literal type="number">15</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>Y</name> <operator>+=</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">3</literal><operator>)</operator> <operator>+</operator> <literal type="number">0x8000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>Y</name> <operator>=</operator> <call><name>av_clip_uint16</name><argument_list>(<argument><expr><name>Y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>hasAlpha</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>A</name> <operator>=</operator> <operator>-</operator><literal type="number">0x40000000</literal> <operator>+</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">14</literal><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>lumFilterSize</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>A</name> <operator>+=</operator> <name><name>alpSrc</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>lumFilter</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>A</name> <operator>&gt;&gt;=</operator> <literal type="number">15</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>A</name> <operator>+=</operator> <literal type="number">0x8000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>A</name> <operator>=</operator> <call><name>av_clip_uint16</name><argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>output_pixel</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dest</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>i</name></expr> ]</index></name></expr></argument>, <argument><expr><name>Y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>output_pixel</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dest</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type>

<name>yuv2ya16_2_c_template</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name><name>unused_ubuf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name><name>unused_vbuf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name><name>abuf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dstW</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>yalpha</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>unused_uvalpha</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>unused_hasAlpha</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>unused_eightbytes</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>hasAlpha</name> <init>= <expr><name>abuf</name> <operator>&amp;&amp;</operator> <name><name>abuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>abuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name>buf0</name> <init>= <expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>buf1</name> <init>= <expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>,

<decl><type ref="prev"><modifier>*</modifier></type><name>abuf0</name> <init>= <expr><ternary><condition><expr><name>hasAlpha</name></expr> ?</condition><then> <expr><name><name>abuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>,

<decl><type ref="prev"><modifier>*</modifier></type><name>abuf1</name> <init>= <expr><ternary><condition><expr><name>hasAlpha</name></expr> ?</condition><then> <expr><name><name>abuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>yalpha1</name> <init>= <expr><literal type="number">4096</literal> <operator>-</operator> <name>yalpha</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name>yalpha</name> <operator>&lt;=</operator> <literal type="number">4096U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dstW</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>Y</name> <init>= <expr><operator>(</operator><name><name>buf0</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>yalpha1</name> <operator>+</operator> <name><name>buf1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>yalpha</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">15</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>A</name></decl>;</decl_stmt>

<expr_stmt><expr><name>Y</name> <operator>=</operator> <call><name>av_clip_uint16</name><argument_list>(<argument><expr><name>Y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>hasAlpha</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>A</name> <operator>=</operator> <operator>(</operator><name><name>abuf0</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>yalpha1</name> <operator>+</operator> <name><name>abuf1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>yalpha</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">15</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>A</name> <operator>=</operator> <call><name>av_clip_uint16</name><argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>output_pixel</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dest</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>i</name></expr> ]</index></name></expr></argument>, <argument><expr><name>Y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>output_pixel</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dest</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><ternary><condition><expr><name>hasAlpha</name></expr> ?</condition><then> <expr><name>A</name></expr> </then><else>: <expr><literal type="number">65535</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type>

<name>yuv2ya16_1_c_template</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name>buf0</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name><name>unused_ubuf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name><name>unused_vbuf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name>abuf0</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dstW</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>unused_uvalpha</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>unused_hasAlpha</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>unused_eightbytes</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>hasAlpha</name> <init>= <expr><operator>!</operator><operator>!</operator><name>abuf0</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dstW</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>Y</name> <init>= <expr><name><name>buf0</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>A</name></decl>;</decl_stmt>

<expr_stmt><expr><name>Y</name> <operator>=</operator> <call><name>av_clip_uint16</name><argument_list>(<argument><expr><name>Y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>hasAlpha</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>A</name> <operator>=</operator> <name><name>abuf0</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>A</name> <operator>&amp;</operator> <literal type="number">0x100</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>A</name> <operator>=</operator> <call><name>av_clip_uint16</name><argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>output_pixel</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dest</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>i</name></expr> ]</index></name></expr></argument>, <argument><expr><name>Y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>output_pixel</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dest</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><ternary><condition><expr><name>hasAlpha</name></expr> ?</condition><then> <expr><name>A</name></expr> </then><else>: <expr><literal type="number">65535</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type>

<name>yuv2rgba64_X_c_template</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>lumFilter</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>lumSrc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lumFilterSize</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>chrFilter</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>chrUSrc</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>chrVSrc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>chrFilterSize</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>alpSrc</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dstW</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hasAlpha</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>eightbytes</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>A1</name> <init>= <expr><literal type="number">0xffff</literal><operator>&lt;&lt;</operator><literal type="number">14</literal></expr></init></decl>, <decl><type ref="prev"/><name>A2</name> <init>= <expr><literal type="number">0xffff</literal><operator>&lt;&lt;</operator><literal type="number">14</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><operator>(</operator><name>dstW</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>Y1</name> <init>= <expr><operator>-</operator><literal type="number">0x40000000</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>Y2</name> <init>= <expr><operator>-</operator><literal type="number">0x40000000</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>U</name> <init>= <expr><operator>-</operator><operator>(</operator><literal type="number">128</literal> <operator>&lt;&lt;</operator> <literal type="number">23</literal><operator>)</operator></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>V</name> <init>= <expr><operator>-</operator><operator>(</operator><literal type="number">128</literal> <operator>&lt;&lt;</operator> <literal type="number">23</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>R</name></decl>, <decl><type ref="prev"/><name>G</name></decl>, <decl><type ref="prev"/><name>B</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>lumFilterSize</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>Y1</name> <operator>+=</operator> <name><name>lumSrc</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>lumFilter</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>Y2</name> <operator>+=</operator> <name><name>lumSrc</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>lumFilter</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>chrFilterSize</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content><empty_stmt>;</empty_stmt>

<expr_stmt><expr><name>U</name> <operator>+=</operator> <name><name>chrUSrc</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>chrFilter</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>V</name> <operator>+=</operator> <name><name>chrVSrc</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>chrFilter</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>hasAlpha</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>A1</name> <operator>=</operator> <operator>-</operator><literal type="number">0x40000000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>A2</name> <operator>=</operator> <operator>-</operator><literal type="number">0x40000000</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>lumFilterSize</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>A1</name> <operator>+=</operator> <name><name>alpSrc</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>lumFilter</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>A2</name> <operator>+=</operator> <name><name>alpSrc</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>lumFilter</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>A1</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>A1</name> <operator>+=</operator> <literal type="number">0x20002000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>A2</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>A2</name> <operator>+=</operator> <literal type="number">0x20002000</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>Y1</name> <operator>&gt;&gt;=</operator> <literal type="number">14</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>Y1</name> <operator>+=</operator> <literal type="number">0x10000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>Y2</name> <operator>&gt;&gt;=</operator> <literal type="number">14</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>Y2</name> <operator>+=</operator> <literal type="number">0x10000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>U</name> <operator>&gt;&gt;=</operator> <literal type="number">14</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>V</name> <operator>&gt;&gt;=</operator> <literal type="number">14</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>Y1</name> <operator>-=</operator> <name><name>c</name><operator>-&gt;</operator><name>yuv2rgb_y_offset</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>Y2</name> <operator>-=</operator> <name><name>c</name><operator>-&gt;</operator><name>yuv2rgb_y_offset</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>Y1</name> <operator>*=</operator> <name><name>c</name><operator>-&gt;</operator><name>yuv2rgb_y_coeff</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>Y2</name> <operator>*=</operator> <name><name>c</name><operator>-&gt;</operator><name>yuv2rgb_y_coeff</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>Y1</name> <operator>+=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>Y2</name> <operator>+=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>R</name> <operator>=</operator> <name>V</name> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>yuv2rgb_v2r_coeff</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>G</name> <operator>=</operator> <name>V</name> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>yuv2rgb_v2g_coeff</name></name> <operator>+</operator> <name>U</name> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>yuv2rgb_u2g_coeff</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>B</name> <operator>=</operator> <name>U</name> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>yuv2rgb_u2b_coeff</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>output_pixel</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>av_clip_uintp2</name><argument_list>(<argument><expr><name>R_B</name> <operator>+</operator> <name>Y1</name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>output_pixel</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dest</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>av_clip_uintp2</name><argument_list>( <argument><expr><name>G</name> <operator>+</operator> <name>Y1</name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>output_pixel</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dest</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>av_clip_uintp2</name><argument_list>(<argument><expr><name>B_R</name> <operator>+</operator> <name>Y1</name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>eightbytes</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>output_pixel</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dest</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>av_clip_uintp2</name><argument_list>(<argument><expr><name>A1</name></expr></argument> , <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>output_pixel</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dest</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>av_clip_uintp2</name><argument_list>(<argument><expr><name>R_B</name> <operator>+</operator> <name>Y2</name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>output_pixel</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dest</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>av_clip_uintp2</name><argument_list>( <argument><expr><name>G</name> <operator>+</operator> <name>Y2</name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>output_pixel</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dest</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>av_clip_uintp2</name><argument_list>(<argument><expr><name>B_R</name> <operator>+</operator> <name>Y2</name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>output_pixel</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dest</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>av_clip_uintp2</name><argument_list>(<argument><expr><name>A2</name></expr></argument> , <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dest</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>output_pixel</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dest</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>av_clip_uintp2</name><argument_list>(<argument><expr><name>R_B</name> <operator>+</operator> <name>Y2</name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>output_pixel</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dest</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>av_clip_uintp2</name><argument_list>( <argument><expr><name>G</name> <operator>+</operator> <name>Y2</name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>output_pixel</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dest</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>av_clip_uintp2</name><argument_list>(<argument><expr><name>B_R</name> <operator>+</operator> <name>Y2</name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dest</name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type>

<name>yuv2rgba64_2_c_template</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name><name>ubuf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name><name>vbuf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name><name>abuf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dstW</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>yalpha</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>uvalpha</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hasAlpha</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>eightbytes</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name>buf0</name> <init>= <expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>buf1</name> <init>= <expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>,

<decl><type ref="prev"><modifier>*</modifier></type><name>ubuf0</name> <init>= <expr><name><name>ubuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ubuf1</name> <init>= <expr><name><name>ubuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>,

<decl><type ref="prev"><modifier>*</modifier></type><name>vbuf0</name> <init>= <expr><name><name>vbuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>vbuf1</name> <init>= <expr><name><name>vbuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>,

<decl><type ref="prev"><modifier>*</modifier></type><name>abuf0</name> <init>= <expr><ternary><condition><expr><name>hasAlpha</name></expr> ?</condition><then> <expr><name><name>abuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>,

<decl><type ref="prev"><modifier>*</modifier></type><name>abuf1</name> <init>= <expr><ternary><condition><expr><name>hasAlpha</name></expr> ?</condition><then> <expr><name><name>abuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>yalpha1</name> <init>= <expr><literal type="number">4096</literal> <operator>-</operator> <name>yalpha</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>uvalpha1</name> <init>= <expr><literal type="number">4096</literal> <operator>-</operator> <name>uvalpha</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>A1</name> <init>= <expr><literal type="number">0xffff</literal><operator>&lt;&lt;</operator><literal type="number">14</literal></expr></init></decl>, <decl><type ref="prev"/><name>A2</name> <init>= <expr><literal type="number">0xffff</literal><operator>&lt;&lt;</operator><literal type="number">14</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name>yalpha</name> <operator>&lt;=</operator> <literal type="number">4096U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name>uvalpha</name> <operator>&lt;=</operator> <literal type="number">4096U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><operator>(</operator><name>dstW</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>Y1</name> <init>= <expr><operator>(</operator><name><name>buf0</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name>yalpha1</name> <operator>+</operator> <name><name>buf1</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name>yalpha</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>Y2</name> <init>= <expr><operator>(</operator><name><name>buf0</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>yalpha1</name> <operator>+</operator> <name><name>buf1</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>yalpha</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>U</name> <init>= <expr><operator>(</operator><name><name>ubuf0</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>uvalpha1</name> <operator>+</operator> <name><name>ubuf1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>uvalpha</name> <operator>-</operator> <operator>(</operator><literal type="number">128</literal> <operator>&lt;&lt;</operator> <literal type="number">23</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>V</name> <init>= <expr><operator>(</operator><name><name>vbuf0</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>uvalpha1</name> <operator>+</operator> <name><name>vbuf1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>uvalpha</name> <operator>-</operator> <operator>(</operator><literal type="number">128</literal> <operator>&lt;&lt;</operator> <literal type="number">23</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>R</name></decl>, <decl><type ref="prev"/><name>G</name></decl>, <decl><type ref="prev"/><name>B</name></decl>;</decl_stmt>

<expr_stmt><expr><name>Y1</name> <operator>-=</operator> <name><name>c</name><operator>-&gt;</operator><name>yuv2rgb_y_offset</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>Y2</name> <operator>-=</operator> <name><name>c</name><operator>-&gt;</operator><name>yuv2rgb_y_offset</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>Y1</name> <operator>*=</operator> <name><name>c</name><operator>-&gt;</operator><name>yuv2rgb_y_coeff</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>Y2</name> <operator>*=</operator> <name><name>c</name><operator>-&gt;</operator><name>yuv2rgb_y_coeff</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>Y1</name> <operator>+=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>Y2</name> <operator>+=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>R</name> <operator>=</operator> <name>V</name> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>yuv2rgb_v2r_coeff</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>G</name> <operator>=</operator> <name>V</name> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>yuv2rgb_v2g_coeff</name></name> <operator>+</operator> <name>U</name> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>yuv2rgb_u2g_coeff</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>B</name> <operator>=</operator> <name>U</name> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>yuv2rgb_u2b_coeff</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>hasAlpha</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>A1</name> <operator>=</operator> <operator>(</operator><name><name>abuf0</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">2</literal></expr> ]</index></name> <operator>*</operator> <name>yalpha1</name> <operator>+</operator> <name><name>abuf1</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">2</literal></expr> ]</index></name> <operator>*</operator> <name>yalpha</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>A2</name> <operator>=</operator> <operator>(</operator><name><name>abuf0</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>yalpha1</name> <operator>+</operator> <name><name>abuf1</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>yalpha</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>A1</name> <operator>+=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>A2</name> <operator>+=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>output_pixel</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>av_clip_uintp2</name><argument_list>(<argument><expr><name>R_B</name> <operator>+</operator> <name>Y1</name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>output_pixel</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dest</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>av_clip_uintp2</name><argument_list>( <argument><expr><name>G</name> <operator>+</operator> <name>Y1</name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>output_pixel</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dest</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>av_clip_uintp2</name><argument_list>(<argument><expr><name>B_R</name> <operator>+</operator> <name>Y1</name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>eightbytes</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>output_pixel</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dest</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>av_clip_uintp2</name><argument_list>(<argument><expr><name>A1</name></expr></argument> , <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>output_pixel</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dest</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>av_clip_uintp2</name><argument_list>(<argument><expr><name>R_B</name> <operator>+</operator> <name>Y2</name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>output_pixel</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dest</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>av_clip_uintp2</name><argument_list>( <argument><expr><name>G</name> <operator>+</operator> <name>Y2</name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>output_pixel</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dest</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>av_clip_uintp2</name><argument_list>(<argument><expr><name>B_R</name> <operator>+</operator> <name>Y2</name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>output_pixel</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dest</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>av_clip_uintp2</name><argument_list>(<argument><expr><name>A2</name></expr></argument> , <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dest</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>output_pixel</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dest</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>av_clip_uintp2</name><argument_list>(<argument><expr><name>R_B</name> <operator>+</operator> <name>Y2</name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>output_pixel</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dest</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>av_clip_uintp2</name><argument_list>( <argument><expr><name>G</name> <operator>+</operator> <name>Y2</name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>output_pixel</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dest</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>av_clip_uintp2</name><argument_list>(<argument><expr><name>B_R</name> <operator>+</operator> <name>Y2</name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dest</name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type>

<name>yuv2rgba64_1_c_template</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name>buf0</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name><name>ubuf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name><name>vbuf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name>abuf0</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dstW</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>uvalpha</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hasAlpha</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>eightbytes</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name>ubuf0</name> <init>= <expr><name><name>ubuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>vbuf0</name> <init>= <expr><name><name>vbuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>A1</name> <init>= <expr><literal type="number">0xffff</literal><operator>&lt;&lt;</operator><literal type="number">14</literal></expr></init></decl>, <decl><type ref="prev"/><name>A2</name><init>= <expr><literal type="number">0xffff</literal><operator>&lt;&lt;</operator><literal type="number">14</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>uvalpha</name> <operator>&lt;</operator> <literal type="number">2048</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><operator>(</operator><name>dstW</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>Y1</name> <init>= <expr><operator>(</operator><name><name>buf0</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name> <operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>Y2</name> <init>= <expr><operator>(</operator><name><name>buf0</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>U</name> <init>= <expr><operator>(</operator><name><name>ubuf0</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <operator>(</operator><literal type="number">128</literal> <operator>&lt;&lt;</operator> <literal type="number">11</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>V</name> <init>= <expr><operator>(</operator><name><name>vbuf0</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <operator>(</operator><literal type="number">128</literal> <operator>&lt;&lt;</operator> <literal type="number">11</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>R</name></decl>, <decl><type ref="prev"/><name>G</name></decl>, <decl><type ref="prev"/><name>B</name></decl>;</decl_stmt>

<expr_stmt><expr><name>Y1</name> <operator>-=</operator> <name><name>c</name><operator>-&gt;</operator><name>yuv2rgb_y_offset</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>Y2</name> <operator>-=</operator> <name><name>c</name><operator>-&gt;</operator><name>yuv2rgb_y_offset</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>Y1</name> <operator>*=</operator> <name><name>c</name><operator>-&gt;</operator><name>yuv2rgb_y_coeff</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>Y2</name> <operator>*=</operator> <name><name>c</name><operator>-&gt;</operator><name>yuv2rgb_y_coeff</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>Y1</name> <operator>+=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>Y2</name> <operator>+=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>hasAlpha</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>A1</name> <operator>=</operator> <name><name>abuf0</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">2</literal></expr> ]</index></name> <operator>&lt;&lt;</operator> <literal type="number">11</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>A2</name> <operator>=</operator> <name><name>abuf0</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">11</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>A1</name> <operator>+=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>A2</name> <operator>+=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>R</name> <operator>=</operator> <name>V</name> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>yuv2rgb_v2r_coeff</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>G</name> <operator>=</operator> <name>V</name> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>yuv2rgb_v2g_coeff</name></name> <operator>+</operator> <name>U</name> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>yuv2rgb_u2g_coeff</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>B</name> <operator>=</operator> <name>U</name> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>yuv2rgb_u2b_coeff</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>output_pixel</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>av_clip_uintp2</name><argument_list>(<argument><expr><name>R_B</name> <operator>+</operator> <name>Y1</name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>output_pixel</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dest</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>av_clip_uintp2</name><argument_list>( <argument><expr><name>G</name> <operator>+</operator> <name>Y1</name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>output_pixel</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dest</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>av_clip_uintp2</name><argument_list>(<argument><expr><name>B_R</name> <operator>+</operator> <name>Y1</name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>eightbytes</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>output_pixel</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dest</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>av_clip_uintp2</name><argument_list>(<argument><expr><name>A1</name></expr></argument> , <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>output_pixel</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dest</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>av_clip_uintp2</name><argument_list>(<argument><expr><name>R_B</name> <operator>+</operator> <name>Y2</name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>output_pixel</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dest</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>av_clip_uintp2</name><argument_list>( <argument><expr><name>G</name> <operator>+</operator> <name>Y2</name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>output_pixel</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dest</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>av_clip_uintp2</name><argument_list>(<argument><expr><name>B_R</name> <operator>+</operator> <name>Y2</name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>output_pixel</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dest</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>av_clip_uintp2</name><argument_list>(<argument><expr><name>A2</name></expr></argument> , <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dest</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>output_pixel</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dest</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>av_clip_uintp2</name><argument_list>(<argument><expr><name>R_B</name> <operator>+</operator> <name>Y2</name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>output_pixel</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dest</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>av_clip_uintp2</name><argument_list>( <argument><expr><name>G</name> <operator>+</operator> <name>Y2</name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>output_pixel</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dest</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>av_clip_uintp2</name><argument_list>(<argument><expr><name>B_R</name> <operator>+</operator> <name>Y2</name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dest</name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name>ubuf1</name> <init>= <expr><name><name>ubuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>vbuf1</name> <init>= <expr><name><name>vbuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>A1</name> <init>= <expr><literal type="number">0xffff</literal><operator>&lt;&lt;</operator><literal type="number">14</literal></expr></init></decl>, <decl><type ref="prev"/><name>A2</name> <init>= <expr><literal type="number">0xffff</literal><operator>&lt;&lt;</operator><literal type="number">14</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><operator>(</operator><name>dstW</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>Y1</name> <init>= <expr><operator>(</operator><name><name>buf0</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name> <operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>Y2</name> <init>= <expr><operator>(</operator><name><name>buf0</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>U</name> <init>= <expr><operator>(</operator><name><name>ubuf0</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>ubuf1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <operator>(</operator><literal type="number">128</literal> <operator>&lt;&lt;</operator> <literal type="number">12</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>V</name> <init>= <expr><operator>(</operator><name><name>vbuf0</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>vbuf1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <operator>(</operator><literal type="number">128</literal> <operator>&lt;&lt;</operator> <literal type="number">12</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>R</name></decl>, <decl><type ref="prev"/><name>G</name></decl>, <decl><type ref="prev"/><name>B</name></decl>;</decl_stmt>

<expr_stmt><expr><name>Y1</name> <operator>-=</operator> <name><name>c</name><operator>-&gt;</operator><name>yuv2rgb_y_offset</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>Y2</name> <operator>-=</operator> <name><name>c</name><operator>-&gt;</operator><name>yuv2rgb_y_offset</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>Y1</name> <operator>*=</operator> <name><name>c</name><operator>-&gt;</operator><name>yuv2rgb_y_coeff</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>Y2</name> <operator>*=</operator> <name><name>c</name><operator>-&gt;</operator><name>yuv2rgb_y_coeff</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>Y1</name> <operator>+=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>Y2</name> <operator>+=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>hasAlpha</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>A1</name> <operator>=</operator> <name><name>abuf0</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">2</literal></expr> ]</index></name> <operator>&lt;&lt;</operator> <literal type="number">11</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>A2</name> <operator>=</operator> <name><name>abuf0</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">11</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>A1</name> <operator>+=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>A2</name> <operator>+=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>R</name> <operator>=</operator> <name>V</name> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>yuv2rgb_v2r_coeff</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>G</name> <operator>=</operator> <name>V</name> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>yuv2rgb_v2g_coeff</name></name> <operator>+</operator> <name>U</name> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>yuv2rgb_u2g_coeff</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>B</name> <operator>=</operator> <name>U</name> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>yuv2rgb_u2b_coeff</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>output_pixel</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>av_clip_uintp2</name><argument_list>(<argument><expr><name>R_B</name> <operator>+</operator> <name>Y1</name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>output_pixel</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dest</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>av_clip_uintp2</name><argument_list>( <argument><expr><name>G</name> <operator>+</operator> <name>Y1</name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>output_pixel</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dest</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>av_clip_uintp2</name><argument_list>(<argument><expr><name>B_R</name> <operator>+</operator> <name>Y1</name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>eightbytes</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>output_pixel</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dest</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>av_clip_uintp2</name><argument_list>(<argument><expr><name>A1</name></expr></argument> , <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>output_pixel</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dest</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>av_clip_uintp2</name><argument_list>(<argument><expr><name>R_B</name> <operator>+</operator> <name>Y2</name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>output_pixel</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dest</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>av_clip_uintp2</name><argument_list>( <argument><expr><name>G</name> <operator>+</operator> <name>Y2</name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>output_pixel</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dest</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>av_clip_uintp2</name><argument_list>(<argument><expr><name>B_R</name> <operator>+</operator> <name>Y2</name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>output_pixel</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dest</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>av_clip_uintp2</name><argument_list>(<argument><expr><name>A2</name></expr></argument> , <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dest</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>output_pixel</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dest</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>av_clip_uintp2</name><argument_list>(<argument><expr><name>R_B</name> <operator>+</operator> <name>Y2</name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>output_pixel</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dest</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>av_clip_uintp2</name><argument_list>( <argument><expr><name>G</name> <operator>+</operator> <name>Y2</name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>output_pixel</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dest</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>av_clip_uintp2</name><argument_list>(<argument><expr><name>B_R</name> <operator>+</operator> <name>Y2</name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dest</name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type>

<name>yuv2rgba64_full_X_c_template</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>lumFilter</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>lumSrc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lumFilterSize</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>chrFilter</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>chrUSrc</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>chrVSrc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>chrFilterSize</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>alpSrc</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dstW</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hasAlpha</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>eightbytes</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>A</name> <init>= <expr><literal type="number">0xffff</literal><operator>&lt;&lt;</operator><literal type="number">14</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dstW</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>Y</name> <init>= <expr><operator>-</operator><literal type="number">0x40000000</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>U</name> <init>= <expr><operator>-</operator><operator>(</operator><literal type="number">128</literal> <operator>&lt;&lt;</operator> <literal type="number">23</literal><operator>)</operator></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>V</name> <init>= <expr><operator>-</operator><operator>(</operator><literal type="number">128</literal> <operator>&lt;&lt;</operator> <literal type="number">23</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>R</name></decl>, <decl><type ref="prev"/><name>G</name></decl>, <decl><type ref="prev"/><name>B</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>lumFilterSize</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>Y</name> <operator>+=</operator> <name><name>lumSrc</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>lumFilter</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>chrFilterSize</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content><empty_stmt>;</empty_stmt>

<expr_stmt><expr><name>U</name> <operator>+=</operator> <name><name>chrUSrc</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>chrFilter</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>V</name> <operator>+=</operator> <name><name>chrVSrc</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>chrFilter</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>hasAlpha</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>A</name> <operator>=</operator> <operator>-</operator><literal type="number">0x40000000</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>lumFilterSize</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>A</name> <operator>+=</operator> <name><name>alpSrc</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>lumFilter</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>A</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>A</name> <operator>+=</operator> <literal type="number">0x20002000</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>Y</name> <operator>&gt;&gt;=</operator> <literal type="number">14</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>Y</name> <operator>+=</operator> <literal type="number">0x10000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>U</name> <operator>&gt;&gt;=</operator> <literal type="number">14</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>V</name> <operator>&gt;&gt;=</operator> <literal type="number">14</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>Y</name> <operator>-=</operator> <name><name>c</name><operator>-&gt;</operator><name>yuv2rgb_y_offset</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>Y</name> <operator>*=</operator> <name><name>c</name><operator>-&gt;</operator><name>yuv2rgb_y_coeff</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>Y</name> <operator>+=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>R</name> <operator>=</operator> <name>V</name> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>yuv2rgb_v2r_coeff</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>G</name> <operator>=</operator> <name>V</name> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>yuv2rgb_v2g_coeff</name></name> <operator>+</operator> <name>U</name> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>yuv2rgb_u2g_coeff</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>B</name> <operator>=</operator> <name>U</name> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>yuv2rgb_u2b_coeff</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>output_pixel</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>av_clip_uintp2</name><argument_list>(<argument><expr><name>R_B</name> <operator>+</operator> <name>Y</name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>output_pixel</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dest</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>av_clip_uintp2</name><argument_list>( <argument><expr><name>G</name> <operator>+</operator> <name>Y</name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>output_pixel</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dest</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>av_clip_uintp2</name><argument_list>(<argument><expr><name>B_R</name> <operator>+</operator> <name>Y</name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>eightbytes</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>output_pixel</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dest</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>av_clip_uintp2</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dest</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>dest</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type>

<name>yuv2rgba64_full_2_c_template</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name><name>ubuf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name><name>vbuf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name><name>abuf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dstW</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>yalpha</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>uvalpha</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hasAlpha</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>eightbytes</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name>buf0</name> <init>= <expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>buf1</name> <init>= <expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>,

<decl><type ref="prev"><modifier>*</modifier></type><name>ubuf0</name> <init>= <expr><name><name>ubuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ubuf1</name> <init>= <expr><name><name>ubuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>,

<decl><type ref="prev"><modifier>*</modifier></type><name>vbuf0</name> <init>= <expr><name><name>vbuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>vbuf1</name> <init>= <expr><name><name>vbuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>,

<decl><type ref="prev"><modifier>*</modifier></type><name>abuf0</name> <init>= <expr><ternary><condition><expr><name>hasAlpha</name></expr> ?</condition><then> <expr><name><name>abuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>,

<decl><type ref="prev"><modifier>*</modifier></type><name>abuf1</name> <init>= <expr><ternary><condition><expr><name>hasAlpha</name></expr> ?</condition><then> <expr><name><name>abuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>yalpha1</name> <init>= <expr><literal type="number">4096</literal> <operator>-</operator> <name>yalpha</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>uvalpha1</name> <init>= <expr><literal type="number">4096</literal> <operator>-</operator> <name>uvalpha</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>A</name> <init>= <expr><literal type="number">0xffff</literal><operator>&lt;&lt;</operator><literal type="number">14</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name>yalpha</name> <operator>&lt;=</operator> <literal type="number">4096U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name>uvalpha</name> <operator>&lt;=</operator> <literal type="number">4096U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dstW</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>Y</name> <init>= <expr><operator>(</operator><name><name>buf0</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>yalpha1</name> <operator>+</operator> <name><name>buf1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>yalpha</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>U</name> <init>= <expr><operator>(</operator><name><name>ubuf0</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>uvalpha1</name> <operator>+</operator> <name><name>ubuf1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>uvalpha</name> <operator>-</operator> <operator>(</operator><literal type="number">128</literal> <operator>&lt;&lt;</operator> <literal type="number">23</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>V</name> <init>= <expr><operator>(</operator><name><name>vbuf0</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>uvalpha1</name> <operator>+</operator> <name><name>vbuf1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>uvalpha</name> <operator>-</operator> <operator>(</operator><literal type="number">128</literal> <operator>&lt;&lt;</operator> <literal type="number">23</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>R</name></decl>, <decl><type ref="prev"/><name>G</name></decl>, <decl><type ref="prev"/><name>B</name></decl>;</decl_stmt>

<expr_stmt><expr><name>Y</name> <operator>-=</operator> <name><name>c</name><operator>-&gt;</operator><name>yuv2rgb_y_offset</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>Y</name> <operator>*=</operator> <name><name>c</name><operator>-&gt;</operator><name>yuv2rgb_y_coeff</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>Y</name> <operator>+=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>R</name> <operator>=</operator> <name>V</name> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>yuv2rgb_v2r_coeff</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>G</name> <operator>=</operator> <name>V</name> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>yuv2rgb_v2g_coeff</name></name> <operator>+</operator> <name>U</name> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>yuv2rgb_u2g_coeff</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>B</name> <operator>=</operator> <name>U</name> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>yuv2rgb_u2b_coeff</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>hasAlpha</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>A</name> <operator>=</operator> <operator>(</operator><name><name>abuf0</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>yalpha1</name> <operator>+</operator> <name><name>abuf1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>yalpha</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>A</name> <operator>+=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>output_pixel</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>av_clip_uintp2</name><argument_list>(<argument><expr><name>R_B</name> <operator>+</operator> <name>Y</name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>output_pixel</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dest</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>av_clip_uintp2</name><argument_list>( <argument><expr><name>G</name> <operator>+</operator> <name>Y</name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>output_pixel</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dest</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>av_clip_uintp2</name><argument_list>(<argument><expr><name>B_R</name> <operator>+</operator> <name>Y</name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>eightbytes</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>output_pixel</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dest</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>av_clip_uintp2</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dest</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>dest</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type>

<name>yuv2rgba64_full_1_c_template</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name>buf0</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name><name>ubuf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name><name>vbuf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name>abuf0</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dstW</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>uvalpha</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hasAlpha</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>eightbytes</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name>ubuf0</name> <init>= <expr><name><name>ubuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>vbuf0</name> <init>= <expr><name><name>vbuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>A</name> <init>= <expr><literal type="number">0xffff</literal><operator>&lt;&lt;</operator><literal type="number">14</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>uvalpha</name> <operator>&lt;</operator> <literal type="number">2048</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dstW</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>Y</name> <init>= <expr><operator>(</operator><name><name>buf0</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>U</name> <init>= <expr><operator>(</operator><name><name>ubuf0</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <operator>(</operator><literal type="number">128</literal> <operator>&lt;&lt;</operator> <literal type="number">11</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>V</name> <init>= <expr><operator>(</operator><name><name>vbuf0</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <operator>(</operator><literal type="number">128</literal> <operator>&lt;&lt;</operator> <literal type="number">11</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>R</name></decl>, <decl><type ref="prev"/><name>G</name></decl>, <decl><type ref="prev"/><name>B</name></decl>;</decl_stmt>

<expr_stmt><expr><name>Y</name> <operator>-=</operator> <name><name>c</name><operator>-&gt;</operator><name>yuv2rgb_y_offset</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>Y</name> <operator>*=</operator> <name><name>c</name><operator>-&gt;</operator><name>yuv2rgb_y_coeff</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>Y</name> <operator>+=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>hasAlpha</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>A</name> <operator>=</operator> <name><name>abuf0</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">11</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>A</name> <operator>+=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>R</name> <operator>=</operator> <name>V</name> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>yuv2rgb_v2r_coeff</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>G</name> <operator>=</operator> <name>V</name> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>yuv2rgb_v2g_coeff</name></name> <operator>+</operator> <name>U</name> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>yuv2rgb_u2g_coeff</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>B</name> <operator>=</operator> <name>U</name> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>yuv2rgb_u2b_coeff</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>output_pixel</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>av_clip_uintp2</name><argument_list>(<argument><expr><name>R_B</name> <operator>+</operator> <name>Y</name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>output_pixel</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dest</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>av_clip_uintp2</name><argument_list>( <argument><expr><name>G</name> <operator>+</operator> <name>Y</name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>output_pixel</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dest</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>av_clip_uintp2</name><argument_list>(<argument><expr><name>B_R</name> <operator>+</operator> <name>Y</name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>eightbytes</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>output_pixel</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dest</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>av_clip_uintp2</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dest</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>dest</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name>ubuf1</name> <init>= <expr><name><name>ubuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>vbuf1</name> <init>= <expr><name><name>vbuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>A</name> <init>= <expr><literal type="number">0xffff</literal><operator>&lt;&lt;</operator><literal type="number">14</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dstW</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>Y</name> <init>= <expr><operator>(</operator><name><name>buf0</name><index>[<expr><name>i</name></expr>]</index></name> <operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>U</name> <init>= <expr><operator>(</operator><name><name>ubuf0</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>ubuf1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <operator>(</operator><literal type="number">128</literal> <operator>&lt;&lt;</operator> <literal type="number">12</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>V</name> <init>= <expr><operator>(</operator><name><name>vbuf0</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>vbuf1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <operator>(</operator><literal type="number">128</literal> <operator>&lt;&lt;</operator> <literal type="number">12</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>R</name></decl>, <decl><type ref="prev"/><name>G</name></decl>, <decl><type ref="prev"/><name>B</name></decl>;</decl_stmt>

<expr_stmt><expr><name>Y</name> <operator>-=</operator> <name><name>c</name><operator>-&gt;</operator><name>yuv2rgb_y_offset</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>Y</name> <operator>*=</operator> <name><name>c</name><operator>-&gt;</operator><name>yuv2rgb_y_coeff</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>Y</name> <operator>+=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>hasAlpha</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>A</name> <operator>=</operator> <name><name>abuf0</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">11</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>A</name> <operator>+=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>R</name> <operator>=</operator> <name>V</name> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>yuv2rgb_v2r_coeff</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>G</name> <operator>=</operator> <name>V</name> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>yuv2rgb_v2g_coeff</name></name> <operator>+</operator> <name>U</name> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>yuv2rgb_u2g_coeff</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>B</name> <operator>=</operator> <name>U</name> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>yuv2rgb_u2b_coeff</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>output_pixel</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>av_clip_uintp2</name><argument_list>(<argument><expr><name>R_B</name> <operator>+</operator> <name>Y</name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>output_pixel</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dest</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>av_clip_uintp2</name><argument_list>( <argument><expr><name>G</name> <operator>+</operator> <name>Y</name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>output_pixel</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dest</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>av_clip_uintp2</name><argument_list>(<argument><expr><name>B_R</name> <operator>+</operator> <name>Y</name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>eightbytes</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>output_pixel</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dest</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>av_clip_uintp2</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dest</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>dest</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>output_pixel</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>r_b</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>b_r</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YUV2PACKED16WRAPPER</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>base</name></type></parameter>, <parameter><type><name>ext</name></type></parameter>, <parameter><type><name>fmt</name></type></parameter>, <parameter><type><name>hasAlpha</name></type></parameter>, <parameter><type><name>eightbytes</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void name ##ext ##_X_c(SwsContext *c, const int16_t *lumFilter, const int16_t **_lumSrc, int lumFilterSize, const int16_t *chrFilter, const int16_t **_chrUSrc, const int16_t **_chrVSrc, int chrFilterSize, const int16_t **_alpSrc, uint8_t *_dest, int dstW, int y) { const int32_t **lumSrc = (const int32_t **) _lumSrc, **chrUSrc = (const int32_t **) _chrUSrc, **chrVSrc = (const int32_t **) _chrVSrc, **alpSrc = (const int32_t **) _alpSrc; uint16_t *dest = (uint16_t *) _dest; name ##base ##_X_c_template(c, lumFilter, lumSrc, lumFilterSize, chrFilter, chrUSrc, chrVSrc, chrFilterSize, alpSrc, dest, dstW, y, fmt, hasAlpha, eightbytes); } static void name ##ext ##_2_c(SwsContext *c, const int16_t *_buf[2], const int16_t *_ubuf[2], const int16_t *_vbuf[2], const int16_t *_abuf[2], uint8_t *_dest, int dstW, int yalpha, int uvalpha, int y) { const int32_t **buf = (const int32_t **) _buf, **ubuf = (const int32_t **) _ubuf, **vbuf = (const int32_t **) _vbuf, **abuf = (const int32_t **) _abuf; uint16_t *dest = (uint16_t *) _dest; name ##base ##_2_c_template(c, buf, ubuf, vbuf, abuf, dest, dstW, yalpha, uvalpha, y, fmt, hasAlpha, eightbytes); } static void name ##ext ##_1_c(SwsContext *c, const int16_t *_buf0, const int16_t *_ubuf[2], const int16_t *_vbuf[2], const int16_t *_abuf0, uint8_t *_dest, int dstW, int uvalpha, int y) { const int32_t *buf0 = (const int32_t *) _buf0, **ubuf = (const int32_t **) _ubuf, **vbuf = (const int32_t **) _vbuf, *abuf0 = (const int32_t *) _abuf0; uint16_t *dest = (uint16_t *) _dest; name ##base ##_1_c_template(c, buf0, ubuf, vbuf, abuf0, dest, dstW, uvalpha, y, fmt, hasAlpha, eightbytes); }</cpp:value></cpp:define>

<macro><name>YUV2PACKED16WRAPPER</name><argument_list>(<argument>yuv2</argument>, <argument>rgba64</argument>, <argument>rgb48be</argument>, <argument>AV_PIX_FMT_RGB48BE</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>

<macro><name>YUV2PACKED16WRAPPER</name><argument_list>(<argument>yuv2</argument>, <argument>rgba64</argument>, <argument>rgb48le</argument>, <argument>AV_PIX_FMT_RGB48LE</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>

<macro><name>YUV2PACKED16WRAPPER</name><argument_list>(<argument>yuv2</argument>, <argument>rgba64</argument>, <argument>bgr48be</argument>, <argument>AV_PIX_FMT_BGR48BE</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>

<macro><name>YUV2PACKED16WRAPPER</name><argument_list>(<argument>yuv2</argument>, <argument>rgba64</argument>, <argument>bgr48le</argument>, <argument>AV_PIX_FMT_BGR48LE</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>

<macro><name>YUV2PACKED16WRAPPER</name><argument_list>(<argument>yuv2</argument>, <argument>rgba64</argument>, <argument>rgba64be</argument>, <argument>AV_PIX_FMT_RGBA64BE</argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>

<macro><name>YUV2PACKED16WRAPPER</name><argument_list>(<argument>yuv2</argument>, <argument>rgba64</argument>, <argument>rgba64le</argument>, <argument>AV_PIX_FMT_RGBA64LE</argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>

<macro><name>YUV2PACKED16WRAPPER</name><argument_list>(<argument>yuv2</argument>, <argument>rgba64</argument>, <argument>rgbx64be</argument>, <argument>AV_PIX_FMT_RGBA64BE</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>

<macro><name>YUV2PACKED16WRAPPER</name><argument_list>(<argument>yuv2</argument>, <argument>rgba64</argument>, <argument>rgbx64le</argument>, <argument>AV_PIX_FMT_RGBA64LE</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>

<macro><name>YUV2PACKED16WRAPPER</name><argument_list>(<argument>yuv2</argument>, <argument>rgba64</argument>, <argument>bgra64be</argument>, <argument>AV_PIX_FMT_BGRA64BE</argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>

<macro><name>YUV2PACKED16WRAPPER</name><argument_list>(<argument>yuv2</argument>, <argument>rgba64</argument>, <argument>bgra64le</argument>, <argument>AV_PIX_FMT_BGRA64LE</argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>

<macro><name>YUV2PACKED16WRAPPER</name><argument_list>(<argument>yuv2</argument>, <argument>rgba64</argument>, <argument>bgrx64be</argument>, <argument>AV_PIX_FMT_BGRA64BE</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>

<macro><name>YUV2PACKED16WRAPPER</name><argument_list>(<argument>yuv2</argument>, <argument>rgba64</argument>, <argument>bgrx64le</argument>, <argument>AV_PIX_FMT_BGRA64LE</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>

<macro><name>YUV2PACKED16WRAPPER</name><argument_list>(<argument>yuv2</argument>, <argument>ya16</argument>, <argument>ya16be</argument>, <argument>AV_PIX_FMT_YA16BE</argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>

<macro><name>YUV2PACKED16WRAPPER</name><argument_list>(<argument>yuv2</argument>, <argument>ya16</argument>, <argument>ya16le</argument>, <argument>AV_PIX_FMT_YA16LE</argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>

<macro><name>YUV2PACKED16WRAPPER</name><argument_list>(<argument>yuv2</argument>, <argument>rgba64_full</argument>, <argument>rgb48be_full</argument>, <argument>AV_PIX_FMT_RGB48BE</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>

<macro><name>YUV2PACKED16WRAPPER</name><argument_list>(<argument>yuv2</argument>, <argument>rgba64_full</argument>, <argument>rgb48le_full</argument>, <argument>AV_PIX_FMT_RGB48LE</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>

<macro><name>YUV2PACKED16WRAPPER</name><argument_list>(<argument>yuv2</argument>, <argument>rgba64_full</argument>, <argument>bgr48be_full</argument>, <argument>AV_PIX_FMT_BGR48BE</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>

<macro><name>YUV2PACKED16WRAPPER</name><argument_list>(<argument>yuv2</argument>, <argument>rgba64_full</argument>, <argument>bgr48le_full</argument>, <argument>AV_PIX_FMT_BGR48LE</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>

<macro><name>YUV2PACKED16WRAPPER</name><argument_list>(<argument>yuv2</argument>, <argument>rgba64_full</argument>, <argument>rgba64be_full</argument>, <argument>AV_PIX_FMT_RGBA64BE</argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>

<macro><name>YUV2PACKED16WRAPPER</name><argument_list>(<argument>yuv2</argument>, <argument>rgba64_full</argument>, <argument>rgba64le_full</argument>, <argument>AV_PIX_FMT_RGBA64LE</argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>

<macro><name>YUV2PACKED16WRAPPER</name><argument_list>(<argument>yuv2</argument>, <argument>rgba64_full</argument>, <argument>rgbx64be_full</argument>, <argument>AV_PIX_FMT_RGBA64BE</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>

<macro><name>YUV2PACKED16WRAPPER</name><argument_list>(<argument>yuv2</argument>, <argument>rgba64_full</argument>, <argument>rgbx64le_full</argument>, <argument>AV_PIX_FMT_RGBA64LE</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>

<macro><name>YUV2PACKED16WRAPPER</name><argument_list>(<argument>yuv2</argument>, <argument>rgba64_full</argument>, <argument>bgra64be_full</argument>, <argument>AV_PIX_FMT_BGRA64BE</argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>

<macro><name>YUV2PACKED16WRAPPER</name><argument_list>(<argument>yuv2</argument>, <argument>rgba64_full</argument>, <argument>bgra64le_full</argument>, <argument>AV_PIX_FMT_BGRA64LE</argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>

<macro><name>YUV2PACKED16WRAPPER</name><argument_list>(<argument>yuv2</argument>, <argument>rgba64_full</argument>, <argument>bgrx64be_full</argument>, <argument>AV_PIX_FMT_BGRA64BE</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>

<macro><name>YUV2PACKED16WRAPPER</name><argument_list>(<argument>yuv2</argument>, <argument>rgba64_full</argument>, <argument>bgrx64le_full</argument>, <argument>AV_PIX_FMT_BGRA64LE</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type>

<name>yuv2rgb_write</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>Y1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>Y2</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name></type> <name>A1</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>A2</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>_r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>_g</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>_b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hasAlpha</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>target</name> <operator>==</operator> <name>AV_PIX_FMT_ARGB</name> <operator>||</operator> <name>target</name> <operator>==</operator> <name>AV_PIX_FMT_RGBA</name> <operator>||</operator>

<name>target</name> <operator>==</operator> <name>AV_PIX_FMT_ABGR</name> <operator>||</operator> <name>target</name> <operator>==</operator> <name>AV_PIX_FMT_BGRA</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dest</name> <init>= <expr><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator> <name>_dest</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator> <name>_r</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>g</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator> <name>_g</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator> <name>_b</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_SMALL</name></expr></cpp:if>

<decl_stmt><decl><type><name>int</name></type> <name>sh</name> <init>= <expr><ternary><condition><expr><name>hasAlpha</name></expr> ?</condition><then> <expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>target</name> <operator>==</operator> <name>AV_PIX_FMT_RGB32_1</name> <operator>||</operator> <name>target</name> <operator>==</operator> <name>AV_PIX_FMT_BGR32_1</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">24</literal></expr></else></ternary><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dest</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>r</name><index>[<expr><name>Y1</name></expr>]</index></name> <operator>+</operator> <name><name>g</name><index>[<expr><name>Y1</name></expr>]</index></name> <operator>+</operator> <name><name>b</name><index>[<expr><name>Y1</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>hasAlpha</name></expr> ?</condition><then> <expr><name>A1</name> <operator>&lt;&lt;</operator> <name>sh</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dest</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>r</name><index>[<expr><name>Y2</name></expr>]</index></name> <operator>+</operator> <name><name>g</name><index>[<expr><name>Y2</name></expr>]</index></name> <operator>+</operator> <name><name>b</name><index>[<expr><name>Y2</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>hasAlpha</name></expr> ?</condition><then> <expr><name>A2</name> <operator>&lt;&lt;</operator> <name>sh</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if <condition>(<expr><name>hasAlpha</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>sh</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>target</name> <operator>==</operator> <name>AV_PIX_FMT_RGB32_1</name> <operator>||</operator> <name>target</name> <operator>==</operator> <name>AV_PIX_FMT_BGR32_1</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">24</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><operator>(</operator><name><name>r</name><index>[<expr><name>Y1</name></expr>]</index></name> <operator>+</operator> <name><name>g</name><index>[<expr><name>Y1</name></expr>]</index></name> <operator>+</operator> <name><name>b</name><index>[<expr><name>Y1</name></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <name>sh</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dest</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>r</name><index>[<expr><name>Y1</name></expr>]</index></name> <operator>+</operator> <name><name>g</name><index>[<expr><name>Y1</name></expr>]</index></name> <operator>+</operator> <name><name>b</name><index>[<expr><name>Y1</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>A1</name> <operator>&lt;&lt;</operator> <name>sh</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dest</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>r</name><index>[<expr><name>Y2</name></expr>]</index></name> <operator>+</operator> <name><name>g</name><index>[<expr><name>Y2</name></expr>]</index></name> <operator>+</operator> <name><name>b</name><index>[<expr><name>Y2</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>A2</name> <operator>&lt;&lt;</operator> <name>sh</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ASSERT_LEVEL</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>ASSERT_LEVEL</name> <operator>&gt;</operator> <literal type="number">1</literal></expr></cpp:if>

<decl_stmt><decl><type><name>int</name></type> <name>sh</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>target</name> <operator>==</operator> <name>AV_PIX_FMT_RGB32_1</name> <operator>||</operator> <name>target</name> <operator>==</operator> <name>AV_PIX_FMT_BGR32_1</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">24</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><operator>(</operator><name><name>r</name><index>[<expr><name>Y1</name></expr>]</index></name> <operator>+</operator> <name><name>g</name><index>[<expr><name>Y1</name></expr>]</index></name> <operator>+</operator> <name><name>b</name><index>[<expr><name>Y1</name></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <name>sh</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>dest</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>r</name><index>[<expr><name>Y1</name></expr>]</index></name> <operator>+</operator> <name><name>g</name><index>[<expr><name>Y1</name></expr>]</index></name> <operator>+</operator> <name><name>b</name><index>[<expr><name>Y1</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dest</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>r</name><index>[<expr><name>Y2</name></expr>]</index></name> <operator>+</operator> <name><name>g</name><index>[<expr><name>Y2</name></expr>]</index></name> <operator>+</operator> <name><name>b</name><index>[<expr><name>Y2</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>target</name> <operator>==</operator> <name>AV_PIX_FMT_RGB24</name> <operator>||</operator> <name>target</name> <operator>==</operator> <name>AV_PIX_FMT_BGR24</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name> <init>= <expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator> <name>_dest</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator> <name>_r</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>g</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator> <name>_g</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator> <name>_b</name></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>r_b</name></cpp:macro> <cpp:value>((target == AV_PIX_FMT_RGB24) ? r : b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>b_r</name></cpp:macro> <cpp:value>((target == AV_PIX_FMT_RGB24) ? b : r)</cpp:value></cpp:define>

<expr_stmt><expr><name><name>dest</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">6</literal> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>r_b</name><index>[<expr><name>Y1</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dest</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">6</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>g</name><index>[<expr><name>Y1</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dest</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">6</literal> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>b_r</name><index>[<expr><name>Y1</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dest</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">6</literal> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>r_b</name><index>[<expr><name>Y2</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dest</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">6</literal> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>g</name><index>[<expr><name>Y2</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dest</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">6</literal> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name><name>b_r</name><index>[<expr><name>Y2</name></expr>]</index></name></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>r_b</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>b_r</name></cpp:undef>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>target</name> <operator>==</operator> <name>AV_PIX_FMT_RGB565</name> <operator>||</operator> <name>target</name> <operator>==</operator> <name>AV_PIX_FMT_BGR565</name> <operator>||</operator>

<name>target</name> <operator>==</operator> <name>AV_PIX_FMT_RGB555</name> <operator>||</operator> <name>target</name> <operator>==</operator> <name>AV_PIX_FMT_BGR555</name> <operator>||</operator>

<name>target</name> <operator>==</operator> <name>AV_PIX_FMT_RGB444</name> <operator>||</operator> <name>target</name> <operator>==</operator> <name>AV_PIX_FMT_BGR444</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dest</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator> <name>_dest</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator> <name>_r</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>g</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator> <name>_g</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator> <name>_b</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dr1</name></decl>, <decl><type ref="prev"/><name>dg1</name></decl>, <decl><type ref="prev"/><name>db1</name></decl>, <decl><type ref="prev"/><name>dr2</name></decl>, <decl><type ref="prev"/><name>dg2</name></decl>, <decl><type ref="prev"/><name>db2</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>target</name> <operator>==</operator> <name>AV_PIX_FMT_RGB565</name> <operator>||</operator> <name>target</name> <operator>==</operator> <name>AV_PIX_FMT_BGR565</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>dr1</name> <operator>=</operator> <name><name>ff_dither_2x2_8</name><index>[ <expr><name>y</name> <operator>&amp;</operator> <literal type="number">1</literal></expr> ]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dg1</name> <operator>=</operator> <name><name>ff_dither_2x2_4</name><index>[ <expr><name>y</name> <operator>&amp;</operator> <literal type="number">1</literal></expr> ]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>db1</name> <operator>=</operator> <name><name>ff_dither_2x2_8</name><index>[<expr><operator>(</operator><name>y</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>^</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dr2</name> <operator>=</operator> <name><name>ff_dither_2x2_8</name><index>[ <expr><name>y</name> <operator>&amp;</operator> <literal type="number">1</literal></expr> ]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dg2</name> <operator>=</operator> <name><name>ff_dither_2x2_4</name><index>[ <expr><name>y</name> <operator>&amp;</operator> <literal type="number">1</literal></expr> ]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>db2</name> <operator>=</operator> <name><name>ff_dither_2x2_8</name><index>[<expr><operator>(</operator><name>y</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>^</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>target</name> <operator>==</operator> <name>AV_PIX_FMT_RGB555</name> <operator>||</operator> <name>target</name> <operator>==</operator> <name>AV_PIX_FMT_BGR555</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>dr1</name> <operator>=</operator> <name><name>ff_dither_2x2_8</name><index>[ <expr><name>y</name> <operator>&amp;</operator> <literal type="number">1</literal></expr> ]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dg1</name> <operator>=</operator> <name><name>ff_dither_2x2_8</name><index>[ <expr><name>y</name> <operator>&amp;</operator> <literal type="number">1</literal></expr> ]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>db1</name> <operator>=</operator> <name><name>ff_dither_2x2_8</name><index>[<expr><operator>(</operator><name>y</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>^</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dr2</name> <operator>=</operator> <name><name>ff_dither_2x2_8</name><index>[ <expr><name>y</name> <operator>&amp;</operator> <literal type="number">1</literal></expr> ]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dg2</name> <operator>=</operator> <name><name>ff_dither_2x2_8</name><index>[ <expr><name>y</name> <operator>&amp;</operator> <literal type="number">1</literal></expr> ]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>db2</name> <operator>=</operator> <name><name>ff_dither_2x2_8</name><index>[<expr><operator>(</operator><name>y</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>^</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>dr1</name> <operator>=</operator> <name><name>ff_dither_4x4_16</name><index>[ <expr><name>y</name> <operator>&amp;</operator> <literal type="number">3</literal></expr> ]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dg1</name> <operator>=</operator> <name><name>ff_dither_4x4_16</name><index>[ <expr><name>y</name> <operator>&amp;</operator> <literal type="number">3</literal></expr> ]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>db1</name> <operator>=</operator> <name><name>ff_dither_4x4_16</name><index>[<expr><operator>(</operator><name>y</name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator> <operator>^</operator> <literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dr2</name> <operator>=</operator> <name><name>ff_dither_4x4_16</name><index>[ <expr><name>y</name> <operator>&amp;</operator> <literal type="number">3</literal></expr> ]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dg2</name> <operator>=</operator> <name><name>ff_dither_4x4_16</name><index>[ <expr><name>y</name> <operator>&amp;</operator> <literal type="number">3</literal></expr> ]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>db2</name> <operator>=</operator> <name><name>ff_dither_4x4_16</name><index>[<expr><operator>(</operator><name>y</name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator> <operator>^</operator> <literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>dest</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>r</name><index>[<expr><name>Y1</name> <operator>+</operator> <name>dr1</name></expr>]</index></name> <operator>+</operator> <name><name>g</name><index>[<expr><name>Y1</name> <operator>+</operator> <name>dg1</name></expr>]</index></name> <operator>+</operator> <name><name>b</name><index>[<expr><name>Y1</name> <operator>+</operator> <name>db1</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dest</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>r</name><index>[<expr><name>Y2</name> <operator>+</operator> <name>dr2</name></expr>]</index></name> <operator>+</operator> <name><name>g</name><index>[<expr><name>Y2</name> <operator>+</operator> <name>dg2</name></expr>]</index></name> <operator>+</operator> <name><name>b</name><index>[<expr><name>Y2</name> <operator>+</operator> <name>db2</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name> <init>= <expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator> <name>_dest</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator> <name>_r</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>g</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator> <name>_g</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator> <name>_b</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dr1</name></decl>, <decl><type ref="prev"/><name>dg1</name></decl>, <decl><type ref="prev"/><name>db1</name></decl>, <decl><type ref="prev"/><name>dr2</name></decl>, <decl><type ref="prev"/><name>dg2</name></decl>, <decl><type ref="prev"/><name>db2</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>target</name> <operator>==</operator> <name>AV_PIX_FMT_RGB8</name> <operator>||</operator> <name>target</name> <operator>==</operator> <name>AV_PIX_FMT_BGR8</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>d64</name> <init>= <expr><name><name>ff_dither_8x8_73</name><index>[<expr><name>y</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>d32</name> <init>= <expr><name><name>ff_dither_8x8_32</name><index>[<expr><name>y</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>dr1</name> <operator>=</operator> <name>dg1</name> <operator>=</operator> <name><name>d32</name><index>[<expr><operator>(</operator><name>i</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>db1</name> <operator>=</operator> <name><name>d64</name><index>[<expr><operator>(</operator><name>i</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dr2</name> <operator>=</operator> <name>dg2</name> <operator>=</operator> <name><name>d32</name><index>[<expr><operator>(</operator><name>i</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>db2</name> <operator>=</operator> <name><name>d64</name><index>[<expr><operator>(</operator><name>i</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>d64</name> <init>= <expr><name><name>ff_dither_8x8_73</name> <index>[<expr><name>y</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>d128</name> <init>= <expr><name><name>ff_dither_8x8_220</name><index>[<expr><name>y</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>dr1</name> <operator>=</operator> <name>db1</name> <operator>=</operator> <name><name>d128</name><index>[<expr><operator>(</operator><name>i</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dg1</name> <operator>=</operator> <name><name>d64</name><index>[<expr><operator>(</operator><name>i</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dr2</name> <operator>=</operator> <name>db2</name> <operator>=</operator> <name><name>d128</name><index>[<expr><operator>(</operator><name>i</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dg2</name> <operator>=</operator> <name><name>d64</name><index>[<expr><operator>(</operator><name>i</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>target</name> <operator>==</operator> <name>AV_PIX_FMT_RGB4</name> <operator>||</operator> <name>target</name> <operator>==</operator> <name>AV_PIX_FMT_BGR4</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>dest</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>r</name><index>[<expr><name>Y1</name> <operator>+</operator> <name>dr1</name></expr>]</index></name> <operator>+</operator> <name><name>g</name><index>[<expr><name>Y1</name> <operator>+</operator> <name>dg1</name></expr>]</index></name> <operator>+</operator> <name><name>b</name><index>[<expr><name>Y1</name> <operator>+</operator> <name>db1</name></expr>]</index></name> <operator>+</operator>

<operator>(</operator><operator>(</operator><name><name>r</name><index>[<expr><name>Y2</name> <operator>+</operator> <name>dr2</name></expr>]</index></name> <operator>+</operator> <name><name>g</name><index>[<expr><name>Y2</name> <operator>+</operator> <name>dg2</name></expr>]</index></name> <operator>+</operator> <name><name>b</name><index>[<expr><name>Y2</name> <operator>+</operator> <name>db2</name></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>dest</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>r</name><index>[<expr><name>Y1</name> <operator>+</operator> <name>dr1</name></expr>]</index></name> <operator>+</operator> <name><name>g</name><index>[<expr><name>Y1</name> <operator>+</operator> <name>dg1</name></expr>]</index></name> <operator>+</operator> <name><name>b</name><index>[<expr><name>Y1</name> <operator>+</operator> <name>db1</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dest</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>r</name><index>[<expr><name>Y2</name> <operator>+</operator> <name>dr2</name></expr>]</index></name> <operator>+</operator> <name><name>g</name><index>[<expr><name>Y2</name> <operator>+</operator> <name>dg2</name></expr>]</index></name> <operator>+</operator> <name><name>b</name><index>[<expr><name>Y2</name> <operator>+</operator> <name>db2</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type>

<name>yuv2rgb_X_c_template</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>lumFilter</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>lumSrc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lumFilterSize</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>chrFilter</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>chrUSrc</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>chrVSrc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>chrFilterSize</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>alpSrc</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dstW</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hasAlpha</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><operator>(</operator><name>dstW</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>, <decl><type ref="prev"/><name>A1</name></decl>, <decl><type ref="prev"/><name>A2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>Y1</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">18</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>Y2</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">18</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>U</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">18</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>V</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">18</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>r</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>g</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>lumFilterSize</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>Y1</name> <operator>+=</operator> <name><name>lumSrc</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name><name>lumFilter</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>Y2</name> <operator>+=</operator> <name><name>lumSrc</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>lumFilter</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>chrFilterSize</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>U</name> <operator>+=</operator> <name><name>chrUSrc</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>chrFilter</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>V</name> <operator>+=</operator> <name><name>chrVSrc</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>chrFilter</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>Y1</name> <operator>&gt;&gt;=</operator> <literal type="number">19</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>Y2</name> <operator>&gt;&gt;=</operator> <literal type="number">19</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>U</name> <operator>&gt;&gt;=</operator> <literal type="number">19</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>V</name> <operator>&gt;&gt;=</operator> <literal type="number">19</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>hasAlpha</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>A1</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">18</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>A2</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">18</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>lumFilterSize</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>A1</name> <operator>+=</operator> <name><name>alpSrc</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">2</literal></expr> ]</index></name> <operator>*</operator> <name><name>lumFilter</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>A2</name> <operator>+=</operator> <name><name>alpSrc</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>lumFilter</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>A1</name> <operator>&gt;&gt;=</operator> <literal type="number">19</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>A2</name> <operator>&gt;&gt;=</operator> <literal type="number">19</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>A1</name> <operator>|</operator> <name>A2</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x100</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>A1</name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name>A1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>A2</name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name>A2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>table_rV</name><index>[<expr><name>V</name> <operator>+</operator> <name>YUVRGB_TABLE_HEADROOM</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>g</name> <operator>=</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>table_gU</name><index>[<expr><name>U</name> <operator>+</operator> <name>YUVRGB_TABLE_HEADROOM</name></expr>]</index></name> <operator>+</operator> <name><name>c</name><operator>-&gt;</operator><name>table_gV</name><index>[<expr><name>V</name> <operator>+</operator> <name>YUVRGB_TABLE_HEADROOM</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>table_bU</name><index>[<expr><name>U</name> <operator>+</operator> <name>YUVRGB_TABLE_HEADROOM</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>yuv2rgb_write</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>Y1</name></expr></argument>, <argument><expr><name>Y2</name></expr></argument>, <argument><expr><ternary><condition><expr><name>hasAlpha</name></expr> ?</condition><then> <expr><name>A1</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>, <argument><expr><ternary><condition><expr><name>hasAlpha</name></expr> ?</condition><then> <expr><name>A2</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>,

<argument><expr><name>r</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>target</name></expr></argument>, <argument><expr><name>hasAlpha</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type>

<name>yuv2rgb_2_c_template</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name><name>ubuf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name><name>vbuf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name><name>abuf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dstW</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>yalpha</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>uvalpha</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hasAlpha</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>buf0</name> <init>= <expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>buf1</name> <init>= <expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>,

<decl><type ref="prev"><modifier>*</modifier></type><name>ubuf0</name> <init>= <expr><name><name>ubuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ubuf1</name> <init>= <expr><name><name>ubuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>,

<decl><type ref="prev"><modifier>*</modifier></type><name>vbuf0</name> <init>= <expr><name><name>vbuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>vbuf1</name> <init>= <expr><name><name>vbuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>,

<decl><type ref="prev"><modifier>*</modifier></type><name>abuf0</name> <init>= <expr><ternary><condition><expr><name>hasAlpha</name></expr> ?</condition><then> <expr><name><name>abuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>,

<decl><type ref="prev"><modifier>*</modifier></type><name>abuf1</name> <init>= <expr><ternary><condition><expr><name>hasAlpha</name></expr> ?</condition><then> <expr><name><name>abuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>yalpha1</name> <init>= <expr><literal type="number">4096</literal> <operator>-</operator> <name>yalpha</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>uvalpha1</name> <init>= <expr><literal type="number">4096</literal> <operator>-</operator> <name>uvalpha</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name>yalpha</name> <operator>&lt;=</operator> <literal type="number">4096U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name>uvalpha</name> <operator>&lt;=</operator> <literal type="number">4096U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><operator>(</operator><name>dstW</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>Y1</name> <init>= <expr><operator>(</operator><name><name>buf0</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name>yalpha1</name> <operator>+</operator> <name><name>buf1</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name>yalpha</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">19</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>Y2</name> <init>= <expr><operator>(</operator><name><name>buf0</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>yalpha1</name> <operator>+</operator> <name><name>buf1</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>yalpha</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">19</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>U</name> <init>= <expr><operator>(</operator><name><name>ubuf0</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>uvalpha1</name> <operator>+</operator> <name><name>ubuf1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>uvalpha</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">19</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>V</name> <init>= <expr><operator>(</operator><name><name>vbuf0</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>uvalpha1</name> <operator>+</operator> <name><name>vbuf1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>uvalpha</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">19</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>A1</name></decl>, <decl><type ref="prev"/><name>A2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>table_rV</name><index>[<expr><name>V</name> <operator>+</operator> <name>YUVRGB_TABLE_HEADROOM</name></expr>]</index></name></expr></init></decl>,

<decl><type ref="prev"><modifier>*</modifier></type><name>g</name> <init>= <expr><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>table_gU</name><index>[<expr><name>U</name> <operator>+</operator> <name>YUVRGB_TABLE_HEADROOM</name></expr>]</index></name> <operator>+</operator> <name><name>c</name><operator>-&gt;</operator><name>table_gV</name><index>[<expr><name>V</name> <operator>+</operator> <name>YUVRGB_TABLE_HEADROOM</name></expr>]</index></name><operator>)</operator></expr></init></decl>,

<decl><type ref="prev"><modifier>*</modifier></type><name>b</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>table_bU</name><index>[<expr><name>U</name> <operator>+</operator> <name>YUVRGB_TABLE_HEADROOM</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>hasAlpha</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>A1</name> <operator>=</operator> <operator>(</operator><name><name>abuf0</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">2</literal></expr> ]</index></name> <operator>*</operator> <name>yalpha1</name> <operator>+</operator> <name><name>abuf1</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">2</literal></expr> ]</index></name> <operator>*</operator> <name>yalpha</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">19</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>A2</name> <operator>=</operator> <operator>(</operator><name><name>abuf0</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>yalpha1</name> <operator>+</operator> <name><name>abuf1</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>yalpha</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">19</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>A1</name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name>A1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>A2</name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name>A2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>yuv2rgb_write</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>Y1</name></expr></argument>, <argument><expr><name>Y2</name></expr></argument>, <argument><expr><ternary><condition><expr><name>hasAlpha</name></expr> ?</condition><then> <expr><name>A1</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>, <argument><expr><ternary><condition><expr><name>hasAlpha</name></expr> ?</condition><then> <expr><name>A2</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>,

<argument><expr><name>r</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>target</name></expr></argument>, <argument><expr><name>hasAlpha</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type>

<name>yuv2rgb_1_c_template</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>buf0</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name><name>ubuf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name><name>vbuf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>abuf0</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dstW</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>uvalpha</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>target</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>hasAlpha</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>ubuf0</name> <init>= <expr><name><name>ubuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>vbuf0</name> <init>= <expr><name><name>vbuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>uvalpha</name> <operator>&lt;</operator> <literal type="number">2048</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><operator>(</operator><name>dstW</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>Y1</name> <init>= <expr><operator>(</operator><name><name>buf0</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">2</literal></expr> ]</index></name> <operator>+</operator> <literal type="number">64</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>Y2</name> <init>= <expr><operator>(</operator><name><name>buf0</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">64</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>U</name> <init>= <expr><operator>(</operator><name><name>ubuf0</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">64</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>V</name> <init>= <expr><operator>(</operator><name><name>vbuf0</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">64</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>A1</name></decl>, <decl><type ref="prev"/><name>A2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>table_rV</name><index>[<expr><name>V</name> <operator>+</operator> <name>YUVRGB_TABLE_HEADROOM</name></expr>]</index></name></expr></init></decl>,

<decl><type ref="prev"><modifier>*</modifier></type><name>g</name> <init>= <expr><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>table_gU</name><index>[<expr><name>U</name> <operator>+</operator> <name>YUVRGB_TABLE_HEADROOM</name></expr>]</index></name> <operator>+</operator> <name><name>c</name><operator>-&gt;</operator><name>table_gV</name><index>[<expr><name>V</name> <operator>+</operator> <name>YUVRGB_TABLE_HEADROOM</name></expr>]</index></name><operator>)</operator></expr></init></decl>,

<decl><type ref="prev"><modifier>*</modifier></type><name>b</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>table_bU</name><index>[<expr><name>U</name> <operator>+</operator> <name>YUVRGB_TABLE_HEADROOM</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>hasAlpha</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>A1</name> <operator>=</operator> <name><name>abuf0</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">2</literal></expr> ]</index></name> <operator>*</operator> <literal type="number">255</literal> <operator>+</operator> <literal type="number">16384</literal> <operator>&gt;&gt;</operator> <literal type="number">15</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>A2</name> <operator>=</operator> <name><name>abuf0</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <literal type="number">255</literal> <operator>+</operator> <literal type="number">16384</literal> <operator>&gt;&gt;</operator> <literal type="number">15</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>A1</name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name>A1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>A2</name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name>A2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>yuv2rgb_write</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>Y1</name></expr></argument>, <argument><expr><name>Y2</name></expr></argument>, <argument><expr><ternary><condition><expr><name>hasAlpha</name></expr> ?</condition><then> <expr><name>A1</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>, <argument><expr><ternary><condition><expr><name>hasAlpha</name></expr> ?</condition><then> <expr><name>A2</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>,

<argument><expr><name>r</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>target</name></expr></argument>, <argument><expr><name>hasAlpha</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>ubuf1</name> <init>= <expr><name><name>ubuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>vbuf1</name> <init>= <expr><name><name>vbuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><operator>(</operator><name>dstW</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>Y1</name> <init>= <expr><operator>(</operator><name><name>buf0</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">2</literal></expr> ]</index></name> <operator>+</operator> <literal type="number">64</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>Y2</name> <init>= <expr><operator>(</operator><name><name>buf0</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">64</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>U</name> <init>= <expr><operator>(</operator><name><name>ubuf0</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>ubuf1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">128</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>V</name> <init>= <expr><operator>(</operator><name><name>vbuf0</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>vbuf1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">128</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>A1</name></decl>, <decl><type ref="prev"/><name>A2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>table_rV</name><index>[<expr><name>V</name> <operator>+</operator> <name>YUVRGB_TABLE_HEADROOM</name></expr>]</index></name></expr></init></decl>,

<decl><type ref="prev"><modifier>*</modifier></type><name>g</name> <init>= <expr><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>table_gU</name><index>[<expr><name>U</name> <operator>+</operator> <name>YUVRGB_TABLE_HEADROOM</name></expr>]</index></name> <operator>+</operator> <name><name>c</name><operator>-&gt;</operator><name>table_gV</name><index>[<expr><name>V</name> <operator>+</operator> <name>YUVRGB_TABLE_HEADROOM</name></expr>]</index></name><operator>)</operator></expr></init></decl>,

<decl><type ref="prev"><modifier>*</modifier></type><name>b</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>table_bU</name><index>[<expr><name>U</name> <operator>+</operator> <name>YUVRGB_TABLE_HEADROOM</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>hasAlpha</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>A1</name> <operator>=</operator> <operator>(</operator><name><name>abuf0</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">2</literal></expr> ]</index></name> <operator>+</operator> <literal type="number">64</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>A2</name> <operator>=</operator> <operator>(</operator><name><name>abuf0</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">64</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>A1</name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name>A1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>A2</name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name>A2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>yuv2rgb_write</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>Y1</name></expr></argument>, <argument><expr><name>Y2</name></expr></argument>, <argument><expr><ternary><condition><expr><name>hasAlpha</name></expr> ?</condition><then> <expr><name>A1</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>, <argument><expr><ternary><condition><expr><name>hasAlpha</name></expr> ?</condition><then> <expr><name>A2</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>,

<argument><expr><name>r</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>target</name></expr></argument>, <argument><expr><name>hasAlpha</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YUV2RGBWRAPPERX</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>base</name></type></parameter>, <parameter><type><name>ext</name></type></parameter>, <parameter><type><name>fmt</name></type></parameter>, <parameter><type><name>hasAlpha</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void name ##ext ##_X_c(SwsContext *c, const int16_t *lumFilter, const int16_t **lumSrc, int lumFilterSize, const int16_t *chrFilter, const int16_t **chrUSrc, const int16_t **chrVSrc, int chrFilterSize, const int16_t **alpSrc, uint8_t *dest, int dstW, int y) { name ##base ##_X_c_template(c, lumFilter, lumSrc, lumFilterSize, chrFilter, chrUSrc, chrVSrc, chrFilterSize, alpSrc, dest, dstW, y, fmt, hasAlpha); }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YUV2RGBWRAPPERX2</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>base</name></type></parameter>, <parameter><type><name>ext</name></type></parameter>, <parameter><type><name>fmt</name></type></parameter>, <parameter><type><name>hasAlpha</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>YUV2RGBWRAPPERX(name, base, ext, fmt, hasAlpha) static void name ##ext ##_2_c(SwsContext *c, const int16_t *buf[2], const int16_t *ubuf[2], const int16_t *vbuf[2], const int16_t *abuf[2], uint8_t *dest, int dstW, int yalpha, int uvalpha, int y) { name ##base ##_2_c_template(c, buf, ubuf, vbuf, abuf, dest, dstW, yalpha, uvalpha, y, fmt, hasAlpha); }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YUV2RGBWRAPPER</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>base</name></type></parameter>, <parameter><type><name>ext</name></type></parameter>, <parameter><type><name>fmt</name></type></parameter>, <parameter><type><name>hasAlpha</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>YUV2RGBWRAPPERX2(name, base, ext, fmt, hasAlpha) static void name ##ext ##_1_c(SwsContext *c, const int16_t *buf0, const int16_t *ubuf[2], const int16_t *vbuf[2], const int16_t *abuf0, uint8_t *dest, int dstW, int uvalpha, int y) { name ##base ##_1_c_template(c, buf0, ubuf, vbuf, abuf0, dest, dstW, uvalpha, y, fmt, hasAlpha); }</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_SMALL</name></expr></cpp:if>

<macro><name>YUV2RGBWRAPPER</name><argument_list>(<argument>yuv2rgb</argument>,<argument/>, <argument><literal type="number">32_1</literal></argument>, <argument>AV_PIX_FMT_RGB32_1</argument>, <argument>CONFIG_SWSCALE_ALPHA &amp;&amp; c-&gt;needAlpha</argument>)</argument_list></macro>

<macro><name>YUV2RGBWRAPPER</name><argument_list>(<argument>yuv2rgb</argument>,<argument/>, <argument><literal type="number">32</literal></argument>, <argument>AV_PIX_FMT_RGB32</argument>, <argument>CONFIG_SWSCALE_ALPHA &amp;&amp; c-&gt;needAlpha</argument>)</argument_list></macro>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_SWSCALE_ALPHA</name></expr></cpp:if>

<macro><name>YUV2RGBWRAPPER</name><argument_list>(<argument>yuv2rgb</argument>,<argument/>, <argument>a32_1</argument>, <argument>AV_PIX_FMT_RGB32_1</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>

<macro><name>YUV2RGBWRAPPER</name><argument_list>(<argument>yuv2rgb</argument>,<argument/>, <argument>a32</argument>, <argument>AV_PIX_FMT_RGB32</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<macro><name>YUV2RGBWRAPPER</name><argument_list>(<argument>yuv2rgb</argument>,<argument/>, <argument>x32_1</argument>, <argument>AV_PIX_FMT_RGB32_1</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>

<macro><name>YUV2RGBWRAPPER</name><argument_list>(<argument>yuv2rgb</argument>,<argument/>, <argument>x32</argument>, <argument>AV_PIX_FMT_RGB32</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<macro><name>YUV2RGBWRAPPER</name><argument_list>(<argument>yuv2</argument>, <argument>rgb</argument>, <argument>rgb24</argument>, <argument>AV_PIX_FMT_RGB24</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>

<macro><name>YUV2RGBWRAPPER</name><argument_list>(<argument>yuv2</argument>, <argument>rgb</argument>, <argument>bgr24</argument>, <argument>AV_PIX_FMT_BGR24</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>

<macro><name>YUV2RGBWRAPPER</name><argument_list>(<argument>yuv2rgb</argument>,<argument/>, <argument><literal type="number">16</literal></argument>, <argument>AV_PIX_FMT_RGB565</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>

<macro><name>YUV2RGBWRAPPER</name><argument_list>(<argument>yuv2rgb</argument>,<argument/>, <argument><literal type="number">15</literal></argument>, <argument>AV_PIX_FMT_RGB555</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>

<macro><name>YUV2RGBWRAPPER</name><argument_list>(<argument>yuv2rgb</argument>,<argument/>, <argument><literal type="number">12</literal></argument>, <argument>AV_PIX_FMT_RGB444</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>

<macro><name>YUV2RGBWRAPPER</name><argument_list>(<argument>yuv2rgb</argument>,<argument/>, <argument><literal type="number">8</literal></argument>, <argument>AV_PIX_FMT_RGB8</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>

<macro><name>YUV2RGBWRAPPER</name><argument_list>(<argument>yuv2rgb</argument>,<argument/>, <argument><literal type="number">4</literal></argument>, <argument>AV_PIX_FMT_RGB4</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>

<macro><name>YUV2RGBWRAPPER</name><argument_list>(<argument>yuv2rgb</argument>,<argument/>, <argument><literal type="number">4b</literal></argument>, <argument>AV_PIX_FMT_RGB4_BYTE</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>yuv2rgb_write_full</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>Y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>A</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>U</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>V</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hasAlpha</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><name>err</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>R</name></decl>, <decl><type ref="prev"/><name>G</name></decl>, <decl><type ref="prev"/><name>B</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>isrgb8</name> <init>= <expr><name>target</name> <operator>==</operator> <name>AV_PIX_FMT_BGR8</name> <operator>||</operator> <name>target</name> <operator>==</operator> <name>AV_PIX_FMT_RGB8</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>Y</name> <operator>-=</operator> <name><name>c</name><operator>-&gt;</operator><name>yuv2rgb_y_offset</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>Y</name> <operator>*=</operator> <name><name>c</name><operator>-&gt;</operator><name>yuv2rgb_y_coeff</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>Y</name> <operator>+=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">21</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>R</name> <operator>=</operator> <name>Y</name> <operator>+</operator> <name>V</name><operator>*</operator><name><name>c</name><operator>-&gt;</operator><name>yuv2rgb_v2r_coeff</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>G</name> <operator>=</operator> <name>Y</name> <operator>+</operator> <name>V</name><operator>*</operator><name><name>c</name><operator>-&gt;</operator><name>yuv2rgb_v2g_coeff</name></name> <operator>+</operator> <name>U</name><operator>*</operator><name><name>c</name><operator>-&gt;</operator><name>yuv2rgb_u2g_coeff</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>B</name> <operator>=</operator> <name>Y</name> <operator>+</operator> <name>U</name><operator>*</operator><name><name>c</name><operator>-&gt;</operator><name>yuv2rgb_u2b_coeff</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>R</name> <operator>|</operator> <name>G</name> <operator>|</operator> <name>B</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xC0000000</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>R</name> <operator>=</operator> <call><name>av_clip_uintp2</name><argument_list>(<argument><expr><name>R</name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>G</name> <operator>=</operator> <call><name>av_clip_uintp2</name><argument_list>(<argument><expr><name>G</name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>B</name> <operator>=</operator> <call><name>av_clip_uintp2</name><argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<switch>switch<condition>(<expr><name>target</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_PIX_FMT_ARGB</name></expr>:</case>

<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>hasAlpha</name></expr> ?</condition><then> <expr><name>A</name></expr> </then><else>: <expr><literal type="number">255</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>R</name> <operator>&gt;&gt;</operator> <literal type="number">22</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>G</name> <operator>&gt;&gt;</operator> <literal type="number">22</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>B</name> <operator>&gt;&gt;</operator> <literal type="number">22</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_RGB24</name></expr>:</case>

<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>R</name> <operator>&gt;&gt;</operator> <literal type="number">22</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>G</name> <operator>&gt;&gt;</operator> <literal type="number">22</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>B</name> <operator>&gt;&gt;</operator> <literal type="number">22</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_RGBA</name></expr>:</case>

<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>R</name> <operator>&gt;&gt;</operator> <literal type="number">22</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>G</name> <operator>&gt;&gt;</operator> <literal type="number">22</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>B</name> <operator>&gt;&gt;</operator> <literal type="number">22</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>hasAlpha</name></expr> ?</condition><then> <expr><name>A</name></expr> </then><else>: <expr><literal type="number">255</literal></expr></else></ternary></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_ABGR</name></expr>:</case>

<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>hasAlpha</name></expr> ?</condition><then> <expr><name>A</name></expr> </then><else>: <expr><literal type="number">255</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>B</name> <operator>&gt;&gt;</operator> <literal type="number">22</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>G</name> <operator>&gt;&gt;</operator> <literal type="number">22</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>R</name> <operator>&gt;&gt;</operator> <literal type="number">22</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_BGR24</name></expr>:</case>

<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>B</name> <operator>&gt;&gt;</operator> <literal type="number">22</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>G</name> <operator>&gt;&gt;</operator> <literal type="number">22</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>R</name> <operator>&gt;&gt;</operator> <literal type="number">22</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_BGRA</name></expr>:</case>

<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>B</name> <operator>&gt;&gt;</operator> <literal type="number">22</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>G</name> <operator>&gt;&gt;</operator> <literal type="number">22</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>R</name> <operator>&gt;&gt;</operator> <literal type="number">22</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>hasAlpha</name></expr> ?</condition><then> <expr><name>A</name></expr> </then><else>: <expr><literal type="number">255</literal></expr></else></ternary></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_BGR4_BYTE</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_RGB4_BYTE</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_BGR8</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_RGB8</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>,<decl><type ref="prev"/><name>g</name></decl>,<decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>dither</name></name></expr>)</condition> <block>{<block_content>

<default>default:</default>

<case>case <expr><name>SWS_DITHER_AUTO</name></expr>:</case>

<case>case <expr><name>SWS_DITHER_ED</name></expr>:</case>

<expr_stmt><expr><name>R</name> <operator>&gt;&gt;=</operator> <literal type="number">22</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>G</name> <operator>&gt;&gt;=</operator> <literal type="number">22</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>B</name> <operator>&gt;&gt;=</operator> <literal type="number">22</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>R</name> <operator>+=</operator> <operator>(</operator><literal type="number">7</literal><operator>*</operator><name><name>err</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal><operator>*</operator><name><name>c</name><operator>-&gt;</operator><name>dither_error</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">5</literal><operator>*</operator><name><name>c</name><operator>-&gt;</operator><name>dither_error</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">3</literal><operator>*</operator><name><name>c</name><operator>-&gt;</operator><name>dither_error</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>G</name> <operator>+=</operator> <operator>(</operator><literal type="number">7</literal><operator>*</operator><name><name>err</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal><operator>*</operator><name><name>c</name><operator>-&gt;</operator><name>dither_error</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">5</literal><operator>*</operator><name><name>c</name><operator>-&gt;</operator><name>dither_error</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">3</literal><operator>*</operator><name><name>c</name><operator>-&gt;</operator><name>dither_error</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>B</name> <operator>+=</operator> <operator>(</operator><literal type="number">7</literal><operator>*</operator><name><name>err</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal><operator>*</operator><name><name>c</name><operator>-&gt;</operator><name>dither_error</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">5</literal><operator>*</operator><name><name>c</name><operator>-&gt;</operator><name>dither_error</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">3</literal><operator>*</operator><name><name>c</name><operator>-&gt;</operator><name>dither_error</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>dither_error</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>err</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>dither_error</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>err</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>dither_error</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>err</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <name>R</name> <operator>&gt;&gt;</operator> <operator>(</operator><ternary><condition><expr><name>isrgb8</name></expr> ?</condition><then> <expr><literal type="number">5</literal></expr> </then><else>: <expr><literal type="number">7</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>g</name> <operator>=</operator> <name>G</name> <operator>&gt;&gt;</operator> <operator>(</operator><ternary><condition><expr><name>isrgb8</name></expr> ?</condition><then> <expr><literal type="number">5</literal></expr> </then><else>: <expr><literal type="number">6</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <name>B</name> <operator>&gt;&gt;</operator> <operator>(</operator><ternary><condition><expr><name>isrgb8</name></expr> ?</condition><then> <expr><literal type="number">6</literal></expr> </then><else>: <expr><literal type="number">7</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>isrgb8</name></expr> ?</condition><then> <expr><literal type="number">7</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>g</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>isrgb8</name></expr> ?</condition><then> <expr><literal type="number">7</literal></expr> </then><else>: <expr><literal type="number">3</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>isrgb8</name></expr> ?</condition><then> <expr><literal type="number">3</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>err</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>R</name> <operator>-</operator> <name>r</name><operator>*</operator><operator>(</operator><ternary><condition><expr><name>isrgb8</name></expr> ?</condition><then> <expr><literal type="number">36</literal></expr> </then><else>: <expr><literal type="number">255</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>err</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>G</name> <operator>-</operator> <name>g</name><operator>*</operator><operator>(</operator><ternary><condition><expr><name>isrgb8</name></expr> ?</condition><then> <expr><literal type="number">36</literal></expr> </then><else>: <expr><literal type="number">85</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>err</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>B</name> <operator>-</operator> <name>b</name><operator>*</operator><operator>(</operator><ternary><condition><expr><name>isrgb8</name></expr> ?</condition><then> <expr><literal type="number">85</literal></expr> </then><else>: <expr><literal type="number">255</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SWS_DITHER_A_DITHER</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>isrgb8</name></expr>)</condition> <block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_DITHER</name><parameter_list>(<parameter><type><name>u</name></type></parameter>,<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((((u)+((v)*236))*119)&amp;0xff))</cpp:value></cpp:define>

<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>R</name> <operator>&gt;&gt;</operator> <literal type="number">19</literal><operator>)</operator> <operator>+</operator> <call><name>A_DITHER</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call> <operator>-</operator><literal type="number">96</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>g</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>G</name> <operator>&gt;&gt;</operator> <literal type="number">19</literal><operator>)</operator> <operator>+</operator> <call><name>A_DITHER</name><argument_list>(<argument><expr><name>i</name> <operator>+</operator> <literal type="number">17</literal></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">96</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>B</name> <operator>&gt;&gt;</operator> <literal type="number">20</literal><operator>)</operator> <operator>+</operator> <call><name>A_DITHER</name><argument_list>(<argument><expr><name>i</name> <operator>+</operator> <literal type="number">17</literal><operator>*</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call> <operator>-</operator><literal type="number">96</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>av_clip_uintp2</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>g</name> <operator>=</operator> <call><name>av_clip_uintp2</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>av_clip_uintp2</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>R</name> <operator>&gt;&gt;</operator> <literal type="number">21</literal><operator>)</operator> <operator>+</operator> <call><name>A_DITHER</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">256</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>g</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>G</name> <operator>&gt;&gt;</operator> <literal type="number">19</literal><operator>)</operator> <operator>+</operator> <call><name>A_DITHER</name><argument_list>(<argument><expr><name>i</name> <operator>+</operator> <literal type="number">17</literal></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">256</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>B</name> <operator>&gt;&gt;</operator> <literal type="number">21</literal><operator>)</operator> <operator>+</operator> <call><name>A_DITHER</name><argument_list>(<argument><expr><name>i</name> <operator>+</operator> <literal type="number">17</literal><operator>*</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">256</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>av_clip_uintp2</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>g</name> <operator>=</operator> <call><name>av_clip_uintp2</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>av_clip_uintp2</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>SWS_DITHER_X_DITHER</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>isrgb8</name></expr>)</condition> <block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X_DITHER</name><parameter_list>(<parameter><type><name>u</name></type></parameter>,<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((((u)^((v)*237))*181)&amp;0x1ff)/2)</cpp:value></cpp:define>

<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>R</name> <operator>&gt;&gt;</operator> <literal type="number">19</literal><operator>)</operator> <operator>+</operator> <call><name>X_DITHER</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">96</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>g</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>G</name> <operator>&gt;&gt;</operator> <literal type="number">19</literal><operator>)</operator> <operator>+</operator> <call><name>X_DITHER</name><argument_list>(<argument><expr><name>i</name> <operator>+</operator> <literal type="number">17</literal></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">96</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>B</name> <operator>&gt;&gt;</operator> <literal type="number">20</literal><operator>)</operator> <operator>+</operator> <call><name>X_DITHER</name><argument_list>(<argument><expr><name>i</name> <operator>+</operator> <literal type="number">17</literal><operator>*</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">96</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>av_clip_uintp2</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>g</name> <operator>=</operator> <call><name>av_clip_uintp2</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>av_clip_uintp2</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>R</name> <operator>&gt;&gt;</operator> <literal type="number">21</literal><operator>)</operator> <operator>+</operator> <call><name>X_DITHER</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">256</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>g</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>G</name> <operator>&gt;&gt;</operator> <literal type="number">19</literal><operator>)</operator> <operator>+</operator> <call><name>X_DITHER</name><argument_list>(<argument><expr><name>i</name> <operator>+</operator> <literal type="number">17</literal></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">256</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>B</name> <operator>&gt;&gt;</operator> <literal type="number">21</literal><operator>)</operator> <operator>+</operator> <call><name>X_DITHER</name><argument_list>(<argument><expr><name>i</name> <operator>+</operator> <literal type="number">17</literal><operator>*</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">256</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>av_clip_uintp2</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>g</name> <operator>=</operator> <call><name>av_clip_uintp2</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>av_clip_uintp2</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if<condition>(<expr><name>target</name> <operator>==</operator> <name>AV_PIX_FMT_BGR4_BYTE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>r</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>g</name> <operator>+</operator> <literal type="number">8</literal><operator>*</operator><name>b</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>target</name> <operator>==</operator> <name>AV_PIX_FMT_RGB4_BYTE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>b</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>g</name> <operator>+</operator> <literal type="number">8</literal><operator>*</operator><name>r</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>target</name> <operator>==</operator> <name>AV_PIX_FMT_BGR8</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>r</name> <operator>+</operator> <literal type="number">8</literal><operator>*</operator><name>g</name> <operator>+</operator> <literal type="number">64</literal><operator>*</operator><name>b</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>target</name> <operator>==</operator> <name>AV_PIX_FMT_RGB8</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>b</name> <operator>+</operator> <literal type="number">4</literal><operator>*</operator><name>g</name> <operator>+</operator> <literal type="number">32</literal><operator>*</operator><name>r</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break></block_content>}</block>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type>

<name>yuv2rgb_full_X_c_template</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>lumFilter</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>lumSrc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lumFilterSize</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>chrFilter</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>chrUSrc</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>chrVSrc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>chrFilterSize</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>alpSrc</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>dstW</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hasAlpha</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>step</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>target</name> <operator>==</operator> <name>AV_PIX_FMT_RGB24</name> <operator>||</operator> <name>target</name> <operator>==</operator> <name>AV_PIX_FMT_BGR24</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">3</literal></expr> </then><else>: <expr><literal type="number">4</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>err</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>A</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<if_stmt><if>if<condition>( <expr><name>target</name> <operator>==</operator> <name>AV_PIX_FMT_BGR4_BYTE</name> <operator>||</operator> <name>target</name> <operator>==</operator> <name>AV_PIX_FMT_RGB4_BYTE</name>

<operator>||</operator> <name>target</name> <operator>==</operator> <name>AV_PIX_FMT_BGR8</name> <operator>||</operator> <name>target</name> <operator>==</operator> <name>AV_PIX_FMT_RGB8</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>step</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dstW</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>Y</name> <init>= <expr><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">9</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>U</name> <init>= <expr><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">9</literal><operator>)</operator><operator>-</operator><operator>(</operator><literal type="number">128</literal> <operator>&lt;&lt;</operator> <literal type="number">19</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>V</name> <init>= <expr><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">9</literal><operator>)</operator><operator>-</operator><operator>(</operator><literal type="number">128</literal> <operator>&lt;&lt;</operator> <literal type="number">19</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>lumFilterSize</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>Y</name> <operator>+=</operator> <name><name>lumSrc</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>lumFilter</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>chrFilterSize</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>U</name> <operator>+=</operator> <name><name>chrUSrc</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>chrFilter</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>V</name> <operator>+=</operator> <name><name>chrVSrc</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>chrFilter</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>Y</name> <operator>&gt;&gt;=</operator> <literal type="number">10</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>U</name> <operator>&gt;&gt;=</operator> <literal type="number">10</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>V</name> <operator>&gt;&gt;=</operator> <literal type="number">10</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>hasAlpha</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>A</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">18</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>lumFilterSize</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>A</name> <operator>+=</operator> <name><name>alpSrc</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>lumFilter</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>A</name> <operator>&gt;&gt;=</operator> <literal type="number">19</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>A</name> <operator>&amp;</operator> <literal type="number">0x100</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>A</name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>yuv2rgb_write_full</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>Y</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>U</name></expr></argument>, <argument><expr><name>V</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>target</name></expr></argument>, <argument><expr><name>hasAlpha</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dest</name> <operator>+=</operator> <name>step</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>dither_error</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>err</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>dither_error</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>err</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>dither_error</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>err</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type>

<name>yuv2rgb_full_2_c_template</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name><name>ubuf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name><name>vbuf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name><name>abuf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dstW</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>yalpha</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>uvalpha</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hasAlpha</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>buf0</name> <init>= <expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>buf1</name> <init>= <expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>,

<decl><type ref="prev"><modifier>*</modifier></type><name>ubuf0</name> <init>= <expr><name><name>ubuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ubuf1</name> <init>= <expr><name><name>ubuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>,

<decl><type ref="prev"><modifier>*</modifier></type><name>vbuf0</name> <init>= <expr><name><name>vbuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>vbuf1</name> <init>= <expr><name><name>vbuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>,

<decl><type ref="prev"><modifier>*</modifier></type><name>abuf0</name> <init>= <expr><ternary><condition><expr><name>hasAlpha</name></expr> ?</condition><then> <expr><name><name>abuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>,

<decl><type ref="prev"><modifier>*</modifier></type><name>abuf1</name> <init>= <expr><ternary><condition><expr><name>hasAlpha</name></expr> ?</condition><then> <expr><name><name>abuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>yalpha1</name> <init>= <expr><literal type="number">4096</literal> <operator>-</operator> <name>yalpha</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>uvalpha1</name> <init>= <expr><literal type="number">4096</literal> <operator>-</operator> <name>uvalpha</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>step</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>target</name> <operator>==</operator> <name>AV_PIX_FMT_RGB24</name> <operator>||</operator> <name>target</name> <operator>==</operator> <name>AV_PIX_FMT_BGR24</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">3</literal></expr> </then><else>: <expr><literal type="number">4</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>err</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>A</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name>yalpha</name> <operator>&lt;=</operator> <literal type="number">4096U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name>uvalpha</name> <operator>&lt;=</operator> <literal type="number">4096U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>target</name> <operator>==</operator> <name>AV_PIX_FMT_BGR4_BYTE</name> <operator>||</operator> <name>target</name> <operator>==</operator> <name>AV_PIX_FMT_RGB4_BYTE</name>

<operator>||</operator> <name>target</name> <operator>==</operator> <name>AV_PIX_FMT_BGR8</name> <operator>||</operator> <name>target</name> <operator>==</operator> <name>AV_PIX_FMT_RGB8</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>step</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dstW</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>Y</name> <init>= <expr><operator>(</operator> <name><name>buf0</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>yalpha1</name> <operator>+</operator> <name><name>buf1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>yalpha</name> <operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">10</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>U</name> <init>= <expr><operator>(</operator><name><name>ubuf0</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>uvalpha1</name> <operator>+</operator> <name><name>ubuf1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>uvalpha</name><operator>-</operator><operator>(</operator><literal type="number">128</literal> <operator>&lt;&lt;</operator> <literal type="number">19</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">10</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>V</name> <init>= <expr><operator>(</operator><name><name>vbuf0</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>uvalpha1</name> <operator>+</operator> <name><name>vbuf1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>uvalpha</name><operator>-</operator><operator>(</operator><literal type="number">128</literal> <operator>&lt;&lt;</operator> <literal type="number">19</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">10</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>hasAlpha</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>A</name> <operator>=</operator> <operator>(</operator><name><name>abuf0</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>yalpha1</name> <operator>+</operator> <name><name>abuf1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>yalpha</name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">18</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">19</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>A</name> <operator>&amp;</operator> <literal type="number">0x100</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>A</name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>yuv2rgb_write_full</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>Y</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>U</name></expr></argument>, <argument><expr><name>V</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>target</name></expr></argument>, <argument><expr><name>hasAlpha</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dest</name> <operator>+=</operator> <name>step</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>dither_error</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>err</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>dither_error</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>err</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>dither_error</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>err</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type>

<name>yuv2rgb_full_1_c_template</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>buf0</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name><name>ubuf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name><name>vbuf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>abuf0</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dstW</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>uvalpha</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>target</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>hasAlpha</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>ubuf0</name> <init>= <expr><name><name>ubuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>vbuf0</name> <init>= <expr><name><name>vbuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>step</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>target</name> <operator>==</operator> <name>AV_PIX_FMT_RGB24</name> <operator>||</operator> <name>target</name> <operator>==</operator> <name>AV_PIX_FMT_BGR24</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">3</literal></expr> </then><else>: <expr><literal type="number">4</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>err</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>target</name> <operator>==</operator> <name>AV_PIX_FMT_BGR4_BYTE</name> <operator>||</operator> <name>target</name> <operator>==</operator> <name>AV_PIX_FMT_RGB4_BYTE</name>

<operator>||</operator> <name>target</name> <operator>==</operator> <name>AV_PIX_FMT_BGR8</name> <operator>||</operator> <name>target</name> <operator>==</operator> <name>AV_PIX_FMT_RGB8</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>step</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>uvalpha</name> <operator>&lt;</operator> <literal type="number">2048</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>A</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dstW</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>Y</name> <init>= <expr><name><name>buf0</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>U</name> <init>= <expr><operator>(</operator><name><name>ubuf0</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <operator>(</operator><literal type="number">128</literal><operator>&lt;&lt;</operator><literal type="number">7</literal><operator>)</operator><operator>)</operator> <operator>*</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>V</name> <init>= <expr><operator>(</operator><name><name>vbuf0</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <operator>(</operator><literal type="number">128</literal><operator>&lt;&lt;</operator><literal type="number">7</literal><operator>)</operator><operator>)</operator> <operator>*</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>hasAlpha</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>A</name> <operator>=</operator> <operator>(</operator><name><name>abuf0</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">64</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>A</name> <operator>&amp;</operator> <literal type="number">0x100</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>A</name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>yuv2rgb_write_full</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>Y</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>U</name></expr></argument>, <argument><expr><name>V</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>target</name></expr></argument>, <argument><expr><name>hasAlpha</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dest</name> <operator>+=</operator> <name>step</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>ubuf1</name> <init>= <expr><name><name>ubuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>vbuf1</name> <init>= <expr><name><name>vbuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>A</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dstW</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>Y</name> <init>= <expr><name><name>buf0</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>U</name> <init>= <expr><operator>(</operator><name><name>ubuf0</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>ubuf1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <operator>(</operator><literal type="number">128</literal><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator><operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>V</name> <init>= <expr><operator>(</operator><name><name>vbuf0</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>vbuf1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <operator>(</operator><literal type="number">128</literal><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator><operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>hasAlpha</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>A</name> <operator>=</operator> <operator>(</operator><name><name>abuf0</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">64</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>A</name> <operator>&amp;</operator> <literal type="number">0x100</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>A</name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>yuv2rgb_write_full</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>Y</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>U</name></expr></argument>, <argument><expr><name>V</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>target</name></expr></argument>, <argument><expr><name>hasAlpha</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dest</name> <operator>+=</operator> <name>step</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>dither_error</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>err</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>dither_error</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>err</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>dither_error</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>err</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_SMALL</name></expr></cpp:if>

<macro><name>YUV2RGBWRAPPER</name><argument_list>(<argument>yuv2</argument>, <argument>rgb_full</argument>, <argument>bgra32_full</argument>, <argument>AV_PIX_FMT_BGRA</argument>, <argument>CONFIG_SWSCALE_ALPHA &amp;&amp; c-&gt;needAlpha</argument>)</argument_list></macro>

<macro><name>YUV2RGBWRAPPER</name><argument_list>(<argument>yuv2</argument>, <argument>rgb_full</argument>, <argument>abgr32_full</argument>, <argument>AV_PIX_FMT_ABGR</argument>, <argument>CONFIG_SWSCALE_ALPHA &amp;&amp; c-&gt;needAlpha</argument>)</argument_list></macro>

<macro><name>YUV2RGBWRAPPER</name><argument_list>(<argument>yuv2</argument>, <argument>rgb_full</argument>, <argument>rgba32_full</argument>, <argument>AV_PIX_FMT_RGBA</argument>, <argument>CONFIG_SWSCALE_ALPHA &amp;&amp; c-&gt;needAlpha</argument>)</argument_list></macro>

<macro><name>YUV2RGBWRAPPER</name><argument_list>(<argument>yuv2</argument>, <argument>rgb_full</argument>, <argument>argb32_full</argument>, <argument>AV_PIX_FMT_ARGB</argument>, <argument>CONFIG_SWSCALE_ALPHA &amp;&amp; c-&gt;needAlpha</argument>)</argument_list></macro>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_SWSCALE_ALPHA</name></expr></cpp:if>

<macro><name>YUV2RGBWRAPPER</name><argument_list>(<argument>yuv2</argument>, <argument>rgb_full</argument>, <argument>bgra32_full</argument>, <argument>AV_PIX_FMT_BGRA</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>

<macro><name>YUV2RGBWRAPPER</name><argument_list>(<argument>yuv2</argument>, <argument>rgb_full</argument>, <argument>abgr32_full</argument>, <argument>AV_PIX_FMT_ABGR</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>

<macro><name>YUV2RGBWRAPPER</name><argument_list>(<argument>yuv2</argument>, <argument>rgb_full</argument>, <argument>rgba32_full</argument>, <argument>AV_PIX_FMT_RGBA</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>

<macro><name>YUV2RGBWRAPPER</name><argument_list>(<argument>yuv2</argument>, <argument>rgb_full</argument>, <argument>argb32_full</argument>, <argument>AV_PIX_FMT_ARGB</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<macro><name>YUV2RGBWRAPPER</name><argument_list>(<argument>yuv2</argument>, <argument>rgb_full</argument>, <argument>bgrx32_full</argument>, <argument>AV_PIX_FMT_BGRA</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>

<macro><name>YUV2RGBWRAPPER</name><argument_list>(<argument>yuv2</argument>, <argument>rgb_full</argument>, <argument>xbgr32_full</argument>, <argument>AV_PIX_FMT_ABGR</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>

<macro><name>YUV2RGBWRAPPER</name><argument_list>(<argument>yuv2</argument>, <argument>rgb_full</argument>, <argument>rgbx32_full</argument>, <argument>AV_PIX_FMT_RGBA</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>

<macro><name>YUV2RGBWRAPPER</name><argument_list>(<argument>yuv2</argument>, <argument>rgb_full</argument>, <argument>xrgb32_full</argument>, <argument>AV_PIX_FMT_ARGB</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<macro><name>YUV2RGBWRAPPER</name><argument_list>(<argument>yuv2</argument>, <argument>rgb_full</argument>, <argument>bgr24_full</argument>, <argument>AV_PIX_FMT_BGR24</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>

<macro><name>YUV2RGBWRAPPER</name><argument_list>(<argument>yuv2</argument>, <argument>rgb_full</argument>, <argument>rgb24_full</argument>, <argument>AV_PIX_FMT_RGB24</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>

<macro><name>YUV2RGBWRAPPER</name><argument_list>(<argument>yuv2</argument>, <argument>rgb_full</argument>, <argument>bgr4_byte_full</argument>, <argument>AV_PIX_FMT_BGR4_BYTE</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>

<macro><name>YUV2RGBWRAPPER</name><argument_list>(<argument>yuv2</argument>, <argument>rgb_full</argument>, <argument>rgb4_byte_full</argument>, <argument>AV_PIX_FMT_RGB4_BYTE</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>

<macro><name>YUV2RGBWRAPPER</name><argument_list>(<argument>yuv2</argument>, <argument>rgb_full</argument>, <argument>bgr8_full</argument>, <argument>AV_PIX_FMT_BGR8</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>

<macro><name>YUV2RGBWRAPPER</name><argument_list>(<argument>yuv2</argument>, <argument>rgb_full</argument>, <argument>rgb8_full</argument>, <argument>AV_PIX_FMT_RGB8</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>yuv2gbrp_full_X_c</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>lumFilter</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>lumSrc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lumFilterSize</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>chrFilter</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>chrUSrc</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>chrVSrc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>chrFilterSize</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>alpSrc</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>dest</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>dstW</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>dstFormat</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>hasAlpha</name> <init>= <expr><operator>(</operator><name><name>desc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PIX_FMT_FLAG_ALPHA</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>alpSrc</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>dest16</name> <init>= <expr><operator>(</operator><name>uint16_t</name><operator>*</operator><operator>*</operator><operator>)</operator><name>dest</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>SH</name> <init>= <expr><literal type="number">22</literal> <operator>+</operator> <literal type="number">8</literal> <operator>-</operator> <name><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>depth</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>A</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dstW</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>Y</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">9</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>U</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">9</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><literal type="number">128</literal> <operator>&lt;&lt;</operator> <literal type="number">19</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>V</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">9</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><literal type="number">128</literal> <operator>&lt;&lt;</operator> <literal type="number">19</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>R</name></decl>, <decl><type ref="prev"/><name>G</name></decl>, <decl><type ref="prev"/><name>B</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>lumFilterSize</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>Y</name> <operator>+=</operator> <name><name>lumSrc</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>lumFilter</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>chrFilterSize</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>U</name> <operator>+=</operator> <name><name>chrUSrc</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>chrFilter</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>V</name> <operator>+=</operator> <name><name>chrVSrc</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>chrFilter</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>Y</name> <operator>&gt;&gt;=</operator> <literal type="number">10</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>U</name> <operator>&gt;&gt;=</operator> <literal type="number">10</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>V</name> <operator>&gt;&gt;=</operator> <literal type="number">10</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>hasAlpha</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>A</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">18</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>lumFilterSize</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>A</name> <operator>+=</operator> <name><name>alpSrc</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>lumFilter</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>A</name> <operator>&amp;</operator> <literal type="number">0xF8000000</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>A</name> <operator>=</operator> <call><name>av_clip_uintp2</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="number">27</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>Y</name> <operator>-=</operator> <name><name>c</name><operator>-&gt;</operator><name>yuv2rgb_y_offset</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>Y</name> <operator>*=</operator> <name><name>c</name><operator>-&gt;</operator><name>yuv2rgb_y_coeff</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>Y</name> <operator>+=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>SH</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>R</name> <operator>=</operator> <name>Y</name> <operator>+</operator> <name>V</name> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>yuv2rgb_v2r_coeff</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>G</name> <operator>=</operator> <name>Y</name> <operator>+</operator> <name>V</name> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>yuv2rgb_v2g_coeff</name></name> <operator>+</operator> <name>U</name> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>yuv2rgb_u2g_coeff</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>B</name> <operator>=</operator> <name>Y</name> <operator>+</operator> <name>U</name> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>yuv2rgb_u2b_coeff</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>R</name> <operator>|</operator> <name>G</name> <operator>|</operator> <name>B</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xC0000000</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>R</name> <operator>=</operator> <call><name>av_clip_uintp2</name><argument_list>(<argument><expr><name>R</name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>G</name> <operator>=</operator> <call><name>av_clip_uintp2</name><argument_list>(<argument><expr><name>G</name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>B</name> <operator>=</operator> <call><name>av_clip_uintp2</name><argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>SH</name> <operator>!=</operator> <literal type="number">22</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>dest16</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>G</name> <operator>&gt;&gt;</operator> <name>SH</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dest16</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>B</name> <operator>&gt;&gt;</operator> <name>SH</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dest16</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>R</name> <operator>&gt;&gt;</operator> <name>SH</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>hasAlpha</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dest16</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>A</name> <operator>&gt;&gt;</operator> <operator>(</operator><name>SH</name> <operator>-</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>G</name> <operator>&gt;&gt;</operator> <literal type="number">22</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>B</name> <operator>&gt;&gt;</operator> <literal type="number">22</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>R</name> <operator>&gt;&gt;</operator> <literal type="number">22</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>hasAlpha</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>A</name> <operator>&gt;&gt;</operator> <literal type="number">19</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>SH</name> <operator>!=</operator> <literal type="number">22</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><call><name>isBE</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>dstFormat</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <operator>(</operator><operator>!</operator><name>HAVE_BIGENDIAN</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dstW</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>dest16</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_bswap16</name><argument_list>(<argument><expr><name><name>dest16</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dest16</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_bswap16</name><argument_list>(<argument><expr><name><name>dest16</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dest16</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_bswap16</name><argument_list>(<argument><expr><name><name>dest16</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>hasAlpha</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dest16</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_bswap16</name><argument_list>(<argument><expr><name><name>dest16</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>yuv2gbrp16_full_X_c</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>lumFilter</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>lumSrcx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lumFilterSize</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>chrFilter</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>chrUSrcx</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>chrVSrcx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>chrFilterSize</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>alpSrcx</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>dest</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>dstW</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>dstFormat</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>hasAlpha</name> <init>= <expr><operator>(</operator><name><name>desc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PIX_FMT_FLAG_ALPHA</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>alpSrcx</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>dest16</name> <init>= <expr><operator>(</operator><name>uint16_t</name><operator>*</operator><operator>*</operator><operator>)</operator><name>dest</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>lumSrc</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>int32_t</name><operator>*</operator><operator>*</operator><operator>)</operator><name>lumSrcx</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>chrUSrc</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>int32_t</name><operator>*</operator><operator>*</operator><operator>)</operator><name>chrUSrcx</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>chrVSrc</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>int32_t</name><operator>*</operator><operator>*</operator><operator>)</operator><name>chrVSrcx</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>alpSrc</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>int32_t</name><operator>*</operator><operator>*</operator><operator>)</operator><name>alpSrcx</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dstW</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>Y</name> <init>= <expr><operator>-</operator><literal type="number">0x40000000</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>U</name> <init>= <expr><operator>-</operator><operator>(</operator><literal type="number">128</literal> <operator>&lt;&lt;</operator> <literal type="number">23</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>V</name> <init>= <expr><operator>-</operator><operator>(</operator><literal type="number">128</literal> <operator>&lt;&lt;</operator> <literal type="number">23</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>R</name></decl>, <decl><type ref="prev"/><name>G</name></decl>, <decl><type ref="prev"/><name>B</name></decl>, <decl><type ref="prev"/><name>A</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>lumFilterSize</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>Y</name> <operator>+=</operator> <name><name>lumSrc</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>lumFilter</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>chrFilterSize</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>U</name> <operator>+=</operator> <name><name>chrUSrc</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>chrFilter</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>V</name> <operator>+=</operator> <name><name>chrVSrc</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>chrFilter</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>Y</name> <operator>&gt;&gt;=</operator> <literal type="number">14</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>Y</name> <operator>+=</operator> <literal type="number">0x10000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>U</name> <operator>&gt;&gt;=</operator> <literal type="number">14</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>V</name> <operator>&gt;&gt;=</operator> <literal type="number">14</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>hasAlpha</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>A</name> <operator>=</operator> <operator>-</operator><literal type="number">0x40000000</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>lumFilterSize</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>A</name> <operator>+=</operator> <name><name>alpSrc</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>lumFilter</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>A</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>A</name> <operator>+=</operator> <literal type="number">0x20002000</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>Y</name> <operator>-=</operator> <name><name>c</name><operator>-&gt;</operator><name>yuv2rgb_y_offset</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>Y</name> <operator>*=</operator> <name><name>c</name><operator>-&gt;</operator><name>yuv2rgb_y_coeff</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>Y</name> <operator>+=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>R</name> <operator>=</operator> <name>V</name> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>yuv2rgb_v2r_coeff</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>G</name> <operator>=</operator> <name>V</name> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>yuv2rgb_v2g_coeff</name></name> <operator>+</operator> <name>U</name> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>yuv2rgb_u2g_coeff</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>B</name> <operator>=</operator> <name>U</name> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>yuv2rgb_u2b_coeff</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>R</name> <operator>=</operator> <call><name>av_clip_uintp2</name><argument_list>(<argument><expr><name>Y</name> <operator>+</operator> <name>R</name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>G</name> <operator>=</operator> <call><name>av_clip_uintp2</name><argument_list>(<argument><expr><name>Y</name> <operator>+</operator> <name>G</name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>B</name> <operator>=</operator> <call><name>av_clip_uintp2</name><argument_list>(<argument><expr><name>Y</name> <operator>+</operator> <name>B</name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dest16</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>G</name> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dest16</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>B</name> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dest16</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>R</name> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>hasAlpha</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dest16</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uintp2</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><call><name>isBE</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>dstFormat</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <operator>(</operator><operator>!</operator><name>HAVE_BIGENDIAN</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dstW</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>dest16</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_bswap16</name><argument_list>(<argument><expr><name><name>dest16</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dest16</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_bswap16</name><argument_list>(<argument><expr><name><name>dest16</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dest16</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_bswap16</name><argument_list>(<argument><expr><name><name>dest16</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>hasAlpha</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dest16</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_bswap16</name><argument_list>(<argument><expr><name><name>dest16</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>yuv2ya8_1_c</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>buf0</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name><name>ubuf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name><name>vbuf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>abuf0</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dstW</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>uvalpha</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>hasAlpha</name> <init>= <expr><operator>!</operator><operator>!</operator><name>abuf0</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dstW</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>Y</name> <init>= <expr><operator>(</operator><name><name>buf0</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">64</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>A</name></decl>;</decl_stmt>

<expr_stmt><expr><name>Y</name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name>Y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>hasAlpha</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>A</name> <operator>=</operator> <operator>(</operator><name><name>abuf0</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">64</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>A</name> <operator>&amp;</operator> <literal type="number">0x100</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>A</name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>dest</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">2</literal></expr> ]</index></name> <operator>=</operator> <name>Y</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dest</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>hasAlpha</name></expr> ?</condition><then> <expr><name>A</name></expr> </then><else>: <expr><literal type="number">255</literal></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>yuv2ya8_2_c</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name><name>ubuf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name><name>vbuf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name><name>abuf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dstW</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>yalpha</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>uvalpha</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>hasAlpha</name> <init>= <expr><name>abuf</name> <operator>&amp;&amp;</operator> <name><name>abuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>abuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>buf0</name> <init>= <expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>buf1</name> <init>= <expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>,

<decl><type ref="prev"><modifier>*</modifier></type><name>abuf0</name> <init>= <expr><ternary><condition><expr><name>hasAlpha</name></expr> ?</condition><then> <expr><name><name>abuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>,

<decl><type ref="prev"><modifier>*</modifier></type><name>abuf1</name> <init>= <expr><ternary><condition><expr><name>hasAlpha</name></expr> ?</condition><then> <expr><name><name>abuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>yalpha1</name> <init>= <expr><literal type="number">4096</literal> <operator>-</operator> <name>yalpha</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name>yalpha</name> <operator>&lt;=</operator> <literal type="number">4096U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dstW</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>Y</name> <init>= <expr><operator>(</operator><name><name>buf0</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>yalpha1</name> <operator>+</operator> <name><name>buf1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>yalpha</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">19</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>A</name></decl>;</decl_stmt>

<expr_stmt><expr><name>Y</name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name>Y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>hasAlpha</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>A</name> <operator>=</operator> <operator>(</operator><name><name>abuf0</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>yalpha1</name> <operator>+</operator> <name><name>abuf1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>yalpha</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">19</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>A</name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>dest</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">2</literal></expr> ]</index></name> <operator>=</operator> <name>Y</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dest</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>hasAlpha</name></expr> ?</condition><then> <expr><name>A</name></expr> </then><else>: <expr><literal type="number">255</literal></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>yuv2ya8_X_c</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>lumFilter</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>lumSrc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lumFilterSize</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>chrFilter</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>chrUSrc</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>chrVSrc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>chrFilterSize</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>alpSrc</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dstW</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>hasAlpha</name> <init>= <expr><operator>!</operator><operator>!</operator><name>alpSrc</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dstW</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>Y</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">18</literal></expr></init></decl>, <decl><type ref="prev"/><name>A</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">18</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>lumFilterSize</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>Y</name> <operator>+=</operator> <name><name>lumSrc</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>lumFilter</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>Y</name> <operator>&gt;&gt;=</operator> <literal type="number">19</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>Y</name> <operator>&amp;</operator> <literal type="number">0x100</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>Y</name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name>Y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>hasAlpha</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>lumFilterSize</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>A</name> <operator>+=</operator> <name><name>alpSrc</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>lumFilter</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>A</name> <operator>&gt;&gt;=</operator> <literal type="number">19</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>A</name> <operator>&amp;</operator> <literal type="number">0x100</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>A</name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>i</name></expr> ]</index></name> <operator>=</operator> <name>Y</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>hasAlpha</name></expr> ?</condition><then> <expr><name>A</name></expr> </then><else>: <expr><literal type="number">255</literal></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>yuv2ayuv64le_X_c</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>lumFilter</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>_lumSrc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lumFilterSize</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>chrFilter</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>_chrUSrc</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>_chrVSrc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>chrFilterSize</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>_alpSrc</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dstW</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>lumSrc</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>int32_t</name> <operator>*</operator><operator>*</operator><operator>)</operator> <name>_lumSrc</name></expr></init></decl>,

<decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>chrUSrc</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>int32_t</name> <operator>*</operator><operator>*</operator><operator>)</operator> <name>_chrUSrc</name></expr></init></decl>,

<decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>chrVSrc</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>int32_t</name> <operator>*</operator><operator>*</operator><operator>)</operator> <name>_chrVSrc</name></expr></init></decl>,

<decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>alpSrc</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>int32_t</name> <operator>*</operator><operator>*</operator><operator>)</operator> <name>_alpSrc</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>hasAlpha</name> <init>= <expr><operator>!</operator><operator>!</operator><name>alpSrc</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dstW</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>Y</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">14</literal></expr></init></decl>, <decl><type ref="prev"/><name>U</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">14</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>V</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">14</literal></expr></init></decl>, <decl><type ref="prev"/><name>A</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">14</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><name>Y</name> <operator>-=</operator> <literal type="number">0x40000000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>U</name> <operator>-=</operator> <literal type="number">0x40000000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>V</name> <operator>-=</operator> <literal type="number">0x40000000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>A</name> <operator>-=</operator> <literal type="number">0x40000000</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>lumFilterSize</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>Y</name> <operator>+=</operator> <name><name>lumSrc</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>lumFilter</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>chrFilterSize</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>U</name> <operator>+=</operator> <name><name>chrUSrc</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>chrFilter</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>chrFilterSize</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>V</name> <operator>+=</operator> <name><name>chrVSrc</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>chrFilter</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>hasAlpha</name></expr>)</condition><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>lumFilterSize</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>A</name> <operator>+=</operator> <name><name>alpSrc</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>lumFilter</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>

<expr_stmt><expr><name>Y</name> <operator>=</operator> <literal type="number">0x8000</literal> <operator>+</operator> <call><name>av_clip_int16</name><argument_list>(<argument><expr><name>Y</name> <operator>&gt;&gt;</operator> <literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>U</name> <operator>=</operator> <literal type="number">0x8000</literal> <operator>+</operator> <call><name>av_clip_int16</name><argument_list>(<argument><expr><name>U</name> <operator>&gt;&gt;</operator> <literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>V</name> <operator>=</operator> <literal type="number">0x8000</literal> <operator>+</operator> <call><name>av_clip_int16</name><argument_list>(<argument><expr><name>V</name> <operator>&gt;&gt;</operator> <literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>A</name> <operator>=</operator> <literal type="number">0x8000</literal> <operator>+</operator> <call><name>av_clip_int16</name><argument_list>(<argument><expr><name>A</name> <operator>&gt;&gt;</operator> <literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WL16</name><argument_list>(<argument><expr><name>dest</name> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <name>i</name></expr></argument>, <argument><expr><ternary><condition><expr><name>hasAlpha</name></expr> ?</condition><then> <expr><name>A</name></expr> </then><else>: <expr><literal type="number">65535</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WL16</name><argument_list>(<argument><expr><name>dest</name> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>Y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WL16</name><argument_list>(<argument><expr><name>dest</name> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>U</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WL16</name><argument_list>(<argument><expr><name>dest</name> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">6</literal></expr></argument>, <argument><expr><name>V</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>av_cold</name> <name>void</name></type> <name>ff_sws_init_output_funcs</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>,

<parameter><decl><type><name>yuv2planar1_fn</name> <modifier>*</modifier></type><name>yuv2plane1</name></decl></parameter>,

<parameter><decl><type><name>yuv2planarX_fn</name> <modifier>*</modifier></type><name>yuv2planeX</name></decl></parameter>,

<parameter><decl><type><name>yuv2interleavedX_fn</name> <modifier>*</modifier></type><name>yuv2nv12cX</name></decl></parameter>,

<parameter><decl><type><name>yuv2packed1_fn</name> <modifier>*</modifier></type><name>yuv2packed1</name></decl></parameter>,

<parameter><decl><type><name>yuv2packed2_fn</name> <modifier>*</modifier></type><name>yuv2packed2</name></decl></parameter>,

<parameter><decl><type><name>yuv2packedX_fn</name> <modifier>*</modifier></type><name>yuv2packedX</name></decl></parameter>,

<parameter><decl><type><name>yuv2anyX_fn</name> <modifier>*</modifier></type><name>yuv2anyX</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>dstFormat</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>dstFormat</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name>dstFormat</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>dstFormat</name> <operator>==</operator> <name>AV_PIX_FMT_P010LE</name> <operator>||</operator> <name>dstFormat</name> <operator>==</operator> <name>AV_PIX_FMT_P010BE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>yuv2plane1</name> <operator>=</operator> <ternary><condition><expr><call><name>isBE</name><argument_list>(<argument><expr><name>dstFormat</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>yuv2p010l1_BE_c</name></expr> </then><else>: <expr><name>yuv2p010l1_LE_c</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2planeX</name> <operator>=</operator> <ternary><condition><expr><call><name>isBE</name><argument_list>(<argument><expr><name>dstFormat</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>yuv2p010lX_BE_c</name></expr> </then><else>: <expr><name>yuv2p010lX_LE_c</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2nv12cX</name> <operator>=</operator> <name>yuv2p010cX_c</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>is16BPS</name><argument_list>(<argument><expr><name>dstFormat</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>yuv2planeX</name> <operator>=</operator> <ternary><condition><expr><call><name>isBE</name><argument_list>(<argument><expr><name>dstFormat</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>yuv2planeX_16BE_c</name></expr> </then><else>: <expr><name>yuv2planeX_16LE_c</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2plane1</name> <operator>=</operator> <ternary><condition><expr><call><name>isBE</name><argument_list>(<argument><expr><name>dstFormat</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>yuv2plane1_16BE_c</name></expr> </then><else>: <expr><name>yuv2plane1_16LE_c</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dstFormat</name> <operator>==</operator> <name>AV_PIX_FMT_P016LE</name> <operator>||</operator> <name>dstFormat</name> <operator>==</operator> <name>AV_PIX_FMT_P016BE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>yuv2nv12cX</name> <operator>=</operator> <name>yuv2p016cX_c</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>isNBPS</name><argument_list>(<argument><expr><name>dstFormat</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>depth</name> <operator>==</operator> <literal type="number">9</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>yuv2planeX</name> <operator>=</operator> <ternary><condition><expr><call><name>isBE</name><argument_list>(<argument><expr><name>dstFormat</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>yuv2planeX_9BE_c</name></expr> </then><else>: <expr><name>yuv2planeX_9LE_c</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2plane1</name> <operator>=</operator> <ternary><condition><expr><call><name>isBE</name><argument_list>(<argument><expr><name>dstFormat</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>yuv2plane1_9BE_c</name></expr> </then><else>: <expr><name>yuv2plane1_9LE_c</name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>depth</name> <operator>==</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>yuv2planeX</name> <operator>=</operator> <ternary><condition><expr><call><name>isBE</name><argument_list>(<argument><expr><name>dstFormat</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>yuv2planeX_10BE_c</name></expr> </then><else>: <expr><name>yuv2planeX_10LE_c</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2plane1</name> <operator>=</operator> <ternary><condition><expr><call><name>isBE</name><argument_list>(<argument><expr><name>dstFormat</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>yuv2plane1_10BE_c</name></expr> </then><else>: <expr><name>yuv2plane1_10LE_c</name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>depth</name> <operator>==</operator> <literal type="number">12</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>yuv2planeX</name> <operator>=</operator> <ternary><condition><expr><call><name>isBE</name><argument_list>(<argument><expr><name>dstFormat</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>yuv2planeX_12BE_c</name></expr> </then><else>: <expr><name>yuv2planeX_12LE_c</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2plane1</name> <operator>=</operator> <ternary><condition><expr><call><name>isBE</name><argument_list>(<argument><expr><name>dstFormat</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>yuv2plane1_12BE_c</name></expr> </then><else>: <expr><name>yuv2plane1_12LE_c</name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>depth</name> <operator>==</operator> <literal type="number">14</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>yuv2planeX</name> <operator>=</operator> <ternary><condition><expr><call><name>isBE</name><argument_list>(<argument><expr><name>dstFormat</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>yuv2planeX_14BE_c</name></expr> </then><else>: <expr><name>yuv2planeX_14LE_c</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2plane1</name> <operator>=</operator> <ternary><condition><expr><call><name>isBE</name><argument_list>(<argument><expr><name>dstFormat</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>yuv2plane1_14BE_c</name></expr> </then><else>: <expr><name>yuv2plane1_14LE_c</name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>dstFormat</name> <operator>==</operator> <name>AV_PIX_FMT_GRAYF32BE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>yuv2planeX</name> <operator>=</operator> <name>yuv2planeX_floatBE_c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2plane1</name> <operator>=</operator> <name>yuv2plane1_floatBE_c</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>dstFormat</name> <operator>==</operator> <name>AV_PIX_FMT_GRAYF32LE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>yuv2planeX</name> <operator>=</operator> <name>yuv2planeX_floatLE_c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2plane1</name> <operator>=</operator> <name>yuv2plane1_floatLE_c</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>yuv2plane1</name> <operator>=</operator> <name>yuv2plane1_8_c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2planeX</name> <operator>=</operator> <name>yuv2planeX_8_c</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dstFormat</name> <operator>==</operator> <name>AV_PIX_FMT_NV12</name> <operator>||</operator> <name>dstFormat</name> <operator>==</operator> <name>AV_PIX_FMT_NV21</name> <operator>||</operator>

<name>dstFormat</name> <operator>==</operator> <name>AV_PIX_FMT_NV24</name> <operator>||</operator> <name>dstFormat</name> <operator>==</operator> <name>AV_PIX_FMT_NV42</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>yuv2nv12cX</name> <operator>=</operator> <name>yuv2nv12cX_c</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SWS_FULL_CHR_H_INT</name></expr>)</condition> <block>{<block_content>

<switch>switch <condition>(<expr><name>dstFormat</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_PIX_FMT_RGBA</name></expr>:</case>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_SMALL</name></expr></cpp:if>

<expr_stmt><expr><operator>*</operator><name>yuv2packedX</name> <operator>=</operator> <name>yuv2rgba32_full_X_c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2packed2</name> <operator>=</operator> <name>yuv2rgba32_full_2_c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2packed1</name> <operator>=</operator> <name>yuv2rgba32_full_1_c</name></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_SWSCALE_ALPHA</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>needAlpha</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>yuv2packedX</name> <operator>=</operator> <name>yuv2rgba32_full_X_c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2packed2</name> <operator>=</operator> <name>yuv2rgba32_full_2_c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2packed1</name> <operator>=</operator> <name>yuv2rgba32_full_1_c</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>yuv2packedX</name> <operator>=</operator> <name>yuv2rgbx32_full_X_c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2packed2</name> <operator>=</operator> <name>yuv2rgbx32_full_2_c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2packed1</name> <operator>=</operator> <name>yuv2rgbx32_full_1_c</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_ARGB</name></expr>:</case>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_SMALL</name></expr></cpp:if>

<expr_stmt><expr><operator>*</operator><name>yuv2packedX</name> <operator>=</operator> <name>yuv2argb32_full_X_c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2packed2</name> <operator>=</operator> <name>yuv2argb32_full_2_c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2packed1</name> <operator>=</operator> <name>yuv2argb32_full_1_c</name></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_SWSCALE_ALPHA</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>needAlpha</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>yuv2packedX</name> <operator>=</operator> <name>yuv2argb32_full_X_c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2packed2</name> <operator>=</operator> <name>yuv2argb32_full_2_c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2packed1</name> <operator>=</operator> <name>yuv2argb32_full_1_c</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>yuv2packedX</name> <operator>=</operator> <name>yuv2xrgb32_full_X_c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2packed2</name> <operator>=</operator> <name>yuv2xrgb32_full_2_c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2packed1</name> <operator>=</operator> <name>yuv2xrgb32_full_1_c</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_BGRA</name></expr>:</case>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_SMALL</name></expr></cpp:if>

<expr_stmt><expr><operator>*</operator><name>yuv2packedX</name> <operator>=</operator> <name>yuv2bgra32_full_X_c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2packed2</name> <operator>=</operator> <name>yuv2bgra32_full_2_c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2packed1</name> <operator>=</operator> <name>yuv2bgra32_full_1_c</name></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_SWSCALE_ALPHA</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>needAlpha</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>yuv2packedX</name> <operator>=</operator> <name>yuv2bgra32_full_X_c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2packed2</name> <operator>=</operator> <name>yuv2bgra32_full_2_c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2packed1</name> <operator>=</operator> <name>yuv2bgra32_full_1_c</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>yuv2packedX</name> <operator>=</operator> <name>yuv2bgrx32_full_X_c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2packed2</name> <operator>=</operator> <name>yuv2bgrx32_full_2_c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2packed1</name> <operator>=</operator> <name>yuv2bgrx32_full_1_c</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_ABGR</name></expr>:</case>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_SMALL</name></expr></cpp:if>

<expr_stmt><expr><operator>*</operator><name>yuv2packedX</name> <operator>=</operator> <name>yuv2abgr32_full_X_c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2packed2</name> <operator>=</operator> <name>yuv2abgr32_full_2_c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2packed1</name> <operator>=</operator> <name>yuv2abgr32_full_1_c</name></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_SWSCALE_ALPHA</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>needAlpha</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>yuv2packedX</name> <operator>=</operator> <name>yuv2abgr32_full_X_c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2packed2</name> <operator>=</operator> <name>yuv2abgr32_full_2_c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2packed1</name> <operator>=</operator> <name>yuv2abgr32_full_1_c</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>yuv2packedX</name> <operator>=</operator> <name>yuv2xbgr32_full_X_c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2packed2</name> <operator>=</operator> <name>yuv2xbgr32_full_2_c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2packed1</name> <operator>=</operator> <name>yuv2xbgr32_full_1_c</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_RGBA64LE</name></expr>:</case>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_SWSCALE_ALPHA</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>needAlpha</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>yuv2packedX</name> <operator>=</operator> <name>yuv2rgba64le_full_X_c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2packed2</name> <operator>=</operator> <name>yuv2rgba64le_full_2_c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2packed1</name> <operator>=</operator> <name>yuv2rgba64le_full_1_c</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>yuv2packedX</name> <operator>=</operator> <name>yuv2rgbx64le_full_X_c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2packed2</name> <operator>=</operator> <name>yuv2rgbx64le_full_2_c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2packed1</name> <operator>=</operator> <name>yuv2rgbx64le_full_1_c</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_RGBA64BE</name></expr>:</case>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_SWSCALE_ALPHA</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>needAlpha</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>yuv2packedX</name> <operator>=</operator> <name>yuv2rgba64be_full_X_c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2packed2</name> <operator>=</operator> <name>yuv2rgba64be_full_2_c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2packed1</name> <operator>=</operator> <name>yuv2rgba64be_full_1_c</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>yuv2packedX</name> <operator>=</operator> <name>yuv2rgbx64be_full_X_c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2packed2</name> <operator>=</operator> <name>yuv2rgbx64be_full_2_c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2packed1</name> <operator>=</operator> <name>yuv2rgbx64be_full_1_c</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_BGRA64LE</name></expr>:</case>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_SWSCALE_ALPHA</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>needAlpha</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>yuv2packedX</name> <operator>=</operator> <name>yuv2bgra64le_full_X_c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2packed2</name> <operator>=</operator> <name>yuv2bgra64le_full_2_c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2packed1</name> <operator>=</operator> <name>yuv2bgra64le_full_1_c</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>yuv2packedX</name> <operator>=</operator> <name>yuv2bgrx64le_full_X_c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2packed2</name> <operator>=</operator> <name>yuv2bgrx64le_full_2_c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2packed1</name> <operator>=</operator> <name>yuv2bgrx64le_full_1_c</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_BGRA64BE</name></expr>:</case>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_SWSCALE_ALPHA</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>needAlpha</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>yuv2packedX</name> <operator>=</operator> <name>yuv2bgra64be_full_X_c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2packed2</name> <operator>=</operator> <name>yuv2bgra64be_full_2_c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2packed1</name> <operator>=</operator> <name>yuv2bgra64be_full_1_c</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>yuv2packedX</name> <operator>=</operator> <name>yuv2bgrx64be_full_X_c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2packed2</name> <operator>=</operator> <name>yuv2bgrx64be_full_2_c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2packed1</name> <operator>=</operator> <name>yuv2bgrx64be_full_1_c</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_RGB24</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>yuv2packedX</name> <operator>=</operator> <name>yuv2rgb24_full_X_c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2packed2</name> <operator>=</operator> <name>yuv2rgb24_full_2_c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2packed1</name> <operator>=</operator> <name>yuv2rgb24_full_1_c</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_BGR24</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>yuv2packedX</name> <operator>=</operator> <name>yuv2bgr24_full_X_c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2packed2</name> <operator>=</operator> <name>yuv2bgr24_full_2_c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2packed1</name> <operator>=</operator> <name>yuv2bgr24_full_1_c</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_RGB48LE</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>yuv2packedX</name> <operator>=</operator> <name>yuv2rgb48le_full_X_c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2packed2</name> <operator>=</operator> <name>yuv2rgb48le_full_2_c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2packed1</name> <operator>=</operator> <name>yuv2rgb48le_full_1_c</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_BGR48LE</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>yuv2packedX</name> <operator>=</operator> <name>yuv2bgr48le_full_X_c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2packed2</name> <operator>=</operator> <name>yuv2bgr48le_full_2_c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2packed1</name> <operator>=</operator> <name>yuv2bgr48le_full_1_c</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_RGB48BE</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>yuv2packedX</name> <operator>=</operator> <name>yuv2rgb48be_full_X_c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2packed2</name> <operator>=</operator> <name>yuv2rgb48be_full_2_c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2packed1</name> <operator>=</operator> <name>yuv2rgb48be_full_1_c</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_BGR48BE</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>yuv2packedX</name> <operator>=</operator> <name>yuv2bgr48be_full_X_c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2packed2</name> <operator>=</operator> <name>yuv2bgr48be_full_2_c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2packed1</name> <operator>=</operator> <name>yuv2bgr48be_full_1_c</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_BGR4_BYTE</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>yuv2packedX</name> <operator>=</operator> <name>yuv2bgr4_byte_full_X_c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2packed2</name> <operator>=</operator> <name>yuv2bgr4_byte_full_2_c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2packed1</name> <operator>=</operator> <name>yuv2bgr4_byte_full_1_c</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_RGB4_BYTE</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>yuv2packedX</name> <operator>=</operator> <name>yuv2rgb4_byte_full_X_c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2packed2</name> <operator>=</operator> <name>yuv2rgb4_byte_full_2_c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2packed1</name> <operator>=</operator> <name>yuv2rgb4_byte_full_1_c</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_BGR8</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>yuv2packedX</name> <operator>=</operator> <name>yuv2bgr8_full_X_c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2packed2</name> <operator>=</operator> <name>yuv2bgr8_full_2_c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2packed1</name> <operator>=</operator> <name>yuv2bgr8_full_1_c</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_RGB8</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>yuv2packedX</name> <operator>=</operator> <name>yuv2rgb8_full_X_c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2packed2</name> <operator>=</operator> <name>yuv2rgb8_full_2_c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2packed1</name> <operator>=</operator> <name>yuv2rgb8_full_1_c</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_GBRP</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_GBRP9BE</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_GBRP9LE</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_GBRP10BE</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_GBRP10LE</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_GBRP12BE</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_GBRP12LE</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_GBRP14BE</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_GBRP14LE</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_GBRAP</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_GBRAP10BE</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_GBRAP10LE</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_GBRAP12BE</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_GBRAP12LE</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>yuv2anyX</name> <operator>=</operator> <name>yuv2gbrp_full_X_c</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_GBRP16BE</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_GBRP16LE</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_GBRAP16BE</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_GBRAP16LE</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>yuv2anyX</name> <operator>=</operator> <name>yuv2gbrp16_full_X_c</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>yuv2packedX</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>*</operator><name>yuv2anyX</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>YUV_PACKED</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<label><name>YUV_PACKED</name>:</label>

<switch>switch <condition>(<expr><name>dstFormat</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_PIX_FMT_RGBA64LE</name></expr>:</case>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_SWSCALE_ALPHA</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>needAlpha</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>yuv2packed1</name> <operator>=</operator> <name>yuv2rgba64le_1_c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2packed2</name> <operator>=</operator> <name>yuv2rgba64le_2_c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2packedX</name> <operator>=</operator> <name>yuv2rgba64le_X_c</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>yuv2packed1</name> <operator>=</operator> <name>yuv2rgbx64le_1_c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2packed2</name> <operator>=</operator> <name>yuv2rgbx64le_2_c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2packedX</name> <operator>=</operator> <name>yuv2rgbx64le_X_c</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_RGBA64BE</name></expr>:</case>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_SWSCALE_ALPHA</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>needAlpha</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>yuv2packed1</name> <operator>=</operator> <name>yuv2rgba64be_1_c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2packed2</name> <operator>=</operator> <name>yuv2rgba64be_2_c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2packedX</name> <operator>=</operator> <name>yuv2rgba64be_X_c</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>yuv2packed1</name> <operator>=</operator> <name>yuv2rgbx64be_1_c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2packed2</name> <operator>=</operator> <name>yuv2rgbx64be_2_c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2packedX</name> <operator>=</operator> <name>yuv2rgbx64be_X_c</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_BGRA64LE</name></expr>:</case>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_SWSCALE_ALPHA</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>needAlpha</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>yuv2packed1</name> <operator>=</operator> <name>yuv2bgra64le_1_c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2packed2</name> <operator>=</operator> <name>yuv2bgra64le_2_c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2packedX</name> <operator>=</operator> <name>yuv2bgra64le_X_c</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>yuv2packed1</name> <operator>=</operator> <name>yuv2bgrx64le_1_c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2packed2</name> <operator>=</operator> <name>yuv2bgrx64le_2_c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2packedX</name> <operator>=</operator> <name>yuv2bgrx64le_X_c</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_BGRA64BE</name></expr>:</case>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_SWSCALE_ALPHA</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>needAlpha</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>yuv2packed1</name> <operator>=</operator> <name>yuv2bgra64be_1_c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2packed2</name> <operator>=</operator> <name>yuv2bgra64be_2_c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2packedX</name> <operator>=</operator> <name>yuv2bgra64be_X_c</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>yuv2packed1</name> <operator>=</operator> <name>yuv2bgrx64be_1_c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2packed2</name> <operator>=</operator> <name>yuv2bgrx64be_2_c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2packedX</name> <operator>=</operator> <name>yuv2bgrx64be_X_c</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_RGB48LE</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>yuv2packed1</name> <operator>=</operator> <name>yuv2rgb48le_1_c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2packed2</name> <operator>=</operator> <name>yuv2rgb48le_2_c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2packedX</name> <operator>=</operator> <name>yuv2rgb48le_X_c</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_RGB48BE</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>yuv2packed1</name> <operator>=</operator> <name>yuv2rgb48be_1_c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2packed2</name> <operator>=</operator> <name>yuv2rgb48be_2_c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2packedX</name> <operator>=</operator> <name>yuv2rgb48be_X_c</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_BGR48LE</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>yuv2packed1</name> <operator>=</operator> <name>yuv2bgr48le_1_c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2packed2</name> <operator>=</operator> <name>yuv2bgr48le_2_c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2packedX</name> <operator>=</operator> <name>yuv2bgr48le_X_c</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_BGR48BE</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>yuv2packed1</name> <operator>=</operator> <name>yuv2bgr48be_1_c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2packed2</name> <operator>=</operator> <name>yuv2bgr48be_2_c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2packedX</name> <operator>=</operator> <name>yuv2bgr48be_X_c</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_RGB32</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_BGR32</name></expr>:</case>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_SMALL</name></expr></cpp:if>

<expr_stmt><expr><operator>*</operator><name>yuv2packed1</name> <operator>=</operator> <name>yuv2rgb32_1_c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2packed2</name> <operator>=</operator> <name>yuv2rgb32_2_c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2packedX</name> <operator>=</operator> <name>yuv2rgb32_X_c</name></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_SWSCALE_ALPHA</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>needAlpha</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>yuv2packed1</name> <operator>=</operator> <name>yuv2rgba32_1_c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2packed2</name> <operator>=</operator> <name>yuv2rgba32_2_c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2packedX</name> <operator>=</operator> <name>yuv2rgba32_X_c</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>yuv2packed1</name> <operator>=</operator> <name>yuv2rgbx32_1_c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2packed2</name> <operator>=</operator> <name>yuv2rgbx32_2_c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2packedX</name> <operator>=</operator> <name>yuv2rgbx32_X_c</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_RGB32_1</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_BGR32_1</name></expr>:</case>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_SMALL</name></expr></cpp:if>

<expr_stmt><expr><operator>*</operator><name>yuv2packed1</name> <operator>=</operator> <name>yuv2rgb32_1_1_c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2packed2</name> <operator>=</operator> <name>yuv2rgb32_1_2_c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2packedX</name> <operator>=</operator> <name>yuv2rgb32_1_X_c</name></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_SWSCALE_ALPHA</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>needAlpha</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>yuv2packed1</name> <operator>=</operator> <name>yuv2rgba32_1_1_c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2packed2</name> <operator>=</operator> <name>yuv2rgba32_1_2_c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2packedX</name> <operator>=</operator> <name>yuv2rgba32_1_X_c</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>yuv2packed1</name> <operator>=</operator> <name>yuv2rgbx32_1_1_c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2packed2</name> <operator>=</operator> <name>yuv2rgbx32_1_2_c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2packedX</name> <operator>=</operator> <name>yuv2rgbx32_1_X_c</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_RGB24</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>yuv2packed1</name> <operator>=</operator> <name>yuv2rgb24_1_c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2packed2</name> <operator>=</operator> <name>yuv2rgb24_2_c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2packedX</name> <operator>=</operator> <name>yuv2rgb24_X_c</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_BGR24</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>yuv2packed1</name> <operator>=</operator> <name>yuv2bgr24_1_c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2packed2</name> <operator>=</operator> <name>yuv2bgr24_2_c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2packedX</name> <operator>=</operator> <name>yuv2bgr24_X_c</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_RGB565LE</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_RGB565BE</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_BGR565LE</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_BGR565BE</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>yuv2packed1</name> <operator>=</operator> <name>yuv2rgb16_1_c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2packed2</name> <operator>=</operator> <name>yuv2rgb16_2_c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2packedX</name> <operator>=</operator> <name>yuv2rgb16_X_c</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_RGB555LE</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_RGB555BE</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_BGR555LE</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_BGR555BE</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>yuv2packed1</name> <operator>=</operator> <name>yuv2rgb15_1_c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2packed2</name> <operator>=</operator> <name>yuv2rgb15_2_c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2packedX</name> <operator>=</operator> <name>yuv2rgb15_X_c</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_RGB444LE</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_RGB444BE</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_BGR444LE</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_BGR444BE</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>yuv2packed1</name> <operator>=</operator> <name>yuv2rgb12_1_c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2packed2</name> <operator>=</operator> <name>yuv2rgb12_2_c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2packedX</name> <operator>=</operator> <name>yuv2rgb12_X_c</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_RGB8</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_BGR8</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>yuv2packed1</name> <operator>=</operator> <name>yuv2rgb8_1_c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2packed2</name> <operator>=</operator> <name>yuv2rgb8_2_c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2packedX</name> <operator>=</operator> <name>yuv2rgb8_X_c</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_RGB4</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_BGR4</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>yuv2packed1</name> <operator>=</operator> <name>yuv2rgb4_1_c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2packed2</name> <operator>=</operator> <name>yuv2rgb4_2_c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2packedX</name> <operator>=</operator> <name>yuv2rgb4_X_c</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_RGB4_BYTE</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_BGR4_BYTE</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>yuv2packed1</name> <operator>=</operator> <name>yuv2rgb4b_1_c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2packed2</name> <operator>=</operator> <name>yuv2rgb4b_2_c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2packedX</name> <operator>=</operator> <name>yuv2rgb4b_X_c</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></else></if_stmt>

<switch>switch <condition>(<expr><name>dstFormat</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_PIX_FMT_MONOWHITE</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>yuv2packed1</name> <operator>=</operator> <name>yuv2monowhite_1_c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2packed2</name> <operator>=</operator> <name>yuv2monowhite_2_c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2packedX</name> <operator>=</operator> <name>yuv2monowhite_X_c</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_MONOBLACK</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>yuv2packed1</name> <operator>=</operator> <name>yuv2monoblack_1_c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2packed2</name> <operator>=</operator> <name>yuv2monoblack_2_c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2packedX</name> <operator>=</operator> <name>yuv2monoblack_X_c</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_YUYV422</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>yuv2packed1</name> <operator>=</operator> <name>yuv2yuyv422_1_c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2packed2</name> <operator>=</operator> <name>yuv2yuyv422_2_c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2packedX</name> <operator>=</operator> <name>yuv2yuyv422_X_c</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_YVYU422</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>yuv2packed1</name> <operator>=</operator> <name>yuv2yvyu422_1_c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2packed2</name> <operator>=</operator> <name>yuv2yvyu422_2_c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2packedX</name> <operator>=</operator> <name>yuv2yvyu422_X_c</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_UYVY422</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>yuv2packed1</name> <operator>=</operator> <name>yuv2uyvy422_1_c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2packed2</name> <operator>=</operator> <name>yuv2uyvy422_2_c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2packedX</name> <operator>=</operator> <name>yuv2uyvy422_X_c</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_YA8</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>yuv2packed1</name> <operator>=</operator> <name>yuv2ya8_1_c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2packed2</name> <operator>=</operator> <name>yuv2ya8_2_c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2packedX</name> <operator>=</operator> <name>yuv2ya8_X_c</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_YA16LE</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>yuv2packed1</name> <operator>=</operator> <name>yuv2ya16le_1_c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2packed2</name> <operator>=</operator> <name>yuv2ya16le_2_c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2packedX</name> <operator>=</operator> <name>yuv2ya16le_X_c</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_YA16BE</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>yuv2packed1</name> <operator>=</operator> <name>yuv2ya16be_1_c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2packed2</name> <operator>=</operator> <name>yuv2ya16be_2_c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yuv2packedX</name> <operator>=</operator> <name>yuv2ya16be_X_c</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_AYUV64LE</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>yuv2packedX</name> <operator>=</operator> <name>yuv2ayuv64le_X_c</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

</unit>
