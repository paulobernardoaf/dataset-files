<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libswscale\bayer_template.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BAYER_BGGR</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>BAYER_GBRG</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BAYER_R</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BAYER_G</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BAYER_B</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BAYER_RGGB</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>BAYER_GRBG</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BAYER_R</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BAYER_G</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BAYER_B</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BAYER_8</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BAYER_READ</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BAYER_SIZEOF</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BAYER_SHIFT</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BAYER_16LE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BAYER_READ</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>AV_RL16(&amp;(x))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BAYER_SIZEOF</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BAYER_SHIFT</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BAYER_16BE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BAYER_READ</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>AV_RB16(&amp;(x))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BAYER_SIZEOF</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BAYER_SHIFT</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S</name><parameter_list>(<parameter><type><name>y</name></type></parameter>, <parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>BAYER_READ(src[(y)*src_stride + BAYER_SIZEOF*(x)])</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T</name><parameter_list>(<parameter><type><name>y</name></type></parameter>, <parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(unsigned int)S(y, x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R</name><parameter_list>(<parameter><type><name>y</name></type></parameter>, <parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dst[(y)*dst_stride + (x)*3 + BAYER_R]</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>G</name><parameter_list>(<parameter><type><name>y</name></type></parameter>, <parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dst[(y)*dst_stride + (x)*3 + BAYER_G]</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>B</name><parameter_list>(<parameter><type><name>y</name></type></parameter>, <parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dst[(y)*dst_stride + (x)*3 + BAYER_B]</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BAYER_BGGR</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>BAYER_RGGB</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BAYER_TO_RGB24_COPY</name></cpp:macro> <cpp:value>R(0, 0) = R(0, 1) = R(1, 1) = R(1, 0) = S(1, 1) &gt;&gt; BAYER_SHIFT; G(0, 1) = S(0, 1) &gt;&gt; BAYER_SHIFT; G(0, 0) = G(1, 1) = (T(0, 1) + T(1, 0)) &gt;&gt; (1 + BAYER_SHIFT); G(1, 0) = S(1, 0) &gt;&gt; BAYER_SHIFT; B(1, 1) = B(0, 0) = B(0, 1) = B(1, 0) = S(0, 0) &gt;&gt; BAYER_SHIFT;</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BAYER_TO_RGB24_INTERPOLATE</name></cpp:macro> <cpp:value>R(0, 0) = (T(-1, -1) + T(-1, 1) + T(1, -1) + T(1, 1)) &gt;&gt; (2 + BAYER_SHIFT); G(0, 0) = (T(-1, 0) + T( 0, -1) + T(0, 1) + T(1, 0)) &gt;&gt; (2 + BAYER_SHIFT); B(0, 0) = S(0, 0) &gt;&gt; BAYER_SHIFT; R(0, 1) = (T(-1, 1) + T(1, 1)) &gt;&gt; (1 + BAYER_SHIFT); G(0, 1) = S(0, 1) &gt;&gt; BAYER_SHIFT; B(0, 1) = (T(0, 0) + T(0, 2)) &gt;&gt; (1 + BAYER_SHIFT); R(1, 0) = (T(1, -1) + T(1, 1)) &gt;&gt; (1 + BAYER_SHIFT); G(1, 0) = S(1, 0) &gt;&gt; BAYER_SHIFT; B(1, 0) = (T(0, 0) + T(2, 0)) &gt;&gt; (1 + BAYER_SHIFT); R(1, 1) = S(1, 1) &gt;&gt; BAYER_SHIFT; G(1, 1) = (T(0, 1) + T(1, 0) + T(1, 2) + T(2, 1)) &gt;&gt; (2 + BAYER_SHIFT); B(1, 1) = (T(0, 0) + T(0, 2) + T(2, 0) + T(2, 2)) &gt;&gt; (2 + BAYER_SHIFT);</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BAYER_TO_RGB24_COPY</name></cpp:macro> <cpp:value>R(0, 0) = R(0, 1) = R(1, 1) = R(1, 0) = S(1, 0) &gt;&gt; BAYER_SHIFT; G(0, 0) = S(0, 0) &gt;&gt; BAYER_SHIFT; G(1, 1) = S(1, 1) &gt;&gt; BAYER_SHIFT; G(0, 1) = G(1, 0) = (T(0, 0) + T(1, 1)) &gt;&gt; (1 + BAYER_SHIFT); B(1, 1) = B(0, 0) = B(0, 1) = B(1, 0) = S(0, 1) &gt;&gt; BAYER_SHIFT;</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BAYER_TO_RGB24_INTERPOLATE</name></cpp:macro> <cpp:value>R(0, 0) = (T(-1, 0) + T(1, 0)) &gt;&gt; (1 + BAYER_SHIFT); G(0, 0) = S(0, 0) &gt;&gt; BAYER_SHIFT; B(0, 0) = (T(0, -1) + T(0, 1)) &gt;&gt; (1 + BAYER_SHIFT); R(0, 1) = (T(-1, 0) + T(-1, 2) + T(1, 0) + T(1, 2)) &gt;&gt; (2 + BAYER_SHIFT); G(0, 1) = (T(-1, 1) + T(0, 0) + T(0, 2) + T(1, 1)) &gt;&gt; (2 + BAYER_SHIFT); B(0, 1) = S(0, 1) &gt;&gt; BAYER_SHIFT; R(1, 0) = S(1, 0) &gt;&gt; BAYER_SHIFT; G(1, 0) = (T(0, 0) + T(1, -1) + T(1, 1) + T(2, 0)) &gt;&gt; (2 + BAYER_SHIFT); B(1, 0) = (T(0, -1) + T(0, 1) + T(2, -1) + T(2, 1)) &gt;&gt; (2 + BAYER_SHIFT); R(1, 1) = (T(1, 0) + T(1, 2)) &gt;&gt; (1 + BAYER_SHIFT); G(1, 1) = S(1, 1) &gt;&gt; BAYER_SHIFT; B(1, 1) = (T(0, 1) + T(2, 1)) &gt;&gt; (1 + BAYER_SHIFT);</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rgb24toyv12_2x2</name><parameter_list>(<parameter><type><name>src</name></type></parameter>, <parameter><type><name>dstY</name></type></parameter>, <parameter><type><name>dstU</name></type></parameter>, <parameter><type><name>dstV</name></type></parameter>, <parameter><type><name>luma_stride</name></type></parameter>, <parameter><type><name>src_stride</name></type></parameter>, <parameter><type><name>rgb2yuv</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ff_rgb24toyv12(src, dstY, dstV, dstU, 2, 2, luma_stride, 0, src_stride, rgb2yuv)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name> <name>BAYER_RENAME</name></type>(<name>rgb24_copy</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_stride</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>i</name><operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>BAYER_TO_RGB24_COPY</name>

<name>src</name> <operator>+=</operator> <literal type="number">2</literal> <operator>*</operator> <name>BAYER_SIZEOF</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>BAYER_RENAME</name></type>(<name>rgb24_interpolate</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_stride</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>BAYER_TO_RGB24_COPY</name>

<name>src</name> <operator>+=</operator> <literal type="number">2</literal> <operator>*</operator> <name>BAYER_SIZEOF</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">2</literal></expr> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name> <operator>-</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>BAYER_TO_RGB24_INTERPOLATE</name>

<name>src</name> <operator>+=</operator> <literal type="number">2</literal> <operator>*</operator> <name>BAYER_SIZEOF</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>width</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>BAYER_TO_RGB24_COPY</name></expr></expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>BAYER_RENAME</name></type>(<name>yv12_copy</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_stride</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dstY</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dstU</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dstV</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>luma_stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>rgb2yuv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>dst</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>dst_stride</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>i</name><operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>BAYER_TO_RGB24_COPY</name></type>

<name>rgb24toyv12_2x2</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstY</name></expr></argument>, <argument><expr><name>dstU</name></expr></argument>, <argument><expr><name>dstV</name></expr></argument>, <argument><expr><name>luma_stride</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>, <argument><expr><name>rgb2yuv</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <literal type="number">2</literal> <operator>*</operator> <name>BAYER_SIZEOF</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dstY</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>dstU</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>dstV</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>BAYER_RENAME</name></type>(<name>yv12_interpolate</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_stride</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dstY</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dstU</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dstV</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>luma_stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>rgb2yuv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>dst</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>dst_stride</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BAYER_TO_RGB24_COPY</name></type>

<name>rgb24toyv12_2x2</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstY</name></expr></argument>, <argument><expr><name>dstU</name></expr></argument>, <argument><expr><name>dstV</name></expr></argument>, <argument><expr><name>luma_stride</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>, <argument><expr><name>rgb2yuv</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <literal type="number">2</literal> <operator>*</operator> <name>BAYER_SIZEOF</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dstY</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>dstU</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>dstV</name><operator>++</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">2</literal></expr> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name> <operator>-</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>BAYER_TO_RGB24_INTERPOLATE</name></type>

<name>rgb24toyv12_2x2</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstY</name></expr></argument>, <argument><expr><name>dstU</name></expr></argument>, <argument><expr><name>dstV</name></expr></argument>, <argument><expr><name>luma_stride</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>, <argument><expr><name>rgb2yuv</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <literal type="number">2</literal> <operator>*</operator> <name>BAYER_SIZEOF</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dstY</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>dstU</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>dstV</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>width</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>BAYER_TO_RGB24_COPY</name></type>

<name>rgb24toyv12_2x2</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstY</name></expr></argument>, <argument><expr><name>dstU</name></expr></argument>, <argument><expr><name>dstV</name></expr></argument>, <argument><expr><name>luma_stride</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>, <argument><expr><name>rgb2yuv</name></expr></argument>)</argument_list></decl>;</decl_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>S</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>T</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>R</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>G</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>B</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>BAYER_TO_RGB24_COPY</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>BAYER_TO_RGB24_INTERPOLATE</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>BAYER_RENAME</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>BAYER_R</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>BAYER_G</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>BAYER_B</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>BAYER_READ</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>BAYER_SIZEOF</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>BAYER_SHIFT</name></cpp:undef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BAYER_BGGR</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>BAYER_BGGR</name></cpp:undef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BAYER_RGGB</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>BAYER_RGGB</name></cpp:undef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BAYER_GBRG</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>BAYER_GBRG</name></cpp:undef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BAYER_GRBG</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>BAYER_GRBG</name></cpp:undef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BAYER_8</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>BAYER_8</name></cpp:undef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BAYER_16LE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>BAYER_16LE</name></cpp:undef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BAYER_16BE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>BAYER_16BE</name></cpp:undef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
