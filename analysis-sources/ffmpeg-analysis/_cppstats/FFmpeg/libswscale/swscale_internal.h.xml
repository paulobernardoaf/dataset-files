<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libswscale\swscale_internal.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"version.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avutil.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/log.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixfmt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixdesc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/ppc/util_altivec.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STR</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>AV_TOSTRING(s)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YUVRGB_TABLE_HEADROOM</name></cpp:macro> <cpp:value>512</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YUVRGB_TABLE_LUMA_HEADROOM</name></cpp:macro> <cpp:value>512</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_FILTER_SIZE</name></cpp:macro> <cpp:value>SWS_MAX_FILTER_SIZE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DITHER1XBPP</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_BIGENDIAN</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALT32_CORR</name></cpp:macro> <cpp:value>(-1)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALT32_CORR</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCH_X86_64</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APCK_PTR2</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APCK_COEF</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APCK_SIZE</name></cpp:macro> <cpp:value>24</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APCK_PTR2</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APCK_COEF</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APCK_SIZE</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RETCODE_USE_CASCADE</name></cpp:macro> <cpp:value>-12345</cpp:value></cpp:define>

<struct_decl>struct <name>SwsContext</name>;</struct_decl>

<typedef>typedef <type><enum>enum <name>SwsDither</name> <block>{

<decl><name>SWS_DITHER_NONE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>SWS_DITHER_AUTO</name></decl>,

<decl><name>SWS_DITHER_BAYER</name></decl>,

<decl><name>SWS_DITHER_ED</name></decl>,

<decl><name>SWS_DITHER_A_DITHER</name></decl>,

<decl><name>SWS_DITHER_X_DITHER</name></decl>,

<decl><name>NB_SWS_DITHER</name></decl>,

}</block></enum></type> <name>SwsDither</name>;</typedef>

<typedef>typedef <type><enum>enum <name>SwsAlphaBlend</name> <block>{

<decl><name>SWS_ALPHA_BLEND_NONE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>SWS_ALPHA_BLEND_UNIFORM</name></decl>,

<decl><name>SWS_ALPHA_BLEND_CHECKERBOARD</name></decl>,

<decl><name>SWS_ALPHA_BLEND_NB</name></decl>,

}</block></enum></type> <name>SwsAlphaBlend</name>;</typedef>

<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>SwsFunc</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SwsContext</name></name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name><name>src</name><index>[]</index></name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name><name>srcStride</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcSliceY</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcSliceH</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>dst</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><name>dstStride</name><index>[]</index></name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>yuv2planar1_fn</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dstW</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>dither</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>yuv2planarX_fn</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>filterSize</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dstW</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>dither</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>yuv2interleavedX_fn</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SwsContext</name></name> <modifier>*</modifier></type><name>c</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>chrFilter</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>chrFilterSize</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>chrUSrc</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>chrVSrc</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dstW</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>yuv2packed1_fn</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SwsContext</name></name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>lumSrc</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name><name>chrUSrc</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name><name>chrVSrc</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>alpSrc</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>dstW</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>uvalpha</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>yuv2packed2_fn</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SwsContext</name></name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name><name>lumSrc</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name><name>chrUSrc</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name><name>chrVSrc</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name><name>alpSrc</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>dstW</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>yalpha</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>uvalpha</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>yuv2packedX_fn</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SwsContext</name></name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>lumFilter</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>lumSrc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lumFilterSize</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>chrFilter</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>chrUSrc</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>chrVSrc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>chrFilterSize</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>alpSrc</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>dstW</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>yuv2anyX_fn</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SwsContext</name></name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>lumFilter</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>lumSrc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lumFilterSize</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>chrFilter</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>chrUSrc</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>chrVSrc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>chrFilterSize</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>alpSrc</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>dest</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>dstW</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<struct_decl>struct <name>SwsSlice</name>;</struct_decl>

<struct_decl>struct <name>SwsFilterDescriptor</name>;</struct_decl>

<typedef>typedef <type><struct>struct <name>SwsContext</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>av_class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SwsFunc</name></type> <name>swscale</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>srcW</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>srcH</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>dstH</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>chrSrcW</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>chrSrcH</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>chrDstW</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>chrDstH</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>lumXInc</name></decl>, <name>chrXInc</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>lumYInc</name></decl>, <name>chrYInc</name>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>dstFormat</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>srcFormat</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>dstFormatBpp</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>srcFormatBpp</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>dstBpc</name></decl>, <name>srcBpc</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>chrSrcHSubSample</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>chrSrcVSubSample</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>chrDstHSubSample</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>chrDstVSubSample</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>vChrDrop</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>sliceDir</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>double</name></type> <name><name>param</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>SwsContext</name></name> <modifier>*</modifier></type><name><name>cascaded_context</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>cascaded_tmpStride</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>cascaded_tmp</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>cascaded1_tmpStride</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>cascaded1_tmp</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cascaded_mainindex</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>gamma_value</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>gamma_flag</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>is_internal_gamma</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>gamma</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>inv_gamma</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>numDesc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>descIndex</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>numSlice</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>SwsSlice</name></name> <modifier>*</modifier></type><name>slice</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>SwsFilterDescriptor</name></name> <modifier>*</modifier></type><name>desc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>pal_yuv</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>pal_rgb</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>uint2float_lut</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>lastInLumBuf</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>lastInChrBuf</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>formatConvBuffer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>needAlpha</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>hLumFilter</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>hChrFilter</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>vLumFilter</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>vChrFilter</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>hLumFilterPos</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>hChrFilterPos</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>vLumFilterPos</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>vChrFilterPos</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>hLumFilterSize</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>hChrFilterSize</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>vLumFilterSize</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>vChrFilterSize</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>lumMmxextFilterCodeSize</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>chrMmxextFilterCodeSize</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>lumMmxextFilterCode</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>chrMmxextFilterCode</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>canMMXEXTBeUsed</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>warned_unuseable_bilinear</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dstY</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>yuvTable</name></decl>;</decl_stmt> 

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><name>table_gV</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">256</literal> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>YUVRGB_TABLE_HEADROOM</name></expr>]</index></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>table_rV</name><index>[<expr><literal type="number">256</literal> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>YUVRGB_TABLE_HEADROOM</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>table_gU</name><index>[<expr><literal type="number">256</literal> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>YUVRGB_TABLE_HEADROOM</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>table_bU</name><index>[<expr><literal type="number">256</literal> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>YUVRGB_TABLE_HEADROOM</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>int32_t</name></expr></argument>, <argument><expr><name>input_rgb2yuv_table</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">16</literal><operator>+</operator><literal type="number">40</literal><operator>*</operator><literal type="number">4</literal></expr>]</index></expr>;</expr_stmt> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RY_IDX</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GY_IDX</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BY_IDX</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RU_IDX</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GU_IDX</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BU_IDX</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RV_IDX</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GV_IDX</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BV_IDX</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RGB2YUV_SHIFT</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name><name>dither_error</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>contrast</name></decl>, <name>brightness</name>, <name>saturation</name>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name><name>srcColorspaceTable</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>dstColorspaceTable</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>srcRange</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>dstRange</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>src0Alpha</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dst0Alpha</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>srcXYZ</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dstXYZ</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>src_h_chr_pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dst_h_chr_pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>src_v_chr_pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dst_v_chr_pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>yuv2rgb_y_offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>yuv2rgb_y_coeff</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>yuv2rgb_v2r_coeff</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>yuv2rgb_v2g_coeff</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>yuv2rgb_u2g_coeff</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>yuv2rgb_u2b_coeff</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RED_DITHER</name></cpp:macro> <cpp:value>"0*8"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GREEN_DITHER</name></cpp:macro> <cpp:value>"1*8"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLUE_DITHER</name></cpp:macro> <cpp:value>"2*8"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Y_COEFF</name></cpp:macro> <cpp:value>"3*8"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VR_COEFF</name></cpp:macro> <cpp:value>"4*8"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UB_COEFF</name></cpp:macro> <cpp:value>"5*8"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VG_COEFF</name></cpp:macro> <cpp:value>"6*8"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UG_COEFF</name></cpp:macro> <cpp:value>"7*8"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Y_OFFSET</name></cpp:macro> <cpp:value>"8*8"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>U_OFFSET</name></cpp:macro> <cpp:value>"9*8"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V_OFFSET</name></cpp:macro> <cpp:value>"10*8"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LUM_MMX_FILTER_OFFSET</name></cpp:macro> <cpp:value>"11*8"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHR_MMX_FILTER_OFFSET</name></cpp:macro> <cpp:value>"11*8+4*4*"AV_STRINGIFY(MAX_FILTER_SIZE)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DSTW_OFFSET</name></cpp:macro> <cpp:value>"11*8+4*4*"AV_STRINGIFY(MAX_FILTER_SIZE)"*2"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ESP_OFFSET</name></cpp:macro> <cpp:value>"11*8+4*4*"AV_STRINGIFY(MAX_FILTER_SIZE)"*2+8"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VROUNDER_OFFSET</name></cpp:macro> <cpp:value>"11*8+4*4*"AV_STRINGIFY(MAX_FILTER_SIZE)"*2+16"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>U_TEMP</name></cpp:macro> <cpp:value>"11*8+4*4*"AV_STRINGIFY(MAX_FILTER_SIZE)"*2+24"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V_TEMP</name></cpp:macro> <cpp:value>"11*8+4*4*"AV_STRINGIFY(MAX_FILTER_SIZE)"*2+32"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Y_TEMP</name></cpp:macro> <cpp:value>"11*8+4*4*"AV_STRINGIFY(MAX_FILTER_SIZE)"*2+40"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALP_MMX_FILTER_OFFSET</name></cpp:macro> <cpp:value>"11*8+4*4*"AV_STRINGIFY(MAX_FILTER_SIZE)"*2+48"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UV_OFF_PX</name></cpp:macro> <cpp:value>"11*8+4*4*"AV_STRINGIFY(MAX_FILTER_SIZE)"*3+48"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UV_OFF_BYTE</name></cpp:macro> <cpp:value>"11*8+4*4*"AV_STRINGIFY(MAX_FILTER_SIZE)"*3+56"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DITHER16</name></cpp:macro> <cpp:value>"11*8+4*4*"AV_STRINGIFY(MAX_FILTER_SIZE)"*3+64"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DITHER32</name></cpp:macro> <cpp:value>"11*8+4*4*"AV_STRINGIFY(MAX_FILTER_SIZE)"*3+80"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DITHER32_INT</name></cpp:macro> <cpp:value>(11*8+4*4*MAX_FILTER_SIZE*3+80)</cpp:value></cpp:define> 

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>redDither</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>greenDither</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>blueDither</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>yCoeff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>vrCoeff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>ubCoeff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>vgCoeff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>ugCoeff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>yOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>uOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>vOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name><name>lumMmxFilter</name><index>[<expr><literal type="number">4</literal> <operator>*</operator> <name>MAX_FILTER_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name><name>chrMmxFilter</name><index>[<expr><literal type="number">4</literal> <operator>*</operator> <name>MAX_FILTER_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dstW</name></decl>;</decl_stmt> 

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>esp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>vRounder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>u_temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>v_temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>y_temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name><name>alpMmxFilter</name><index>[<expr><literal type="number">4</literal> <operator>*</operator> <name>MAX_FILTER_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>ptrdiff_t</name></expr></argument>, <argument><expr><name>uv_off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>ptrdiff_t</name></expr></argument>, <argument><expr><name>uv_offx2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>uint16_t</name></expr></argument>, <argument><expr><name>dither16</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">8</literal></expr>]</index></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>uint32_t</name></expr></argument>, <argument><expr><name>dither32</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">8</literal></expr>]</index></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>chrDither8</name></decl>, <modifier>*</modifier><name>lumDither8</name>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_ALTIVEC</name></expr></cpp:if>

<decl_stmt><decl><type><name>vector</name> <name>signed</name> <name>short</name></type> <name>CY</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>signed</name> <name>short</name></type> <name>CRV</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>signed</name> <name>short</name></type> <name>CBU</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>signed</name> <name>short</name></type> <name>CGU</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>signed</name> <name>short</name></type> <name>CGV</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>signed</name> <name>short</name></type> <name>OY</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>CSHIFT</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>signed</name> <name>short</name> <modifier>*</modifier></type><name>vYCoeffsBank</name></decl>, <modifier>*</modifier><name>vCCoeffsBank</name>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>int</name></type> <name>use_mmx_vfilter</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XYZ_GAMMA</name></cpp:macro> <cpp:value>(2.6f)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RGB_GAMMA</name></cpp:macro> <cpp:value>(2.2f)</cpp:value></cpp:define>

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>xyzgamma</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>rgbgamma</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>xyzgammainv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>rgbgammainv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name><name>xyz2rgb_matrix</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name><name>rgb2xyz_matrix</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yuv2planar1_fn</name></type> <name>yuv2plane1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yuv2planarX_fn</name></type> <name>yuv2planeX</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yuv2interleavedX_fn</name></type> <name>yuv2nv12cX</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yuv2packed1_fn</name></type> <name>yuv2packed1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yuv2packed2_fn</name></type> <name>yuv2packed2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yuv2packedX_fn</name></type> <name>yuv2packedX</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yuv2anyX_fn</name></type> <name>yuv2anyX</name></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>lumToYV12</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src2</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src3</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>pal</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>alpToYV12</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src2</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src3</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>pal</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>chrToYV12</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dstU</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dstV</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src2</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src3</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>pal</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>readLumPlanar</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name><name>src</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>rgb2yuv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>readChrPlanar</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dstU</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dstV</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name><name>src</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>rgb2yuv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>readAlpPlanar</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name><name>src</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>rgb2yuv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>hyscale_fast</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SwsContext</name></name> <modifier>*</modifier></type><name>c</name></decl></parameter>,

<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dstWidth</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcW</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>xInc</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>hcscale_fast</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SwsContext</name></name> <modifier>*</modifier></type><name>c</name></decl></parameter>,

<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>dst1</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>dst2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dstWidth</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src2</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>srcW</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>xInc</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>hyScale</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SwsContext</name></name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dstW</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name>filterPos</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>filterSize</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>hcScale</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SwsContext</name></name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dstW</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name>filterPos</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>filterSize</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>lumConvertRange</name>)<parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>chrConvertRange</name>)<parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>dst1</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>dst2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>int</name></type> <name>needs_hcscale</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>SwsDither</name></type> <name>dither</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SwsAlphaBlend</name></type> <name>alphablend</name></decl>;</decl_stmt>

}</block></struct></type> <name>SwsContext</name>;</typedef>

<function_decl><type><name>SwsFunc</name></type> <name>ff_yuv2rgb_get_func_ptr</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_yuv2rgb_c_init_tables</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name><name>inv_table</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>fullRange</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>brightness</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>contrast</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>saturation</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_yuv2rgb_init_tables_ppc</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name><name>inv_table</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>brightness</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>contrast</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>saturation</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_updateMMXDitherTables</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dstY</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>av_cold</name> <name>void</name></type> <name>ff_sws_init_range_convert</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>SwsFunc</name></type> <name>ff_yuv2rgb_init_x86</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>SwsFunc</name></type> <name>ff_yuv2rgb_init_ppc</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>is16BPS</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>pix_fmt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name>pix_fmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>depth</name> <operator>==</operator> <literal type="number">16</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>isNBPS</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>pix_fmt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name>pix_fmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>depth</name> <operator>&gt;=</operator> <literal type="number">9</literal> <operator>&amp;&amp;</operator> <name><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>depth</name> <operator>&lt;=</operator> <literal type="number">14</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>isBE</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>pix_fmt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name>pix_fmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>desc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PIX_FMT_FLAG_BE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>isYUV</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>pix_fmt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name>pix_fmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>!</operator><operator>(</operator><name><name>desc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PIX_FMT_FLAG_RGB</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>desc</name><operator>-&gt;</operator><name>nb_components</name></name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>isPlanarYUV</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>pix_fmt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name>pix_fmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><operator>(</operator><name><name>desc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PIX_FMT_FLAG_PLANAR</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>isYUV</name><argument_list>(<argument><expr><name>pix_fmt</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>isSemiPlanarYUV</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>pix_fmt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name>pix_fmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><call><name>isPlanarYUV</name><argument_list>(<argument><expr><name>pix_fmt</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>plane</name> <operator>==</operator> <name><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>plane</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>isRGB</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>pix_fmt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name>pix_fmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name><name>desc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PIX_FMT_FLAG_RGB</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>isGray</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>pix_fmt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name>pix_fmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>!</operator><operator>(</operator><name><name>desc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PIX_FMT_FLAG_PAL</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>!</operator><operator>(</operator><name><name>desc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PIX_FMT_FLAG_HWACCEL</name><operator>)</operator> <operator>&amp;&amp;</operator>

<name><name>desc</name><operator>-&gt;</operator><name>nb_components</name></name> <operator>&lt;=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator>

<name>pix_fmt</name> <operator>!=</operator> <name>AV_PIX_FMT_MONOBLACK</name> <operator>&amp;&amp;</operator>

<name>pix_fmt</name> <operator>!=</operator> <name>AV_PIX_FMT_MONOWHITE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>isRGBinInt</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>pix_fmt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>pix_fmt</name> <operator>==</operator> <name>AV_PIX_FMT_RGB48BE</name> <operator>||</operator>

<name>pix_fmt</name> <operator>==</operator> <name>AV_PIX_FMT_RGB48LE</name> <operator>||</operator>

<name>pix_fmt</name> <operator>==</operator> <name>AV_PIX_FMT_RGB32</name> <operator>||</operator>

<name>pix_fmt</name> <operator>==</operator> <name>AV_PIX_FMT_RGB32_1</name> <operator>||</operator>

<name>pix_fmt</name> <operator>==</operator> <name>AV_PIX_FMT_RGB24</name> <operator>||</operator>

<name>pix_fmt</name> <operator>==</operator> <name>AV_PIX_FMT_RGB565BE</name> <operator>||</operator>

<name>pix_fmt</name> <operator>==</operator> <name>AV_PIX_FMT_RGB565LE</name> <operator>||</operator>

<name>pix_fmt</name> <operator>==</operator> <name>AV_PIX_FMT_RGB555BE</name> <operator>||</operator>

<name>pix_fmt</name> <operator>==</operator> <name>AV_PIX_FMT_RGB555LE</name> <operator>||</operator>

<name>pix_fmt</name> <operator>==</operator> <name>AV_PIX_FMT_RGB444BE</name> <operator>||</operator>

<name>pix_fmt</name> <operator>==</operator> <name>AV_PIX_FMT_RGB444LE</name> <operator>||</operator>

<name>pix_fmt</name> <operator>==</operator> <name>AV_PIX_FMT_RGB8</name> <operator>||</operator>

<name>pix_fmt</name> <operator>==</operator> <name>AV_PIX_FMT_RGB4</name> <operator>||</operator>

<name>pix_fmt</name> <operator>==</operator> <name>AV_PIX_FMT_RGB4_BYTE</name> <operator>||</operator>

<name>pix_fmt</name> <operator>==</operator> <name>AV_PIX_FMT_RGBA64BE</name> <operator>||</operator>

<name>pix_fmt</name> <operator>==</operator> <name>AV_PIX_FMT_RGBA64LE</name> <operator>||</operator>

<name>pix_fmt</name> <operator>==</operator> <name>AV_PIX_FMT_MONOBLACK</name> <operator>||</operator>

<name>pix_fmt</name> <operator>==</operator> <name>AV_PIX_FMT_MONOWHITE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>isBGRinInt</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>pix_fmt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>pix_fmt</name> <operator>==</operator> <name>AV_PIX_FMT_BGR48BE</name> <operator>||</operator>

<name>pix_fmt</name> <operator>==</operator> <name>AV_PIX_FMT_BGR48LE</name> <operator>||</operator>

<name>pix_fmt</name> <operator>==</operator> <name>AV_PIX_FMT_BGR32</name> <operator>||</operator>

<name>pix_fmt</name> <operator>==</operator> <name>AV_PIX_FMT_BGR32_1</name> <operator>||</operator>

<name>pix_fmt</name> <operator>==</operator> <name>AV_PIX_FMT_BGR24</name> <operator>||</operator>

<name>pix_fmt</name> <operator>==</operator> <name>AV_PIX_FMT_BGR565BE</name> <operator>||</operator>

<name>pix_fmt</name> <operator>==</operator> <name>AV_PIX_FMT_BGR565LE</name> <operator>||</operator>

<name>pix_fmt</name> <operator>==</operator> <name>AV_PIX_FMT_BGR555BE</name> <operator>||</operator>

<name>pix_fmt</name> <operator>==</operator> <name>AV_PIX_FMT_BGR555LE</name> <operator>||</operator>

<name>pix_fmt</name> <operator>==</operator> <name>AV_PIX_FMT_BGR444BE</name> <operator>||</operator>

<name>pix_fmt</name> <operator>==</operator> <name>AV_PIX_FMT_BGR444LE</name> <operator>||</operator>

<name>pix_fmt</name> <operator>==</operator> <name>AV_PIX_FMT_BGR8</name> <operator>||</operator>

<name>pix_fmt</name> <operator>==</operator> <name>AV_PIX_FMT_BGR4</name> <operator>||</operator>

<name>pix_fmt</name> <operator>==</operator> <name>AV_PIX_FMT_BGR4_BYTE</name> <operator>||</operator>

<name>pix_fmt</name> <operator>==</operator> <name>AV_PIX_FMT_BGRA64BE</name> <operator>||</operator>

<name>pix_fmt</name> <operator>==</operator> <name>AV_PIX_FMT_BGRA64LE</name> <operator>||</operator>

<name>pix_fmt</name> <operator>==</operator> <name>AV_PIX_FMT_MONOBLACK</name> <operator>||</operator>

<name>pix_fmt</name> <operator>==</operator> <name>AV_PIX_FMT_MONOWHITE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>isBayer</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>pix_fmt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name>pix_fmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>!</operator><operator>!</operator><operator>(</operator><name><name>desc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PIX_FMT_FLAG_BAYER</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>isAnyRGB</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>pix_fmt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name>pix_fmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name><name>desc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PIX_FMT_FLAG_RGB</name><operator>)</operator> <operator>||</operator>

<name>pix_fmt</name> <operator>==</operator> <name>AV_PIX_FMT_MONOBLACK</name> <operator>||</operator> <name>pix_fmt</name> <operator>==</operator> <name>AV_PIX_FMT_MONOWHITE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>isFloat</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>pix_fmt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name>pix_fmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>desc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PIX_FMT_FLAG_FLOAT</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>isALPHA</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>pix_fmt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name>pix_fmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pix_fmt</name> <operator>==</operator> <name>AV_PIX_FMT_PAL8</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name><name>desc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PIX_FMT_FLAG_ALPHA</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>isPacked</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>pix_fmt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name>pix_fmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name><name>desc</name><operator>-&gt;</operator><name>nb_components</name></name> <operator>&gt;=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>desc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PIX_FMT_FLAG_PLANAR</name><operator>)</operator><operator>)</operator> <operator>||</operator>

<name>pix_fmt</name> <operator>==</operator> <name>AV_PIX_FMT_PAL8</name> <operator>||</operator>

<name>pix_fmt</name> <operator>==</operator> <name>AV_PIX_FMT_MONOBLACK</name> <operator>||</operator> <name>pix_fmt</name> <operator>==</operator> <name>AV_PIX_FMT_MONOWHITE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>isPlanar</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>pix_fmt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name>pix_fmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name><name>desc</name><operator>-&gt;</operator><name>nb_components</name></name> <operator>&gt;=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>desc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PIX_FMT_FLAG_PLANAR</name><operator>)</operator><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>isPackedRGB</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>pix_fmt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name>pix_fmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><operator>(</operator><name><name>desc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>AV_PIX_FMT_FLAG_PLANAR</name> <operator>|</operator> <name>AV_PIX_FMT_FLAG_RGB</name><operator>)</operator><operator>)</operator> <operator>==</operator> <name>AV_PIX_FMT_FLAG_RGB</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>isPlanarRGB</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>pix_fmt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name>pix_fmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><operator>(</operator><name><name>desc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>AV_PIX_FMT_FLAG_PLANAR</name> <operator>|</operator> <name>AV_PIX_FMT_FLAG_RGB</name><operator>)</operator><operator>)</operator> <operator>==</operator>

<operator>(</operator><name>AV_PIX_FMT_FLAG_PLANAR</name> <operator>|</operator> <name>AV_PIX_FMT_FLAG_RGB</name><operator>)</operator><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>usePal</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>pix_fmt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name>pix_fmt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_PIX_FMT_PAL8</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_BGR4_BYTE</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_BGR8</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_GRAY8</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_RGB4_BYTE</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_RGB8</name></expr>:</case>

<return>return <expr><literal type="number">1</literal></expr>;</return>

<default>default:</default>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>uint64_t</name></type> <name><name>ff_dither4</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>uint64_t</name></type> <name><name>ff_dither8</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>ff_dither_2x2_4</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>ff_dither_2x2_8</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>ff_dither_4x4_16</name><index>[<expr><literal type="number">5</literal></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>ff_dither_8x8_32</name><index>[<expr><literal type="number">9</literal></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>ff_dither_8x8_73</name><index>[<expr><literal type="number">9</literal></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>ff_dither_8x8_128</name><index>[<expr><literal type="number">9</literal></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>ff_dither_8x8_220</name><index>[<expr><literal type="number">9</literal></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>int32_t</name></type> <name><name>ff_yuv2rgb_coeffs</name><index>[<expr><literal type="number">11</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>ff_sws_context_class</name></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>ff_get_unscaled_swscale</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_get_unscaled_swscale_ppc</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_get_unscaled_swscale_arm</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_get_unscaled_swscale_aarch64</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>SwsFunc</name></type> <name>ff_getSwsFunc</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_sws_init_input_funcs</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_sws_init_output_funcs</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>,

<parameter><decl><type><name>yuv2planar1_fn</name> <modifier>*</modifier></type><name>yuv2plane1</name></decl></parameter>,

<parameter><decl><type><name>yuv2planarX_fn</name> <modifier>*</modifier></type><name>yuv2planeX</name></decl></parameter>,

<parameter><decl><type><name>yuv2interleavedX_fn</name> <modifier>*</modifier></type><name>yuv2nv12cX</name></decl></parameter>,

<parameter><decl><type><name>yuv2packed1_fn</name> <modifier>*</modifier></type><name>yuv2packed1</name></decl></parameter>,

<parameter><decl><type><name>yuv2packed2_fn</name> <modifier>*</modifier></type><name>yuv2packed2</name></decl></parameter>,

<parameter><decl><type><name>yuv2packedX_fn</name> <modifier>*</modifier></type><name>yuv2packedX</name></decl></parameter>,

<parameter><decl><type><name>yuv2anyX_fn</name> <modifier>*</modifier></type><name>yuv2anyX</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_sws_init_swscale_ppc</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_sws_init_swscale_vsx</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_sws_init_swscale_x86</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_sws_init_swscale_aarch64</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_sws_init_swscale_arm</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_hyscale_fast_c</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dstWidth</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcW</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>xInc</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_hcscale_fast_c</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>dst1</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>dst2</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>dstWidth</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src1</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcW</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>xInc</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_init_hscaler_mmxext</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>dstW</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>xInc</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>filterCode</name></decl></parameter>,

<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>filterPos</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>numSplits</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_hyscale_fast_mmxext</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>dstWidth</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>srcW</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>xInc</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_hcscale_fast_mmxext</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>dst1</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>dst2</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>dstWidth</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src1</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcW</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>xInc</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name><name>struct</name> <name>SwsContext</name></name> <modifier>*</modifier></type><name>sws_alloc_set_opts</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>srcW</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcH</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>srcFormat</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>dstW</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dstH</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>dstFormat</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>double</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_sws_alphablendaway</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name><name>src</name><index>[]</index></name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name><name>srcStride</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcSliceY</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcSliceH</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>dst</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><name>dstStride</name><index>[]</index></name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>fillPlane16</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>plane</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>alpha</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bits</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>big_endian</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>plane</name> <operator>+</operator> <name>stride</name> <operator>*</operator> <name>y</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><ternary><condition><expr><name>alpha</name></expr> ?</condition><then> <expr><literal type="number">0xFFFF</literal><operator>&gt;&gt;</operator><operator>(</operator><literal type="number">16</literal><operator>-</operator><name>bits</name><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><operator>(</operator><name>bits</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></else></ternary></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILL</name><parameter_list>(<parameter><type><name>wfunc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (j = 0; j &lt; width; j++) {wfunc(ptr+2*j, v);}</cpp:value></cpp:define>

<if_stmt><if>if <condition>(<expr><name>big_endian</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>FILL</name><argument_list>(<argument><expr><name>AV_WB16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>FILL</name><argument_list>(<argument><expr><name>AV_WL16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_SLICE_PLANES</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>SwsPlane</name>

<block>{

<decl_stmt><decl><type><name>int</name></type> <name>available_lines</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>sliceY</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>sliceH</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>line</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt> 

}</block></struct></type> <name>SwsPlane</name>;</typedef>

<typedef>typedef <type><struct>struct <name>SwsSlice</name>

<block>{

<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>h_chr_sub_sample</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>v_chr_sub_sample</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>is_ring</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>should_free_lines</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>fmt</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>SwsPlane</name></type> <name><name>plane</name><index>[<expr><name>MAX_SLICE_PLANES</name></expr>]</index></name></decl>;</decl_stmt> 

}</block></struct></type> <name>SwsSlice</name>;</typedef>

<typedef>typedef <type><struct>struct <name>SwsFilterDescriptor</name>

<block>{

<decl_stmt><decl><type><name>SwsSlice</name> <modifier>*</modifier></type><name>src</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>SwsSlice</name> <modifier>*</modifier></type><name>dst</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>alpha</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>instance</name></decl>;</decl_stmt> 

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>process</name>)<parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>SwsFilterDescriptor</name></name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sliceY</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sliceH</name></decl></parameter>)</parameter_list>;</function_decl>

}</block></struct></type> <name>SwsFilterDescriptor</name>;</typedef>

<function_decl><type><name>int</name></type> <name>ff_init_slice_from_src</name><parameter_list>(<parameter><decl><type><name>SwsSlice</name> <modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>src</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><name>stride</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcW</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lumY</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lumH</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>chrY</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>chrH</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>relative</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_init_filters</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_free_filters</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_rotate_slice</name><parameter_list>(<parameter><decl><type><name>SwsSlice</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lum</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>chr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_init_gamma_convert</name><parameter_list>(<parameter><decl><type><name>SwsFilterDescriptor</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>SwsSlice</name> <modifier>*</modifier></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>table</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_init_desc_fmt_convert</name><parameter_list>(<parameter><decl><type><name>SwsFilterDescriptor</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>SwsSlice</name> <modifier>*</modifier></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>SwsSlice</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>pal</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_init_desc_hscale</name><parameter_list>(<parameter><decl><type><name>SwsFilterDescriptor</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>SwsSlice</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>SwsSlice</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type> <name>filter_pos</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>filter_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>xInc</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_init_desc_cfmt_convert</name><parameter_list>(<parameter><decl><type><name>SwsFilterDescriptor</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>SwsSlice</name> <modifier>*</modifier></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>SwsSlice</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>pal</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_init_desc_chscale</name><parameter_list>(<parameter><decl><type><name>SwsFilterDescriptor</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>SwsSlice</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>SwsSlice</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type> <name>filter_pos</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>filter_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>xInc</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_init_desc_no_chr</name><parameter_list>(<parameter><decl><type><name>SwsFilterDescriptor</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>SwsSlice</name> <modifier>*</modifier></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>SwsSlice</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_init_vscale</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>SwsFilterDescriptor</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>SwsSlice</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>SwsSlice</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_init_vscale_pfn</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>yuv2planar1_fn</name></type> <name>yuv2plane1</name></decl></parameter>, <parameter><decl><type><name>yuv2planarX_fn</name></type> <name>yuv2planeX</name></decl></parameter>,

<parameter><decl><type><name>yuv2interleavedX_fn</name></type> <name>yuv2nv12cX</name></decl></parameter>, <parameter><decl><type><name>yuv2packed1_fn</name></type> <name>yuv2packed1</name></decl></parameter>, <parameter><decl><type><name>yuv2packed2_fn</name></type> <name>yuv2packed2</name></decl></parameter>,

<parameter><decl><type><name>yuv2packedX_fn</name></type> <name>yuv2packedX</name></decl></parameter>, <parameter><decl><type><name>yuv2anyX_fn</name></type> <name>yuv2anyX</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>use_mmx</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_LINES_AHEAD</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

</unit>
