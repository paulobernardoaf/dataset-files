<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libswscale\swscale.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avutil.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/bswap.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/cpu.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/imgutils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mathematics.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixdesc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rgb2rgb.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"swscale_internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"swscale.h"</cpp:file></cpp:include>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><specifier>const</specifier> <name>uint8_t</name></expr></argument>, <argument><expr><name>ff_dither_8x8_128</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">9</literal></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index> <operator>=</operator> <block>{

<expr><block>{ <expr><literal type="number">36</literal></expr>, <expr><literal type="number">68</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><literal type="number">92</literal></expr>, <expr><literal type="number">34</literal></expr>, <expr><literal type="number">66</literal></expr>, <expr><literal type="number">58</literal></expr>, <expr><literal type="number">90</literal></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="number">100</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">124</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">98</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">122</literal></expr>, <expr><literal type="number">26</literal></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="number">52</literal></expr>, <expr><literal type="number">84</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">76</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><literal type="number">82</literal></expr>, <expr><literal type="number">42</literal></expr>, <expr><literal type="number">74</literal></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="number">116</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">108</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">114</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">106</literal></expr>, <expr><literal type="number">10</literal></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="number">32</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">88</literal></expr>, <expr><literal type="number">38</literal></expr>, <expr><literal type="number">70</literal></expr>, <expr><literal type="number">62</literal></expr>, <expr><literal type="number">94</literal></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="number">96</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">120</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">102</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">126</literal></expr>, <expr><literal type="number">30</literal></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="number">48</literal></expr>, <expr><literal type="number">80</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">72</literal></expr>, <expr><literal type="number">54</literal></expr>, <expr><literal type="number">86</literal></expr>, <expr><literal type="number">46</literal></expr>, <expr><literal type="number">78</literal></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="number">112</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">104</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">118</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">110</literal></expr>, <expr><literal type="number">14</literal></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="number">36</literal></expr>, <expr><literal type="number">68</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><literal type="number">92</literal></expr>, <expr><literal type="number">34</literal></expr>, <expr><literal type="number">66</literal></expr>, <expr><literal type="number">58</literal></expr>, <expr><literal type="number">90</literal></expr>, }</block></expr>,

}</block></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></expr></argument>, <argument><expr><name>sws_pb_64</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">8</literal></expr>]</index> <operator>=</operator> <block>{

<expr><literal type="number">64</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">64</literal></expr>

}</block></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>fillPlane</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>plane</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>plane</name> <operator>+</operator> <name>stride</name> <operator>*</operator> <name>y</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hScale16To19_c</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dstW</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>_src</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name>filterPos</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>filterSize</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>srcFormat</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>int32_t</name> <operator>*</operator><operator>)</operator> <name>_dst</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator> <name>_src</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bits</name> <init>= <expr><name><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>depth</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sh</name> <init>= <expr><name>bits</name> <operator>-</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>isAnyRGB</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>srcFormat</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>c</name><operator>-&gt;</operator><name>srcFormat</name></name><operator>==</operator><name>AV_PIX_FMT_PAL8</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>depth</name><operator>&lt;</operator><literal type="number">16</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>sh</name> <operator>=</operator> <literal type="number">9</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>desc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PIX_FMT_FLAG_FLOAT</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>sh</name> <operator>=</operator> <literal type="number">16</literal> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dstW</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>srcPos</name> <init>= <expr><name><name>filterPos</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>val</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>filterSize</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>val</name> <operator>+=</operator> <name><name>src</name><index>[<expr><name>srcPos</name> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>*</operator> <name><name>filter</name><index>[<expr><name>filterSize</name> <operator>*</operator> <name>i</name> <operator>+</operator> <name>j</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>val</name> <operator>&gt;&gt;</operator> <name>sh</name></expr></argument>, <argument><expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">19</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hScale16To15_c</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dstW</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>_src</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name>filterPos</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>filterSize</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>srcFormat</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator> <name>_src</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sh</name> <init>= <expr><name><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>depth</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>sh</name><operator>&lt;</operator><literal type="number">15</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>sh</name> <operator>=</operator> <ternary><condition><expr><call><name>isAnyRGB</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>srcFormat</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>c</name><operator>-&gt;</operator><name>srcFormat</name></name><operator>==</operator><name>AV_PIX_FMT_PAL8</name></expr> ?</condition><then> <expr><literal type="number">13</literal></expr> </then><else>: <expr><operator>(</operator><name><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>depth</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>desc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PIX_FMT_FLAG_FLOAT</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>sh</name> <operator>=</operator> <literal type="number">16</literal> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dstW</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>srcPos</name> <init>= <expr><name><name>filterPos</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>val</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>filterSize</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>val</name> <operator>+=</operator> <name><name>src</name><index>[<expr><name>srcPos</name> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>*</operator> <name><name>filter</name><index>[<expr><name>filterSize</name> <operator>*</operator> <name>i</name> <operator>+</operator> <name>j</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>val</name> <operator>&gt;&gt;</operator> <name>sh</name></expr></argument>, <argument><expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hScale8To15_c</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dstW</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name>filterPos</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>filterSize</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dstW</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>srcPos</name> <init>= <expr><name><name>filterPos</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>val</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>filterSize</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>val</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name><name>src</name><index>[<expr><name>srcPos</name> <operator>+</operator> <name>j</name></expr>]</index></name><operator>)</operator> <operator>*</operator> <name><name>filter</name><index>[<expr><name>filterSize</name> <operator>*</operator> <name>i</name> <operator>+</operator> <name>j</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>val</name> <operator>&gt;&gt;</operator> <literal type="number">7</literal></expr></argument>, <argument><expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hScale8To19_c</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dstW</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name>filterPos</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>filterSize</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>int32_t</name> <operator>*</operator><operator>)</operator> <name>_dst</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dstW</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>srcPos</name> <init>= <expr><name><name>filterPos</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>val</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>filterSize</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>val</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name><name>src</name><index>[<expr><name>srcPos</name> <operator>+</operator> <name>j</name></expr>]</index></name><operator>)</operator> <operator>*</operator> <name><name>filter</name><index>[<expr><name>filterSize</name> <operator>*</operator> <name>i</name> <operator>+</operator> <name>j</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>val</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">19</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>chrRangeToJpeg_c</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>dstU</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>dstV</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>dstU</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>dstU</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">30775</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">4663</literal> <operator>-</operator> <literal type="number">9289992</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">12</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>dstV</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>dstV</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">30775</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">4663</literal> <operator>-</operator> <literal type="number">9289992</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">12</literal></expr>;</expr_stmt> 

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>chrRangeFromJpeg_c</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>dstU</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>dstV</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>dstU</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dstU</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <literal type="number">1799</literal> <operator>+</operator> <literal type="number">4081085</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">11</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>dstV</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dstV</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <literal type="number">1799</literal> <operator>+</operator> <literal type="number">4081085</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">11</literal></expr>;</expr_stmt> 

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>lumRangeToJpeg_c</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">30189</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">19077</literal> <operator>-</operator> <literal type="number">39057361</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>lumRangeFromJpeg_c</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <literal type="number">14071</literal> <operator>+</operator> <literal type="number">33561947</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>chrRangeToJpeg16_c</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>_dstU</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>_dstV</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>dstU</name> <init>= <expr><operator>(</operator><name>int32_t</name> <operator>*</operator><operator>)</operator> <name>_dstU</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>dstV</name> <init>= <expr><operator>(</operator><name>int32_t</name> <operator>*</operator><operator>)</operator> <name>_dstV</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>dstU</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>dstU</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">30775</literal> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">4663</literal> <operator>-</operator> <operator>(</operator><literal type="number">9289992</literal> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">12</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>dstV</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>dstV</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">30775</literal> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">4663</literal> <operator>-</operator> <operator>(</operator><literal type="number">9289992</literal> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">12</literal></expr>;</expr_stmt> 

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>chrRangeFromJpeg16_c</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>_dstU</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>_dstV</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>dstU</name> <init>= <expr><operator>(</operator><name>int32_t</name> <operator>*</operator><operator>)</operator> <name>_dstU</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>dstV</name> <init>= <expr><operator>(</operator><name>int32_t</name> <operator>*</operator><operator>)</operator> <name>_dstV</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>dstU</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dstU</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <literal type="number">1799</literal> <operator>+</operator> <operator>(</operator><literal type="number">4081085</literal> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">11</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>dstV</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dstV</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <literal type="number">1799</literal> <operator>+</operator> <operator>(</operator><literal type="number">4081085</literal> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">11</literal></expr>;</expr_stmt> 

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>lumRangeToJpeg16_c</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>int32_t</name> <operator>*</operator><operator>)</operator> <name>_dst</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">30189</literal> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">4769U</literal> <operator>-</operator> <operator>(</operator><literal type="number">39057361</literal> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">12</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>lumRangeFromJpeg16_c</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>int32_t</name> <operator>*</operator><operator>)</operator> <name>_dst</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name><operator>*</operator><operator>(</operator><literal type="number">14071</literal><operator>/</operator><literal type="number">4</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><literal type="number">33561947</literal><operator>&lt;&lt;</operator><literal type="number">4</literal><operator>)</operator><operator>/</operator><literal type="number">4</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">12</literal></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEBUG_SWSCALE_BUFFERS</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEBUG_BUFFERS</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (DEBUG_SWSCALE_BUFFERS) av_log(c, AV_LOG_DEBUG, __VA_ARGS__)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>swscale</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name><name>src</name><index>[]</index></name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name><name>srcStride</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcSliceY</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>srcSliceH</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>dst</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><name>dstStride</name><index>[]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>dstW</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>dstW</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>dstH</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>dstH</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>dstFormat</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>dstFormat</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>flags</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>vLumFilterPos</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>vLumFilterPos</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>vChrFilterPos</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>vChrFilterPos</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>vLumFilterSize</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>vLumFilterSize</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>vChrFilterSize</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>vChrFilterSize</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yuv2planar1_fn</name></type> <name>yuv2plane1</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>yuv2plane1</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yuv2planarX_fn</name></type> <name>yuv2planeX</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>yuv2planeX</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yuv2interleavedX_fn</name></type> <name>yuv2nv12cX</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>yuv2nv12cX</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yuv2packed1_fn</name></type> <name>yuv2packed1</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>yuv2packed1</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yuv2packed2_fn</name></type> <name>yuv2packed2</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>yuv2packed2</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yuv2packedX_fn</name></type> <name>yuv2packedX</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>yuv2packedX</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yuv2anyX_fn</name></type> <name>yuv2anyX</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>yuv2anyX</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>chrSrcSliceY</name> <init>= <expr><name>srcSliceY</name> <operator>&gt;&gt;</operator> <name><name>c</name><operator>-&gt;</operator><name>chrSrcVSubSample</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>chrSrcSliceH</name> <init>= <expr><call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name>srcSliceH</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>chrSrcVSubSample</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>should_dither</name> <init>= <expr><call><name>isNBPS</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>srcFormat</name></name></expr></argument>)</argument_list></call> <operator>||</operator>

<call><name>is16BPS</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>srcFormat</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>lastDstY</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dstY</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>dstY</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>lastInLumBuf</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>lastInLumBuf</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>lastInChrBuf</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>lastInChrBuf</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>lumStart</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>lumEnd</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>descIndex</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>chrStart</name> <init>= <expr><name>lumEnd</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>chrEnd</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>descIndex</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>vStart</name> <init>= <expr><name>chrEnd</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>vEnd</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>numDesc</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SwsSlice</name> <modifier>*</modifier></type><name>src_slice</name> <init>= <expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>slice</name><index>[<expr><name>lumStart</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SwsSlice</name> <modifier>*</modifier></type><name>hout_slice</name> <init>= <expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>slice</name><index>[<expr><name><name>c</name><operator>-&gt;</operator><name>numSlice</name></name><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SwsSlice</name> <modifier>*</modifier></type><name>vout_slice</name> <init>= <expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>slice</name><index>[<expr><name><name>c</name><operator>-&gt;</operator><name>numSlice</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SwsFilterDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>desc</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>needAlpha</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>needAlpha</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>hasLumHoles</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>hasChrHoles</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>isPacked</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>srcFormat</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator>

<name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator>

<name><name>src</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>srcStride</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator>

<name><name>srcStride</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator>

<name><name>srcStride</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>srcStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>srcStride</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>vChrDrop</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>srcStride</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>vChrDrop</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEBUG_BUFFERS</name><argument_list>(<argument><expr><literal type="string">"swscale() %p[%d] %p[%d] %p[%d] %p[%d] -&gt; %p[%d] %p[%d] %p[%d] %p[%d]\n"</literal></expr></argument>,

<argument><expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>srcStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>srcStride</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>srcStride</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>srcStride</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>dstStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>dst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>dstStride</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>dst</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>dstStride</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>dst</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>dstStride</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEBUG_BUFFERS</name><argument_list>(<argument><expr><literal type="string">"srcSliceY: %d srcSliceH: %d dstY: %d dstH: %d\n"</literal></expr></argument>,

<argument><expr><name>srcSliceY</name></expr></argument>, <argument><expr><name>srcSliceH</name></expr></argument>, <argument><expr><name>dstY</name></expr></argument>, <argument><expr><name>dstH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEBUG_BUFFERS</name><argument_list>(<argument><expr><literal type="string">"vLumFilterSize: %d vChrFilterSize: %d\n"</literal></expr></argument>,

<argument><expr><name>vLumFilterSize</name></expr></argument>, <argument><expr><name>vChrFilterSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dstStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">15</literal> <operator>||</operator> <name><name>dstStride</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">15</literal> <operator>||</operator>

<name><name>dstStride</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">15</literal> <operator>||</operator> <name><name>dstStride</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">15</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>warnedAlready</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>SWS_PRINT_INFO</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>warnedAlready</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,

<argument><expr><literal type="string">"Warning: dstStride is not aligned!\n"</literal>

<literal type="string">" -&gt;cannot do aligned memory accesses anymore\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>warnedAlready</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">15</literal> <operator>||</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><name><name>dst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">15</literal> <operator>||</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><name><name>dst</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">15</literal>

<operator>||</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">15</literal> <operator>||</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">15</literal> <operator>||</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">15</literal>

<operator>||</operator> <name><name>dstStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">15</literal> <operator>||</operator> <name><name>dstStride</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">15</literal> <operator>||</operator> <name><name>dstStride</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">15</literal> <operator>||</operator> <name><name>dstStride</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">15</literal>

<operator>||</operator> <name><name>srcStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">15</literal> <operator>||</operator> <name><name>srcStride</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">15</literal> <operator>||</operator> <name><name>srcStride</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">15</literal> <operator>||</operator> <name><name>srcStride</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">15</literal></expr>

)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>warnedAlready</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cpu_flags</name> <init>= <expr><call><name>av_get_cpu_flags</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>HAVE_MMXEXT</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>cpu_flags</name> <operator>&amp;</operator> <name>AV_CPU_FLAG_SSE2</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name>warnedAlready</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Warning: data is not aligned! This can lead to a speed loss\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>warnedAlready</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>srcSliceY</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>dstY</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>lastInLumBuf</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>lastInChrBuf</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>should_dither</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>chrDither8</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>lumDither8</name></name> <operator>=</operator> <name>sws_pb_64</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>lastDstY</name> <operator>=</operator> <name>dstY</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_init_vscale_pfn</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>yuv2plane1</name></expr></argument>, <argument><expr><name>yuv2planeX</name></expr></argument>, <argument><expr><name>yuv2nv12cX</name></expr></argument>,

<argument><expr><name>yuv2packed1</name></expr></argument>, <argument><expr><name>yuv2packed2</name></expr></argument>, <argument><expr><name>yuv2packedX</name></expr></argument>, <argument><expr><name>yuv2anyX</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>use_mmx_vfilter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_init_slice_from_src</name><argument_list>(<argument><expr><name>src_slice</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>*</operator><operator>)</operator><name>src</name></expr></argument>, <argument><expr><name>srcStride</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>srcW</name></name></expr></argument>,

<argument><expr><name>srcSliceY</name></expr></argument>, <argument><expr><name>srcSliceH</name></expr></argument>, <argument><expr><name>chrSrcSliceY</name></expr></argument>, <argument><expr><name>chrSrcSliceH</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_init_slice_from_src</name><argument_list>(<argument><expr><name>vout_slice</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>*</operator><operator>)</operator><name>dst</name></expr></argument>, <argument><expr><name>dstStride</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>dstW</name></name></expr></argument>,

<argument><expr><name>dstY</name></expr></argument>, <argument><expr><name>dstH</name></expr></argument>, <argument><expr><name>dstY</name> <operator>&gt;&gt;</operator> <name><name>c</name><operator>-&gt;</operator><name>chrDstVSubSample</name></name></expr></argument>,

<argument><expr><call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name>dstH</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>chrDstVSubSample</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>srcSliceY</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>hout_slice</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>sliceY</name> <operator>=</operator> <name>lastInLumBuf</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hout_slice</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>sliceY</name> <operator>=</operator> <name>lastInChrBuf</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hout_slice</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>sliceY</name> <operator>=</operator> <name>lastInChrBuf</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hout_slice</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>sliceY</name> <operator>=</operator> <name>lastInLumBuf</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hout_slice</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>sliceH</name> <operator>=</operator>

<name><name>hout_slice</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>sliceH</name> <operator>=</operator>

<name><name>hout_slice</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>sliceH</name> <operator>=</operator>

<name><name>hout_slice</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>sliceH</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hout_slice</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name>dstW</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>dstY</name> <operator>&lt;</operator> <name>dstH</name></expr>;</condition> <incr><expr><name>dstY</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>chrDstY</name> <init>= <expr><name>dstY</name> <operator>&gt;&gt;</operator> <name><name>c</name><operator>-&gt;</operator><name>chrDstVSubSample</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>use_mmx_vfilter</name><init>= <expr><name><name>c</name><operator>-&gt;</operator><name>use_mmx_vfilter</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>firstLumSrcY</name> <init>= <expr><call><name>FFMAX</name><argument_list>(<argument><expr><literal type="number">1</literal> <operator>-</operator> <name>vLumFilterSize</name></expr></argument>, <argument><expr><name><name>vLumFilterPos</name><index>[<expr><name>dstY</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>firstLumSrcY2</name> <init>= <expr><call><name>FFMAX</name><argument_list>(<argument><expr><literal type="number">1</literal> <operator>-</operator> <name>vLumFilterSize</name></expr></argument>, <argument><expr><name><name>vLumFilterPos</name><index>[<expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>dstY</name> <operator>|</operator> <operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>chrDstVSubSample</name></name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><name>dstH</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>firstChrSrcY</name> <init>= <expr><call><name>FFMAX</name><argument_list>(<argument><expr><literal type="number">1</literal> <operator>-</operator> <name>vChrFilterSize</name></expr></argument>, <argument><expr><name><name>vChrFilterPos</name><index>[<expr><name>chrDstY</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>lastLumSrcY</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>srcH</name></name></expr></argument>, <argument><expr><name>firstLumSrcY</name> <operator>+</operator> <name>vLumFilterSize</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>lastLumSrcY2</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>srcH</name></name></expr></argument>, <argument><expr><name>firstLumSrcY2</name> <operator>+</operator> <name>vLumFilterSize</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>lastChrSrcY</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>chrSrcH</name></name></expr></argument>, <argument><expr><name>firstChrSrcY</name> <operator>+</operator> <name>vChrFilterSize</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>enough_lines</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>posY</name></decl>, <decl><type ref="prev"/><name>cPosY</name></decl>, <decl><type ref="prev"/><name>firstPosY</name></decl>, <decl><type ref="prev"/><name>lastPosY</name></decl>, <decl><type ref="prev"/><name>firstCPosY</name></decl>, <decl><type ref="prev"/><name>lastCPosY</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>firstLumSrcY</name> <operator>&gt;</operator> <name>lastInLumBuf</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>hasLumHoles</name> <operator>=</operator> <name>lastInLumBuf</name> <operator>!=</operator> <name>firstLumSrcY</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>hasLumHoles</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>hout_slice</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>sliceY</name> <operator>=</operator> <name>firstLumSrcY</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hout_slice</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>sliceY</name> <operator>=</operator> <name>firstLumSrcY</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hout_slice</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>sliceH</name> <operator>=</operator>

<name><name>hout_slice</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>sliceH</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>lastInLumBuf</name> <operator>=</operator> <name>firstLumSrcY</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>firstChrSrcY</name> <operator>&gt;</operator> <name>lastInChrBuf</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>hasChrHoles</name> <operator>=</operator> <name>lastInChrBuf</name> <operator>!=</operator> <name>firstChrSrcY</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>hasChrHoles</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>hout_slice</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>sliceY</name> <operator>=</operator> <name>firstChrSrcY</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hout_slice</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>sliceY</name> <operator>=</operator> <name>firstChrSrcY</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hout_slice</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>sliceH</name> <operator>=</operator>

<name><name>hout_slice</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>sliceH</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>lastInChrBuf</name> <operator>=</operator> <name>firstChrSrcY</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>DEBUG_BUFFERS</name><argument_list>(<argument><expr><literal type="string">"dstY: %d\n"</literal></expr></argument>, <argument><expr><name>dstY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEBUG_BUFFERS</name><argument_list>(<argument><expr><literal type="string">"\tfirstLumSrcY: %d lastLumSrcY: %d lastInLumBuf: %d\n"</literal></expr></argument>,

<argument><expr><name>firstLumSrcY</name></expr></argument>, <argument><expr><name>lastLumSrcY</name></expr></argument>, <argument><expr><name>lastInLumBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEBUG_BUFFERS</name><argument_list>(<argument><expr><literal type="string">"\tfirstChrSrcY: %d lastChrSrcY: %d lastInChrBuf: %d\n"</literal></expr></argument>,

<argument><expr><name>firstChrSrcY</name></expr></argument>, <argument><expr><name>lastChrSrcY</name></expr></argument>, <argument><expr><name>lastInChrBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>enough_lines</name> <operator>=</operator> <name>lastLumSrcY2</name> <operator>&lt;</operator> <name>srcSliceY</name> <operator>+</operator> <name>srcSliceH</name> <operator>&amp;&amp;</operator>

<name>lastChrSrcY</name> <operator>&lt;</operator> <call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name>srcSliceY</name> <operator>+</operator> <name>srcSliceH</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>chrSrcVSubSample</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>enough_lines</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>lastLumSrcY</name> <operator>=</operator> <name>srcSliceY</name> <operator>+</operator> <name>srcSliceH</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>lastChrSrcY</name> <operator>=</operator> <name>chrSrcSliceY</name> <operator>+</operator> <name>chrSrcSliceH</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEBUG_BUFFERS</name><argument_list>(<argument><expr><literal type="string">"buffering slice: lastLumSrcY %d lastChrSrcY %d\n"</literal></expr></argument>,

<argument><expr><name>lastLumSrcY</name></expr></argument>, <argument><expr><name>lastChrSrcY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><operator>(</operator><name>lastLumSrcY</name> <operator>-</operator> <name>firstLumSrcY</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;=</operator> <name><name>hout_slice</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>available_lines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><operator>(</operator><name>lastChrSrcY</name> <operator>-</operator> <name>firstChrSrcY</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;=</operator> <name><name>hout_slice</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>available_lines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>posY</name> <operator>=</operator> <name><name>hout_slice</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>sliceY</name> <operator>+</operator> <name><name>hout_slice</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>sliceH</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>posY</name> <operator>&lt;=</operator> <name>lastLumSrcY</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>hasLumHoles</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>firstPosY</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>firstLumSrcY</name></expr></argument>, <argument><expr><name>posY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lastPosY</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>firstLumSrcY</name> <operator>+</operator> <name><name>hout_slice</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>available_lines</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>srcSliceY</name> <operator>+</operator> <name>srcSliceH</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>firstPosY</name> <operator>=</operator> <name>posY</name></expr>;</expr_stmt>

<expr_stmt><expr><name>lastPosY</name> <operator>=</operator> <name>lastLumSrcY</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>cPosY</name> <operator>=</operator> <name><name>hout_slice</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>sliceY</name> <operator>+</operator> <name><name>hout_slice</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>sliceH</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cPosY</name> <operator>&lt;=</operator> <name>lastChrSrcY</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>hasChrHoles</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>firstCPosY</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>firstChrSrcY</name></expr></argument>, <argument><expr><name>cPosY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lastCPosY</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>firstChrSrcY</name> <operator>+</operator> <name><name>hout_slice</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>available_lines</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name>srcSliceY</name> <operator>+</operator> <name>srcSliceH</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>chrSrcVSubSample</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>firstCPosY</name> <operator>=</operator> <name>cPosY</name></expr>;</expr_stmt>

<expr_stmt><expr><name>lastCPosY</name> <operator>=</operator> <name>lastChrSrcY</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>ff_rotate_slice</name><argument_list>(<argument><expr><name>hout_slice</name></expr></argument>, <argument><expr><name>lastPosY</name></expr></argument>, <argument><expr><name>lastCPosY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>posY</name> <operator>&lt;</operator> <name>lastLumSrcY</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>lumStart</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>lumEnd</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>desc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>process</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>desc</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>firstPosY</name></expr></argument>, <argument><expr><name>lastPosY</name> <operator>-</operator> <name>firstPosY</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>lastInLumBuf</name> <operator>=</operator> <name>lastLumSrcY</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cPosY</name> <operator>&lt;</operator> <name>lastChrSrcY</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>chrStart</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>chrEnd</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>desc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>process</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>desc</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>firstCPosY</name></expr></argument>, <argument><expr><name>lastCPosY</name> <operator>-</operator> <name>firstCPosY</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>lastInChrBuf</name> <operator>=</operator> <name>lastChrSrcY</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>enough_lines</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_MMX_INLINE</name></expr></cpp:if>

<expr_stmt><expr><call><name>ff_updateMMXDitherTables</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>dstY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>should_dither</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>chrDither8</name></name> <operator>=</operator> <name><name>ff_dither_8x8_128</name><index>[<expr><name>chrDstY</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>lumDither8</name></name> <operator>=</operator> <name><name>ff_dither_8x8_128</name><index>[<expr><name>dstY</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dstY</name> <operator>&gt;=</operator> <name>dstH</name> <operator>-</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ff_sws_init_output_funcs</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>yuv2plane1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>yuv2planeX</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>yuv2nv12cX</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>yuv2packed1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>yuv2packed2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>yuv2packedX</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>yuv2anyX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>use_mmx_vfilter</name><operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_init_vscale_pfn</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>yuv2plane1</name></expr></argument>, <argument><expr><name>yuv2planeX</name></expr></argument>, <argument><expr><name>yuv2nv12cX</name></expr></argument>,

<argument><expr><name>yuv2packed1</name></expr></argument>, <argument><expr><name>yuv2packed2</name></expr></argument>, <argument><expr><name>yuv2packedX</name></expr></argument>, <argument><expr><name>yuv2anyX</name></expr></argument>, <argument><expr><name>use_mmx_vfilter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>vStart</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>vEnd</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>desc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>process</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>desc</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>dstY</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><call><name>isPlanar</name><argument_list>(<argument><expr><name>dstFormat</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>isALPHA</name><argument_list>(<argument><expr><name>dstFormat</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>needAlpha</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>length</name> <init>= <expr><name>dstW</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>height</name> <init>= <expr><name>dstY</name> <operator>-</operator> <name>lastDstY</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>is16BPS</name><argument_list>(<argument><expr><name>dstFormat</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>isNBPS</name><argument_list>(<argument><expr><name>dstFormat</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name>dstFormat</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>fillPlane16</name><argument_list>(<argument><expr><name><name>dst</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>dstStride</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>lastDstY</name></expr></argument>,

<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>depth</name></expr></argument>,

<argument><expr><call><name>isBE</name><argument_list>(<argument><expr><name>dstFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fillPlane</name><argument_list>(<argument><expr><name><name>dst</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>dstStride</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>lastDstY</name></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_MMXEXT_INLINE</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><call><name>av_get_cpu_flags</name><argument_list>()</argument_list></call> <operator>&amp;</operator> <name>AV_CPU_FLAG_MMXEXT</name></expr>)</condition><block type="pseudo"><block_content>

<asm>__asm__ <specifier>volatile</specifier> ("sfence" ::: "memory");</asm></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>emms_c</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>dstY</name></name> <operator>=</operator> <name>dstY</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>lastInLumBuf</name></name> <operator>=</operator> <name>lastInLumBuf</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>lastInChrBuf</name></name> <operator>=</operator> <name>lastInChrBuf</name></expr>;</expr_stmt>

<return>return <expr><name>dstY</name> <operator>-</operator> <name>lastDstY</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>av_cold</name> <name>void</name></type> <name>ff_sws_init_range_convert</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>lumConvertRange</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>chrConvertRange</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>srcRange</name></name> <operator>!=</operator> <name><name>c</name><operator>-&gt;</operator><name>dstRange</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isAnyRGB</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>dstFormat</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>dstBpc</name></name> <operator>&lt;=</operator> <literal type="number">14</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>srcRange</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>lumConvertRange</name></name> <operator>=</operator> <name>lumRangeFromJpeg_c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>chrConvertRange</name></name> <operator>=</operator> <name>chrRangeFromJpeg_c</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>lumConvertRange</name></name> <operator>=</operator> <name>lumRangeToJpeg_c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>chrConvertRange</name></name> <operator>=</operator> <name>chrRangeToJpeg_c</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>srcRange</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>lumConvertRange</name></name> <operator>=</operator> <name>lumRangeFromJpeg16_c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>chrConvertRange</name></name> <operator>=</operator> <name>chrRangeFromJpeg16_c</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>lumConvertRange</name></name> <operator>=</operator> <name>lumRangeToJpeg16_c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>chrConvertRange</name></name> <operator>=</operator> <name>chrRangeToJpeg16_c</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>sws_init_swscale</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>srcFormat</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>srcFormat</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_sws_init_output_funcs</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>yuv2plane1</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>yuv2planeX</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>yuv2nv12cX</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>yuv2packed1</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>yuv2packed2</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>yuv2packedX</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>yuv2anyX</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_sws_init_input_funcs</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>srcBpc</name></name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>dstBpc</name></name> <operator>&lt;=</operator> <literal type="number">14</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>hyScale</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>hcScale</name></name> <operator>=</operator> <name>hScale8To15_c</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SWS_FAST_BILINEAR</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>hyscale_fast</name></name> <operator>=</operator> <name>ff_hyscale_fast_c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>hcscale_fast</name></name> <operator>=</operator> <name>ff_hcscale_fast_c</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>hyScale</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>hcScale</name></name> <operator>=</operator> <name>hScale8To19_c</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>hyScale</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>hcScale</name></name> <operator>=</operator> <ternary><condition><expr><name><name>c</name><operator>-&gt;</operator><name>dstBpc</name></name> <operator>&gt;</operator> <literal type="number">14</literal></expr> ?</condition><then> <expr><name>hScale16To19_c</name></expr>

</then><else>: <expr><name>hScale16To15_c</name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>ff_sws_init_range_convert</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>isGray</name><argument_list>(<argument><expr><name>srcFormat</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>isGray</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>dstFormat</name></name></expr></argument>)</argument_list></call> <operator>||</operator>

<name>srcFormat</name> <operator>==</operator> <name>AV_PIX_FMT_MONOBLACK</name> <operator>||</operator> <name>srcFormat</name> <operator>==</operator> <name>AV_PIX_FMT_MONOWHITE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>needs_hcscale</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>SwsFunc</name></type> <name>ff_getSwsFunc</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>sws_init_swscale</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ARCH_PPC</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_sws_init_swscale_ppc</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ARCH_X86</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_sws_init_swscale_x86</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ARCH_AARCH64</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_sws_init_swscale_aarch64</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ARCH_ARM</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_sws_init_swscale_arm</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>swscale</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>reset_ptr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name><name>src</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>format</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isALPHA</name><argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isPlanar</name><argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>usePal</name><argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>check_image_pointers</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>pix_fmt</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name><name>linesizes</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name>pix_fmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>plane</name> <init>= <expr><name><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>plane</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>data</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>||</operator> <operator>!</operator><name><name>linesizes</name><index>[<expr><name>plane</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>xyz12Torgb48</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SwsContext</name></name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>xp</name></decl>,<decl><type ref="prev"/><name>yp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>srcFormat</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>yp</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>yp</name><operator>&lt;</operator><name>h</name></expr>;</condition> <incr><expr><name>yp</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>xp</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>xp</name><operator>+</operator><literal type="number">2</literal><operator>&lt;</operator><name>stride</name></expr>;</condition> <incr><expr><name>xp</name><operator>+=</operator><literal type="number">3</literal></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>z</name></decl>, <decl><type ref="prev"/><name>r</name></decl>, <decl><type ref="prev"/><name>g</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>desc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PIX_FMT_FLAG_BE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>AV_RB16</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <name>xp</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>AV_RB16</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <name>xp</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>z</name> <operator>=</operator> <call><name>AV_RB16</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <name>xp</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>AV_RL16</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <name>xp</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>AV_RL16</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <name>xp</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>z</name> <operator>=</operator> <call><name>AV_RL16</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <name>xp</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>xyzgamma</name><index>[<expr><name>x</name><operator>&gt;&gt;</operator><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>xyzgamma</name><index>[<expr><name>y</name><operator>&gt;&gt;</operator><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>z</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>xyzgamma</name><index>[<expr><name>z</name><operator>&gt;&gt;</operator><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>xyz2rgb_matrix</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>x</name> <operator>+</operator>

<name><name>c</name><operator>-&gt;</operator><name>xyz2rgb_matrix</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>y</name> <operator>+</operator>

<name><name>c</name><operator>-&gt;</operator><name>xyz2rgb_matrix</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name>z</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>g</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>xyz2rgb_matrix</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>x</name> <operator>+</operator>

<name><name>c</name><operator>-&gt;</operator><name>xyz2rgb_matrix</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>y</name> <operator>+</operator>

<name><name>c</name><operator>-&gt;</operator><name>xyz2rgb_matrix</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name>z</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>xyz2rgb_matrix</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>x</name> <operator>+</operator>

<name><name>c</name><operator>-&gt;</operator><name>xyz2rgb_matrix</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>y</name> <operator>+</operator>

<name><name>c</name><operator>-&gt;</operator><name>xyz2rgb_matrix</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name>z</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>av_clip_uintp2</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>g</name> <operator>=</operator> <call><name>av_clip_uintp2</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>av_clip_uintp2</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>desc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PIX_FMT_FLAG_BE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>AV_WB16</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>xp</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>rgbgamma</name><index>[<expr><name>r</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WB16</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>xp</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>rgbgamma</name><index>[<expr><name>g</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WB16</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>xp</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>rgbgamma</name><index>[<expr><name>b</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>AV_WL16</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>xp</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>rgbgamma</name><index>[<expr><name>r</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WL16</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>xp</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>rgbgamma</name><index>[<expr><name>g</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WL16</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>xp</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>rgbgamma</name><index>[<expr><name>b</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>rgb48Toxyz12</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SwsContext</name></name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>xp</name></decl>,<decl><type ref="prev"/><name>yp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>dstFormat</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>yp</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>yp</name><operator>&lt;</operator><name>h</name></expr>;</condition> <incr><expr><name>yp</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>xp</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>xp</name><operator>+</operator><literal type="number">2</literal><operator>&lt;</operator><name>stride</name></expr>;</condition> <incr><expr><name>xp</name><operator>+=</operator><literal type="number">3</literal></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>z</name></decl>, <decl><type ref="prev"/><name>r</name></decl>, <decl><type ref="prev"/><name>g</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>desc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PIX_FMT_FLAG_BE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>AV_RB16</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <name>xp</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>g</name> <operator>=</operator> <call><name>AV_RB16</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <name>xp</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>AV_RB16</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <name>xp</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>AV_RL16</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <name>xp</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>g</name> <operator>=</operator> <call><name>AV_RL16</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <name>xp</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>AV_RL16</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <name>xp</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>rgbgammainv</name><index>[<expr><name>r</name><operator>&gt;&gt;</operator><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>g</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>rgbgammainv</name><index>[<expr><name>g</name><operator>&gt;&gt;</operator><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>rgbgammainv</name><index>[<expr><name>b</name><operator>&gt;&gt;</operator><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>rgb2xyz_matrix</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>r</name> <operator>+</operator>

<name><name>c</name><operator>-&gt;</operator><name>rgb2xyz_matrix</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>g</name> <operator>+</operator>

<name><name>c</name><operator>-&gt;</operator><name>rgb2xyz_matrix</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name>b</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>rgb2xyz_matrix</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>r</name> <operator>+</operator>

<name><name>c</name><operator>-&gt;</operator><name>rgb2xyz_matrix</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>g</name> <operator>+</operator>

<name><name>c</name><operator>-&gt;</operator><name>rgb2xyz_matrix</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name>b</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>z</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>rgb2xyz_matrix</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>r</name> <operator>+</operator>

<name><name>c</name><operator>-&gt;</operator><name>rgb2xyz_matrix</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>g</name> <operator>+</operator>

<name><name>c</name><operator>-&gt;</operator><name>rgb2xyz_matrix</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name>b</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>av_clip_uintp2</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>av_clip_uintp2</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>z</name> <operator>=</operator> <call><name>av_clip_uintp2</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>desc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PIX_FMT_FLAG_BE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>AV_WB16</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>xp</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>xyzgammainv</name><index>[<expr><name>x</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WB16</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>xp</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>xyzgammainv</name><index>[<expr><name>y</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WB16</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>xp</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>xyzgammainv</name><index>[<expr><name>z</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>AV_WL16</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>xp</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>xyzgammainv</name><index>[<expr><name>x</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WL16</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>xp</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>xyzgammainv</name><index>[<expr><name>y</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WL16</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>xp</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>xyzgammainv</name><index>[<expr><name>z</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>int</name> <name>attribute_align_arg</name></type> <name>sws_scale</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SwsContext</name></name> <modifier>*</modifier></type><name>c</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>srcSlice</name><index>[]</index></name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name><name>srcStride</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcSliceY</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>srcSliceH</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>dst</name><index>[]</index></name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name><name>dstStride</name><index>[]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name><name>src2</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>dst2</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>rgb0_tmp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>macro_height</name> <init>= <expr><ternary><condition><expr><call><name>isBayer</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>srcFormat</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>chrSrcVSubSample</name></name><operator>)</operator></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>srcStride2</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>dstStride2</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>srcSliceY_internal</name> <init>= <expr><name>srcSliceY</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>srcStride</name> <operator>||</operator> <operator>!</operator><name>dstStride</name> <operator>||</operator> <operator>!</operator><name>dst</name> <operator>||</operator> <operator>!</operator><name>srcSlice</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"One of the input parameters to sws_scale() is NULL, please check the calling code\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>srcStride2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>srcStride</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstStride2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>dstStride</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>srcSliceY</name> <operator>&amp;</operator> <operator>(</operator><name>macro_height</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>||</operator>

<operator>(</operator><operator>(</operator><name>srcSliceH</name><operator>&amp;</operator> <operator>(</operator><name>macro_height</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <name>srcSliceY</name> <operator>+</operator> <name>srcSliceH</name> <operator>!=</operator> <name><name>c</name><operator>-&gt;</operator><name>srcH</name></name><operator>)</operator> <operator>||</operator>

<name>srcSliceY</name> <operator>+</operator> <name>srcSliceH</name> <operator>&gt;</operator> <name><name>c</name><operator>-&gt;</operator><name>srcH</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Slice parameters %d, %d are invalid\n"</literal></expr></argument>, <argument><expr><name>srcSliceY</name></expr></argument>, <argument><expr><name>srcSliceH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>gamma_flag</name></name> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>cascaded_context</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>sws_scale</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>cascaded_context</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><name>srcSlice</name></expr></argument>, <argument><expr><name>srcStride</name></expr></argument>, <argument><expr><name>srcSliceY</name></expr></argument>, <argument><expr><name>srcSliceH</name></expr></argument>,

<argument><expr><name><name>c</name><operator>-&gt;</operator><name>cascaded_tmp</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>cascaded_tmpStride</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>cascaded_context</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>sws_scale</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>cascaded_context</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator> <specifier>const</specifier> <operator>*</operator><operator>)</operator><name><name>c</name><operator>-&gt;</operator><name>cascaded_tmp</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>cascaded_tmpStride</name></name></expr></argument>, <argument><expr><name>srcSliceY</name></expr></argument>, <argument><expr><name>srcSliceH</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>cascaded1_tmp</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>cascaded1_tmpStride</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>sws_scale</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>cascaded_context</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator> <specifier>const</specifier> <operator>*</operator><operator>)</operator><name><name>c</name><operator>-&gt;</operator><name>cascaded_tmp</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>cascaded_tmpStride</name></name></expr></argument>, <argument><expr><name>srcSliceY</name></expr></argument>, <argument><expr><name>srcSliceH</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstStride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>cascaded_context</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>sws_scale</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>cascaded_context</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,

<argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator> <specifier>const</specifier> <operator>*</operator><operator>)</operator><name><name>c</name><operator>-&gt;</operator><name>cascaded1_tmp</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>cascaded1_tmpStride</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>cascaded_context</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>dstY</name> <operator>-</operator> <name>ret</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>cascaded_context</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>dstY</name></expr></argument>,

<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstStride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>cascaded_context</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name>srcSliceY</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>srcSliceH</name> <operator>==</operator> <name><name>c</name><operator>-&gt;</operator><name>cascaded_context</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>srcH</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>sws_scale</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>cascaded_context</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><name>srcSlice</name></expr></argument>, <argument><expr><name>srcStride</name></expr></argument>, <argument><expr><name>srcSliceY</name></expr></argument>, <argument><expr><name>srcSliceH</name></expr></argument>,

<argument><expr><name><name>c</name><operator>-&gt;</operator><name>cascaded_tmp</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>cascaded_tmpStride</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>sws_scale</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>cascaded_context</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator> <specifier>const</specifier> <operator>*</operator> <operator>)</operator><name><name>c</name><operator>-&gt;</operator><name>cascaded_tmp</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>cascaded_tmpStride</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>cascaded_context</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>dstH</name></expr></argument>,

<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstStride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>src2</name></expr></argument>, <argument><expr><name>srcSlice</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst2</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dst2</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>srcSliceH</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>check_image_pointers</name><argument_list>(<argument><expr><name>srcSlice</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>srcFormat</name></name></expr></argument>, <argument><expr><name>srcStride</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"bad src image pointers\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>check_image_pointers</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name><operator>*</operator> <specifier>const</specifier><operator>*</operator><operator>)</operator><name>dst</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>dstFormat</name></name></expr></argument>, <argument><expr><name>dstStride</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"bad dst image pointers\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>sliceDir</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>srcSliceY</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>srcSliceY</name> <operator>+</operator> <name>srcSliceH</name> <operator>!=</operator> <name><name>c</name><operator>-&gt;</operator><name>srcH</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Slices start in the middle!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>sliceDir</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>srcSliceY</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>sliceDir</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if> <else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>sliceDir</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>usePal</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>srcFormat</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>g</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>u</name></decl>, <decl><type ref="prev"/><name>v</name></decl>, <decl><type ref="prev"/><name>a</name> <init>= <expr><literal type="number">0xff</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>srcFormat</name></name> <operator>==</operator> <name>AV_PIX_FMT_PAL8</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>p</name> <init>= <expr><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>srcSlice</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>)</operator><index>[<expr><name>i</name></expr>]</index></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator><name>p</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><name>p</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>g</name> <operator>=</operator> <operator>(</operator><name>p</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <name>p</name> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>srcFormat</name></name> <operator>==</operator> <name>AV_PIX_FMT_RGB8</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator> <name>i</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal> <operator>)</operator> <operator>*</operator> <literal type="number">36</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>g</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>i</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator> <operator>*</operator> <literal type="number">36</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator> <name>i</name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator> <operator>*</operator> <literal type="number">85</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>srcFormat</name></name> <operator>==</operator> <name>AV_PIX_FMT_BGR8</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator> <name>i</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal> <operator>)</operator> <operator>*</operator> <literal type="number">85</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>g</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>i</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator> <operator>*</operator> <literal type="number">36</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator> <name>i</name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator> <operator>*</operator> <literal type="number">36</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>srcFormat</name></name> <operator>==</operator> <name>AV_PIX_FMT_RGB4_BYTE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator> <name>i</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal> <operator>)</operator> <operator>*</operator> <literal type="number">255</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>g</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>i</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator> <operator>*</operator> <literal type="number">85</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator> <name>i</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">255</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>srcFormat</name></name> <operator>==</operator> <name>AV_PIX_FMT_GRAY8</name> <operator>||</operator> <name><name>c</name><operator>-&gt;</operator><name>srcFormat</name></name> <operator>==</operator> <name>AV_PIX_FMT_GRAY8A</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>r</name> <operator>=</operator> <name>g</name> <operator>=</operator> <name>b</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_assert1</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>srcFormat</name></name> <operator>==</operator> <name>AV_PIX_FMT_BGR4_BYTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator> <name>i</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal> <operator>)</operator> <operator>*</operator> <literal type="number">255</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>g</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>i</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator> <operator>*</operator> <literal type="number">85</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator> <name>i</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">255</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RGB2YUV_SHIFT</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BY</name></cpp:macro> <cpp:value>( (int) (0.114 * 219 / 255 * (1 &lt;&lt; RGB2YUV_SHIFT) + 0.5))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BV</name></cpp:macro> <cpp:value>(-(int) (0.081 * 224 / 255 * (1 &lt;&lt; RGB2YUV_SHIFT) + 0.5))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BU</name></cpp:macro> <cpp:value>( (int) (0.500 * 224 / 255 * (1 &lt;&lt; RGB2YUV_SHIFT) + 0.5))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GY</name></cpp:macro> <cpp:value>( (int) (0.587 * 219 / 255 * (1 &lt;&lt; RGB2YUV_SHIFT) + 0.5))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GV</name></cpp:macro> <cpp:value>(-(int) (0.419 * 224 / 255 * (1 &lt;&lt; RGB2YUV_SHIFT) + 0.5))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GU</name></cpp:macro> <cpp:value>(-(int) (0.331 * 224 / 255 * (1 &lt;&lt; RGB2YUV_SHIFT) + 0.5))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RY</name></cpp:macro> <cpp:value>( (int) (0.299 * 219 / 255 * (1 &lt;&lt; RGB2YUV_SHIFT) + 0.5))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RV</name></cpp:macro> <cpp:value>( (int) (0.500 * 224 / 255 * (1 &lt;&lt; RGB2YUV_SHIFT) + 0.5))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RU</name></cpp:macro> <cpp:value>(-(int) (0.169 * 224 / 255 * (1 &lt;&lt; RGB2YUV_SHIFT) + 0.5))</cpp:value></cpp:define>

<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><operator>(</operator><name>RY</name> <operator>*</operator> <name>r</name> <operator>+</operator> <name>GY</name> <operator>*</operator> <name>g</name> <operator>+</operator> <name>BY</name> <operator>*</operator> <name>b</name> <operator>+</operator> <operator>(</operator> <literal type="number">33</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>RGB2YUV_SHIFT</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <name>RGB2YUV_SHIFT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>u</name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><operator>(</operator><name>RU</name> <operator>*</operator> <name>r</name> <operator>+</operator> <name>GU</name> <operator>*</operator> <name>g</name> <operator>+</operator> <name>BU</name> <operator>*</operator> <name>b</name> <operator>+</operator> <operator>(</operator><literal type="number">257</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>RGB2YUV_SHIFT</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <name>RGB2YUV_SHIFT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><operator>(</operator><name>RV</name> <operator>*</operator> <name>r</name> <operator>+</operator> <name>GV</name> <operator>*</operator> <name>g</name> <operator>+</operator> <name>BV</name> <operator>*</operator> <name>b</name> <operator>+</operator> <operator>(</operator><literal type="number">257</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>RGB2YUV_SHIFT</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <name>RGB2YUV_SHIFT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>pal_yuv</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator> <name>y</name> <operator>+</operator> <operator>(</operator><name>u</name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>v</name><operator>&lt;&lt;</operator><literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name>a</name><operator>&lt;&lt;</operator><literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>dstFormat</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_PIX_FMT_BGR32</name></expr>:</case>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>HAVE_BIGENDIAN</name></expr></cpp:if>

<case>case <expr><name>AV_PIX_FMT_RGB24</name></expr>:</case>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>pal_rgb</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator> <name>r</name> <operator>+</operator> <operator>(</operator><name>g</name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>b</name><operator>&lt;&lt;</operator><literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name>a</name><operator>&lt;&lt;</operator><literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_BGR32_1</name></expr>:</case>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_BIGENDIAN</name></expr></cpp:if>

<case>case <expr><name>AV_PIX_FMT_BGR24</name></expr>:</case>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>pal_rgb</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator> <name>a</name> <operator>+</operator> <operator>(</operator><name>r</name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>g</name><operator>&lt;&lt;</operator><literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name>b</name><operator>&lt;&lt;</operator><literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_RGB32_1</name></expr>:</case>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_BIGENDIAN</name></expr></cpp:if>

<case>case <expr><name>AV_PIX_FMT_RGB24</name></expr>:</case>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>pal_rgb</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator> <name>a</name> <operator>+</operator> <operator>(</operator><name>b</name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>g</name><operator>&lt;&lt;</operator><literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name>r</name><operator>&lt;&lt;</operator><literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_RGB32</name></expr>:</case>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>HAVE_BIGENDIAN</name></expr></cpp:if>

<case>case <expr><name>AV_PIX_FMT_BGR24</name></expr>:</case>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<default>default:</default>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>pal_rgb</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator> <name>b</name> <operator>+</operator> <operator>(</operator><name>g</name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>r</name><operator>&lt;&lt;</operator><literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name>a</name><operator>&lt;&lt;</operator><literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></switch>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>src0Alpha</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>dst0Alpha</name></name> <operator>&amp;&amp;</operator> <call><name>isALPHA</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>dstFormat</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>base</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<expr_stmt><expr><name>rgb0_tmp</name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><call><name>FFABS</name><argument_list>(<argument><expr><name><name>srcStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>*</operator> <name>srcSliceH</name> <operator>+</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rgb0_tmp</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>base</name> <operator>=</operator> <ternary><condition><expr><name><name>srcStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>rgb0_tmp</name> <operator>-</operator> <name><name>srcStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>srcSliceH</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr> </then><else>: <expr><name>rgb0_tmp</name></expr></else></ternary></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name><operator>&lt;</operator><name>srcSliceH</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>base</name> <operator>+</operator> <name><name>srcStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>*</operator><name>y</name></expr></argument>, <argument><expr><name><name>src2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>srcStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>*</operator><name>y</name></expr></argument>, <argument><expr><literal type="number">4</literal><operator>*</operator><name><name>c</name><operator>-&gt;</operator><name>srcW</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>x</name><operator>=</operator><name><name>c</name><operator>-&gt;</operator><name>src0Alpha</name></name><operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>x</name><operator>&lt;</operator><literal type="number">4</literal><operator>*</operator><name><name>c</name><operator>-&gt;</operator><name>srcW</name></name></expr>;</condition> <incr><expr><name>x</name><operator>+=</operator><literal type="number">4</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>base</name><index>[ <expr><name><name>srcStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>*</operator><name>y</name> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>=</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><name><name>src2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>base</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>srcXYZ</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>dstXYZ</name></name> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>srcW</name></name><operator>==</operator><name><name>c</name><operator>-&gt;</operator><name>dstW</name></name> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>srcH</name></name><operator>==</operator><name><name>c</name><operator>-&gt;</operator><name>dstH</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>base</name></decl>;</decl_stmt>

<expr_stmt><expr><name>rgb0_tmp</name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><call><name>FFABS</name><argument_list>(<argument><expr><name><name>srcStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>*</operator> <name>srcSliceH</name> <operator>+</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rgb0_tmp</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>base</name> <operator>=</operator> <ternary><condition><expr><name><name>srcStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>rgb0_tmp</name> <operator>-</operator> <name><name>srcStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>srcSliceH</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr> </then><else>: <expr><name>rgb0_tmp</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xyz12Torgb48</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><operator>(</operator><name>uint16_t</name><operator>*</operator><operator>)</operator><name>base</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name><operator>*</operator><operator>)</operator><name><name>src2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>srcStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>srcSliceH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>base</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>srcSliceY</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SWS_BITEXACT</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>dither</name></name> <operator>==</operator> <name>SWS_DITHER_ED</name> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>dither_error</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>dither_error</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>dither_error</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>dstW</name></name><operator>+</operator><literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>sliceDir</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>srcStride2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstStride2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>src2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name>srcSliceH</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>srcStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>usePal</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>srcFormat</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>src2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>srcSliceH</name> <operator>&gt;&gt;</operator> <name><name>c</name><operator>-&gt;</operator><name>chrSrcVSubSample</name></name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>srcStride</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>src2</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>srcSliceH</name> <operator>&gt;&gt;</operator> <name><name>c</name><operator>-&gt;</operator><name>chrSrcVSubSample</name></name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>srcStride</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src2</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name>srcSliceH</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>srcStride</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <operator>(</operator> <name><name>c</name><operator>-&gt;</operator><name>dstH</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>dstStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>dstH</name></name> <operator>&gt;&gt;</operator> <name><name>c</name><operator>-&gt;</operator><name>chrDstVSubSample</name></name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>dstStride</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst2</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>dstH</name></name> <operator>&gt;&gt;</operator> <name><name>c</name><operator>-&gt;</operator><name>chrDstVSubSample</name></name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>dstStride</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst2</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+=</operator> <operator>(</operator> <name><name>c</name><operator>-&gt;</operator><name>dstH</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>dstStride</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>srcSliceY_internal</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>srcH</name></name><operator>-</operator><name>srcSliceY</name><operator>-</operator><name>srcSliceH</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>reset_ptr</name><argument_list>(<argument><expr><name>src2</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>srcFormat</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reset_ptr</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>dst2</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>dstFormat</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>srcSliceY_internal</name> <operator>+</operator> <name>srcSliceH</name> <operator>==</operator> <name><name>c</name><operator>-&gt;</operator><name>srcH</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>sliceDir</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>c</name><operator>-&gt;</operator><name>swscale</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>srcStride2</name></expr></argument>, <argument><expr><name>srcSliceY_internal</name></expr></argument>, <argument><expr><name>srcSliceH</name></expr></argument>, <argument><expr><name>dst2</name></expr></argument>, <argument><expr><name>dstStride2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>dstXYZ</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>srcXYZ</name></name> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>srcW</name></name><operator>==</operator><name><name>c</name><operator>-&gt;</operator><name>dstW</name></name> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>srcH</name></name><operator>==</operator><name><name>c</name><operator>-&gt;</operator><name>dstH</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>dstY</name> <init>= <expr><ternary><condition><expr><name><name>c</name><operator>-&gt;</operator><name>dstY</name></name></expr> ?</condition><then> <expr><name><name>c</name><operator>-&gt;</operator><name>dstY</name></name></expr> </then><else>: <expr><name>srcSliceY</name> <operator>+</operator> <name>srcSliceH</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst16</name> <init>= <expr><operator>(</operator><name>uint16_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>dst2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>dstY</name> <operator>-</operator> <name>ret</name><operator>)</operator> <operator>*</operator> <name><name>dstStride2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>dstY</name> <operator>&gt;=</operator> <name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>ret</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>dstH</name></name> <operator>&gt;=</operator> <name>dstY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rgb48Toxyz12</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>dst16</name></expr></argument>, <argument><expr><name>dst16</name></expr></argument>, <argument><expr><name><name>dstStride2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>rgb0_tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

</unit>
