<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavformat\libmodplug.c"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MODPLUG_STATIC</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libmodplug/modplug.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avstring.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/eval.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avformat.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>ModPlugContext</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ModPlugFile</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>noise_reduction</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>reverb_depth</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>reverb_delay</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bass_amount</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bass_range</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>surround_depth</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>surround_delay</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>max_size</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>double</name></type> <name>ts_per_packet</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>packet_count</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>print_textinfo</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>video_stream</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>w</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>h</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>video_switch</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>fsize</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>linesize</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>color_eval</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>AVExpr</name> <modifier>*</modifier></type><name>expr</name></decl>;</decl_stmt> 

}</block></struct></type> <name>ModPlugContext</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>var_names</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"x"</literal></expr>, <expr><literal type="string">"y"</literal></expr>,

<expr><literal type="string">"w"</literal></expr>, <expr><literal type="string">"h"</literal></expr>,

<expr><literal type="string">"t"</literal></expr>,

<expr><literal type="string">"speed"</literal></expr>, <expr><literal type="string">"tempo"</literal></expr>, <expr><literal type="string">"order"</literal></expr>, <expr><literal type="string">"pattern"</literal></expr>, <expr><literal type="string">"row"</literal></expr>,

<expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<enum>enum <name>var_name</name> <block>{

<decl><name>VAR_X</name></decl>, <decl><name>VAR_Y</name></decl>,

<decl><name>VAR_W</name></decl>, <decl><name>VAR_H</name></decl>,

<decl><name>VAR_TIME</name></decl>,

<decl><name>VAR_SPEED</name></decl>, <decl><name>VAR_TEMPO</name></decl>, <decl><name>VAR_ORDER</name></decl>, <decl><name>VAR_PATTERN</name></decl>, <decl><name>VAR_ROW</name></decl>,

<decl><name>VAR_VARS_NB</name></decl>

}</block>;</enum>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_MODPLUG_MAX_FILE_SIZE</name></cpp:macro> <cpp:value>(100 * 1&lt;&lt;20)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_MODPLUG_DEF_FILE_SIZE</name></cpp:macro> <cpp:value>( 5 * 1&lt;&lt;20)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(ModPlugContext, x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D</name></cpp:macro> <cpp:value>AV_OPT_FLAG_DECODING_PARAM</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>options</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{<expr><literal type="string">"noise_reduction"</literal></expr>, <expr><literal type="string">"Enable noise reduction 0(off)-1(on)"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>noise_reduction</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>D</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"reverb_depth"</literal></expr>, <expr><literal type="string">"Reverb level 0(quiet)-100(loud)"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>reverb_depth</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">100</literal></expr>, <expr><name>D</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"reverb_delay"</literal></expr>, <expr><literal type="string">"Reverb delay in ms, usually 40-200ms"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>reverb_delay</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>D</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"bass_amount"</literal></expr>, <expr><literal type="string">"XBass level 0(quiet)-100(loud)"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>bass_amount</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">100</literal></expr>, <expr><name>D</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"bass_range"</literal></expr>, <expr><literal type="string">"XBass cutoff in Hz 10-100"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>bass_range</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">100</literal></expr>, <expr><name>D</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"surround_depth"</literal></expr>, <expr><literal type="string">"Surround level 0(quiet)-100(heavy)"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>surround_depth</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">100</literal></expr>, <expr><name>D</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"surround_delay"</literal></expr>, <expr><literal type="string">"Surround delay in ms, usually 5-40ms"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>surround_delay</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>D</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"max_size"</literal></expr>, <expr><literal type="string">"Max file size supported (in bytes). Default is 5MB. Set to 0 for no limit (not recommended)"</literal></expr>,

<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>max_size</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>FF_MODPLUG_DEF_FILE_SIZE</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FF_MODPLUG_MAX_FILE_SIZE</name></expr>, <expr><name>D</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"video_stream_expr"</literal></expr>, <expr><literal type="string">"Color formula"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>color_eval</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name> <operator>=</operator> <name>NULL</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>D</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"video_stream"</literal></expr>, <expr><literal type="string">"Make demuxer output a video stream"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>video_stream</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>D</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"video_stream_w"</literal></expr>, <expr><literal type="string">"Video stream width in char (one char = 8x8px)"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">30</literal></expr>}</block></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">512</literal></expr>, <expr><name>D</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"video_stream_h"</literal></expr>, <expr><literal type="string">"Video stream height in char (one char = 8x8px)"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">30</literal></expr>}</block></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">512</literal></expr>, <expr><name>D</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"video_stream_ptxt"</literal></expr>, <expr><literal type="string">"Print speed, tempo, order, ... in video stream"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>print_textinfo</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>D</name></expr>}</block></expr>,

<expr><block>{<expr><name>NULL</name></expr>}</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_OPT_IF_REQUESTED</name><parameter_list>(<parameter><type><name>libopt</name></type></parameter>, <parameter><type><name>opt</name></type></parameter>, <parameter><type><name>flag</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (modplug-&gt;opt) { settings.libopt = modplug-&gt;opt; settings.mFlags |= flag; } } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADD_META_MULTIPLE_ENTRIES</name><parameter_list>(<parameter><type><name>entry_name</name></type></parameter>, <parameter><type><name>fname</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (n_##entry_name ##s) { unsigned i, n = 0; for (i = 0; i &lt; n_##entry_name ##s; i++) { char item_name[64] = {0}; fname(f, i, item_name); if (!*item_name) continue; if (n) av_dict_set(&amp;s-&gt;metadata, #entry_name, "\n", AV_DICT_APPEND); av_dict_set(&amp;s-&gt;metadata, #entry_name, item_name, AV_DICT_APPEND); n++; } extra = av_asprintf(", %u/%u " #entry_name "%s", n, n_##entry_name ##s, n &gt; 1 ? "s" : ""); if (!extra) return AVERROR(ENOMEM); av_dict_set(&amp;s-&gt;metadata, "extra info", extra, AV_DICT_APPEND); av_free(extra); } } while (0)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>modplug_load_metadata</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ModPlugContext</name> <modifier>*</modifier></type><name>modplug</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ModPlugFile</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name><name>modplug</name><operator>-&gt;</operator><name>f</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>extra</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>ModPlug_GetName</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name> <init>= <expr><call><name>ModPlug_GetMessage</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>n_instruments</name> <init>= <expr><call><name>ModPlug_NumInstruments</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>n_samples</name> <init>= <expr><call><name>ModPlug_NumSamples</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>n_patterns</name> <init>= <expr><call><name>ModPlug_NumPatterns</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>n_channels</name> <init>= <expr><call><name>ModPlug_NumChannels</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>name</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>name</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><literal type="string">"name"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>msg</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>msg</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><literal type="string">"message"</literal></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>extra</name> <operator>=</operator> <call><name>av_asprintf</name><argument_list>(<argument><expr><literal type="string">"%u pattern%s, %u channel%s"</literal></expr></argument>,

<argument><expr><name>n_patterns</name></expr></argument>, <argument><expr><ternary><condition><expr><name>n_patterns</name> <operator>&gt;</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="string">"s"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,

<argument><expr><name>n_channels</name></expr></argument>, <argument><expr><ternary><condition><expr><name>n_channels</name> <operator>&gt;</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="string">"s"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>extra</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><literal type="string">"extra info"</literal></expr></argument>, <argument><expr><name>extra</name></expr></argument>, <argument><expr><name>AV_DICT_DONT_STRDUP_VAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_META_MULTIPLE_ENTRIES</name><argument_list>(<argument><expr><name>instrument</name></expr></argument>, <argument><expr><name>ModPlug_InstrumentName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_META_MULTIPLE_ENTRIES</name><argument_list>(<argument><expr><name>sample</name></expr></argument>, <argument><expr><name>ModPlug_SampleName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AUDIO_PKT_SIZE</name></cpp:macro> <cpp:value>512</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>modplug_read_header</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ModPlug_Settings</name></type> <name>settings</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ModPlugContext</name> <modifier>*</modifier></type><name>modplug</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>sz</name> <init>= <expr><call><name>avio_size</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>sz</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Could not determine file size\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sz</name> <operator>=</operator> <name><name>modplug</name><operator>-&gt;</operator><name>max_size</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>modplug</name><operator>-&gt;</operator><name>max_size</name></name> <operator>&amp;&amp;</operator> <name>sz</name> <operator>&gt;</operator> <name><name>modplug</name><operator>-&gt;</operator><name>max_size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>sz</name> <operator>=</operator> <name><name>modplug</name><operator>-&gt;</operator><name>max_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Max file size reach%s, allocating %"</literal><name>PRIi64</name><literal type="string">"B "</literal>

<literal type="string">"but demuxing is likely to fail due to incomplete buffer\n"</literal></expr></argument>,

<argument><expr><ternary><condition><expr><name>sz</name> <operator>==</operator> <name>FF_MODPLUG_DEF_FILE_SIZE</name></expr> ?</condition><then> <expr><literal type="string">" (see -max_size)"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>modplug</name><operator>-&gt;</operator><name>color_eval</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name>av_expr_parse</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>modplug</name><operator>-&gt;</operator><name>expr</name></name></expr></argument>, <argument><expr><name><name>modplug</name><operator>-&gt;</operator><name>color_eval</name></name></expr></argument>, <argument><expr><name>var_names</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>r</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>modplug</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name><name>modplug</name><operator>-&gt;</operator><name>max_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>modplug</name><operator>-&gt;</operator><name>buf</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>sz</name> <operator>=</operator> <call><name>avio_read</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>modplug</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ModPlug_GetSettings</name><argument_list>(<argument><expr><operator>&amp;</operator><name>settings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>settings</name><operator>.</operator><name>mChannels</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>settings</name><operator>.</operator><name>mBits</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>settings</name><operator>.</operator><name>mFrequency</name></name> <operator>=</operator> <literal type="number">44100</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>settings</name><operator>.</operator><name>mResamplingMode</name></name> <operator>=</operator> <name>MODPLUG_RESAMPLE_FIR</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>settings</name><operator>.</operator><name>mLoopCount</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>modplug</name><operator>-&gt;</operator><name>noise_reduction</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>settings</name><operator>.</operator><name>mFlags</name></name> <operator>|=</operator> <name>MODPLUG_ENABLE_NOISE_REDUCTION</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>SET_OPT_IF_REQUESTED</name><argument_list>(<argument><expr><name>mReverbDepth</name></expr></argument>, <argument><expr><name>reverb_depth</name></expr></argument>, <argument><expr><name>MODPLUG_ENABLE_REVERB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SET_OPT_IF_REQUESTED</name><argument_list>(<argument><expr><name>mReverbDelay</name></expr></argument>, <argument><expr><name>reverb_delay</name></expr></argument>, <argument><expr><name>MODPLUG_ENABLE_REVERB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SET_OPT_IF_REQUESTED</name><argument_list>(<argument><expr><name>mBassAmount</name></expr></argument>, <argument><expr><name>bass_amount</name></expr></argument>, <argument><expr><name>MODPLUG_ENABLE_MEGABASS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SET_OPT_IF_REQUESTED</name><argument_list>(<argument><expr><name>mBassRange</name></expr></argument>, <argument><expr><name>bass_range</name></expr></argument>, <argument><expr><name>MODPLUG_ENABLE_MEGABASS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SET_OPT_IF_REQUESTED</name><argument_list>(<argument><expr><name>mSurroundDepth</name></expr></argument>, <argument><expr><name>surround_depth</name></expr></argument>, <argument><expr><name>MODPLUG_ENABLE_SURROUND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SET_OPT_IF_REQUESTED</name><argument_list>(<argument><expr><name>mSurroundDelay</name></expr></argument>, <argument><expr><name>surround_delay</name></expr></argument>, <argument><expr><name>MODPLUG_ENABLE_SURROUND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>modplug</name><operator>-&gt;</operator><name>reverb_depth</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>settings</name><operator>.</operator><name>mReverbDepth</name></name> <operator>=</operator> <name><name>modplug</name><operator>-&gt;</operator><name>reverb_depth</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>modplug</name><operator>-&gt;</operator><name>reverb_delay</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>settings</name><operator>.</operator><name>mReverbDelay</name></name> <operator>=</operator> <name><name>modplug</name><operator>-&gt;</operator><name>reverb_delay</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>modplug</name><operator>-&gt;</operator><name>bass_amount</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>settings</name><operator>.</operator><name>mBassAmount</name></name> <operator>=</operator> <name><name>modplug</name><operator>-&gt;</operator><name>bass_amount</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>modplug</name><operator>-&gt;</operator><name>bass_range</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>settings</name><operator>.</operator><name>mBassRange</name></name> <operator>=</operator> <name><name>modplug</name><operator>-&gt;</operator><name>bass_range</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>modplug</name><operator>-&gt;</operator><name>surround_depth</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>settings</name><operator>.</operator><name>mSurroundDepth</name></name> <operator>=</operator> <name><name>modplug</name><operator>-&gt;</operator><name>surround_depth</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>modplug</name><operator>-&gt;</operator><name>surround_delay</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>settings</name><operator>.</operator><name>mSurroundDelay</name></name> <operator>=</operator> <name><name>modplug</name><operator>-&gt;</operator><name>surround_delay</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ModPlug_SetSettings</name><argument_list>(<argument><expr><operator>&amp;</operator><name>settings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>modplug</name><operator>-&gt;</operator><name>f</name></name> <operator>=</operator> <call><name>ModPlug_Load</name><argument_list>(<argument><expr><name><name>modplug</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>modplug</name><operator>-&gt;</operator><name>f</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>modplug</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>st</name> <operator>=</operator> <call><name>avformat_new_stream</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>st</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>avpriv_set_pts_info</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>duration</name></name> <operator>=</operator> <call><name>ModPlug_GetLength</name><argument_list>(<argument><expr><name><name>modplug</name><operator>-&gt;</operator><name>f</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>=</operator> <name>AV_CODEC_ID_PCM_S16LE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <name><name>settings</name><operator>.</operator><name>mChannels</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>=</operator> <name><name>settings</name><operator>.</operator><name>mFrequency</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>modplug</name><operator>-&gt;</operator><name>ts_per_packet</name></name> <operator>=</operator> <literal type="number">1000</literal><operator>*</operator><name>AUDIO_PKT_SIZE</name> <operator>/</operator> <operator>(</operator><literal type="number">4</literal><operator>*</operator><literal type="number">44100.</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>modplug</name><operator>-&gt;</operator><name>video_stream</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>vst</name> <init>= <expr><call><name>avformat_new_stream</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>vst</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>avpriv_set_pts_info</name><argument_list>(<argument><expr><name>vst</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vst</name><operator>-&gt;</operator><name>duration</name></name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>duration</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vst</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vst</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>=</operator> <name>AV_CODEC_ID_XBIN</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vst</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>modplug</name><operator>-&gt;</operator><name>w</name></name> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vst</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>modplug</name><operator>-&gt;</operator><name>h</name></name> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>modplug</name><operator>-&gt;</operator><name>linesize</name></name> <operator>=</operator> <name><name>modplug</name><operator>-&gt;</operator><name>w</name></name> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>modplug</name><operator>-&gt;</operator><name>fsize</name></name> <operator>=</operator> <name><name>modplug</name><operator>-&gt;</operator><name>linesize</name></name> <operator>*</operator> <name><name>modplug</name><operator>-&gt;</operator><name>h</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>modplug_load_metadata</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>write_text</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>linesize</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>y</name><operator>*</operator><name>linesize</name> <operator>+</operator> <name>x</name><operator>*</operator><literal type="number">3</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>dst</name> <operator>+=</operator> <literal type="number">3</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x0f</literal></expr>;</expr_stmt> 

</block_content>}</block></for>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRINT_INFO</name><parameter_list>(<parameter><type><name>line</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>idvalue</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { snprintf(intbuf, sizeof(intbuf), "%.0f", var_values[idvalue]); write_text(pkt-&gt;data, name ":", modplug-&gt;linesize, 0+1, line+1); write_text(pkt-&gt;data, intbuf, modplug-&gt;linesize, 10+1, line+1); } while (0)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>modplug_read_packet</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ModPlugContext</name> <modifier>*</modifier></type><name>modplug</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>modplug</name><operator>-&gt;</operator><name>video_stream</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>modplug</name><operator>-&gt;</operator><name>video_switch</name></name> <operator>^=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>modplug</name><operator>-&gt;</operator><name>video_switch</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name><name>var_values</name><index>[<expr><name>VAR_VARS_NB</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>var_values</name><index>[<expr><name>VAR_W</name></expr> ]</index></name> <operator>=</operator> <name><name>modplug</name><operator>-&gt;</operator><name>w</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>var_values</name><index>[<expr><name>VAR_H</name></expr> ]</index></name> <operator>=</operator> <name><name>modplug</name><operator>-&gt;</operator><name>h</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>var_values</name><index>[<expr><name>VAR_TIME</name></expr> ]</index></name> <operator>=</operator> <name><name>modplug</name><operator>-&gt;</operator><name>packet_count</name></name> <operator>*</operator> <name><name>modplug</name><operator>-&gt;</operator><name>ts_per_packet</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>var_values</name><index>[<expr><name>VAR_SPEED</name></expr> ]</index></name> <operator>=</operator> <call><name>ModPlug_GetCurrentSpeed</name> <argument_list>(<argument><expr><name><name>modplug</name><operator>-&gt;</operator><name>f</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>var_values</name><index>[<expr><name>VAR_TEMPO</name></expr> ]</index></name> <operator>=</operator> <call><name>ModPlug_GetCurrentTempo</name> <argument_list>(<argument><expr><name><name>modplug</name><operator>-&gt;</operator><name>f</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>var_values</name><index>[<expr><name>VAR_ORDER</name></expr> ]</index></name> <operator>=</operator> <call><name>ModPlug_GetCurrentOrder</name> <argument_list>(<argument><expr><name><name>modplug</name><operator>-&gt;</operator><name>f</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>var_values</name><index>[<expr><name>VAR_PATTERN</name></expr>]</index></name> <operator>=</operator> <call><name>ModPlug_GetCurrentPattern</name><argument_list>(<argument><expr><name><name>modplug</name><operator>-&gt;</operator><name>f</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>var_values</name><index>[<expr><name>VAR_ROW</name></expr> ]</index></name> <operator>=</operator> <call><name>ModPlug_GetCurrentRow</name> <argument_list>(<argument><expr><name><name>modplug</name><operator>-&gt;</operator><name>f</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_new_packet</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><name><name>modplug</name><operator>-&gt;</operator><name>fsize</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>stream_index</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>modplug</name><operator>-&gt;</operator><name>fsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>modplug</name><operator>-&gt;</operator><name>print_textinfo</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>intbuf</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>PRINT_INFO</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"speed"</literal></expr></argument>, <argument><expr><name>VAR_SPEED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINT_INFO</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"tempo"</literal></expr></argument>, <argument><expr><name>VAR_TEMPO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINT_INFO</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"order"</literal></expr></argument>, <argument><expr><name>VAR_ORDER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINT_INFO</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"pattern"</literal></expr></argument>, <argument><expr><name>VAR_PATTERN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINT_INFO</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"row"</literal></expr></argument>, <argument><expr><name>VAR_ROW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINT_INFO</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="string">"ts"</literal></expr></argument>, <argument><expr><name>VAR_TIME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>modplug</name><operator>-&gt;</operator><name>expr</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>modplug</name><operator>-&gt;</operator><name>h</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>modplug</name><operator>-&gt;</operator><name>w</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>color</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>var_values</name><index>[<expr><name>VAR_X</name></expr>]</index></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>var_values</name><index>[<expr><name>VAR_Y</name></expr>]</index></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>

<expr_stmt><expr><name>color</name> <operator>=</operator> <call><name>av_expr_eval</name><argument_list>(<argument><expr><name><name>modplug</name><operator>-&gt;</operator><name>expr</name></name></expr></argument>, <argument><expr><name>var_values</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>y</name><operator>*</operator><name><name>modplug</name><operator>-&gt;</operator><name>linesize</name></name> <operator>+</operator> <name>x</name><operator>*</operator><literal type="number">3</literal> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>|=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>color</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0xf</literal></expr></argument>)</argument_list></call><operator>&lt;&lt;</operator><literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>dts</name></name> <operator>=</operator> <name><name>var_values</name><index>[<expr><name>VAR_TIME</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>AV_PKT_FLAG_KEY</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_new_packet</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>AUDIO_PKT_SIZE</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>modplug</name><operator>-&gt;</operator><name>video_stream</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>dts</name></name> <operator>=</operator> <name><name>modplug</name><operator>-&gt;</operator><name>packet_count</name></name><operator>++</operator> <operator>*</operator> <name><name>modplug</name><operator>-&gt;</operator><name>ts_per_packet</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <call><name>ModPlug_Read</name><argument_list>(<argument><expr><name><name>modplug</name><operator>-&gt;</operator><name>f</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>AUDIO_PKT_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><ternary><condition><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>AVERROR_EOF</name></expr> </then><else>: <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>modplug_read_close</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ModPlugContext</name> <modifier>*</modifier></type><name>modplug</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ModPlug_Unload</name><argument_list>(<argument><expr><name><name>modplug</name><operator>-&gt;</operator><name>f</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>modplug</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>modplug_read_seek</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stream_idx</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>ts</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ModPlugContext</name> <modifier>*</modifier></type><name>modplug</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ModPlug_Seek</name><argument_list>(<argument><expr><name><name>modplug</name><operator>-&gt;</operator><name>f</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>modplug</name><operator>-&gt;</operator><name>video_stream</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>modplug</name><operator>-&gt;</operator><name>packet_count</name></name> <operator>=</operator> <name>ts</name> <operator>/</operator> <name><name>modplug</name><operator>-&gt;</operator><name>ts_per_packet</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>modplug_extensions</name><index>[]</index></name> <init>= <expr><literal type="string">"669,abc,amf,ams,dbm,dmf,dsm,far,it,mdl,med,mid,mod,mt2,mtm,okt,psm,ptm,s3m,stm,ult,umx,xm,itgz,itr,itz,mdgz,mdr,mdz,s3gz,s3r,s3z,xmgz,xmr,xmz"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>modplug_probe</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVProbeData</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>av_match_ext</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>, <argument><expr><name>modplug_extensions</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>buf_size</name></name> <operator>&lt;</operator> <literal type="number">16384</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVPROBE_SCORE_EXTENSION</name><operator>/</operator><literal type="number">2</literal><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name>AVPROBE_SCORE_EXTENSION</name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>modplug_class</name> <init>= <expr><block>{

<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"ModPlug demuxer"</literal></expr>,

<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,

<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>options</name></expr>,

<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVInputFormat</name></type> <name>ff_libmodplug_demuxer</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"libmodplug"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"ModPlug demuxer"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ModPlugContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>read_probe</name> <operator>=</operator> <name>modplug_probe</name></expr>,

<expr><operator>.</operator><name>read_header</name> <operator>=</operator> <name>modplug_read_header</name></expr>,

<expr><operator>.</operator><name>read_packet</name> <operator>=</operator> <name>modplug_read_packet</name></expr>,

<expr><operator>.</operator><name>read_close</name> <operator>=</operator> <name>modplug_read_close</name></expr>,

<expr><operator>.</operator><name>read_seek</name> <operator>=</operator> <name>modplug_read_seek</name></expr>,

<expr><operator>.</operator><name>extensions</name> <operator>=</operator> <name>modplug_extensions</name></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>modplug_class</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
