<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavformat\wvdec.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/channel_layout.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/dict.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avformat.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apetag.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"id3v1.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"wv.h"</cpp:file></cpp:include>

<enum>enum <name>WV_FLAGS</name> <block>{

<decl><name>WV_MONO</name> <init>= <expr><literal type="number">0x0004</literal></expr></init></decl>,

<decl><name>WV_HYBRID</name> <init>= <expr><literal type="number">0x0008</literal></expr></init></decl>,

<decl><name>WV_JOINT</name> <init>= <expr><literal type="number">0x0010</literal></expr></init></decl>,

<decl><name>WV_CROSSD</name> <init>= <expr><literal type="number">0x0020</literal></expr></init></decl>,

<decl><name>WV_HSHAPE</name> <init>= <expr><literal type="number">0x0040</literal></expr></init></decl>,

<decl><name>WV_FLOAT</name> <init>= <expr><literal type="number">0x0080</literal></expr></init></decl>,

<decl><name>WV_INT32</name> <init>= <expr><literal type="number">0x0100</literal></expr></init></decl>,

<decl><name>WV_HBR</name> <init>= <expr><literal type="number">0x0200</literal></expr></init></decl>,

<decl><name>WV_HBAL</name> <init>= <expr><literal type="number">0x0400</literal></expr></init></decl>,

<decl><name>WV_MCINIT</name> <init>= <expr><literal type="number">0x0800</literal></expr></init></decl>,

<decl><name>WV_MCEND</name> <init>= <expr><literal type="number">0x1000</literal></expr></init></decl>,

<decl><name>WV_DSD</name> <init>= <expr><literal type="number">0x80000000</literal></expr></init></decl>,

}</block>;</enum>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>wv_rates</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">6000</literal></expr>, <expr><literal type="number">8000</literal></expr>, <expr><literal type="number">9600</literal></expr>, <expr><literal type="number">11025</literal></expr>, <expr><literal type="number">12000</literal></expr>, <expr><literal type="number">16000</literal></expr>, <expr><literal type="number">22050</literal></expr>, <expr><literal type="number">24000</literal></expr>,

<expr><literal type="number">32000</literal></expr>, <expr><literal type="number">44100</literal></expr>, <expr><literal type="number">48000</literal></expr>, <expr><literal type="number">64000</literal></expr>, <expr><literal type="number">88200</literal></expr>, <expr><literal type="number">96000</literal></expr>, <expr><literal type="number">192000</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct <name>WVContext</name> <block>{

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>block_header</name><index>[<expr><name>WV_HEADER_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WvHeader</name></type> <name>header</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rate</name></decl>, <name>chan</name>, <name>bpp</name>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>chmask</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>multichannel</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>block_parsed</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>apetag_start</name></decl>;</decl_stmt>

}</block></struct></type> <name>WVContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>wv_probe</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVProbeData</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>buf_size</name></name> <operator>&lt;=</operator> <literal type="number">32</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>AV_RL32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'w'</literal></expr></argument>, <argument><expr><literal type="char">'v'</literal></expr></argument>, <argument><expr><literal type="char">'p'</literal></expr></argument>, <argument><expr><literal type="char">'k'</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<call><name>AV_RL32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">24</literal> <operator>&amp;&amp;</operator>

<call><name>AV_RL32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>WV_BLOCK_LIMIT</name> <operator>&amp;&amp;</operator>

<call><name>AV_RL16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0x402</literal> <operator>&amp;&amp;</operator>

<call><name>AV_RL16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0x410</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVPROBE_SCORE_MAX</name></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>wv_read_block_header</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>WVContext</name> <modifier>*</modifier></type><name>wc</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rate</name></decl>, <decl><type ref="prev"/><name>rate_x</name></decl>, <decl><type ref="prev"/><name>bpp</name></decl>, <decl><type ref="prev"/><name>chan</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>chmask</name></decl>, <decl><type ref="prev"/><name>flags</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>wc</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wc</name><operator>-&gt;</operator><name>apetag_start</name></name> <operator>&amp;&amp;</operator> <name><name>wc</name><operator>-&gt;</operator><name>pos</name></name> <operator>&gt;=</operator> <name><name>wc</name><operator>-&gt;</operator><name>apetag_start</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_EOF</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avio_read</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>wc</name><operator>-&gt;</operator><name>block_header</name></name></expr></argument>, <argument><expr><name>WV_HEADER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>WV_HEADER_SIZE</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><ternary><condition><expr><operator>(</operator><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>ret</name></expr> </then><else>: <expr><name>AVERROR_EOF</name></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_wv_parse_header</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wc</name><operator>-&gt;</operator><name>header</name></name></expr></argument>, <argument><expr><name><name>wc</name><operator>-&gt;</operator><name>block_header</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid block header.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>version</name></name> <operator>&lt;</operator> <literal type="number">0x402</literal> <operator>||</operator> <name><name>wc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>version</name></name> <operator>&gt;</operator> <literal type="number">0x410</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avpriv_report_missing_feature</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"WV version 0x%03X"</literal></expr></argument>,

<argument><expr><name><name>wc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>wc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>samples</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>flags</name> <operator>=</operator> <name><name>wc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>flags</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>rate_x</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>WV_DSD</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>bpp</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>WV_DSD</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>(</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>chan</name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>WV_MONO</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>chmask</name> <operator>=</operator> <ternary><condition><expr><name>flags</name> <operator>&amp;</operator> <name>WV_MONO</name></expr> ?</condition><then> <expr><name>AV_CH_LAYOUT_MONO</name></expr> </then><else>: <expr><name>AV_CH_LAYOUT_STEREO</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>rate</name> <operator>=</operator> <name><name>wv_rates</name><index>[<expr><operator>(</operator><name>flags</name> <operator>&gt;&gt;</operator> <literal type="number">23</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xF</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wc</name><operator>-&gt;</operator><name>multichannel</name></name> <operator>=</operator> <operator>!</operator><operator>(</operator><name><name>wc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>initial</name></name> <operator>&amp;&amp;</operator> <name><name>wc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>final</name></name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wc</name><operator>-&gt;</operator><name>multichannel</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>chan</name> <operator>=</operator> <name><name>wc</name><operator>-&gt;</operator><name>chan</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>chmask</name> <operator>=</operator> <name><name>wc</name><operator>-&gt;</operator><name>chmask</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>rate</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <operator>!</operator><name>chan</name> <operator>||</operator> <name>flags</name> <operator>&amp;</operator> <name>WV_DSD</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>wc</name><operator>-&gt;</operator><name>block_parsed</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>block_end</name> <init>= <expr><call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>wc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>blocksize</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>pb</name><operator>-&gt;</operator><name>seekable</name></name> <operator>&amp;</operator> <name>AVIO_SEEKABLE_NORMAL</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Cannot determine additional parameters\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>block_end</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>avio_feof</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>id</name></decl>, <decl><type ref="prev"/><name>size</name></decl>;</decl_stmt>

<expr_stmt><expr><name>id</name> <operator>=</operator> <call><name>avio_r8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>id</name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator></expr> ?</condition><then> <expr><call><name>avio_rl24</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>avio_r8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>id</name> <operator>&amp;</operator> <literal type="number">0x40</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>size</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name>id</name> <operator>&amp;</operator> <literal type="number">0x3F</literal></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0xD</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Insufficient channel information\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>chan</name> <operator>=</operator> <call><name>avio_r8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>size</name> <operator>-</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<expr_stmt><expr><name>chmask</name> <operator>=</operator> <call><name>avio_r8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<expr_stmt><expr><name>chmask</name> <operator>=</operator> <call><name>avio_rl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<expr_stmt><expr><name>chmask</name> <operator>=</operator> <call><name>avio_rl24</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case>

<expr_stmt><expr><name>chmask</name> <operator>=</operator> <call><name>avio_rl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">4</literal></expr>:</case>

<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>chan</name> <operator>|=</operator> <operator>(</operator><call><name>avio_r8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0xF</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>chan</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>chmask</name> <operator>=</operator> <call><name>avio_rl24</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">5</literal></expr>:</case>

<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>chan</name> <operator>|=</operator> <operator>(</operator><call><name>avio_r8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0xF</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>chan</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>chmask</name> <operator>=</operator> <call><name>avio_rl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Invalid channel info size %d\n"</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></switch>

<break>break;</break>

<case>case <expr><literal type="number">0xE</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Invalid DSD block\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rate_x</name> <operator>=</operator> <literal type="number">1U</literal> <operator>&lt;&lt;</operator> <operator>(</operator><call><name>avio_r8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0x1f</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>size</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x27</literal></expr>:</case>

<expr_stmt><expr><name>rate</name> <operator>=</operator> <call><name>avio_rl24</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>id</name> <operator>&amp;</operator> <literal type="number">0x40</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>rate</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Cannot determine custom sampling rate\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>block_end</name> <operator>-</operator> <name><name>wc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>blocksize</name></name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>wc</name><operator>-&gt;</operator><name>bpp</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>wc</name><operator>-&gt;</operator><name>bpp</name></name> <operator>=</operator> <name>bpp</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>wc</name><operator>-&gt;</operator><name>chan</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>wc</name><operator>-&gt;</operator><name>chan</name></name> <operator>=</operator> <name>chan</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>wc</name><operator>-&gt;</operator><name>chmask</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>wc</name><operator>-&gt;</operator><name>chmask</name></name> <operator>=</operator> <name>chmask</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>wc</name><operator>-&gt;</operator><name>rate</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>wc</name><operator>-&gt;</operator><name>rate</name></name> <operator>=</operator> <name>rate</name> <operator>*</operator> <name>rate_x</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;&amp;</operator> <name>bpp</name> <operator>!=</operator> <name><name>wc</name><operator>-&gt;</operator><name>bpp</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Bits per sample differ, this block: %i, header block: %i\n"</literal></expr></argument>,

<argument><expr><name>bpp</name></expr></argument>, <argument><expr><name><name>wc</name><operator>-&gt;</operator><name>bpp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>wc</name><operator>-&gt;</operator><name>multichannel</name></name> <operator>&amp;&amp;</operator> <name>chan</name> <operator>!=</operator> <name><name>wc</name><operator>-&gt;</operator><name>chan</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Channels differ, this block: %i, header block: %i\n"</literal></expr></argument>,

<argument><expr><name>chan</name></expr></argument>, <argument><expr><name><name>wc</name><operator>-&gt;</operator><name>chan</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;&amp;</operator> <name>rate</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>WV_DSD</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>rate</name> <operator>*</operator> <name>rate_x</name> <operator>!=</operator> <name><name>wc</name><operator>-&gt;</operator><name>rate</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Sampling rate differ, this block: %i, header block: %i\n"</literal></expr></argument>,

<argument><expr><name>rate</name> <operator>*</operator> <name>rate_x</name></expr></argument>, <argument><expr><name><name>wc</name><operator>-&gt;</operator><name>rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>wv_read_header</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WVContext</name> <modifier>*</modifier></type><name>wc</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>wc</name><operator>-&gt;</operator><name>block_parsed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>wv_read_block_header</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>wc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>samples</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>wc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>blocksize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<break>break;</break></block_content></block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>st</name> <operator>=</operator> <call><name>avformat_new_stream</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>st</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_alloc_extradata</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>AV_WL16</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>, <argument><expr><name><name>wc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>=</operator> <name>AV_CODEC_ID_WAVPACK</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <name><name>wc</name><operator>-&gt;</operator><name>chan</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>channel_layout</name></name> <operator>=</operator> <name><name>wc</name><operator>-&gt;</operator><name>chmask</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>=</operator> <name><name>wc</name><operator>-&gt;</operator><name>rate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>bits_per_coded_sample</name></name> <operator>=</operator> <name><name>wc</name><operator>-&gt;</operator><name>bpp</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avpriv_set_pts_info</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>wc</name><operator>-&gt;</operator><name>rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>start_time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>total_samples</name></name> <operator>!=</operator> <literal type="number">0xFFFFFFFFu</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>duration</name></name> <operator>=</operator> <name><name>wc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>total_samples</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>pb</name><operator>-&gt;</operator><name>seekable</name></name> <operator>&amp;</operator> <name>AVIO_SEEKABLE_NORMAL</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>cur</name> <init>= <expr><call><name>avio_tell</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>wc</name><operator>-&gt;</operator><name>apetag_start</name></name> <operator>=</operator> <call><name>ff_ape_parse_tag</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>av_dict_get</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_DICT_IGNORE_SUFFIX</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_id3v1_read</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>cur</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>wv_read_packet</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>WVContext</name> <modifier>*</modifier></type><name>wc</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>off</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>block_samples</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>avio_feof</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_EOF</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wc</name><operator>-&gt;</operator><name>block_parsed</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>wv_read_block_header</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <name><name>wc</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_new_packet</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><name><name>wc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>blocksize</name></name> <operator>+</operator> <name>WV_HEADER_SIZE</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>wc</name><operator>-&gt;</operator><name>block_header</name></name></expr></argument>, <argument><expr><name>WV_HEADER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avio_read</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>WV_HEADER_SIZE</name></expr></argument>, <argument><expr><name><name>wc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>blocksize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name><name>wc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>blocksize</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><operator>!</operator><operator>(</operator><name><name>wc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>WV_FLAG_FINAL_BLOCK</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>wv_read_block_header</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>off</name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_grow_packet</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>WV_HEADER_SIZE</name> <operator>+</operator> <name><name>wc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>blocksize</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>off</name></expr></argument>, <argument><expr><name><name>wc</name><operator>-&gt;</operator><name>block_header</name></name></expr></argument>, <argument><expr><name>WV_HEADER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avio_read</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>off</name> <operator>+</operator> <name>WV_HEADER_SIZE</name></expr></argument>, <argument><expr><name><name>wc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>blocksize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name><name>wc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>blocksize</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><ternary><condition><expr><operator>(</operator><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>ret</name></expr> </then><else>: <expr><name>AVERROR_EOF</name></expr></else></ternary></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>stream_index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wc</name><operator>-&gt;</operator><name>block_parsed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name><name>wc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>block_idx</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>block_samples</name> <operator>=</operator> <name><name>wc</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>samples</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>block_samples</name> <operator>&gt;</operator> <name>INT32_MAX</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,

<argument><expr><literal type="string">"Too many samples in block: %"</literal><name>PRIu32</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>block_samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>duration</name></name> <operator>=</operator> <name>block_samples</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name>AVInputFormat</name></type> <name>ff_wv_demuxer</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"wv"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"WavPack"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>WVContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>read_probe</name> <operator>=</operator> <name>wv_probe</name></expr>,

<expr><operator>.</operator><name>read_header</name> <operator>=</operator> <name>wv_read_header</name></expr>,

<expr><operator>.</operator><name>read_packet</name> <operator>=</operator> <name>wv_read_packet</name></expr>,

<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>AVFMT_GENERIC_INDEX</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
