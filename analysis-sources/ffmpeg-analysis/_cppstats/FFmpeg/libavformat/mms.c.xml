<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavformat\mms.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mms.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"asf.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MMS_MAX_STREAMS</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define> 

<function><type><name>int</name></type> <name>ff_mms_read_header</name><parameter_list>(<parameter><decl><type><name>MMSContext</name> <modifier>*</modifier></type><name>mms</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>size_to_copy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>remaining_size</name> <init>= <expr><name><name>mms</name><operator>-&gt;</operator><name>asf_header_size</name></name> <operator>-</operator> <name><name>mms</name><operator>-&gt;</operator><name>asf_header_read_size</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>size_to_copy</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><name>remaining_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <name><name>mms</name><operator>-&gt;</operator><name>asf_header</name></name> <operator>+</operator> <name><name>mms</name><operator>-&gt;</operator><name>asf_header_read_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>size_to_copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mms</name><operator>-&gt;</operator><name>asf_header_read_size</name></name> <operator>==</operator> <name><name>mms</name><operator>-&gt;</operator><name>asf_header_size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mms</name><operator>-&gt;</operator><name>asf_header</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>mms</name><operator>-&gt;</operator><name>asf_header_read_size</name></name> <operator>+=</operator> <name>size_to_copy</name></expr>;</expr_stmt>

<return>return <expr><name>size_to_copy</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_mms_read_data</name><parameter_list>(<parameter><decl><type><name>MMSContext</name> <modifier>*</modifier></type><name>mms</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>read_size</name></decl>;</decl_stmt>

<expr_stmt><expr><name>read_size</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><name><name>mms</name><operator>-&gt;</operator><name>remaining_in_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>mms</name><operator>-&gt;</operator><name>read_in_ptr</name></name></expr></argument>, <argument><expr><name>read_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mms</name><operator>-&gt;</operator><name>remaining_in_len</name></name> <operator>-=</operator> <name>read_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mms</name><operator>-&gt;</operator><name>read_in_ptr</name></name> <operator>+=</operator> <name>read_size</name></expr>;</expr_stmt>

<return>return <expr><name>read_size</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_mms_asf_header_parser</name><parameter_list>(<parameter><decl><type><name>MMSContext</name> <modifier>*</modifier></type><name>mms</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>mms</name><operator>-&gt;</operator><name>asf_header</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>, <decl><type ref="prev"/><name>stream_id</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>mms</name><operator>-&gt;</operator><name>stream_num</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mms</name><operator>-&gt;</operator><name>asf_header_size</name></name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ff_asf_guid</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">22</literal> <operator>||</operator>

<call><name>memcmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>ff_asf_header</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ff_asf_guid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>mms</name><operator>-&gt;</operator><name>mms_hd</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Corrupt stream (invalid ASF header, size=%d)\n"</literal></expr></argument>,

<argument><expr><name><name>mms</name><operator>-&gt;</operator><name>asf_header_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>end</name> <operator>=</operator> <name><name>mms</name><operator>-&gt;</operator><name>asf_header</name></name> <operator>+</operator> <name><name>mms</name><operator>-&gt;</operator><name>asf_header_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ff_asf_guid</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <literal type="number">14</literal></expr>;</expr_stmt>

<while>while<condition>(<expr><name>end</name> <operator>-</operator> <name>p</name> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ff_asf_guid</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>chunksize</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>ff_asf_data_header</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ff_asf_guid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>chunksize</name> <operator>=</operator> <literal type="number">50</literal></expr>;</expr_stmt> 

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>chunksize</name> <operator>=</operator> <call><name>AV_RL64</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ff_asf_guid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>chunksize</name> <operator>||</operator> <name>chunksize</name> <operator>&gt;</operator> <name>end</name> <operator>-</operator> <name>p</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>mms</name><operator>-&gt;</operator><name>mms_hd</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Corrupt stream (header chunksize %"</literal><name>PRId64</name><literal type="string">" is invalid)\n"</literal></expr></argument>,

<argument><expr><name>chunksize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>ff_asf_file_header</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ff_asf_guid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>end</name> <operator>-</operator> <name>p</name> <operator>&gt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ff_asf_guid</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">68</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>mms</name><operator>-&gt;</operator><name>asf_packet_len</name></name> <operator>=</operator> <call><name>AV_RL32</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ff_asf_guid</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mms</name><operator>-&gt;</operator><name>asf_packet_len</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>mms</name><operator>-&gt;</operator><name>asf_packet_len</name></name> <operator>&gt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>mms</name><operator>-&gt;</operator><name>in_buffer</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>mms</name><operator>-&gt;</operator><name>mms_hd</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Corrupt stream (too large pkt_len %d)\n"</literal></expr></argument>,

<argument><expr><name><name>mms</name><operator>-&gt;</operator><name>asf_packet_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>ff_asf_stream_header</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ff_asf_guid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>end</name> <operator>-</operator> <name>p</name> <operator>&gt;=</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>ff_asf_guid</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">26</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>flags</name> <operator>=</operator> <call><name>AV_RL16</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ff_asf_guid</name></expr></argument>)</argument_list></sizeof><operator>*</operator><literal type="number">3</literal> <operator>+</operator> <literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>stream_id</name> <operator>=</operator> <name>flags</name> <operator>&amp;</operator> <literal type="number">0x7F</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mms</name><operator>-&gt;</operator><name>stream_num</name></name> <operator>&lt;</operator> <name>MMS_MAX_STREAMS</name> <operator>&amp;&amp;</operator>

<literal type="number">46</literal> <operator>+</operator> <name><name>mms</name><operator>-&gt;</operator><name>stream_num</name></name> <operator>*</operator> <literal type="number">6</literal> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>mms</name><operator>-&gt;</operator><name>out_buffer</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>mms</name><operator>-&gt;</operator><name>streams</name></name> <operator>=</operator> <call><name>av_fast_realloc</name><argument_list>(<argument><expr><name><name>mms</name><operator>-&gt;</operator><name>streams</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>mms</name><operator>-&gt;</operator><name>nb_streams_allocated</name></name></expr></argument>,

<argument><expr><operator>(</operator><name><name>mms</name><operator>-&gt;</operator><name>stream_num</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>MMSStream</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>mms</name><operator>-&gt;</operator><name>streams</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>mms</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name><name>mms</name><operator>-&gt;</operator><name>stream_num</name></name></expr>]</index></name><operator>.</operator><name>id</name> <operator>=</operator> <name>stream_id</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mms</name><operator>-&gt;</operator><name>stream_num</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>mms</name><operator>-&gt;</operator><name>mms_hd</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Corrupt stream (too many A/V streams)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>ff_asf_ext_stream_header</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ff_asf_guid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>end</name> <operator>-</operator> <name>p</name> <operator>&gt;=</operator> <literal type="number">88</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>stream_count</name> <init>= <expr><call><name>AV_RL16</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">84</literal></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>ext_len_count</name> <init>= <expr><call><name>AV_RL16</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">86</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>skip_bytes</name> <init>= <expr><literal type="number">88</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>stream_count</name><operator>--</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>end</name> <operator>-</operator> <name>p</name> <operator>&lt;</operator> <name>skip_bytes</name> <operator>+</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>mms</name><operator>-&gt;</operator><name>mms_hd</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Corrupt stream (next stream name length is not in the buffer)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>skip_bytes</name> <operator>+=</operator> <literal type="number">4</literal> <operator>+</operator> <call><name>AV_RL16</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>skip_bytes</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<while>while <condition>(<expr><name>ext_len_count</name><operator>--</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>end</name> <operator>-</operator> <name>p</name> <operator>&lt;</operator> <name>skip_bytes</name> <operator>+</operator> <literal type="number">22</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>mms</name><operator>-&gt;</operator><name>mms_hd</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Corrupt stream (next extension system info length is not in the buffer)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>skip_bytes</name> <operator>+=</operator> <literal type="number">22</literal> <operator>+</operator> <call><name>AV_RL32</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>skip_bytes</name> <operator>+</operator> <literal type="number">18</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>end</name> <operator>-</operator> <name>p</name> <operator>&lt;</operator> <name>skip_bytes</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>mms</name><operator>-&gt;</operator><name>mms_hd</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Corrupt stream (the last extension system info length is invalid)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>chunksize</name> <operator>-</operator> <name>skip_bytes</name> <operator>&gt;</operator> <literal type="number">24</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>chunksize</name> <operator>=</operator> <name>skip_bytes</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>ff_asf_head1_guid</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ff_asf_guid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>chunksize</name> <operator>=</operator> <literal type="number">46</literal></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>chunksize</name> <operator>&gt;</operator> <name>end</name> <operator>-</operator> <name>p</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>mms</name><operator>-&gt;</operator><name>mms_hd</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Corrupt stream (header chunksize %"</literal><name>PRId64</name><literal type="string">" is invalid)\n"</literal></expr></argument>,

<argument><expr><name>chunksize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>chunksize</name></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
