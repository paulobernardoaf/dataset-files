<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavformat\fifo_test.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/time.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avformat.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"url.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_TST_PACKETS</name></cpp:macro> <cpp:value>128</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SLEEPTIME_50_MS</name></cpp:macro> <cpp:value>50000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SLEEPTIME_10_MS</name></cpp:macro> <cpp:value>10000</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>FailingMuxerPacketData</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>recover_after</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name></type> <name>sleep_time</name></decl>;</decl_stmt> 

}</block></struct></type> <name>FailingMuxerPacketData</name>;</typedef>

<typedef>typedef <type><struct>struct <name>FailingMuxerContext</name> <block>{

<decl_stmt><decl><type><name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>write_header_ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>write_trailer_ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>print_deinit_summary</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>flush_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>pts_written</name><index>[<expr><name>MAX_TST_PACKETS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pts_written_nr</name></decl>;</decl_stmt>

}</block></struct></type> <name>FailingMuxerContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>failing_write_header</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>avf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>FailingMuxerContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avf</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<return>return <expr><name><name>ctx</name><operator>-&gt;</operator><name>write_header_ret</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>failing_write_packet</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>avf</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>FailingMuxerContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avf</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pkt</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>flush_count</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>FailingMuxerPacketData</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><operator>(</operator><name>FailingMuxerPacketData</name><operator>*</operator><operator>)</operator> <name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>recover_after</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>ret</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>recover_after</name></name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>ret</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>sleep_time</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>slept</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>slept</name> <operator>&lt;</operator> <name><name>data</name><operator>-&gt;</operator><name>sleep_time</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>ff_check_interrupt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>avf</name><operator>-&gt;</operator><name>interrupt_callback</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_EXIT</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_usleep</name><argument_list>(<argument><expr><name>SLEEPTIME_10_MS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>slept</name> <operator>+=</operator> <name>SLEEPTIME_10_MS</name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>pts_written</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>pts_written_nr</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>failing_write_trailer</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>avf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>FailingMuxerContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avf</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<return>return <expr><name><name>ctx</name><operator>-&gt;</operator><name>write_trailer_ret</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>failing_deinit</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>avf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FailingMuxerContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avf</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>print_deinit_summary</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"flush count: %d\n"</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>flush_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"pts seen nr: %d\n"</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pts_written_nr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"pts seen: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>pts_written_nr</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><ternary><condition><expr><name>i</name></expr> ?</condition><then> <expr><literal type="string">",%d"</literal></expr> </then><else>: <expr><literal type="string">"%d"</literal></expr></else></ternary></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pts_written</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(FailingMuxerContext, x)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>options</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{<expr><literal type="string">"write_header_ret"</literal></expr>, <expr><literal type="string">"write_header() return value"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>write_header_ret</name></expr></argument>)</argument_list></call></expr>,

<expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>AV_OPT_FLAG_ENCODING_PARAM</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"write_trailer_ret"</literal></expr>, <expr><literal type="string">"write_trailer() return value"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>write_trailer_ret</name></expr></argument>)</argument_list></call></expr>,

<expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>AV_OPT_FLAG_ENCODING_PARAM</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"print_deinit_summary"</literal></expr>, <expr><literal type="string">"print summary when deinitializing muxer"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>print_deinit_summary</name></expr></argument>)</argument_list></call></expr>,

<expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>AV_OPT_FLAG_ENCODING_PARAM</name></expr>}</block></expr>,

<expr><block>{<expr><name>NULL</name></expr>}</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>failing_muxer_class</name> <init>= <expr><block>{

<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"Fifo test muxer"</literal></expr>,

<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,

<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>options</name></expr>,

<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVOutputFormat</name></type> <name>ff_fifo_test_muxer</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"fifo_test"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Fifo test muxer"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>FailingMuxerContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>write_header</name> <operator>=</operator> <name>failing_write_header</name></expr>,

<expr><operator>.</operator><name>write_packet</name> <operator>=</operator> <name>failing_write_packet</name></expr>,

<expr><operator>.</operator><name>write_trailer</name> <operator>=</operator> <name>failing_write_trailer</name></expr>,

<expr><operator>.</operator><name>deinit</name> <operator>=</operator> <name>failing_deinit</name></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>failing_muxer_class</name></expr>,

<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>AVFMT_NOFILE</name> <operator>|</operator> <name>AVFMT_ALLOW_FLUSH</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
