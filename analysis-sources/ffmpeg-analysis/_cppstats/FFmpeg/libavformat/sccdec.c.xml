<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavformat\sccdec.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avformat.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"subtitles.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avstring.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/bprint.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>SCCContext</name> <block>{

<decl_stmt><decl><type><name>FFDemuxSubtitlesQueue</name></type> <name>q</name></decl>;</decl_stmt>

}</block></struct></type> <name>SCCContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>scc_probe</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVProbeData</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">18</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FFTextReader</name></type> <name>tr</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_text_init_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tr</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>buf_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>ff_text_peek_r8</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tr</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'\r'</literal> <operator>||</operator> <call><name>ff_text_peek_r8</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tr</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_text_r8</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><call><name>ff_text_read</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"Scenarist_SCC V1.0"</literal></expr></argument>, <argument><expr><literal type="number">18</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVPROBE_SCORE_MAX</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>convert</name><parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name>x</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&gt;=</operator> <literal type="char">'a'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>x</name> <operator>-=</operator> <literal type="number">87</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>x</name> <operator>&gt;=</operator> <literal type="char">'A'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>x</name> <operator>-=</operator> <literal type="number">55</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>x</name> <operator>-=</operator> <literal type="char">'0'</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>x</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>scc_read_header</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>SCCContext</name> <modifier>*</modifier></type><name>scc</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><call><name>avformat_new_stream</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>line</name><index>[<expr><literal type="number">4096</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>line2</name><index>[<expr><literal type="number">4096</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>ts_start</name></decl>, <decl><type ref="prev"/><name>ts_end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>len2</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>out</name><index>[<expr><literal type="number">4096</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FFTextReader</name></type> <name>tr</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_text_init_avio</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tr</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>st</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>avpriv_set_pts_info</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>=</operator> <name>AVMEDIA_TYPE_SUBTITLE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>=</operator> <name>AV_CODEC_ID_EIA_608</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>!</operator><call><name>ff_text_eof</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>current_pos</name></decl>, <decl><type ref="prev"/><name>next_pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>saveptr</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>lline</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>hh1</name></decl>, <decl><type ref="prev"/><name>mm1</name></decl>, <decl><type ref="prev"/><name>ss1</name></decl>, <decl><type ref="prev"/><name>fs1</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>hh2</name></decl>, <decl><type ref="prev"/><name>mm2</name></decl>, <decl><type ref="prev"/><name>ss2</name></decl>, <decl><type ref="prev"/><name>fs2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>sub</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>current_pos</name> <operator>=</operator> <call><name>ff_text_pos</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>!</operator><call><name>ff_text_eof</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>ff_subtitles_read_line</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tr</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">13</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"Scenarist_SCC V1.0"</literal></expr></argument>, <argument><expr><literal type="number">18</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_sscanf</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"%d:%d:%d%*[:;]%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>hh1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mm1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ss1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fs1</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ts_start</name> <operator>=</operator> <operator>(</operator><name>hh1</name> <operator>*</operator> <literal type="number">3600LL</literal> <operator>+</operator> <name>mm1</name> <operator>*</operator> <literal type="number">60LL</literal> <operator>+</operator> <name>ss1</name><operator>)</operator> <operator>*</operator> <literal type="number">1000LL</literal> <operator>+</operator> <name>fs1</name> <operator>*</operator> <literal type="number">33</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>next_pos</name> <operator>=</operator> <call><name>ff_text_pos</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>!</operator><call><name>ff_text_eof</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>len2</name> <operator>=</operator> <call><name>ff_subtitles_read_line</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tr</name></expr></argument>, <argument><expr><name>line2</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>line2</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len2</name> <operator>&gt;</operator> <literal type="number">13</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><call><name>av_sscanf</name><argument_list>(<argument><expr><name>line2</name></expr></argument>, <argument><expr><literal type="string">"%d:%d:%d%*[:;]%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>hh2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mm2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ss2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fs2</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ts_end</name> <operator>=</operator> <operator>(</operator><name>hh2</name> <operator>*</operator> <literal type="number">3600LL</literal> <operator>+</operator> <name>mm2</name> <operator>*</operator> <literal type="number">60LL</literal> <operator>+</operator> <name>ss2</name><operator>)</operator> <operator>*</operator> <literal type="number">1000LL</literal> <operator>+</operator> <name>fs2</name> <operator>*</operator> <literal type="number">33</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>

<label><name>try_again</name>:</label>

<expr_stmt><expr><name>lline</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>line</name></expr>;</expr_stmt>

<expr_stmt><expr><name>lline</name> <operator>+=</operator> <literal type="number">12</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4095</literal></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">3</literal></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><call><name>av_strtok</name><argument_list>(<argument><expr><name>lline</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>saveptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name>c1</name></decl>, <decl><type ref="prev"/><name>c2</name></decl>, <decl><type ref="prev"/><name>c3</name></decl>, <decl><type ref="prev"/><name>c4</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ptr</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_sscanf</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"%c%c%c%c"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>c1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c3</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c4</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>lline</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xfc</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>convert</name><argument_list>(<argument><expr><name>c2</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><call><name>convert</name><argument_list>(<argument><expr><name>c1</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>convert</name><argument_list>(<argument><expr><name>c4</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><call><name>convert</name><argument_list>(<argument><expr><name>c3</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>sub</name> <operator>=</operator> <call><name>ff_subtitles_queue_insert</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>scc</name><operator>-&gt;</operator><name>q</name></name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sub</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sub</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <name>current_pos</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sub</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name>ts_start</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sub</name><operator>-&gt;</operator><name>duration</name></name> <operator>=</operator> <name>ts_end</name> <operator>-</operator> <name>ts_start</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>line2</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>current_pos</name> <operator>=</operator> <name>next_pos</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>line2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name><name>line</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ts_start</name> <operator>=</operator> <name>ts_end</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ts_end</name> <operator>+=</operator> <literal type="number">1200</literal></expr>;</expr_stmt>

<goto>goto <name>try_again</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ff_subtitles_queue_finalize</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>scc</name><operator>-&gt;</operator><name>q</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>scc_read_packet</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>SCCContext</name> <modifier>*</modifier></type><name>scc</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>ff_subtitles_queue_read_packet</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>scc</name><operator>-&gt;</operator><name>q</name></name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>scc_read_seek</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stream_index</name></decl></parameter>,

<parameter><decl><type><name>int64_t</name></type> <name>min_ts</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>ts</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>max_ts</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>SCCContext</name> <modifier>*</modifier></type><name>scc</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>ff_subtitles_queue_seek</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>scc</name><operator>-&gt;</operator><name>q</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>stream_index</name></expr></argument>,

<argument><expr><name>min_ts</name></expr></argument>, <argument><expr><name>ts</name></expr></argument>, <argument><expr><name>max_ts</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>scc_read_close</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>SCCContext</name> <modifier>*</modifier></type><name>scc</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_subtitles_queue_clean</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>scc</name><operator>-&gt;</operator><name>q</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name>AVInputFormat</name></type> <name>ff_scc_demuxer</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"scc"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Scenarist Closed Captions"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SCCContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>read_probe</name> <operator>=</operator> <name>scc_probe</name></expr>,

<expr><operator>.</operator><name>read_header</name> <operator>=</operator> <name>scc_read_header</name></expr>,

<expr><operator>.</operator><name>read_packet</name> <operator>=</operator> <name>scc_read_packet</name></expr>,

<expr><operator>.</operator><name>read_seek2</name> <operator>=</operator> <name>scc_read_seek</name></expr>,

<expr><operator>.</operator><name>read_close</name> <operator>=</operator> <name>scc_read_close</name></expr>,

<expr><operator>.</operator><name>extensions</name> <operator>=</operator> <literal type="string">"scc"</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
