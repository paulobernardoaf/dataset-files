<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavformat\webvttdec.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avformat.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"subtitles.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/bprint.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FFDemuxSubtitlesQueue</name></type> <name>q</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>kind</name></decl>;</decl_stmt>

}</block></struct></type> <name>WebVTTContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>webvtt_probe</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVProbeData</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>buf</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>AV_RB24</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0xEFBBBF</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"WEBVTT"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<operator>(</operator><operator>!</operator><name><name>ptr</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>||</operator> <call><name>strchr</name><argument_list>(<argument><expr><literal type="string">"\n\r\t "</literal></expr></argument>, <argument><expr><name><name>ptr</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVPROBE_SCORE_MAX</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64_t</name></type> <name>read_ts</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>hh</name></decl>, <decl><type ref="prev"/><name>mm</name></decl>, <decl><type ref="prev"/><name>ss</name></decl>, <decl><type ref="prev"/><name>ms</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>sscanf</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"%u:%u:%u.%u"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>hh</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ss</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ms</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>hh</name><operator>*</operator><literal type="number">3600LL</literal> <operator>+</operator> <name>mm</name><operator>*</operator><literal type="number">60LL</literal> <operator>+</operator> <name>ss</name><operator>)</operator> <operator>*</operator> <literal type="number">1000LL</literal> <operator>+</operator> <name>ms</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>sscanf</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"%u:%u.%u"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>mm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ss</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ms</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator> <name>mm</name><operator>*</operator><literal type="number">60LL</literal> <operator>+</operator> <name>ss</name><operator>)</operator> <operator>*</operator> <literal type="number">1000LL</literal> <operator>+</operator> <name>ms</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>AV_NOPTS_VALUE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>webvtt_read_header</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>WebVTTContext</name> <modifier>*</modifier></type><name>webvtt</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVBPrint</name></type> <name>header</name></decl>, <decl><type ref="prev"/><name>cue</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><call><name>avformat_new_stream</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>st</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>avpriv_set_pts_info</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>=</operator> <name>AVMEDIA_TYPE_SUBTITLE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>=</operator> <name>AV_CODEC_ID_WEBVTT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>disposition</name></name> <operator>|=</operator> <name><name>webvtt</name><operator>-&gt;</operator><name>kind</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_bprint_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>header</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>AV_BPRINT_SIZE_UNLIMITED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_bprint_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cue</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>AV_BPRINT_SIZE_UNLIMITED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>sub</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>identifier</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>settings</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>identifier_len</name></decl>, <decl><type ref="prev"/><name>settings_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>ts_start</name></decl>, <decl><type ref="prev"/><name>ts_end</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_subtitles_read_chunk</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cue</name><operator>.</operator><name>len</name></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>identifier</name> <operator>=</operator> <name><name>cue</name><operator>.</operator><name>str</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"\xEF\xBB\xBFWEBVTT"</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"WEBVTT"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"NOTE"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\n'</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\r'</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><literal type="string">"--&gt;"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>identifier</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>identifier</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>identifier_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>identifier_len</name> <operator>=</operator> <call><name>strcspn</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>identifier_len</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\r'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ts_start</name> <operator>=</operator> <call><name>read_ts</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>p</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"--&gt;"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<do>do<block type="pseudo"><block_content> <expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block> while <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\t'</literal></expr>)</condition>;</do>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ts_end</name> <operator>=</operator> <call><name>read_ts</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <call><name>strcspn</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"\n\t "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\t'</literal> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name>settings</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><name>settings_len</name> <operator>=</operator> <call><name>strcspn</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>settings_len</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\r'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>sub</name> <operator>=</operator> <call><name>ff_subtitles_queue_insert</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>webvtt</name><operator>-&gt;</operator><name>q</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sub</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sub</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sub</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name>ts_start</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sub</name><operator>-&gt;</operator><name>duration</name></name> <operator>=</operator> <name>ts_end</name> <operator>-</operator> <name>ts_start</name></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_SIDE_DATA</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (name##_len) { uint8_t *buf = av_packet_new_side_data(sub, type, name##_len); if (!buf) { res = AVERROR(ENOMEM); goto end; } memcpy(buf, name, name##_len); } } while (0)</cpp:value></cpp:define>

<expr_stmt><expr><call><name>SET_SIDE_DATA</name><argument_list>(<argument><expr><name>identifier</name></expr></argument>, <argument><expr><name>AV_PKT_DATA_WEBVTT_IDENTIFIER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SET_SIDE_DATA</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><name>AV_PKT_DATA_WEBVTT_SETTINGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>ff_subtitles_queue_finalize</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>webvtt</name><operator>-&gt;</operator><name>q</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>end</name>:</label>

<expr_stmt><expr><call><name>av_bprint_finalize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cue</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_bprint_finalize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>header</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>webvtt_read_packet</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>WebVTTContext</name> <modifier>*</modifier></type><name>webvtt</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>ff_subtitles_queue_read_packet</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>webvtt</name><operator>-&gt;</operator><name>q</name></name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>webvtt_read_seek</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stream_index</name></decl></parameter>,

<parameter><decl><type><name>int64_t</name></type> <name>min_ts</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>ts</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>max_ts</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>WebVTTContext</name> <modifier>*</modifier></type><name>webvtt</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>ff_subtitles_queue_seek</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>webvtt</name><operator>-&gt;</operator><name>q</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>stream_index</name></expr></argument>,

<argument><expr><name>min_ts</name></expr></argument>, <argument><expr><name>ts</name></expr></argument>, <argument><expr><name>max_ts</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>webvtt_read_close</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>WebVTTContext</name> <modifier>*</modifier></type><name>webvtt</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_subtitles_queue_clean</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>webvtt</name><operator>-&gt;</operator><name>q</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(WebVTTContext, x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KIND_FLAGS</name></cpp:macro> <cpp:value>AV_OPT_FLAG_SUBTITLE_PARAM|AV_OPT_FLAG_DECODING_PARAM</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>options</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"kind"</literal></expr>, <expr><literal type="string">"Set kind of WebVTT track"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>kind</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>KIND_FLAGS</name></expr>, <expr><literal type="string">"webvtt_kind"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"subtitles"</literal></expr>, <expr><literal type="string">"WebVTT subtitles kind"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>KIND_FLAGS</name></expr>, <expr><literal type="string">"webvtt_kind"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"captions"</literal></expr>, <expr><literal type="string">"WebVTT captions kind"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AV_DISPOSITION_CAPTIONS</name></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>KIND_FLAGS</name></expr>, <expr><literal type="string">"webvtt_kind"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"descriptions"</literal></expr>, <expr><literal type="string">"WebVTT descriptions kind"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AV_DISPOSITION_DESCRIPTIONS</name></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>KIND_FLAGS</name></expr>, <expr><literal type="string">"webvtt_kind"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"metadata"</literal></expr>, <expr><literal type="string">"WebVTT metadata kind"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AV_DISPOSITION_METADATA</name></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>KIND_FLAGS</name></expr>, <expr><literal type="string">"webvtt_kind"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>webvtt_demuxer_class</name> <init>= <expr><block>{

<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"WebVTT demuxer"</literal></expr>,

<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,

<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>options</name></expr>,

<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVInputFormat</name></type> <name>ff_webvtt_demuxer</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"webvtt"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"WebVTT subtitle"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>WebVTTContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>read_probe</name> <operator>=</operator> <name>webvtt_probe</name></expr>,

<expr><operator>.</operator><name>read_header</name> <operator>=</operator> <name>webvtt_read_header</name></expr>,

<expr><operator>.</operator><name>read_packet</name> <operator>=</operator> <name>webvtt_read_packet</name></expr>,

<expr><operator>.</operator><name>read_seek2</name> <operator>=</operator> <name>webvtt_read_seek</name></expr>,

<expr><operator>.</operator><name>read_close</name> <operator>=</operator> <name>webvtt_read_close</name></expr>,

<expr><operator>.</operator><name>extensions</name> <operator>=</operator> <literal type="string">"vtt"</literal></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>webvtt_demuxer_class</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
