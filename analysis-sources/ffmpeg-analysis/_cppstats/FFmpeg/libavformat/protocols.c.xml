<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavformat\protocols.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avstring.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mem.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"url.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>URLProtocol</name></type> <name>ff_async_protocol</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>URLProtocol</name></type> <name>ff_bluray_protocol</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>URLProtocol</name></type> <name>ff_cache_protocol</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>URLProtocol</name></type> <name>ff_concat_protocol</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>URLProtocol</name></type> <name>ff_crypto_protocol</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>URLProtocol</name></type> <name>ff_data_protocol</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>URLProtocol</name></type> <name>ff_ffrtmpcrypt_protocol</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>URLProtocol</name></type> <name>ff_ffrtmphttp_protocol</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>URLProtocol</name></type> <name>ff_file_protocol</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>URLProtocol</name></type> <name>ff_ftp_protocol</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>URLProtocol</name></type> <name>ff_gopher_protocol</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>URLProtocol</name></type> <name>ff_hls_protocol</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>URLProtocol</name></type> <name>ff_http_protocol</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>URLProtocol</name></type> <name>ff_httpproxy_protocol</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>URLProtocol</name></type> <name>ff_https_protocol</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>URLProtocol</name></type> <name>ff_icecast_protocol</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>URLProtocol</name></type> <name>ff_mmsh_protocol</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>URLProtocol</name></type> <name>ff_mmst_protocol</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>URLProtocol</name></type> <name>ff_md5_protocol</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>URLProtocol</name></type> <name>ff_pipe_protocol</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>URLProtocol</name></type> <name>ff_prompeg_protocol</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>URLProtocol</name></type> <name>ff_rtmp_protocol</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>URLProtocol</name></type> <name>ff_rtmpe_protocol</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>URLProtocol</name></type> <name>ff_rtmps_protocol</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>URLProtocol</name></type> <name>ff_rtmpt_protocol</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>URLProtocol</name></type> <name>ff_rtmpte_protocol</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>URLProtocol</name></type> <name>ff_rtmpts_protocol</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>URLProtocol</name></type> <name>ff_rtp_protocol</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>URLProtocol</name></type> <name>ff_sctp_protocol</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>URLProtocol</name></type> <name>ff_srtp_protocol</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>URLProtocol</name></type> <name>ff_subfile_protocol</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>URLProtocol</name></type> <name>ff_tee_protocol</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>URLProtocol</name></type> <name>ff_tcp_protocol</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>URLProtocol</name></type> <name>ff_tls_protocol</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>URLProtocol</name></type> <name>ff_udp_protocol</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>URLProtocol</name></type> <name>ff_udplite_protocol</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>URLProtocol</name></type> <name>ff_unix_protocol</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>URLProtocol</name></type> <name>ff_libamqp_protocol</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>URLProtocol</name></type> <name>ff_librtmp_protocol</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>URLProtocol</name></type> <name>ff_librtmpe_protocol</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>URLProtocol</name></type> <name>ff_librtmps_protocol</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>URLProtocol</name></type> <name>ff_librtmpt_protocol</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>URLProtocol</name></type> <name>ff_librtmpte_protocol</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>URLProtocol</name></type> <name>ff_libsrt_protocol</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>URLProtocol</name></type> <name>ff_libssh_protocol</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>URLProtocol</name></type> <name>ff_libsmbclient_protocol</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>URLProtocol</name></type> <name>ff_libzmq_protocol</name></decl>;</decl_stmt>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavformat/protocol_list.c"</cpp:file></cpp:include>

<function><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>ff_urlcontext_child_class_next</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>prev</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>prev</name> <operator>&amp;&amp;</operator> <name><name>url_protocols</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>url_protocols</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>priv_data_class</name> <operator>==</operator> <name>prev</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<for>for <control>(<init>;</init> <condition><expr><name><name>url_protocols</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>url_protocols</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>priv_data_class</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>url_protocols</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>priv_data_class</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>avio_enum_protocols</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>opaque</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>output</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>URLProtocol</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name> <init>= <expr><operator>*</operator><name>opaque</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><name>url_protocols</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>opaque</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>p</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>opaque</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>output</name> <operator>&amp;&amp;</operator> <name><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator><operator>-&gt;</operator><name>url_write</name></name><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>!</operator><name>output</name> <operator>&amp;&amp;</operator> <name><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator><operator>-&gt;</operator><name>url_read</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator><operator>-&gt;</operator><name>name</name></name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>avio_enum_protocols</name><argument_list>(<argument><expr><name>opaque</name></expr></argument>, <argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>avio_protocol_get_class</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>url_protocols</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>url_protocols</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>name</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>url_protocols</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>priv_data_class</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>URLProtocol</name> <modifier>*</modifier><modifier>*</modifier></type><name>ffurl_get_protocols</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>whitelist</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>blacklist</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>URLProtocol</name> <modifier>*</modifier><modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_mallocz_array</name><argument_list>(<argument><expr><call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>url_protocols</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ret</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>url_protocols</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>URLProtocol</name> <modifier>*</modifier></type><name>up</name> <init>= <expr><name><name>url_protocols</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>whitelist</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>whitelist</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>av_match_name</name><argument_list>(<argument><expr><name><name>up</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>whitelist</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>blacklist</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>blacklist</name> <operator>&amp;&amp;</operator> <call><name>av_match_name</name><argument_list>(<argument><expr><name><name>up</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>blacklist</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ret</name><index>[<expr><name>ret_idx</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>up</name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

</unit>
