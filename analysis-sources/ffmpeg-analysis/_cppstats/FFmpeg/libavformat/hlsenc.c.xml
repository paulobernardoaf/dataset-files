<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavformat\hlsenc.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;float.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_UNISTD_H</name></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_GCRYPT</name></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;gcrypt.h&gt;</cpp:file></cpp:include>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>CONFIG_OPENSSL</name></expr></cpp:elif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/rand.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mathematics.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/parseutils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avstring.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/random_seed.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/log.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/time_internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avformat.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avio_internal.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_HTTP_PROTOCOL</name></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hlsplaylist.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"os_support.h"</cpp:file></cpp:include>

<typedef>typedef <type><enum>enum <block>{

<decl><name>HLS_START_SEQUENCE_AS_START_NUMBER</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>HLS_START_SEQUENCE_AS_SECONDS_SINCE_EPOCH</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,

<decl><name>HLS_START_SEQUENCE_AS_FORMATTED_DATETIME</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>, 

}</block></enum></type> <name>StartSequenceSourceType</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{

<decl><name>CODEC_ATTRIBUTE_WRITTEN</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>CODEC_ATTRIBUTE_WILL_NOT_BE_WRITTEN</name></decl>,

}</block></enum></type> <name>CodecAttributeStatus</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEYSIZE</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINE_BUFFER_SIZE</name></cpp:macro> <cpp:value>MAX_URL_SIZE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HLS_MICROSECOND_UNIT</name></cpp:macro> <cpp:value>1000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POSTFIX_PATTERN</name></cpp:macro> <cpp:value>"_%d"</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>HLSSegment</name> <block>{

<decl_stmt><decl><type><name>char</name></type> <name><name>filename</name><index>[<expr><name>MAX_URL_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>sub_filename</name><index>[<expr><name>MAX_URL_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>duration</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>discont</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>keyframe_pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>keyframe_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>var_stream_idx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>key_uri</name><index>[<expr><name>LINE_BUFFER_SIZE</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>iv_string</name><index>[<expr><name>KEYSIZE</name><operator>*</operator><literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>HLSSegment</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

}</block></struct></type> <name>HLSSegment</name>;</typedef>

<typedef>typedef <type><enum>enum <name>HLSFlags</name> <block>{

<decl><name>HLS_SINGLE_FILE</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl>,

<decl><name>HLS_DELETE_SEGMENTS</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>,

<decl><name>HLS_ROUND_DURATIONS</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr></init></decl>,

<decl><name>HLS_DISCONT_START</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator></expr></init></decl>,

<decl><name>HLS_OMIT_ENDLIST</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr></init></decl>,

<decl><name>HLS_SPLIT_BY_TIME</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator></expr></init></decl>,

<decl><name>HLS_APPEND_LIST</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator></expr></init></decl>,

<decl><name>HLS_PROGRAM_DATE_TIME</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">7</literal><operator>)</operator></expr></init></decl>,

<decl><name>HLS_SECOND_LEVEL_SEGMENT_INDEX</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr></init></decl>, 

<decl><name>HLS_SECOND_LEVEL_SEGMENT_DURATION</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">9</literal><operator>)</operator></expr></init></decl>, 

<decl><name>HLS_SECOND_LEVEL_SEGMENT_SIZE</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">10</literal><operator>)</operator></expr></init></decl>, 

<decl><name>HLS_TEMP_FILE</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">11</literal><operator>)</operator></expr></init></decl>,

<decl><name>HLS_PERIODIC_REKEY</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">12</literal><operator>)</operator></expr></init></decl>,

<decl><name>HLS_INDEPENDENT_SEGMENTS</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator></expr></init></decl>,

<decl><name>HLS_I_FRAMES_ONLY</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">14</literal><operator>)</operator></expr></init></decl>,

}</block></enum></type> <name>HLSFlags</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{

<decl><name>SEGMENT_TYPE_MPEGTS</name></decl>,

<decl><name>SEGMENT_TYPE_FMP4</name></decl>,

}</block></enum></type> <name>SegmentType</name>;</typedef>

<typedef>typedef <type><struct>struct <name>VariantStream</name> <block>{

<decl_stmt><decl><type><name>unsigned</name></type> <name>var_stream_idx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>number</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>sequence</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ff_const59</name> <name>AVOutputFormat</name> <modifier>*</modifier></type><name>oformat</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ff_const59</name> <name>AVOutputFormat</name> <modifier>*</modifier></type><name>vtt_oformat</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>packets_written</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>init_range_length</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>temp_buffer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>avf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>vtt_avf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>has_video</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>has_subtitle</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>new_start</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>start_pts_from_audio</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>dpp</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int64_t</name></type> <name>start_pts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>end_pts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>video_lastpos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>video_keyframe_pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>video_keyframe_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>duration</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int64_t</name></type> <name>start_pos</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int64_t</name></type> <name>size</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>nb_entries</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>discontinuity_set</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>discontinuity</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>reference_stream_index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HLSSegment</name> <modifier>*</modifier></type><name>segments</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HLSSegment</name> <modifier>*</modifier></type><name>last_segment</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HLSSegment</name> <modifier>*</modifier></type><name>old_segments</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>basename</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>vtt_basename</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>vtt_m3u8_name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>m3u8_name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>initial_prog_date_time</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>current_segment_final_filename_fmt</name><index>[<expr><name>MAX_URL_SIZE</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>fmp4_init_filename</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>base_output_dirname</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier><modifier>*</modifier></type><name>streams</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>codec_attr</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CodecAttributeStatus</name></type> <name>attr_status</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>nb_streams</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>m3u8_created</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>is_default</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>language</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>agroup</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ccgroup</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>baseurl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>varname</name></decl>;</decl_stmt> 

}</block></struct></type> <name>VariantStream</name>;</typedef>

<typedef>typedef <type><struct>struct <name>ClosedCaptionsStream</name> <block>{

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ccgroup</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>instreamid</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>language</name></decl>;</decl_stmt> 

}</block></struct></type> <name>ClosedCaptionsStream</name>;</typedef>

<typedef>typedef <type><struct>struct <name>HLSContext</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int64_t</name></type> <name>start_sequence</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>start_sequence_source_type</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name>time</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name>init_time</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>max_nb_segments</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>hls_delete_threshold</name></decl>;</decl_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_HLS_WRAP</name></expr></cpp:if>

<decl_stmt><decl><type><name>int</name></type> <name>wrap</name></decl>;</decl_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>flags</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>pl_type</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>segment_filename</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>fmp4_init_filename</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>segment_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>use_localtime</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>use_localtime_mkdir</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>allowcache</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>recording_time</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>max_seg_size</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>baseurl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>vtt_format_options_str</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>subtitle_filename</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVDictionary</name> <modifier>*</modifier></type><name>format_options</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>encrypt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>key</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>key_url</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>iv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>key_basename</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>encrypt_started</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>key_info_file</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>key_file</name><index>[<expr><name>LINE_BUFFER_SIZE</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>key_uri</name><index>[<expr><name>LINE_BUFFER_SIZE</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>key_string</name><index>[<expr><name>KEYSIZE</name><operator>*</operator><literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>iv_string</name><index>[<expr><name>KEYSIZE</name><operator>*</operator><literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVDictionary</name> <modifier>*</modifier></type><name>vtt_format_options</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>method</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>user_agent</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VariantStream</name> <modifier>*</modifier></type><name>var_streams</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>nb_varstreams</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ClosedCaptionsStream</name> <modifier>*</modifier></type><name>cc_streams</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>nb_ccstreams</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>master_m3u8_created</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>master_m3u8_url</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>version</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>var_stream_map</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cc_stream_map</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>master_pl_name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>master_publish_rate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>http_persistent</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>m3u8_out</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>sub_m3u8_out</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>timeout</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ignore_io_errors</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>headers</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>has_default_key</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>has_video_m3u8</name></decl>;</decl_stmt> 

}</block></struct></type> <name>HLSContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>hlsenc_io_open</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier><modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>,

<parameter><decl><type><name>AVDictionary</name> <modifier>*</modifier><modifier>*</modifier></type><name>options</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HLSContext</name> <modifier>*</modifier></type><name>hls</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>http_base_proto</name> <init>= <expr><ternary><condition><expr><name>filename</name></expr> ?</condition><then> <expr><call><name>ff_is_http_proto</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><name>AVERROR_MUXER_NOT_FOUND</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>pb</name> <operator>||</operator> <operator>!</operator><name>http_base_proto</name> <operator>||</operator> <operator>!</operator><name><name>hls</name><operator>-&gt;</operator><name>http_persistent</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name><name>s</name><operator>-&gt;</operator><name>io_open</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>AVIO_FLAG_WRITE</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_HTTP_PROTOCOL</name></expr></cpp:if>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>http_url_context</name> <init>= <expr><call><name>ffio_geturlcontext</name><argument_list>(<argument><expr><operator>*</operator><name>pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>http_url_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_http_do_new_request</name><argument_list>(<argument><expr><name>http_url_context</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_format_io_close</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>hlsenc_io_close</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier><modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HLSContext</name> <modifier>*</modifier></type><name>hls</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>http_base_proto</name> <init>= <expr><ternary><condition><expr><name>filename</name></expr> ?</condition><then> <expr><call><name>ff_is_http_proto</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>pb</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>http_base_proto</name> <operator>||</operator> <operator>!</operator><name><name>hls</name><operator>-&gt;</operator><name>http_persistent</name></name> <operator>||</operator> <name><name>hls</name><operator>-&gt;</operator><name>key_info_file</name></name> <operator>||</operator> <name><name>hls</name><operator>-&gt;</operator><name>encrypt</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ff_format_io_close</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_HTTP_PROTOCOL</name></expr></cpp:if>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>http_url_context</name> <init>= <expr><call><name>ffio_geturlcontext</name><argument_list>(<argument><expr><operator>*</operator><name>pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>http_url_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_flush</name><argument_list>(<argument><expr><operator>*</operator><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ffurl_shutdown</name><argument_list>(<argument><expr><name>http_url_context</name></expr></argument>, <argument><expr><name>AVIO_FLAG_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_http_get_shutdown_status</name><argument_list>(<argument><expr><name>http_url_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>set_http_options</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVDictionary</name> <modifier>*</modifier><modifier>*</modifier></type><name>options</name></decl></parameter>, <parameter><decl><type><name>HLSContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>http_base_proto</name> <init>= <expr><call><name>ff_is_http_proto</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>url</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>method</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><literal type="string">"method"</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>method</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>http_base_proto</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><literal type="string">"method"</literal></expr></argument>, <argument><expr><literal type="string">"PUT"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>user_agent</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><literal type="string">"user_agent"</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>user_agent</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>http_persistent</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_dict_set_int</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><literal type="string">"multiple_requests"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>timeout</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_dict_set_int</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><literal type="string">"timeout"</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>timeout</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>headers</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><literal type="string">"headers"</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>headers</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>write_codec_attr</name><parameter_list>(<parameter><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name></decl></parameter>, <parameter><decl><type><name>VariantStream</name> <modifier>*</modifier></type><name>vs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>codec_strlen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>vs</name><operator>-&gt;</operator><name>codec_attr</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>attr</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_SUBTITLE</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vs</name><operator>-&gt;</operator><name>attr_status</name></name> <operator>==</operator> <name>CODEC_ATTRIBUTE_WILL_NOT_BE_WRITTEN</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_H264</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>extradata</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>data</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|</operator> <name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>|</operator> <name><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x1F</literal><operator>)</operator> <operator>==</operator> <literal type="number">7</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>attr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><literal type="string">"avc1.%02x%02x%02x"</literal></expr></argument>, <argument><expr><name><name>data</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>data</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>data</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_MP2</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>attr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"mp4a.40.33"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_MP3</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>attr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"mp4a.40.34"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_AAC</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>attr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"mp4a.40.2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_AC3</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>attr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"ac-3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_EAC3</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>attr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"ec-3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>av_stristr</name><argument_list>(<argument><expr><name><name>vs</name><operator>-&gt;</operator><name>codec_attr</name></name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>vs</name><operator>-&gt;</operator><name>codec_attr</name></name> <operator>+</operator> <name>codec_strlen</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>vs</name><operator>-&gt;</operator><name>codec_attr</name></name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name>codec_strlen</name></expr></argument>,

<argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>codec_strlen</name></expr> ?</condition><then> <expr><literal type="string">","</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return;</return>

<label><name>fail</name>:</label>

<expr_stmt><expr><name><name>vs</name><operator>-&gt;</operator><name>codec_attr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vs</name><operator>-&gt;</operator><name>attr_status</name></name> <operator>=</operator> <name>CODEC_ATTRIBUTE_WILL_NOT_BE_WRITTEN</name></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>replace_str_data_in_filename</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>placeholder</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>datastring</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>new_filename</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>addchar_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>found_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVBPrint</name></type> <name>buf</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_bprint_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>AV_BPRINT_SIZE_UNLIMITED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>filename</name></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'%'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name>p</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="char">'%'</literal></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>addchar_count</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'%'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name>p</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>==</operator> <name>placeholder</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>datastring</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>addchar_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>found_count</name> <operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>addchar_count</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>addchar_count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_bprint_append_data</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>addchar_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>addchar_count</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>av_bprint_is_complete</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_bprint_finalize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_bprint_finalize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>new_filename</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>!</operator><name>new_filename</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <name>new_filename</name></expr>;</expr_stmt>

<return>return <expr><name>found_count</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>replace_int_data_in_filename</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>placeholder</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>number</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>new_filename</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nd</name></decl>, <decl><type ref="prev"/><name>addchar_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>found_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVBPrint</name></type> <name>buf</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_bprint_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>AV_BPRINT_SIZE_UNLIMITED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>filename</name></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'%'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name>p</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="char">'%'</literal></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>addchar_count</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'%'</literal> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>av_isdigit</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>p</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call> <operator>||</operator> <operator>*</operator><operator>(</operator><name>p</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>==</operator> <name>placeholder</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>nd</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>addchar_count</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>av_isdigit</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>p</name> <operator>+</operator> <name>addchar_count</name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>nd</name> <operator>=</operator> <name>nd</name> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <operator>*</operator><operator>(</operator><name>p</name> <operator>+</operator> <name>addchar_count</name><operator>)</operator> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>addchar_count</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><name>p</name> <operator>+</operator> <name>addchar_count</name><operator>)</operator> <operator>==</operator> <name>placeholder</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%0*"</literal><name>PRId64</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>number</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>nd</name></expr> </then><else>: <expr><name>nd</name><operator>++</operator></expr></else></ternary></expr></argument>, <argument><expr><name>number</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <operator>(</operator><name>addchar_count</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>addchar_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>found_count</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>addchar_count</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>av_bprint_append_data</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>addchar_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>addchar_count</name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>av_bprint_is_complete</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_bprint_finalize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_bprint_finalize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>new_filename</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>!</operator><name>new_filename</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <name>new_filename</name></expr>;</expr_stmt>

<return>return <expr><name>found_count</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>write_styp</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"styp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"msdh"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"msdh"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"msix"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>flush_dynbuf</name><parameter_list>(<parameter><decl><type><name>VariantStream</name> <modifier>*</modifier></type><name>vs</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>range_length</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>vs</name><operator>-&gt;</operator><name>avf</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>pb</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_write_frame</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>range_length</name> <operator>=</operator> <call><name>avio_close_dyn_buf</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vs</name><operator>-&gt;</operator><name>temp_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>pb</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name><name>vs</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name><name>vs</name><operator>-&gt;</operator><name>temp_buffer</name></name></expr></argument>, <argument><expr><operator>*</operator><name>range_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_flush</name><argument_list>(<argument><expr><name><name>vs</name><operator>-&gt;</operator><name>out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>avio_open_dyn_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>reflush_dynbuf</name><parameter_list>(<parameter><decl><type><name>VariantStream</name> <modifier>*</modifier></type><name>vs</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>range_length</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name><name>vs</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name><name>vs</name><operator>-&gt;</operator><name>temp_buffer</name></name></expr></argument>, <argument><expr><operator>*</operator><name>range_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_DOS_PATHS</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEPARATOR</name></cpp:macro> <cpp:value>'\\'</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEPARATOR</name></cpp:macro> <cpp:value>'/'</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type> <name>hls_delete_old_segments</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>HLSContext</name> <modifier>*</modifier></type><name>hls</name></decl></parameter>,

<parameter><decl><type><name>VariantStream</name> <modifier>*</modifier></type><name>vs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HLSSegment</name> <modifier>*</modifier></type><name>segment</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>previous_segment</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>playlist_duration</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>path_size</name></decl>, <decl><type ref="prev"/><name>sub_path_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>segment_cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dirname</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>sub_path</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dirname_r</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dirname_repl</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>vtt_dirname</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>vtt_dirname_r</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVDictionary</name> <modifier>*</modifier></type><name>options</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>proto</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>segment</name> <operator>=</operator> <name><name>vs</name><operator>-&gt;</operator><name>segments</name></name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>segment</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>playlist_duration</name> <operator>+=</operator> <name><name>segment</name><operator>-&gt;</operator><name>duration</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>segment</name> <operator>=</operator> <name><name>segment</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>segment</name> <operator>=</operator> <name><name>vs</name><operator>-&gt;</operator><name>old_segments</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>segment_cnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>segment</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>playlist_duration</name> <operator>-=</operator> <name><name>segment</name><operator>-&gt;</operator><name>duration</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>previous_segment</name> <operator>=</operator> <name>segment</name></expr>;</expr_stmt>

<expr_stmt><expr><name>segment</name> <operator>=</operator> <name><name>previous_segment</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>segment_cnt</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>playlist_duration</name> <operator>&lt;=</operator> <operator>-</operator><name><name>previous_segment</name><operator>-&gt;</operator><name>duration</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>previous_segment</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>segment_cnt</name> <operator>&gt;=</operator> <name><name>hls</name><operator>-&gt;</operator><name>hls_delete_threshold</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>previous_segment</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>segment</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>hls</name><operator>-&gt;</operator><name>use_localtime_mkdir</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>dirname_r</name> <operator>=</operator> <ternary><condition><expr><name><name>hls</name><operator>-&gt;</operator><name>segment_filename</name></name></expr> ?</condition><then> <expr><call><name>av_strdup</name><argument_list>(<argument><expr><name><name>hls</name><operator>-&gt;</operator><name>segment_filename</name></name></expr></argument>)</argument_list></call></expr></then><else>: <expr><call><name>av_strdup</name><argument_list>(<argument><expr><name><name>vs</name><operator>-&gt;</operator><name>avf</name><operator>-&gt;</operator><name>url</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>dirname</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><call><name>av_dirname</name><argument_list>(<argument><expr><name>dirname_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dirname</name> <operator>&amp;&amp;</operator> <call><name>av_stristr</name><argument_list>(<argument><expr><name>dirname</name></expr></argument>, <argument><expr><literal type="string">"%v"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>dirname_repl</name> <init>= <expr><name>dirname</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>vs</name><operator>-&gt;</operator><name>varname</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>replace_int_data_in_filename</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dirname_repl</name></expr></argument>, <argument><expr><name>dirname</name></expr></argument>, <argument><expr><literal type="char">'v'</literal></expr></argument>, <argument><expr><name><name>segment</name><operator>-&gt;</operator><name>var_stream_idx</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>replace_str_data_in_filename</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dirname_repl</name></expr></argument>, <argument><expr><name>dirname</name></expr></argument>, <argument><expr><literal type="char">'v'</literal></expr></argument>, <argument><expr><name><name>vs</name><operator>-&gt;</operator><name>varname</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>dirname</name> <operator>=</operator> <name>dirname_repl</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>segment</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hls</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"deleting old segment %s\n"</literal></expr></argument>,

<argument><expr><name><name>segment</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>path_size</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name><name>hls</name><operator>-&gt;</operator><name>use_localtime_mkdir</name></name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name>strlen</name><argument_list>(<argument><expr><name>dirname</name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></else></ternary><operator>)</operator> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>segment</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>path</name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name>path_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>path</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hls</name><operator>-&gt;</operator><name>use_localtime_mkdir</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_strlcpy</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>segment</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>, <argument><expr><name>path_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content> 

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>path_size</name></expr></argument>, <argument><expr><literal type="string">"%s%c%s"</literal></expr></argument>, <argument><expr><name>dirname</name></expr></argument>, <argument><expr><name>SEPARATOR</name></expr></argument>, <argument><expr><name><name>segment</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>proto</name> <operator>=</operator> <call><name>avio_find_protocol_name</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hls</name><operator>-&gt;</operator><name>method</name></name> <operator>||</operator> <operator>(</operator><name>proto</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>av_strcasecmp</name><argument_list>(<argument><expr><name>proto</name></expr></argument>, <argument><expr><literal type="string">"http"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>options</name></expr></argument>, <argument><expr><literal type="string">"method"</literal></expr></argument>, <argument><expr><literal type="string">"DELETE"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name><name>vs</name><operator>-&gt;</operator><name>avf</name><operator>-&gt;</operator><name>io_open</name></name><argument_list>(<argument><expr><name><name>vs</name><operator>-&gt;</operator><name>avf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>out</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>AVIO_FLAG_WRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>options</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>hls</name><operator>-&gt;</operator><name>ignore_io_errors</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ff_format_io_close</name><argument_list>(<argument><expr><name><name>vs</name><operator>-&gt;</operator><name>avf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>unlink</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hls</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"failed to delete old segment %s: %s\n"</literal></expr></argument>,

<argument><expr><name>path</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>segment</name><operator>-&gt;</operator><name>sub_filename</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>vtt_dirname_r</name> <operator>=</operator> <call><name>av_strdup</name><argument_list>(<argument><expr><name><name>vs</name><operator>-&gt;</operator><name>vtt_avf</name><operator>-&gt;</operator><name>url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vtt_dirname</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><call><name>av_dirname</name><argument_list>(<argument><expr><name>vtt_dirname_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sub_path_size</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>segment</name><operator>-&gt;</operator><name>sub_filename</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>vtt_dirname</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>sub_path</name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name>sub_path_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sub_path</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>sub_path</name></expr></argument>, <argument><expr><name>sub_path_size</name></expr></argument>, <argument><expr><literal type="string">"%s%c%s"</literal></expr></argument>, <argument><expr><name>vtt_dirname</name></expr></argument>, <argument><expr><name>SEPARATOR</name></expr></argument>, <argument><expr><name><name>segment</name><operator>-&gt;</operator><name>sub_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vtt_dirname_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hls</name><operator>-&gt;</operator><name>method</name></name> <operator>||</operator> <operator>(</operator><name>proto</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>av_strcasecmp</name><argument_list>(<argument><expr><name>proto</name></expr></argument>, <argument><expr><literal type="string">"http"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>options</name></expr></argument>, <argument><expr><literal type="string">"method"</literal></expr></argument>, <argument><expr><literal type="string">"DELETE"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name><name>vs</name><operator>-&gt;</operator><name>vtt_avf</name><operator>-&gt;</operator><name>io_open</name></name><argument_list>(<argument><expr><name><name>vs</name><operator>-&gt;</operator><name>vtt_avf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>out</name></expr></argument>, <argument><expr><name>sub_path</name></expr></argument>, <argument><expr><name>AVIO_FLAG_WRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>options</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>hls</name><operator>-&gt;</operator><name>ignore_io_errors</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sub_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ff_format_io_close</name><argument_list>(<argument><expr><name><name>vs</name><operator>-&gt;</operator><name>vtt_avf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>unlink</name><argument_list>(<argument><expr><name>sub_path</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hls</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"failed to delete old segment %s: %s\n"</literal></expr></argument>,

<argument><expr><name>sub_path</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sub_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>previous_segment</name> <operator>=</operator> <name>segment</name></expr>;</expr_stmt>

<expr_stmt><expr><name>segment</name> <operator>=</operator> <name><name>previous_segment</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>previous_segment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dirname_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dirname_repl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vtt_dirname_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>randomize</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_GCRYPT</name></expr></cpp:if>

<expr_stmt><expr><call><name>gcry_randomize</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>GCRY_VERY_STRONG_RANDOM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>CONFIG_OPENSSL</name></expr></cpp:elif>

<if_stmt><if>if <condition>(<expr><call><name>RAND_bytes</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>do_encrypt</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>VariantStream</name> <modifier>*</modifier></type><name>vs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HLSContext</name> <modifier>*</modifier></type><name>hls</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>key</name><index>[<expr><name>KEYSIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>key_basename_source</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>hls</name><operator>-&gt;</operator><name>master_m3u8_url</name></name><operator>)</operator></expr> ?</condition><then> <expr><name><name>hls</name><operator>-&gt;</operator><name>master_m3u8_url</name></name></expr> </then><else>: <expr><name><name>s</name><operator>-&gt;</operator><name>url</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>key_basename_source</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hls</name><operator>-&gt;</operator><name>key_basename</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>hls</name><operator>-&gt;</operator><name>key_basename</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_strlcpy</name><argument_list>(<argument><expr><name><name>hls</name><operator>-&gt;</operator><name>key_basename</name></name></expr></argument>, <argument><expr><name>key_basename_source</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_strlcat</name><argument_list>(<argument><expr><name><name>hls</name><operator>-&gt;</operator><name>key_basename</name></name></expr></argument>, <argument><expr><literal type="string">".key"</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hls</name><operator>-&gt;</operator><name>key_url</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_strlcpy</name><argument_list>(<argument><expr><name><name>hls</name><operator>-&gt;</operator><name>key_file</name></name></expr></argument>, <argument><expr><name><name>hls</name><operator>-&gt;</operator><name>key_url</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hls</name><operator>-&gt;</operator><name>key_file</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_strlcpy</name><argument_list>(<argument><expr><name><name>hls</name><operator>-&gt;</operator><name>key_uri</name></name></expr></argument>, <argument><expr><name><name>hls</name><operator>-&gt;</operator><name>key_url</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hls</name><operator>-&gt;</operator><name>key_uri</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_strlcpy</name><argument_list>(<argument><expr><name><name>hls</name><operator>-&gt;</operator><name>key_file</name></name></expr></argument>, <argument><expr><name><name>hls</name><operator>-&gt;</operator><name>key_basename</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hls</name><operator>-&gt;</operator><name>key_file</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_strlcpy</name><argument_list>(<argument><expr><name><name>hls</name><operator>-&gt;</operator><name>key_uri</name></name></expr></argument>, <argument><expr><name><name>hls</name><operator>-&gt;</operator><name>key_basename</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hls</name><operator>-&gt;</operator><name>key_uri</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name><name>hls</name><operator>-&gt;</operator><name>iv_string</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>iv</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">33</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>hls</name><operator>-&gt;</operator><name>iv</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>AV_WB64</name><argument_list>(<argument><expr><name>iv</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name><name>vs</name><operator>-&gt;</operator><name>sequence</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>iv</name></expr></argument>, <argument><expr><name><name>hls</name><operator>-&gt;</operator><name>iv</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>iv</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>ff_data_to_hex</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>iv</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>iv</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>hls</name><operator>-&gt;</operator><name>iv_string</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hls</name><operator>-&gt;</operator><name>iv_string</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name><name>hls</name><operator>-&gt;</operator><name>key_uri</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hls</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"no key URI specified in key info file\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name><name>hls</name><operator>-&gt;</operator><name>key_file</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hls</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"no key file specified in key info file\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name><name>hls</name><operator>-&gt;</operator><name>key_string</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>AVDictionary</name> <modifier>*</modifier></type><name>options</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>hls</name><operator>-&gt;</operator><name>key</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>randomize</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Cannot generate a strong random key\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>hls</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>ff_data_to_hex</name><argument_list>(<argument><expr><name><name>hls</name><operator>-&gt;</operator><name>key_string</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_http_options</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>options</name></expr></argument>, <argument><expr><name>hls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>s</name><operator>-&gt;</operator><name>io_open</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><name><name>hls</name><operator>-&gt;</operator><name>key_file</name></name></expr></argument>, <argument><expr><name>AVIO_FLAG_WRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_dict_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_CUR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>KEYSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_close</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>hls_encryption_start</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HLSContext</name> <modifier>*</modifier></type><name>hls</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>key</name><index>[<expr><name>KEYSIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVDictionary</name> <modifier>*</modifier></type><name>options</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>set_http_options</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>options</name></expr></argument>, <argument><expr><name>hls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>s</name><operator>-&gt;</operator><name>io_open</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><name><name>hls</name><operator>-&gt;</operator><name>key_info_file</name></name></expr></argument>, <argument><expr><name>AVIO_FLAG_READ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_dict_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hls</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"error opening key info file %s\n"</literal></expr></argument>, <argument><expr><name><name>hls</name><operator>-&gt;</operator><name>key_info_file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ff_get_line</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>hls</name><operator>-&gt;</operator><name>key_uri</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hls</name><operator>-&gt;</operator><name>key_uri</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hls</name><operator>-&gt;</operator><name>key_uri</name><index>[<expr><call><name>strcspn</name><argument_list>(<argument><expr><name><name>hls</name><operator>-&gt;</operator><name>key_uri</name></name></expr></argument>, <argument><expr><literal type="string">"\r\n"</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_get_line</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>hls</name><operator>-&gt;</operator><name>key_file</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hls</name><operator>-&gt;</operator><name>key_file</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hls</name><operator>-&gt;</operator><name>key_file</name><index>[<expr><call><name>strcspn</name><argument_list>(<argument><expr><name><name>hls</name><operator>-&gt;</operator><name>key_file</name></name></expr></argument>, <argument><expr><literal type="string">"\r\n"</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_get_line</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>hls</name><operator>-&gt;</operator><name>iv_string</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hls</name><operator>-&gt;</operator><name>iv_string</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hls</name><operator>-&gt;</operator><name>iv_string</name><index>[<expr><call><name>strcspn</name><argument_list>(<argument><expr><name><name>hls</name><operator>-&gt;</operator><name>iv_string</name></name></expr></argument>, <argument><expr><literal type="string">"\r\n"</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_format_io_close</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name><name>hls</name><operator>-&gt;</operator><name>key_uri</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hls</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"no key URI specified in key info file\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name><name>hls</name><operator>-&gt;</operator><name>key_file</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hls</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"no key file specified in key info file\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>set_http_options</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>options</name></expr></argument>, <argument><expr><name>hls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>s</name><operator>-&gt;</operator><name>io_open</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><name><name>hls</name><operator>-&gt;</operator><name>key_file</name></name></expr></argument>, <argument><expr><name>AVIO_FLAG_READ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_dict_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hls</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"error opening key file %s\n"</literal></expr></argument>, <argument><expr><name><name>hls</name><operator>-&gt;</operator><name>key_file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avio_read</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_format_io_close</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hls</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"error reading key file %s\n"</literal></expr></argument>, <argument><expr><name><name>hls</name><operator>-&gt;</operator><name>key_file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>ret</name> <operator>==</operator> <name>AVERROR_EOF</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ff_data_to_hex</name><argument_list>(<argument><expr><name><name>hls</name><operator>-&gt;</operator><name>key_string</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>hls_mux_init</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>VariantStream</name> <modifier>*</modifier></type><name>vs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVDictionary</name> <modifier>*</modifier></type><name>options</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HLSContext</name> <modifier>*</modifier></type><name>hls</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>oc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>vtt_oc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>byterange_mode</name> <init>= <expr><operator>(</operator><name><name>hls</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HLS_SINGLE_FILE</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>hls</name><operator>-&gt;</operator><name>max_seg_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>remaining_options</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avformat_alloc_output_context2</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vs</name><operator>-&gt;</operator><name>avf</name></name></expr></argument>, <argument><expr><name><name>vs</name><operator>-&gt;</operator><name>oformat</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>oc</name> <operator>=</operator> <name><name>vs</name><operator>-&gt;</operator><name>avf</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>oc</name><operator>-&gt;</operator><name>url</name></name> <operator>=</operator> <call><name>av_strdup</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>oc</name><operator>-&gt;</operator><name>url</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>oc</name><operator>-&gt;</operator><name>oformat</name></name> <operator>=</operator> <name><name>vs</name><operator>-&gt;</operator><name>oformat</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>oc</name><operator>-&gt;</operator><name>interrupt_callback</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>interrupt_callback</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>oc</name><operator>-&gt;</operator><name>max_delay</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>max_delay</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>oc</name><operator>-&gt;</operator><name>opaque</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>opaque</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>oc</name><operator>-&gt;</operator><name>io_open</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>io_open</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>oc</name><operator>-&gt;</operator><name>io_close</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>io_close</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>oc</name><operator>-&gt;</operator><name>strict_std_compliance</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>strict_std_compliance</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_dict_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>oc</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vs</name><operator>-&gt;</operator><name>vtt_oformat</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avformat_alloc_output_context2</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vs</name><operator>-&gt;</operator><name>vtt_avf</name></name></expr></argument>, <argument><expr><name><name>vs</name><operator>-&gt;</operator><name>vtt_oformat</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>vtt_oc</name> <operator>=</operator> <name><name>vs</name><operator>-&gt;</operator><name>vtt_avf</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vtt_oc</name><operator>-&gt;</operator><name>oformat</name></name> <operator>=</operator> <name><name>vs</name><operator>-&gt;</operator><name>vtt_oformat</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_dict_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vtt_oc</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>vs</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>loc</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vs</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_SUBTITLE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>loc</name> <operator>=</operator> <name>vtt_oc</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>loc</name> <operator>=</operator> <name>oc</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>st</name> <operator>=</operator> <call><name>avformat_new_stream</name><argument_list>(<argument><expr><name>loc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>avcodec_parameters_copy</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name></name></expr></argument>, <argument><expr><name><name>vs</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>codecpar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>oc</name><operator>-&gt;</operator><name>oformat</name><operator>-&gt;</operator><name>codec_tag</name></name> <operator>||</operator>

<call><name>av_codec_get_id</name> <argument_list>(<argument><expr><name><name>oc</name><operator>-&gt;</operator><name>oformat</name><operator>-&gt;</operator><name>codec_tag</name></name></expr></argument>, <argument><expr><name><name>vs</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>codecpar</name><operator>-&gt;</operator><name>codec_tag</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>||</operator>

<call><name>av_codec_get_tag</name><argument_list>(<argument><expr><name><name>oc</name><operator>-&gt;</operator><name>oformat</name><operator>-&gt;</operator><name>codec_tag</name></name></expr></argument>, <argument><expr><name><name>vs</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_tag</name></name> <operator>=</operator> <name><name>vs</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>codecpar</name><operator>-&gt;</operator><name>codec_tag</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_tag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>sample_aspect_ratio</name></name> <operator>=</operator> <name><name>vs</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>sample_aspect_ratio</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>time_base</name></name> <operator>=</operator> <name><name>vs</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>time_base</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_dict_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>st</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><name><name>vs</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>metadata</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>vs</name><operator>-&gt;</operator><name>packets_written</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vs</name><operator>-&gt;</operator><name>start_pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vs</name><operator>-&gt;</operator><name>new_start</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hls</name><operator>-&gt;</operator><name>segment_type</name></name> <operator>==</operator> <name>SEGMENT_TYPE_FMP4</name> <operator>&amp;&amp;</operator> <name><name>hls</name><operator>-&gt;</operator><name>max_seg_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>hls</name><operator>-&gt;</operator><name>http_persistent</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"http persistent mode is currently unsupported for fragment mp4 in the HLS muxer.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hls</name><operator>-&gt;</operator><name>max_seg_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Multi-file byterange mode is currently unsupported in the HLS muxer.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>vs</name><operator>-&gt;</operator><name>packets_written</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vs</name><operator>-&gt;</operator><name>init_range_length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>avio_open_dyn_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>oc</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hls</name><operator>-&gt;</operator><name>segment_type</name></name> <operator>==</operator> <name>SEGMENT_TYPE_FMP4</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>set_http_options</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>options</name></expr></argument>, <argument><expr><name>hls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>byterange_mode</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>hlsenc_io_open</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vs</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name><name>vs</name><operator>-&gt;</operator><name>basename</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>hlsenc_io_open</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vs</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name><name>vs</name><operator>-&gt;</operator><name>base_output_dirname</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>av_dict_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to open segment '%s'\n"</literal></expr></argument>, <argument><expr><name><name>vs</name><operator>-&gt;</operator><name>fmp4_init_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_dict_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>options</name></expr></argument>, <argument><expr><name><name>hls</name><operator>-&gt;</operator><name>format_options</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hls</name><operator>-&gt;</operator><name>segment_type</name></name> <operator>==</operator> <name>SEGMENT_TYPE_FMP4</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>options</name></expr></argument>, <argument><expr><literal type="string">"fflags"</literal></expr></argument>, <argument><expr><literal type="string">"-autobsf"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>options</name></expr></argument>, <argument><expr><literal type="string">"movflags"</literal></expr></argument>, <argument><expr><literal type="string">"+frag_custom+dash+delay_moov"</literal></expr></argument>, <argument><expr><name>AV_DICT_APPEND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>period</name><index>[<expr><literal type="number">21</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>period</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>period</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>INT_MAX</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>options</name></expr></argument>, <argument><expr><literal type="string">"sdt_period"</literal></expr></argument>, <argument><expr><name>period</name></expr></argument>, <argument><expr><name>AV_DICT_DONT_OVERWRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>options</name></expr></argument>, <argument><expr><literal type="string">"pat_period"</literal></expr></argument>, <argument><expr><name>period</name></expr></argument>, <argument><expr><name>AV_DICT_DONT_OVERWRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avformat_init_output</name><argument_list>(<argument><expr><name>oc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>remaining_options</name> <operator>=</operator> <call><name>av_dict_count</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_dict_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>remaining_options</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Some of the provided format options are not recognized\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>avio_flush</name><argument_list>(<argument><expr><name><name>oc</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>HLSSegment</name> <modifier>*</modifier></type><name>find_segment_by_filename</name><parameter_list>(<parameter><decl><type><name>HLSSegment</name> <modifier>*</modifier></type><name>segment</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<while>while <condition>(<expr><name>segment</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>av_strcasecmp</name><argument_list>(<argument><expr><name><name>segment</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>,<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>segment</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>segment</name> <operator>=</operator> <name><name>segment</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><operator>(</operator><name>HLSSegment</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sls_flags_filename_process</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>AVFormatContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>HLSContext</name> <modifier>*</modifier></type><name>hls</name></decl></parameter>,

<parameter><decl><type><name>VariantStream</name> <modifier>*</modifier></type><name>vs</name></decl></parameter>, <parameter><decl><type><name>HLSSegment</name> <modifier>*</modifier></type><name>en</name></decl></parameter>,

<parameter><decl><type><name>double</name></type> <name>duration</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>hls</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>HLS_SECOND_LEVEL_SEGMENT_SIZE</name> <operator>|</operator> <name>HLS_SECOND_LEVEL_SEGMENT_DURATION</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator>

<call><name>strlen</name><argument_list>(<argument><expr><name><name>vs</name><operator>-&gt;</operator><name>current_segment_final_filename_fmt</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>new_url</name> <init>= <expr><call><name>av_strdup</name><argument_list>(<argument><expr><name><name>vs</name><operator>-&gt;</operator><name>current_segment_final_filename_fmt</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>new_url</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ff_format_set_url</name><argument_list>(<argument><expr><name><name>vs</name><operator>-&gt;</operator><name>avf</name></name></expr></argument>, <argument><expr><name>new_url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hls</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HLS_SECOND_LEVEL_SEGMENT_SIZE</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>filename</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>replace_int_data_in_filename</name><argument_list>(<argument><expr><operator>&amp;</operator><name>filename</name></expr></argument>, <argument><expr><name><name>vs</name><operator>-&gt;</operator><name>avf</name><operator>-&gt;</operator><name>url</name></name></expr></argument>, <argument><expr><literal type="char">'s'</literal></expr></argument>, <argument><expr><name>pos</name> <operator>+</operator> <name>size</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hls</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Invalid second level segment filename template '%s', "</literal>

<literal type="string">"you can try to remove second_level_segment_size flag\n"</literal></expr></argument>,

<argument><expr><name><name>vs</name><operator>-&gt;</operator><name>avf</name><operator>-&gt;</operator><name>url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ff_format_set_url</name><argument_list>(<argument><expr><name><name>vs</name><operator>-&gt;</operator><name>avf</name></name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hls</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HLS_SECOND_LEVEL_SEGMENT_DURATION</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>filename</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>replace_int_data_in_filename</name><argument_list>(<argument><expr><operator>&amp;</operator><name>filename</name></expr></argument>, <argument><expr><name><name>vs</name><operator>-&gt;</operator><name>avf</name><operator>-&gt;</operator><name>url</name></name></expr></argument>,

<argument><expr><literal type="char">'t'</literal></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><call><name>round</name><argument_list>(<argument><expr><name>duration</name> <operator>*</operator> <name>HLS_MICROSECOND_UNIT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hls</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Invalid second level segment filename template '%s', "</literal>

<literal type="string">"you can try to remove second_level_segment_time flag\n"</literal></expr></argument>,

<argument><expr><name><name>vs</name><operator>-&gt;</operator><name>avf</name><operator>-&gt;</operator><name>url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ff_format_set_url</name><argument_list>(<argument><expr><name><name>vs</name><operator>-&gt;</operator><name>avf</name></name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sls_flag_check_duration_size_index</name><parameter_list>(<parameter><decl><type><name>HLSContext</name> <modifier>*</modifier></type><name>hls</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hls</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HLS_SECOND_LEVEL_SEGMENT_DURATION</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hls</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"second_level_segment_duration hls_flag requires strftime to be true\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hls</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HLS_SECOND_LEVEL_SEGMENT_SIZE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hls</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"second_level_segment_size hls_flag requires strfime to be true\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hls</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HLS_SECOND_LEVEL_SEGMENT_INDEX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hls</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"second_level_segment_index hls_flag requires strftime to be true\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sls_flag_check_duration_size</name><parameter_list>(<parameter><decl><type><name>HLSContext</name> <modifier>*</modifier></type><name>hls</name></decl></parameter>, <parameter><decl><type><name>VariantStream</name> <modifier>*</modifier></type><name>vs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>proto</name> <init>= <expr><call><name>avio_find_protocol_name</name><argument_list>(<argument><expr><name><name>vs</name><operator>-&gt;</operator><name>basename</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>segment_renaming_ok</name> <init>= <expr><name>proto</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>proto</name></expr></argument>, <argument><expr><literal type="string">"file"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>hls</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HLS_SECOND_LEVEL_SEGMENT_DURATION</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name>segment_renaming_ok</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hls</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"second_level_segment_duration hls_flag works only with file protocol segment names\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>hls</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HLS_SECOND_LEVEL_SEGMENT_SIZE</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name>segment_renaming_ok</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hls</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"second_level_segment_size hls_flag works only with file protocol segment names\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sls_flag_file_rename</name><parameter_list>(<parameter><decl><type><name>HLSContext</name> <modifier>*</modifier></type><name>hls</name></decl></parameter>, <parameter><decl><type><name>VariantStream</name> <modifier>*</modifier></type><name>vs</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>old_filename</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>hls</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>HLS_SECOND_LEVEL_SEGMENT_SIZE</name> <operator>|</operator> <name>HLS_SECOND_LEVEL_SEGMENT_DURATION</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator>

<call><name>strlen</name><argument_list>(<argument><expr><name><name>vs</name><operator>-&gt;</operator><name>current_segment_final_filename_fmt</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ff_rename</name><argument_list>(<argument><expr><name>old_filename</name></expr></argument>, <argument><expr><name><name>vs</name><operator>-&gt;</operator><name>avf</name><operator>-&gt;</operator><name>url</name></name></expr></argument>, <argument><expr><name>hls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sls_flag_use_localtime_filename</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>oc</name></decl></parameter>, <parameter><decl><type><name>HLSContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>VariantStream</name> <modifier>*</modifier></type><name>vs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HLS_SECOND_LEVEL_SEGMENT_INDEX</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>filename</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>replace_int_data_in_filename</name><argument_list>(<argument><expr><operator>&amp;</operator><name>filename</name></expr></argument>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_HLS_WRAP</name></expr></cpp:if>

<argument><expr><name><name>oc</name><operator>-&gt;</operator><name>url</name></name></expr></argument>, <argument><expr><literal type="char">'d'</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>c</name><operator>-&gt;</operator><name>wrap</name></name></expr> ?</condition><then> <expr><name><name>vs</name><operator>-&gt;</operator><name>sequence</name></name> <operator>%</operator> <name><name>c</name><operator>-&gt;</operator><name>wrap</name></name></expr> </then><else>: <expr><name><name>vs</name><operator>-&gt;</operator><name>sequence</name></name></expr></else></ternary></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name><name>oc</name><operator>-&gt;</operator><name>url</name></name></expr><operator>,</operator> <expr><literal type="char">'d'</literal></expr><operator>,</operator> <expr><name><name>vs</name><operator>-&gt;</operator><name>sequence</name></name></expr></expr_stmt>)</block_content> &lt; 1</block></if></if_stmt>)</block_content> <block>{<block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid second level segment filename template '%s', "</literal>

<literal type="string">"you can try to remove second_level_segment_index flag\n"</literal></expr></argument>,

<argument><expr><name><name>oc</name><operator>-&gt;</operator><name>url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></block></if></if_stmt>

<expr_stmt><expr><call><name>ff_format_set_url</name><argument_list>(<argument><expr><name>oc</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>HLS_SECOND_LEVEL_SEGMENT_SIZE</name> <operator>|</operator> <name>HLS_SECOND_LEVEL_SEGMENT_DURATION</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_strlcpy</name><argument_list>(<argument><expr><name><name>vs</name><operator>-&gt;</operator><name>current_segment_final_filename_fmt</name></name></expr></argument>, <argument><expr><name><name>oc</name><operator>-&gt;</operator><name>url</name></name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>vs</name><operator>-&gt;</operator><name>current_segment_final_filename_fmt</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HLS_SECOND_LEVEL_SEGMENT_SIZE</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>filename</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>replace_int_data_in_filename</name><argument_list>(<argument><expr><operator>&amp;</operator><name>filename</name></expr></argument>, <argument><expr><name><name>oc</name><operator>-&gt;</operator><name>url</name></name></expr></argument>, <argument><expr><literal type="char">'s'</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid second level segment filename template '%s', "</literal>

<literal type="string">"you can try to remove second_level_segment_size flag\n"</literal></expr></argument>,

<argument><expr><name><name>oc</name><operator>-&gt;</operator><name>url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ff_format_set_url</name><argument_list>(<argument><expr><name>oc</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HLS_SECOND_LEVEL_SEGMENT_DURATION</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>filename</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>replace_int_data_in_filename</name><argument_list>(<argument><expr><operator>&amp;</operator><name>filename</name></expr></argument>, <argument><expr><name><name>oc</name><operator>-&gt;</operator><name>url</name></name></expr></argument>, <argument><expr><literal type="char">'t'</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid second level segment filename template '%s', "</literal>

<literal type="string">"you can try to remove second_level_segment_time flag\n"</literal></expr></argument>,

<argument><expr><name><name>oc</name><operator>-&gt;</operator><name>url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ff_format_set_url</name><argument_list>(<argument><expr><name>oc</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

}

static <function><type><name>int</name></type> <name>hls_append_segment</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>AVFormatContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>HLSContext</name> <modifier>*</modifier></type><name>hls</name></decl></parameter>,

<parameter><decl><type><name>VariantStream</name> <modifier>*</modifier></type><name>vs</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>duration</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>pos</name></decl></parameter>,

<parameter><decl><type><name>int64_t</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HLSSegment</name> <modifier>*</modifier></type><name>en</name> <init>= <expr><call><name>av_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>en</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>byterange_mode</name> <init>= <expr><operator>(</operator><name><name>hls</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HLS_SINGLE_FILE</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>hls</name><operator>-&gt;</operator><name>max_seg_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>en</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>en</name><operator>-&gt;</operator><name>var_stream_idx</name></name> <operator>=</operator> <name><name>vs</name><operator>-&gt;</operator><name>var_stream_idx</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>sls_flags_filename_process</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>hls</name></expr></argument>, <argument><expr><name>vs</name></expr></argument>, <argument><expr><name>en</name></expr></argument>, <argument><expr><name>duration</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>en</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>filename</name> <operator>=</operator> <call><name>av_basename</name><argument_list>(<argument><expr><name><name>vs</name><operator>-&gt;</operator><name>avf</name><operator>-&gt;</operator><name>url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hls</name><operator>-&gt;</operator><name>use_localtime_mkdir</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>filename</name> <operator>=</operator> <name><name>vs</name><operator>-&gt;</operator><name>avf</name><operator>-&gt;</operator><name>url</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>find_segment_by_filename</name><argument_list>(<argument><expr><name><name>vs</name><operator>-&gt;</operator><name>segments</name></name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>find_segment_by_filename</name><argument_list>(<argument><expr><name><name>vs</name><operator>-&gt;</operator><name>old_segments</name></name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>!</operator><name>byterange_mode</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hls</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Duplicated segment filename detected: %s\n"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_strlcpy</name><argument_list>(<argument><expr><name><name>en</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>en</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vs</name><operator>-&gt;</operator><name>has_subtitle</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_strlcpy</name><argument_list>(<argument><expr><name><name>en</name><operator>-&gt;</operator><name>sub_filename</name></name></expr></argument>, <argument><expr><call><name>av_basename</name><argument_list>(<argument><expr><name><name>vs</name><operator>-&gt;</operator><name>vtt_avf</name><operator>-&gt;</operator><name>url</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>en</name><operator>-&gt;</operator><name>sub_filename</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>en</name><operator>-&gt;</operator><name>sub_filename</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>en</name><operator>-&gt;</operator><name>duration</name></name> <operator>=</operator> <name>duration</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>en</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>en</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>en</name><operator>-&gt;</operator><name>keyframe_pos</name></name> <operator>=</operator> <name><name>vs</name><operator>-&gt;</operator><name>video_keyframe_pos</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>en</name><operator>-&gt;</operator><name>keyframe_size</name></name> <operator>=</operator> <name><name>vs</name><operator>-&gt;</operator><name>video_keyframe_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>en</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>en</name><operator>-&gt;</operator><name>discont</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vs</name><operator>-&gt;</operator><name>discontinuity</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>en</name><operator>-&gt;</operator><name>discont</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vs</name><operator>-&gt;</operator><name>discontinuity</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hls</name><operator>-&gt;</operator><name>key_info_file</name></name> <operator>||</operator> <name><name>hls</name><operator>-&gt;</operator><name>encrypt</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_strlcpy</name><argument_list>(<argument><expr><name><name>en</name><operator>-&gt;</operator><name>key_uri</name></name></expr></argument>, <argument><expr><name><name>hls</name><operator>-&gt;</operator><name>key_uri</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>en</name><operator>-&gt;</operator><name>key_uri</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_strlcpy</name><argument_list>(<argument><expr><name><name>en</name><operator>-&gt;</operator><name>iv_string</name></name></expr></argument>, <argument><expr><name><name>hls</name><operator>-&gt;</operator><name>iv_string</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>en</name><operator>-&gt;</operator><name>iv_string</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>vs</name><operator>-&gt;</operator><name>segments</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>vs</name><operator>-&gt;</operator><name>segments</name></name> <operator>=</operator> <name>en</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>vs</name><operator>-&gt;</operator><name>last_segment</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>en</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>vs</name><operator>-&gt;</operator><name>last_segment</name></name> <operator>=</operator> <name>en</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hls</name><operator>-&gt;</operator><name>pl_type</name></name> <operator>!=</operator> <name>PLAYLIST_TYPE_NONE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>hls</name><operator>-&gt;</operator><name>max_nb_segments</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hls</name><operator>-&gt;</operator><name>max_nb_segments</name></name> <operator>&amp;&amp;</operator> <name><name>vs</name><operator>-&gt;</operator><name>nb_entries</name></name> <operator>&gt;=</operator> <name><name>hls</name><operator>-&gt;</operator><name>max_nb_segments</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>en</name> <operator>=</operator> <name><name>vs</name><operator>-&gt;</operator><name>segments</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vs</name><operator>-&gt;</operator><name>initial_prog_date_time</name></name> <operator>+=</operator> <name><name>en</name><operator>-&gt;</operator><name>duration</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vs</name><operator>-&gt;</operator><name>segments</name></name> <operator>=</operator> <name><name>en</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>en</name> <operator>&amp;&amp;</operator> <name><name>hls</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HLS_DELETE_SEGMENTS</name> <operator>&amp;&amp;</operator>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_HLS_WRAP</name></expr></cpp:if>

<operator>!</operator><operator>(</operator><name><name>hls</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HLS_SINGLE_FILE</name> <operator>||</operator> <name><name>hls</name><operator>-&gt;</operator><name>wrap</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><operator>!</operator><operator>(</operator><name><name>hls</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HLS_SINGLE_FILE</name><operator>)</operator></expr></expr_stmt>)</block_content> <block>{<block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>en</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>vs</name><operator>-&gt;</operator><name>old_segments</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vs</name><operator>-&gt;</operator><name>old_segments</name></name> <operator>=</operator> <name>en</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>hls_delete_old_segments</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>hls</name></expr></argument>, <argument><expr><name>vs</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block> else

av_freep(&amp;en</block></if></if_stmt>)</block_content></block><empty_stmt>;</empty_stmt></if></if_stmt>

</block_content>}</block></function> <if_stmt><else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>vs</name><operator>-&gt;</operator><name>nb_entries</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hls</name><operator>-&gt;</operator><name>max_seg_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>vs</name><operator>-&gt;</operator><name>sequence</name></name><operator>++</operator></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

}

static <function><type><name>int</name></type> <name>parse_playlist</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>url</name></decl></parameter>, <parameter><decl><type><name>VariantStream</name> <modifier>*</modifier></type><name>vs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HLSContext</name> <modifier>*</modifier></type><name>hls</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>in</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>is_segment</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>new_start_pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>line</name><index>[<expr><name>MAX_URL_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ffio_open_whitelist</name><argument_list>(<argument><expr><operator>&amp;</operator><name>in</name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name>AVIO_FLAG_READ</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>interrupt_callback</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>protocol_whitelist</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>protocol_blacklist</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ff_get_chomp_line</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"#EXTM3U"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>vs</name><operator>-&gt;</operator><name>discontinuity</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>!</operator><call><name>avio_feof</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ff_get_chomp_line</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_strstart</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"#EXT-X-MEDIA-SEQUENCE:"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>tmp_sequence</name> <init>= <expr><call><name>strtoll</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>tmp_sequence</name> <operator>&lt;</operator> <name><name>vs</name><operator>-&gt;</operator><name>sequence</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hls</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>,

<argument><expr><literal type="string">"Found playlist sequence number was smaller """</literal>

<literal type="string">"than specified start sequence number: %"</literal><name>PRId64</name><literal type="string">" &lt; %"</literal><name>PRId64</name><literal type="string">", "</literal>

<literal type="string">"omitting\n"</literal></expr></argument>, <argument><expr><name>tmp_sequence</name></expr></argument>, <argument><expr><name><name>hls</name><operator>-&gt;</operator><name>start_sequence</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hls</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Found playlist sequence number: %"</literal><name>PRId64</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>tmp_sequence</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vs</name><operator>-&gt;</operator><name>sequence</name></name> <operator>=</operator> <name>tmp_sequence</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>av_strstart</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"#EXT-X-DISCONTINUITY"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>is_segment</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vs</name><operator>-&gt;</operator><name>discontinuity</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>av_strstart</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"#EXTINF:"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>is_segment</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vs</name><operator>-&gt;</operator><name>duration</name></name> <operator>=</operator> <call><name>atof</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>av_stristart</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"#EXT-X-KEY:"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>av_stristr</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"URI=\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ptr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><literal type="string">"URI=\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>end</name> <operator>=</operator> <call><name>av_stristr</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>end</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_strlcpy</name><argument_list>(<argument><expr><name><name>hls</name><operator>-&gt;</operator><name>key_uri</name></name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>end</name> <operator>-</operator> <name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_strlcpy</name><argument_list>(<argument><expr><name><name>hls</name><operator>-&gt;</operator><name>key_uri</name></name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hls</name><operator>-&gt;</operator><name>key_uri</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>av_stristr</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"IV=0x"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ptr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><literal type="string">"IV=0x"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>end</name> <operator>=</operator> <call><name>av_stristr</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>end</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_strlcpy</name><argument_list>(<argument><expr><name><name>hls</name><operator>-&gt;</operator><name>iv_string</name></name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>end</name> <operator>-</operator> <name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_strlcpy</name><argument_list>(<argument><expr><name><name>hls</name><operator>-&gt;</operator><name>iv_string</name></name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hls</name><operator>-&gt;</operator><name>iv_string</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>av_strstart</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"#"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>line</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>is_segment</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>new_file</name> <init>= <expr><call><name>av_strdup</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>new_file</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ff_format_set_url</name><argument_list>(<argument><expr><name><name>vs</name><operator>-&gt;</operator><name>avf</name></name></expr></argument>, <argument><expr><name>new_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>is_segment</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>new_start_pos</name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name><name>vs</name><operator>-&gt;</operator><name>avf</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vs</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>new_start_pos</name> <operator>-</operator> <name><name>vs</name><operator>-&gt;</operator><name>start_pos</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vs</name><operator>-&gt;</operator><name>initial_prog_date_time</name></name> <operator>-=</operator> <name><name>vs</name><operator>-&gt;</operator><name>duration</name></name></expr>;</expr_stmt> 

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>hls_append_segment</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>hls</name></expr></argument>, <argument><expr><name>vs</name></expr></argument>, <argument><expr><name><name>vs</name><operator>-&gt;</operator><name>duration</name></name></expr></argument>, <argument><expr><name><name>vs</name><operator>-&gt;</operator><name>start_pos</name></name></expr></argument>, <argument><expr><name><name>vs</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>vs</name><operator>-&gt;</operator><name>start_pos</name></name> <operator>=</operator> <name>new_start_pos</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>avio_close</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hls_free_segments</name><parameter_list>(<parameter><decl><type><name>HLSSegment</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HLSSegment</name> <modifier>*</modifier></type><name>en</name></decl>;</decl_stmt>

<while>while <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>en</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>en</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>hls_rename_temp_file</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>oc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>oc</name><operator>-&gt;</operator><name>url</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>final_filename</name> <init>= <expr><call><name>av_strdup</name><argument_list>(<argument><expr><name><name>oc</name><operator>-&gt;</operator><name>url</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>final_filename</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>final_filename</name><index>[<expr><name>len</name><operator>-</operator><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_rename</name><argument_list>(<argument><expr><name><name>oc</name><operator>-&gt;</operator><name>url</name></name></expr></argument>, <argument><expr><name>final_filename</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>oc</name><operator>-&gt;</operator><name>url</name><index>[<expr><name>len</name><operator>-</operator><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>final_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>get_relative_url</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>master_url</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>media_url</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>strrchr</name><argument_list>(<argument><expr><name>master_url</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>base_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>strrchr</name><argument_list>(<argument><expr><name>master_url</name></expr></argument>, <argument><expr><literal type="char">'\\'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>base_len</name> <operator>=</operator> <name>p</name> <operator>-</operator> <name>master_url</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_strncasecmp</name><argument_list>(<argument><expr><name>master_url</name></expr></argument>, <argument><expr><name>media_url</name></expr></argument>, <argument><expr><name>base_len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Unable to find relative url\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>media_url</name> <operator>+</operator> <name>base_len</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64_t</name></type> <name>get_stream_bit_rate</name><parameter_list>(<parameter><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVCPBProperties</name> <modifier>*</modifier></type><name>props</name> <init>= <expr><operator>(</operator><name>AVCPBProperties</name><operator>*</operator><operator>)</operator><call><name>av_stream_get_side_data</name><argument_list>(

<argument><expr><name>stream</name></expr></argument>,

<argument><expr><name>AV_PKT_DATA_CPB_PROPERTIES</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>

)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>bit_rate</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>stream</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>bit_rate</name></name></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>props</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>props</name><operator>-&gt;</operator><name>max_bitrate</name></name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>create_master_playlist</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,

<parameter><decl><type><name>VariantStream</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>input_vs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HLSContext</name> <modifier>*</modifier></type><name>hls</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VariantStream</name> <modifier>*</modifier></type><name>vs</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>temp_vs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>vid_st</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>aud_st</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVDictionary</name> <modifier>*</modifier></type><name>options</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>bandwidth</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>m3u8_rel_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ccgroup</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ClosedCaptionsStream</name> <modifier>*</modifier></type><name>ccs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>proto</name> <init>= <expr><call><name>avio_find_protocol_name</name><argument_list>(<argument><expr><name><name>hls</name><operator>-&gt;</operator><name>master_m3u8_url</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>is_file_proto</name> <init>= <expr><name>proto</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>proto</name></expr></argument>, <argument><expr><literal type="string">"file"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>use_temp_file</name> <init>= <expr><name>is_file_proto</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name><name>hls</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HLS_TEMP_FILE</name><operator>)</operator> <operator>||</operator> <name><name>hls</name><operator>-&gt;</operator><name>master_publish_rate</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>temp_filename</name><index>[<expr><name>MAX_URL_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>input_vs</name><operator>-&gt;</operator><name>m3u8_created</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>hls</name><operator>-&gt;</operator><name>master_m3u8_created</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>hls</name><operator>-&gt;</operator><name>nb_varstreams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>hls</name><operator>-&gt;</operator><name>var_streams</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>m3u8_created</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>&amp;</operator><name><name>hls</name><operator>-&gt;</operator><name>var_streams</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>input_vs</name> <operator>||</operator> <operator>!</operator><name><name>hls</name><operator>-&gt;</operator><name>master_publish_rate</name></name> <operator>||</operator>

<name><name>input_vs</name><operator>-&gt;</operator><name>number</name></name> <operator>%</operator> <name><name>hls</name><operator>-&gt;</operator><name>master_publish_rate</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>set_http_options</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>options</name></expr></argument>, <argument><expr><name>hls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>temp_filename</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>temp_filename</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><ternary><condition><expr><name>use_temp_file</name></expr> ?</condition><then> <expr><literal type="string">"%s.tmp"</literal></expr> </then><else>: <expr><literal type="string">"%s"</literal></expr></else></ternary></expr></argument>, <argument><expr><name><name>hls</name><operator>-&gt;</operator><name>master_m3u8_url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>hlsenc_io_open</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>hls</name><operator>-&gt;</operator><name>m3u8_out</name></name></expr></argument>, <argument><expr><name>temp_filename</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_dict_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to open master play list file '%s'\n"</literal></expr></argument>,

<argument><expr><name>temp_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ff_hls_write_playlist_version</name><argument_list>(<argument><expr><name><name>hls</name><operator>-&gt;</operator><name>m3u8_out</name></name></expr></argument>, <argument><expr><name><name>hls</name><operator>-&gt;</operator><name>version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>hls</name><operator>-&gt;</operator><name>nb_ccstreams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>ccs</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>hls</name><operator>-&gt;</operator><name>cc_streams</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_printf</name><argument_list>(<argument><expr><name><name>hls</name><operator>-&gt;</operator><name>m3u8_out</name></name></expr></argument>, <argument><expr><literal type="string">"#EXT-X-MEDIA:TYPE=CLOSED-CAPTIONS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_printf</name><argument_list>(<argument><expr><name><name>hls</name><operator>-&gt;</operator><name>m3u8_out</name></name></expr></argument>, <argument><expr><literal type="string">",GROUP-ID=\"%s\""</literal></expr></argument>, <argument><expr><name><name>ccs</name><operator>-&gt;</operator><name>ccgroup</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_printf</name><argument_list>(<argument><expr><name><name>hls</name><operator>-&gt;</operator><name>m3u8_out</name></name></expr></argument>, <argument><expr><literal type="string">",NAME=\"%s\""</literal></expr></argument>, <argument><expr><name><name>ccs</name><operator>-&gt;</operator><name>instreamid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ccs</name><operator>-&gt;</operator><name>language</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>avio_printf</name><argument_list>(<argument><expr><name><name>hls</name><operator>-&gt;</operator><name>m3u8_out</name></name></expr></argument>, <argument><expr><literal type="string">",LANGUAGE=\"%s\""</literal></expr></argument>, <argument><expr><name><name>ccs</name><operator>-&gt;</operator><name>language</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>avio_printf</name><argument_list>(<argument><expr><name><name>hls</name><operator>-&gt;</operator><name>m3u8_out</name></name></expr></argument>, <argument><expr><literal type="string">",INSTREAM-ID=\"%s\"\n"</literal></expr></argument>, <argument><expr><name><name>ccs</name><operator>-&gt;</operator><name>instreamid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>hls</name><operator>-&gt;</operator><name>nb_varstreams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>vs</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>hls</name><operator>-&gt;</operator><name>var_streams</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vs</name><operator>-&gt;</operator><name>has_video</name></name> <operator>||</operator> <name><name>vs</name><operator>-&gt;</operator><name>has_subtitle</name></name> <operator>||</operator> <operator>!</operator><name><name>vs</name><operator>-&gt;</operator><name>agroup</name></name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>m3u8_rel_name</name> <operator>=</operator> <call><name>get_relative_url</name><argument_list>(<argument><expr><name><name>hls</name><operator>-&gt;</operator><name>master_m3u8_url</name></name></expr></argument>, <argument><expr><name><name>vs</name><operator>-&gt;</operator><name>m3u8_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>m3u8_rel_name</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unable to find relative URL\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ff_hls_write_audio_rendition</name><argument_list>(<argument><expr><name><name>hls</name><operator>-&gt;</operator><name>m3u8_out</name></name></expr></argument>, <argument><expr><name><name>vs</name><operator>-&gt;</operator><name>agroup</name></name></expr></argument>, <argument><expr><name>m3u8_rel_name</name></expr></argument>, <argument><expr><name><name>vs</name><operator>-&gt;</operator><name>language</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>hls</name><operator>-&gt;</operator><name>has_default_key</name></name></expr> ?</condition><then> <expr><name><name>vs</name><operator>-&gt;</operator><name>is_default</name></name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>hls</name><operator>-&gt;</operator><name>nb_varstreams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>vs</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>hls</name><operator>-&gt;</operator><name>var_streams</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>m3u8_rel_name</name> <operator>=</operator> <call><name>get_relative_url</name><argument_list>(<argument><expr><name><name>hls</name><operator>-&gt;</operator><name>master_m3u8_url</name></name></expr></argument>, <argument><expr><name><name>vs</name><operator>-&gt;</operator><name>m3u8_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>m3u8_rel_name</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unable to find relative URL\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>vid_st</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>aud_st</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>vs</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>vs</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>vid_st</name> <operator>=</operator> <name><name>vs</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>vs</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>aud_st</name> <operator>=</operator> <name><name>vs</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>vid_st</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>aud_st</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Media stream not found\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vs</name><operator>-&gt;</operator><name>agroup</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>hls</name><operator>-&gt;</operator><name>nb_varstreams</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>temp_vs</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>hls</name><operator>-&gt;</operator><name>var_streams</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>temp_vs</name><operator>-&gt;</operator><name>has_video</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>temp_vs</name><operator>-&gt;</operator><name>has_subtitle</name></name> <operator>&amp;&amp;</operator>

<name><name>temp_vs</name><operator>-&gt;</operator><name>agroup</name></name> <operator>&amp;&amp;</operator>

<operator>!</operator><call><name>av_strcasecmp</name><argument_list>(<argument><expr><name><name>temp_vs</name><operator>-&gt;</operator><name>agroup</name></name></expr></argument>, <argument><expr><name><name>vs</name><operator>-&gt;</operator><name>agroup</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>aud_st</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>aud_st</name> <operator>=</operator> <name><name>temp_vs</name><operator>-&gt;</operator><name>streams</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>temp_vs</name><operator>-&gt;</operator><name>streams</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>codecpar</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>&gt;</operator>

<name><name>aud_st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>bit_rate</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>aud_st</name> <operator>=</operator> <name><name>temp_vs</name><operator>-&gt;</operator><name>streams</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bandwidth</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>vid_st</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>bandwidth</name> <operator>+=</operator> <call><name>get_stream_bit_rate</name><argument_list>(<argument><expr><name>vid_st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>aud_st</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>bandwidth</name> <operator>+=</operator> <call><name>get_stream_bit_rate</name><argument_list>(<argument><expr><name>aud_st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>bandwidth</name> <operator>+=</operator> <name>bandwidth</name> <operator>/</operator> <literal type="number">10</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ccgroup</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>vid_st</name> <operator>&amp;&amp;</operator> <name><name>vs</name><operator>-&gt;</operator><name>ccgroup</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>hls</name><operator>-&gt;</operator><name>nb_ccstreams</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>ccs</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>hls</name><operator>-&gt;</operator><name>cc_streams</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>av_strcasecmp</name><argument_list>(<argument><expr><name><name>ccs</name><operator>-&gt;</operator><name>ccgroup</name></name></expr></argument>, <argument><expr><name><name>vs</name><operator>-&gt;</operator><name>ccgroup</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ccgroup</name> <operator>=</operator> <name><name>vs</name><operator>-&gt;</operator><name>ccgroup</name></name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>j</name> <operator>==</operator> <name><name>hls</name><operator>-&gt;</operator><name>nb_ccstreams</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"mapping ccgroup %s not found\n"</literal></expr></argument>,

<argument><expr><name><name>vs</name><operator>-&gt;</operator><name>ccgroup</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>hls</name><operator>-&gt;</operator><name>has_default_key</name></name> <operator>||</operator> <operator>!</operator><name><name>hls</name><operator>-&gt;</operator><name>has_video_m3u8</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ff_hls_write_stream_info</name><argument_list>(<argument><expr><name>vid_st</name></expr></argument>, <argument><expr><name><name>hls</name><operator>-&gt;</operator><name>m3u8_out</name></name></expr></argument>, <argument><expr><name>bandwidth</name></expr></argument>, <argument><expr><name>m3u8_rel_name</name></expr></argument>,

<argument><expr><ternary><condition><expr><name>aud_st</name></expr> ?</condition><then> <expr><name><name>vs</name><operator>-&gt;</operator><name>agroup</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>, <argument><expr><name><name>vs</name><operator>-&gt;</operator><name>codec_attr</name></name></expr></argument>, <argument><expr><name>ccgroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>vid_st</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ff_hls_write_stream_info</name><argument_list>(<argument><expr><name>vid_st</name></expr></argument>, <argument><expr><name><name>hls</name><operator>-&gt;</operator><name>m3u8_out</name></name></expr></argument>, <argument><expr><name>bandwidth</name></expr></argument>, <argument><expr><name>m3u8_rel_name</name></expr></argument>,

<argument><expr><ternary><condition><expr><name>aud_st</name></expr> ?</condition><then> <expr><name><name>vs</name><operator>-&gt;</operator><name>agroup</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>, <argument><expr><name><name>vs</name><operator>-&gt;</operator><name>codec_attr</name></name></expr></argument>, <argument><expr><name>ccgroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<label><name>fail</name>:</label>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;=</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>hls</name><operator>-&gt;</operator><name>master_m3u8_created</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>hlsenc_io_close</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>hls</name><operator>-&gt;</operator><name>m3u8_out</name></name></expr></argument>, <argument><expr><name>temp_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>use_temp_file</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_rename</name><argument_list>(<argument><expr><name>temp_filename</name></expr></argument>, <argument><expr><name><name>hls</name><operator>-&gt;</operator><name>master_m3u8_url</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>hls_window</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>last</name></decl></parameter>, <parameter><decl><type><name>VariantStream</name> <modifier>*</modifier></type><name>vs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HLSContext</name> <modifier>*</modifier></type><name>hls</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HLSSegment</name> <modifier>*</modifier></type><name>en</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>target_duration</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>temp_filename</name><index>[<expr><name>MAX_URL_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>temp_vtt_filename</name><index>[<expr><name>MAX_URL_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>sequence</name> <init>= <expr><call><name>FFMAX</name><argument_list>(<argument><expr><name><name>hls</name><operator>-&gt;</operator><name>start_sequence</name></name></expr></argument>, <argument><expr><name><name>vs</name><operator>-&gt;</operator><name>sequence</name></name> <operator>-</operator> <name><name>vs</name><operator>-&gt;</operator><name>nb_entries</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>proto</name> <init>= <expr><call><name>avio_find_protocol_name</name><argument_list>(<argument><expr><name><name>vs</name><operator>-&gt;</operator><name>m3u8_name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>is_file_proto</name> <init>= <expr><name>proto</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>proto</name></expr></argument>, <argument><expr><literal type="string">"file"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>use_temp_file</name> <init>= <expr><name>is_file_proto</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name><name>hls</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HLS_TEMP_FILE</name><operator>)</operator> <operator>||</operator> <operator>!</operator><operator>(</operator><name><name>hls</name><operator>-&gt;</operator><name>pl_type</name></name> <operator>==</operator> <name>PLAYLIST_TYPE_VOD</name><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name></type> <name>warned_non_file</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>key_uri</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>iv_string</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVDictionary</name> <modifier>*</modifier></type><name>options</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>prog_date_time</name> <init>= <expr><name><name>vs</name><operator>-&gt;</operator><name>initial_prog_date_time</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name>prog_date_time_p</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>hls</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HLS_PROGRAM_DATE_TIME</name><operator>)</operator></expr> ?</condition><then> <expr><operator>&amp;</operator><name>prog_date_time</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>byterange_mode</name> <init>= <expr><operator>(</operator><name><name>hls</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HLS_SINGLE_FILE</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>hls</name><operator>-&gt;</operator><name>max_seg_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>hls</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>byterange_mode</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>hls</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>sequence</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hls</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HLS_INDEPENDENT_SEGMENTS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>hls</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hls</name><operator>-&gt;</operator><name>segment_type</name></name> <operator>==</operator> <name>SEGMENT_TYPE_FMP4</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>hls</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <literal type="number">7</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_file_proto</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>hls</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HLS_TEMP_FILE</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name>warned_non_file</name><operator>++</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Cannot use rename on non file protocol, this may lead to races and temporary partial files\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>set_http_options</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>options</name></expr></argument>, <argument><expr><name>hls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>temp_filename</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>temp_filename</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><ternary><condition><expr><name>use_temp_file</name></expr> ?</condition><then> <expr><literal type="string">"%s.tmp"</literal></expr> </then><else>: <expr><literal type="string">"%s"</literal></expr></else></ternary></expr></argument>, <argument><expr><name><name>vs</name><operator>-&gt;</operator><name>m3u8_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>hlsenc_io_open</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><ternary><condition><expr><name>byterange_mode</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>hls</name><operator>-&gt;</operator><name>m3u8_out</name></name></expr> </then><else>: <expr><operator>&amp;</operator><name><name>vs</name><operator>-&gt;</operator><name>out</name></name></expr></else></ternary></expr></argument>, <argument><expr><name>temp_filename</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>options</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>hls</name><operator>-&gt;</operator><name>ignore_io_errors</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>en</name> <operator>=</operator> <name><name>vs</name><operator>-&gt;</operator><name>segments</name></name></expr>;</init> <condition><expr><name>en</name></expr>;</condition> <incr><expr><name>en</name> <operator>=</operator> <name><name>en</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>target_duration</name> <operator>&lt;=</operator> <name><name>en</name><operator>-&gt;</operator><name>duration</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>target_duration</name> <operator>=</operator> <call><name>lrint</name><argument_list>(<argument><expr><name><name>en</name><operator>-&gt;</operator><name>duration</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>vs</name><operator>-&gt;</operator><name>discontinuity_set</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_hls_write_playlist_header</name><argument_list>(<argument><expr><ternary><condition><expr><name>byterange_mode</name></expr> ?</condition><then> <expr><name><name>hls</name><operator>-&gt;</operator><name>m3u8_out</name></name></expr> </then><else>: <expr><name><name>vs</name><operator>-&gt;</operator><name>out</name></name></expr></else></ternary></expr></argument>, <argument><expr><name><name>hls</name><operator>-&gt;</operator><name>version</name></name></expr></argument>, <argument><expr><name><name>hls</name><operator>-&gt;</operator><name>allowcache</name></name></expr></argument>,

<argument><expr><name>target_duration</name></expr></argument>, <argument><expr><name>sequence</name></expr></argument>, <argument><expr><name><name>hls</name><operator>-&gt;</operator><name>pl_type</name></name></expr></argument>, <argument><expr><name><name>hls</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HLS_I_FRAMES_ONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>hls</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HLS_DISCONT_START</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>sequence</name><operator>==</operator><name><name>hls</name><operator>-&gt;</operator><name>start_sequence</name></name> <operator>&amp;&amp;</operator> <name><name>vs</name><operator>-&gt;</operator><name>discontinuity_set</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avio_printf</name><argument_list>(<argument><expr><ternary><condition><expr><name>byterange_mode</name></expr> ?</condition><then> <expr><name><name>hls</name><operator>-&gt;</operator><name>m3u8_out</name></name></expr> </then><else>: <expr><name><name>vs</name><operator>-&gt;</operator><name>out</name></name></expr></else></ternary></expr></argument>, <argument><expr><literal type="string">"#EXT-X-DISCONTINUITY\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vs</name><operator>-&gt;</operator><name>discontinuity_set</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vs</name><operator>-&gt;</operator><name>has_video</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>hls</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HLS_INDEPENDENT_SEGMENTS</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avio_printf</name><argument_list>(<argument><expr><ternary><condition><expr><name>byterange_mode</name></expr> ?</condition><then> <expr><name><name>hls</name><operator>-&gt;</operator><name>m3u8_out</name></name></expr> </then><else>: <expr><name><name>vs</name><operator>-&gt;</operator><name>out</name></name></expr></else></ternary></expr></argument>, <argument><expr><literal type="string">"#EXT-X-INDEPENDENT-SEGMENTS\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>en</name> <operator>=</operator> <name><name>vs</name><operator>-&gt;</operator><name>segments</name></name></expr>;</init> <condition><expr><name>en</name></expr>;</condition> <incr><expr><name>en</name> <operator>=</operator> <name><name>en</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>hls</name><operator>-&gt;</operator><name>encrypt</name></name> <operator>||</operator> <name><name>hls</name><operator>-&gt;</operator><name>key_info_file</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>key_uri</name> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>en</name><operator>-&gt;</operator><name>key_uri</name></name></expr></argument>, <argument><expr><name>key_uri</name></expr></argument>)</argument_list></call> <operator>||</operator>

<call><name>av_strcasecmp</name><argument_list>(<argument><expr><name><name>en</name><operator>-&gt;</operator><name>iv_string</name></name></expr></argument>, <argument><expr><name>iv_string</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avio_printf</name><argument_list>(<argument><expr><ternary><condition><expr><name>byterange_mode</name></expr> ?</condition><then> <expr><name><name>hls</name><operator>-&gt;</operator><name>m3u8_out</name></name></expr> </then><else>: <expr><name><name>vs</name><operator>-&gt;</operator><name>out</name></name></expr></else></ternary></expr></argument>, <argument><expr><literal type="string">"#EXT-X-KEY:METHOD=AES-128,URI=\"%s\""</literal></expr></argument>, <argument><expr><name><name>en</name><operator>-&gt;</operator><name>key_uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>en</name><operator>-&gt;</operator><name>iv_string</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>avio_printf</name><argument_list>(<argument><expr><ternary><condition><expr><name>byterange_mode</name></expr> ?</condition><then> <expr><name><name>hls</name><operator>-&gt;</operator><name>m3u8_out</name></name></expr> </then><else>: <expr><name><name>vs</name><operator>-&gt;</operator><name>out</name></name></expr></else></ternary></expr></argument>, <argument><expr><literal type="string">",IV=0x%s"</literal></expr></argument>, <argument><expr><name><name>en</name><operator>-&gt;</operator><name>iv_string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>avio_printf</name><argument_list>(<argument><expr><ternary><condition><expr><name>byterange_mode</name></expr> ?</condition><then> <expr><name><name>hls</name><operator>-&gt;</operator><name>m3u8_out</name></name></expr> </then><else>: <expr><name><name>vs</name><operator>-&gt;</operator><name>out</name></name></expr></else></ternary></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>key_uri</name> <operator>=</operator> <name><name>en</name><operator>-&gt;</operator><name>key_uri</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>iv_string</name> <operator>=</operator> <name><name>en</name><operator>-&gt;</operator><name>iv_string</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>hls</name><operator>-&gt;</operator><name>segment_type</name></name> <operator>==</operator> <name>SEGMENT_TYPE_FMP4</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>en</name> <operator>==</operator> <name><name>vs</name><operator>-&gt;</operator><name>segments</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ff_hls_write_init_file</name><argument_list>(<argument><expr><ternary><condition><expr><name>byterange_mode</name></expr> ?</condition><then> <expr><name><name>hls</name><operator>-&gt;</operator><name>m3u8_out</name></name></expr> </then><else>: <expr><name><name>vs</name><operator>-&gt;</operator><name>out</name></name></expr></else></ternary></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name><name>hls</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HLS_SINGLE_FILE</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>en</name><operator>-&gt;</operator><name>filename</name></name></expr> </then><else>: <expr><name><name>vs</name><operator>-&gt;</operator><name>fmp4_init_filename</name></name></expr></else></ternary></expr></argument>,

<argument><expr><name><name>hls</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HLS_SINGLE_FILE</name></expr></argument>, <argument><expr><name><name>vs</name><operator>-&gt;</operator><name>init_range_length</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_hls_write_file_entry</name><argument_list>(<argument><expr><ternary><condition><expr><name>byterange_mode</name></expr> ?</condition><then> <expr><name><name>hls</name><operator>-&gt;</operator><name>m3u8_out</name></name></expr> </then><else>: <expr><name><name>vs</name><operator>-&gt;</operator><name>out</name></name></expr></else></ternary></expr></argument>, <argument><expr><name><name>en</name><operator>-&gt;</operator><name>discont</name></name></expr></argument>, <argument><expr><name>byterange_mode</name></expr></argument>,

<argument><expr><name><name>en</name><operator>-&gt;</operator><name>duration</name></name></expr></argument>, <argument><expr><name><name>hls</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HLS_ROUND_DURATIONS</name></expr></argument>,

<argument><expr><name><name>en</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>en</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>, <argument><expr><name><name>vs</name><operator>-&gt;</operator><name>baseurl</name></name></expr></argument>,

<argument><expr><name><name>en</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>, <argument><expr><name>prog_date_time_p</name></expr></argument>, <argument><expr><name><name>en</name><operator>-&gt;</operator><name>keyframe_size</name></name></expr></argument>, <argument><expr><name><name>en</name><operator>-&gt;</operator><name>keyframe_pos</name></name></expr></argument>, <argument><expr><name><name>hls</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HLS_I_FRAMES_ONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"ff_hls_write_file_entry get error\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>last</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>hls</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HLS_OMIT_ENDLIST</name><operator>)</operator><operator>==</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_hls_write_end_list</name><argument_list>(<argument><expr><ternary><condition><expr><name>byterange_mode</name></expr> ?</condition><then> <expr><name><name>hls</name><operator>-&gt;</operator><name>m3u8_out</name></name></expr> </then><else>: <expr><name><name>vs</name><operator>-&gt;</operator><name>out</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vs</name><operator>-&gt;</operator><name>vtt_m3u8_name</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>temp_vtt_filename</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>temp_vtt_filename</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><ternary><condition><expr><name>use_temp_file</name></expr> ?</condition><then> <expr><literal type="string">"%s.tmp"</literal></expr> </then><else>: <expr><literal type="string">"%s"</literal></expr></else></ternary></expr></argument>, <argument><expr><name><name>vs</name><operator>-&gt;</operator><name>vtt_m3u8_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>hlsenc_io_open</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>hls</name><operator>-&gt;</operator><name>sub_m3u8_out</name></name></expr></argument>, <argument><expr><name>temp_vtt_filename</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>options</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>hls</name><operator>-&gt;</operator><name>ignore_io_errors</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ff_hls_write_playlist_header</name><argument_list>(<argument><expr><name><name>hls</name><operator>-&gt;</operator><name>sub_m3u8_out</name></name></expr></argument>, <argument><expr><name><name>hls</name><operator>-&gt;</operator><name>version</name></name></expr></argument>, <argument><expr><name><name>hls</name><operator>-&gt;</operator><name>allowcache</name></name></expr></argument>,

<argument><expr><name>target_duration</name></expr></argument>, <argument><expr><name>sequence</name></expr></argument>, <argument><expr><name>PLAYLIST_TYPE_NONE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>en</name> <operator>=</operator> <name><name>vs</name><operator>-&gt;</operator><name>segments</name></name></expr>;</init> <condition><expr><name>en</name></expr>;</condition> <incr><expr><name>en</name> <operator>=</operator> <name><name>en</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_hls_write_file_entry</name><argument_list>(<argument><expr><name><name>hls</name><operator>-&gt;</operator><name>sub_m3u8_out</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>byterange_mode</name></expr></argument>,

<argument><expr><name><name>en</name><operator>-&gt;</operator><name>duration</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>en</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>en</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>,

<argument><expr><name><name>vs</name><operator>-&gt;</operator><name>baseurl</name></name></expr></argument>, <argument><expr><name><name>en</name><operator>-&gt;</operator><name>sub_filename</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"ff_hls_write_file_entry get error\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>last</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_hls_write_end_list</name><argument_list>(<argument><expr><name><name>hls</name><operator>-&gt;</operator><name>sub_m3u8_out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>av_dict_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>hlsenc_io_close</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><ternary><condition><expr><name>byterange_mode</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>hls</name><operator>-&gt;</operator><name>m3u8_out</name></name></expr> </then><else>: <expr><operator>&amp;</operator><name><name>vs</name><operator>-&gt;</operator><name>out</name></name></expr></else></ternary></expr></argument>, <argument><expr><name>temp_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>hlsenc_io_close</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>hls</name><operator>-&gt;</operator><name>sub_m3u8_out</name></name></expr></argument>, <argument><expr><name><name>vs</name><operator>-&gt;</operator><name>vtt_m3u8_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>use_temp_file</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ff_rename</name><argument_list>(<argument><expr><name>temp_filename</name></expr></argument>, <argument><expr><name><name>vs</name><operator>-&gt;</operator><name>m3u8_name</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vs</name><operator>-&gt;</operator><name>vtt_m3u8_name</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_rename</name><argument_list>(<argument><expr><name>temp_vtt_filename</name></expr></argument>, <argument><expr><name><name>vs</name><operator>-&gt;</operator><name>vtt_m3u8_name</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>hls</name><operator>-&gt;</operator><name>master_pl_name</name></name></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>create_master_playlist</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>vs</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Master playlist creation failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>hls_start</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>VariantStream</name> <modifier>*</modifier></type><name>vs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HLSContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>oc</name> <init>= <expr><name><name>vs</name><operator>-&gt;</operator><name>avf</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>vtt_oc</name> <init>= <expr><name><name>vs</name><operator>-&gt;</operator><name>vtt_avf</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVDictionary</name> <modifier>*</modifier></type><name>options</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>proto</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>use_temp_file</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>iv_string</name><index>[<expr><name>KEYSIZE</name><operator>*</operator><literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HLS_SINGLE_FILE</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>new_name</name> <init>= <expr><call><name>av_strdup</name><argument_list>(<argument><expr><name><name>vs</name><operator>-&gt;</operator><name>basename</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>new_name</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ff_format_set_url</name><argument_list>(<argument><expr><name>oc</name></expr></argument>, <argument><expr><name>new_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vs</name><operator>-&gt;</operator><name>vtt_basename</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>new_name</name> <operator>=</operator> <call><name>av_strdup</name><argument_list>(<argument><expr><name><name>vs</name><operator>-&gt;</operator><name>vtt_basename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>new_name</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ff_format_set_url</name><argument_list>(<argument><expr><name>vtt_oc</name></expr></argument>, <argument><expr><name>new_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>max_seg_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>filename</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>replace_int_data_in_filename</name><argument_list>(<argument><expr><operator>&amp;</operator><name>filename</name></expr></argument>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_HLS_WRAP</name></expr></cpp:if>

<argument><expr><name><name>vs</name><operator>-&gt;</operator><name>basename</name></name></expr></argument>, <argument><expr><literal type="char">'d'</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>c</name><operator>-&gt;</operator><name>wrap</name></name></expr> ?</condition><then> <expr><name><name>vs</name><operator>-&gt;</operator><name>sequence</name></name> <operator>%</operator> <name><name>c</name><operator>-&gt;</operator><name>wrap</name></name></expr> </then><else>: <expr><name><name>vs</name><operator>-&gt;</operator><name>sequence</name></name></expr></else></ternary></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name><name>vs</name><operator>-&gt;</operator><name>basename</name></name></expr><operator>,</operator> <expr><literal type="char">'d'</literal></expr><operator>,</operator> <expr><name><name>vs</name><operator>-&gt;</operator><name>sequence</name></name></expr></expr_stmt>)</block_content> &lt; 1</block></if></if_stmt>)</block_content> <block>{<block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>oc</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid segment filename template '%s', you can try to use -strftime 1 with it\n"</literal></expr></argument>, <argument><expr><name><name>vs</name><operator>-&gt;</operator><name>basename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></block></if></if_stmt>

<expr_stmt><expr><call><name>ff_format_set_url</name><argument_list>(<argument><expr><name>oc</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function> <if_stmt><else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>use_localtime</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>time_t</name></type> <name>now0</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>tm</name></decl>, <decl><type ref="prev"/><name>tmpbuf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bufsize</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>vs</name><operator>-&gt;</operator><name>basename</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name>MAX_URL_SIZE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>av_mallocz</name><argument_list>(<argument><expr><name>bufsize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>time</name><argument_list>(<argument><expr><operator>&amp;</operator><name>now0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tm</name> <operator>=</operator> <call><name>localtime_r</name><argument_list>(<argument><expr><operator>&amp;</operator><name>now0</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmpbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_format_set_url</name><argument_list>(<argument><expr><name>oc</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strftime</name><argument_list>(<argument><expr><name><name>oc</name><operator>-&gt;</operator><name>url</name></name></expr></argument>, <argument><expr><name>bufsize</name></expr></argument>, <argument><expr><name><name>vs</name><operator>-&gt;</operator><name>basename</name></name></expr></argument>, <argument><expr><name>tm</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>oc</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Could not get segment filename with strftime\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>sls_flag_use_localtime_filename</name><argument_list>(<argument><expr><name>oc</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>vs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>use_localtime_mkdir</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dir</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>fn_copy</name> <init>= <expr><call><name>av_strdup</name><argument_list>(<argument><expr><name><name>oc</name><operator>-&gt;</operator><name>url</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>dir</name> <operator>=</operator> <call><name>av_dirname</name><argument_list>(<argument><expr><name>fn_copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ff_mkdir_p</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>errno</name> <operator>!=</operator> <name>EEXIST</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>oc</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Could not create directory %s with use_localtime_mkdir\n"</literal></expr></argument>, <argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fn_copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fn_copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>filename</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>replace_int_data_in_filename</name><argument_list>(<argument><expr><operator>&amp;</operator><name>filename</name></expr></argument>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_HLS_WRAP</name></expr></cpp:if>

<argument><expr><name><name>vs</name><operator>-&gt;</operator><name>basename</name></name></expr></argument>, <argument><expr><literal type="char">'d'</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>c</name><operator>-&gt;</operator><name>wrap</name></name></expr> ?</condition><then> <expr><name><name>vs</name><operator>-&gt;</operator><name>sequence</name></name> <operator>%</operator> <name><name>c</name><operator>-&gt;</operator><name>wrap</name></name></expr> </then><else>: <expr><name><name>vs</name><operator>-&gt;</operator><name>sequence</name></name></expr></else></ternary></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name><name>vs</name><operator>-&gt;</operator><name>basename</name></name></expr><operator>,</operator> <expr><literal type="char">'d'</literal></expr><operator>,</operator> <expr><name><name>vs</name><operator>-&gt;</operator><name>sequence</name></name></expr></expr_stmt>)</block_content> &lt; 1</block></if></if_stmt>)</block_content> <block>{<block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>oc</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid segment filename template '%s' you can try to use -strftime 1 with it\n"</literal></expr></argument>, <argument><expr><name><name>vs</name><operator>-&gt;</operator><name>basename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></block></else></if_stmt>

<expr_stmt><expr><call><name>ff_format_set_url</name><argument_list>(<argument><expr><name>oc</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>( <expr><name><name>vs</name><operator>-&gt;</operator><name>vtt_basename</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>filename</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>replace_int_data_in_filename</name><argument_list>(<argument><expr><operator>&amp;</operator><name>filename</name></expr></argument>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_HLS_WRAP</name></expr></cpp:if>

<argument><expr><name><name>vs</name><operator>-&gt;</operator><name>vtt_basename</name></name></expr></argument>, <argument><expr><literal type="char">'d'</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>c</name><operator>-&gt;</operator><name>wrap</name></name></expr> ?</condition><then> <expr><name><name>vs</name><operator>-&gt;</operator><name>sequence</name></name> <operator>%</operator> <name><name>c</name><operator>-&gt;</operator><name>wrap</name></name></expr> </then><else>: <expr><name><name>vs</name><operator>-&gt;</operator><name>sequence</name></name></expr></else></ternary></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name><name>vs</name><operator>-&gt;</operator><name>vtt_basename</name></name></expr><operator>,</operator> <expr><literal type="char">'d'</literal></expr><operator>,</operator> <expr><name><name>vs</name><operator>-&gt;</operator><name>sequence</name></name></expr></expr_stmt>)</block_content> &lt; 1</block></if></if_stmt>)</block_content> <block>{<block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>vtt_oc</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid segment filename template '%s'\n"</literal></expr></argument>, <argument><expr><name><name>vs</name><operator>-&gt;</operator><name>vtt_basename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></block></if></if_stmt>

<expr_stmt><expr><call><name>ff_format_set_url</name><argument_list>(<argument><expr><name>vtt_oc</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

}

}

<expr_stmt><expr><name><name>vs</name><operator>-&gt;</operator><name>number</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>proto</name> <operator>=</operator> <call><name>avio_find_protocol_name</name><argument_list>(<argument><expr><name><name>oc</name><operator>-&gt;</operator><name>url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>use_temp_file</name> <operator>=</operator> <name>proto</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>proto</name></expr></argument>, <argument><expr><literal type="string">"file"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HLS_TEMP_FILE</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>use_temp_file</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>new_name</name> <init>= <expr><call><name>av_asprintf</name><argument_list>(<argument><expr><literal type="string">"%s.tmp"</literal></expr></argument>, <argument><expr><name><name>oc</name><operator>-&gt;</operator><name>url</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>new_name</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ff_format_set_url</name><argument_list>(<argument><expr><name>oc</name></expr></argument>, <argument><expr><name>new_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>key_info_file</name></name> <operator>||</operator> <name><name>c</name><operator>-&gt;</operator><name>encrypt</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>segment_type</name></name> <operator>==</operator> <name>SEGMENT_TYPE_FMP4</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Encrypted fmp4 not yet supported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>key_info_file</name></name> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>encrypt</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Cannot use both -hls_key_info_file and -hls_enc,"</literal>

<literal type="string">" ignoring -hls_enc\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>encrypt_started</name></name> <operator>||</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HLS_PERIODIC_REKEY</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>key_info_file</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>hls_encryption_start</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>do_encrypt</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>vs</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>encrypt_started</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>av_strlcpy</name><argument_list>(<argument><expr><name>iv_string</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>iv_string</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>iv_string</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>err</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>iv_string</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>iv_string</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%032"</literal><name>PRIx64</name></expr></argument>, <argument><expr><name><name>vs</name><operator>-&gt;</operator><name>sequence</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>iv_string</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>iv_string</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>iv_string</name></name></expr></argument>, <argument><expr><name>iv_string</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>iv_string</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>segment_type</name></name> <operator>!=</operator> <name>SEGMENT_TYPE_FMP4</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>oc</name><operator>-&gt;</operator><name>oformat</name><operator>-&gt;</operator><name>priv_class</name></name> <operator>&amp;&amp;</operator> <name><name>oc</name><operator>-&gt;</operator><name>priv_data</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_opt_set</name><argument_list>(<argument><expr><name><name>oc</name><operator>-&gt;</operator><name>priv_data</name></name></expr></argument>, <argument><expr><literal type="string">"mpegts_flags"</literal></expr></argument>, <argument><expr><literal type="string">"resend_headers"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HLS_SINGLE_FILE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>set_http_options</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>options</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>hlsenc_io_open</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vs</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name><name>oc</name><operator>-&gt;</operator><name>url</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>options</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>ignore_io_errors</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vs</name><operator>-&gt;</operator><name>vtt_basename</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>set_http_options</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>options</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>hlsenc_io_open</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vtt_oc</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name><name>vtt_oc</name><operator>-&gt;</operator><name>url</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>options</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>ignore_io_errors</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_dict_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vs</name><operator>-&gt;</operator><name>vtt_basename</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>avformat_write_header</name><argument_list>(<argument><expr><name>vtt_oc</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>av_dict_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>

}

static <function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>get_default_pattern_localtime_fmt</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>b</name><index>[<expr><literal type="number">21</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>time_t</name></type> <name>t</name> <init>= <expr><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"/><name>tmbuf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HLSContext</name> <modifier>*</modifier></type><name>hls</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>localtime_r</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hls</name><operator>-&gt;</operator><name>segment_type</name></name> <operator>==</operator> <name>SEGMENT_TYPE_FMP4</name></expr>)</condition> <block>{<block_content>

<return>return <expr><ternary><condition><expr><operator>(</operator><name>HAVE_LIBC_MSVCRT</name> <operator>||</operator> <operator>!</operator><call><name>strftime</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"-%Y%m%d%H%M%S.m4s"</literal></expr> </then><else>: <expr><literal type="string">"-%s.m4s"</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator><name>HAVE_LIBC_MSVCRT</name> <operator>||</operator> <operator>!</operator><call><name>strftime</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"-%Y%m%d%H%M%S.ts"</literal></expr> </then><else>: <expr><literal type="string">"-%s.ts"</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>append_postfix</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>name_buf_len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>extension</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="char">'\0'</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>strrchr</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_strlcpy</name><argument_list>(<argument><expr><name>extension</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>extension</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>name</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name_buf_len</name> <operator>-</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>POSTFIX_PATTERN</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>extension</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_strlcat</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>extension</name></expr></argument>, <argument><expr><name>name_buf_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>validate_name</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nb_vs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fn</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>subdir_name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>fn_dup</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fn</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>fn_dup</name> <operator>=</operator> <call><name>av_strdup</name><argument_list>(<argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>filename</name> <operator>=</operator> <call><name>av_basename</name><argument_list>(<argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>subdir_name</name> <operator>=</operator> <call><name>av_dirname</name><argument_list>(<argument><expr><name>fn_dup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nb_vs</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>av_stristr</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"%v"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>av_stristr</name><argument_list>(<argument><expr><name>subdir_name</name></expr></argument>, <argument><expr><literal type="string">"%v"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"More than 1 variant streams are present, %%v is expected "</literal>

<literal type="string">"either in the filename or in the sub-directory name of file %s\n"</literal></expr></argument>, <argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_stristr</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"%v"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>av_stristr</name><argument_list>(<argument><expr><name>subdir_name</name></expr></argument>, <argument><expr><literal type="string">"%v"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"%%v is expected either in the filename or "</literal>

<literal type="string">"in the sub-directory name of file %s, but only in one of them\n"</literal></expr></argument>, <argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fn_dup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>format_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>varname</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>proto</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dir</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>orig_buf_dup</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>mod_buf_dup</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>orig_buf_dup</name> <operator>=</operator> <call><name>av_strdup</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>orig_buf_dup</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>av_stristr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%v"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <name>orig_buf_dup</name></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>varname</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>replace_int_data_in_filename</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>orig_buf_dup</name></expr></argument>, <argument><expr><literal type="char">'v'</literal></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>replace_str_data_in_filename</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>orig_buf_dup</name></expr></argument>, <argument><expr><literal type="char">'v'</literal></expr></argument>, <argument><expr><name>varname</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>proto</name> <operator>=</operator> <call><name>avio_find_protocol_name</name><argument_list>(<argument><expr><name>orig_buf_dup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dir</name> <operator>=</operator> <call><name>av_dirname</name><argument_list>(<argument><expr><name>orig_buf_dup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_stristr</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><literal type="string">"%v"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>proto</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>proto</name></expr></argument>, <argument><expr><literal type="string">"file"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mod_buf_dup</name> <operator>=</operator> <call><name>av_strdup</name><argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dir</name> <operator>=</operator> <call><name>av_dirname</name><argument_list>(<argument><expr><name>mod_buf_dup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ff_mkdir_p</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>errno</name> <operator>!=</operator> <name>EEXIST</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>orig_buf_dup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mod_buf_dup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_nth_codec_stream_index</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>AVMediaType</name></name></type> <name>codec_type</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>stream_id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>stream_index</name></decl>, <decl><type ref="prev"/><name>cnt</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>stream_id</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>stream_id</name></expr></argument> &gt;</argument_list></name> <name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>cnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>stream_index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>stream_index</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>stream_index</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>stream_index</name></expr>]</index></name><operator>-&gt;</operator><name><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>!=</operator> <name>codec_type</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cnt</name> <operator>==</operator> <name>stream_id</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>stream_index</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_variant_stream_mapstring</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HLSContext</name> <modifier>*</modifier></type><name>hls</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VariantStream</name> <modifier>*</modifier></type><name>vs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>stream_index</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>AVMediaType</name></name></type> <name>codec_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nb_varstreams</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>nb_streams</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>q</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>saveptr1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>saveptr2</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>varstr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>keyval</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>val</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>av_strdup</name><argument_list>(<argument><expr><name><name>hls</name><operator>-&gt;</operator><name>var_stream_map</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>q</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>av_strtok</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><literal type="string">" \t"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>saveptr1</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>q</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>nb_varstreams</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hls</name><operator>-&gt;</operator><name>var_streams</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>hls</name><operator>-&gt;</operator><name>var_streams</name></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>nb_varstreams</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>hls</name><operator>-&gt;</operator><name>var_streams</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>hls</name><operator>-&gt;</operator><name>nb_varstreams</name></name> <operator>=</operator> <name>nb_varstreams</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>hls</name><operator>-&gt;</operator><name>var_stream_map</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>nb_varstreams</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>varstr</name> <operator>=</operator> <call><name>av_strtok</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">" \t"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>saveptr1</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nb_varstreams</name> <operator>&lt;</operator> <name><name>hls</name><operator>-&gt;</operator><name>nb_varstreams</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>vs</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>hls</name><operator>-&gt;</operator><name>var_streams</name><index>[<expr><name>nb_varstreams</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vs</name><operator>-&gt;</operator><name>var_stream_idx</name></name> <operator>=</operator> <name>nb_varstreams</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vs</name><operator>-&gt;</operator><name>is_default</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>nb_varstreams</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>

<expr_stmt><expr><name>q</name> <operator>=</operator> <name>varstr</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>q</name> <operator>&lt;</operator> <name>varstr</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>varstr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>av_strncasecmp</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><literal type="string">"a:"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>av_strncasecmp</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><literal type="string">"v:"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>av_strncasecmp</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><literal type="string">"s:"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>vs</name><operator>-&gt;</operator><name>nb_streams</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>q</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name><name>vs</name><operator>-&gt;</operator><name>streams</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>AVStream</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>vs</name><operator>-&gt;</operator><name>nb_streams</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>vs</name><operator>-&gt;</operator><name>streams</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>nb_streams</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>keyval</name> <operator>=</operator> <call><name>av_strtok</name><argument_list>(<argument><expr><name>varstr</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>saveptr2</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>varstr</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_strstart</name><argument_list>(<argument><expr><name>keyval</name></expr></argument>, <argument><expr><literal type="string">"language:"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name><name>vs</name><operator>-&gt;</operator><name>language</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vs</name><operator>-&gt;</operator><name>language</name></name> <operator>=</operator> <call><name>av_strdup</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>vs</name><operator>-&gt;</operator><name>language</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<continue>continue;</continue>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>av_strstart</name><argument_list>(<argument><expr><name>keyval</name></expr></argument>, <argument><expr><literal type="string">"default:"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>vs</name><operator>-&gt;</operator><name>is_default</name></name> <operator>=</operator> <operator>(</operator><operator>!</operator><call><name>av_strncasecmp</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="string">"YES"</literal></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><literal type="string">"YES"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>(</operator><operator>!</operator><call><name>av_strncasecmp</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hls</name><operator>-&gt;</operator><name>has_default_key</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>av_strstart</name><argument_list>(<argument><expr><name>keyval</name></expr></argument>, <argument><expr><literal type="string">"name:"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name><name>vs</name><operator>-&gt;</operator><name>varname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vs</name><operator>-&gt;</operator><name>varname</name></name> <operator>=</operator> <call><name>av_strdup</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>vs</name><operator>-&gt;</operator><name>varname</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<continue>continue;</continue>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>av_strstart</name><argument_list>(<argument><expr><name>keyval</name></expr></argument>, <argument><expr><literal type="string">"agroup:"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name><name>vs</name><operator>-&gt;</operator><name>agroup</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vs</name><operator>-&gt;</operator><name>agroup</name></name> <operator>=</operator> <call><name>av_strdup</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>vs</name><operator>-&gt;</operator><name>agroup</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<continue>continue;</continue>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>av_strstart</name><argument_list>(<argument><expr><name>keyval</name></expr></argument>, <argument><expr><literal type="string">"ccgroup:"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name><name>vs</name><operator>-&gt;</operator><name>ccgroup</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vs</name><operator>-&gt;</operator><name>ccgroup</name></name> <operator>=</operator> <call><name>av_strdup</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>vs</name><operator>-&gt;</operator><name>ccgroup</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<continue>continue;</continue>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>av_strstart</name><argument_list>(<argument><expr><name>keyval</name></expr></argument>, <argument><expr><literal type="string">"v:"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>codec_type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hls</name><operator>-&gt;</operator><name>has_video_m3u8</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>av_strstart</name><argument_list>(<argument><expr><name>keyval</name></expr></argument>, <argument><expr><literal type="string">"a:"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>codec_type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>av_strstart</name><argument_list>(<argument><expr><name>keyval</name></expr></argument>, <argument><expr><literal type="string">"s:"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>codec_type</name> <operator>=</operator> <name>AVMEDIA_TYPE_SUBTITLE</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid keyval %s\n"</literal></expr></argument>, <argument><expr><name>keyval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>stream_index</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_isdigit</name><argument_list>(<argument><expr><operator>*</operator><name>val</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>stream_index</name> <operator>=</operator> <call><name>get_nth_codec_stream_index</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>codec_type</name></expr></argument>,

<argument><expr><call><name>atoi</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>stream_index</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>nb_streams</name> <operator>&lt;</operator> <name><name>vs</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>nb_streams</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>nb_streams</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>vs</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>stream_index</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Same elementary stream found more than once inside "</literal>

<literal type="string">"variant definition #%d\n"</literal></expr></argument>, <argument><expr><name>nb_varstreams</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>nb_varstreams</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>j</name> <operator>&lt;</operator> <name>nb_varstreams</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>hls</name><operator>-&gt;</operator><name>var_streams</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>nb_streams</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>hls</name><operator>-&gt;</operator><name>var_streams</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name><name>streams</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>stream_index</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Same elementary stream found more than once "</literal>

<literal type="string">"in two different variant definitions #%d and #%d\n"</literal></expr></argument>,

<argument><expr><name>j</name></expr></argument>, <argument><expr><name>nb_varstreams</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><name><name>vs</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>nb_streams</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>stream_index</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unable to map stream at %s\n"</literal></expr></argument>, <argument><expr><name>keyval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

</block_content>}</block></while>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Number of variant streams %d\n"</literal></expr></argument>,

<argument><expr><name><name>hls</name><operator>-&gt;</operator><name>nb_varstreams</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_cc_stream_mapstring</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HLSContext</name> <modifier>*</modifier></type><name>hls</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nb_ccstreams</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>q</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ccstr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>keyval</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>saveptr1</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>saveptr2</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>val</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ClosedCaptionsStream</name> <modifier>*</modifier></type><name>ccs</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>av_strdup</name><argument_list>(<argument><expr><name><name>hls</name><operator>-&gt;</operator><name>cc_stream_map</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>q</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>av_strtok</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><literal type="string">" \t"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>saveptr1</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>q</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>nb_ccstreams</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hls</name><operator>-&gt;</operator><name>cc_streams</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>hls</name><operator>-&gt;</operator><name>cc_streams</name></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>nb_ccstreams</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>hls</name><operator>-&gt;</operator><name>cc_streams</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>hls</name><operator>-&gt;</operator><name>nb_ccstreams</name></name> <operator>=</operator> <name>nb_ccstreams</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>hls</name><operator>-&gt;</operator><name>cc_stream_map</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>nb_ccstreams</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>ccstr</name> <operator>=</operator> <call><name>av_strtok</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">" \t"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>saveptr1</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nb_ccstreams</name> <operator>&lt;</operator> <name><name>hls</name><operator>-&gt;</operator><name>nb_ccstreams</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ccs</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>hls</name><operator>-&gt;</operator><name>cc_streams</name><index>[<expr><name>nb_ccstreams</name><operator>++</operator></expr>]</index></name><operator>)</operator></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>

<while>while <condition>(<expr><name>keyval</name> <operator>=</operator> <call><name>av_strtok</name><argument_list>(<argument><expr><name>ccstr</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>saveptr2</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ccstr</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_strstart</name><argument_list>(<argument><expr><name>keyval</name></expr></argument>, <argument><expr><literal type="string">"ccgroup:"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name><name>ccs</name><operator>-&gt;</operator><name>ccgroup</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ccs</name><operator>-&gt;</operator><name>ccgroup</name></name> <operator>=</operator> <call><name>av_strdup</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ccs</name><operator>-&gt;</operator><name>ccgroup</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>av_strstart</name><argument_list>(<argument><expr><name>keyval</name></expr></argument>, <argument><expr><literal type="string">"instreamid:"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name><name>ccs</name><operator>-&gt;</operator><name>instreamid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ccs</name><operator>-&gt;</operator><name>instreamid</name></name> <operator>=</operator> <call><name>av_strdup</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ccs</name><operator>-&gt;</operator><name>instreamid</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>av_strstart</name><argument_list>(<argument><expr><name>keyval</name></expr></argument>, <argument><expr><literal type="string">"language:"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name><name>ccs</name><operator>-&gt;</operator><name>language</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ccs</name><operator>-&gt;</operator><name>language</name></name> <operator>=</operator> <call><name>av_strdup</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ccs</name><operator>-&gt;</operator><name>language</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid keyval %s\n"</literal></expr></argument>, <argument><expr><name>keyval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ccs</name><operator>-&gt;</operator><name>ccgroup</name></name> <operator>||</operator> <operator>!</operator><name><name>ccs</name><operator>-&gt;</operator><name>instreamid</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Insufficient parameters in cc stream map string\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_strstart</name><argument_list>(<argument><expr><name><name>ccs</name><operator>-&gt;</operator><name>instreamid</name></name></expr></argument>, <argument><expr><literal type="string">"CC"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>atoi</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid instream ID CC index %d in %s, range 1-4\n"</literal></expr></argument>,

<argument><expr><call><name>atoi</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ccs</name><operator>-&gt;</operator><name>instreamid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>av_strstart</name><argument_list>(<argument><expr><name><name>ccs</name><operator>-&gt;</operator><name>instreamid</name></name></expr></argument>, <argument><expr><literal type="string">"SERVICE"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>atoi</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">63</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid instream ID SERVICE index %d in %s, range 1-63 \n"</literal></expr></argument>,

<argument><expr><call><name>atoi</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ccs</name><operator>-&gt;</operator><name>instreamid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid instream ID %s, supported are CCn or SERVICEn\n"</literal></expr></argument>,

<argument><expr><name><name>ccs</name><operator>-&gt;</operator><name>instreamid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>update_variant_stream_info</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HLSContext</name> <modifier>*</modifier></type><name>hls</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hls</name><operator>-&gt;</operator><name>cc_stream_map</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>parse_cc_stream_mapstring</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hls</name><operator>-&gt;</operator><name>var_stream_map</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>parse_variant_stream_mapstring</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>hls</name><operator>-&gt;</operator><name>var_streams</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>hls</name><operator>-&gt;</operator><name>var_streams</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>hls</name><operator>-&gt;</operator><name>var_streams</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>hls</name><operator>-&gt;</operator><name>nb_varstreams</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hls</name><operator>-&gt;</operator><name>var_streams</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>var_stream_idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hls</name><operator>-&gt;</operator><name>var_streams</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nb_streams</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hls</name><operator>-&gt;</operator><name>var_streams</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>streams</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>AVStream</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator>

<name><name>hls</name><operator>-&gt;</operator><name>var_streams</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nb_streams</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>hls</name><operator>-&gt;</operator><name>var_streams</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>streams</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hls</name><operator>-&gt;</operator><name>nb_ccstreams</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>hls</name><operator>-&gt;</operator><name>var_streams</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>ccgroup</name> <operator>=</operator> <call><name>av_strdup</name><argument_list>(<argument><expr><name><name>hls</name><operator>-&gt;</operator><name>cc_streams</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>ccgroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>hls</name><operator>-&gt;</operator><name>var_streams</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>ccgroup</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>hls</name><operator>-&gt;</operator><name>var_streams</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>streams</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>update_master_pl_info</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HLSContext</name> <modifier>*</modifier></type><name>hls</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dir</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>fn1</name><init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>fn2</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>fn1</name> <operator>=</operator> <call><name>av_strdup</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dir</name> <operator>=</operator> <call><name>av_dirname</name><argument_list>(<argument><expr><name>fn1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dir</name> <operator>&amp;&amp;</operator> <call><name>av_stristr</name><argument_list>(<argument><expr><call><name>av_basename</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%v"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>fn2</name> <operator>=</operator> <call><name>av_strdup</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dir</name> <operator>=</operator> <call><name>av_dirname</name><argument_list>(<argument><expr><name>fn2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dir</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>hls</name><operator>-&gt;</operator><name>master_m3u8_url</name></name> <operator>=</operator> <call><name>av_append_path_component</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name><name>hls</name><operator>-&gt;</operator><name>master_pl_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>hls</name><operator>-&gt;</operator><name>master_m3u8_url</name></name> <operator>=</operator> <call><name>av_strdup</name><argument_list>(<argument><expr><name><name>hls</name><operator>-&gt;</operator><name>master_pl_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>hls</name><operator>-&gt;</operator><name>master_m3u8_url</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fn1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fn2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>hls_write_header</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HLSContext</name> <modifier>*</modifier></type><name>hls</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VariantStream</name> <modifier>*</modifier></type><name>vs</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>hls</name><operator>-&gt;</operator><name>nb_varstreams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>vs</name> <operator>=</operator> <operator>&amp;</operator><name><name>hls</name><operator>-&gt;</operator><name>var_streams</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avformat_write_header</name><argument_list>(<argument><expr><name><name>vs</name><operator>-&gt;</operator><name>avf</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>vs</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>inner_st</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>outer_st</name> <init>= <expr><name><name>vs</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hls</name><operator>-&gt;</operator><name>max_seg_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>outer_st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_VIDEO</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>outer_st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>&gt;</operator> <name><name>hls</name><operator>-&gt;</operator><name>max_seg_size</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Your video bitrate is bigger than hls_segment_size, "</literal>

<literal type="string">"(%"</literal><name>PRId64</name> <literal type="string">" &gt; %"</literal><name>PRId64</name> <literal type="string">"), the result maybe not be what you want."</literal></expr></argument>,

<argument><expr><name><name>outer_st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>bit_rate</name></name></expr></argument>, <argument><expr><name><name>hls</name><operator>-&gt;</operator><name>max_seg_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>outer_st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>!=</operator> <name>AVMEDIA_TYPE_SUBTITLE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>inner_st</name> <operator>=</operator> <name><name>vs</name><operator>-&gt;</operator><name>avf</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>vs</name><operator>-&gt;</operator><name>vtt_avf</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>inner_st</name> <operator>=</operator> <name><name>vs</name><operator>-&gt;</operator><name>vtt_avf</name><operator>-&gt;</operator><name>streams</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>inner_st</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>avpriv_set_pts_info</name><argument_list>(<argument><expr><name>outer_st</name></expr></argument>, <argument><expr><name><name>inner_st</name><operator>-&gt;</operator><name>pts_wrap_bits</name></name></expr></argument>, <argument><expr><name><name>inner_st</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><name><name>inner_st</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>den</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>write_codec_attr</name><argument_list>(<argument><expr><name>outer_st</name></expr></argument>, <argument><expr><name>vs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>vs</name><operator>-&gt;</operator><name>has_video</name></name> <operator>&amp;&amp;</operator> <name><name>vs</name><operator>-&gt;</operator><name>agroup</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>hls</name><operator>-&gt;</operator><name>nb_varstreams</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>VariantStream</name> <modifier>*</modifier></type><name>vs_agroup</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>hls</name><operator>-&gt;</operator><name>var_streams</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>vs_agroup</name><operator>-&gt;</operator><name>has_video</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>vs_agroup</name><operator>-&gt;</operator><name>has_subtitle</name></name> <operator>&amp;&amp;</operator>

<name><name>vs_agroup</name><operator>-&gt;</operator><name>agroup</name></name> <operator>&amp;&amp;</operator>

<operator>!</operator><call><name>av_strcasecmp</name><argument_list>(<argument><expr><name><name>vs_agroup</name><operator>-&gt;</operator><name>agroup</name></name></expr></argument>, <argument><expr><name><name>vs</name><operator>-&gt;</operator><name>agroup</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>write_codec_attr</name><argument_list>(<argument><expr><name><name>vs_agroup</name><operator>-&gt;</operator><name>streams</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>vs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>hls_write_packet</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HLSContext</name> <modifier>*</modifier></type><name>hls</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>oc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name><name>pkt</name><operator>-&gt;</operator><name>stream_index</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>end_pts</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>is_ref_pkt</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>can_split</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>stream_index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>range_length</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>proto</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>use_temp_file</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buffer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VariantStream</name> <modifier>*</modifier></type><name>vs</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>old_filename</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>hls</name><operator>-&gt;</operator><name>nb_varstreams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>vs</name> <operator>=</operator> <operator>&amp;</operator><name><name>hls</name><operator>-&gt;</operator><name>var_streams</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>vs</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>vs</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name>st</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>( <expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_SUBTITLE</name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name>oc</name> <operator>=</operator> <name><name>vs</name><operator>-&gt;</operator><name>vtt_avf</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>stream_index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>oc</name> <operator>=</operator> <name><name>vs</name><operator>-&gt;</operator><name>avf</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>stream_index</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>oc</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>oc</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unable to find mapping variant stream\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>end_pts</name> <operator>=</operator> <name><name>hls</name><operator>-&gt;</operator><name>recording_time</name></name> <operator>*</operator> <name><name>vs</name><operator>-&gt;</operator><name>number</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vs</name><operator>-&gt;</operator><name>sequence</name></name> <operator>-</operator> <name><name>vs</name><operator>-&gt;</operator><name>nb_entries</name></name> <operator>&gt;</operator> <name><name>hls</name><operator>-&gt;</operator><name>start_sequence</name></name> <operator>&amp;&amp;</operator> <name><name>hls</name><operator>-&gt;</operator><name>init_time</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>init_list_dur</name> <init>= <expr><name><name>hls</name><operator>-&gt;</operator><name>init_time</name></name> <operator>*</operator> <name><name>vs</name><operator>-&gt;</operator><name>nb_entries</name></name> <operator>*</operator> <name>AV_TIME_BASE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>after_init_list_dur</name> <init>= <expr><operator>(</operator><name><name>vs</name><operator>-&gt;</operator><name>sequence</name></name> <operator>-</operator> <name><name>hls</name><operator>-&gt;</operator><name>start_sequence</name></name> <operator>-</operator> <name><name>vs</name><operator>-&gt;</operator><name>nb_entries</name></name> <operator>)</operator> <operator>*</operator> <operator>(</operator><name><name>hls</name><operator>-&gt;</operator><name>time</name></name> <operator>*</operator> <name>AV_TIME_BASE</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>hls</name><operator>-&gt;</operator><name>recording_time</name></name> <operator>=</operator> <name><name>hls</name><operator>-&gt;</operator><name>time</name></name> <operator>*</operator> <name>AV_TIME_BASE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>end_pts</name> <operator>=</operator> <name>init_list_dur</name> <operator>+</operator> <name>after_init_list_dur</name></expr> ;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vs</name><operator>-&gt;</operator><name>start_pts</name></name> <operator>==</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>vs</name><operator>-&gt;</operator><name>start_pts</name></name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>vs</name><operator>-&gt;</operator><name>start_pts_from_audio</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vs</name><operator>-&gt;</operator><name>start_pts_from_audio</name></name> <operator>&amp;&amp;</operator> <name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_VIDEO</name> <operator>&amp;&amp;</operator> <name><name>vs</name><operator>-&gt;</operator><name>start_pts</name></name> <operator>&gt;</operator> <name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>vs</name><operator>-&gt;</operator><name>start_pts</name></name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vs</name><operator>-&gt;</operator><name>start_pts_from_audio</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vs</name><operator>-&gt;</operator><name>has_video</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>can_split</name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_VIDEO</name> <operator>&amp;&amp;</operator>

<operator>(</operator><operator>(</operator><name><name>pkt</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PKT_FLAG_KEY</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>hls</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HLS_SPLIT_BY_TIME</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>is_ref_pkt</name> <operator>=</operator> <operator>(</operator><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_VIDEO</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pkt</name><operator>-&gt;</operator><name>stream_index</name></name> <operator>==</operator> <name><name>vs</name><operator>-&gt;</operator><name>reference_stream_index</name></name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name> <operator>==</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>is_ref_pkt</name> <operator>=</operator> <name>can_split</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>is_ref_pkt</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>vs</name><operator>-&gt;</operator><name>end_pts</name></name> <operator>==</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>vs</name><operator>-&gt;</operator><name>end_pts</name></name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vs</name><operator>-&gt;</operator><name>new_start</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>vs</name><operator>-&gt;</operator><name>new_start</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vs</name><operator>-&gt;</operator><name>duration</name></name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name> <operator>-</operator> <name><name>vs</name><operator>-&gt;</operator><name>end_pts</name></name><operator>)</operator>

<operator>*</operator> <name><name>st</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>num</name></name> <operator>/</operator> <name><name>st</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>den</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vs</name><operator>-&gt;</operator><name>dpp</name></name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><name><name>pkt</name><operator>-&gt;</operator><name>duration</name></name><operator>)</operator> <operator>*</operator> <name><name>st</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>num</name></name> <operator>/</operator> <name><name>st</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>den</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>duration</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>vs</name><operator>-&gt;</operator><name>duration</name></name> <operator>+=</operator> <operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><name><name>pkt</name><operator>-&gt;</operator><name>duration</name></name><operator>)</operator> <operator>*</operator> <name><name>st</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>num</name></name> <operator>/</operator> <name><name>st</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>den</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"pkt-&gt;duration = 0, maybe the hls segment duration will not precise\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vs</name><operator>-&gt;</operator><name>duration</name></name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name> <operator>-</operator> <name><name>vs</name><operator>-&gt;</operator><name>end_pts</name></name><operator>)</operator> <operator>*</operator> <name><name>st</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>num</name></name> <operator>/</operator> <name><name>st</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>den</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vs</name><operator>-&gt;</operator><name>packets_written</name></name> <operator>&amp;&amp;</operator> <name>can_split</name> <operator>&amp;&amp;</operator> <call><name>av_compare_ts</name><argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name> <operator>-</operator> <name><name>vs</name><operator>-&gt;</operator><name>start_pts</name></name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>,

<argument><expr><name>end_pts</name></expr></argument>, <argument><expr><name>AV_TIME_BASE_Q</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>new_start_pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>byterange_mode</name> <init>= <expr><operator>(</operator><name><name>hls</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HLS_SINGLE_FILE</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>hls</name><operator>-&gt;</operator><name>max_seg_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_write_frame</name><argument_list>(<argument><expr><name>oc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>new_start_pos</name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name><name>oc</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vs</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>new_start_pos</name> <operator>-</operator> <name><name>vs</name><operator>-&gt;</operator><name>start_pos</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_flush</name><argument_list>(<argument><expr><name><name>oc</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hls</name><operator>-&gt;</operator><name>segment_type</name></name> <operator>==</operator> <name>SEGMENT_TYPE_FMP4</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>vs</name><operator>-&gt;</operator><name>init_range_length</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>range_length</name> <operator>=</operator> <call><name>avio_close_dyn_buf</name><argument_list>(<argument><expr><name><name>oc</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name><name>vs</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>range_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vs</name><operator>-&gt;</operator><name>init_range_length</name></name> <operator>=</operator> <name>range_length</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_open_dyn_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>oc</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vs</name><operator>-&gt;</operator><name>packets_written</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vs</name><operator>-&gt;</operator><name>start_pos</name></name> <operator>=</operator> <name>range_length</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>byterange_mode</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>hlsenc_io_close</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vs</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name><name>vs</name><operator>-&gt;</operator><name>base_output_dirname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>byterange_mode</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>vs</name><operator>-&gt;</operator><name>vtt_avf</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>hlsenc_io_close</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vs</name><operator>-&gt;</operator><name>vtt_avf</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name><name>vs</name><operator>-&gt;</operator><name>vtt_avf</name><operator>-&gt;</operator><name>url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>oc</name><operator>-&gt;</operator><name>url</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>proto</name> <operator>=</operator> <call><name>avio_find_protocol_name</name><argument_list>(<argument><expr><name><name>oc</name><operator>-&gt;</operator><name>url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>use_temp_file</name> <operator>=</operator> <name>proto</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>proto</name></expr></argument>, <argument><expr><literal type="string">"file"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>hls</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HLS_TEMP_FILE</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hls</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HLS_SINGLE_FILE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>flush_dynbuf</name><argument_list>(<argument><expr><name>vs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>range_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vs</name><operator>-&gt;</operator><name>temp_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>vs</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>range_length</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>hls</name><operator>-&gt;</operator><name>max_seg_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>vs</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;=</operator> <name><name>hls</name><operator>-&gt;</operator><name>max_seg_size</name></name><operator>)</operator><operator>)</operator> <operator>||</operator> <operator>!</operator><name>byterange_mode</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>AVDictionary</name> <modifier>*</modifier></type><name>options</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>filename</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hls</name><operator>-&gt;</operator><name>key_info_file</name></name> <operator>||</operator> <name><name>hls</name><operator>-&gt;</operator><name>encrypt</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>options</name></expr></argument>, <argument><expr><literal type="string">"encryption_key"</literal></expr></argument>, <argument><expr><name><name>hls</name><operator>-&gt;</operator><name>key_string</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>options</name></expr></argument>, <argument><expr><literal type="string">"encryption_iv"</literal></expr></argument>, <argument><expr><name><name>hls</name><operator>-&gt;</operator><name>iv_string</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>filename</name> <operator>=</operator> <call><name>av_asprintf</name><argument_list>(<argument><expr><literal type="string">"crypto:%s"</literal></expr></argument>, <argument><expr><name><name>oc</name><operator>-&gt;</operator><name>url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>filename</name> <operator>=</operator> <call><name>av_asprintf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>oc</name><operator>-&gt;</operator><name>url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>filename</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_dict_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>use_temp_file</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>options</name></expr></argument>, <argument><expr><literal type="string">"mpegts_flags"</literal></expr></argument>, <argument><expr><literal type="string">"resend_headers"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>set_http_options</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>options</name></expr></argument>, <argument><expr><name>hls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>hlsenc_io_open</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vs</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>hls</name><operator>-&gt;</operator><name>ignore_io_errors</name></name></expr> ?</condition><then> <expr><name>AV_LOG_WARNING</name></expr> </then><else>: <expr><name>AV_LOG_ERROR</name></expr></else></ternary></expr></argument>,

<argument><expr><literal type="string">"Failed to open file '%s'\n"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_dict_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><name><name>hls</name><operator>-&gt;</operator><name>ignore_io_errors</name></name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>ret</name></expr></else></ternary></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hls</name><operator>-&gt;</operator><name>segment_type</name></name> <operator>==</operator> <name>SEGMENT_TYPE_FMP4</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>write_styp</name><argument_list>(<argument><expr><name><name>vs</name><operator>-&gt;</operator><name>out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>flush_dynbuf</name><argument_list>(<argument><expr><name>vs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>range_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_dict_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>hlsenc_io_close</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vs</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"upload segment failed,"</literal>

<literal type="string">" will retry with a new http session.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_format_io_close</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vs</name><operator>-&gt;</operator><name>out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>hlsenc_io_open</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vs</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reflush_dynbuf</name><argument_list>(<argument><expr><name>vs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>range_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>hlsenc_io_close</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vs</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_dict_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vs</name><operator>-&gt;</operator><name>temp_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>use_temp_file</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>hls</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HLS_SINGLE_FILE</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>hls_rename_temp_file</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>oc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>old_filename</name> <operator>=</operator> <call><name>av_strdup</name><argument_list>(<argument><expr><name><name>oc</name><operator>-&gt;</operator><name>url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>old_filename</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vs</name><operator>-&gt;</operator><name>start_pos</name></name> <operator>||</operator> <name><name>hls</name><operator>-&gt;</operator><name>segment_type</name></name> <operator>!=</operator> <name>SEGMENT_TYPE_FMP4</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>hls_append_segment</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>hls</name></expr></argument>, <argument><expr><name>vs</name></expr></argument>, <argument><expr><name><name>vs</name><operator>-&gt;</operator><name>duration</name></name></expr></argument>, <argument><expr><name><name>vs</name><operator>-&gt;</operator><name>start_pos</name></name></expr></argument>, <argument><expr><name><name>vs</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vs</name><operator>-&gt;</operator><name>end_pts</name></name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vs</name><operator>-&gt;</operator><name>duration</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>old_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hls</name><operator>-&gt;</operator><name>pl_type</name></name> <operator>!=</operator> <name>PLAYLIST_TYPE_VOD</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>hls_window</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>vs</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"upload playlist failed, will retry with a new http session.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_format_io_close</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vs</name><operator>-&gt;</operator><name>out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vs</name><operator>-&gt;</operator><name>out</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>hls_window</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>vs</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>old_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hls</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HLS_SINGLE_FILE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>vs</name><operator>-&gt;</operator><name>number</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vs</name><operator>-&gt;</operator><name>start_pos</name></name> <operator>+=</operator> <name><name>vs</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>hls</name><operator>-&gt;</operator><name>max_seg_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>vs</name><operator>-&gt;</operator><name>start_pos</name></name> <operator>=</operator> <name>new_start_pos</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vs</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;=</operator> <name><name>hls</name><operator>-&gt;</operator><name>max_seg_size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>vs</name><operator>-&gt;</operator><name>sequence</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sls_flag_file_rename</name><argument_list>(<argument><expr><name>hls</name></expr></argument>, <argument><expr><name>vs</name></expr></argument>, <argument><expr><name>old_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>hls_start</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>vs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vs</name><operator>-&gt;</operator><name>start_pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vs</name><operator>-&gt;</operator><name>number</name></name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>vs</name><operator>-&gt;</operator><name>number</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>vs</name><operator>-&gt;</operator><name>start_pos</name></name> <operator>=</operator> <name>new_start_pos</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sls_flag_file_rename</name><argument_list>(<argument><expr><name>hls</name></expr></argument>, <argument><expr><name>vs</name></expr></argument>, <argument><expr><name>old_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>hls_start</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>vs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>old_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>vs</name><operator>-&gt;</operator><name>packets_written</name></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>oc</name><operator>-&gt;</operator><name>pb</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_write_chained</name><argument_list>(<argument><expr><name>oc</name></expr></argument>, <argument><expr><name>stream_index</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vs</name><operator>-&gt;</operator><name>video_keyframe_size</name></name> <operator>+=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_VIDEO</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pkt</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PKT_FLAG_KEY</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>vs</name><operator>-&gt;</operator><name>video_keyframe_size</name></name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name><name>oc</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>vs</name><operator>-&gt;</operator><name>video_keyframe_pos</name></name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name><name>vs</name><operator>-&gt;</operator><name>out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hls</name><operator>-&gt;</operator><name>ignore_io_errors</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hls_free_variant_streams</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>HLSContext</name></name> <modifier>*</modifier></type><name>hls</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>vtt_oc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VariantStream</name> <modifier>*</modifier></type><name>vs</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>hls</name><operator>-&gt;</operator><name>nb_varstreams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>vs</name> <operator>=</operator> <operator>&amp;</operator><name><name>hls</name><operator>-&gt;</operator><name>var_streams</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>vtt_oc</name> <operator>=</operator> <name><name>vs</name><operator>-&gt;</operator><name>vtt_avf</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vs</name><operator>-&gt;</operator><name>basename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vs</name><operator>-&gt;</operator><name>base_output_dirname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vs</name><operator>-&gt;</operator><name>fmp4_init_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>vtt_oc</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vs</name><operator>-&gt;</operator><name>vtt_basename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vs</name><operator>-&gt;</operator><name>vtt_m3u8_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avformat_free_context</name><argument_list>(<argument><expr><name>vtt_oc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>avformat_free_context</name><argument_list>(<argument><expr><name><name>vs</name><operator>-&gt;</operator><name>avf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>hls_free_segments</name><argument_list>(<argument><expr><name><name>vs</name><operator>-&gt;</operator><name>segments</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>hls_free_segments</name><argument_list>(<argument><expr><name><name>vs</name><operator>-&gt;</operator><name>old_segments</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vs</name><operator>-&gt;</operator><name>m3u8_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vs</name><operator>-&gt;</operator><name>streams</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vs</name><operator>-&gt;</operator><name>agroup</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vs</name><operator>-&gt;</operator><name>language</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vs</name><operator>-&gt;</operator><name>ccgroup</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vs</name><operator>-&gt;</operator><name>baseurl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vs</name><operator>-&gt;</operator><name>varname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>hls_write_trailer</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>AVFormatContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HLSContext</name> <modifier>*</modifier></type><name>hls</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>oc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>vtt_oc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>old_filename</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>proto</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>use_temp_file</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VariantStream</name> <modifier>*</modifier></type><name>vs</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVDictionary</name> <modifier>*</modifier></type><name>options</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>range_length</name></decl>, <decl><type ref="prev"/><name>byterange_mode</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>hls</name><operator>-&gt;</operator><name>nb_varstreams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>filename</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>vs</name> <operator>=</operator> <operator>&amp;</operator><name><name>hls</name><operator>-&gt;</operator><name>var_streams</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>oc</name> <operator>=</operator> <name><name>vs</name><operator>-&gt;</operator><name>avf</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>vtt_oc</name> <operator>=</operator> <name><name>vs</name><operator>-&gt;</operator><name>vtt_avf</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>old_filename</name> <operator>=</operator> <call><name>av_strdup</name><argument_list>(<argument><expr><name><name>oc</name><operator>-&gt;</operator><name>url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>use_temp_file</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>old_filename</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hls</name><operator>-&gt;</operator><name>key_info_file</name></name> <operator>||</operator> <name><name>hls</name><operator>-&gt;</operator><name>encrypt</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>options</name></expr></argument>, <argument><expr><literal type="string">"encryption_key"</literal></expr></argument>, <argument><expr><name><name>hls</name><operator>-&gt;</operator><name>key_string</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>options</name></expr></argument>, <argument><expr><literal type="string">"encryption_iv"</literal></expr></argument>, <argument><expr><name><name>hls</name><operator>-&gt;</operator><name>iv_string</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>filename</name> <operator>=</operator> <call><name>av_asprintf</name><argument_list>(<argument><expr><literal type="string">"crypto:%s"</literal></expr></argument>, <argument><expr><name><name>oc</name><operator>-&gt;</operator><name>url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>filename</name> <operator>=</operator> <call><name>av_asprintf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>oc</name><operator>-&gt;</operator><name>url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>filename</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>old_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name><name>hls</name><operator>-&gt;</operator><name>segment_type</name></name> <operator>==</operator> <name>SEGMENT_TYPE_FMP4</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>range_length</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>vs</name><operator>-&gt;</operator><name>init_range_length</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buffer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_write_frame</name><argument_list>(<argument><expr><name>oc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>range_length</name> <operator>=</operator> <call><name>avio_close_dyn_buf</name><argument_list>(<argument><expr><name><name>oc</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name><name>vs</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>range_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vs</name><operator>-&gt;</operator><name>init_range_length</name></name> <operator>=</operator> <name>range_length</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_open_dyn_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>oc</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vs</name><operator>-&gt;</operator><name>packets_written</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vs</name><operator>-&gt;</operator><name>start_pos</name></name> <operator>=</operator> <name>range_length</name></expr>;</expr_stmt>

<expr_stmt><expr><name>byterange_mode</name> <operator>=</operator> <operator>(</operator><name><name>hls</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HLS_SINGLE_FILE</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>hls</name><operator>-&gt;</operator><name>max_seg_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>byterange_mode</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ff_format_io_close</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vs</name><operator>-&gt;</operator><name>out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>hlsenc_io_close</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vs</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name><name>vs</name><operator>-&gt;</operator><name>base_output_dirname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>hls</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HLS_SINGLE_FILE</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>set_http_options</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>options</name></expr></argument>, <argument><expr><name>hls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>hlsenc_io_open</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vs</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to open file '%s'\n"</literal></expr></argument>, <argument><expr><name><name>oc</name><operator>-&gt;</operator><name>url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>failed</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hls</name><operator>-&gt;</operator><name>segment_type</name></name> <operator>==</operator> <name>SEGMENT_TYPE_FMP4</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>write_styp</name><argument_list>(<argument><expr><name><name>vs</name><operator>-&gt;</operator><name>out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>flush_dynbuf</name><argument_list>(<argument><expr><name>vs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>range_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>failed</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>vs</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>range_length</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>hlsenc_io_close</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vs</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>hlsenc_io_close</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vs</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"upload segment failed, will retry with a new http session.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_format_io_close</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vs</name><operator>-&gt;</operator><name>out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>hlsenc_io_open</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vs</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to open file '%s'\n"</literal></expr></argument>, <argument><expr><name><name>oc</name><operator>-&gt;</operator><name>url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>failed</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>reflush_dynbuf</name><argument_list>(<argument><expr><name>vs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>range_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>hlsenc_io_close</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vs</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Failed to upload file '%s' at the end.\n"</literal></expr></argument>, <argument><expr><name><name>oc</name><operator>-&gt;</operator><name>url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vs</name><operator>-&gt;</operator><name>temp_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>failed</name>:</label>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_write_trailer</name><argument_list>(<argument><expr><name>oc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>oc</name><operator>-&gt;</operator><name>url</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>proto</name> <operator>=</operator> <call><name>avio_find_protocol_name</name><argument_list>(<argument><expr><name><name>oc</name><operator>-&gt;</operator><name>url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>use_temp_file</name> <operator>=</operator> <name>proto</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>proto</name></expr></argument>, <argument><expr><literal type="string">"file"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>hls</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HLS_TEMP_FILE</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>use_temp_file</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>hls</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HLS_SINGLE_FILE</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>hls_rename_temp_file</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>oc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>old_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>old_filename</name> <operator>=</operator> <call><name>av_strdup</name><argument_list>(<argument><expr><name><name>oc</name><operator>-&gt;</operator><name>url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>old_filename</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>hls_append_segment</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>hls</name></expr></argument>, <argument><expr><name>vs</name></expr></argument>, <argument><expr><name><name>vs</name><operator>-&gt;</operator><name>duration</name></name> <operator>+</operator> <name><name>vs</name><operator>-&gt;</operator><name>dpp</name></name></expr></argument>, <argument><expr><name><name>vs</name><operator>-&gt;</operator><name>start_pos</name></name></expr></argument>, <argument><expr><name><name>vs</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sls_flag_file_rename</name><argument_list>(<argument><expr><name>hls</name></expr></argument>, <argument><expr><name>vs</name></expr></argument>, <argument><expr><name>old_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>vtt_oc</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>vtt_oc</name><operator>-&gt;</operator><name>pb</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_write_trailer</name><argument_list>(<argument><expr><name>vtt_oc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>vs</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name><name>vs</name><operator>-&gt;</operator><name>vtt_avf</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>vs</name><operator>-&gt;</operator><name>start_pos</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_format_io_close</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vtt_oc</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>hls_window</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>vs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"upload playlist failed, will retry with a new http session.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_format_io_close</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vs</name><operator>-&gt;</operator><name>out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>hls_window</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>vs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ffio_free_dyn_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>oc</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>old_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>hls_free_variant_streams</name><argument_list>(<argument><expr><name>hls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>hls</name><operator>-&gt;</operator><name>nb_ccstreams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>ClosedCaptionsStream</name> <modifier>*</modifier></type><name>ccs</name> <init>= <expr><operator>&amp;</operator><name><name>hls</name><operator>-&gt;</operator><name>cc_streams</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ccs</name><operator>-&gt;</operator><name>ccgroup</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ccs</name><operator>-&gt;</operator><name>instreamid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ccs</name><operator>-&gt;</operator><name>language</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>ff_format_io_close</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>hls</name><operator>-&gt;</operator><name>m3u8_out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_format_io_close</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>hls</name><operator>-&gt;</operator><name>sub_m3u8_out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hls</name><operator>-&gt;</operator><name>key_basename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hls</name><operator>-&gt;</operator><name>var_streams</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hls</name><operator>-&gt;</operator><name>cc_streams</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hls</name><operator>-&gt;</operator><name>master_m3u8_url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>hls_init</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HLSContext</name> <modifier>*</modifier></type><name>hls</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pattern</name> <init>= <expr><literal type="string">"%d.ts"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VariantStream</name> <modifier>*</modifier></type><name>vs</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>basename_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pattern_localtime_fmt</name> <init>= <expr><call><name>get_default_pattern_localtime_fmt</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>vtt_pattern</name> <init>= <expr><literal type="string">"%d.vtt"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>vtt_basename_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>http_base_proto</name> <init>= <expr><call><name>ff_is_http_proto</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>url</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fmp4_init_filename_len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>hls</name><operator>-&gt;</operator><name>fmp4_init_filename</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>hls</name><operator>-&gt;</operator><name>has_default_key</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hls</name><operator>-&gt;</operator><name>has_video_m3u8</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>update_variant_stream_info</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Variant stream info update failed with status %x\n"</literal></expr></argument>,

<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hls</name><operator>-&gt;</operator><name>nb_varstreams</name></name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>hls</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HLS_PERIODIC_REKEY</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Periodic re-key not supported when more than one variant streams are present\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>hls</name><operator>-&gt;</operator><name>method</name></name> <operator>&amp;&amp;</operator> <name>http_base_proto</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hls</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"No HTTP method set, hls muxer defaulting to method PUT.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>validate_name</name><argument_list>(<argument><expr><name><name>hls</name><operator>-&gt;</operator><name>nb_varstreams</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hls</name><operator>-&gt;</operator><name>segment_filename</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>validate_name</name><argument_list>(<argument><expr><name><name>hls</name><operator>-&gt;</operator><name>nb_varstreams</name></name></expr></argument>, <argument><expr><name><name>hls</name><operator>-&gt;</operator><name>segment_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_strcasecmp</name><argument_list>(<argument><expr><name><name>hls</name><operator>-&gt;</operator><name>fmp4_init_filename</name></name></expr></argument>, <argument><expr><literal type="string">"init.mp4"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>validate_name</name><argument_list>(<argument><expr><name><name>hls</name><operator>-&gt;</operator><name>nb_varstreams</name></name></expr></argument>, <argument><expr><name><name>hls</name><operator>-&gt;</operator><name>fmp4_init_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hls</name><operator>-&gt;</operator><name>subtitle_filename</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>validate_name</name><argument_list>(<argument><expr><name><name>hls</name><operator>-&gt;</operator><name>nb_varstreams</name></name></expr></argument>, <argument><expr><name><name>hls</name><operator>-&gt;</operator><name>subtitle_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hls</name><operator>-&gt;</operator><name>master_pl_name</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>update_master_pl_info</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Master stream info update failed with status %x\n"</literal></expr></argument>,

<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hls</name><operator>-&gt;</operator><name>segment_type</name></name> <operator>==</operator> <name>SEGMENT_TYPE_FMP4</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pattern</name> <operator>=</operator> <literal type="string">"%d.m4s"</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>hls</name><operator>-&gt;</operator><name>start_sequence_source_type</name></name> <operator>==</operator> <name>HLS_START_SEQUENCE_AS_SECONDS_SINCE_EPOCH</name><operator>)</operator> <operator>||</operator>

<operator>(</operator><name><name>hls</name><operator>-&gt;</operator><name>start_sequence_source_type</name></name> <operator>==</operator> <name>HLS_START_SEQUENCE_AS_FORMATTED_DATETIME</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>time_t</name></type> <name>t</name> <init>= <expr><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>hls</name><operator>-&gt;</operator><name>start_sequence_source_type</name></name> <operator>==</operator> <name>HLS_START_SEQUENCE_AS_SECONDS_SINCE_EPOCH</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>hls</name><operator>-&gt;</operator><name>start_sequence</name></name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name>t</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>hls</name><operator>-&gt;</operator><name>start_sequence_source_type</name></name> <operator>==</operator> <name>HLS_START_SEQUENCE_AS_FORMATTED_DATETIME</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>b</name><index>[<expr><literal type="number">15</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"/><name>tmbuf</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>p</name> <operator>=</operator> <call><name>localtime_r</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmbuf</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strftime</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%Y%m%d%H%M%S"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>hls</name><operator>-&gt;</operator><name>start_sequence</name></name> <operator>=</operator> <call><name>strtoll</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>hls</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"start_number evaluated to %"</literal><name>PRId64</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>hls</name><operator>-&gt;</operator><name>start_sequence</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>hls</name><operator>-&gt;</operator><name>recording_time</name></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name><name>hls</name><operator>-&gt;</operator><name>init_time</name></name></expr> ?</condition><then> <expr><name><name>hls</name><operator>-&gt;</operator><name>init_time</name></name></expr> </then><else>: <expr><name><name>hls</name><operator>-&gt;</operator><name>time</name></name></expr></else></ternary><operator>)</operator> <operator>*</operator> <name>AV_TIME_BASE</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>hls</name><operator>-&gt;</operator><name>nb_varstreams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>vs</name> <operator>=</operator> <operator>&amp;</operator><name><name>hls</name><operator>-&gt;</operator><name>var_streams</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>format_name</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>url</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vs</name><operator>-&gt;</operator><name>m3u8_name</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>vs</name><operator>-&gt;</operator><name>varname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>vs</name><operator>-&gt;</operator><name>sequence</name></name> <operator>=</operator> <name><name>hls</name><operator>-&gt;</operator><name>start_sequence</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vs</name><operator>-&gt;</operator><name>start_pts</name></name> <operator>=</operator> <name>AV_NOPTS_VALUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vs</name><operator>-&gt;</operator><name>end_pts</name></name> <operator>=</operator> <name>AV_NOPTS_VALUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vs</name><operator>-&gt;</operator><name>current_segment_final_filename_fmt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hls</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HLS_SPLIT_BY_TIME</name> <operator>&amp;&amp;</operator> <name><name>hls</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HLS_INDEPENDENT_SEGMENTS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>hls</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>HLS_INDEPENDENT_SEGMENTS</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,

<argument><expr><literal type="string">"'split_by_time' and 'independent_segments' cannot be enabled together. "</literal>

<literal type="string">"Disabling 'independent_segments' flag\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hls</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HLS_PROGRAM_DATE_TIME</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>time_t</name></type> <name>now0</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>time</name><argument_list>(<argument><expr><operator>&amp;</operator><name>now0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vs</name><operator>-&gt;</operator><name>initial_prog_date_time</name></name> <operator>=</operator> <name>now0</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>vs</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>vs</name><operator>-&gt;</operator><name>has_video</name></name> <operator>+=</operator> <name><name>vs</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>vs</name><operator>-&gt;</operator><name>has_video</name></name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>vs</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_VIDEO</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>vs</name><operator>-&gt;</operator><name>reference_stream_index</name></name> <operator>=</operator> <name><name>vs</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>index</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>vs</name><operator>-&gt;</operator><name>has_subtitle</name></name> <operator>+=</operator> <name><name>vs</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_SUBTITLE</name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>vs</name><operator>-&gt;</operator><name>has_video</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"More than a single video stream present, expect issues decoding it.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hls</name><operator>-&gt;</operator><name>segment_type</name></name> <operator>==</operator> <name>SEGMENT_TYPE_FMP4</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>vs</name><operator>-&gt;</operator><name>oformat</name></name> <operator>=</operator> <call><name>av_guess_format</name><argument_list>(<argument><expr><literal type="string">"mp4"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>vs</name><operator>-&gt;</operator><name>oformat</name></name> <operator>=</operator> <call><name>av_guess_format</name><argument_list>(<argument><expr><literal type="string">"mpegts"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>vs</name><operator>-&gt;</operator><name>oformat</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_MUXER_NOT_FOUND</name></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vs</name><operator>-&gt;</operator><name>has_subtitle</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>vs</name><operator>-&gt;</operator><name>vtt_oformat</name></name> <operator>=</operator> <call><name>av_guess_format</name><argument_list>(<argument><expr><literal type="string">"webvtt"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>vs</name><operator>-&gt;</operator><name>vtt_oformat</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_MUXER_NOT_FOUND</name></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hls</name><operator>-&gt;</operator><name>segment_filename</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>format_name</name><argument_list>(<argument><expr><name><name>hls</name><operator>-&gt;</operator><name>segment_filename</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vs</name><operator>-&gt;</operator><name>basename</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>vs</name><operator>-&gt;</operator><name>varname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>hls</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HLS_SINGLE_FILE</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>hls</name><operator>-&gt;</operator><name>segment_type</name></name> <operator>==</operator> <name>SEGMENT_TYPE_FMP4</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pattern</name> <operator>=</operator> <literal type="string">".m4s"</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>pattern</name> <operator>=</operator> <literal type="string">".ts"</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hls</name><operator>-&gt;</operator><name>use_localtime</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>basename_size</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>vs</name><operator>-&gt;</operator><name>m3u8_name</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>pattern_localtime_fmt</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>basename_size</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>vs</name><operator>-&gt;</operator><name>m3u8_name</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>vs</name><operator>-&gt;</operator><name>basename</name></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name>basename_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>vs</name><operator>-&gt;</operator><name>basename</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_strlcpy</name><argument_list>(<argument><expr><name><name>vs</name><operator>-&gt;</operator><name>basename</name></name></expr></argument>, <argument><expr><name><name>vs</name><operator>-&gt;</operator><name>m3u8_name</name></name></expr></argument>, <argument><expr><name>basename_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>strrchr</name><argument_list>(<argument><expr><name><name>vs</name><operator>-&gt;</operator><name>basename</name></name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hls</name><operator>-&gt;</operator><name>use_localtime</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_strlcat</name><argument_list>(<argument><expr><name><name>vs</name><operator>-&gt;</operator><name>basename</name></name></expr></argument>, <argument><expr><name>pattern_localtime_fmt</name></expr></argument>, <argument><expr><name>basename_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_strlcat</name><argument_list>(<argument><expr><name><name>vs</name><operator>-&gt;</operator><name>basename</name></name></expr></argument>, <argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>basename_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hls</name><operator>-&gt;</operator><name>segment_type</name></name> <operator>==</operator> <name>SEGMENT_TYPE_FMP4</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>hls</name><operator>-&gt;</operator><name>nb_varstreams</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>fmp4_init_filename_len</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>POSTFIX_PATTERN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hls</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HLS_SINGLE_FILE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>vs</name><operator>-&gt;</operator><name>fmp4_init_filename</name></name> <operator>=</operator> <call><name>av_strdup</name><argument_list>(<argument><expr><name><name>vs</name><operator>-&gt;</operator><name>basename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>vs</name><operator>-&gt;</operator><name>fmp4_init_filename</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>vs</name><operator>-&gt;</operator><name>fmp4_init_filename</name></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name>fmp4_init_filename_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>vs</name><operator>-&gt;</operator><name>fmp4_init_filename</name></name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_strlcpy</name><argument_list>(<argument><expr><name><name>vs</name><operator>-&gt;</operator><name>fmp4_init_filename</name></name></expr></argument>, <argument><expr><name><name>hls</name><operator>-&gt;</operator><name>fmp4_init_filename</name></name></expr></argument>,

<argument><expr><name>fmp4_init_filename_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hls</name><operator>-&gt;</operator><name>nb_varstreams</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>av_stristr</name><argument_list>(<argument><expr><name><name>vs</name><operator>-&gt;</operator><name>fmp4_init_filename</name></name></expr></argument>, <argument><expr><literal type="string">"%v"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vs</name><operator>-&gt;</operator><name>fmp4_init_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>format_name</name><argument_list>(<argument><expr><name><name>hls</name><operator>-&gt;</operator><name>fmp4_init_filename</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vs</name><operator>-&gt;</operator><name>fmp4_init_filename</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>vs</name><operator>-&gt;</operator><name>varname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>append_postfix</name><argument_list>(<argument><expr><name><name>vs</name><operator>-&gt;</operator><name>fmp4_init_filename</name></name></expr></argument>, <argument><expr><name>fmp4_init_filename_len</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>fmp4_init_filename_len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>vs</name><operator>-&gt;</operator><name>m3u8_name</name></name></expr></argument>)</argument_list></call> <operator>+</operator>

<call><name>strlen</name><argument_list>(<argument><expr><name><name>vs</name><operator>-&gt;</operator><name>fmp4_init_filename</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vs</name><operator>-&gt;</operator><name>base_output_dirname</name></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name>fmp4_init_filename_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>vs</name><operator>-&gt;</operator><name>base_output_dirname</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_strlcpy</name><argument_list>(<argument><expr><name><name>vs</name><operator>-&gt;</operator><name>base_output_dirname</name></name></expr></argument>, <argument><expr><name><name>vs</name><operator>-&gt;</operator><name>m3u8_name</name></name></expr></argument>,

<argument><expr><name>fmp4_init_filename_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>strrchr</name><argument_list>(<argument><expr><name><name>vs</name><operator>-&gt;</operator><name>base_output_dirname</name></name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>p</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_strlcat</name><argument_list>(<argument><expr><name><name>vs</name><operator>-&gt;</operator><name>base_output_dirname</name></name></expr></argument>, <argument><expr><name><name>vs</name><operator>-&gt;</operator><name>fmp4_init_filename</name></name></expr></argument>,

<argument><expr><name>fmp4_init_filename_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_strlcpy</name><argument_list>(<argument><expr><name><name>vs</name><operator>-&gt;</operator><name>base_output_dirname</name></name></expr></argument>, <argument><expr><name><name>vs</name><operator>-&gt;</operator><name>fmp4_init_filename</name></name></expr></argument>,

<argument><expr><name>fmp4_init_filename_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <ternary><condition><expr><name><name>hls</name><operator>-&gt;</operator><name>use_localtime</name></name></expr> ?</condition><then> <expr><call><name>sls_flag_check_duration_size</name><argument_list>(<argument><expr><name>hls</name></expr></argument>, <argument><expr><name>vs</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>sls_flag_check_duration_size_index</name><argument_list>(<argument><expr><name>hls</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vs</name><operator>-&gt;</operator><name>has_subtitle</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>hls</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HLS_SINGLE_FILE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>vtt_pattern</name> <operator>=</operator> <literal type="string">".vtt"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>vtt_basename_size</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>vs</name><operator>-&gt;</operator><name>m3u8_name</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>vtt_pattern</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vs</name><operator>-&gt;</operator><name>vtt_basename</name></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name>vtt_basename_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>vs</name><operator>-&gt;</operator><name>vtt_basename</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_strlcpy</name><argument_list>(<argument><expr><name><name>vs</name><operator>-&gt;</operator><name>vtt_basename</name></name></expr></argument>, <argument><expr><name><name>vs</name><operator>-&gt;</operator><name>m3u8_name</name></name></expr></argument>, <argument><expr><name>vtt_basename_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>strrchr</name><argument_list>(<argument><expr><name><name>vs</name><operator>-&gt;</operator><name>vtt_basename</name></name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name><name>hls</name><operator>-&gt;</operator><name>subtitle_filename</name></name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>format_name</name><argument_list>(<argument><expr><name><name>hls</name><operator>-&gt;</operator><name>subtitle_filename</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vs</name><operator>-&gt;</operator><name>vtt_m3u8_name</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>vs</name><operator>-&gt;</operator><name>varname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>vs</name><operator>-&gt;</operator><name>vtt_m3u8_name</name></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name>vtt_basename_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>vs</name><operator>-&gt;</operator><name>vtt_m3u8_name</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>vs</name><operator>-&gt;</operator><name>vtt_m3u8_name</name></name></expr></argument>, <argument><expr><name><name>vs</name><operator>-&gt;</operator><name>vtt_basename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_strlcat</name><argument_list>(<argument><expr><name><name>vs</name><operator>-&gt;</operator><name>vtt_m3u8_name</name></name></expr></argument>, <argument><expr><literal type="string">"_vtt.m3u8"</literal></expr></argument>, <argument><expr><name>vtt_basename_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>av_strlcat</name><argument_list>(<argument><expr><name><name>vs</name><operator>-&gt;</operator><name>vtt_basename</name></name></expr></argument>, <argument><expr><name>vtt_pattern</name></expr></argument>, <argument><expr><name>vtt_basename_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hls</name><operator>-&gt;</operator><name>baseurl</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>vs</name><operator>-&gt;</operator><name>baseurl</name></name> <operator>=</operator> <call><name>av_strdup</name><argument_list>(<argument><expr><name><name>hls</name><operator>-&gt;</operator><name>baseurl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>vs</name><operator>-&gt;</operator><name>baseurl</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>hls_mux_init</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>vs</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hls</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HLS_APPEND_LIST</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>parse_playlist</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>vs</name><operator>-&gt;</operator><name>m3u8_name</name></name></expr></argument>, <argument><expr><name>vs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vs</name><operator>-&gt;</operator><name>discontinuity</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hls</name><operator>-&gt;</operator><name>init_time</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"append_list mode does not support hls_init_time,"</literal>

<literal type="string">" hls_init_time value will have no effect\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hls</name><operator>-&gt;</operator><name>init_time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hls</name><operator>-&gt;</operator><name>recording_time</name></name> <operator>=</operator> <name><name>hls</name><operator>-&gt;</operator><name>time</name></name> <operator>*</operator> <name>AV_TIME_BASE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>hls_start</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>vs</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></for>

<label><name>fail</name>:</label>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>hls_free_variant_streams</name><argument_list>(<argument><expr><name>hls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>hls</name><operator>-&gt;</operator><name>nb_ccstreams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>ClosedCaptionsStream</name> <modifier>*</modifier></type><name>ccs</name> <init>= <expr><operator>&amp;</operator><name><name>hls</name><operator>-&gt;</operator><name>cc_streams</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ccs</name><operator>-&gt;</operator><name>ccgroup</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ccs</name><operator>-&gt;</operator><name>instreamid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ccs</name><operator>-&gt;</operator><name>language</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hls</name><operator>-&gt;</operator><name>key_basename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hls</name><operator>-&gt;</operator><name>var_streams</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hls</name><operator>-&gt;</operator><name>cc_streams</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hls</name><operator>-&gt;</operator><name>master_m3u8_url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(HLSContext, x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>E</name></cpp:macro> <cpp:value>AV_OPT_FLAG_ENCODING_PARAM</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>options</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{<expr><literal type="string">"start_number"</literal></expr>, <expr><literal type="string">"set first number in the sequence"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>start_sequence</name></expr></argument>)</argument_list></call></expr>,<expr><name>AV_OPT_TYPE_INT64</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT64_MAX</name></expr>, <expr><name>E</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"hls_time"</literal></expr>, <expr><literal type="string">"set segment length in seconds"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>time</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name> <operator>=</operator> <literal type="number">2</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLT_MAX</name></expr>, <expr><name>E</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"hls_init_time"</literal></expr>, <expr><literal type="string">"set segment length in seconds at init list"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>init_time</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FLT_MAX</name></expr>, <expr><name>E</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"hls_list_size"</literal></expr>, <expr><literal type="string">"set maximum number of playlist entries"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>max_nb_segments</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">5</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>E</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"hls_delete_threshold"</literal></expr>, <expr><literal type="string">"set number of unreferenced segments to keep before deleting"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>hls_delete_threshold</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>E</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"hls_ts_options"</literal></expr>,<expr><literal type="string">"set hls mpegts list of options for the container format used for hls"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>format_options</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DICT</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name> <operator>=</operator> <name>NULL</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>E</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"hls_vtt_options"</literal></expr>,<expr><literal type="string">"set hls vtt list of options for the container format used for hls"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>vtt_format_options_str</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name> <operator>=</operator> <name>NULL</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>E</name></expr>}</block></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_HLS_WRAP</name></expr></cpp:if>

<expr><block>{<expr><literal type="string">"hls_wrap"</literal></expr>, <expr><literal type="string">"set number after which the index wraps (will be deprecated)"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>wrap</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>E</name></expr>}</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><literal type="string">"hls_allow_cache"</literal></expr>, <expr><literal type="string">"explicitly set whether the client MAY (1) or MUST NOT (0) cache media segments"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>allowcache</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>E</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"hls_base_url"</literal></expr>, <expr><literal type="string">"url to prepend to each playlist entry"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>baseurl</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name> <operator>=</operator> <name>NULL</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>E</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"hls_segment_filename"</literal></expr>, <expr><literal type="string">"filename template for segment files"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>segment_filename</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name> <operator>=</operator> <name>NULL</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>E</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"hls_segment_size"</literal></expr>, <expr><literal type="string">"maximum size per segment file, (in bytes)"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>max_seg_size</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>E</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"hls_key_info_file"</literal></expr>, <expr><literal type="string">"file with key URI and key file path"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>key_info_file</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name> <operator>=</operator> <name>NULL</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>E</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"hls_enc"</literal></expr>, <expr><literal type="string">"enable AES128 encryption support"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>encrypt</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>E</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"hls_enc_key"</literal></expr>, <expr><literal type="string">"hex-coded 16 byte key to encrypt the segments"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>E</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"hls_enc_key_url"</literal></expr>, <expr><literal type="string">"url to access the key to decrypt the segments"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>key_url</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name> <operator>=</operator> <name>NULL</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>E</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"hls_enc_iv"</literal></expr>, <expr><literal type="string">"hex-coded 16 byte initialization vector"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>iv</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>E</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"hls_subtitle_path"</literal></expr>, <expr><literal type="string">"set path of hls subtitles"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>subtitle_filename</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name> <operator>=</operator> <name>NULL</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>E</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"hls_segment_type"</literal></expr>, <expr><literal type="string">"set hls segment files type"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>segment_type</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>SEGMENT_TYPE_MPEGTS</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>SEGMENT_TYPE_FMP4</name></expr>, <expr><name>E</name></expr>, <expr><literal type="string">"segment_type"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"mpegts"</literal></expr>, <expr><literal type="string">"make segment file to mpegts files in m3u8"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>SEGMENT_TYPE_MPEGTS</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>UINT_MAX</name></expr>, <expr><name>E</name></expr>, <expr><literal type="string">"segment_type"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"fmp4"</literal></expr>, <expr><literal type="string">"make segment file to fragment mp4 files in m3u8"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>SEGMENT_TYPE_FMP4</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>UINT_MAX</name></expr>, <expr><name>E</name></expr>, <expr><literal type="string">"segment_type"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"hls_fmp4_init_filename"</literal></expr>, <expr><literal type="string">"set fragment mp4 file init filename"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>fmp4_init_filename</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name> <operator>=</operator> <literal type="string">"init.mp4"</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>E</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"hls_flags"</literal></expr>, <expr><literal type="string">"set flags affecting HLS playlist and media file generation"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLAGS</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>UINT_MAX</name></expr>, <expr><name>E</name></expr>, <expr><literal type="string">"flags"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"single_file"</literal></expr>, <expr><literal type="string">"generate a single media file indexed with byte ranges"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>HLS_SINGLE_FILE</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>UINT_MAX</name></expr>, <expr><name>E</name></expr>, <expr><literal type="string">"flags"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"temp_file"</literal></expr>, <expr><literal type="string">"write segment and playlist to temporary file and rename when complete"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>HLS_TEMP_FILE</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>UINT_MAX</name></expr>, <expr><name>E</name></expr>, <expr><literal type="string">"flags"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"delete_segments"</literal></expr>, <expr><literal type="string">"delete segment files that are no longer part of the playlist"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>HLS_DELETE_SEGMENTS</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>UINT_MAX</name></expr>, <expr><name>E</name></expr>, <expr><literal type="string">"flags"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"round_durations"</literal></expr>, <expr><literal type="string">"round durations in m3u8 to whole numbers"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>HLS_ROUND_DURATIONS</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>UINT_MAX</name></expr>, <expr><name>E</name></expr>, <expr><literal type="string">"flags"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"discont_start"</literal></expr>, <expr><literal type="string">"start the playlist with a discontinuity tag"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>HLS_DISCONT_START</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>UINT_MAX</name></expr>, <expr><name>E</name></expr>, <expr><literal type="string">"flags"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"omit_endlist"</literal></expr>, <expr><literal type="string">"Do not append an endlist when ending stream"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>HLS_OMIT_ENDLIST</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>UINT_MAX</name></expr>, <expr><name>E</name></expr>, <expr><literal type="string">"flags"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"split_by_time"</literal></expr>, <expr><literal type="string">"split the hls segment by time which user set by hls_time"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>HLS_SPLIT_BY_TIME</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>UINT_MAX</name></expr>, <expr><name>E</name></expr>, <expr><literal type="string">"flags"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"append_list"</literal></expr>, <expr><literal type="string">"append the new segments into old hls segment list"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>HLS_APPEND_LIST</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>UINT_MAX</name></expr>, <expr><name>E</name></expr>, <expr><literal type="string">"flags"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"program_date_time"</literal></expr>, <expr><literal type="string">"add EXT-X-PROGRAM-DATE-TIME"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>HLS_PROGRAM_DATE_TIME</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>UINT_MAX</name></expr>, <expr><name>E</name></expr>, <expr><literal type="string">"flags"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"second_level_segment_index"</literal></expr>, <expr><literal type="string">"include segment index in segment filenames when use_localtime"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>HLS_SECOND_LEVEL_SEGMENT_INDEX</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>UINT_MAX</name></expr>, <expr><name>E</name></expr>, <expr><literal type="string">"flags"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"second_level_segment_duration"</literal></expr>, <expr><literal type="string">"include segment duration in segment filenames when use_localtime"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>HLS_SECOND_LEVEL_SEGMENT_DURATION</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>UINT_MAX</name></expr>, <expr><name>E</name></expr>, <expr><literal type="string">"flags"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"second_level_segment_size"</literal></expr>, <expr><literal type="string">"include segment size in segment filenames when use_localtime"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>HLS_SECOND_LEVEL_SEGMENT_SIZE</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>UINT_MAX</name></expr>, <expr><name>E</name></expr>, <expr><literal type="string">"flags"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"periodic_rekey"</literal></expr>, <expr><literal type="string">"reload keyinfo file periodically for re-keying"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>HLS_PERIODIC_REKEY</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>UINT_MAX</name></expr>, <expr><name>E</name></expr>, <expr><literal type="string">"flags"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"independent_segments"</literal></expr>, <expr><literal type="string">"add EXT-X-INDEPENDENT-SEGMENTS, whenever applicable"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>HLS_INDEPENDENT_SEGMENTS</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>UINT_MAX</name></expr>, <expr><name>E</name></expr>, <expr><literal type="string">"flags"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"iframes_only"</literal></expr>, <expr><literal type="string">"add EXT-X-I-FRAMES-ONLY, whenever applicable"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>HLS_I_FRAMES_ONLY</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>UINT_MAX</name></expr>, <expr><name>E</name></expr>, <expr><literal type="string">"flags"</literal></expr>}</block></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_HLS_USE_LOCALTIME</name></expr></cpp:if>

<expr><block>{<expr><literal type="string">"use_localtime"</literal></expr>, <expr><literal type="string">"set filename expansion with strftime at segment creation(will be deprecated )"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>use_localtime</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>E</name></expr> }</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><literal type="string">"strftime"</literal></expr>, <expr><literal type="string">"set filename expansion with strftime at segment creation"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>use_localtime</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>E</name></expr> }</block></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_HLS_USE_LOCALTIME</name></expr></cpp:if>

<expr><block>{<expr><literal type="string">"use_localtime_mkdir"</literal></expr>, <expr><literal type="string">"create last directory component in strftime-generated filename(will be deprecated)"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>use_localtime_mkdir</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>E</name></expr> }</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><literal type="string">"strftime_mkdir"</literal></expr>, <expr><literal type="string">"create last directory component in strftime-generated filename"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>use_localtime_mkdir</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>E</name></expr> }</block></expr>,

<expr><block>{<expr><literal type="string">"hls_playlist_type"</literal></expr>, <expr><literal type="string">"set the HLS playlist type"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>pl_type</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>PLAYLIST_TYPE_NONE</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>PLAYLIST_TYPE_NB</name><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>E</name></expr>, <expr><literal type="string">"pl_type"</literal></expr> }</block></expr>,

<expr><block>{<expr><literal type="string">"event"</literal></expr>, <expr><literal type="string">"EVENT playlist"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>PLAYLIST_TYPE_EVENT</name></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>E</name></expr>, <expr><literal type="string">"pl_type"</literal></expr> }</block></expr>,

<expr><block>{<expr><literal type="string">"vod"</literal></expr>, <expr><literal type="string">"VOD playlist"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>PLAYLIST_TYPE_VOD</name></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>E</name></expr>, <expr><literal type="string">"pl_type"</literal></expr> }</block></expr>,

<expr><block>{<expr><literal type="string">"method"</literal></expr>, <expr><literal type="string">"set the HTTP method(default: PUT)"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>method</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name> <operator>=</operator> <name>NULL</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>E</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"hls_start_number_source"</literal></expr>, <expr><literal type="string">"set source of first number in sequence"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>start_sequence_source_type</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>HLS_START_SEQUENCE_AS_START_NUMBER</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>HLS_START_SEQUENCE_AS_FORMATTED_DATETIME</name></expr>, <expr><name>E</name></expr>, <expr><literal type="string">"start_sequence_source_type"</literal></expr> }</block></expr>,

<expr><block>{<expr><literal type="string">"generic"</literal></expr>, <expr><literal type="string">"start_number value (default)"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>HLS_START_SEQUENCE_AS_START_NUMBER</name></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>E</name></expr>, <expr><literal type="string">"start_sequence_source_type"</literal></expr> }</block></expr>,

<expr><block>{<expr><literal type="string">"epoch"</literal></expr>, <expr><literal type="string">"seconds since epoch"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>HLS_START_SEQUENCE_AS_SECONDS_SINCE_EPOCH</name></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>E</name></expr>, <expr><literal type="string">"start_sequence_source_type"</literal></expr> }</block></expr>,

<expr><block>{<expr><literal type="string">"datetime"</literal></expr>, <expr><literal type="string">"current datetime as YYYYMMDDhhmmss"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>HLS_START_SEQUENCE_AS_FORMATTED_DATETIME</name></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>E</name></expr>, <expr><literal type="string">"start_sequence_source_type"</literal></expr> }</block></expr>,

<expr><block>{<expr><literal type="string">"http_user_agent"</literal></expr>, <expr><literal type="string">"override User-Agent field in HTTP header"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>user_agent</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name> <operator>=</operator> <name>NULL</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>E</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"var_stream_map"</literal></expr>, <expr><literal type="string">"Variant stream map string"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>var_stream_map</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name> <operator>=</operator> <name>NULL</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>E</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"cc_stream_map"</literal></expr>, <expr><literal type="string">"Closed captions stream map string"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>cc_stream_map</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name> <operator>=</operator> <name>NULL</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>E</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"master_pl_name"</literal></expr>, <expr><literal type="string">"Create HLS master playlist with this name"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>master_pl_name</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name> <operator>=</operator> <name>NULL</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>E</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"master_pl_publish_rate"</literal></expr>, <expr><literal type="string">"Publish master play list every after this many segment intervals"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>master_publish_rate</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>UINT_MAX</name></expr>, <expr><name>E</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"http_persistent"</literal></expr>, <expr><literal type="string">"Use persistent HTTP connections"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>http_persistent</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>E</name></expr> }</block></expr>,

<expr><block>{<expr><literal type="string">"timeout"</literal></expr>, <expr><literal type="string">"set timeout for socket I/O operations"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DURATION</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>E</name></expr> }</block></expr>,

<expr><block>{<expr><literal type="string">"ignore_io_errors"</literal></expr>, <expr><literal type="string">"Ignore IO errors for stable long-duration runs with network output"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>ignore_io_errors</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>E</name></expr> }</block></expr>,

<expr><block>{<expr><literal type="string">"headers"</literal></expr>, <expr><literal type="string">"set custom HTTP headers, can override built in default headers"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>headers</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{ <expr><operator>.</operator><name>str</name> <operator>=</operator> <name>NULL</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>E</name></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>hls_class</name> <init>= <expr><block>{

<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"hls muxer"</literal></expr>,

<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,

<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>options</name></expr>,

<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVOutputFormat</name></type> <name>ff_hls_muxer</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"hls"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Apple HTTP Live Streaming"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>extensions</name> <operator>=</operator> <literal type="string">"m3u8"</literal></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>HLSContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>audio_codec</name> <operator>=</operator> <name>AV_CODEC_ID_AAC</name></expr>,

<expr><operator>.</operator><name>video_codec</name> <operator>=</operator> <name>AV_CODEC_ID_H264</name></expr>,

<expr><operator>.</operator><name>subtitle_codec</name> <operator>=</operator> <name>AV_CODEC_ID_WEBVTT</name></expr>,

<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>AVFMT_NOFILE</name> <operator>|</operator> <name>AVFMT_GLOBALHEADER</name> <operator>|</operator> <name>AVFMT_ALLOW_FLUSH</name> <operator>|</operator> <name>AVFMT_NODIMENSIONS</name></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>hls_init</name></expr>,

<expr><operator>.</operator><name>write_header</name> <operator>=</operator> <name>hls_write_header</name></expr>,

<expr><operator>.</operator><name>write_packet</name> <operator>=</operator> <name>hls_write_packet</name></expr>,

<expr><operator>.</operator><name>write_trailer</name> <operator>=</operator> <name>hls_write_trailer</name></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>hls_class</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
