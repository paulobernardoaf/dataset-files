<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavformat\librtmp.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avstring.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mathematics.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avformat.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_NETWORK</name></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"network.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"url.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;librtmp/rtmp.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;librtmp/log.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>LibRTMPContext</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RTMP</name></type> <name>rtmp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>app</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>conn</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>subscribe</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>playpath</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tcurl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>flashver</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>swfurl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>swfverify</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pageurl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>client_buffer_time</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>live</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>temp_filename</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>buffer_size</name></decl>;</decl_stmt>

}</block></struct></type> <name>LibRTMPContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>rtmp_log</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name>level</name></expr>)</condition> <block>{<block_content>

<default>default:</default>

<case>case <expr><name>RTMP_LOGCRIT</name></expr>:</case> <expr_stmt><expr><name>level</name> <operator>=</operator> <name>AV_LOG_FATAL</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>RTMP_LOGERROR</name></expr>:</case> <expr_stmt><expr><name>level</name> <operator>=</operator> <name>AV_LOG_ERROR</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>RTMP_LOGWARNING</name></expr>:</case> <expr_stmt><expr><name>level</name> <operator>=</operator> <name>AV_LOG_WARNING</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>RTMP_LOGINFO</name></expr>:</case> <expr_stmt><expr><name>level</name> <operator>=</operator> <name>AV_LOG_INFO</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>RTMP_LOGDEBUG</name></expr>:</case> <expr_stmt><expr><name>level</name> <operator>=</operator> <name>AV_LOG_VERBOSE</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>RTMP_LOGDEBUG2</name></expr>:</case> <expr_stmt><expr><name>level</name> <operator>=</operator> <name>AV_LOG_DEBUG</name></expr>;</expr_stmt> <break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>av_vlog</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rtmp_close</name><parameter_list>(<parameter><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>LibRTMPContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>rtmp</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>RTMP_Close</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>temp_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rtmp_open</name><parameter_list>(<parameter><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>uri</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>LibRTMPContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>rtmp</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>level</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>filename</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>filename</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><call><name>av_log_get_level</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<default>default:</default>

<case>case <expr><name>AV_LOG_FATAL</name></expr>:</case> <expr_stmt><expr><name>level</name> <operator>=</operator> <name>RTMP_LOGCRIT</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>AV_LOG_ERROR</name></expr>:</case> <expr_stmt><expr><name>level</name> <operator>=</operator> <name>RTMP_LOGERROR</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>AV_LOG_WARNING</name></expr>:</case> <expr_stmt><expr><name>level</name> <operator>=</operator> <name>RTMP_LOGWARNING</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>AV_LOG_INFO</name></expr>:</case> <expr_stmt><expr><name>level</name> <operator>=</operator> <name>RTMP_LOGINFO</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>AV_LOG_VERBOSE</name></expr>:</case> <expr_stmt><expr><name>level</name> <operator>=</operator> <name>RTMP_LOGDEBUG</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>AV_LOG_DEBUG</name></expr>:</case> <expr_stmt><expr><name>level</name> <operator>=</operator> <name>RTMP_LOGDEBUG2</name></expr>;</expr_stmt> <break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>RTMP_LogSetLevel</name><argument_list>(<argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RTMP_LogSetCallback</name><argument_list>(<argument><expr><name>rtmp_log</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>app</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>app</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><literal type="string">" app="</literal></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>tcurl</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>tcurl</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><literal type="string">" tcUrl="</literal></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>pageurl</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pageurl</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><literal type="string">" pageUrl="</literal></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>flashver</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>flashver</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><literal type="string">" flashver="</literal></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>conn</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>sep</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>conn</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>options</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>options</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <call><name>strspn</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>sep</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sep</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>sep</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<break>break;</break></block_content></block></else></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>len</name> <operator>+=</operator> <name>options</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><literal type="string">" conn="</literal></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>playpath</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>playpath</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><literal type="string">" playpath="</literal></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>live</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><literal type="string">" live=1"</literal></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>subscribe</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>subscribe</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><literal type="string">" subscribe="</literal></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>client_buffer_time</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>client_buffer_time</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><literal type="string">" buffer="</literal></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>swfurl</name></name> <operator>||</operator> <name><name>ctx</name><operator>-&gt;</operator><name>swfverify</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><literal type="string">" swfUrl="</literal></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>swfverify</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>swfverify</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><literal type="string">" swfVfy=1"</literal></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>swfurl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>temp_filename</name></name> <operator>=</operator> <name>filename</name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_strlcpy</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>app</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_strlcat</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">" app="</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_strlcat</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>app</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>tcurl</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_strlcat</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">" tcUrl="</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_strlcat</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>tcurl</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>pageurl</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_strlcat</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">" pageUrl="</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_strlcat</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pageurl</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>swfurl</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_strlcat</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">" swfUrl="</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_strlcat</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>swfurl</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>flashver</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_strlcat</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">" flashVer="</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_strlcat</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>flashver</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>conn</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>sep</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>conn</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_strlcat</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">" conn="</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <call><name>strspn</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>sep</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sep</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>sep</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_strlcat</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sep</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>sep</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<break>break;</break></block_content></block></else></if_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>playpath</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_strlcat</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">" playpath="</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_strlcat</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>playpath</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>live</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_strlcat</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">" live=1"</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>subscribe</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_strlcat</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">" subscribe="</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_strlcat</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>subscribe</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>client_buffer_time</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_strlcat</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">" buffer="</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_strlcat</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>client_buffer_time</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>swfurl</name></name> <operator>||</operator> <name><name>ctx</name><operator>-&gt;</operator><name>swfverify</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_strlcat</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">" swfUrl="</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>swfverify</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_strlcat</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>swfverify</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_strlcat</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">" swfVfy=1"</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_strlcat</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>swfurl</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>RTMP_Init</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>RTMP_SetupURL</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>AVERROR_UNKNOWN</name></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>AVIO_FLAG_WRITE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>RTMP_EnableWrite</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>RTMP_Connect</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>RTMP_ConnectStream</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>AVERROR_UNKNOWN</name></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_NETWORK</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>buffer_size</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>AVIO_FLAG_WRITE</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>tmp</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>buffer_size</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>setsockopt</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>m_sb</name><operator>.</operator><name>sb_socket</name></name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>SO_SNDBUF</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>AVERROR_EXTERNAL</name></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>is_streamed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>temp_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>RTMP_Close</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>rc</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rtmp_write</name><parameter_list>(<parameter><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>LibRTMPContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>rtmp</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>RTMP_Write</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_EOF</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rtmp_read</name><parameter_list>(<parameter><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>LibRTMPContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>rtmp</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>RTMP_Read</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_EOF</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rtmp_read_pause</name><parameter_list>(<parameter><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pause</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>LibRTMPContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>rtmp</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>RTMP_Pause</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>pause</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_UNKNOWN</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64_t</name></type> <name>rtmp_read_seek</name><parameter_list>(<parameter><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stream_index</name></decl></parameter>,

<parameter><decl><type><name>int64_t</name></type> <name>timestamp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>LibRTMPContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>rtmp</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>AVSEEK_FLAG_BYTE</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>stream_index</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>timestamp</name> <operator>=</operator> <call><name>av_rescale_rnd</name><argument_list>(<argument><expr><name>timestamp</name></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>, <argument><expr><name>AV_TIME_BASE</name></expr></argument>,

<argument><expr><ternary><condition><expr><name>flags</name> <operator>&amp;</operator> <name>AVSEEK_FLAG_BACKWARD</name></expr> ?</condition><then> <expr><name>AV_ROUND_DOWN</name></expr> </then><else>: <expr><name>AV_ROUND_UP</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>RTMP_SendSeek</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_UNKNOWN</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>timestamp</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rtmp_get_file_handle</name><parameter_list>(<parameter><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>LibRTMPContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RTMP</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>rtmp</name></name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>RTMP_Socket</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(LibRTMPContext, x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEC</name></cpp:macro> <cpp:value>AV_OPT_FLAG_DECODING_PARAM</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC</name></cpp:macro> <cpp:value>AV_OPT_FLAG_ENCODING_PARAM</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>options</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{<expr><literal type="string">"rtmp_app"</literal></expr>, <expr><literal type="string">"Name of application to connect to on the RTMP server"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>app</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name> <operator>=</operator> <name>NULL</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>DEC</name><operator>|</operator><name>ENC</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"rtmp_buffer"</literal></expr>, <expr><literal type="string">"Set buffer time in milliseconds. The default is 3000."</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>client_buffer_time</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name> <operator>=</operator> <literal type="string">"3000"</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>DEC</name><operator>|</operator><name>ENC</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"rtmp_conn"</literal></expr>, <expr><literal type="string">"Append arbitrary AMF data to the Connect message"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name> <operator>=</operator> <name>NULL</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>DEC</name><operator>|</operator><name>ENC</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"rtmp_flashver"</literal></expr>, <expr><literal type="string">"Version of the Flash plugin used to run the SWF player."</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>flashver</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name> <operator>=</operator> <name>NULL</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>DEC</name><operator>|</operator><name>ENC</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"rtmp_live"</literal></expr>, <expr><literal type="string">"Specify that the media is a live stream."</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>live</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>DEC</name></expr>, <expr><literal type="string">"rtmp_live"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"any"</literal></expr>, <expr><literal type="string">"both"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">2</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>DEC</name></expr>, <expr><literal type="string">"rtmp_live"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"live"</literal></expr>, <expr><literal type="string">"live stream"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>DEC</name></expr>, <expr><literal type="string">"rtmp_live"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"recorded"</literal></expr>, <expr><literal type="string">"recorded stream"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>DEC</name></expr>, <expr><literal type="string">"rtmp_live"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"rtmp_pageurl"</literal></expr>, <expr><literal type="string">"URL of the web page in which the media was embedded. By default no value will be sent."</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>pageurl</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name> <operator>=</operator> <name>NULL</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>DEC</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"rtmp_playpath"</literal></expr>, <expr><literal type="string">"Stream identifier to play or to publish"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>playpath</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name> <operator>=</operator> <name>NULL</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>DEC</name><operator>|</operator><name>ENC</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"rtmp_subscribe"</literal></expr>, <expr><literal type="string">"Name of live stream to subscribe to. Defaults to rtmp_playpath."</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>subscribe</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name> <operator>=</operator> <name>NULL</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>DEC</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"rtmp_swfurl"</literal></expr>, <expr><literal type="string">"URL of the SWF player. By default no value will be sent"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>swfurl</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name> <operator>=</operator> <name>NULL</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>DEC</name><operator>|</operator><name>ENC</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"rtmp_swfverify"</literal></expr>, <expr><literal type="string">"URL to player swf file, compute hash/size automatically. (unimplemented)"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>swfverify</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name> <operator>=</operator> <name>NULL</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>DEC</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"rtmp_tcurl"</literal></expr>, <expr><literal type="string">"URL of the target stream. Defaults to proto://host[:port]/app."</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>tcurl</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name> <operator>=</operator> <name>NULL</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>DEC</name><operator>|</operator><name>ENC</name></expr>}</block></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_NETWORK</name></expr></cpp:if>

<expr><block>{<expr><literal type="string">"rtmp_buffer_size"</literal></expr>, <expr><literal type="string">"set buffer size in bytes"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>buffer_size</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>DEC</name><operator>|</operator><name>ENC</name></expr> }</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RTMP_CLASS</name><parameter_list>(<parameter><type><name>flavor</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>static const AVClass lib ##flavor ##_class = {.class_name = "lib" #flavor " protocol",.item_name = av_default_item_name,.option = options,.version = LIBAVUTIL_VERSION_INT,};</cpp:value></cpp:define>

<macro><name>RTMP_CLASS</name><argument_list>(<argument>rtmp</argument>)</argument_list></macro>

<decl_stmt><decl><type><specifier>const</specifier> <name>URLProtocol</name></type> <name>ff_librtmp_protocol</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"rtmp"</literal></expr>,

<expr><operator>.</operator><name>url_open</name> <operator>=</operator> <name>rtmp_open</name></expr>,

<expr><operator>.</operator><name>url_read</name> <operator>=</operator> <name>rtmp_read</name></expr>,

<expr><operator>.</operator><name>url_write</name> <operator>=</operator> <name>rtmp_write</name></expr>,

<expr><operator>.</operator><name>url_close</name> <operator>=</operator> <name>rtmp_close</name></expr>,

<expr><operator>.</operator><name>url_read_pause</name> <operator>=</operator> <name>rtmp_read_pause</name></expr>,

<expr><operator>.</operator><name>url_read_seek</name> <operator>=</operator> <name>rtmp_read_seek</name></expr>,

<expr><operator>.</operator><name>url_get_file_handle</name> <operator>=</operator> <name>rtmp_get_file_handle</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>LibRTMPContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>priv_data_class</name> <operator>=</operator> <operator>&amp;</operator><name>librtmp_class</name></expr>,

<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>URL_PROTOCOL_FLAG_NETWORK</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<macro><name>RTMP_CLASS</name><argument_list>(<argument>rtmpt</argument>)</argument_list></macro>

<decl_stmt><decl><type><specifier>const</specifier> <name>URLProtocol</name></type> <name>ff_librtmpt_protocol</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"rtmpt"</literal></expr>,

<expr><operator>.</operator><name>url_open</name> <operator>=</operator> <name>rtmp_open</name></expr>,

<expr><operator>.</operator><name>url_read</name> <operator>=</operator> <name>rtmp_read</name></expr>,

<expr><operator>.</operator><name>url_write</name> <operator>=</operator> <name>rtmp_write</name></expr>,

<expr><operator>.</operator><name>url_close</name> <operator>=</operator> <name>rtmp_close</name></expr>,

<expr><operator>.</operator><name>url_read_pause</name> <operator>=</operator> <name>rtmp_read_pause</name></expr>,

<expr><operator>.</operator><name>url_read_seek</name> <operator>=</operator> <name>rtmp_read_seek</name></expr>,

<expr><operator>.</operator><name>url_get_file_handle</name> <operator>=</operator> <name>rtmp_get_file_handle</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>LibRTMPContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>priv_data_class</name> <operator>=</operator> <operator>&amp;</operator><name>librtmpt_class</name></expr>,

<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>URL_PROTOCOL_FLAG_NETWORK</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<macro><name>RTMP_CLASS</name><argument_list>(<argument>rtmpe</argument>)</argument_list></macro>

<decl_stmt><decl><type><specifier>const</specifier> <name>URLProtocol</name></type> <name>ff_librtmpe_protocol</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"rtmpe"</literal></expr>,

<expr><operator>.</operator><name>url_open</name> <operator>=</operator> <name>rtmp_open</name></expr>,

<expr><operator>.</operator><name>url_read</name> <operator>=</operator> <name>rtmp_read</name></expr>,

<expr><operator>.</operator><name>url_write</name> <operator>=</operator> <name>rtmp_write</name></expr>,

<expr><operator>.</operator><name>url_close</name> <operator>=</operator> <name>rtmp_close</name></expr>,

<expr><operator>.</operator><name>url_read_pause</name> <operator>=</operator> <name>rtmp_read_pause</name></expr>,

<expr><operator>.</operator><name>url_read_seek</name> <operator>=</operator> <name>rtmp_read_seek</name></expr>,

<expr><operator>.</operator><name>url_get_file_handle</name> <operator>=</operator> <name>rtmp_get_file_handle</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>LibRTMPContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>priv_data_class</name> <operator>=</operator> <operator>&amp;</operator><name>librtmpe_class</name></expr>,

<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>URL_PROTOCOL_FLAG_NETWORK</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<macro><name>RTMP_CLASS</name><argument_list>(<argument>rtmpte</argument>)</argument_list></macro>

<decl_stmt><decl><type><specifier>const</specifier> <name>URLProtocol</name></type> <name>ff_librtmpte_protocol</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"rtmpte"</literal></expr>,

<expr><operator>.</operator><name>url_open</name> <operator>=</operator> <name>rtmp_open</name></expr>,

<expr><operator>.</operator><name>url_read</name> <operator>=</operator> <name>rtmp_read</name></expr>,

<expr><operator>.</operator><name>url_write</name> <operator>=</operator> <name>rtmp_write</name></expr>,

<expr><operator>.</operator><name>url_close</name> <operator>=</operator> <name>rtmp_close</name></expr>,

<expr><operator>.</operator><name>url_read_pause</name> <operator>=</operator> <name>rtmp_read_pause</name></expr>,

<expr><operator>.</operator><name>url_read_seek</name> <operator>=</operator> <name>rtmp_read_seek</name></expr>,

<expr><operator>.</operator><name>url_get_file_handle</name> <operator>=</operator> <name>rtmp_get_file_handle</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>LibRTMPContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>priv_data_class</name> <operator>=</operator> <operator>&amp;</operator><name>librtmpte_class</name></expr>,

<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>URL_PROTOCOL_FLAG_NETWORK</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<macro><name>RTMP_CLASS</name><argument_list>(<argument>rtmps</argument>)</argument_list></macro>

<decl_stmt><decl><type><specifier>const</specifier> <name>URLProtocol</name></type> <name>ff_librtmps_protocol</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"rtmps"</literal></expr>,

<expr><operator>.</operator><name>url_open</name> <operator>=</operator> <name>rtmp_open</name></expr>,

<expr><operator>.</operator><name>url_read</name> <operator>=</operator> <name>rtmp_read</name></expr>,

<expr><operator>.</operator><name>url_write</name> <operator>=</operator> <name>rtmp_write</name></expr>,

<expr><operator>.</operator><name>url_close</name> <operator>=</operator> <name>rtmp_close</name></expr>,

<expr><operator>.</operator><name>url_read_pause</name> <operator>=</operator> <name>rtmp_read_pause</name></expr>,

<expr><operator>.</operator><name>url_read_seek</name> <operator>=</operator> <name>rtmp_read_seek</name></expr>,

<expr><operator>.</operator><name>url_get_file_handle</name> <operator>=</operator> <name>rtmp_get_file_handle</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>LibRTMPContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>priv_data_class</name> <operator>=</operator> <operator>&amp;</operator><name>librtmps_class</name></expr>,

<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>URL_PROTOCOL_FLAG_NETWORK</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
