<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavformat\lrcenc.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avformat.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lrc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"metadata.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"subtitles.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"version.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/bprint.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/dict.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/log.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/macros.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>int</name></type> <name>lrc_write_header</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVDictionaryEntry</name> <modifier>*</modifier></type><name>metadata_item</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name> <operator>!=</operator> <literal type="number">1</literal> <operator>||</operator>

<name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>!=</operator> <name>AVMEDIA_TYPE_SUBTITLE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"LRC supports only a single subtitle stream.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>!=</operator> <name>AV_CODEC_ID_SUBRIP</name> <operator>&amp;&amp;</operator>

<name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>!=</operator> <name>AV_CODEC_ID_TEXT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unsupported subtitle codec: %s\n"</literal></expr></argument>,

<argument><expr><call><name>avcodec_get_name</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>avpriv_set_pts_info</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_standardize_creation_time</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_metadata_conv_ctx</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>ff_lrc_metadata_conv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AVFMT_FLAG_BITEXACT</name><operator>)</operator></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><literal type="string">"ve"</literal></expr></argument>, <argument><expr><call><name>AV_STRINGIFY</name><argument_list>(<argument><expr><name>LIBAVFORMAT_VERSION</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><literal type="string">"ve"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<for>for<control>(<init><expr><name>metadata_item</name> <operator>=</operator> <name>NULL</name></expr>;</init>

<condition><expr><operator>(</operator><name>metadata_item</name> <operator>=</operator> <call><name>av_dict_get</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>metadata_item</name></expr></argument>,

<argument><expr><name>AV_DICT_IGNORE_SUFFIX</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</condition><incr/>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>delim</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>metadata_item</name><operator>-&gt;</operator><name>value</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<while>while<condition>(<expr><operator>(</operator><name>delim</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name><name>metadata_item</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>delim</name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<while>while<condition>(<expr><operator>(</operator><name>delim</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name><name>metadata_item</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><literal type="char">'\r'</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>delim</name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>avio_printf</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="string">"[%s:%s]\n"</literal></expr></argument>,

<argument><expr><name><name>metadata_item</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>metadata_item</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>avio_printf</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>lrc_write_packet</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>av_malloc</name><argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>delim</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>data</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>delim</name> <operator>=</operator> <name>data</name> <operator>+</operator> <name><name>pkt</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</init>

<condition><expr><name>delim</name> <operator>&gt;=</operator> <name>data</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>delim</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>||</operator> <name><name>delim</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\r'</literal><operator>)</operator></expr>;</condition> <incr><expr><name>delim</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>delim</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt> 

</block_content>}</block></for>

<expr_stmt><expr><name>line</name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

<while>while<condition>(<expr><name><name>line</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>||</operator> <name><name>line</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\r'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>line</name><operator>++</operator></expr>;</expr_stmt> 

</block_content>}</block></while>

<while>while<condition>(<expr><name>line</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>delim</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>delim</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>delim</name> <operator>&gt;</operator> <name>line</name> <operator>&amp;&amp;</operator> <name><name>delim</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\r'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>delim</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>delim</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>delim</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>line</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'['</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,

<argument><expr><literal type="string">"Subtitle starts with '[', may cause problems with LRC format.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avio_printf</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="string">"[%02"</literal><name>PRId64</name><literal type="string">":%02"</literal><name>PRId64</name><literal type="string">".%02"</literal><name>PRId64</name><literal type="string">"]"</literal></expr></argument>,

<argument><expr><operator>(</operator><name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name> <operator>/</operator> <literal type="number">6000</literal><operator>)</operator></expr></argument>,

<argument><expr><operator>(</operator><operator>(</operator><name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name> <operator>/</operator> <literal type="number">100</literal><operator>)</operator> <operator>%</operator> <literal type="number">60</literal><operator>)</operator></expr></argument>,

<argument><expr><operator>(</operator><name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name> <operator>%</operator> <literal type="number">100</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>avio_printf</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="string">"[-%02"</literal><name>PRId64</name><literal type="string">":%02"</literal><name>PRId64</name><literal type="string">".%02"</literal><name>PRId64</name><literal type="string">"]"</literal></expr></argument>,

<argument><expr><operator>(</operator><operator>-</operator><name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name><operator>)</operator> <operator>/</operator> <literal type="number">6000</literal></expr></argument>,

<argument><expr><operator>(</operator><operator>(</operator><operator>-</operator><name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name><operator>)</operator> <operator>/</operator> <literal type="number">100</literal><operator>)</operator> <operator>%</operator> <literal type="number">60</literal></expr></argument>,

<argument><expr><operator>(</operator><operator>-</operator><name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name><operator>)</operator> <operator>%</operator> <literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>avio_printf</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>line</name> <operator>=</operator> <name>delim</name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name>AVOutputFormat</name></type> <name>ff_lrc_muxer</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"lrc"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"LRC lyrics"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>extensions</name> <operator>=</operator> <literal type="string">"lrc"</literal></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <literal type="number">0</literal></expr>,

<expr><operator>.</operator><name>write_header</name> <operator>=</operator> <name>lrc_write_header</name></expr>,

<expr><operator>.</operator><name>write_packet</name> <operator>=</operator> <name>lrc_write_packet</name></expr>,

<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>AVFMT_VARIABLE_FPS</name> <operator>|</operator> <name>AVFMT_GLOBALHEADER</name> <operator>|</operator>

<name>AVFMT_TS_NEGATIVE</name> <operator>|</operator> <name>AVFMT_TS_NONSTRICT</name></expr>,

<expr><operator>.</operator><name>subtitle_codec</name> <operator>=</operator> <name>AV_CODEC_ID_SUBRIP</name></expr>

}</block></expr></init></decl>;</decl_stmt>

</unit>
