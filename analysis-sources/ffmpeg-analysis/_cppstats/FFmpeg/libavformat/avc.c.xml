<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavformat\avc.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/h264.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/get_bits.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avformat.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avio.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avio_internal.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>ff_avc_find_startcode_internal</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>end</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>a</name> <init>= <expr><name>p</name> <operator>+</operator> <literal type="number">4</literal> <operator>-</operator> <operator>(</operator><operator>(</operator><name>intptr_t</name><operator>)</operator><name>p</name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>end</name> <operator>-=</operator> <literal type="number">3</literal></expr>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>a</name> <operator>&amp;&amp;</operator> <name>p</name> <operator>&lt;</operator> <name>end</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>p</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>end</name> <operator>-=</operator> <literal type="number">3</literal></expr>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>end</name></expr>;</condition> <incr><expr><name>p</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>x</name> <init>= <expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>uint32_t</name><operator>*</operator><operator>)</operator><name>p</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>x</name> <operator>-</operator> <literal type="number">0x01010101</literal><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><operator>~</operator><name>x</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x80808080</literal></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>p</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>p</name><operator>+</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>p</name><operator>+</operator><literal type="number">2</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>p</name><operator>+</operator><literal type="number">3</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>end</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>end</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>p</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>end</name> <operator>+</operator> <literal type="number">3</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>ff_avc_find_startcode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>end</name></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>out</name><init>= <expr><call><name>ff_avc_find_startcode_internal</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>p</name><operator>&lt;</operator><name>out</name> <operator>&amp;&amp;</operator> <name>out</name><operator>&lt;</operator><name>end</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>out</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>out</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>out</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_avc_parse_nal_units</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf_in</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>buf_in</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><name>p</name> <operator>+</operator> <name>size</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>nal_start</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>nal_end</name></decl>;</decl_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>nal_start</name> <operator>=</operator> <call><name>ff_avc_find_startcode</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<while>while <condition>(<expr><name>nal_start</name> <operator>&lt;</operator> <name>end</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>*</operator><operator>(</operator><name>nal_start</name><operator>++</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><name>nal_start</name> <operator>==</operator> <name>end</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>nal_end</name> <operator>=</operator> <call><name>ff_avc_find_startcode</name><argument_list>(<argument><expr><name>nal_start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>nal_end</name> <operator>-</operator> <name>nal_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>nal_start</name></expr></argument>, <argument><expr><name>nal_end</name> <operator>-</operator> <name>nal_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <literal type="number">4</literal> <operator>+</operator> <name>nal_end</name> <operator>-</operator> <name>nal_start</name></expr>;</expr_stmt>

<expr_stmt><expr><name>nal_start</name> <operator>=</operator> <name>nal_end</name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>size</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_avc_parse_nal_units_buf</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf_in</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>avio_open_dyn_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ff_avc_parse_nal_units</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>buf_in</name></expr></argument>, <argument><expr><operator>*</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <call><name>avio_close_dyn_buf</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_isom_write_avcc</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>sps_pb</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pps_pb</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>sps_ext_pb</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>end</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>start</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>sps</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pps</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>sps_ext</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>sps_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>pps_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>sps_ext_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>nb_sps</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>nb_pps</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>nb_sps_ext</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;=</operator> <literal type="number">6</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>AV_RB32</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0x00000001</literal> <operator>&amp;&amp;</operator>

<call><name>AV_RB24</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0x000001</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_avc_parse_nal_units_buf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>start</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

<expr_stmt><expr><name>end</name> <operator>=</operator> <name>buf</name> <operator>+</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avio_open_dyn_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sps_pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avio_open_dyn_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pps_pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avio_open_dyn_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sps_ext_pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name>end</name> <operator>-</operator> <name>buf</name> <operator>&gt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>nal_type</name></decl>;</decl_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><call><name>AV_RB32</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>end</name> <operator>-</operator> <name>buf</name> <operator>-</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>nal_type</name> <operator>=</operator> <name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x1f</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nal_type</name> <operator>==</operator> <literal type="number">7</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>nb_sps</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <name>UINT16_MAX</name> <operator>||</operator> <name>nb_sps</name> <operator>&gt;=</operator> <name>H264_MAX_SPS_COUNT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>sps_pb</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name>sps_pb</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>nal_type</name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>nb_pps</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <name>UINT16_MAX</name> <operator>||</operator> <name>nb_pps</name> <operator>&gt;=</operator> <name>H264_MAX_PPS_COUNT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pps_pb</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name>pps_pb</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>nal_type</name> <operator>==</operator> <literal type="number">13</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>nb_sps_ext</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <name>UINT16_MAX</name> <operator>||</operator> <name>nb_sps_ext</name> <operator>&gt;=</operator> <literal type="number">256</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>sps_ext_pb</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name>sps_ext_pb</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>sps_size</name> <operator>=</operator> <call><name>avio_get_dyn_buf</name><argument_list>(<argument><expr><name>sps_pb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pps_size</name> <operator>=</operator> <call><name>avio_get_dyn_buf</name><argument_list>(<argument><expr><name>pps_pb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sps_ext_size</name> <operator>=</operator> <call><name>avio_get_dyn_buf</name><argument_list>(<argument><expr><name>sps_ext_pb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sps_ext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sps_size</name> <operator>&lt;</operator> <literal type="number">6</literal> <operator>||</operator> <operator>!</operator><name>pps_size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>sps</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>sps</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>sps</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0xe0</literal> <operator>|</operator> <name>nb_sps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>sps</name></expr></argument>, <argument><expr><name>sps_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>nb_pps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pps</name></expr></argument>, <argument><expr><name>pps_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sps</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">66</literal> <operator>&amp;&amp;</operator> <name><name>sps</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">77</literal> <operator>&amp;&amp;</operator> <name><name>sps</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">88</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>H264SequenceParameterSet</name> <modifier>*</modifier></type><name>seq</name> <init>= <expr><call><name>ff_avc_decode_sps</name><argument_list>(<argument><expr><name>sps</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>sps_size</name> <operator>-</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>seq</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0xfc</literal> <operator>|</operator> <name><name>seq</name><operator>-&gt;</operator><name>chroma_format_idc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0xf8</literal> <operator>|</operator> <operator>(</operator><name><name>seq</name><operator>-&gt;</operator><name>bit_depth_luma</name></name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0xf8</literal> <operator>|</operator> <operator>(</operator><name><name>seq</name><operator>-&gt;</operator><name>bit_depth_chroma</name></name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>nb_sps_ext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>nb_sps_ext</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>sps_ext</name></expr></argument>, <argument><expr><name>sps_ext_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>seq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>ffio_free_dyn_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sps_pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ffio_free_dyn_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pps_pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ffio_free_dyn_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sps_ext_pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_avc_write_annexb_extradata</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>sps_size</name></decl>, <decl><type ref="prev"/><name>pps_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>out_size</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>buf</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>size</name> <operator>&gt;=</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>AV_RB32</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0x00000001</literal> <operator>||</operator> <call><name>AV_RB24</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0x000001</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>size</name> <operator>&lt;</operator> <literal type="number">11</literal> <operator>||</operator> <name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>sps_size</name> <operator>=</operator> <call><name>AV_RB16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>in</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">11</literal> <operator>+</operator> <name>sps_size</name> <operator>&gt;</operator> <operator>*</operator><name>size</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pps_size</name> <operator>=</operator> <call><name>AV_RB16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>in</name><index>[<expr><literal type="number">9</literal> <operator>+</operator> <name>sps_size</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">11</literal> <operator>+</operator> <name>sps_size</name> <operator>+</operator> <name>pps_size</name> <operator>&gt;</operator> <operator>*</operator><name>size</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>out_size</name> <operator>=</operator> <literal type="number">8</literal> <operator>+</operator> <name>sps_size</name> <operator>+</operator> <name>pps_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><name>out_size</name> <operator>+</operator> <name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>out</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>AV_WB32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0x00000001</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>out</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>in</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name>sps_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WB32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>out</name><index>[<expr><literal type="number">4</literal> <operator>+</operator> <name>sps_size</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0x00000001</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>out</name> <operator>+</operator> <literal type="number">8</literal> <operator>+</operator> <name>sps_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>in</name><index>[<expr><literal type="number">11</literal> <operator>+</operator> <name>sps_size</name></expr>]</index></name></expr></argument>, <argument><expr><name>pps_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>buf</name> <operator>=</operator> <name>out</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <name>out_size</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>ff_avc_mp4_find_startcode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>start</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>end</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>nal_length_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>end</name> <operator>-</operator> <name>start</name> <operator>&lt;</operator> <name>nal_length_size</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name>nal_length_size</name><operator>--</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>res</name> <operator>=</operator> <operator>(</operator><name>res</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>*</operator><name>start</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&gt;</operator> <name>end</name> <operator>-</operator> <name>start</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>start</name> <operator>+</operator> <name>res</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>uint8_t</name> <modifier>*</modifier></type><name>ff_nal_unit_extract_rbsp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>src_len</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst_len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>header_len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name>src_len</name> <operator>+</operator> <name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dst</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>header_len</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>src_len</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>src</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt></block_content></block></while>

<while>while <condition>(<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal> <operator>&lt;</operator> <name>src_len</name></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>src</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>src</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>src</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>src</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt> 

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>src</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt></block_content></block></while>

<while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>src_len</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>src</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>dst_len</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

<return>return <expr><name>dst</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVRational</name></type> <name><name>avc_sample_aspect_ratio</name><index>[<expr><literal type="number">17</literal></expr>]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">12</literal></expr>, <expr><literal type="number">11</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">16</literal></expr>, <expr><literal type="number">11</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">40</literal></expr>, <expr><literal type="number">33</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">24</literal></expr>, <expr><literal type="number">11</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">20</literal></expr>, <expr><literal type="number">11</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">32</literal></expr>, <expr><literal type="number">11</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">80</literal></expr>, <expr><literal type="number">33</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">18</literal></expr>, <expr><literal type="number">11</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">15</literal></expr>, <expr><literal type="number">11</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">64</literal></expr>, <expr><literal type="number">33</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">160</literal></expr>, <expr><literal type="number">99</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>get_ue_golomb</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">32</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></for>

<return>return <expr><call><name>get_bitsz</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>i</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>get_se_golomb</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><call><name>get_ue_golomb</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sign</name> <init>= <expr><operator>-</operator><operator>(</operator><name>v</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><operator>(</operator><name>v</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>^</operator> <name>sign</name><operator>)</operator> <operator>-</operator> <name>sign</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>H264SequenceParameterSet</name> <modifier>*</modifier></type><name>ff_avc_decode_sps</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>, <decl><type ref="prev"/><name>rbsp_size</name></decl>, <decl><type ref="prev"/><name>aspect_ratio_idc</name></decl>, <decl><type ref="prev"/><name>pic_order_cnt_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num_ref_frames_in_pic_order_cnt_cycle</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>delta_scale</name></decl>, <decl><type ref="prev"/><name>lastScale</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>, <decl><type ref="prev"/><name>nextScale</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sizeOfScalingList</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>H264SequenceParameterSet</name> <modifier>*</modifier></type><name>sps</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GetBitContext</name></type> <name>gb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>rbsp_buf</name></decl>;</decl_stmt>

<expr_stmt><expr><name>rbsp_buf</name> <operator>=</operator> <call><name>ff_nal_unit_extract_rbsp</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rbsp_size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rbsp_buf</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>init_get_bits8</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>rbsp_buf</name></expr></argument>, <argument><expr><name>rbsp_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>sps</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>sps</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sps</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>profile_idc</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>constraint_set_flags</name></name> <operator>|=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>constraint_set_flags</name></name> <operator>|=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>constraint_set_flags</name></name> <operator>|=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>constraint_set_flags</name></name> <operator>|=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>constraint_set_flags</name></name> <operator>|=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>constraint_set_flags</name></name> <operator>|=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">5</literal></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>level_idc</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <call><name>get_ue_golomb</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sps</name><operator>-&gt;</operator><name>profile_idc</name></name> <operator>==</operator> <literal type="number">100</literal> <operator>||</operator> <name><name>sps</name><operator>-&gt;</operator><name>profile_idc</name></name> <operator>==</operator> <literal type="number">110</literal> <operator>||</operator>

<name><name>sps</name><operator>-&gt;</operator><name>profile_idc</name></name> <operator>==</operator> <literal type="number">122</literal> <operator>||</operator> <name><name>sps</name><operator>-&gt;</operator><name>profile_idc</name></name> <operator>==</operator> <literal type="number">244</literal> <operator>||</operator> <name><name>sps</name><operator>-&gt;</operator><name>profile_idc</name></name> <operator>==</operator> <literal type="number">44</literal> <operator>||</operator>

<name><name>sps</name><operator>-&gt;</operator><name>profile_idc</name></name> <operator>==</operator> <literal type="number">83</literal> <operator>||</operator> <name><name>sps</name><operator>-&gt;</operator><name>profile_idc</name></name> <operator>==</operator> <literal type="number">86</literal> <operator>||</operator> <name><name>sps</name><operator>-&gt;</operator><name>profile_idc</name></name> <operator>==</operator> <literal type="number">118</literal> <operator>||</operator>

<name><name>sps</name><operator>-&gt;</operator><name>profile_idc</name></name> <operator>==</operator> <literal type="number">128</literal> <operator>||</operator> <name><name>sps</name><operator>-&gt;</operator><name>profile_idc</name></name> <operator>==</operator> <literal type="number">138</literal> <operator>||</operator> <name><name>sps</name><operator>-&gt;</operator><name>profile_idc</name></name> <operator>==</operator> <literal type="number">139</literal> <operator>||</operator>

<name><name>sps</name><operator>-&gt;</operator><name>profile_idc</name></name> <operator>==</operator> <literal type="number">134</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>chroma_format_idc</name></name> <operator>=</operator> <call><name>get_ue_golomb</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>sps</name><operator>-&gt;</operator><name>chroma_format_idc</name></name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>skip_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>bit_depth_luma</name></name> <operator>=</operator> <call><name>get_ue_golomb</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>bit_depth_chroma</name></name> <operator>=</operator> <call><name>get_ue_golomb</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>skip_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>sps</name><operator>-&gt;</operator><name>chroma_format_idc</name></name> <operator>!=</operator> <literal type="number">3</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">8</literal></expr> </then><else>: <expr><literal type="number">12</literal></expr></else></ternary><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> 

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>lastScale</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>nextScale</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>sizeOfScalingList</name> <operator>=</operator> <ternary><condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">6</literal></expr> ?</condition><then> <expr><literal type="number">16</literal></expr> </then><else>: <expr><literal type="number">64</literal></expr></else></ternary></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>sizeOfScalingList</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>nextScale</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>delta_scale</name> <operator>=</operator> <call><name>get_se_golomb</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>nextScale</name> <operator>=</operator> <operator>(</operator><name>lastScale</name> <operator>+</operator> <name>delta_scale</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>lastScale</name> <operator>=</operator> <ternary><condition><expr><name>nextScale</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>lastScale</name></expr> </then><else>: <expr><name>nextScale</name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>chroma_format_idc</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>bit_depth_luma</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>bit_depth_chroma</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>get_ue_golomb</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>pic_order_cnt_type</name> <operator>=</operator> <call><name>get_ue_golomb</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pic_order_cnt_type</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>get_ue_golomb</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>pic_order_cnt_type</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>skip_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>get_se_golomb</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>get_se_golomb</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>num_ref_frames_in_pic_order_cnt_cycle</name> <operator>=</operator> <call><name>get_ue_golomb</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_ref_frames_in_pic_order_cnt_cycle</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>get_se_golomb</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>get_ue_golomb</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>skip_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>get_ue_golomb</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>get_ue_golomb</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>frame_mbs_only_flag</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sps</name><operator>-&gt;</operator><name>frame_mbs_only_flag</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>skip_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<expr_stmt><expr><call><name>skip_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>get_ue_golomb</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>get_ue_golomb</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>get_ue_golomb</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>get_ue_golomb</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>aspect_ratio_idc</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>aspect_ratio_idc</name> <operator>==</operator> <literal type="number">0xff</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>sar</name><operator>.</operator><name>num</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>sar</name><operator>.</operator><name>den</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>aspect_ratio_idc</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>avc_sample_aspect_ratio</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>sar</name></name> <operator>=</operator> <name><name>avc_sample_aspect_ratio</name><index>[<expr><name>aspect_ratio_idc</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sps</name><operator>-&gt;</operator><name>sar</name><operator>.</operator><name>den</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>sar</name><operator>.</operator><name>num</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>sar</name><operator>.</operator><name>den</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<label><name>end</name>:</label>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>rbsp_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>sps</name></expr>;</return>

</block_content>}</block></function>

</unit>
