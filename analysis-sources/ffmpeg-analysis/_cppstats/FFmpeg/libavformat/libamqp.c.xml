<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavformat\libamqp.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;amqp.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;amqp_tcp_socket.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avformat.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avstring.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/time.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"network.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"url.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"urldecode.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>AMQPContext</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>amqp_connection_state_t</name></type> <name>conn</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>amqp_socket_t</name> <modifier>*</modifier></type><name>socket</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>exchange</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>routing_key</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pkt_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>connection_timeout</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pkt_size_overflow</name></decl>;</decl_stmt>

}</block></struct></type> <name>AMQPContext</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STR_LEN</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_CHANNEL</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(AMQPContext, x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D</name></cpp:macro> <cpp:value>AV_OPT_FLAG_DECODING_PARAM</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>E</name></cpp:macro> <cpp:value>AV_OPT_FLAG_ENCODING_PARAM</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>options</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"pkt_size"</literal></expr>, <expr><literal type="string">"Maximum send/read packet size"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>pkt_size</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">131072</literal></expr> }</block></expr>, <expr><literal type="number">4096</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>D</name> <operator>|</operator> <name>E</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"exchange"</literal></expr>, <expr><literal type="string">"Exchange to send/read packets"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>exchange</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{ <expr><operator>.</operator><name>str</name> <operator>=</operator> <literal type="string">"amq.direct"</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>D</name> <operator>|</operator> <name>E</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"routing_key"</literal></expr>, <expr><literal type="string">"Key to filter streams"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>routing_key</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{ <expr><operator>.</operator><name>str</name> <operator>=</operator> <literal type="string">"amqp"</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>D</name> <operator>|</operator> <name>E</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"connection_timeout"</literal></expr>, <expr><literal type="string">"Initial connection timeout"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>connection_timeout</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DURATION</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>INT64_MAX</name></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>D</name> <operator>|</operator> <name>E</name></expr>}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>amqp_proto_open</name><parameter_list>(<parameter><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>uri</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>server_msg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>hostname</name><index>[<expr><name>STR_LEN</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>credentials</name><index>[<expr><name>STR_LEN</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>port</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>user</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>password</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>user_decoded</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>password_decoded</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>amqp_rpc_reply_t</name></type> <name>broker_reply</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tval</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AMQPContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>is_streamed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>max_packet_size</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>pkt_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_url_split</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>credentials</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>credentials</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><name>hostname</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hostname</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>port</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>port</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>port</name> <operator>=</operator> <literal type="number">5672</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hostname</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal> <operator>||</operator> <name>port</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>port</name> <operator>&gt;</operator> <literal type="number">65535</literal></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid hostname/port\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>credentials</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>password</name> <operator>=</operator> <name>p</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>password</name> <operator>||</operator> <operator>*</operator><name>password</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>password</name> <operator>=</operator> <literal type="string">"guest"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>password_decoded</name> <operator>=</operator> <call><name>ff_urldecode</name><argument_list>(<argument><expr><name>password</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>password_decoded</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>user</name> <operator>=</operator> <name>credentials</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>user</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>user</name> <operator>=</operator> <literal type="string">"guest"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>user_decoded</name> <operator>=</operator> <call><name>ff_urldecode</name><argument_list>(<argument><expr><name>user</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>user_decoded</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>password_decoded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>conn</name></name> <operator>=</operator> <call><name>amqp_new_connection</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>conn</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>user_decoded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>password_decoded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error creating connection\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_EXTERNAL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>socket</name></name> <operator>=</operator> <call><name>amqp_tcp_socket_new</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>socket</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error creating socket\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>destroy_connection</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>connection_timeout</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>connection_timeout</name></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name><name>h</name><operator>-&gt;</operator><name>rw_timeout</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>h</name><operator>-&gt;</operator><name>rw_timeout</name></name></expr> </then><else>: <expr><literal type="number">5000000</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>tval</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>connection_timeout</name></name> <operator>/</operator> <literal type="number">1000000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tval</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>connection_timeout</name></name> <operator>%</operator> <literal type="number">1000000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>amqp_socket_open_noblock</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>socket</name></name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error connecting to server: %s\n"</literal></expr></argument>,

<argument><expr><call><name>amqp_error_string2</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>destroy_connection</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>broker_reply</name> <operator>=</operator> <call><name>amqp_login</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>pkt_size</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>AMQP_SASL_METHOD_PLAIN</name></expr></argument>, <argument><expr><name>user_decoded</name></expr></argument>, <argument><expr><name>password_decoded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>broker_reply</name><operator>.</operator><name>reply_type</name></name> <operator>!=</operator> <name>AMQP_RESPONSE_NORMAL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error login\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>server_msg</name> <operator>=</operator> <name>AMQP_ACCESS_REFUSED</name></expr>;</expr_stmt>

<goto>goto <name>close_connection</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>amqp_channel_open</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><name>DEFAULT_CHANNEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>broker_reply</name> <operator>=</operator> <call><name>amqp_get_rpc_reply</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>broker_reply</name><operator>.</operator><name>reply_type</name></name> <operator>!=</operator> <name>AMQP_RESPONSE_NORMAL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error set channel\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>server_msg</name> <operator>=</operator> <name>AMQP_CHANNEL_ERROR</name></expr>;</expr_stmt>

<goto>goto <name>close_connection</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AVIO_FLAG_READ</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>amqp_bytes_t</name></type> <name>queuename</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>queuename_buff</name><index>[<expr><name>STR_LEN</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>amqp_queue_declare_ok_t</name> <modifier>*</modifier></type><name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>amqp_queue_declare</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><name>DEFAULT_CHANNEL</name></expr></argument>, <argument><expr><name>amqp_empty_bytes</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>amqp_empty_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>broker_reply</name> <operator>=</operator> <call><name>amqp_get_rpc_reply</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>r</name> <operator>||</operator> <name><name>broker_reply</name><operator>.</operator><name>reply_type</name></name> <operator>!=</operator> <name>AMQP_RESPONSE_NORMAL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error declare queue\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>server_msg</name> <operator>=</operator> <name>AMQP_RESOURCE_ERROR</name></expr>;</expr_stmt>

<goto>goto <name>close_channel</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>queuename</name><operator>.</operator><name>bytes</name></name> <operator>=</operator> <name>queuename_buff</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>queuename</name><operator>.</operator><name>len</name></name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>queue</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><name>STR_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>queuename</name><operator>.</operator><name>bytes</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>queue</name><operator>.</operator><name>bytes</name></name></expr></argument>, <argument><expr><name><name>queuename</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>amqp_queue_bind</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><name>DEFAULT_CHANNEL</name></expr></argument>, <argument><expr><name>queuename</name></expr></argument>,

<argument><expr><call><name>amqp_cstring_bytes</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>exchange</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>amqp_cstring_bytes</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>routing_key</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>amqp_empty_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>broker_reply</name> <operator>=</operator> <call><name>amqp_get_rpc_reply</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>broker_reply</name><operator>.</operator><name>reply_type</name></name> <operator>!=</operator> <name>AMQP_RESPONSE_NORMAL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Queue bind error\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>server_msg</name> <operator>=</operator> <name>AMQP_INTERNAL_ERROR</name></expr>;</expr_stmt>

<goto>goto <name>close_channel</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>amqp_basic_consume</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><name>DEFAULT_CHANNEL</name></expr></argument>, <argument><expr><name>queuename</name></expr></argument>, <argument><expr><name>amqp_empty_bytes</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>amqp_empty_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>broker_reply</name> <operator>=</operator> <call><name>amqp_get_rpc_reply</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>broker_reply</name><operator>.</operator><name>reply_type</name></name> <operator>!=</operator> <name>AMQP_RESPONSE_NORMAL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Set consume error\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>server_msg</name> <operator>=</operator> <name>AMQP_INTERNAL_ERROR</name></expr>;</expr_stmt>

<goto>goto <name>close_channel</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>user_decoded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>password_decoded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>close_channel</name>:</label>

<expr_stmt><expr><call><name>amqp_channel_close</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><name>DEFAULT_CHANNEL</name></expr></argument>, <argument><expr><name>server_msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>close_connection</name>:</label>

<expr_stmt><expr><call><name>amqp_connection_close</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><name>server_msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>destroy_connection</name>:</label>

<expr_stmt><expr><call><name>amqp_destroy_connection</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>user_decoded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>password_decoded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_EXTERNAL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>amqp_proto_write</name><parameter_list>(<parameter><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AMQPContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><call><name>amqp_socket_get_sockfd</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>socket</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>amqp_bytes_t</name></type> <name>message</name> <init>= <expr><block>{ <expr><name>size</name></expr>, <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>buf</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>amqp_basic_properties_t</name></type> <name>props</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_network_wait_fd_timeout</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>rw_timeout</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>interrupt_callback</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>props</name><operator>.</operator><name>_flags</name></name> <operator>=</operator> <name>AMQP_BASIC_CONTENT_TYPE_FLAG</name> <operator>|</operator> <name>AMQP_BASIC_DELIVERY_MODE_FLAG</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>props</name><operator>.</operator><name>content_type</name></name> <operator>=</operator> <call><name>amqp_cstring_bytes</name><argument_list>(<argument><expr><literal type="string">"octet/stream"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>props</name><operator>.</operator><name>delivery_mode</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>amqp_basic_publish</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><name>DEFAULT_CHANNEL</name></expr></argument>, <argument><expr><call><name>amqp_cstring_bytes</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>exchange</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>amqp_cstring_bytes</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>routing_key</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name>props</name></expr></argument>, <argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error publish: %s\n"</literal></expr></argument>, <argument><expr><call><name>amqp_error_string2</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_EXTERNAL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>size</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>amqp_proto_read</name><parameter_list>(<parameter><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AMQPContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><call><name>amqp_socket_get_sockfd</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>socket</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>amqp_rpc_reply_t</name></type> <name>broker_reply</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>amqp_envelope_t</name></type> <name>envelope</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_network_wait_fd_timeout</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>rw_timeout</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>interrupt_callback</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>amqp_maybe_release_buffers</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>broker_reply</name> <operator>=</operator> <call><name>amqp_consume_message</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>envelope</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>broker_reply</name><operator>.</operator><name>reply_type</name></name> <operator>!=</operator> <name>AMQP_RESPONSE_NORMAL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_EXTERNAL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>envelope</name><operator>.</operator><name>message</name><operator>.</operator><name>body</name><operator>.</operator><name>len</name></name> <operator>&gt;</operator> <name>size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pkt_size_overflow</name></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pkt_size_overflow</name></name></expr></argument>, <argument><expr><name><name>envelope</name><operator>.</operator><name>message</name><operator>.</operator><name>body</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Message exceeds space in the buffer. "</literal>

<literal type="string">"Message will be truncated. Setting -pkt_size %d "</literal>

<literal type="string">"may resolve this issue.\n"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>pkt_size_overflow</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><name><name>envelope</name><operator>.</operator><name>message</name><operator>.</operator><name>body</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>envelope</name><operator>.</operator><name>message</name><operator>.</operator><name>body</name><operator>.</operator><name>bytes</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>amqp_destroy_envelope</name><argument_list>(<argument><expr><operator>&amp;</operator><name>envelope</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>size</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>amqp_proto_close</name><parameter_list>(<parameter><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AMQPContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>amqp_channel_close</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><name>DEFAULT_CHANNEL</name></expr></argument>, <argument><expr><name>AMQP_REPLY_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>amqp_connection_close</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><name>AMQP_REPLY_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>amqp_destroy_connection</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>amqp_context_class</name> <init>= <expr><block>{

<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"amqp"</literal></expr>,

<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,

<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>options</name></expr>,

<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>URLProtocol</name></type> <name>ff_libamqp_protocol</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"amqp"</literal></expr>,

<expr><operator>.</operator><name>url_close</name> <operator>=</operator> <name>amqp_proto_close</name></expr>,

<expr><operator>.</operator><name>url_open</name> <operator>=</operator> <name>amqp_proto_open</name></expr>,

<expr><operator>.</operator><name>url_read</name> <operator>=</operator> <name>amqp_proto_read</name></expr>,

<expr><operator>.</operator><name>url_write</name> <operator>=</operator> <name>amqp_proto_write</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>AMQPContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>priv_data_class</name> <operator>=</operator> <operator>&amp;</operator><name>amqp_context_class</name></expr>,

<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>URL_PROTOCOL_FLAG_NETWORK</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
