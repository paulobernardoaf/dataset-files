<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavformat\h261dec.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/get_bits.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avformat.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rawdec.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>int</name></type> <name>h261_probe</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVProbeData</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>valid_psc</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>invalid_psc</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>next_gn</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>src_fmt</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>p</name><operator>-&gt;</operator><name>buf_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>AV_RB16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;</operator> <literal type="number">0xFFU</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>shift</name> <init>= <expr><call><name>av_log2_16bit</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>code</name> <init>= <expr><call><name>AV_RB64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>buf</name><index>[<expr><call><name>FFMAX</name><argument_list>(<argument><expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">24</literal><operator>+</operator><name>shift</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>code</name> <operator>&amp;</operator> <literal type="number">0xffff0000</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x10000</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>gn</name><init>= <expr><operator>(</operator><name>code</name><operator>&gt;&gt;</operator><literal type="number">12</literal><operator>)</operator><operator>&amp;</operator><literal type="number">0xf</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>gn</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>src_fmt</name><operator>=</operator> <name>code</name><operator>&amp;</operator><literal type="number">8</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>gn</name> <operator>!=</operator> <name>next_gn</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>invalid_psc</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>valid_psc</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>src_fmt</name></expr>)</condition><block>{<block_content> 

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>lut</name><index>[<expr><literal type="number">16</literal></expr>]</index></name><init>=<expr><block>{<expr><literal type="number">1</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">10</literal></expr>,<expr><literal type="number">11</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">16</literal></expr>,<expr><literal type="number">16</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>next_gn</name> <operator>=</operator> <name><name>lut</name><index>[<expr><name>gn</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block>{<block_content> 

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>lut</name><index>[<expr><literal type="number">16</literal></expr>]</index></name><init>=<expr><block>{<expr><literal type="number">1</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">16</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">16</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">16</literal></expr>,<expr><literal type="number">16</literal></expr>,<expr><literal type="number">16</literal></expr>,<expr><literal type="number">16</literal></expr>,<expr><literal type="number">16</literal></expr>,<expr><literal type="number">16</literal></expr>,<expr><literal type="number">16</literal></expr>,<expr><literal type="number">16</literal></expr>,<expr><literal type="number">16</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>next_gn</name> <operator>=</operator> <name><name>lut</name><index>[<expr><name>gn</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>(<expr><name>valid_psc</name> <operator>&gt;</operator> <literal type="number">2</literal><operator>*</operator><name>invalid_psc</name> <operator>+</operator> <literal type="number">6</literal></expr>)</condition><block>{<block_content>

<return>return <expr><name>AVPROBE_SCORE_EXTENSION</name></expr>;</return>

</block_content>}</block></if><if type="elseif">else if<condition>(<expr><name>valid_psc</name> <operator>&gt;</operator> <literal type="number">2</literal><operator>*</operator><name>invalid_psc</name> <operator>+</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVPROBE_SCORE_EXTENSION</name> <operator>/</operator> <literal type="number">2</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<macro><name>FF_DEF_RAWVIDEO_DEMUXER</name><argument_list>(<argument>h261</argument>, <argument><literal type="string">"raw H.261"</literal></argument>, <argument>h261_probe</argument>, <argument><literal type="string">"h261"</literal></argument>, <argument>AV_CODEC_ID_H261</argument>)</argument_list></macro>

</unit>
