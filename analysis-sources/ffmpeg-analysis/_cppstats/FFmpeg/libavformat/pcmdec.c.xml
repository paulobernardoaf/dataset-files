<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavformat\pcmdec.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avformat.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pcm.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/log.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>PCMAudioDemuxerContext</name> <block>{

<decl_stmt><decl><type><name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sample_rate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>channels</name></decl>;</decl_stmt>

}</block></struct></type> <name>PCMAudioDemuxerContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>pcm_read_header</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>PCMAudioDemuxerContext</name> <modifier>*</modifier></type><name>s1</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>mime_type</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>st</name> <operator>=</operator> <call><name>avformat_new_stream</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>st</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>iformat</name><operator>-&gt;</operator><name>raw_codec_id</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>=</operator> <name><name>s1</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <name><name>s1</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_opt_get</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="string">"mime_type"</literal></expr></argument>, <argument><expr><name>AV_OPT_SEARCH_CHILDREN</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mime_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mime_type</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>iformat</name><operator>-&gt;</operator><name>mime_type</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>rate</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>channels</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>little_endian</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>iformat</name><operator>-&gt;</operator><name>mime_type</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>av_strncasecmp</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>iformat</name><operator>-&gt;</operator><name>mime_type</name></name></expr></argument>, <argument><expr><name>mime_type</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>options</name> <init>= <expr><name>mime_type</name> <operator>+</operator> <name>len</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>mime_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>options</name> <operator>&lt;</operator> <name>mime_type</name> <operator>+</operator> <name>len</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>options</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><literal type="string">";"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>options</name><operator>++</operator></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rate</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>sscanf</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><literal type="string">" rate=%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>rate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>channels</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>sscanf</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><literal type="string">" channels=%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>channels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>little_endian</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>val</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></decl>;</decl_stmt> 

<if_stmt><if>if <condition>(<expr><call><name>sscanf</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><literal type="string">" endianness=%13s"</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>little_endian</name> <operator>=</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="string">"little-endian"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>rate</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Invalid sample_rate found in mime_type \"%s\"\n"</literal></expr></argument>,

<argument><expr><name>mime_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mime_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>=</operator> <name>rate</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>channels</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <name>channels</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>little_endian</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>=</operator> <name>AV_CODEC_ID_PCM_S16LE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mime_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>bits_per_coded_sample</name></name> <operator>=</operator>

<call><name>av_get_bits_per_sample</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>bits_per_coded_sample</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>block_align</name></name> <operator>=</operator>

<name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>bits_per_coded_sample</name></name> <operator>*</operator> <name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>channels</name></name> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avpriv_set_pts_info</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>pcm_options</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"sample_rate"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>PCMAudioDemuxerContext</name></expr></argument>, <argument><expr><name>sample_rate</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">44100</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>AV_OPT_FLAG_DECODING_PARAM</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"channels"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>PCMAudioDemuxerContext</name></expr></argument>, <argument><expr><name>channels</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>AV_OPT_FLAG_DECODING_PARAM</name></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCMDEF</name><parameter_list>(<parameter><type><name>name_</name></type></parameter>, <parameter><type><name>long_name_</name></type></parameter>, <parameter><type><name>ext</name></type></parameter>, <parameter><type><name>codec</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static const AVClass name_ ##_demuxer_class = { .class_name = #name_ " demuxer", .item_name = av_default_item_name, .option = pcm_options, .version = LIBAVUTIL_VERSION_INT, }; AVInputFormat ff_pcm_ ##name_ ##_demuxer = { .name = #name_, .long_name = NULL_IF_CONFIG_SMALL(long_name_), .priv_data_size = sizeof(PCMAudioDemuxerContext), .read_header = pcm_read_header, .read_packet = ff_pcm_read_packet, .read_seek = ff_pcm_read_seek, .flags = AVFMT_GENERIC_INDEX, .extensions = ext, .raw_codec_id = codec, .priv_class = &amp;name_ ##_demuxer_class, __VA_ARGS__ };</cpp:value></cpp:define>

<macro><name>PCMDEF</name><argument_list>(<argument>f64be</argument>, <argument><literal type="string">"PCM 64-bit floating-point big-endian"</literal></argument>,

<argument>NULL</argument>, <argument>AV_CODEC_ID_PCM_F64BE</argument>)</argument_list></macro>

<macro><name>PCMDEF</name><argument_list>(<argument>f64le</argument>, <argument><literal type="string">"PCM 64-bit floating-point little-endian"</literal></argument>,

<argument>NULL</argument>, <argument>AV_CODEC_ID_PCM_F64LE</argument>)</argument_list></macro>

<macro><name>PCMDEF</name><argument_list>(<argument>f32be</argument>, <argument><literal type="string">"PCM 32-bit floating-point big-endian"</literal></argument>,

<argument>NULL</argument>, <argument>AV_CODEC_ID_PCM_F32BE</argument>)</argument_list></macro>

<macro><name>PCMDEF</name><argument_list>(<argument>f32le</argument>, <argument><literal type="string">"PCM 32-bit floating-point little-endian"</literal></argument>,

<argument>NULL</argument>, <argument>AV_CODEC_ID_PCM_F32LE</argument>)</argument_list></macro>

<macro><name>PCMDEF</name><argument_list>(<argument>s32be</argument>, <argument><literal type="string">"PCM signed 32-bit big-endian"</literal></argument>,

<argument>NULL</argument>, <argument>AV_CODEC_ID_PCM_S32BE</argument>)</argument_list></macro>

<macro><name>PCMDEF</name><argument_list>(<argument>s32le</argument>, <argument><literal type="string">"PCM signed 32-bit little-endian"</literal></argument>,

<argument>NULL</argument>, <argument>AV_CODEC_ID_PCM_S32LE</argument>)</argument_list></macro>

<macro><name>PCMDEF</name><argument_list>(<argument>s24be</argument>, <argument><literal type="string">"PCM signed 24-bit big-endian"</literal></argument>,

<argument>NULL</argument>, <argument>AV_CODEC_ID_PCM_S24BE</argument>)</argument_list></macro>

<macro><name>PCMDEF</name><argument_list>(<argument>s24le</argument>, <argument><literal type="string">"PCM signed 24-bit little-endian"</literal></argument>,

<argument>NULL</argument>, <argument>AV_CODEC_ID_PCM_S24LE</argument>)</argument_list></macro>

<macro><name>PCMDEF</name><argument_list>(<argument>s16be</argument>, <argument><literal type="string">"PCM signed 16-bit big-endian"</literal></argument>,

<argument>AV_NE(<literal type="string">"sw"</literal>, NULL)</argument>, <argument>AV_CODEC_ID_PCM_S16BE</argument>, <argument>.mime_type = <literal type="string">"audio/L16"</literal></argument>)</argument_list></macro>

<macro><name>PCMDEF</name><argument_list>(<argument>s16le</argument>, <argument><literal type="string">"PCM signed 16-bit little-endian"</literal></argument>,

<argument>AV_NE(NULL, <literal type="string">"sw"</literal>)</argument>, <argument>AV_CODEC_ID_PCM_S16LE</argument>)</argument_list></macro>

<macro><name>PCMDEF</name><argument_list>(<argument>s8</argument>, <argument><literal type="string">"PCM signed 8-bit"</literal></argument>,

<argument><literal type="string">"sb"</literal></argument>, <argument>AV_CODEC_ID_PCM_S8</argument>)</argument_list></macro>

<macro><name>PCMDEF</name><argument_list>(<argument>u32be</argument>, <argument><literal type="string">"PCM unsigned 32-bit big-endian"</literal></argument>,

<argument>NULL</argument>, <argument>AV_CODEC_ID_PCM_U32BE</argument>)</argument_list></macro>

<macro><name>PCMDEF</name><argument_list>(<argument>u32le</argument>, <argument><literal type="string">"PCM unsigned 32-bit little-endian"</literal></argument>,

<argument>NULL</argument>, <argument>AV_CODEC_ID_PCM_U32LE</argument>)</argument_list></macro>

<macro><name>PCMDEF</name><argument_list>(<argument>u24be</argument>, <argument><literal type="string">"PCM unsigned 24-bit big-endian"</literal></argument>,

<argument>NULL</argument>, <argument>AV_CODEC_ID_PCM_U24BE</argument>)</argument_list></macro>

<macro><name>PCMDEF</name><argument_list>(<argument>u24le</argument>, <argument><literal type="string">"PCM unsigned 24-bit little-endian"</literal></argument>,

<argument>NULL</argument>, <argument>AV_CODEC_ID_PCM_U24LE</argument>)</argument_list></macro>

<macro><name>PCMDEF</name><argument_list>(<argument>u16be</argument>, <argument><literal type="string">"PCM unsigned 16-bit big-endian"</literal></argument>,

<argument>AV_NE(<literal type="string">"uw"</literal>, NULL)</argument>, <argument>AV_CODEC_ID_PCM_U16BE</argument>)</argument_list></macro>

<macro><name>PCMDEF</name><argument_list>(<argument>u16le</argument>, <argument><literal type="string">"PCM unsigned 16-bit little-endian"</literal></argument>,

<argument>AV_NE(NULL, <literal type="string">"uw"</literal>)</argument>, <argument>AV_CODEC_ID_PCM_U16LE</argument>)</argument_list></macro>

<macro><name>PCMDEF</name><argument_list>(<argument>u8</argument>, <argument><literal type="string">"PCM unsigned 8-bit"</literal></argument>,

<argument><literal type="string">"ub"</literal></argument>, <argument>AV_CODEC_ID_PCM_U8</argument>)</argument_list></macro>

<macro><name>PCMDEF</name><argument_list>(<argument>alaw</argument>, <argument><literal type="string">"PCM A-law"</literal></argument>,

<argument><literal type="string">"al"</literal></argument>, <argument>AV_CODEC_ID_PCM_ALAW</argument>)</argument_list></macro>

<macro><name>PCMDEF</name><argument_list>(<argument>mulaw</argument>, <argument><literal type="string">"PCM mu-law"</literal></argument>,

<argument><literal type="string">"ul"</literal></argument>, <argument>AV_CODEC_ID_PCM_MULAW</argument>)</argument_list></macro>

<macro><name>PCMDEF</name><argument_list>(<argument>vidc</argument>, <argument><literal type="string">"PCM Archimedes VIDC"</literal></argument>,

<argument>NULL</argument>, <argument>AV_CODEC_ID_PCM_VIDC</argument>)</argument_list></macro>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>sln_options</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"sample_rate"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>PCMAudioDemuxerContext</name></expr></argument>, <argument><expr><name>sample_rate</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">8000</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>AV_OPT_FLAG_DECODING_PARAM</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"channels"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>PCMAudioDemuxerContext</name></expr></argument>, <argument><expr><name>channels</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>AV_OPT_FLAG_DECODING_PARAM</name></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>sln_demuxer_class</name> <init>= <expr><block>{

<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"sln demuxer"</literal></expr>,

<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,

<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>sln_options</name></expr>,

<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVInputFormat</name></type> <name>ff_sln_demuxer</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"sln"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Asterisk raw pcm"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>PCMAudioDemuxerContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>read_header</name> <operator>=</operator> <name>pcm_read_header</name></expr>,

<expr><operator>.</operator><name>read_packet</name> <operator>=</operator> <name>ff_pcm_read_packet</name></expr>,

<expr><operator>.</operator><name>read_seek</name> <operator>=</operator> <name>ff_pcm_read_seek</name></expr>,

<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>AVFMT_GENERIC_INDEX</name></expr>,

<expr><operator>.</operator><name>extensions</name> <operator>=</operator> <literal type="string">"sln"</literal></expr>,

<expr><operator>.</operator><name>raw_codec_id</name> <operator>=</operator> <name>AV_CODEC_ID_PCM_S16LE</name></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>sln_demuxer_class</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
