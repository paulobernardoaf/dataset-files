<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavformat\mmsh.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avstring.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mms.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"asf.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"url.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHUNK_HEADER_LENGTH</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXT_HEADER_LENGTH</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USERAGENT</name></cpp:macro> <cpp:value>"User-Agent: NSPlayer/4.1.0.3856\r\n"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLIENTGUID</name></cpp:macro> <cpp:value>"Pragma: xClientGUID={c77e7400-738a-11d2-9add-0020af0a3278}\r\n"</cpp:value></cpp:define>

<typedef>typedef <type><enum>enum <block>{

<decl><name>CHUNK_TYPE_DATA</name> <init>= <expr><literal type="number">0x4424</literal></expr></init></decl>,

<decl><name>CHUNK_TYPE_ASF_HEADER</name> <init>= <expr><literal type="number">0x4824</literal></expr></init></decl>,

<decl><name>CHUNK_TYPE_END</name> <init>= <expr><literal type="number">0x4524</literal></expr></init></decl>,

<decl><name>CHUNK_TYPE_STREAM_CHANGE</name> <init>= <expr><literal type="number">0x4324</literal></expr></init></decl>,

}</block></enum></type> <name>ChunkType</name>;</typedef>

<typedef>typedef <type><struct>struct <name>MMSHContext</name> <block>{

<decl_stmt><decl><type><name>MMSContext</name></type> <name>mms</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>location</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>request_seq</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>chunk_seq</name></decl>;</decl_stmt> 

}</block></struct></type> <name>MMSHContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mmsh_close</name><parameter_list>(<parameter><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MMSHContext</name> <modifier>*</modifier></type><name>mmsh</name> <init>= <expr><operator>(</operator><name>MMSHContext</name> <operator>*</operator><operator>)</operator><name><name>h</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MMSContext</name> <modifier>*</modifier></type><name>mms</name> <init>= <expr><operator>&amp;</operator><name><name>mmsh</name><operator>-&gt;</operator><name>mms</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mms</name><operator>-&gt;</operator><name>mms_hd</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ffurl_closep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mms</name><operator>-&gt;</operator><name>mms_hd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mms</name><operator>-&gt;</operator><name>streams</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mms</name><operator>-&gt;</operator><name>asf_header</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ChunkType</name></type> <name>get_chunk_header</name><parameter_list>(<parameter><decl><type><name>MMSHContext</name> <modifier>*</modifier></type><name>mmsh</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MMSContext</name> <modifier>*</modifier></type><name>mms</name> <init>= <expr><operator>&amp;</operator><name><name>mmsh</name><operator>-&gt;</operator><name>mms</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>chunk_header</name><index>[<expr><name>CHUNK_HEADER_LENGTH</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>ext_header</name><index>[<expr><name>EXT_HEADER_LENGTH</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ChunkType</name></type> <name>chunk_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>chunk_len</name></decl>, <decl><type ref="prev"/><name>res</name></decl>, <decl><type ref="prev"/><name>ext_header_len</name></decl>;</decl_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>ffurl_read_complete</name><argument_list>(<argument><expr><name><name>mms</name><operator>-&gt;</operator><name>mms_hd</name></name></expr></argument>, <argument><expr><name>chunk_header</name></expr></argument>, <argument><expr><name>CHUNK_HEADER_LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>!=</operator> <name>CHUNK_HEADER_LENGTH</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Read data packet header failed!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>chunk_type</name> <operator>=</operator> <call><name>AV_RL16</name><argument_list>(<argument><expr><name>chunk_header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>chunk_len</name> <operator>=</operator> <call><name>AV_RL16</name><argument_list>(<argument><expr><name>chunk_header</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>chunk_type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>CHUNK_TYPE_END</name></expr>:</case>

<case>case <expr><name>CHUNK_TYPE_STREAM_CHANGE</name></expr>:</case>

<expr_stmt><expr><name>ext_header_len</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>CHUNK_TYPE_ASF_HEADER</name></expr>:</case>

<case>case <expr><name>CHUNK_TYPE_DATA</name></expr>:</case>

<expr_stmt><expr><name>ext_header_len</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Strange chunk type %d\n"</literal></expr></argument>, <argument><expr><name>chunk_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></switch>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>ffurl_read_complete</name><argument_list>(<argument><expr><name><name>mms</name><operator>-&gt;</operator><name>mms_hd</name></name></expr></argument>, <argument><expr><name>ext_header</name></expr></argument>, <argument><expr><name>ext_header_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>!=</operator> <name>ext_header_len</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Read ext header failed!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <name>chunk_len</name> <operator>-</operator> <name>ext_header_len</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>chunk_type</name> <operator>==</operator> <name>CHUNK_TYPE_END</name> <operator>||</operator> <name>chunk_type</name> <operator>==</operator> <name>CHUNK_TYPE_DATA</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>mmsh</name><operator>-&gt;</operator><name>chunk_seq</name></name> <operator>=</operator> <call><name>AV_RL32</name><argument_list>(<argument><expr><name>ext_header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>chunk_type</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>read_data_packet</name><parameter_list>(<parameter><decl><type><name>MMSHContext</name> <modifier>*</modifier></type><name>mmsh</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MMSContext</name> <modifier>*</modifier></type><name>mms</name> <init>= <expr><operator>&amp;</operator><name><name>mmsh</name><operator>-&gt;</operator><name>mms</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>mms</name><operator>-&gt;</operator><name>in_buffer</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Data packet length %d exceeds the in_buffer size %"</literal><name>SIZE_SPECIFIER</name><literal type="string">"\n"</literal></expr></argument>,

<argument><expr><name>len</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>mms</name><operator>-&gt;</operator><name>in_buffer</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>ffurl_read_complete</name><argument_list>(<argument><expr><name><name>mms</name><operator>-&gt;</operator><name>mms_hd</name></name></expr></argument>, <argument><expr><name><name>mms</name><operator>-&gt;</operator><name>in_buffer</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"Data packet len = %d\n"</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>!=</operator> <name>len</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Read data packet failed!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name><name>mms</name><operator>-&gt;</operator><name>asf_packet_len</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Chunk length %d exceed packet length %d\n"</literal></expr></argument>,<argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>mms</name><operator>-&gt;</operator><name>asf_packet_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>mms</name><operator>-&gt;</operator><name>in_buffer</name></name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>mms</name><operator>-&gt;</operator><name>asf_packet_len</name></name> <operator>-</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>mms</name><operator>-&gt;</operator><name>read_in_ptr</name></name> <operator>=</operator> <name><name>mms</name><operator>-&gt;</operator><name>in_buffer</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mms</name><operator>-&gt;</operator><name>remaining_in_len</name></name> <operator>=</operator> <name><name>mms</name><operator>-&gt;</operator><name>asf_packet_len</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_http_header_data</name><parameter_list>(<parameter><decl><type><name>MMSHContext</name> <modifier>*</modifier></type><name>mmsh</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MMSContext</name> <modifier>*</modifier></type><name>mms</name> <init>= <expr><operator>&amp;</operator><name><name>mmsh</name><operator>-&gt;</operator><name>mms</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ChunkType</name></type> <name>chunk_type</name></decl>;</decl_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <name>chunk_type</name> <operator>=</operator> <call><name>get_chunk_header</name><argument_list>(<argument><expr><name>mmsh</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>chunk_type</name> <operator>==</operator> <name>CHUNK_TYPE_ASF_HEADER</name></expr>)</condition><block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>mms</name><operator>-&gt;</operator><name>header_parsed</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>mms</name><operator>-&gt;</operator><name>asf_header</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>!=</operator> <name><name>mms</name><operator>-&gt;</operator><name>asf_header_size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>mms</name><operator>-&gt;</operator><name>asf_header_size</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"Header len changed from %d to %d\n"</literal></expr></argument>,

<argument><expr><name><name>mms</name><operator>-&gt;</operator><name>asf_header_size</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mms</name><operator>-&gt;</operator><name>asf_header</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>mms</name><operator>-&gt;</operator><name>asf_header</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>mms</name><operator>-&gt;</operator><name>asf_header</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>mms</name><operator>-&gt;</operator><name>asf_header_size</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name><name>mms</name><operator>-&gt;</operator><name>asf_header_size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Asf header packet len = %d exceed the asf header buf size %d\n"</literal></expr></argument>,

<argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>mms</name><operator>-&gt;</operator><name>asf_header_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>ffurl_read_complete</name><argument_list>(<argument><expr><name><name>mms</name><operator>-&gt;</operator><name>mms_hd</name></name></expr></argument>, <argument><expr><name><name>mms</name><operator>-&gt;</operator><name>asf_header</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>!=</operator> <name>len</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Recv asf header data len %d != expected len %d\n"</literal></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>mms</name><operator>-&gt;</operator><name>asf_header_size</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>mms</name><operator>-&gt;</operator><name>header_parsed</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>ff_mms_asf_header_parser</name><argument_list>(<argument><expr><name>mms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mms</name><operator>-&gt;</operator><name>header_parsed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>chunk_type</name> <operator>==</operator> <name>CHUNK_TYPE_DATA</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>read_data_packet</name><argument_list>(<argument><expr><name>mmsh</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>len</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>mms</name><operator>-&gt;</operator><name>in_buffer</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Other packet len = %d exceed the in_buffer size %"</literal><name>SIZE_SPECIFIER</name><literal type="string">"\n"</literal></expr></argument>,

<argument><expr><name>len</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>mms</name><operator>-&gt;</operator><name>in_buffer</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>ffurl_read_complete</name><argument_list>(<argument><expr><name><name>mms</name><operator>-&gt;</operator><name>mms_hd</name></name></expr></argument>, <argument><expr><name><name>mms</name><operator>-&gt;</operator><name>in_buffer</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>!=</operator> <name>len</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Read other chunk type data failed!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"Skip chunk type %d \n"</literal></expr></argument>, <argument><expr><name>chunk_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mmsh_open_internal</name><parameter_list>(<parameter><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>uri</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>timestamp</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>pos</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>port</name></decl>, <decl><type ref="prev"/><name>err</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>httpname</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>path</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>host</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>stream_selection</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>headers</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MMSHContext</name> <modifier>*</modifier></type><name>mmsh</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MMSContext</name> <modifier>*</modifier></type><name>mms</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>mmsh</name><operator>-&gt;</operator><name>request_seq</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>is_streamed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>mms</name> <operator>=</operator> <operator>&amp;</operator><name><name>mmsh</name><operator>-&gt;</operator><name>mms</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_strlcpy</name><argument_list>(<argument><expr><name><name>mmsh</name><operator>-&gt;</operator><name>location</name></name></expr></argument>, <argument><expr><name>uri</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>mmsh</name><operator>-&gt;</operator><name>location</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_url_split</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>host</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>port</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>mmsh</name><operator>-&gt;</operator><name>location</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>port</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>port</name> <operator>=</operator> <literal type="number">80</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<expr_stmt><expr><call><name>ff_url_join</name><argument_list>(<argument><expr><name>httpname</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>httpname</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"http"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ffurl_alloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mms</name><operator>-&gt;</operator><name>mms_hd</name></name></expr></argument>, <argument><expr><name>httpname</name></expr></argument>, <argument><expr><name>AVIO_FLAG_READ</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>interrupt_callback</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>headers</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>headers</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><literal type="string">"Accept: */*\r\n"</literal>

<name>USERAGENT</name>

<literal type="string">"Host: %s:%d\r\n"</literal>

<literal type="string">"Pragma: no-cache,rate=1.000000,stream-time=0,"</literal>

<literal type="string">"stream-offset=0:0,request-context=%u,max-duration=0\r\n"</literal>

<name>CLIENTGUID</name>

<literal type="string">"Connection: Close\r\n"</literal></expr></argument>,

<argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name><name>mmsh</name><operator>-&gt;</operator><name>request_seq</name></name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_opt_set</name><argument_list>(<argument><expr><name><name>mms</name><operator>-&gt;</operator><name>mms_hd</name><operator>-&gt;</operator><name>priv_data</name></name></expr></argument>, <argument><expr><literal type="string">"headers"</literal></expr></argument>, <argument><expr><name>headers</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>mms</name><operator>-&gt;</operator><name>mms_hd</name><operator>-&gt;</operator><name>protocol_whitelist</name></name> <operator>&amp;&amp;</operator> <name><name>h</name><operator>-&gt;</operator><name>protocol_whitelist</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>mms</name><operator>-&gt;</operator><name>mms_hd</name><operator>-&gt;</operator><name>protocol_whitelist</name></name> <operator>=</operator> <call><name>av_strdup</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>protocol_whitelist</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>mms</name><operator>-&gt;</operator><name>mms_hd</name><operator>-&gt;</operator><name>protocol_whitelist</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ffurl_connect</name><argument_list>(<argument><expr><name><name>mms</name><operator>-&gt;</operator><name>mms_hd</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>get_http_header_data</name><argument_list>(<argument><expr><name>mmsh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Get http header data failed!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ffurl_close</name><argument_list>(<argument><expr><name><name>mms</name><operator>-&gt;</operator><name>mms_hd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>headers</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>headers</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>ffurl_alloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mms</name><operator>-&gt;</operator><name>mms_hd</name></name></expr></argument>, <argument><expr><name>httpname</name></expr></argument>, <argument><expr><name>AVIO_FLAG_READ</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>interrupt_callback</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>stream_selection</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><name><name>mms</name><operator>-&gt;</operator><name>stream_num</name></name> <operator>*</operator> <literal type="number">19</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>stream_selection</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>mms</name><operator>-&gt;</operator><name>stream_num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>tmp</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"ffff:%d:0 "</literal></expr></argument>, <argument><expr><name><name>mms</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_strlcat</name><argument_list>(<argument><expr><name>stream_selection</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name><name>mms</name><operator>-&gt;</operator><name>stream_num</name></name> <operator>*</operator> <literal type="number">19</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>headers</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>headers</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><literal type="string">"Accept: */*\r\n"</literal>

<name>USERAGENT</name>

<literal type="string">"Host: %s:%d\r\n"</literal>

<literal type="string">"Pragma: no-cache,rate=1.000000,request-context=%u\r\n"</literal>

<literal type="string">"Pragma: xPlayStrm=1\r\n"</literal>

<name>CLIENTGUID</name>

<literal type="string">"Pragma: stream-switch-count=%d\r\n"</literal>

<literal type="string">"Pragma: stream-switch-entry=%s\r\n"</literal>

<literal type="string">"Pragma: no-cache,rate=1.000000,stream-time=%u"</literal>

<literal type="string">"Connection: Close\r\n"</literal></expr></argument>,

<argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name><name>mmsh</name><operator>-&gt;</operator><name>request_seq</name></name><operator>++</operator></expr></argument>, <argument><expr><name><name>mms</name><operator>-&gt;</operator><name>stream_num</name></name></expr></argument>, <argument><expr><name>stream_selection</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>stream_selection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Build play request failed!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"out_buffer is %s"</literal></expr></argument>, <argument><expr><name>headers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_opt_set</name><argument_list>(<argument><expr><name><name>mms</name><operator>-&gt;</operator><name>mms_hd</name><operator>-&gt;</operator><name>priv_data</name></name></expr></argument>, <argument><expr><literal type="string">"headers"</literal></expr></argument>, <argument><expr><name>headers</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ffurl_connect</name><argument_list>(<argument><expr><name><name>mms</name><operator>-&gt;</operator><name>mms_hd</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>get_http_header_data</name><argument_list>(<argument><expr><name>mmsh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Get http header data failed!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"Connection successfully open\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>stream_selection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mmsh_close</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"Connection failed with error %d\n"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mmsh_open</name><parameter_list>(<parameter><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>uri</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>mmsh_open_internal</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>handle_chunk_type</name><parameter_list>(<parameter><decl><type><name>MMSHContext</name> <modifier>*</modifier></type><name>mmsh</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MMSContext</name> <modifier>*</modifier></type><name>mms</name> <init>= <expr><operator>&amp;</operator><name><name>mmsh</name><operator>-&gt;</operator><name>mms</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>, <decl><type ref="prev"/><name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ChunkType</name></type> <name>chunk_type</name></decl>;</decl_stmt>

<expr_stmt><expr><name>chunk_type</name> <operator>=</operator> <call><name>get_chunk_header</name><argument_list>(<argument><expr><name>mmsh</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>chunk_type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>CHUNK_TYPE_END</name></expr>:</case>

<expr_stmt><expr><name><name>mmsh</name><operator>-&gt;</operator><name>chunk_seq</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Stream ended!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>CHUNK_TYPE_STREAM_CHANGE</name></expr>:</case>

<expr_stmt><expr><name><name>mms</name><operator>-&gt;</operator><name>header_parsed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>=</operator> <call><name>get_http_header_data</name><argument_list>(<argument><expr><name>mmsh</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,<argument><expr><literal type="string">"Stream changed! Failed to get new header!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>CHUNK_TYPE_DATA</name></expr>:</case>

<return>return <expr><call><name>read_data_packet</name><argument_list>(<argument><expr><name>mmsh</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>

<default>default:</default>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Recv other type packet %d\n"</literal></expr></argument>, <argument><expr><name>chunk_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mmsh_read</name><parameter_list>(<parameter><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MMSHContext</name> <modifier>*</modifier></type><name>mmsh</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MMSContext</name> <modifier>*</modifier></type><name>mms</name> <init>= <expr><operator>&amp;</operator><name><name>mmsh</name><operator>-&gt;</operator><name>mms</name></name></expr></init></decl>;</decl_stmt>

<do>do <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>mms</name><operator>-&gt;</operator><name>asf_header_read_size</name></name> <operator>&lt;</operator> <name><name>mms</name><operator>-&gt;</operator><name>asf_header_size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>ff_mms_read_header</name><argument_list>(<argument><expr><name>mms</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>mms</name><operator>-&gt;</operator><name>remaining_in_len</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name>res</name> <operator>=</operator> <call><name>handle_chunk_type</name><argument_list>(<argument><expr><name>mmsh</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>ff_mms_read_data</name><argument_list>(<argument><expr><name>mms</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block> while <condition>(<expr><operator>!</operator><name>res</name></expr>)</condition>;</do>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64_t</name></type> <name>mmsh_read_seek</name><parameter_list>(<parameter><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stream_index</name></decl></parameter>,

<parameter><decl><type><name>int64_t</name></type> <name>timestamp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MMSHContext</name> <modifier>*</modifier></type><name>mmsh_old</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MMSHContext</name> <modifier>*</modifier></type><name>mmsh</name> <init>= <expr><call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>mmsh</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>mmsh</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>priv_data</name></name> <operator>=</operator> <name>mmsh</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name><operator>=</operator> <call><name>mmsh_open_internal</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name><name>mmsh_old</name><operator>-&gt;</operator><name>location</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>FFMAX</name><argument_list>(<argument><expr><name>timestamp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>ret</name><operator>&gt;=</operator><literal type="number">0</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>priv_data</name></name> <operator>=</operator> <name>mmsh_old</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mmsh_close</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>priv_data</name></name> <operator>=</operator> <name>mmsh</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>mmsh_old</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mmsh</name><operator>-&gt;</operator><name>mms</name><operator>.</operator><name>asf_header_read_size</name></name> <operator>=</operator> <name><name>mmsh</name><operator>-&gt;</operator><name>mms</name><operator>.</operator><name>asf_header_size</name></name></expr>;</expr_stmt>

</block_content>}</block></if><else>else <block>{<block_content>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>priv_data</name></name> <operator>=</operator> <name>mmsh_old</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>mmsh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64_t</name></type> <name>mmsh_seek</name><parameter_list>(<parameter><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>whence</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MMSHContext</name> <modifier>*</modifier></type><name>mmsh</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MMSContext</name> <modifier>*</modifier></type><name>mms</name> <init>= <expr><operator>&amp;</operator><name><name>mmsh</name><operator>-&gt;</operator><name>mms</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>pos</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>whence</name> <operator>==</operator> <name>SEEK_CUR</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>mms</name><operator>-&gt;</operator><name>asf_header_read_size</name></name> <operator>+</operator> <name><name>mms</name><operator>-&gt;</operator><name>remaining_in_len</name></name> <operator>+</operator> <name><name>mmsh</name><operator>-&gt;</operator><name>chunk_seq</name></name> <operator>*</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>mms</name><operator>-&gt;</operator><name>asf_packet_len</name></name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>URLProtocol</name></type> <name>ff_mmsh_protocol</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"mmsh"</literal></expr>,

<expr><operator>.</operator><name>url_open</name> <operator>=</operator> <name>mmsh_open</name></expr>,

<expr><operator>.</operator><name>url_read</name> <operator>=</operator> <name>mmsh_read</name></expr>,

<expr><operator>.</operator><name>url_seek</name> <operator>=</operator> <name>mmsh_seek</name></expr>,

<expr><operator>.</operator><name>url_close</name> <operator>=</operator> <name>mmsh_close</name></expr>,

<expr><operator>.</operator><name>url_read_seek</name> <operator>=</operator> <name>mmsh_read_seek</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>MMSHContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>URL_PROTOCOL_FLAG_NETWORK</name></expr>,

<expr><operator>.</operator><name>default_whitelist</name> <operator>=</operator> <literal type="string">"http,tcp"</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
