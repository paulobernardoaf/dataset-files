



















#ifndef AVFORMAT_AVFORMAT_H
#define AVFORMAT_AVFORMAT_H































































































































































































































































































#include <time.h>
#include <stdio.h> 
#include "libavcodec/avcodec.h"
#include "libavutil/dict.h"
#include "libavutil/log.h"

#include "avio.h"
#include "libavformat/version.h"

struct AVFormatContext;

struct AVDeviceInfoList;
struct AVDeviceCapabilitiesQuery;



























































































int av_get_packet(AVIOContext *s, AVPacket *pkt, int size);
















int av_append_packet(AVIOContext *s, AVPacket *pkt, int size);




struct AVCodecTag;




typedef struct AVProbeData {
const char *filename;
unsigned char *buf; 
int buf_size; 
const char *mime_type; 
} AVProbeData;

#define AVPROBE_SCORE_RETRY (AVPROBE_SCORE_MAX/4)
#define AVPROBE_SCORE_STREAM_RETRY (AVPROBE_SCORE_MAX/4-1)

#define AVPROBE_SCORE_EXTENSION 50 
#define AVPROBE_SCORE_MIME 75 
#define AVPROBE_SCORE_MAX 100 

#define AVPROBE_PADDING_SIZE 32 


#define AVFMT_NOFILE 0x0001
#define AVFMT_NEEDNUMBER 0x0002 
#define AVFMT_SHOW_IDS 0x0008 
#define AVFMT_GLOBALHEADER 0x0040 
#define AVFMT_NOTIMESTAMPS 0x0080 
#define AVFMT_GENERIC_INDEX 0x0100 
#define AVFMT_TS_DISCONT 0x0200 
#define AVFMT_VARIABLE_FPS 0x0400 
#define AVFMT_NODIMENSIONS 0x0800 
#define AVFMT_NOSTREAMS 0x1000 
#define AVFMT_NOBINSEARCH 0x2000 
#define AVFMT_NOGENSEARCH 0x4000 
#define AVFMT_NO_BYTE_SEEK 0x8000 
#define AVFMT_ALLOW_FLUSH 0x10000 
#define AVFMT_TS_NONSTRICT 0x20000 


#define AVFMT_TS_NEGATIVE 0x40000 








#define AVFMT_SEEK_TO_PTS 0x4000000 





typedef struct AVOutputFormat {
const char *name;





const char *long_name;
const char *mime_type;
const char *extensions; 

enum AVCodecID audio_codec; 
enum AVCodecID video_codec; 
enum AVCodecID subtitle_codec; 






int flags;





const struct AVCodecTag * const *codec_tag;


const AVClass *priv_class; 












#if FF_API_AVIOFORMAT
#define ff_const59
#else
#define ff_const59 const
#endif
ff_const59 struct AVOutputFormat *next;



int priv_data_size;

int (*write_header)(struct AVFormatContext *);







int (*write_packet)(struct AVFormatContext *, AVPacket *pkt);
int (*write_trailer)(struct AVFormatContext *);




int (*interleave_packet)(struct AVFormatContext *, AVPacket *out,
AVPacket *in, int flush);







int (*query_codec)(enum AVCodecID id, int std_compliance);

void (*get_output_timestamp)(struct AVFormatContext *s, int stream,
int64_t *dts, int64_t *wall);



int (*control_message)(struct AVFormatContext *s, int type,
void *data, size_t data_size);









int (*write_uncoded_frame)(struct AVFormatContext *, int stream_index,
AVFrame **frame, unsigned flags);




int (*get_device_list)(struct AVFormatContext *s, struct AVDeviceInfoList *device_list);




int (*create_device_capabilities)(struct AVFormatContext *s, struct AVDeviceCapabilitiesQuery *caps);




int (*free_device_capabilities)(struct AVFormatContext *s, struct AVDeviceCapabilitiesQuery *caps);
enum AVCodecID data_codec; 









int (*init)(struct AVFormatContext *);








void (*deinit)(struct AVFormatContext *);





int (*check_bitstream)(struct AVFormatContext *, const AVPacket *pkt);
} AVOutputFormat;








typedef struct AVInputFormat {




const char *name;






const char *long_name;






int flags;






const char *extensions;

const struct AVCodecTag * const *codec_tag;

const AVClass *priv_class; 






const char *mime_type;








ff_const59 struct AVInputFormat *next;




int raw_codec_id;




int priv_data_size;






int (*read_probe)(const AVProbeData *);






int (*read_header)(struct AVFormatContext *);









int (*read_packet)(struct AVFormatContext *, AVPacket *pkt);





int (*read_close)(struct AVFormatContext *);









int (*read_seek)(struct AVFormatContext *,
int stream_index, int64_t timestamp, int flags);





int64_t (*read_timestamp)(struct AVFormatContext *s, int stream_index,
int64_t *pos, int64_t pos_limit);





int (*read_play)(struct AVFormatContext *);





int (*read_pause)(struct AVFormatContext *);







int (*read_seek2)(struct AVFormatContext *s, int stream_index, int64_t min_ts, int64_t ts, int64_t max_ts, int flags);





int (*get_device_list)(struct AVFormatContext *s, struct AVDeviceInfoList *device_list);





int (*create_device_capabilities)(struct AVFormatContext *s, struct AVDeviceCapabilitiesQuery *caps);





int (*free_device_capabilities)(struct AVFormatContext *s, struct AVDeviceCapabilitiesQuery *caps);
} AVInputFormat;




enum AVStreamParseType {
AVSTREAM_PARSE_NONE,
AVSTREAM_PARSE_FULL, 
AVSTREAM_PARSE_HEADERS, 
AVSTREAM_PARSE_TIMESTAMPS, 
AVSTREAM_PARSE_FULL_ONCE, 
AVSTREAM_PARSE_FULL_RAW, 


};

typedef struct AVIndexEntry {
int64_t pos;
int64_t timestamp; 





#define AVINDEX_KEYFRAME 0x0001
#define AVINDEX_DISCARD_FRAME 0x0002 


int flags:2;
int size:30; 
int min_distance; 
} AVIndexEntry;

#define AV_DISPOSITION_DEFAULT 0x0001
#define AV_DISPOSITION_DUB 0x0002
#define AV_DISPOSITION_ORIGINAL 0x0004
#define AV_DISPOSITION_COMMENT 0x0008
#define AV_DISPOSITION_LYRICS 0x0010
#define AV_DISPOSITION_KARAOKE 0x0020






#define AV_DISPOSITION_FORCED 0x0040
#define AV_DISPOSITION_HEARING_IMPAIRED 0x0080 
#define AV_DISPOSITION_VISUAL_IMPAIRED 0x0100 
#define AV_DISPOSITION_CLEAN_EFFECTS 0x0200 







#define AV_DISPOSITION_ATTACHED_PIC 0x0400




#define AV_DISPOSITION_TIMED_THUMBNAILS 0x0800

typedef struct AVStreamInternal AVStreamInternal;




#define AV_DISPOSITION_CAPTIONS 0x10000
#define AV_DISPOSITION_DESCRIPTIONS 0x20000
#define AV_DISPOSITION_METADATA 0x40000
#define AV_DISPOSITION_DEPENDENT 0x80000 
#define AV_DISPOSITION_STILL_IMAGE 0x100000 




#define AV_PTS_WRAP_IGNORE 0 
#define AV_PTS_WRAP_ADD_OFFSET 1 
#define AV_PTS_WRAP_SUB_OFFSET -1 








typedef struct AVStream {
int index; 





int id;
#if FF_API_LAVF_AVCTX



attribute_deprecated
AVCodecContext *codec;
#endif
void *priv_data;













AVRational time_base;









int64_t start_time;









int64_t duration;

int64_t nb_frames; 

int disposition; 

enum AVDiscard discard; 






AVRational sample_aspect_ratio;

AVDictionary *metadata;








AVRational avg_frame_rate;








AVPacket attached_pic;



















AVPacketSideData *side_data;



int nb_side_data;






int event_flags;
#define AVSTREAM_EVENT_FLAG_METADATA_UPDATED 0x0001 









AVRational r_frame_rate;

#if FF_API_LAVF_FFSERVER







attribute_deprecated
char *recommended_encoder_configuration;
#endif










AVCodecParameters *codecpar;











#define MAX_STD_TIMEBASES (30*12+30+3+6)



struct {
int64_t last_dts;
int64_t duration_gcd;
int duration_count;
int64_t rfps_duration_sum;
double (*duration_error)[2][MAX_STD_TIMEBASES];
int64_t codec_info_duration;
int64_t codec_info_duration_fields;
int frame_delay_evidence;






int found_decoder;

int64_t last_duration;




int64_t fps_first_dts;
int fps_first_dts_idx;
int64_t fps_last_dts;
int fps_last_dts_idx;

} *info;

int pts_wrap_bits; 









int64_t first_dts;
int64_t cur_dts;
int64_t last_IP_pts;
int last_IP_duration;




int probe_packets;




int codec_info_nb_frames;


enum AVStreamParseType need_parsing;
struct AVCodecParserContext *parser;




struct AVPacketList *last_in_packet_buffer;
AVProbeData probe_data;
#define MAX_REORDER_DELAY 16
int64_t pts_buffer[MAX_REORDER_DELAY+1];

AVIndexEntry *index_entries; 

int nb_index_entries;
unsigned int index_entries_allocated_size;






int stream_identifier;




int program_num;
int pmt_version;
int pmt_stream_idx;

int64_t interleaver_chunk_size;
int64_t interleaver_chunk_duration;








int request_probe;




int skip_to_keyframe;




int skip_samples;








int64_t start_skip_samples;







int64_t first_discard_sample;






int64_t last_discard_sample;





int nb_decoded_frames;





int64_t mux_ts_offset;




int64_t pts_wrap_reference;











int pts_wrap_behavior;




int update_initial_durations_done;




int64_t pts_reorder_error[MAX_REORDER_DELAY+1];
uint8_t pts_reorder_error_count[MAX_REORDER_DELAY+1];




int64_t last_dts_for_order_check;
uint8_t dts_ordered;
uint8_t dts_misordered;




int inject_global_side_data;






AVRational display_aspect_ratio;





AVStreamInternal *internal;
} AVStream;

#if FF_API_FORMAT_GET_SET




attribute_deprecated
AVRational av_stream_get_r_frame_rate(const AVStream *s);
attribute_deprecated
void av_stream_set_r_frame_rate(AVStream *s, AVRational r);
#if FF_API_LAVF_FFSERVER
attribute_deprecated
char* av_stream_get_recommended_encoder_configuration(const AVStream *s);
attribute_deprecated
void av_stream_set_recommended_encoder_configuration(AVStream *s, char *configuration);
#endif
#endif

struct AVCodecParserContext *av_stream_get_parser(const AVStream *s);






int64_t av_stream_get_end_pts(const AVStream *st);

#define AV_PROGRAM_RUNNING 1







typedef struct AVProgram {
int id;
int flags;
enum AVDiscard discard; 
unsigned int *stream_index;
unsigned int nb_stream_indexes;
AVDictionary *metadata;

int program_num;
int pmt_pid;
int pcr_pid;
int pmt_version;








int64_t start_time;
int64_t end_time;

int64_t pts_wrap_reference; 
int pts_wrap_behavior; 
} AVProgram;

#define AVFMTCTX_NOHEADER 0x0001 

#define AVFMTCTX_UNSEEKABLE 0x0002 





typedef struct AVChapter {
int id; 
AVRational time_base; 
int64_t start, end; 
AVDictionary *metadata;
} AVChapter;





typedef int (*av_format_control_message)(struct AVFormatContext *s, int type,
void *data, size_t data_size);

typedef int (*AVOpenCallback)(struct AVFormatContext *s, AVIOContext **pb, const char *url, int flags,
const AVIOInterruptCB *int_cb, AVDictionary **options);





enum AVDurationEstimationMethod {
AVFMT_DURATION_FROM_PTS, 
AVFMT_DURATION_FROM_STREAM, 
AVFMT_DURATION_FROM_BITRATE 
};

typedef struct AVFormatInternal AVFormatInternal;















typedef struct AVFormatContext {




const AVClass *av_class;






ff_const59 struct AVInputFormat *iformat;






ff_const59 struct AVOutputFormat *oformat;








void *priv_data;













AVIOContext *pb;






int ctx_flags;






unsigned int nb_streams;











AVStream **streams;

#if FF_API_FORMAT_FILENAME








attribute_deprecated
char filename[1024];
#endif














char *url;








int64_t start_time;









int64_t duration;






int64_t bit_rate;

unsigned int packet_size;
int max_delay;





int flags;
#define AVFMT_FLAG_GENPTS 0x0001 
#define AVFMT_FLAG_IGNIDX 0x0002 
#define AVFMT_FLAG_NONBLOCK 0x0004 
#define AVFMT_FLAG_IGNDTS 0x0008 
#define AVFMT_FLAG_NOFILLIN 0x0010 
#define AVFMT_FLAG_NOPARSE 0x0020 
#define AVFMT_FLAG_NOBUFFER 0x0040 
#define AVFMT_FLAG_CUSTOM_IO 0x0080 
#define AVFMT_FLAG_DISCARD_CORRUPT 0x0100 
#define AVFMT_FLAG_FLUSH_PACKETS 0x0200 






#define AVFMT_FLAG_BITEXACT 0x0400
#if FF_API_LAVF_MP4A_LATM
#define AVFMT_FLAG_MP4A_LATM 0x8000 
#endif
#define AVFMT_FLAG_SORT_DTS 0x10000 
#define AVFMT_FLAG_PRIV_OPT 0x20000 
#if FF_API_LAVF_KEEPSIDE_FLAG
#define AVFMT_FLAG_KEEP_SIDE_DATA 0x40000 
#endif
#define AVFMT_FLAG_FAST_SEEK 0x80000 
#define AVFMT_FLAG_SHORTEST 0x100000 
#define AVFMT_FLAG_AUTO_BSF 0x200000 






int64_t probesize;







int64_t max_analyze_duration;

const uint8_t *key;
int keylen;

unsigned int nb_programs;
AVProgram **programs;





enum AVCodecID video_codec_id;





enum AVCodecID audio_codec_id;





enum AVCodecID subtitle_codec_id;











unsigned int max_index_size;





unsigned int max_picture_buffer;












unsigned int nb_chapters;
AVChapter **chapters;









AVDictionary *metadata;












int64_t start_time_realtime;






int fps_probe_size;






int error_recognition;










AVIOInterruptCB interrupt_callback;




int debug;
#define FF_FDEBUG_TS 0x0001

















int64_t max_interleave_delta;





int strict_std_compliance;






int event_flags;
#define AVFMT_EVENT_FLAG_METADATA_UPDATED 0x0001 





int max_ts_probe;








int avoid_negative_ts;
#define AVFMT_AVOID_NEG_TS_AUTO -1 
#define AVFMT_AVOID_NEG_TS_MAKE_NON_NEGATIVE 1 
#define AVFMT_AVOID_NEG_TS_MAKE_ZERO 2 





int ts_id;







int audio_preload;







int max_chunk_duration;







int max_chunk_size;







int use_wallclock_as_timestamps;






int avio_flags;







enum AVDurationEstimationMethod duration_estimation_method;






int64_t skip_initial_bytes;






unsigned int correct_ts_overflow;






int seek2any;






int flush_packets;








int probe_score;






int format_probesize;







char *codec_whitelist;







char *format_whitelist;





AVFormatInternal *internal;







int io_repositioned;







AVCodec *video_codec;







AVCodec *audio_codec;







AVCodec *subtitle_codec;







AVCodec *data_codec;






int metadata_header_padding;





void *opaque;




av_format_control_message control_message_cb;





int64_t output_ts_offset;







uint8_t *dump_separator;





enum AVCodecID data_codec_id;

#if FF_API_OLD_OPEN_CALLBACKS

















attribute_deprecated
int (*open_cb)(struct AVFormatContext *s, AVIOContext **p, const char *url, int flags, const AVIOInterruptCB *int_cb, AVDictionary **options);
#endif






char *protocol_whitelist;





















int (*io_open)(struct AVFormatContext *s, AVIOContext **pb, const char *url,
int flags, AVDictionary **options);




void (*io_close)(struct AVFormatContext *s, AVIOContext *pb);






char *protocol_blacklist;






int max_streams;






int skip_estimate_duration_from_pts;






int max_probe_packets;
} AVFormatContext;

#if FF_API_FORMAT_GET_SET




attribute_deprecated
int av_format_get_probe_score(const AVFormatContext *s);
attribute_deprecated
AVCodec * av_format_get_video_codec(const AVFormatContext *s);
attribute_deprecated
void av_format_set_video_codec(AVFormatContext *s, AVCodec *c);
attribute_deprecated
AVCodec * av_format_get_audio_codec(const AVFormatContext *s);
attribute_deprecated
void av_format_set_audio_codec(AVFormatContext *s, AVCodec *c);
attribute_deprecated
AVCodec * av_format_get_subtitle_codec(const AVFormatContext *s);
attribute_deprecated
void av_format_set_subtitle_codec(AVFormatContext *s, AVCodec *c);
attribute_deprecated
AVCodec * av_format_get_data_codec(const AVFormatContext *s);
attribute_deprecated
void av_format_set_data_codec(AVFormatContext *s, AVCodec *c);
attribute_deprecated
int av_format_get_metadata_header_padding(const AVFormatContext *s);
attribute_deprecated
void av_format_set_metadata_header_padding(AVFormatContext *s, int c);
attribute_deprecated
void * av_format_get_opaque(const AVFormatContext *s);
attribute_deprecated
void av_format_set_opaque(AVFormatContext *s, void *opaque);
attribute_deprecated
av_format_control_message av_format_get_control_message_cb(const AVFormatContext *s);
attribute_deprecated
void av_format_set_control_message_cb(AVFormatContext *s, av_format_control_message callback);
#if FF_API_OLD_OPEN_CALLBACKS
attribute_deprecated AVOpenCallback av_format_get_open_cb(const AVFormatContext *s);
attribute_deprecated void av_format_set_open_cb(AVFormatContext *s, AVOpenCallback callback);
#endif
#endif





void av_format_inject_global_side_data(AVFormatContext *s);






enum AVDurationEstimationMethod av_fmt_ctx_get_duration_estimation_method(const AVFormatContext* ctx);

typedef struct AVPacketList {
AVPacket pkt;
struct AVPacketList *next;
} AVPacketList;














unsigned avformat_version(void);




const char *avformat_configuration(void);




const char *avformat_license(void);

#if FF_API_NEXT








attribute_deprecated
void av_register_all(void);

attribute_deprecated
void av_register_input_format(AVInputFormat *format);
attribute_deprecated
void av_register_output_format(AVOutputFormat *format);
#endif















int avformat_network_init(void);





int avformat_network_deinit(void);

#if FF_API_NEXT





attribute_deprecated
AVInputFormat *av_iformat_next(const AVInputFormat *f);






attribute_deprecated
AVOutputFormat *av_oformat_next(const AVOutputFormat *f);
#endif










const AVOutputFormat *av_muxer_iterate(void **opaque);










const AVInputFormat *av_demuxer_iterate(void **opaque);






AVFormatContext *avformat_alloc_context(void);





void avformat_free_context(AVFormatContext *s);







const AVClass *avformat_get_class(void);




















AVStream *avformat_new_stream(AVFormatContext *s, const AVCodec *c);













int av_stream_add_side_data(AVStream *st, enum AVPacketSideDataType type,
uint8_t *data, size_t size);









uint8_t *av_stream_new_side_data(AVStream *stream,
enum AVPacketSideDataType type, int size);








uint8_t *av_stream_get_side_data(const AVStream *stream,
enum AVPacketSideDataType type, int *size);

AVProgram *av_new_program(AVFormatContext *s, int id);






















int avformat_alloc_output_context2(AVFormatContext **ctx, ff_const59 AVOutputFormat *oformat,
const char *format_name, const char *filename);









ff_const59 AVInputFormat *av_find_input_format(const char *short_name);








ff_const59 AVInputFormat *av_probe_input_format(ff_const59 AVProbeData *pd, int is_opened);













ff_const59 AVInputFormat *av_probe_input_format2(ff_const59 AVProbeData *pd, int is_opened, int *score_max);








ff_const59 AVInputFormat *av_probe_input_format3(ff_const59 AVProbeData *pd, int is_opened, int *score_ret);

















int av_probe_input_buffer2(AVIOContext *pb, ff_const59 AVInputFormat **fmt,
const char *url, void *logctx,
unsigned int offset, unsigned int max_probe_size);




int av_probe_input_buffer(AVIOContext *pb, ff_const59 AVInputFormat **fmt,
const char *url, void *logctx,
unsigned int offset, unsigned int max_probe_size);




















int avformat_open_input(AVFormatContext **ps, const char *url, ff_const59 AVInputFormat *fmt, AVDictionary **options);

attribute_deprecated
int av_demuxer_open(AVFormatContext *ic);






















int avformat_find_stream_info(AVFormatContext *ic, AVDictionary **options);











AVProgram *av_find_program_from_stream(AVFormatContext *ic, AVProgram *last, int s);

void av_program_add_stream_index(AVFormatContext *ac, int progid, unsigned int idx);

























int av_find_best_stream(AVFormatContext *ic,
enum AVMediaType type,
int wanted_stream_nb,
int related_stream,
AVCodec **decoder_ret,
int flags);




























int av_read_frame(AVFormatContext *s, AVPacket *pkt);














int av_seek_frame(AVFormatContext *s, int stream_index, int64_t timestamp,
int flags);



























int avformat_seek_file(AVFormatContext *s, int stream_index, int64_t min_ts, int64_t ts, int64_t max_ts, int flags);

















int avformat_flush(AVFormatContext *s);





int av_read_play(AVFormatContext *s);






int av_read_pause(AVFormatContext *s);





void avformat_close_input(AVFormatContext **s);




#define AVSEEK_FLAG_BACKWARD 1 
#define AVSEEK_FLAG_BYTE 2 
#define AVSEEK_FLAG_ANY 4 
#define AVSEEK_FLAG_FRAME 8 






#define AVSTREAM_INIT_IN_WRITE_HEADER 0 
#define AVSTREAM_INIT_IN_INIT_OUTPUT 1 


















av_warn_unused_result
int avformat_write_header(AVFormatContext *s, AVDictionary **options);




















av_warn_unused_result
int avformat_init_output(AVFormatContext *s, AVDictionary **options);






































int av_write_frame(AVFormatContext *s, AVPacket *pkt);












































int av_interleaved_write_frame(AVFormatContext *s, AVPacket *pkt);









int av_write_uncoded_frame(AVFormatContext *s, int stream_index,
AVFrame *frame);

















int av_interleaved_write_uncoded_frame(AVFormatContext *s, int stream_index,
AVFrame *frame);







int av_write_uncoded_frame_query(AVFormatContext *s, int stream_index);










int av_write_trailer(AVFormatContext *s);













ff_const59 AVOutputFormat *av_guess_format(const char *short_name,
const char *filename,
const char *mime_type);




enum AVCodecID av_guess_codec(ff_const59 AVOutputFormat *fmt, const char *short_name,
const char *filename, const char *mime_type,
enum AVMediaType type);
















int av_get_output_timestamp(struct AVFormatContext *s, int stream,
int64_t *dts, int64_t *wall);

























void av_hex_dump(FILE *f, const uint8_t *buf, int size);













void av_hex_dump_log(void *avcl, int level, const uint8_t *buf, int size);









void av_pkt_dump2(FILE *f, const AVPacket *pkt, int dump_payload, const AVStream *st);













void av_pkt_dump_log2(void *avcl, int level, const AVPacket *pkt, int dump_payload,
const AVStream *st);









enum AVCodecID av_codec_get_id(const struct AVCodecTag * const *tags, unsigned int tag);









unsigned int av_codec_get_tag(const struct AVCodecTag * const *tags, enum AVCodecID id);










int av_codec_get_tag2(const struct AVCodecTag * const *tags, enum AVCodecID id,
unsigned int *tag);

int av_find_default_stream_index(AVFormatContext *s);












int av_index_search_timestamp(AVStream *st, int64_t timestamp, int flags);







int av_add_index_entry(AVStream *st, int64_t pos, int64_t timestamp,
int size, int distance, int flags);





















void av_url_split(char *proto, int proto_size,
char *authorization, int authorization_size,
char *hostname, int hostname_size,
int *port_ptr,
char *path, int path_size,
const char *url);












void av_dump_format(AVFormatContext *ic,
int index,
const char *url,
int is_output);


#define AV_FRAME_FILENAME_FLAGS_MULTIPLE 1 














int av_get_frame_filename2(char *buf, int buf_size,
const char *path, int number, int flags);

int av_get_frame_filename(char *buf, int buf_size,
const char *path, int number);







int av_filename_number_test(const char *filename);


















int av_sdp_create(AVFormatContext *ac[], int n_files, char *buf, int size);








int av_match_ext(const char *filename, const char *extensions);











int avformat_query_codec(const AVOutputFormat *ofmt, enum AVCodecID codec_id,
int std_compliance);
















const struct AVCodecTag *avformat_get_riff_video_tags(void);



const struct AVCodecTag *avformat_get_riff_audio_tags(void);



const struct AVCodecTag *avformat_get_mov_video_tags(void);



const struct AVCodecTag *avformat_get_mov_audio_tags(void);






















AVRational av_guess_sample_aspect_ratio(AVFormatContext *format, AVStream *stream, AVFrame *frame);









AVRational av_guess_frame_rate(AVFormatContext *ctx, AVStream *stream, AVFrame *frame);














int avformat_match_stream_specifier(AVFormatContext *s, AVStream *st,
const char *spec);

int avformat_queue_attached_pictures(AVFormatContext *s);

#if FF_API_OLD_BSF











attribute_deprecated
int av_apply_bitstream_filters(AVCodecContext *codec, AVPacket *pkt,
AVBitStreamFilterContext *bsfc);
#endif

enum AVTimebaseSource {
AVFMT_TBCF_AUTO = -1,
AVFMT_TBCF_DECODER,
AVFMT_TBCF_DEMUXER,
#if FF_API_R_FRAME_RATE
AVFMT_TBCF_R_FRAMERATE,
#endif
};











int avformat_transfer_internal_stream_timing_info(const AVOutputFormat *ofmt,
AVStream *ost, const AVStream *ist,
enum AVTimebaseSource copy_tb);






AVRational av_stream_get_codec_timebase(const AVStream *st);





#endif 
