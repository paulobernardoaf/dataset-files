<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavformat\dss.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/channel_layout.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avformat.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DSS_HEAD_OFFSET_AUTHOR</name></cpp:macro> <cpp:value>0xc</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DSS_AUTHOR_SIZE</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DSS_HEAD_OFFSET_START_TIME</name></cpp:macro> <cpp:value>0x26</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DSS_HEAD_OFFSET_END_TIME</name></cpp:macro> <cpp:value>0x32</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DSS_TIME_SIZE</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DSS_HEAD_OFFSET_ACODEC</name></cpp:macro> <cpp:value>0x2a4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DSS_ACODEC_DSS_SP</name></cpp:macro> <cpp:value>0x0</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DSS_ACODEC_G723_1</name></cpp:macro> <cpp:value>0x2</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DSS_HEAD_OFFSET_COMMENT</name></cpp:macro> <cpp:value>0x31e</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DSS_COMMENT_SIZE</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DSS_BLOCK_SIZE</name></cpp:macro> <cpp:value>512</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DSS_AUDIO_BLOCK_HEADER_SIZE</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DSS_FRAME_SIZE</name></cpp:macro> <cpp:value>42</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>frame_size</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">24</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct <name>DSSDemuxContext</name> <block>{

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>audio_codec</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>counter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>swap</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dss_sp_swap_byte</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int8_t</name></type> <name><name>dss_sp_buf</name><index>[<expr><name>DSS_FRAME_SIZE</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>packet_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dss_header_size</name></decl>;</decl_stmt>

}</block></struct></type> <name>DSSDemuxContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dss_probe</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVProbeData</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><call><name>AV_RL32</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="number">0x2</literal></expr></argument>, <argument><expr><literal type="char">'d'</literal></expr></argument>, <argument><expr><literal type="char">'s'</literal></expr></argument>, <argument><expr><literal type="char">'s'</literal></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <call><name>AV_RL32</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="number">0x3</literal></expr></argument>, <argument><expr><literal type="char">'d'</literal></expr></argument>, <argument><expr><literal type="char">'s'</literal></expr></argument>, <argument><expr><literal type="char">'s'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>AVPROBE_SCORE_MAX</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dss_read_metadata_date</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>offset</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>datetime</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>string</name><index>[<expr><name>DSS_TIME_SIZE</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>, <decl><type ref="prev"/><name>month</name></decl>, <decl><type ref="prev"/><name>d</name></decl>, <decl><type ref="prev"/><name>h</name></decl>, <decl><type ref="prev"/><name>minute</name></decl>, <decl><type ref="prev"/><name>sec</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avio_read</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>string</name></expr></argument>, <argument><expr><name>DSS_TIME_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <name>DSS_TIME_SIZE</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><ternary><condition><expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>ret</name></expr> </then><else>: <expr><name>AVERROR_EOF</name></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>sscanf</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><literal type="string">"%2d%2d%2d%2d%2d%2d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>month</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>d</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>minute</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sec</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">6</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>datetime</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>datetime</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%.4d-%.2d-%.2dT%.2d:%.2d:%.2d"</literal></expr></argument>,

<argument><expr><name>y</name> <operator>+</operator> <literal type="number">2000</literal></expr></argument>, <argument><expr><name>month</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>minute</name></expr></argument>, <argument><expr><name>sec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>datetime</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dss_read_metadata_string</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>offset</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><name>size</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avio_read</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <name>size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>ret</name></expr> </then><else>: <expr><name>AVERROR_EOF</name></expr></else></ternary></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>AV_DICT_DONT_STRDUP_VAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dss_read_header</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>DSSDemuxContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>version</name></decl>;</decl_stmt>

<expr_stmt><expr><name>st</name> <operator>=</operator> <call><name>avformat_new_stream</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>st</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>version</name> <operator>=</operator> <call><name>avio_r8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>dss_header_size</name></name> <operator>=</operator> <name>version</name> <operator>*</operator> <name>DSS_BLOCK_SIZE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>dss_read_metadata_string</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>DSS_HEAD_OFFSET_AUTHOR</name></expr></argument>,

<argument><expr><name>DSS_AUTHOR_SIZE</name></expr></argument>, <argument><expr><literal type="string">"author"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>dss_read_metadata_date</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>DSS_HEAD_OFFSET_END_TIME</name></expr></argument>, <argument><expr><literal type="string">"date"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>dss_read_metadata_string</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>DSS_HEAD_OFFSET_COMMENT</name></expr></argument>,

<argument><expr><name>DSS_COMMENT_SIZE</name></expr></argument>, <argument><expr><literal type="string">"comment"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>DSS_HEAD_OFFSET_ACODEC</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>audio_codec</name></name> <operator>=</operator> <call><name>avio_r8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>audio_codec</name></name> <operator>==</operator> <name>DSS_ACODEC_DSS_SP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>=</operator> <name>AV_CODEC_ID_DSS_SP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>=</operator> <literal type="number">11025</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>audio_codec</name></name> <operator>==</operator> <name>DSS_ACODEC_G723_1</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>=</operator> <name>AV_CODEC_ID_G723_1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>=</operator> <literal type="number">8000</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>avpriv_request_sample</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"Support for codec %x in DSS"</literal></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>audio_codec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>channel_layout</name></name> <operator>=</operator> <name>AV_CH_LAYOUT_MONO</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avpriv_set_pts_info</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>start_time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>avio_seek</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>dss_header_size</name></name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>dss_header_size</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>counter</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>swap</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dss_skip_audio_header</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>DSSDemuxContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>DSS_AUDIO_BLOCK_HEADER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>counter</name></name> <operator>+=</operator> <name>DSS_BLOCK_SIZE</name> <operator>-</operator> <name>DSS_AUDIO_BLOCK_HEADER_SIZE</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dss_sp_byte_swap</name><parameter_list>(<parameter><decl><type><name>DSSDemuxContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>swap</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">3</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>DSS_FRAME_SIZE</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>src</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>DSS_FRAME_SIZE</name> <operator>-</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>src</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>dss_sp_swap_byte</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>DSS_FRAME_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>dss_sp_swap_byte</name></name> <operator>=</operator> <name><name>src</name><index>[<expr><name>DSS_FRAME_SIZE</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>DSS_FRAME_SIZE</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>swap</name></name> <operator>^=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dss_sp_read_packet</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>DSSDemuxContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>read_size</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>, <decl><type ref="prev"/><name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>buff_offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>pos</name> <init>= <expr><call><name>avio_tell</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>counter</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>dss_skip_audio_header</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>swap</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>read_size</name> <operator>=</operator> <name>DSS_FRAME_SIZE</name> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>buff_offset</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>read_size</name> <operator>=</operator> <name>DSS_FRAME_SIZE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>counter</name></name> <operator>-=</operator> <name>read_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>packet_size</name></name> <operator>=</operator> <name>DSS_FRAME_SIZE</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_new_packet</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>DSS_FRAME_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>duration</name></name> <operator>=</operator> <literal type="number">264</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>stream_index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>=</operator> <literal type="number">8LL</literal> <operator>*</operator> <name><name>ctx</name><operator>-&gt;</operator><name>packet_size</name></name> <operator>*</operator> <name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>*</operator> <literal type="number">512</literal> <operator>/</operator> <operator>(</operator><literal type="number">506</literal> <operator>*</operator> <name><name>pkt</name><operator>-&gt;</operator><name>duration</name></name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>counter</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>size2</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>counter</name></name> <operator>+</operator> <name>read_size</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avio_read</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>dss_sp_buf</name></name> <operator>+</operator> <name>offset</name> <operator>+</operator> <name>buff_offset</name></expr></argument>,

<argument><expr><name>size2</name> <operator>-</operator> <name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <name>size2</name> <operator>-</operator> <name>offset</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error_eof</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>dss_skip_audio_header</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <name>size2</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avio_read</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>dss_sp_buf</name></name> <operator>+</operator> <name>offset</name> <operator>+</operator> <name>buff_offset</name></expr></argument>,

<argument><expr><name>read_size</name> <operator>-</operator> <name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <name>read_size</name> <operator>-</operator> <name>offset</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error_eof</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>dss_sp_byte_swap</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>dss_sp_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>dss_sp_swap_byte</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>

<label><name>error_eof</name>:</label>

<return>return <expr><ternary><condition><expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>ret</name></expr> </then><else>: <expr><name>AVERROR_EOF</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dss_723_1_read_packet</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>DSSDemuxContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>, <decl><type ref="prev"/><name>byte</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>, <decl><type ref="prev"/><name>offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>pos</name> <init>= <expr><call><name>avio_tell</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>counter</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>dss_skip_audio_header</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>byte</name> <operator>=</operator> <call><name>avio_r8</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>byte</name> <operator>==</operator> <literal type="number">0xff</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <name><name>frame_size</name><index>[<expr><name>byte</name> <operator>&amp;</operator> <literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>packet_size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>counter</name></name> <operator>-=</operator> <name>size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_new_packet</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>byte</name></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>duration</name></name> <operator>=</operator> <literal type="number">240</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>=</operator> <literal type="number">8LL</literal> <operator>*</operator> <name>size</name> <operator>*</operator> <name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>*</operator> <literal type="number">512</literal> <operator>/</operator> <operator>(</operator><literal type="number">506</literal> <operator>*</operator> <name><name>pkt</name><operator>-&gt;</operator><name>duration</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>stream_index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>counter</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>size2</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>counter</name></name> <operator>+</operator> <name>size</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avio_read</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>offset</name></expr></argument>,

<argument><expr><name>size2</name> <operator>-</operator> <name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <name>size2</name> <operator>-</operator> <name>offset</name></expr>)</condition> <block>{<block_content>

<return>return <expr><ternary><condition><expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>ret</name></expr> </then><else>: <expr><name>AVERROR_EOF</name></expr></else></ternary></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>dss_skip_audio_header</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <name>size2</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avio_read</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>size</name> <operator>-</operator> <name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <name>size</name> <operator>-</operator> <name>offset</name></expr>)</condition> <block>{<block_content>

<return>return <expr><ternary><condition><expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>ret</name></expr> </then><else>: <expr><name>AVERROR_EOF</name></expr></else></ternary></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dss_read_packet</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>DSSDemuxContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>audio_codec</name></name> <operator>==</operator> <name>DSS_ACODEC_DSS_SP</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>dss_sp_read_packet</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><call><name>dss_723_1_read_packet</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dss_read_seek</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stream_index</name></decl></parameter>,

<parameter><decl><type><name>int64_t</name></type> <name>timestamp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>DSSDemuxContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>seekto</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>header</name><index>[<expr><name>DSS_AUDIO_BLOCK_HEADER_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>offset</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>audio_codec</name></name> <operator>==</operator> <name>DSS_ACODEC_DSS_SP</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>seekto</name> <operator>=</operator> <name>timestamp</name> <operator>/</operator> <literal type="number">264</literal> <operator>*</operator> <literal type="number">41</literal> <operator>/</operator> <literal type="number">506</literal> <operator>*</operator> <literal type="number">512</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>seekto</name> <operator>=</operator> <name>timestamp</name> <operator>/</operator> <literal type="number">240</literal> <operator>*</operator> <name><name>ctx</name><operator>-&gt;</operator><name>packet_size</name></name> <operator>/</operator> <literal type="number">506</literal> <operator>*</operator> <literal type="number">512</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>seekto</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>seekto</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>seekto</name> <operator>+=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>dss_header_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avio_seek</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>seekto</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>avio_read</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>header</name></expr></argument>, <argument><expr><name>DSS_AUDIO_BLOCK_HEADER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>swap</name></name> <operator>=</operator> <operator>!</operator><operator>!</operator><operator>(</operator><name><name>header</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <literal type="number">2</literal><operator>*</operator><name><name>header</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name><name>ctx</name><operator>-&gt;</operator><name>swap</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&lt;</operator> <name>DSS_AUDIO_BLOCK_HEADER_SIZE</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>==</operator> <name>DSS_AUDIO_BLOCK_HEADER_SIZE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>counter</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>avio_skip</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><operator>-</operator><name>DSS_AUDIO_BLOCK_HEADER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>counter</name></name> <operator>=</operator> <name>DSS_BLOCK_SIZE</name> <operator>-</operator> <name>offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>avio_skip</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>offset</name> <operator>-</operator> <name>DSS_AUDIO_BLOCK_HEADER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>dss_sp_swap_byte</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name>AVInputFormat</name></type> <name>ff_dss_demuxer</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"dss"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Digital Speech Standard (DSS)"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>DSSDemuxContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>read_probe</name> <operator>=</operator> <name>dss_probe</name></expr>,

<expr><operator>.</operator><name>read_header</name> <operator>=</operator> <name>dss_read_header</name></expr>,

<expr><operator>.</operator><name>read_packet</name> <operator>=</operator> <name>dss_read_packet</name></expr>,

<expr><operator>.</operator><name>read_seek</name> <operator>=</operator> <name>dss_read_seek</name></expr>,

<expr><operator>.</operator><name>extensions</name> <operator>=</operator> <literal type="string">"dss"</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

</unit>
