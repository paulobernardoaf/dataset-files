<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavformat\uncodedframecrcenc.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/adler32.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/bprint.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/imgutils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixdesc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avformat.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFINE_CKSUM_LINE</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>type</name></type></parameter>, <parameter><type><name>conv</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void cksum_line_ ##name(unsigned *cksum, void *data, unsigned size) { type *p = data; unsigned a = *cksum &amp; 0xFFFF, b = *cksum &gt;&gt; 16; for (; size &gt; 0; size--, p++) { a = (a + (unsigned)(conv)) % 65521; b = (b + a) % 65521; } *cksum = a | (b &lt;&lt; 16); }</cpp:value></cpp:define>

<macro><name>DEFINE_CKSUM_LINE</name><argument_list>(<argument>u8</argument>, <argument>uint8_t</argument>, <argument>*p</argument>)</argument_list></macro>

<macro><name>DEFINE_CKSUM_LINE</name><argument_list>(<argument>s16</argument>, <argument>int16_t</argument>, <argument>*p + <literal type="number">0x8000</literal></argument>)</argument_list></macro>

<macro><name>DEFINE_CKSUM_LINE</name><argument_list>(<argument>s32</argument>, <argument>int32_t</argument>, <argument>*p + <literal type="number">0x80000000</literal></argument>)</argument_list></macro>

<macro><name>DEFINE_CKSUM_LINE</name><argument_list>(<argument>flt</argument>, <argument>float</argument>, <argument>*p * <literal type="number">0x80000000</literal> + <literal type="number">0x80000000</literal></argument>)</argument_list></macro>

<macro><name>DEFINE_CKSUM_LINE</name><argument_list>(<argument>dbl</argument>, <argument>double</argument>, <argument>*p * <literal type="number">0x80000000</literal> + <literal type="number">0x80000000</literal></argument>)</argument_list></macro>

<function><type><specifier>static</specifier> <name>void</name></type> <name>video_frame_cksum</name><parameter_list>(<parameter><decl><type><name>AVBPrint</name> <modifier>*</modifier></type><name>bp</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>linesize</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><name>bp</name></expr></argument>, <argument><expr><literal type="string">", %d x %d"</literal></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>desc</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><name>bp</name></expr></argument>, <argument><expr><literal type="string">", unknown"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_image_fill_linesizes</name><argument_list>(<argument><expr><name>linesize</name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>width</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><name>bp</name></expr></argument>, <argument><expr><literal type="string">", %s"</literal></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>cksum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>h</name> <init>= <expr><name><name>frame</name><operator>-&gt;</operator><name>height</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>i</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name>i</name> <operator>==</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>desc</name><operator>-&gt;</operator><name>nb_components</name></name> <operator>&gt;=</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>cksum</name> <operator>=</operator> <call><name>av_adler32_update</name><argument_list>(<argument><expr><name>cksum</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>data</name> <operator>+=</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><name>bp</name></expr></argument>, <argument><expr><literal type="string">", 0x%08x"</literal></expr></argument>, <argument><expr><name>cksum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>audio_frame_cksum</name><parameter_list>(<parameter><decl><type><name>AVBPrint</name> <modifier>*</modifier></type><name>bp</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>nb_planes</name></decl>, <decl><type ref="prev"/><name>nb_samples</name></decl>, <decl><type ref="prev"/><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<expr_stmt><expr><name>nb_planes</name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>nb_samples</name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>av_sample_fmt_is_planar</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>nb_samples</name> <operator>*=</operator> <name>nb_planes</name></expr>;</expr_stmt>

<expr_stmt><expr><name>nb_planes</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>av_get_sample_fmt_name</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><name>bp</name></expr></argument>, <argument><expr><literal type="string">", %d samples"</literal></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><name>bp</name></expr></argument>, <argument><expr><literal type="string">", %s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>name</name></expr> ?</condition><then> <expr><name>name</name></expr> </then><else>: <expr><literal type="string">"unknown"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>nb_planes</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>cksum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><name><name>frame</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><name>p</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>frame</name><operator>-&gt;</operator><name>format</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_SAMPLE_FMT_U8</name></expr>:</case>

<case>case <expr><name>AV_SAMPLE_FMT_U8P</name></expr>:</case>

<expr_stmt><expr><call><name>cksum_line_u8</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cksum</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>nb_samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_SAMPLE_FMT_S16</name></expr>:</case>

<case>case <expr><name>AV_SAMPLE_FMT_S16P</name></expr>:</case>

<expr_stmt><expr><call><name>cksum_line_s16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cksum</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>nb_samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_SAMPLE_FMT_S32</name></expr>:</case>

<case>case <expr><name>AV_SAMPLE_FMT_S32P</name></expr>:</case>

<expr_stmt><expr><call><name>cksum_line_s32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cksum</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>nb_samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_SAMPLE_FMT_FLT</name></expr>:</case>

<case>case <expr><name>AV_SAMPLE_FMT_FLTP</name></expr>:</case>

<expr_stmt><expr><call><name>cksum_line_flt</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cksum</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>nb_samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_SAMPLE_FMT_DBL</name></expr>:</case>

<case>case <expr><name>AV_SAMPLE_FMT_DBLP</name></expr>:</case>

<expr_stmt><expr><call><name>cksum_line_dbl</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cksum</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>nb_samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><operator>!</operator><literal type="string">"reached"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><name>bp</name></expr></argument>, <argument><expr><literal type="string">", 0x%08"</literal><name>PRIx32</name></expr></argument>, <argument><expr><name>cksum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>write_header</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>AVFormatContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>ff_framehash_write_header</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>write_frame</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>AVFormatContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stream_index</name></decl></parameter>,

<parameter><decl><type><name>AVFrame</name> <modifier>*</modifier><modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVBPrint</name></type> <name>bp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>AVMediaType</name></name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>type_name</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>AV_WRITE_UNCODED_FRAME_QUERY</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_bprint_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>AV_BPRINT_SIZE_UNLIMITED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bp</name></expr></argument>, <argument><expr><literal type="string">"%d, %10"</literal><name>PRId64</name><literal type="string">""</literal></expr></argument>,

<argument><expr><name>stream_index</name></expr></argument>, <argument><expr><name><operator>(</operator><operator>*</operator><name>frame</name><operator>)</operator><operator>-&gt;</operator><name>pts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>stream_index</name></expr>]</index></name><operator>-&gt;</operator><name><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>type_name</name> <operator>=</operator> <call><name>av_get_media_type_string</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bp</name></expr></argument>, <argument><expr><literal type="string">", %s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>type_name</name></expr> ?</condition><then> <expr><name>type_name</name></expr> </then><else>: <expr><literal type="string">"unknown"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AVMEDIA_TYPE_VIDEO</name></expr>:</case>

<expr_stmt><expr><call><name>video_frame_cksum</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bp</name></expr></argument>, <argument><expr><operator>*</operator><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AVMEDIA_TYPE_AUDIO</name></expr>:</case>

<expr_stmt><expr><call><name>audio_frame_cksum</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bp</name></expr></argument>, <argument><expr><operator>*</operator><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>av_bprint_chars</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bp</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_bprint_is_complete</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name><name>bp</name><operator>.</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>bp</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>av_bprint_finalize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>write_packet</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>AVFormatContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name>AVOutputFormat</name></type> <name>ff_uncodedframecrc_muxer</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"uncodedframecrc"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"uncoded framecrc testing"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>audio_codec</name> <operator>=</operator> <name>AV_CODEC_ID_PCM_S16LE</name></expr>,

<expr><operator>.</operator><name>video_codec</name> <operator>=</operator> <name>AV_CODEC_ID_RAWVIDEO</name></expr>,

<expr><operator>.</operator><name>write_header</name> <operator>=</operator> <name>write_header</name></expr>,

<expr><operator>.</operator><name>write_packet</name> <operator>=</operator> <name>write_packet</name></expr>,

<expr><operator>.</operator><name>write_uncoded_frame</name> <operator>=</operator> <name>write_frame</name></expr>,

<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>AVFMT_VARIABLE_FPS</name> <operator>|</operator> <name>AVFMT_TS_NONSTRICT</name> <operator>|</operator>

<name>AVFMT_TS_NEGATIVE</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
