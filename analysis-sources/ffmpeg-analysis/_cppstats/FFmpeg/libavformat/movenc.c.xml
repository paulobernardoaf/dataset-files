<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavformat\movenc.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"movenc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avformat.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avio_internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"riff.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avio.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"isom.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"av1.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/ac3_parser_internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/dnxhddata.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/flac.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/get_bits.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/put_bits.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/vc1_common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/raw.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avstring.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intfloat.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mathematics.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/libm.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/dict.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixdesc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/stereo3d.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/timecode.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/color_utils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hevc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rtpenc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mov_chan.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vpcc.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>options</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"movflags"</literal></expr>, <expr><literal type="string">"MOV muxer flags"</literal></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>MOVMuxContext</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLAGS</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>AV_OPT_FLAG_ENCODING_PARAM</name></expr>, <expr><literal type="string">"movflags"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"rtphint"</literal></expr>, <expr><literal type="string">"Add RTP hint tracks"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>FF_MOV_FLAG_RTP_HINT</name></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>AV_OPT_FLAG_ENCODING_PARAM</name></expr>, <expr><literal type="string">"movflags"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"moov_size"</literal></expr>, <expr><literal type="string">"maximum moov size so it can be placed at the begin"</literal></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>MOVMuxContext</name></expr></argument>, <argument><expr><name>reserved_moov_size</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>AV_OPT_FLAG_ENCODING_PARAM</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"empty_moov"</literal></expr>, <expr><literal type="string">"Make the initial moov atom empty"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>FF_MOV_FLAG_EMPTY_MOOV</name></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>AV_OPT_FLAG_ENCODING_PARAM</name></expr>, <expr><literal type="string">"movflags"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"frag_keyframe"</literal></expr>, <expr><literal type="string">"Fragment at video keyframes"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>FF_MOV_FLAG_FRAG_KEYFRAME</name></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>AV_OPT_FLAG_ENCODING_PARAM</name></expr>, <expr><literal type="string">"movflags"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"frag_every_frame"</literal></expr>, <expr><literal type="string">"Fragment at every frame"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>FF_MOV_FLAG_FRAG_EVERY_FRAME</name></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>AV_OPT_FLAG_ENCODING_PARAM</name></expr>, <expr><literal type="string">"movflags"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"separate_moof"</literal></expr>, <expr><literal type="string">"Write separate moof/mdat atoms for each track"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>FF_MOV_FLAG_SEPARATE_MOOF</name></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>AV_OPT_FLAG_ENCODING_PARAM</name></expr>, <expr><literal type="string">"movflags"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"frag_custom"</literal></expr>, <expr><literal type="string">"Flush fragments on caller requests"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>FF_MOV_FLAG_FRAG_CUSTOM</name></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>AV_OPT_FLAG_ENCODING_PARAM</name></expr>, <expr><literal type="string">"movflags"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"isml"</literal></expr>, <expr><literal type="string">"Create a live smooth streaming feed (for pushing to a publishing point)"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>FF_MOV_FLAG_ISML</name></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>AV_OPT_FLAG_ENCODING_PARAM</name></expr>, <expr><literal type="string">"movflags"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"faststart"</literal></expr>, <expr><literal type="string">"Run a second pass to put the index (moov atom) at the beginning of the file"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>FF_MOV_FLAG_FASTSTART</name></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>AV_OPT_FLAG_ENCODING_PARAM</name></expr>, <expr><literal type="string">"movflags"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"omit_tfhd_offset"</literal></expr>, <expr><literal type="string">"Omit the base data offset in tfhd atoms"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>FF_MOV_FLAG_OMIT_TFHD_OFFSET</name></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>AV_OPT_FLAG_ENCODING_PARAM</name></expr>, <expr><literal type="string">"movflags"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"disable_chpl"</literal></expr>, <expr><literal type="string">"Disable Nero chapter atom"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>FF_MOV_FLAG_DISABLE_CHPL</name></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>AV_OPT_FLAG_ENCODING_PARAM</name></expr>, <expr><literal type="string">"movflags"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"default_base_moof"</literal></expr>, <expr><literal type="string">"Set the default-base-is-moof flag in tfhd atoms"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>FF_MOV_FLAG_DEFAULT_BASE_MOOF</name></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>AV_OPT_FLAG_ENCODING_PARAM</name></expr>, <expr><literal type="string">"movflags"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"dash"</literal></expr>, <expr><literal type="string">"Write DASH compatible fragmented MP4"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>FF_MOV_FLAG_DASH</name></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>AV_OPT_FLAG_ENCODING_PARAM</name></expr>, <expr><literal type="string">"movflags"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"cmaf"</literal></expr>, <expr><literal type="string">"Write CMAF compatible fragmented MP4"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>FF_MOV_FLAG_CMAF</name></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>AV_OPT_FLAG_ENCODING_PARAM</name></expr>, <expr><literal type="string">"movflags"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"frag_discont"</literal></expr>, <expr><literal type="string">"Signal that the next fragment is discontinuous from earlier ones"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>FF_MOV_FLAG_FRAG_DISCONT</name></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>AV_OPT_FLAG_ENCODING_PARAM</name></expr>, <expr><literal type="string">"movflags"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"delay_moov"</literal></expr>, <expr><literal type="string">"Delay writing the initial moov until the first fragment is cut, or until the first fragment flush"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>FF_MOV_FLAG_DELAY_MOOV</name></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>AV_OPT_FLAG_ENCODING_PARAM</name></expr>, <expr><literal type="string">"movflags"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"global_sidx"</literal></expr>, <expr><literal type="string">"Write a global sidx index at the start of the file"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>FF_MOV_FLAG_GLOBAL_SIDX</name></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>AV_OPT_FLAG_ENCODING_PARAM</name></expr>, <expr><literal type="string">"movflags"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"skip_sidx"</literal></expr>, <expr><literal type="string">"Skip writing of sidx atom"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>FF_MOV_FLAG_SKIP_SIDX</name></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>AV_OPT_FLAG_ENCODING_PARAM</name></expr>, <expr><literal type="string">"movflags"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"write_clli"</literal></expr>, <expr><literal type="string">"Write clli atom (Experimental, may be renamed or changed, do not use from scripts)"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>FF_MOV_FLAG_WRITE_CLLI</name></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>AV_OPT_FLAG_ENCODING_PARAM</name></expr>, <expr><literal type="string">"movflags"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"write_colr"</literal></expr>, <expr><literal type="string">"Write colr atom (Experimental, may be renamed or changed, do not use from scripts)"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>FF_MOV_FLAG_WRITE_COLR</name></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>AV_OPT_FLAG_ENCODING_PARAM</name></expr>, <expr><literal type="string">"movflags"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"prefer_icc"</literal></expr>, <expr><literal type="string">"If writing colr atom prioritise usage of ICC profile if it exists in stream packet side data"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>FF_MOV_FLAG_PREFER_ICC</name></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>AV_OPT_FLAG_ENCODING_PARAM</name></expr>, <expr><literal type="string">"movflags"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"write_gama"</literal></expr>, <expr><literal type="string">"Write deprecated gama atom"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>FF_MOV_FLAG_WRITE_GAMA</name></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>AV_OPT_FLAG_ENCODING_PARAM</name></expr>, <expr><literal type="string">"movflags"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"use_metadata_tags"</literal></expr>, <expr><literal type="string">"Use mdta atom for metadata."</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>FF_MOV_FLAG_USE_MDTA</name></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>AV_OPT_FLAG_ENCODING_PARAM</name></expr>, <expr><literal type="string">"movflags"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"skip_trailer"</literal></expr>, <expr><literal type="string">"Skip writing the mfra/tfra/mfro trailer for fragmented files"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>FF_MOV_FLAG_SKIP_TRAILER</name></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>AV_OPT_FLAG_ENCODING_PARAM</name></expr>, <expr><literal type="string">"movflags"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"negative_cts_offsets"</literal></expr>, <expr><literal type="string">"Use negative CTS offsets (reducing the need for edit lists)"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>FF_MOV_FLAG_NEGATIVE_CTS_OFFSETS</name></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>AV_OPT_FLAG_ENCODING_PARAM</name></expr>, <expr><literal type="string">"movflags"</literal></expr> }</block></expr>,

<expr><call><name>FF_RTP_FLAG_OPTS</name><argument_list>(<argument><expr><name>MOVMuxContext</name></expr></argument>, <argument><expr><name>rtp_flags</name></expr></argument>)</argument_list></call></expr>,

<expr><block>{ <expr><literal type="string">"skip_iods"</literal></expr>, <expr><literal type="string">"Skip writing iods atom."</literal></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>MOVMuxContext</name></expr></argument>, <argument><expr><name>iods_skip</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>AV_OPT_FLAG_ENCODING_PARAM</name></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"iods_audio_profile"</literal></expr>, <expr><literal type="string">"iods audio profile atom."</literal></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>MOVMuxContext</name></expr></argument>, <argument><expr><name>iods_audio_profile</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><name>AV_OPT_FLAG_ENCODING_PARAM</name></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"iods_video_profile"</literal></expr>, <expr><literal type="string">"iods video profile atom."</literal></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>MOVMuxContext</name></expr></argument>, <argument><expr><name>iods_video_profile</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><name>AV_OPT_FLAG_ENCODING_PARAM</name></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"frag_duration"</literal></expr>, <expr><literal type="string">"Maximum fragment duration"</literal></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>MOVMuxContext</name></expr></argument>, <argument><expr><name>max_fragment_duration</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>AV_OPT_FLAG_ENCODING_PARAM</name></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"min_frag_duration"</literal></expr>, <expr><literal type="string">"Minimum fragment duration"</literal></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>MOVMuxContext</name></expr></argument>, <argument><expr><name>min_fragment_duration</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>AV_OPT_FLAG_ENCODING_PARAM</name></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"frag_size"</literal></expr>, <expr><literal type="string">"Maximum fragment size"</literal></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>MOVMuxContext</name></expr></argument>, <argument><expr><name>max_fragment_size</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>AV_OPT_FLAG_ENCODING_PARAM</name></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"ism_lookahead"</literal></expr>, <expr><literal type="string">"Number of lookahead entries for ISM files"</literal></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>MOVMuxContext</name></expr></argument>, <argument><expr><name>ism_lookahead</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>AV_OPT_FLAG_ENCODING_PARAM</name></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"video_track_timescale"</literal></expr>, <expr><literal type="string">"set timescale of all video tracks"</literal></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>MOVMuxContext</name></expr></argument>, <argument><expr><name>video_track_timescale</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>AV_OPT_FLAG_ENCODING_PARAM</name></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"brand"</literal></expr>, <expr><literal type="string">"Override major brand"</literal></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>MOVMuxContext</name></expr></argument>, <argument><expr><name>major_brand</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name> <operator>=</operator> <name>NULL</name></expr>}</block></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>AV_OPT_FLAG_ENCODING_PARAM</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"use_editlist"</literal></expr>, <expr><literal type="string">"use edit list"</literal></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>MOVMuxContext</name></expr></argument>, <argument><expr><name>use_editlist</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>AV_OPT_FLAG_ENCODING_PARAM</name></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"fragment_index"</literal></expr>, <expr><literal type="string">"Fragment number of the next fragment"</literal></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>MOVMuxContext</name></expr></argument>, <argument><expr><name>fragments</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>AV_OPT_FLAG_ENCODING_PARAM</name></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"mov_gamma"</literal></expr>, <expr><literal type="string">"gamma value for gama atom"</literal></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>MOVMuxContext</name></expr></argument>, <argument><expr><name>gamma</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name> <operator>=</operator> <literal type="number">0.0</literal></expr> }</block></expr>, <expr><literal type="number">0.0</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><name>AV_OPT_FLAG_ENCODING_PARAM</name></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"frag_interleave"</literal></expr>, <expr><literal type="string">"Interleave samples within fragments (max number of consecutive samples, lower is tighter interleaving, but with more overhead)"</literal></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>MOVMuxContext</name></expr></argument>, <argument><expr><name>frag_interleave</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>AV_OPT_FLAG_ENCODING_PARAM</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"encryption_scheme"</literal></expr>, <expr><literal type="string">"Configures the encryption scheme, allowed values are none, cenc-aes-ctr"</literal></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>MOVMuxContext</name></expr></argument>, <argument><expr><name>encryption_scheme_str</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name> <operator>=</operator> <name>NULL</name></expr>}</block></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>AV_OPT_FLAG_ENCODING_PARAM</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"encryption_key"</literal></expr>, <expr><literal type="string">"The media encryption key (hex)"</literal></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>MOVMuxContext</name></expr></argument>, <argument><expr><name>encryption_key</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BINARY</name></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>AV_OPT_FLAG_ENCODING_PARAM</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"encryption_kid"</literal></expr>, <expr><literal type="string">"The media encryption key identifier (hex)"</literal></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>MOVMuxContext</name></expr></argument>, <argument><expr><name>encryption_kid</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BINARY</name></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>AV_OPT_FLAG_ENCODING_PARAM</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"use_stream_ids_as_track_ids"</literal></expr>, <expr><literal type="string">"use stream ids as track ids"</literal></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>MOVMuxContext</name></expr></argument>, <argument><expr><name>use_stream_ids_as_track_ids</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>AV_OPT_FLAG_ENCODING_PARAM</name></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"write_tmcd"</literal></expr>, <expr><literal type="string">"force or disable writing tmcd"</literal></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>MOVMuxContext</name></expr></argument>, <argument><expr><name>write_tmcd</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>AV_OPT_FLAG_ENCODING_PARAM</name></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"write_prft"</literal></expr>, <expr><literal type="string">"Write producer reference time box with specified time source"</literal></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>MOVMuxContext</name></expr></argument>, <argument><expr><name>write_prft</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>MOV_PRFT_NONE</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>MOV_PRFT_NB</name><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>AV_OPT_FLAG_ENCODING_PARAM</name></expr>, <expr><literal type="string">"prft"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"wallclock"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>MOV_PRFT_SRC_WALLCLOCK</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_FLAG_ENCODING_PARAM</name></expr>, <expr><literal type="string">"prft"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"pts"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>MOV_PRFT_SRC_PTS</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_FLAG_ENCODING_PARAM</name></expr>, <expr><literal type="string">"prft"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"empty_hdlr_name"</literal></expr>, <expr><literal type="string">"write zero-length name string in hdlr atoms within mdia and minf atoms"</literal></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>MOVMuxContext</name></expr></argument>, <argument><expr><name>empty_hdlr_name</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>AV_OPT_FLAG_ENCODING_PARAM</name></expr>}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOV_CLASS</name><parameter_list>(<parameter><type><name>flavor</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>static const AVClass flavor ##_muxer_class = {.class_name = #flavor " muxer",.item_name = av_default_item_name,.option = options,.version = LIBAVUTIL_VERSION_INT,};</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>get_moov_size</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>int</name></type> <name>utf8len</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>val</name></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>*</operator><name>b</name></expr>)</condition> <block>{<block_content>

<macro><name>GET_UTF8</name><argument_list>(<argument>val</argument>, <argument>*b++</argument>, <argument>return -<literal type="number">1</literal>;</argument>)</argument_list></macro>

<expr_stmt><expr><name>len</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>len</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64_t</name></type> <name>update_size</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>pos</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>curpos</name> <init>= <expr><call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>curpos</name> <operator>-</operator> <name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>curpos</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>curpos</name> <operator>-</operator> <name>pos</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>co64_required</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>MOVTrack</name> <modifier>*</modifier></type><name>track</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>entry</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>track</name><operator>-&gt;</operator><name>cluster</name><index>[<expr><name><name>track</name><operator>-&gt;</operator><name>entry</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pos</name> <operator>+</operator> <name><name>track</name><operator>-&gt;</operator><name>data_offset</name></name> <operator>&gt;</operator> <name>UINT32_MAX</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>is_cover_image</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVStream</name> <modifier>*</modifier></type><name>st</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>st</name> <operator>&amp;&amp;</operator> <name><name>st</name><operator>-&gt;</operator><name>disposition</name></name> <operator>==</operator> <name>AV_DISPOSITION_ATTACHED_PIC</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rtp_hinting_needed</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVStream</name> <modifier>*</modifier></type><name>st</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>is_cover_image</name><argument_list>(<argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_VIDEO</name> <operator>||</operator>

<name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_write_stco_tag</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>MOVTrack</name> <modifier>*</modifier></type><name>track</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mode64</name> <init>= <expr><call><name>co64_required</name><argument_list>(<argument><expr><name>track</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int64_t</name></type> <name>pos</name> <init>= <expr><call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>mode64</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"co64"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"stco"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>chunkCount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>track</name><operator>-&gt;</operator><name>entry</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>track</name><operator>-&gt;</operator><name>cluster</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>chunkNum</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mode64</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>avio_wb64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>cluster</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pos</name> <operator>+</operator> <name><name>track</name><operator>-&gt;</operator><name>data_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>cluster</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pos</name> <operator>+</operator> <name><name>track</name><operator>-&gt;</operator><name>data_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

<return>return <expr><call><name>update_size</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_write_stsz_tag</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>MOVTrack</name> <modifier>*</modifier></type><name>track</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>equalChunks</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>entries</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>tst</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>oldtst</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>pos</name> <init>= <expr><call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"stsz"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>track</name><operator>-&gt;</operator><name>entry</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>tst</name> <operator>=</operator> <name><name>track</name><operator>-&gt;</operator><name>cluster</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>/</operator> <name><name>track</name><operator>-&gt;</operator><name>cluster</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>entries</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>oldtst</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>tst</name> <operator>!=</operator> <name>oldtst</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>equalChunks</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>oldtst</name> <operator>=</operator> <name>tst</name></expr>;</expr_stmt>

<expr_stmt><expr><name>entries</name> <operator>+=</operator> <name><name>track</name><operator>-&gt;</operator><name>cluster</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>entries</name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>equalChunks</name> <operator>&amp;&amp;</operator> <name><name>track</name><operator>-&gt;</operator><name>entry</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>sSize</name> <init>= <expr><ternary><condition><expr><name><name>track</name><operator>-&gt;</operator><name>entry</name></name></expr> ?</condition><then> <expr><name><name>track</name><operator>-&gt;</operator><name>cluster</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>size</name> <operator>/</operator> <name><name>track</name><operator>-&gt;</operator><name>cluster</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>entries</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>sSize</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>sSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>sSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>track</name><operator>-&gt;</operator><name>entry</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>track</name><operator>-&gt;</operator><name>cluster</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>entries</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>cluster</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>/</operator>

<name><name>track</name><operator>-&gt;</operator><name>cluster</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<return>return <expr><call><name>update_size</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_write_stsc_tag</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>MOVTrack</name> <modifier>*</modifier></type><name>track</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>oldval</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>entryPos</name></decl>, <decl><type ref="prev"/><name>curpos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>pos</name> <init>= <expr><call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"stsc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>entryPos</name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>chunkCount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>track</name><operator>-&gt;</operator><name>entry</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>oldval</name> <operator>!=</operator> <name><name>track</name><operator>-&gt;</operator><name>cluster</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>samples_in_chunk</name> <operator>&amp;&amp;</operator> <name><name>track</name><operator>-&gt;</operator><name>cluster</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>chunkNum</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>cluster</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>chunkNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>cluster</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>samples_in_chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>oldval</name> <operator>=</operator> <name><name>track</name><operator>-&gt;</operator><name>cluster</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>samples_in_chunk</name></expr>;</expr_stmt>

<expr_stmt><expr><name>index</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>curpos</name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>entryPos</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>curpos</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>update_size</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_write_stss_tag</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>MOVTrack</name> <modifier>*</modifier></type><name>track</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>flag</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>curpos</name></decl>, <decl><type ref="prev"/><name>entryPos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>pos</name> <init>= <expr><call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><ternary><condition><expr><name>flag</name> <operator>==</operator> <name>MOV_SYNC_SAMPLE</name></expr> ?</condition><then> <expr><literal type="string">"stss"</literal></expr> </then><else>: <expr><literal type="string">"stps"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>entryPos</name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>track</name><operator>-&gt;</operator><name>entry</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>cluster</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>&amp;</operator> <name>flag</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>index</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>curpos</name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>entryPos</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>curpos</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>update_size</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_write_sdtp_tag</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>MOVTrack</name> <modifier>*</modifier></type><name>track</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>leading</name></decl>, <decl><type ref="prev"/><name>dependent</name></decl>, <decl><type ref="prev"/><name>reference</name></decl>, <decl><type ref="prev"/><name>redundancy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>pos</name> <init>= <expr><call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"sdtp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>track</name><operator>-&gt;</operator><name>entry</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>dependent</name> <operator>=</operator> <name>MOV_SAMPLE_DEPENDENCY_YES</name></expr>;</expr_stmt>

<expr_stmt><expr><name>leading</name> <operator>=</operator> <name>reference</name> <operator>=</operator> <name>redundancy</name> <operator>=</operator> <name>MOV_SAMPLE_DEPENDENCY_UNKNOWN</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>cluster</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>&amp;</operator> <name>MOV_DISPOSABLE_SAMPLE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>reference</name> <operator>=</operator> <name>MOV_SAMPLE_DEPENDENCY_NO</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>cluster</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>&amp;</operator> <name>MOV_SYNC_SAMPLE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>dependent</name> <operator>=</operator> <name>MOV_SAMPLE_DEPENDENCY_NO</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>(</operator><name>leading</name> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>dependent</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator>

<operator>(</operator><name>reference</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>|</operator> <name>redundancy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><call><name>update_size</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_write_amr_tag</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>MOVTrack</name> <modifier>*</modifier></type><name>track</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>MODE_MOV</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"samr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"damr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"FFMP"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x81FF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x01</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<return>return <expr><literal type="number">0x11</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_write_ac3_tag</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>MOVTrack</name> <modifier>*</modifier></type><name>track</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>GetBitContext</name></type> <name>gbc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PutBitContext</name></type> <name>pbc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fscod</name></decl>, <decl><type ref="prev"/><name>bsid</name></decl>, <decl><type ref="prev"/><name>bsmod</name></decl>, <decl><type ref="prev"/><name>acmod</name></decl>, <decl><type ref="prev"/><name>lfeon</name></decl>, <decl><type ref="prev"/><name>frmsizecod</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>vos_len</name></name> <operator>&lt;</operator> <literal type="number">7</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Cannot write moov atom before AC3 packets."</literal>

<literal type="string">" Set the delay_moov flag to fix this.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"dac3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>vos_data</name></name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>track</name><operator>-&gt;</operator><name>vos_len</name></name> <operator>-</operator> <literal type="number">4</literal><operator>)</operator> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fscod</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>frmsizecod</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bsid</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bsmod</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>acmod</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>acmod</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>acmod</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>acmod</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name>acmod</name> <operator>&amp;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>lfeon</name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pbc</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pbc</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>fscod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pbc</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>bsid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pbc</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>bsmod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pbc</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>acmod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pbc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>lfeon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pbc</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>frmsizecod</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pbc</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>flush_put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">11</literal></expr>;</return>

</block_content>}</block></function>

<struct>struct <name>eac3_info</name> <block>{

<decl_stmt><decl><type><name>AVPacket</name></type> <name>pkt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>ec3_done</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>num_blocks</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>data_rate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>num_ind_sub</name></decl>;</decl_stmt>

<struct>struct <block>{

<decl_stmt><decl><type><name>uint8_t</name></type> <name>fscod</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>bsid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>bsmod</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>acmod</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>lfeon</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>num_dep_sub</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>chan_loc</name></decl>;</decl_stmt>

}</block> <decl><name><name>substream</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</struct> 

}</block>;</struct>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_AC3_PARSER</name></expr></cpp:if>

<function><type><specifier>static</specifier> <name>int</name></type> <name>handle_eac3</name><parameter_list>(<parameter><decl><type><name>MOVMuxContext</name> <modifier>*</modifier></type><name>mov</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>, <parameter><decl><type><name>MOVTrack</name> <modifier>*</modifier></type><name>track</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AC3HeaderInfo</name> <modifier>*</modifier></type><name>hdr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>eac3_info</name></name> <modifier>*</modifier></type><name>info</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num_blocks</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>track</name><operator>-&gt;</operator><name>eac3_priv</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>track</name><operator>-&gt;</operator><name>eac3_priv</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>info</name> <operator>=</operator> <name><name>track</name><operator>-&gt;</operator><name>eac3_priv</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>avpriv_ac3_parse_header</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hdr</name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>track</name><operator>-&gt;</operator><name>entry</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>mov</name><operator>-&gt;</operator><name>fc</name></name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Dropping invalid packet from start of the stream\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>data_rate</name></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>data_rate</name></name></expr></argument>, <argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>/</operator> <literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>num_blocks</name> <operator>=</operator> <name><name>hdr</name><operator>-&gt;</operator><name>num_blocks</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>info</name><operator>-&gt;</operator><name>ec3_done</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>hdr</name><operator>-&gt;</operator><name>bitstream_id</name></name> <operator>&lt;=</operator> <literal type="number">10</literal> <operator>&amp;&amp;</operator> <name><name>hdr</name><operator>-&gt;</operator><name>substreamid</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hdr</name><operator>-&gt;</operator><name>frame_type</name></name> <operator>==</operator> <name>EAC3_FRAME_TYPE_INDEPENDENT</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>hdr</name><operator>-&gt;</operator><name>substreamid</name></name> <operator>&gt;</operator> <name><name>info</name><operator>-&gt;</operator><name>num_ind_sub</name></name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hdr</name><operator>-&gt;</operator><name>substreamid</name></name> <operator>==</operator> <name><name>info</name><operator>-&gt;</operator><name>num_ind_sub</name></name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avpriv_request_sample</name><argument_list>(<argument><expr><name><name>mov</name><operator>-&gt;</operator><name>fc</name></name></expr></argument>, <argument><expr><literal type="string">"Multiple independent substreams"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_PATCHWELCOME</name></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>hdr</name><operator>-&gt;</operator><name>substreamid</name></name> <operator>&lt;</operator> <name><name>info</name><operator>-&gt;</operator><name>num_ind_sub</name></name> <operator>||</operator>

<name><name>hdr</name><operator>-&gt;</operator><name>substreamid</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>info</name><operator>-&gt;</operator><name>substream</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>bsid</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>ec3_done</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<goto>goto <name>concatenate</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>hdr</name><operator>-&gt;</operator><name>substreamid</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avpriv_request_sample</name><argument_list>(<argument><expr><name><name>mov</name><operator>-&gt;</operator><name>fc</name></name></expr></argument>, <argument><expr><literal type="string">"Multiple non EAC3 independent substreams"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_PATCHWELCOME</name></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>substream</name><index>[<expr><name><name>hdr</name><operator>-&gt;</operator><name>substreamid</name></name></expr>]</index></name><operator>.</operator><name>fscod</name> <operator>=</operator> <name><name>hdr</name><operator>-&gt;</operator><name>sr_code</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>substream</name><index>[<expr><name><name>hdr</name><operator>-&gt;</operator><name>substreamid</name></name></expr>]</index></name><operator>.</operator><name>bsid</name> <operator>=</operator> <name><name>hdr</name><operator>-&gt;</operator><name>bitstream_id</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>substream</name><index>[<expr><name><name>hdr</name><operator>-&gt;</operator><name>substreamid</name></name></expr>]</index></name><operator>.</operator><name>bsmod</name> <operator>=</operator> <name><name>hdr</name><operator>-&gt;</operator><name>bitstream_mode</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>substream</name><index>[<expr><name><name>hdr</name><operator>-&gt;</operator><name>substreamid</name></name></expr>]</index></name><operator>.</operator><name>acmod</name> <operator>=</operator> <name><name>hdr</name><operator>-&gt;</operator><name>channel_mode</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>substream</name><index>[<expr><name><name>hdr</name><operator>-&gt;</operator><name>substreamid</name></name></expr>]</index></name><operator>.</operator><name>lfeon</name> <operator>=</operator> <name><name>hdr</name><operator>-&gt;</operator><name>lfe_on</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name> <operator>!=</operator> <name><name>hdr</name><operator>-&gt;</operator><name>frame_size</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>cumul_size</name> <init>= <expr><name><name>hdr</name><operator>-&gt;</operator><name>frame_size</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>parent</name> <init>= <expr><name><name>hdr</name><operator>-&gt;</operator><name>substreamid</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>cumul_size</name> <operator>!=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>GetBitContext</name></type> <name>gbc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avpriv_ac3_parse_header</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hdr</name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>cumul_size</name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name>cumul_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hdr</name><operator>-&gt;</operator><name>frame_type</name></name> <operator>!=</operator> <name>EAC3_FRAME_TYPE_DEPENDENT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>substream</name><index>[<expr><name>parent</name></expr>]</index></name><operator>.</operator><name>num_dep_sub</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>/=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_get_bits8</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>cumul_size</name> <operator>+</operator> <name>ret</name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name>cumul_size</name> <operator>-</operator> <name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><ternary><condition><expr><name><name>hdr</name><operator>-&gt;</operator><name>channel_mode</name></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>substream</name><index>[<expr><name>parent</name></expr>]</index></name><operator>.</operator><name>chan_loc</name> <operator>|=</operator> <operator>(</operator><call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1f</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>substream</name><index>[<expr><name>parent</name></expr>]</index></name><operator>.</operator><name>chan_loc</name> <operator>|=</operator> <name><name>hdr</name><operator>-&gt;</operator><name>channel_mode</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>cumul_size</name> <operator>+=</operator> <name><name>hdr</name><operator>-&gt;</operator><name>frame_size</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<label><name>concatenate</name>:</label>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>info</name><operator>-&gt;</operator><name>num_blocks</name></name> <operator>&amp;&amp;</operator> <name>num_blocks</name> <operator>==</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>num_blocks</name></name> <operator>+</operator> <name>num_blocks</name> <operator>&gt;</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>info</name><operator>-&gt;</operator><name>num_blocks</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_packet_ref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>pkt</name></name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>num_blocks</name></name> <operator>=</operator> <name>num_blocks</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_grow_packet</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>pkt</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>pkt</name><operator>.</operator><name>data</name></name> <operator>+</operator> <name><name>info</name><operator>-&gt;</operator><name>pkt</name><operator>.</operator><name>size</name></name> <operator>-</operator> <name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>num_blocks</name></name> <operator>+=</operator> <name>num_blocks</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>pkt</name><operator>.</operator><name>duration</name></name> <operator>+=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>duration</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_copy_packet_side_data</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>pkt</name></name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>num_blocks</name></name> <operator>!=</operator> <literal type="number">6</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_packet_move_ref</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>pkt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>num_blocks</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

<label><name>end</name>:</label>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_write_eac3_tag</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>MOVTrack</name> <modifier>*</modifier></type><name>track</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>PutBitContext</name></type> <name>pbc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>eac3_info</name></name> <modifier>*</modifier></type><name>info</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>track</name><operator>-&gt;</operator><name>eac3_priv</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Cannot write moov atom before EAC3 packets parsed.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>info</name> <operator>=</operator> <name><name>track</name><operator>-&gt;</operator><name>eac3_priv</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">2</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><literal type="number">34</literal> <operator>*</operator> <operator>(</operator><name><name>info</name><operator>-&gt;</operator><name>num_ind_sub</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>init_put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pbc</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pbc</name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>data_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pbc</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>num_ind_sub</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name><name>info</name><operator>-&gt;</operator><name>num_ind_sub</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pbc</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>substream</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fscod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pbc</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>substream</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bsid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pbc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pbc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pbc</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>substream</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bsmod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pbc</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>substream</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>acmod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pbc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>substream</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>lfeon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pbc</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pbc</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>substream</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>num_dep_sub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>info</name><operator>-&gt;</operator><name>substream</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>num_dep_sub</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pbc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pbc</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>substream</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>chan_loc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>flush_put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>put_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pbc</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>size</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"dec3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>size</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_write_extradata_tag</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>MOVTrack</name> <modifier>*</modifier></type><name>track</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>extradata_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>extradata_size</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_write_enda_tag</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"enda"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<return>return <expr><literal type="number">10</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_write_enda_tag_be</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"enda"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<return>return <expr><literal type="number">10</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>put_descr</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tag</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>(</operator><name>size</name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">7</literal> <operator>*</operator> <name>i</name><operator>)</operator><operator>)</operator> <operator>|</operator> <literal type="number">0x80</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>size</name> <operator>&amp;</operator> <literal type="number">0x7F</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name></type> <name>compute_avg_bitrate</name><parameter_list>(<parameter><decl><type><name>MOVTrack</name> <modifier>*</modifier></type><name>track</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>track</name><operator>-&gt;</operator><name>track_duration</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>track</name><operator>-&gt;</operator><name>entry</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <name><name>track</name><operator>-&gt;</operator><name>cluster</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><name>size</name> <operator>*</operator> <literal type="number">8</literal> <operator>*</operator> <name><name>track</name><operator>-&gt;</operator><name>timescale</name></name> <operator>/</operator> <name><name>track</name><operator>-&gt;</operator><name>track_duration</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_write_esds_tag</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>MOVTrack</name> <modifier>*</modifier></type><name>track</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<decl_stmt><decl><type><name>AVCPBProperties</name> <modifier>*</modifier></type><name>props</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>pos</name> <init>= <expr><call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>decoder_specific_info_len</name> <init>= <expr><ternary><condition><expr><name><name>track</name><operator>-&gt;</operator><name>vos_len</name></name></expr> ?</condition><then> <expr><literal type="number">5</literal> <operator>+</operator> <name><name>track</name><operator>-&gt;</operator><name>vos_len</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>avg_bitrate</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"esds"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>put_descr</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x03</literal></expr></argument>, <argument><expr><literal type="number">3</literal> <operator>+</operator> <literal type="number">5</literal><operator>+</operator><literal type="number">13</literal> <operator>+</operator> <name>decoder_specific_info_len</name> <operator>+</operator> <literal type="number">5</literal><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>track_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>put_descr</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x04</literal></expr></argument>, <argument><expr><literal type="number">13</literal> <operator>+</operator> <name>decoder_specific_info_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_MP2</name> <operator>||</operator>

<name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_MP3</name><operator>)</operator> <operator>&amp;&amp;</operator>

<name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>&gt;</operator> <literal type="number">24000</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x6B</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if> 

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><call><name>ff_codec_get_tag</name><argument_list>(<argument><expr><name>ff_mp4_obj_type</name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_id</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_DVD_SUBTITLE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>(</operator><literal type="number">0x38</literal> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>|</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if> 

<if type="elseif">else if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if> 

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt> 

<expr_stmt><expr><name>props</name> <operator>=</operator> <operator>(</operator><name>AVCPBProperties</name><operator>*</operator><operator>)</operator><call><name>av_stream_get_side_data</name><argument_list>(<argument><expr><name><name>track</name><operator>-&gt;</operator><name>st</name></name></expr></argument>, <argument><expr><name>AV_PKT_DATA_CPB_PROPERTIES</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb24</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><ternary><condition><expr><name>props</name></expr> ?</condition><then> <expr><name><name>props</name><operator>-&gt;</operator><name>buffer_size</name></name> <operator>/</operator> <literal type="number">8</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>avg_bitrate</name> <operator>=</operator> <call><name>compute_avg_bitrate</name><argument_list>(<argument><expr><name>track</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><ternary><condition><expr><name>props</name></expr> ?</condition><then> <expr><call><name>FFMAX3</name><argument_list>(<argument><expr><name><name>props</name><operator>-&gt;</operator><name>max_bitrate</name></name></expr></argument>, <argument><expr><name><name>props</name><operator>-&gt;</operator><name>avg_bitrate</name></name></expr></argument>, <argument><expr><name>avg_bitrate</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>FFMAX</name><argument_list>(<argument><expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>bit_rate</name></name></expr></argument>, <argument><expr><name>avg_bitrate</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>avg_bitrate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>vos_len</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>put_descr</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x05</literal></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>vos_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>vos_data</name></name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>vos_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>put_descr</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x06</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x02</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>update_size</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_pcm_le_gt16</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVCodecID</name></name></type> <name>codec_id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>codec_id</name> <operator>==</operator> <name>AV_CODEC_ID_PCM_S24LE</name> <operator>||</operator>

<name>codec_id</name> <operator>==</operator> <name>AV_CODEC_ID_PCM_S32LE</name> <operator>||</operator>

<name>codec_id</name> <operator>==</operator> <name>AV_CODEC_ID_PCM_F32LE</name> <operator>||</operator>

<name>codec_id</name> <operator>==</operator> <name>AV_CODEC_ID_PCM_F64LE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_pcm_be_gt16</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVCodecID</name></name></type> <name>codec_id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>codec_id</name> <operator>==</operator> <name>AV_CODEC_ID_PCM_S24BE</name> <operator>||</operator>

<name>codec_id</name> <operator>==</operator> <name>AV_CODEC_ID_PCM_S32BE</name> <operator>||</operator>

<name>codec_id</name> <operator>==</operator> <name>AV_CODEC_ID_PCM_F32BE</name> <operator>||</operator>

<name>codec_id</name> <operator>==</operator> <name>AV_CODEC_ID_PCM_F64BE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_write_ms_tag</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>MOVTrack</name> <modifier>*</modifier></type><name>track</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>pos</name> <init>= <expr><call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>tag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_tag</name></name> <operator>=</operator> <call><name>av_bswap16</name><argument_list>(<argument><expr><name><name>track</name><operator>-&gt;</operator><name>tag</name></name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_put_wav_header</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>par</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>update_size</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_write_wfex_tag</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>MOVTrack</name> <modifier>*</modifier></type><name>track</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>pos</name> <init>= <expr><call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"wfex"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_put_wav_header</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>codecpar</name></name></expr></argument>, <argument><expr><name>FF_PUT_WAV_HEADER_FORCE_WAVEFORMATEX</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>update_size</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_write_dfla_tag</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>MOVTrack</name> <modifier>*</modifier></type><name>track</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>pos</name> <init>= <expr><call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"dfLa"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb24</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>!=</operator> <name>FLAC_STREAMINFO_SIZE</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">7</literal> <operator>|</operator> <name>FLAC_METADATA_TYPE_STREAMINFO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb24</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>extradata_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>extradata_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<return>return <expr><call><name>update_size</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_write_dops_tag</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>MOVTrack</name> <modifier>*</modifier></type><name>track</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>pos</name> <init>= <expr><call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"dOps"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>&lt;</operator> <literal type="number">19</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid extradata size\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><call><name>AV_RB8</name><argument_list>(<argument><expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>extradata</name></name> <operator>+</operator> <literal type="number">9</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><call><name>AV_RL16</name><argument_list>(<argument><expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>extradata</name></name> <operator>+</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><call><name>AV_RL32</name><argument_list>(<argument><expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>extradata</name></name> <operator>+</operator> <literal type="number">12</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><call><name>AV_RL16</name><argument_list>(<argument><expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>extradata</name></name> <operator>+</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>extradata</name></name> <operator>+</operator> <literal type="number">18</literal></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>-</operator> <literal type="number">18</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>update_size</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_write_dmlp_tag</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>MOVTrack</name> <modifier>*</modifier></type><name>track</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>pos</name> <init>= <expr><call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>length</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"dmlp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>vos_len</name></name> <operator>&lt;</operator> <literal type="number">20</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Cannot write moov atom before TrueHD packets."</literal>

<literal type="string">" Set the delay_moov flag to fix this.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>length</name> <operator>=</operator> <operator>(</operator><call><name>AV_RB16</name><argument_list>(<argument><expr><name><name>track</name><operator>-&gt;</operator><name>vos_data</name></name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0xFFF</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>length</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">20</literal> <operator>||</operator> <name>length</name></expr></argument> &gt;</argument_list></name> <name><name>track</name><operator>-&gt;</operator><name>vos_len</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>AV_RB32</name><argument_list>(<argument><expr><name><name>track</name><operator>-&gt;</operator><name>vos_data</name></name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0xF8726FBA</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><call><name>AV_RB32</name><argument_list>(<argument><expr><name><name>track</name><operator>-&gt;</operator><name>vos_data</name></name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><call><name>AV_RB16</name><argument_list>(<argument><expr><name><name>track</name><operator>-&gt;</operator><name>vos_data</name></name> <operator>+</operator> <literal type="number">18</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<return>return <expr><call><name>update_size</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_write_chan_tag</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>MOVTrack</name> <modifier>*</modifier></type><name>track</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>layout_tag</name></decl>, <decl><type ref="prev"/><name>bitmap</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>pos</name> <init>= <expr><call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>layout_tag</name> <operator>=</operator> <call><name>ff_mov_get_channel_layout_tag</name><argument_list>(<argument><expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_id</name></name></expr></argument>,

<argument><expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>channel_layout</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>layout_tag</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"not writing 'chan' tag due to "</literal>

<literal type="string">"lack of channel information\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>multichannel_as_mono</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"chan"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb24</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>layout_tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<return>return <expr><call><name>update_size</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_write_wave_tag</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>MOVTrack</name> <modifier>*</modifier></type><name>track</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>pos</name> <init>= <expr><call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"wave"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>!=</operator> <name>AV_CODEC_ID_QDM2</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"frma"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>tag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_AAC</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"mp4a"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mov_write_esds_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>track</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>mov_pcm_le_gt16</name><argument_list>(<argument><expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_id</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>mov_write_enda_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>mov_pcm_be_gt16</name><argument_list>(<argument><expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_id</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>mov_write_enda_tag_be</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_AMR_NB</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>mov_write_amr_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>track</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_AC3</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>mov_write_ac3_tag</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>, <argument><expr><name>track</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_EAC3</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>mov_write_eac3_tag</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>, <argument><expr><name>track</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_ALAC</name> <operator>||</operator>

<name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_QDM2</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>mov_write_extradata_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>track</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_ADPCM_MS</name> <operator>||</operator>

<name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_ADPCM_IMA_WAV</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>mov_write_ms_tag</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>, <argument><expr><name>track</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<return>return <expr><call><name>update_size</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_write_dvc1_structs</name><parameter_list>(<parameter><decl><type><name>MOVTrack</name> <modifier>*</modifier></type><name>track</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>unescaped</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>start</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>next</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>end</name> <init>= <expr><name><name>track</name><operator>-&gt;</operator><name>vos_data</name></name> <operator>+</operator> <name><name>track</name><operator>-&gt;</operator><name>vos_len</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>unescaped_size</name></decl>, <decl><type ref="prev"/><name>seq_found</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>level</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>interlace</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>packet_seq</name> <init>= <expr><name><name>track</name><operator>-&gt;</operator><name>vc1_info</name><operator>.</operator><name>packet_seq</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>packet_entry</name> <init>= <expr><name><name>track</name><operator>-&gt;</operator><name>vc1_info</name><operator>.</operator><name>packet_entry</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>slices</name> <init>= <expr><name><name>track</name><operator>-&gt;</operator><name>vc1_info</name><operator>.</operator><name>slices</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PutBitContext</name></type> <name>pbc</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>start_dts</name></name> <operator>==</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>packet_seq</name> <operator>=</operator> <name>packet_entry</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,

<argument><expr><literal type="string">"moov atom written before any packets, unable to write correct "</literal>

<literal type="string">"dvc1 atom. Set the delay_moov flag to fix this.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>unescaped</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><name><name>track</name><operator>-&gt;</operator><name>vos_len</name></name> <operator>+</operator> <name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>unescaped</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>start</name> <operator>=</operator> <call><name>find_next_marker</name><argument_list>(<argument><expr><name><name>track</name><operator>-&gt;</operator><name>vos_data</name></name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>next</name> <operator>=</operator> <name>start</name></expr>;</init> <condition><expr><name>next</name> <operator>&lt;</operator> <name>end</name></expr>;</condition> <incr><expr><name>start</name> <operator>=</operator> <name>next</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>GetBitContext</name></type> <name>gb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>

<expr_stmt><expr><name>next</name> <operator>=</operator> <call><name>find_next_marker</name><argument_list>(<argument><expr><name>start</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <name>next</name> <operator>-</operator> <name>start</name> <operator>-</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>unescaped_size</name> <operator>=</operator> <call><name>vc1_unescape_buffer</name><argument_list>(<argument><expr><name>start</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>unescaped</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>unescaped</name></expr></argument>, <argument><expr><literal type="number">8</literal> <operator>*</operator> <name>unescaped_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>AV_RB32</name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>VC1_CODE_SEQHDR</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>profile</name> <init>= <expr><call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>profile</name> <operator>!=</operator> <name>PROFILE_ADVANCED</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>unescaped</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>seq_found</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>level</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>skip_bits_long</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>+</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">5</literal> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>interlace</name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>seq_found</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>unescaped</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>init_put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pbc</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pbc</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pbc</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pbc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pbc</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pbc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pbc</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pbc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>!</operator><name>interlace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pbc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>!</operator><name>packet_seq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pbc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>!</operator><name>packet_entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pbc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>!</operator><name>slices</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pbc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pbc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>avg_frame_rate</name><operator>.</operator><name>num</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>track</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>avg_frame_rate</name><operator>.</operator><name>den</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>put_bits32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pbc</name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>avg_frame_rate</name><operator>.</operator><name>num</name></name> <operator>/</operator> <name><name>track</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>avg_frame_rate</name><operator>.</operator><name>den</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>put_bits32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pbc</name></expr></argument>, <argument><expr><literal type="number">0xffffffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>flush_put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>unescaped</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_write_dvc1_tag</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>MOVTrack</name> <modifier>*</modifier></type><name>track</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>buf</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>mov_write_dvc1_structs</name><argument_list>(<argument><expr><name>track</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>vos_len</name></name> <operator>+</operator> <literal type="number">8</literal> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"dvc1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>vos_data</name></name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>vos_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_write_glbl_tag</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>MOVTrack</name> <modifier>*</modifier></type><name>track</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>vos_len</name></name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"glbl"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>vos_data</name></name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>vos_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">8</literal> <operator>+</operator> <name><name>track</name><operator>-&gt;</operator><name>vos_len</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_get_lpcm_flags</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVCodecID</name></name></type> <name>codec_id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name>codec_id</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_CODEC_ID_PCM_F32BE</name></expr>:</case>

<case>case <expr><name>AV_CODEC_ID_PCM_F64BE</name></expr>:</case>

<return>return <expr><literal type="number">11</literal></expr>;</return>

<case>case <expr><name>AV_CODEC_ID_PCM_F32LE</name></expr>:</case>

<case>case <expr><name>AV_CODEC_ID_PCM_F64LE</name></expr>:</case>

<return>return <expr><literal type="number">9</literal></expr>;</return>

<case>case <expr><name>AV_CODEC_ID_PCM_U8</name></expr>:</case>

<return>return <expr><literal type="number">10</literal></expr>;</return>

<case>case <expr><name>AV_CODEC_ID_PCM_S16BE</name></expr>:</case>

<case>case <expr><name>AV_CODEC_ID_PCM_S24BE</name></expr>:</case>

<case>case <expr><name>AV_CODEC_ID_PCM_S32BE</name></expr>:</case>

<return>return <expr><literal type="number">14</literal></expr>;</return>

<case>case <expr><name>AV_CODEC_ID_PCM_S8</name></expr>:</case>

<case>case <expr><name>AV_CODEC_ID_PCM_S16LE</name></expr>:</case>

<case>case <expr><name>AV_CODEC_ID_PCM_S24LE</name></expr>:</case>

<case>case <expr><name>AV_CODEC_ID_PCM_S32LE</name></expr>:</case>

<return>return <expr><literal type="number">12</literal></expr>;</return>

<default>default:</default>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_cluster_duration</name><parameter_list>(<parameter><decl><type><name>MOVTrack</name> <modifier>*</modifier></type><name>track</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cluster_idx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>next_dts</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cluster_idx</name> <operator>&gt;=</operator> <name><name>track</name><operator>-&gt;</operator><name>entry</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cluster_idx</name> <operator>+</operator> <literal type="number">1</literal> <operator>==</operator> <name><name>track</name><operator>-&gt;</operator><name>entry</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>next_dts</name> <operator>=</operator> <name><name>track</name><operator>-&gt;</operator><name>track_duration</name></name> <operator>+</operator> <name><name>track</name><operator>-&gt;</operator><name>start_dts</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>next_dts</name> <operator>=</operator> <name><name>track</name><operator>-&gt;</operator><name>cluster</name><index>[<expr><name>cluster_idx</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>dts</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>next_dts</name> <operator>-=</operator> <name><name>track</name><operator>-&gt;</operator><name>cluster</name><index>[<expr><name>cluster_idx</name></expr>]</index></name><operator>.</operator><name>dts</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>next_dts</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>next_dts</name> <operator>&lt;=</operator> <name>INT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>next_dts</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_samples_per_packet</name><parameter_list>(<parameter><decl><type><name>MOVTrack</name> <modifier>*</modifier></type><name>track</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>first_duration</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>track</name><operator>-&gt;</operator><name>audio_vbr</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>track</name><operator>-&gt;</operator><name>entry</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>first_duration</name> <operator>=</operator> <call><name>get_cluster_duration</name><argument_list>(<argument><expr><name>track</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>track</name><operator>-&gt;</operator><name>entry</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>get_cluster_duration</name><argument_list>(<argument><expr><name>track</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>first_duration</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>first_duration</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_write_audio_tag</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>MOVMuxContext</name> <modifier>*</modifier></type><name>mov</name></decl></parameter>, <parameter><decl><type><name>MOVTrack</name> <modifier>*</modifier></type><name>track</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>pos</name> <init>= <expr><call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>version</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>tag</name> <init>= <expr><name><name>track</name><operator>-&gt;</operator><name>tag</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>MODE_MOV</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>timescale</name></name> <operator>&gt;</operator> <name>UINT16_MAX</name> <operator>||</operator> <operator>!</operator><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>channels</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>mov_get_lpcm_flags</name><argument_list>(<argument><expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_id</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>tag</name> <operator>=</operator> <call><name>AV_RL32</name><argument_list>(<argument><expr><literal type="string">"lpcm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>version</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>audio_vbr</name></name> <operator>||</operator> <call><name>mov_pcm_le_gt16</name><argument_list>(<argument><expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_id</name></name></expr></argument>)</argument_list></call> <operator>||</operator>

<call><name>mov_pcm_be_gt16</name><argument_list>(<argument><expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_id</name></name></expr></argument>)</argument_list></call> <operator>||</operator>

<name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_ADPCM_MS</name> <operator>||</operator>

<name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_ADPCM_IMA_WAV</name> <operator>||</operator>

<name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_QDM2</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>version</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>mov</name><operator>-&gt;</operator><name>encryption_scheme</name></name> <operator>!=</operator> <name>MOV_ENC_NONE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"enca"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>avio_wl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>version</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0xfffe</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x00010000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">72</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><call><name>av_double2int</name><argument_list>(<argument><expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x7F000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><call><name>av_get_bits_per_sample</name><argument_list>(<argument><expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_id</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><call><name>mov_get_lpcm_flags</name><argument_list>(<argument><expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_id</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>sample_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><call><name>get_samples_per_packet</name><argument_list>(<argument><expr><name>track</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>MODE_MOV</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_PCM_U8</name> <operator>||</operator>

<name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_PCM_S8</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if> 

<if type="elseif">else if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_ADPCM_G726</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>bits_per_coded_sample</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>track</name><operator>-&gt;</operator><name>audio_vbr</name></name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if> <else>else <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_FLAC</name> <operator>||</operator>

<name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_ALAC</name> <operator>||</operator>

<name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_OPUS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_FLAC</name> <operator>||</operator>

<name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_ALAC</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_OPUS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">48000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_TRUEHD</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>&lt;=</operator> <name>UINT16_MAX</name></expr> ?</condition><then>

<expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>sample_rate</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>!=</operator> <name>AV_CODEC_ID_TRUEHD</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>version</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><call><name>mov_pcm_le_gt16</name><argument_list>(<argument><expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_id</name></name></expr></argument>)</argument_list></call> <operator>||</operator>

<call><name>mov_pcm_be_gt16</name><argument_list>(<argument><expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_id</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if> 

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>frame_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>sample_size</name></name> <operator>/</operator> <name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>sample_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>MODE_MOV</name> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_AAC</name> <operator>||</operator>

<name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_AC3</name> <operator>||</operator>

<name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_EAC3</name> <operator>||</operator>

<name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_AMR_NB</name> <operator>||</operator>

<name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_ALAC</name> <operator>||</operator>

<name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_ADPCM_MS</name> <operator>||</operator>

<name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_ADPCM_IMA_WAV</name> <operator>||</operator>

<name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_QDM2</name> <operator>||</operator>

<operator>(</operator><call><name>mov_pcm_le_gt16</name><argument_list>(<argument><expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_id</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>version</name><operator>==</operator><literal type="number">1</literal><operator>)</operator> <operator>||</operator>

<operator>(</operator><call><name>mov_pcm_be_gt16</name><argument_list>(<argument><expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_id</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>version</name><operator>==</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mov_write_wave_tag</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>, <argument><expr><name>track</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>tag</name></name> <operator>==</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'m'</literal></expr></argument>,<argument><expr><literal type="char">'p'</literal></expr></argument>,<argument><expr><literal type="char">'4'</literal></expr></argument>,<argument><expr><literal type="char">'a'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mov_write_esds_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>track</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_AMR_NB</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mov_write_amr_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>track</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_AC3</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mov_write_ac3_tag</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>, <argument><expr><name>track</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_EAC3</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mov_write_eac3_tag</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>, <argument><expr><name>track</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_ALAC</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mov_write_extradata_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>track</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_WMAPRO</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mov_write_wfex_tag</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>, <argument><expr><name>track</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_FLAC</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mov_write_dfla_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>track</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_OPUS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mov_write_dops_tag</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>, <argument><expr><name>track</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_TRUEHD</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mov_write_dmlp_tag</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>, <argument><expr><name>track</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>vos_len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mov_write_glbl_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>track</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>MODE_MOV</name> <operator>&amp;&amp;</operator> <name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_AUDIO</name>

<operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>mov_write_chan_tag</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>, <argument><expr><name>track</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mov</name><operator>-&gt;</operator><name>encryption_scheme</name></name> <operator>!=</operator> <name>MOV_ENC_NONE</name>

<operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_mov_cenc_write_sinf_tag</name><argument_list>(<argument><expr><name>track</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>mov</name><operator>-&gt;</operator><name>encryption_kid</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>update_size</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_write_d263_tag</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0xf</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"d263"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"FFMP"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0xa</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<return>return <expr><literal type="number">0xf</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_write_av1c_tag</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>MOVTrack</name> <modifier>*</modifier></type><name>track</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>pos</name> <init>= <expr><call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"av1C"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_isom_write_av1c</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>vos_data</name></name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>vos_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>update_size</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_write_avcc_tag</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>MOVTrack</name> <modifier>*</modifier></type><name>track</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>pos</name> <init>= <expr><call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"avcC"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_isom_write_avcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>vos_data</name></name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>vos_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>update_size</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_write_vpcc_tag</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>MOVTrack</name> <modifier>*</modifier></type><name>track</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>pos</name> <init>= <expr><call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"vpcC"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb24</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ff_isom_write_vpcc</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>par</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>update_size</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_write_hvcc_tag</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>MOVTrack</name> <modifier>*</modifier></type><name>track</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>pos</name> <init>= <expr><call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"hvcC"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>tag</name></name> <operator>==</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'h'</literal></expr></argument>,<argument><expr><literal type="char">'v'</literal></expr></argument>,<argument><expr><literal type="char">'c'</literal></expr></argument>,<argument><expr><literal type="char">'1'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_isom_write_hvcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>vos_data</name></name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>vos_len</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_isom_write_hvcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>vos_data</name></name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>vos_len</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><call><name>update_size</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_write_avid_tag</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>MOVTrack</name> <modifier>*</modifier></type><name>track</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>interlaced</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>display_width</name> <init>= <expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>width</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>vos_data</name></name> <operator>&amp;&amp;</operator> <name><name>track</name><operator>-&gt;</operator><name>vos_len</name></name> <operator>&gt;</operator> <literal type="number">0x29</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>ff_dnxhd_parse_header_prefix</name><argument_list>(<argument><expr><name><name>track</name><operator>-&gt;</operator><name>vos_data</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>interlaced</name> <operator>=</operator> <operator>(</operator><name><name>track</name><operator>-&gt;</operator><name>vos_data</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>cid</name> <operator>=</operator> <call><name>AV_RB32</name><argument_list>(<argument><expr><name><name>track</name><operator>-&gt;</operator><name>vos_data</name></name> <operator>+</operator> <literal type="number">0x28</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Could not locate DNxHD bit stream in vos_data\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Could not locate DNxHD bit stream, vos_data too small\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"ACLR"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"ACLR"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"0001"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>color_range</name></name> <operator>==</operator> <name>AVCOL_RANGE_MPEG</name> <operator>||</operator> 

<name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>color_range</name></name> <operator>==</operator> <name>AVCOL_RANGE_UNSPECIFIED</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if> <else>else <block>{<block_content> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>tag</name></name> <operator>==</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'A'</literal></expr></argument>,<argument><expr><literal type="char">'V'</literal></expr></argument>,<argument><expr><literal type="char">'d'</literal></expr></argument>,<argument><expr><literal type="char">'h'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"ADHR"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"0001"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>cid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"APRG"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"APRG"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"0001"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">120</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"ARES"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"ARES"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"0001"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>cid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>( <expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>num</name></name> <operator>&gt;</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>den</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>display_width</name> <operator>=</operator> <name>display_width</name> <operator>*</operator> <name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>num</name></name> <operator>/</operator> <name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>den</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>display_width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>interlaced</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>height</name></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>height</name></name> <operator>==</operator> <literal type="number">1080</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if> 

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt> 

</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>avio_wb64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_write_dpxe_tag</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>MOVTrack</name> <modifier>*</modifier></type><name>track</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"DpxE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>&gt;=</operator> <literal type="number">12</literal> <operator>&amp;&amp;</operator>

<operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>extradata</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"DpxE"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>extradata</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_get_dv_codec_tag</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>MOVTrack</name> <modifier>*</modifier></type><name>track</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>tag</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>width</name></name> <operator>==</operator> <literal type="number">720</literal></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>height</name></name> <operator>==</operator> <literal type="number">480</literal></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>AV_PIX_FMT_YUV422P</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>tag</name> <operator>=</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'d'</literal></expr></argument>,<argument><expr><literal type="char">'v'</literal></expr></argument>,<argument><expr><literal type="char">'5'</literal></expr></argument>,<argument><expr><literal type="char">'n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>tag</name> <operator>=</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'d'</literal></expr></argument>,<argument><expr><literal type="char">'v'</literal></expr></argument>,<argument><expr><literal type="char">'c'</literal></expr></argument>,<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if><if type="elseif">else if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>AV_PIX_FMT_YUV422P</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>tag</name> <operator>=</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'d'</literal></expr></argument>,<argument><expr><literal type="char">'v'</literal></expr></argument>,<argument><expr><literal type="char">'5'</literal></expr></argument>,<argument><expr><literal type="char">'p'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>AV_PIX_FMT_YUV420P</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>tag</name> <operator>=</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'d'</literal></expr></argument>,<argument><expr><literal type="char">'v'</literal></expr></argument>,<argument><expr><literal type="char">'c'</literal></expr></argument>,<argument><expr><literal type="char">'p'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>tag</name> <operator>=</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'d'</literal></expr></argument>,<argument><expr><literal type="char">'v'</literal></expr></argument>,<argument><expr><literal type="char">'p'</literal></expr></argument>,<argument><expr><literal type="char">'p'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>height</name></name> <operator>==</operator> <literal type="number">720</literal></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>den</name></name> <operator>==</operator> <literal type="number">50</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>tag</name> <operator>=</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'d'</literal></expr></argument>,<argument><expr><literal type="char">'v'</literal></expr></argument>,<argument><expr><literal type="char">'h'</literal></expr></argument>,<argument><expr><literal type="char">'q'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>tag</name> <operator>=</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'d'</literal></expr></argument>,<argument><expr><literal type="char">'v'</literal></expr></argument>,<argument><expr><literal type="char">'h'</literal></expr></argument>,<argument><expr><literal type="char">'p'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>height</name></name> <operator>==</operator> <literal type="number">1080</literal></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>den</name></name> <operator>==</operator> <literal type="number">25</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>tag</name> <operator>=</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'d'</literal></expr></argument>,<argument><expr><literal type="char">'v'</literal></expr></argument>,<argument><expr><literal type="char">'h'</literal></expr></argument>,<argument><expr><literal type="char">'5'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>tag</name> <operator>=</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'d'</literal></expr></argument>,<argument><expr><literal type="char">'v'</literal></expr></argument>,<argument><expr><literal type="char">'h'</literal></expr></argument>,<argument><expr><literal type="char">'6'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"unsupported height for dv codec\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>tag</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>AVRational</name></type> <name>find_fps</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVRational</name></type> <name>rate</name> <init>= <expr><name><name>st</name><operator>-&gt;</operator><name>avg_frame_rate</name></name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_LAVF_AVCTX</name></expr></cpp:if>

<decl_stmt><decl><type><name>FF_DISABLE_DEPRECATION_WARNINGS</name></type>

<name>rate</name> <init>= <expr><call><name>av_inv_q</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_timecode_check_frame_rate</name><argument_list>(<argument><expr><name>rate</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"timecode: tbc=%d/%d invalid, fallback on %d/%d\n"</literal></expr></argument>,

<argument><expr><name><name>rate</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><name><name>rate</name><operator>.</operator><name>den</name></name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>avg_frame_rate</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>avg_frame_rate</name><operator>.</operator><name>den</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rate</name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>avg_frame_rate</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<macro><name>FF_ENABLE_DEPRECATION_WARNINGS</name></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>rate</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>defined_frame_rate</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVRational</name></type> <name>rational_framerate</name> <init>= <expr><call><name>find_fps</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rate</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rational_framerate</name><operator>.</operator><name>den</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>rate</name> <operator>=</operator> <call><name>av_q2d</name><argument_list>(<argument><expr><name>rational_framerate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>rate</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_get_mpeg2_xdcam_codec_tag</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>MOVTrack</name> <modifier>*</modifier></type><name>track</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>tag</name> <init>= <expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_tag</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>interlaced</name> <init>= <expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>field_order</name></name> <operator>&gt;</operator> <name>AV_FIELD_PROGRESSIVE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name><name>track</name><operator>-&gt;</operator><name>st</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rate</name> <init>= <expr><call><name>defined_frame_rate</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tag</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>tag</name> <operator>=</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'m'</literal></expr></argument>, <argument><expr><literal type="char">'2'</literal></expr></argument>, <argument><expr><literal type="char">'v'</literal></expr></argument>, <argument><expr><literal type="char">'1'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>AV_PIX_FMT_YUV420P</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>width</name></name> <operator>==</operator> <literal type="number">1280</literal> <operator>&amp;&amp;</operator> <name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>height</name></name> <operator>==</operator> <literal type="number">720</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>interlaced</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>rate</name> <operator>==</operator> <literal type="number">24</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>tag</name> <operator>=</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'x'</literal></expr></argument>,<argument><expr><literal type="char">'d'</literal></expr></argument>,<argument><expr><literal type="char">'v'</literal></expr></argument>,<argument><expr><literal type="char">'4'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>rate</name> <operator>==</operator> <literal type="number">25</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>tag</name> <operator>=</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'x'</literal></expr></argument>,<argument><expr><literal type="char">'d'</literal></expr></argument>,<argument><expr><literal type="char">'v'</literal></expr></argument>,<argument><expr><literal type="char">'5'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>rate</name> <operator>==</operator> <literal type="number">30</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>tag</name> <operator>=</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'x'</literal></expr></argument>,<argument><expr><literal type="char">'d'</literal></expr></argument>,<argument><expr><literal type="char">'v'</literal></expr></argument>,<argument><expr><literal type="char">'1'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>rate</name> <operator>==</operator> <literal type="number">50</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>tag</name> <operator>=</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'x'</literal></expr></argument>,<argument><expr><literal type="char">'d'</literal></expr></argument>,<argument><expr><literal type="char">'v'</literal></expr></argument>,<argument><expr><literal type="char">'a'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>rate</name> <operator>==</operator> <literal type="number">60</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>tag</name> <operator>=</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'x'</literal></expr></argument>,<argument><expr><literal type="char">'d'</literal></expr></argument>,<argument><expr><literal type="char">'v'</literal></expr></argument>,<argument><expr><literal type="char">'9'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>width</name></name> <operator>==</operator> <literal type="number">1440</literal> <operator>&amp;&amp;</operator> <name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>height</name></name> <operator>==</operator> <literal type="number">1080</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>interlaced</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>rate</name> <operator>==</operator> <literal type="number">24</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>tag</name> <operator>=</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'x'</literal></expr></argument>,<argument><expr><literal type="char">'d'</literal></expr></argument>,<argument><expr><literal type="char">'v'</literal></expr></argument>,<argument><expr><literal type="char">'6'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>rate</name> <operator>==</operator> <literal type="number">25</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>tag</name> <operator>=</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'x'</literal></expr></argument>,<argument><expr><literal type="char">'d'</literal></expr></argument>,<argument><expr><literal type="char">'v'</literal></expr></argument>,<argument><expr><literal type="char">'7'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>rate</name> <operator>==</operator> <literal type="number">30</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>tag</name> <operator>=</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'x'</literal></expr></argument>,<argument><expr><literal type="char">'d'</literal></expr></argument>,<argument><expr><literal type="char">'v'</literal></expr></argument>,<argument><expr><literal type="char">'8'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>rate</name> <operator>==</operator> <literal type="number">25</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>tag</name> <operator>=</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'x'</literal></expr></argument>,<argument><expr><literal type="char">'d'</literal></expr></argument>,<argument><expr><literal type="char">'v'</literal></expr></argument>,<argument><expr><literal type="char">'3'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>rate</name> <operator>==</operator> <literal type="number">30</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>tag</name> <operator>=</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'x'</literal></expr></argument>,<argument><expr><literal type="char">'d'</literal></expr></argument>,<argument><expr><literal type="char">'v'</literal></expr></argument>,<argument><expr><literal type="char">'2'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>width</name></name> <operator>==</operator> <literal type="number">1920</literal> <operator>&amp;&amp;</operator> <name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>height</name></name> <operator>==</operator> <literal type="number">1080</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>interlaced</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>rate</name> <operator>==</operator> <literal type="number">24</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>tag</name> <operator>=</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'x'</literal></expr></argument>,<argument><expr><literal type="char">'d'</literal></expr></argument>,<argument><expr><literal type="char">'v'</literal></expr></argument>,<argument><expr><literal type="char">'d'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>rate</name> <operator>==</operator> <literal type="number">25</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>tag</name> <operator>=</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'x'</literal></expr></argument>,<argument><expr><literal type="char">'d'</literal></expr></argument>,<argument><expr><literal type="char">'v'</literal></expr></argument>,<argument><expr><literal type="char">'e'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>rate</name> <operator>==</operator> <literal type="number">30</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>tag</name> <operator>=</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'x'</literal></expr></argument>,<argument><expr><literal type="char">'d'</literal></expr></argument>,<argument><expr><literal type="char">'v'</literal></expr></argument>,<argument><expr><literal type="char">'f'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>rate</name> <operator>==</operator> <literal type="number">25</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>tag</name> <operator>=</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'x'</literal></expr></argument>,<argument><expr><literal type="char">'d'</literal></expr></argument>,<argument><expr><literal type="char">'v'</literal></expr></argument>,<argument><expr><literal type="char">'c'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>rate</name> <operator>==</operator> <literal type="number">30</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>tag</name> <operator>=</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'x'</literal></expr></argument>,<argument><expr><literal type="char">'d'</literal></expr></argument>,<argument><expr><literal type="char">'v'</literal></expr></argument>,<argument><expr><literal type="char">'b'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>AV_PIX_FMT_YUV422P</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>width</name></name> <operator>==</operator> <literal type="number">1280</literal> <operator>&amp;&amp;</operator> <name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>height</name></name> <operator>==</operator> <literal type="number">720</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>interlaced</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>rate</name> <operator>==</operator> <literal type="number">24</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>tag</name> <operator>=</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'x'</literal></expr></argument>,<argument><expr><literal type="char">'d'</literal></expr></argument>,<argument><expr><literal type="char">'5'</literal></expr></argument>,<argument><expr><literal type="char">'4'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>rate</name> <operator>==</operator> <literal type="number">25</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>tag</name> <operator>=</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'x'</literal></expr></argument>,<argument><expr><literal type="char">'d'</literal></expr></argument>,<argument><expr><literal type="char">'5'</literal></expr></argument>,<argument><expr><literal type="char">'5'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>rate</name> <operator>==</operator> <literal type="number">30</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>tag</name> <operator>=</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'x'</literal></expr></argument>,<argument><expr><literal type="char">'d'</literal></expr></argument>,<argument><expr><literal type="char">'5'</literal></expr></argument>,<argument><expr><literal type="char">'1'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>rate</name> <operator>==</operator> <literal type="number">50</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>tag</name> <operator>=</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'x'</literal></expr></argument>,<argument><expr><literal type="char">'d'</literal></expr></argument>,<argument><expr><literal type="char">'5'</literal></expr></argument>,<argument><expr><literal type="char">'a'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>rate</name> <operator>==</operator> <literal type="number">60</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>tag</name> <operator>=</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'x'</literal></expr></argument>,<argument><expr><literal type="char">'d'</literal></expr></argument>,<argument><expr><literal type="char">'5'</literal></expr></argument>,<argument><expr><literal type="char">'9'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>width</name></name> <operator>==</operator> <literal type="number">1920</literal> <operator>&amp;&amp;</operator> <name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>height</name></name> <operator>==</operator> <literal type="number">1080</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>interlaced</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>rate</name> <operator>==</operator> <literal type="number">24</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>tag</name> <operator>=</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'x'</literal></expr></argument>,<argument><expr><literal type="char">'d'</literal></expr></argument>,<argument><expr><literal type="char">'5'</literal></expr></argument>,<argument><expr><literal type="char">'d'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>rate</name> <operator>==</operator> <literal type="number">25</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>tag</name> <operator>=</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'x'</literal></expr></argument>,<argument><expr><literal type="char">'d'</literal></expr></argument>,<argument><expr><literal type="char">'5'</literal></expr></argument>,<argument><expr><literal type="char">'e'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>rate</name> <operator>==</operator> <literal type="number">30</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>tag</name> <operator>=</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'x'</literal></expr></argument>,<argument><expr><literal type="char">'d'</literal></expr></argument>,<argument><expr><literal type="char">'5'</literal></expr></argument>,<argument><expr><literal type="char">'f'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>rate</name> <operator>==</operator> <literal type="number">25</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>tag</name> <operator>=</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'x'</literal></expr></argument>,<argument><expr><literal type="char">'d'</literal></expr></argument>,<argument><expr><literal type="char">'5'</literal></expr></argument>,<argument><expr><literal type="char">'c'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>rate</name> <operator>==</operator> <literal type="number">30</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>tag</name> <operator>=</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'x'</literal></expr></argument>,<argument><expr><literal type="char">'d'</literal></expr></argument>,<argument><expr><literal type="char">'5'</literal></expr></argument>,<argument><expr><literal type="char">'b'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>tag</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_get_h264_codec_tag</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>MOVTrack</name> <modifier>*</modifier></type><name>track</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>tag</name> <init>= <expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_tag</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>interlaced</name> <init>= <expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>field_order</name></name> <operator>&gt;</operator> <name>AV_FIELD_PROGRESSIVE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name><name>track</name><operator>-&gt;</operator><name>st</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rate</name> <init>= <expr><call><name>defined_frame_rate</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tag</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>tag</name> <operator>=</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'a'</literal></expr></argument>, <argument><expr><literal type="char">'v'</literal></expr></argument>, <argument><expr><literal type="char">'c'</literal></expr></argument>, <argument><expr><literal type="char">'i'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>AV_PIX_FMT_YUV420P10</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>width</name></name> <operator>==</operator> <literal type="number">960</literal> <operator>&amp;&amp;</operator> <name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>height</name></name> <operator>==</operator> <literal type="number">720</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>interlaced</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>rate</name> <operator>==</operator> <literal type="number">24</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>tag</name> <operator>=</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'a'</literal></expr></argument>,<argument><expr><literal type="char">'i'</literal></expr></argument>,<argument><expr><literal type="char">'5'</literal></expr></argument>,<argument><expr><literal type="char">'p'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>rate</name> <operator>==</operator> <literal type="number">25</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>tag</name> <operator>=</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'a'</literal></expr></argument>,<argument><expr><literal type="char">'i'</literal></expr></argument>,<argument><expr><literal type="char">'5'</literal></expr></argument>,<argument><expr><literal type="char">'q'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>rate</name> <operator>==</operator> <literal type="number">30</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>tag</name> <operator>=</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'a'</literal></expr></argument>,<argument><expr><literal type="char">'i'</literal></expr></argument>,<argument><expr><literal type="char">'5'</literal></expr></argument>,<argument><expr><literal type="char">'p'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>rate</name> <operator>==</operator> <literal type="number">50</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>tag</name> <operator>=</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'a'</literal></expr></argument>,<argument><expr><literal type="char">'i'</literal></expr></argument>,<argument><expr><literal type="char">'5'</literal></expr></argument>,<argument><expr><literal type="char">'q'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>rate</name> <operator>==</operator> <literal type="number">60</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>tag</name> <operator>=</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'a'</literal></expr></argument>,<argument><expr><literal type="char">'i'</literal></expr></argument>,<argument><expr><literal type="char">'5'</literal></expr></argument>,<argument><expr><literal type="char">'p'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>width</name></name> <operator>==</operator> <literal type="number">1440</literal> <operator>&amp;&amp;</operator> <name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>height</name></name> <operator>==</operator> <literal type="number">1080</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>interlaced</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>rate</name> <operator>==</operator> <literal type="number">24</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>tag</name> <operator>=</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'a'</literal></expr></argument>,<argument><expr><literal type="char">'i'</literal></expr></argument>,<argument><expr><literal type="char">'5'</literal></expr></argument>,<argument><expr><literal type="char">'3'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>rate</name> <operator>==</operator> <literal type="number">25</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>tag</name> <operator>=</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'a'</literal></expr></argument>,<argument><expr><literal type="char">'i'</literal></expr></argument>,<argument><expr><literal type="char">'5'</literal></expr></argument>,<argument><expr><literal type="char">'2'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>rate</name> <operator>==</operator> <literal type="number">30</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>tag</name> <operator>=</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'a'</literal></expr></argument>,<argument><expr><literal type="char">'i'</literal></expr></argument>,<argument><expr><literal type="char">'5'</literal></expr></argument>,<argument><expr><literal type="char">'3'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>rate</name> <operator>==</operator> <literal type="number">50</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>tag</name> <operator>=</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'a'</literal></expr></argument>,<argument><expr><literal type="char">'i'</literal></expr></argument>,<argument><expr><literal type="char">'5'</literal></expr></argument>,<argument><expr><literal type="char">'5'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>rate</name> <operator>==</operator> <literal type="number">60</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>tag</name> <operator>=</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'a'</literal></expr></argument>,<argument><expr><literal type="char">'i'</literal></expr></argument>,<argument><expr><literal type="char">'5'</literal></expr></argument>,<argument><expr><literal type="char">'6'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>AV_PIX_FMT_YUV422P10</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>width</name></name> <operator>==</operator> <literal type="number">1280</literal> <operator>&amp;&amp;</operator> <name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>height</name></name> <operator>==</operator> <literal type="number">720</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>interlaced</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>rate</name> <operator>==</operator> <literal type="number">24</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>tag</name> <operator>=</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'a'</literal></expr></argument>,<argument><expr><literal type="char">'i'</literal></expr></argument>,<argument><expr><literal type="char">'1'</literal></expr></argument>,<argument><expr><literal type="char">'p'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>rate</name> <operator>==</operator> <literal type="number">25</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>tag</name> <operator>=</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'a'</literal></expr></argument>,<argument><expr><literal type="char">'i'</literal></expr></argument>,<argument><expr><literal type="char">'1'</literal></expr></argument>,<argument><expr><literal type="char">'q'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>rate</name> <operator>==</operator> <literal type="number">30</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>tag</name> <operator>=</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'a'</literal></expr></argument>,<argument><expr><literal type="char">'i'</literal></expr></argument>,<argument><expr><literal type="char">'1'</literal></expr></argument>,<argument><expr><literal type="char">'p'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>rate</name> <operator>==</operator> <literal type="number">50</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>tag</name> <operator>=</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'a'</literal></expr></argument>,<argument><expr><literal type="char">'i'</literal></expr></argument>,<argument><expr><literal type="char">'1'</literal></expr></argument>,<argument><expr><literal type="char">'q'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>rate</name> <operator>==</operator> <literal type="number">60</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>tag</name> <operator>=</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'a'</literal></expr></argument>,<argument><expr><literal type="char">'i'</literal></expr></argument>,<argument><expr><literal type="char">'1'</literal></expr></argument>,<argument><expr><literal type="char">'p'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>width</name></name> <operator>==</operator> <literal type="number">1920</literal> <operator>&amp;&amp;</operator> <name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>height</name></name> <operator>==</operator> <literal type="number">1080</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>interlaced</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>rate</name> <operator>==</operator> <literal type="number">24</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>tag</name> <operator>=</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'a'</literal></expr></argument>,<argument><expr><literal type="char">'i'</literal></expr></argument>,<argument><expr><literal type="char">'1'</literal></expr></argument>,<argument><expr><literal type="char">'3'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>rate</name> <operator>==</operator> <literal type="number">25</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>tag</name> <operator>=</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'a'</literal></expr></argument>,<argument><expr><literal type="char">'i'</literal></expr></argument>,<argument><expr><literal type="char">'1'</literal></expr></argument>,<argument><expr><literal type="char">'2'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>rate</name> <operator>==</operator> <literal type="number">30</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>tag</name> <operator>=</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'a'</literal></expr></argument>,<argument><expr><literal type="char">'i'</literal></expr></argument>,<argument><expr><literal type="char">'1'</literal></expr></argument>,<argument><expr><literal type="char">'3'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>rate</name> <operator>==</operator> <literal type="number">25</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>tag</name> <operator>=</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'a'</literal></expr></argument>,<argument><expr><literal type="char">'i'</literal></expr></argument>,<argument><expr><literal type="char">'1'</literal></expr></argument>,<argument><expr><literal type="char">'5'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>rate</name> <operator>==</operator> <literal type="number">50</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>tag</name> <operator>=</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'a'</literal></expr></argument>,<argument><expr><literal type="char">'i'</literal></expr></argument>,<argument><expr><literal type="char">'1'</literal></expr></argument>,<argument><expr><literal type="char">'5'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>rate</name> <operator>==</operator> <literal type="number">60</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>tag</name> <operator>=</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'a'</literal></expr></argument>,<argument><expr><literal type="char">'i'</literal></expr></argument>,<argument><expr><literal type="char">'1'</literal></expr></argument>,<argument><expr><literal type="char">'6'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>width</name></name> <operator>==</operator> <literal type="number">4096</literal> <operator>&amp;&amp;</operator> <name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>height</name></name> <operator>==</operator> <literal type="number">2160</literal>

<operator>||</operator> <name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>width</name></name> <operator>==</operator> <literal type="number">3840</literal> <operator>&amp;&amp;</operator> <name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>height</name></name> <operator>==</operator> <literal type="number">2160</literal>

<operator>||</operator> <name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>width</name></name> <operator>==</operator> <literal type="number">2048</literal> <operator>&amp;&amp;</operator> <name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>height</name></name> <operator>==</operator> <literal type="number">1080</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tag</name> <operator>=</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'a'</literal></expr></argument>,<argument><expr><literal type="char">'i'</literal></expr></argument>,<argument><expr><literal type="char">'v'</literal></expr></argument>,<argument><expr><literal type="char">'x'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>tag</name></expr>;</return>

</block_content>}</block></function>

<struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{

<decl_stmt><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>pix_fmt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>tag</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>bps</name></decl>;</decl_stmt>

}</block> <decl><name><name>mov_pix_fmt_tags</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><name>AV_PIX_FMT_YUYV422</name></expr>, <expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'y'</literal></expr></argument>,<argument><expr><literal type="char">'u'</literal></expr></argument>,<argument><expr><literal type="char">'v'</literal></expr></argument>,<argument><expr><literal type="char">'2'</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>AV_PIX_FMT_YUYV422</name></expr>, <expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'y'</literal></expr></argument>,<argument><expr><literal type="char">'u'</literal></expr></argument>,<argument><expr><literal type="char">'v'</literal></expr></argument>,<argument><expr><literal type="char">'s'</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>AV_PIX_FMT_UYVY422</name></expr>, <expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'2'</literal></expr></argument>,<argument><expr><literal type="char">'v'</literal></expr></argument>,<argument><expr><literal type="char">'u'</literal></expr></argument>,<argument><expr><literal type="char">'y'</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>AV_PIX_FMT_RGB555BE</name></expr>,<expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'r'</literal></expr></argument>,<argument><expr><literal type="char">'a'</literal></expr></argument>,<argument><expr><literal type="char">'w'</literal></expr></argument>,<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">16</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>AV_PIX_FMT_RGB555LE</name></expr>,<expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'L'</literal></expr></argument>,<argument><expr><literal type="char">'5'</literal></expr></argument>,<argument><expr><literal type="char">'5'</literal></expr></argument>,<argument><expr><literal type="char">'5'</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">16</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>AV_PIX_FMT_RGB565LE</name></expr>,<expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'L'</literal></expr></argument>,<argument><expr><literal type="char">'5'</literal></expr></argument>,<argument><expr><literal type="char">'6'</literal></expr></argument>,<argument><expr><literal type="char">'5'</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">16</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>AV_PIX_FMT_RGB565BE</name></expr>,<expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'B'</literal></expr></argument>,<argument><expr><literal type="char">'5'</literal></expr></argument>,<argument><expr><literal type="char">'6'</literal></expr></argument>,<argument><expr><literal type="char">'5'</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">16</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>AV_PIX_FMT_GRAY16BE</name></expr>,<expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'b'</literal></expr></argument>,<argument><expr><literal type="char">'1'</literal></expr></argument>,<argument><expr><literal type="char">'6'</literal></expr></argument>,<argument><expr><literal type="char">'g'</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">16</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>AV_PIX_FMT_RGB24</name></expr>, <expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'r'</literal></expr></argument>,<argument><expr><literal type="char">'a'</literal></expr></argument>,<argument><expr><literal type="char">'w'</literal></expr></argument>,<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">24</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>AV_PIX_FMT_BGR24</name></expr>, <expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'2'</literal></expr></argument>,<argument><expr><literal type="char">'4'</literal></expr></argument>,<argument><expr><literal type="char">'B'</literal></expr></argument>,<argument><expr><literal type="char">'G'</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">24</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>AV_PIX_FMT_ARGB</name></expr>, <expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'r'</literal></expr></argument>,<argument><expr><literal type="char">'a'</literal></expr></argument>,<argument><expr><literal type="char">'w'</literal></expr></argument>,<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">32</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>AV_PIX_FMT_BGRA</name></expr>, <expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'B'</literal></expr></argument>,<argument><expr><literal type="char">'G'</literal></expr></argument>,<argument><expr><literal type="char">'R'</literal></expr></argument>,<argument><expr><literal type="char">'A'</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">32</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>AV_PIX_FMT_RGBA</name></expr>, <expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'R'</literal></expr></argument>,<argument><expr><literal type="char">'G'</literal></expr></argument>,<argument><expr><literal type="char">'B'</literal></expr></argument>,<argument><expr><literal type="char">'A'</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">32</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>AV_PIX_FMT_ABGR</name></expr>, <expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'A'</literal></expr></argument>,<argument><expr><literal type="char">'B'</literal></expr></argument>,<argument><expr><literal type="char">'G'</literal></expr></argument>,<argument><expr><literal type="char">'R'</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">32</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>AV_PIX_FMT_RGB48BE</name></expr>, <expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'b'</literal></expr></argument>,<argument><expr><literal type="char">'4'</literal></expr></argument>,<argument><expr><literal type="char">'8'</literal></expr></argument>,<argument><expr><literal type="char">'r'</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">48</literal></expr> }</block></expr>,

}</block></expr></init></decl>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_get_dnxhd_codec_tag</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>MOVTrack</name> <modifier>*</modifier></type><name>track</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>tag</name> <init>= <expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'A'</literal></expr></argument>,<argument><expr><literal type="char">'V'</literal></expr></argument>,<argument><expr><literal type="char">'d'</literal></expr></argument>,<argument><expr><literal type="char">'n'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>profile</name></name> <operator>!=</operator> <name>FF_PROFILE_UNKNOWN</name> <operator>&amp;&amp;</operator>

<name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>profile</name></name> <operator>!=</operator> <name>FF_PROFILE_DNXHD</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>tag</name> <operator>=</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'A'</literal></expr></argument>,<argument><expr><literal type="char">'V'</literal></expr></argument>,<argument><expr><literal type="char">'d'</literal></expr></argument>,<argument><expr><literal type="char">'h'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>tag</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_get_rawvideo_codec_tag</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>MOVTrack</name> <modifier>*</modifier></type><name>track</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>tag</name> <init>= <expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_tag</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>pix_fmt</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>mov_pix_fmt_tags</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name><name>mov_pix_fmt_tags</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pix_fmt</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tag</name> <operator>=</operator> <name><name>mov_pix_fmt_tags</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>tag</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>bits_per_coded_sample</name></name> <operator>=</operator> <name><name>mov_pix_fmt_tags</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bps</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_tag</name></name> <operator>==</operator> <name><name>mov_pix_fmt_tags</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>tag</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>pix_fmt</name> <operator>=</operator> <call><name>avpriv_find_pix_fmt</name><argument_list>(<argument><expr><name>avpriv_pix_fmt_bps_mov</name></expr></argument>,

<argument><expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>bits_per_coded_sample</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tag</name> <operator>==</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'r'</literal></expr></argument>,<argument><expr><literal type="char">'a'</literal></expr></argument>,<argument><expr><literal type="char">'w'</literal></expr></argument>,<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>format</name></name> <operator>!=</operator> <name>pix_fmt</name> <operator>&amp;&amp;</operator>

<name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>format</name></name> <operator>!=</operator> <name>AV_PIX_FMT_GRAY8</name> <operator>&amp;&amp;</operator>

<name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>format</name></name> <operator>!=</operator> <name>AV_PIX_FMT_NONE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"%s rawvideo cannot be written to mov, output file will be unreadable\n"</literal></expr></argument>,

<argument><expr><call><name>av_get_pix_fmt_name</name><argument_list>(<argument><expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>tag</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>mov_get_codec_tag</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>MOVTrack</name> <modifier>*</modifier></type><name>track</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>tag</name> <init>= <expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_tag</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tag</name> <operator>||</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>strict_std_compliance</name></name> <operator>&gt;=</operator> <name>FF_COMPLIANCE_NORMAL</name> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_DVVIDEO</name> <operator>||</operator>

<name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_RAWVIDEO</name> <operator>||</operator>

<name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_H263</name> <operator>||</operator>

<name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_H264</name> <operator>||</operator>

<name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_DNXHD</name> <operator>||</operator>

<name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_MPEG2VIDEO</name> <operator>||</operator>

<call><name>av_get_bits_per_sample</name><argument_list>(<argument><expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_id</name></name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_DVVIDEO</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>tag</name> <operator>=</operator> <call><name>mov_get_dv_codec_tag</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>track</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_RAWVIDEO</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>tag</name> <operator>=</operator> <call><name>mov_get_rawvideo_codec_tag</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>track</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_MPEG2VIDEO</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>tag</name> <operator>=</operator> <call><name>mov_get_mpeg2_xdcam_codec_tag</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>track</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_H264</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>tag</name> <operator>=</operator> <call><name>mov_get_h264_codec_tag</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>track</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_DNXHD</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>tag</name> <operator>=</operator> <call><name>mov_get_dnxhd_codec_tag</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>track</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tag</name> <operator>=</operator> <call><name>ff_codec_get_tag</name><argument_list>(<argument><expr><name>ff_codec_movvideo_tags</name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tag</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>tag</name> <operator>=</operator> <call><name>ff_codec_get_tag</name><argument_list>(<argument><expr><name>ff_codec_bmp_tags</name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tag</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Using MS style video codec tag, "</literal>

<literal type="string">"the file may be unplayable!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tag</name> <operator>=</operator> <call><name>ff_codec_get_tag</name><argument_list>(<argument><expr><name>ff_codec_movaudio_tags</name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tag</name></expr>)</condition> <block>{<block_content> 

<decl_stmt><decl><type><name>int</name></type> <name>ms_tag</name> <init>= <expr><call><name>ff_codec_get_tag</name><argument_list>(<argument><expr><name>ff_codec_wav_tags</name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_id</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ms_tag</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tag</name> <operator>=</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'m'</literal></expr></argument>, <argument><expr><literal type="char">'s'</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>ms_tag</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>ms_tag</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Using MS style audio codec tag, "</literal>

<literal type="string">"the file may be unplayable!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_SUBTITLE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>tag</name> <operator>=</operator> <call><name>ff_codec_get_tag</name><argument_list>(<argument><expr><name>ff_codec_movsubtitle_tags</name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>tag</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVCodecTag</name></type> <name><name>codec_cover_image_tags</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><name>AV_CODEC_ID_MJPEG</name></expr>, <expr><literal type="number">0xD</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>AV_CODEC_ID_PNG</name></expr>, <expr><literal type="number">0xE</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>AV_CODEC_ID_BMP</name></expr>, <expr><literal type="number">0x1B</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>AV_CODEC_ID_NONE</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>validate_codec_tag</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVCodecTag</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>tags</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>tag</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>codec_id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>tags</name> <operator>&amp;&amp;</operator> <name><name>tags</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVCodecTag</name> <modifier>*</modifier></type><name>codec_tags</name> <init>= <expr><name><name>tags</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name><name>codec_tags</name><operator>-&gt;</operator><name>id</name></name> <operator>!=</operator> <name>AV_CODEC_ID_NONE</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>avpriv_toupper4</name><argument_list>(<argument><expr><name><name>codec_tags</name><operator>-&gt;</operator><name>tag</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>avpriv_toupper4</name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<name><name>codec_tags</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name>codec_id</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>codec_tags</name><operator>-&gt;</operator><name>tag</name></name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>codec_tags</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>mov_find_codec_tag</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>MOVTrack</name> <modifier>*</modifier></type><name>track</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>is_cover_image</name><argument_list>(<argument><expr><name><name>track</name><operator>-&gt;</operator><name>st</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>ff_codec_get_tag</name><argument_list>(<argument><expr><name>codec_cover_image_tags</name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_id</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>MODE_IPOD</name></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>av_match_ext</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>url</name></name></expr></argument>, <argument><expr><literal type="string">"m4a"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<operator>!</operator><call><name>av_match_ext</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>url</name></name></expr></argument>, <argument><expr><literal type="string">"m4v"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<operator>!</operator><call><name>av_match_ext</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>url</name></name></expr></argument>, <argument><expr><literal type="string">"m4b"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Warning, extension is not .m4a nor .m4v "</literal>

<literal type="string">"Quicktime/Ipod might not play the file\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>MODE_MOV</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>mov_get_codec_tag</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>track</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<return>return <expr><call><name>validate_codec_tag</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>oformat</name><operator>-&gt;</operator><name>codec_tag</name></name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_tag</name></name></expr></argument>,

<argument><expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_id</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_write_uuid_tag_ipod</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">28</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"uuid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x6b6840f2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x5f244fc5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0xba39a51b</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0xcf0323f3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">28</literal></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint16_t</name></type> <name><name>fiel_data</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0100</literal></expr>, <expr><literal type="number">0x0201</literal></expr>, <expr><literal type="number">0x0206</literal></expr>, <expr><literal type="number">0x0209</literal></expr>, <expr><literal type="number">0x020e</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_write_fiel_tag</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>MOVTrack</name> <modifier>*</modifier></type><name>track</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>field_order</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>mov_field_order</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>field_order</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>fiel_data</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>mov_field_order</name> <operator>=</operator> <name><name>fiel_data</name><index>[<expr><name>field_order</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"fiel"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>mov_field_order</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">10</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_write_subtitle_tag</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>MOVTrack</name> <modifier>*</modifier></type><name>track</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>pos</name> <init>= <expr><call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>tag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_DVD_SUBTITLE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mov_write_esds_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>track</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>extradata_size</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>extradata_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>update_size</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_write_st3d_tag</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>AVStereo3D</name> <modifier>*</modifier></type><name>stereo_3d</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int8_t</name></type> <name>stereo_mode</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>stereo_3d</name><operator>-&gt;</operator><name>flags</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Unsupported stereo_3d flags %x. st3d not written.\n"</literal></expr></argument>, <argument><expr><name><name>stereo_3d</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>stereo_3d</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_STEREO3D_2D</name></expr>:</case>

<expr_stmt><expr><name>stereo_mode</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_STEREO3D_TOPBOTTOM</name></expr>:</case>

<expr_stmt><expr><name>stereo_mode</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_STEREO3D_SIDEBYSIDE</name></expr>:</case>

<expr_stmt><expr><name>stereo_mode</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Unsupported stereo_3d type %s. st3d not written.\n"</literal></expr></argument>, <argument><expr><call><name>av_stereo3d_type_name</name><argument_list>(<argument><expr><name><name>stereo_3d</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"st3d"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>stereo_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">13</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_write_sv3d_tag</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>AVSphericalMapping</name> <modifier>*</modifier></type><name>spherical_mapping</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>sv3d_pos</name></decl>, <decl><type ref="prev"/><name>svhd_pos</name></decl>, <decl><type ref="prev"/><name>proj_pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>metadata_source</name> <init>= <expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AVFMT_FLAG_BITEXACT</name></expr> ?</condition><then> <expr><literal type="string">"Lavf"</literal></expr> </then><else>: <expr><name>LIBAVFORMAT_IDENT</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>spherical_mapping</name><operator>-&gt;</operator><name>projection</name></name> <operator>!=</operator> <name>AV_SPHERICAL_EQUIRECTANGULAR</name> <operator>&amp;&amp;</operator>

<name><name>spherical_mapping</name><operator>-&gt;</operator><name>projection</name></name> <operator>!=</operator> <name>AV_SPHERICAL_EQUIRECTANGULAR_TILE</name> <operator>&amp;&amp;</operator>

<name><name>spherical_mapping</name><operator>-&gt;</operator><name>projection</name></name> <operator>!=</operator> <name>AV_SPHERICAL_CUBEMAP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Unsupported projection %d. sv3d not written.\n"</literal></expr></argument>, <argument><expr><name><name>spherical_mapping</name><operator>-&gt;</operator><name>projection</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>sv3d_pos</name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"sv3d"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>svhd_pos</name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"svhd"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_put_str</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>metadata_source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>update_size</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>svhd_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>proj_pos</name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"proj"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"prhd"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>spherical_mapping</name><operator>-&gt;</operator><name>yaw</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>spherical_mapping</name><operator>-&gt;</operator><name>pitch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>spherical_mapping</name><operator>-&gt;</operator><name>roll</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>spherical_mapping</name><operator>-&gt;</operator><name>projection</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_SPHERICAL_EQUIRECTANGULAR</name></expr>:</case>

<case>case <expr><name>AV_SPHERICAL_EQUIRECTANGULAR_TILE</name></expr>:</case>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">28</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"equi"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>spherical_mapping</name><operator>-&gt;</operator><name>bound_top</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>spherical_mapping</name><operator>-&gt;</operator><name>bound_bottom</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>spherical_mapping</name><operator>-&gt;</operator><name>bound_left</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>spherical_mapping</name><operator>-&gt;</operator><name>bound_right</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_SPHERICAL_CUBEMAP</name></expr>:</case>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"cbmp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>spherical_mapping</name><operator>-&gt;</operator><name>padding</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>update_size</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>proj_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>update_size</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>sv3d_pos</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_write_clap_tag</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>MOVTrack</name> <modifier>*</modifier></type><name>track</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"clap"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<return>return <expr><literal type="number">40</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_write_pasp_tag</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>MOVTrack</name> <modifier>*</modifier></type><name>track</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVRational</name></type> <name>sar</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_reduce</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sar</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sar</name><operator>.</operator><name>den</name></name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>num</name></name></expr></argument>,

<argument><expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>den</name></name></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"pasp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>sar</name><operator>.</operator><name>num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>sar</name><operator>.</operator><name>den</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">16</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_write_gama_tag</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>MOVTrack</name> <modifier>*</modifier></type><name>track</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>gamma</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>gama</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>gamma</name> <operator>&lt;=</operator> <literal type="number">0.0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>gamma</name> <operator>=</operator> <call><name>avpriv_get_gamma_from_trc</name><argument_list>(<argument><expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>color_trc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"gamma value %g\n"</literal></expr></argument>, <argument><expr><name>gamma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>gamma</name> <operator>&gt;</operator> <literal type="number">1e-6</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>gama</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><call><name>lrint</name><argument_list>(<argument><expr><operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">16</literal><operator>)</operator> <operator>*</operator> <name>gamma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"writing gama value %"</literal><name>PRId32</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>gama</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>track</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>MODE_MOV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"gama"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>gama</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">12</literal></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"gamma value unknown, unable to write gama atom\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_write_colr_tag</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>MOVTrack</name> <modifier>*</modifier></type><name>track</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>prefer_icc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>pos</name> <init>= <expr><call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>icc_profile</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>icc_profile_size</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>prefer_icc</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>icc_profile</name> <operator>=</operator> <call><name>av_stream_get_side_data</name><argument_list>(<argument><expr><name><name>track</name><operator>-&gt;</operator><name>st</name></name></expr></argument>, <argument><expr><name>AV_PKT_DATA_ICC_PROFILE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>icc_profile_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>icc_profile</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">12</literal> <operator>+</operator> <name>icc_profile_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"colr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"prof"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>icc_profile</name></expr></argument>, <argument><expr><name>icc_profile_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">12</literal> <operator>+</operator> <name>icc_profile_size</name></expr>;</return>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"no ICC profile found, will write nclx/nclc colour info instead\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>color_primaries</name></name> <operator>==</operator> <name>AVCOL_PRI_UNSPECIFIED</name> <operator>&amp;&amp;</operator>

<name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>color_trc</name></name> <operator>==</operator> <name>AVCOL_TRC_UNSPECIFIED</name> <operator>&amp;&amp;</operator>

<name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>color_space</name></name> <operator>==</operator> <name>AVCOL_SPC_UNSPECIFIED</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>width</name></name> <operator>&gt;=</operator> <literal type="number">1920</literal> <operator>&amp;&amp;</operator> <name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>height</name></name> <operator>&gt;=</operator> <literal type="number">1080</literal><operator>)</operator>

<operator>||</operator> <operator>(</operator><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>width</name></name> <operator>==</operator> <literal type="number">1280</literal> <operator>&amp;&amp;</operator> <name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>height</name></name> <operator>==</operator> <literal type="number">720</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"color primaries unspecified, assuming bt709\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>color_primaries</name></name> <operator>=</operator> <name>AVCOL_PRI_BT709</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>width</name></name> <operator>==</operator> <literal type="number">720</literal> <operator>&amp;&amp;</operator> <name><name>track</name><operator>-&gt;</operator><name>height</name></name> <operator>==</operator> <literal type="number">576</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"color primaries unspecified, assuming bt470bg\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>color_primaries</name></name> <operator>=</operator> <name>AVCOL_PRI_BT470BG</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>width</name></name> <operator>==</operator> <literal type="number">720</literal> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>track</name><operator>-&gt;</operator><name>height</name></name> <operator>==</operator> <literal type="number">486</literal> <operator>||</operator> <name><name>track</name><operator>-&gt;</operator><name>height</name></name> <operator>==</operator> <literal type="number">480</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"color primaries unspecified, assuming smpte170\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>color_primaries</name></name> <operator>=</operator> <name>AVCOL_PRI_SMPTE170M</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"color primaries unspecified, unable to assume anything\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<switch>switch <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>color_primaries</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AVCOL_PRI_BT709</name></expr>:</case>

<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>color_trc</name></name> <operator>=</operator> <name>AVCOL_TRC_BT709</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>color_space</name></name> <operator>=</operator> <name>AVCOL_SPC_BT709</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AVCOL_PRI_SMPTE170M</name></expr>:</case>

<case>case <expr><name>AVCOL_PRI_BT470BG</name></expr>:</case>

<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>color_trc</name></name> <operator>=</operator> <name>AVCOL_TRC_BT709</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>color_space</name></name> <operator>=</operator> <name>AVCOL_SPC_SMPTE170M</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>track</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>MODE_MOV</name> <operator>||</operator> <name><name>track</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>MODE_MP4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"colr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>MODE_MP4</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"nclx"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"nclc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<switch>switch <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>color_primaries</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AVCOL_PRI_BT709</name></expr>:</case> <expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>AVCOL_PRI_BT470BG</name></expr>:</case> <expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>AVCOL_PRI_SMPTE170M</name></expr>:</case>

<case>case <expr><name>AVCOL_PRI_SMPTE240M</name></expr>:</case> <expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>AVCOL_PRI_BT2020</name></expr>:</case> <expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>AVCOL_PRI_SMPTE431</name></expr>:</case> <expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>AVCOL_PRI_SMPTE432</name></expr>:</case> <expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<default>default:</default> <expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<switch>switch <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>color_trc</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AVCOL_TRC_BT709</name></expr>:</case> <expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>AVCOL_TRC_SMPTE170M</name></expr>:</case> <expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break> 

<case>case <expr><name>AVCOL_TRC_SMPTE240M</name></expr>:</case> <expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>AVCOL_TRC_SMPTEST2084</name></expr>:</case> <expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>AVCOL_TRC_SMPTE428</name></expr>:</case> <expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">17</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>AVCOL_TRC_ARIB_STD_B67</name></expr>:</case> <expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">18</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<default>default:</default> <expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<switch>switch <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>color_space</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AVCOL_SPC_BT709</name></expr>:</case> <expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>AVCOL_SPC_BT470BG</name></expr>:</case>

<case>case <expr><name>AVCOL_SPC_SMPTE170M</name></expr>:</case> <expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>AVCOL_SPC_SMPTE240M</name></expr>:</case> <expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>AVCOL_SPC_BT2020_NCL</name></expr>:</case> <expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<default>default:</default> <expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>MODE_MP4</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>full_range</name> <init>= <expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>color_range</name></name> <operator>==</operator> <name>AVCOL_RANGE_JPEG</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>full_range</name> <operator>&lt;&lt;</operator> <literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>update_size</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_write_clli_tag</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>MOVTrack</name> <modifier>*</modifier></type><name>track</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>side_data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVContentLightMetadata</name> <modifier>*</modifier></type><name>content_light_metadata</name></decl>;</decl_stmt>

<expr_stmt><expr><name>side_data</name> <operator>=</operator> <call><name>av_stream_get_side_data</name><argument_list>(<argument><expr><name><name>track</name><operator>-&gt;</operator><name>st</name></name></expr></argument>, <argument><expr><name>AV_PKT_DATA_CONTENT_LIGHT_LEVEL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>side_data</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Not writing 'clli' atom. No content light level info.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>content_light_metadata</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>AVContentLightMetadata</name><operator>*</operator><operator>)</operator><name>side_data</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"clli"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>content_light_metadata</name><operator>-&gt;</operator><name>MaxCLL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>content_light_metadata</name><operator>-&gt;</operator><name>MaxFALL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">12</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>find_compressor</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type> <name>compressor_name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>MOVTrack</name> <modifier>*</modifier></type><name>track</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVDictionaryEntry</name> <modifier>*</modifier></type><name>encoder</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>xdcam_res</name> <init>= <expr><operator>(</operator><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>width</name></name> <operator>==</operator> <literal type="number">1280</literal> <operator>&amp;&amp;</operator> <name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>height</name></name> <operator>==</operator> <literal type="number">720</literal><operator>)</operator>

<operator>||</operator> <operator>(</operator><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>width</name></name> <operator>==</operator> <literal type="number">1440</literal> <operator>&amp;&amp;</operator> <name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>height</name></name> <operator>==</operator> <literal type="number">1080</literal><operator>)</operator>

<operator>||</operator> <operator>(</operator><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>width</name></name> <operator>==</operator> <literal type="number">1920</literal> <operator>&amp;&amp;</operator> <name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>height</name></name> <operator>==</operator> <literal type="number">1080</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>MODE_MOV</name> <operator>&amp;&amp;</operator>

<operator>(</operator><name>encoder</name> <operator>=</operator> <call><name>av_dict_get</name><argument_list>(<argument><expr><name><name>track</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><literal type="string">"encoder"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_strlcpy</name><argument_list>(<argument><expr><name>compressor_name</name></expr></argument>, <argument><expr><name><name>encoder</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_MPEG2VIDEO</name> <operator>&amp;&amp;</operator> <name>xdcam_res</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>interlaced</name> <init>= <expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>field_order</name></name> <operator>&gt;</operator> <name>AV_FIELD_PROGRESSIVE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name><name>track</name><operator>-&gt;</operator><name>st</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rate</name> <init>= <expr><call><name>defined_frame_rate</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_strlcatf</name><argument_list>(<argument><expr><name>compressor_name</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="string">"XDCAM"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>AV_PIX_FMT_YUV422P</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_strlcatf</name><argument_list>(<argument><expr><name>compressor_name</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="string">" HD422"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>width</name></name> <operator>==</operator> <literal type="number">1440</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_strlcatf</name><argument_list>(<argument><expr><name>compressor_name</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="string">" HD"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_strlcatf</name><argument_list>(<argument><expr><name>compressor_name</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="string">" EX"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>av_strlcatf</name><argument_list>(<argument><expr><name>compressor_name</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="string">" %d%c"</literal></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name>interlaced</name></expr> ?</condition><then> <expr><literal type="char">'i'</literal></expr> </then><else>: <expr><literal type="char">'p'</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_strlcatf</name><argument_list>(<argument><expr><name>compressor_name</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>rate</name> <operator>*</operator> <operator>(</operator><name>interlaced</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_write_video_tag</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>MOVMuxContext</name> <modifier>*</modifier></type><name>mov</name></decl></parameter>, <parameter><decl><type><name>MOVTrack</name> <modifier>*</modifier></type><name>track</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>pos</name> <init>= <expr><call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>compressor_name</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>avid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>uncompressed_ycbcr</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_RAWVIDEO</name> <operator>&amp;&amp;</operator> <name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>AV_PIX_FMT_UYVY422</name><operator>)</operator>

<operator>||</operator> <operator>(</operator><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_RAWVIDEO</name> <operator>&amp;&amp;</operator> <name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>AV_PIX_FMT_YUYV422</name><operator>)</operator>

<operator>||</operator> <name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_V308</name>

<operator>||</operator> <name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_V408</name>

<operator>||</operator> <name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_V410</name>

<operator>||</operator> <name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_V210</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>mov</name><operator>-&gt;</operator><name>encryption_scheme</name></name> <operator>!=</operator> <name>MOV_ENC_NONE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"encv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>avio_wl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>tag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>uncompressed_ycbcr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>MODE_MOV</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"FFMP"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_RAWVIDEO</name> <operator>||</operator> <name>uncompressed_ycbcr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x400</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x200</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x200</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x00480000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x00480000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>find_compressor</name><argument_list>(<argument><expr><name>compressor_name</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>track</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>compressor_name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>compressor_name</name></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>MODE_MOV</name> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_V410</name> <operator>||</operator> <name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_V210</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x18</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>MODE_MOV</name> <operator>&amp;&amp;</operator> <name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>bits_per_coded_sample</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>bits_per_coded_sample</name></name> <operator>|</operator>

<operator>(</operator><ternary><condition><expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>AV_PIX_FMT_GRAY8</name></expr> ?</condition><then> <expr><literal type="number">0x20</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x18</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>MODE_MOV</name> <operator>&amp;&amp;</operator> <name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>AV_PIX_FMT_PAL8</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>pal_size</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>bits_per_coded_sample</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x8000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pal_size</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>pal_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>rgb</name> <init>= <expr><name><name>track</name><operator>-&gt;</operator><name>palette</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>r</name> <init>= <expr><operator>(</operator><name>rgb</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>g</name> <init>= <expr><operator>(</operator><name>rgb</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>b</name> <init>= <expr><name>rgb</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>(</operator><name>r</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>(</operator><name>g</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>(</operator><name>b</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0xffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>tag</name></name> <operator>==</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'m'</literal></expr></argument>,<argument><expr><literal type="char">'p'</literal></expr></argument>,<argument><expr><literal type="char">'4'</literal></expr></argument>,<argument><expr><literal type="char">'v'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mov_write_esds_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>track</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_H263</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mov_write_d263_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_AVUI</name> <operator>||</operator>

<name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_SVQ3</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>mov_write_extradata_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>track</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_DNXHD</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>mov_write_avid_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>track</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>avid</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_HEVC</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mov_write_hvcc_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>track</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_H264</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>TAG_IS_AVCI</name><argument_list>(<argument><expr><name><name>track</name><operator>-&gt;</operator><name>tag</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>mov_write_avcc_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>track</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>MODE_IPOD</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mov_write_uuid_tag_ipod</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_VP9</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>mov_write_vpcc_tag</name><argument_list>(<argument><expr><name><name>mov</name><operator>-&gt;</operator><name>fc</name></name></expr></argument>, <argument><expr><name>pb</name></expr></argument>, <argument><expr><name>track</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_AV1</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>mov_write_av1c_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>track</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_VC1</name> <operator>&amp;&amp;</operator> <name><name>track</name><operator>-&gt;</operator><name>vos_len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mov_write_dvc1_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>track</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_VP6F</name> <operator>||</operator>

<name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_VP6A</name></expr>)</condition> <block>{<block_content>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_R10K</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_tag</name></name> <operator>==</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'R'</literal></expr></argument>,<argument><expr><literal type="char">'1'</literal></expr></argument>,<argument><expr><literal type="char">'0'</literal></expr></argument>,<argument><expr><literal type="char">'k'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mov_write_dpxe_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>track</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>vos_len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mov_write_glbl_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>track</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>!=</operator> <name>AV_CODEC_ID_H264</name> <operator>&amp;&amp;</operator>

<name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>!=</operator> <name>AV_CODEC_ID_MPEG4</name> <operator>&amp;&amp;</operator>

<name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>!=</operator> <name>AV_CODEC_ID_DNXHD</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>field_order</name> <init>= <expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>field_order</name></name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_LAVF_AVCTX</name></expr></cpp:if>

<macro><name>FF_DISABLE_DEPRECATION_WARNINGS</name></macro>

<if_stmt><if>if <condition>(<expr><name>field_order</name> <operator>!=</operator> <name><name>track</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>field_order</name></name> <operator>&amp;&amp;</operator> <name><name>track</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>field_order</name></name> <operator>!=</operator> <name>AV_FIELD_UNKNOWN</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>field_order</name> <operator>=</operator> <name><name>track</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>field_order</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<macro><name>FF_ENABLE_DEPRECATION_WARNINGS</name></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>field_order</name> <operator>!=</operator> <name>AV_FIELD_UNKNOWN</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mov_write_fiel_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>track</name></expr></argument>, <argument><expr><name>field_order</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mov</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FF_MOV_FLAG_WRITE_GAMA</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>MODE_MOV</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mov_write_gama_tag</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>, <argument><expr><name>track</name></expr></argument>, <argument><expr><name><name>mov</name><operator>-&gt;</operator><name>gamma</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>mov</name><operator>-&gt;</operator><name>fc</name></name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Not writing 'gama' atom. Format is not MOV.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mov</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FF_MOV_FLAG_WRITE_COLR</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>MODE_MOV</name> <operator>||</operator> <name><name>track</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>MODE_MP4</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mov_write_colr_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>track</name></expr></argument>, <argument><expr><name><name>mov</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FF_MOV_FLAG_PREFER_ICC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>mov</name><operator>-&gt;</operator><name>fc</name></name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Not writing 'colr' atom. Format is not MOV or MP4.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mov</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FF_MOV_FLAG_WRITE_CLLI</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>MODE_MOV</name> <operator>||</operator> <name><name>track</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>MODE_MP4</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mov_write_clli_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>track</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>mov</name><operator>-&gt;</operator><name>fc</name></name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Not writing 'clli' atom. Format is not MOV or MP4.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>MODE_MP4</name> <operator>&amp;&amp;</operator> <name><name>mov</name><operator>-&gt;</operator><name>fc</name><operator>-&gt;</operator><name>strict_std_compliance</name></name> <operator>&lt;=</operator> <name>FF_COMPLIANCE_UNOFFICIAL</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>AVStereo3D</name><modifier>*</modifier></type> <name>stereo_3d</name> <init>= <expr><operator>(</operator><name>AVStereo3D</name><operator>*</operator><operator>)</operator> <call><name>av_stream_get_side_data</name><argument_list>(<argument><expr><name><name>track</name><operator>-&gt;</operator><name>st</name></name></expr></argument>, <argument><expr><name>AV_PKT_DATA_STEREO3D</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVSphericalMapping</name><modifier>*</modifier></type> <name>spherical_mapping</name> <init>= <expr><operator>(</operator><name>AVSphericalMapping</name><operator>*</operator><operator>)</operator><call><name>av_stream_get_side_data</name><argument_list>(<argument><expr><name><name>track</name><operator>-&gt;</operator><name>st</name></name></expr></argument>, <argument><expr><name>AV_PKT_DATA_SPHERICAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>stereo_3d</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mov_write_st3d_tag</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>, <argument><expr><name>stereo_3d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>spherical_mapping</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mov_write_sv3d_tag</name><argument_list>(<argument><expr><name><name>mov</name><operator>-&gt;</operator><name>fc</name></name></expr></argument>, <argument><expr><name>pb</name></expr></argument>, <argument><expr><name>spherical_mapping</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>den</name></name> <operator>&amp;&amp;</operator> <name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>num</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>mov_write_pasp_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>track</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>uncompressed_ycbcr</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>mov_write_clap_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>track</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mov</name><operator>-&gt;</operator><name>encryption_scheme</name></name> <operator>!=</operator> <name>MOV_ENC_NONE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ff_mov_cenc_write_sinf_tag</name><argument_list>(<argument><expr><name>track</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>mov</name><operator>-&gt;</operator><name>encryption_kid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>avid</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>update_size</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_write_rtp_tag</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>MOVTrack</name> <modifier>*</modifier></type><name>track</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>pos</name> <init>= <expr><call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"rtp "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>max_packet_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"tims"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>timescale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>update_size</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_write_source_reference_tag</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>MOVTrack</name> <modifier>*</modifier></type><name>track</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>reel_name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>str_size</name> <init>=<expr><call><name>strlen</name><argument_list>(<argument><expr><name>reel_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>pos</name> <init>= <expr><call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>str_size</name> <operator>&gt;=</operator> <name>UINT16_MAX</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"reel_name length %"</literal><name>PRIu64</name><literal type="string">" is too large\n"</literal></expr></argument>, <argument><expr><name>str_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>str_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>language</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>reel_name</name></expr></argument>, <argument><expr><name>str_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<return>return <expr><call><name>update_size</name><argument_list>(<argument><expr><name>pb</name></expr></argument>,<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_write_tmcd_tag</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>MOVTrack</name> <modifier>*</modifier></type><name>track</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>pos</name> <init>= <expr><call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>

<decl_stmt><decl><type><name>int</name></type> <name>frame_duration</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nb_frames</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVDictionaryEntry</name> <modifier>*</modifier></type><name>t</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>track</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>avg_frame_rate</name><operator>.</operator><name>num</name></name> <operator>||</operator> <operator>!</operator><name><name>track</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>avg_frame_rate</name><operator>.</operator><name>den</name></name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_LAVF_AVCTX</name></expr></cpp:if>

<decl_stmt><decl><type><name>FF_DISABLE_DEPRECATION_WARNINGS</name></type>

<name>frame_duration</name> <init>= <expr><call><name>av_rescale</name><argument_list>(<argument><expr><name><name>track</name><operator>-&gt;</operator><name>timescale</name></name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>den</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>nb_frames</name> <operator>=</operator> <call><name>ROUNDED_DIV</name><argument_list>(<argument><expr><name><name>track</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>den</name></name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>FF_ENABLE_DEPRECATION_WARNINGS</name></type>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"avg_frame_rate not set for tmcd track.\n"</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>frame_duration</name> <operator>=</operator> <call><name>av_rescale</name><argument_list>(<argument><expr><name><name>track</name><operator>-&gt;</operator><name>timescale</name></name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>avg_frame_rate</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>avg_frame_rate</name><operator>.</operator><name>den</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>nb_frames</name> <operator>=</operator> <call><name>ROUNDED_DIV</name><argument_list>(<argument><expr><name><name>track</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>avg_frame_rate</name><operator>.</operator><name>den</name></name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>avg_frame_rate</name><operator>.</operator><name>num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>nb_frames</name> <operator>&gt;</operator> <literal type="number">255</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"fps %d is too large\n"</literal></expr></argument>, <argument><expr><name>nb_frames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"tmcd"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>timecode_flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>timescale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>frame_duration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>nb_frames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>av_dict_get</name><argument_list>(<argument><expr><name><name>track</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><literal type="string">"reel_name"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>&amp;&amp;</operator> <call><name>utf8len</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>track</name><operator>-&gt;</operator><name>mode</name></name> <operator>!=</operator> <name>MODE_MP4</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mov_write_source_reference_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>track</name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt> 

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"tmcd"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>extradata_size</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>extradata_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><call><name>update_size</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_write_gpmd_tag</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>MOVTrack</name> <modifier>*</modifier></type><name>track</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>pos</name> <init>= <expr><call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"gpmd"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<return>return <expr><call><name>update_size</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_write_stsd_tag</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>MOVMuxContext</name> <modifier>*</modifier></type><name>mov</name></decl></parameter>, <parameter><decl><type><name>MOVTrack</name> <modifier>*</modifier></type><name>track</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>pos</name> <init>= <expr><call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"stsd"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mov_write_video_tag</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>, <argument><expr><name>mov</name></expr></argument>, <argument><expr><name>track</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mov_write_audio_tag</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>, <argument><expr><name>mov</name></expr></argument>, <argument><expr><name>track</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_SUBTITLE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mov_write_subtitle_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>track</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_tag</name></name> <operator>==</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'r'</literal></expr></argument>,<argument><expr><literal type="char">'t'</literal></expr></argument>,<argument><expr><literal type="char">'p'</literal></expr></argument>,<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mov_write_rtp_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>track</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_tag</name></name> <operator>==</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'t'</literal></expr></argument>,<argument><expr><literal type="char">'m'</literal></expr></argument>,<argument><expr><literal type="char">'c'</literal></expr></argument>,<argument><expr><literal type="char">'d'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mov_write_tmcd_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>track</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_tag</name></name> <operator>==</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'g'</literal></expr></argument>,<argument><expr><literal type="char">'p'</literal></expr></argument>,<argument><expr><literal type="char">'m'</literal></expr></argument>,<argument><expr><literal type="char">'d'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mov_write_gpmd_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>track</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>update_size</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_write_ctts_tag</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>MOVTrack</name> <modifier>*</modifier></type><name>track</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MOVMuxContext</name> <modifier>*</modifier></type><name>mov</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MOVStts</name> <modifier>*</modifier></type><name>ctts_entries</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>entries</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>atom_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ctts_entries</name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><operator>(</operator><name><name>track</name><operator>-&gt;</operator><name>entry</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ctts_entries</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ctts_entries</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ctts_entries</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>count</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctts_entries</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>duration</name> <operator>=</operator> <name><name>track</name><operator>-&gt;</operator><name>cluster</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>cts</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>track</name><operator>-&gt;</operator><name>entry</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>cluster</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>cts</name> <operator>==</operator> <name><name>ctts_entries</name><index>[<expr><name>entries</name></expr>]</index></name><operator>.</operator><name>duration</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ctts_entries</name><index>[<expr><name>entries</name></expr>]</index></name><operator>.</operator><name>count</name><operator>++</operator></expr>;</expr_stmt> 

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>entries</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctts_entries</name><index>[<expr><name>entries</name></expr>]</index></name><operator>.</operator><name>duration</name> <operator>=</operator> <name><name>track</name><operator>-&gt;</operator><name>cluster</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>cts</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctts_entries</name><index>[<expr><name>entries</name></expr>]</index></name><operator>.</operator><name>count</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>entries</name><operator>++</operator></expr>;</expr_stmt> 

<expr_stmt><expr><name>atom_size</name> <operator>=</operator> <literal type="number">16</literal> <operator>+</operator> <operator>(</operator><name>entries</name> <operator>*</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>atom_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"ctts"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mov</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FF_MOV_FLAG_NEGATIVE_CTS_OFFSETS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if> 

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt> 

<expr_stmt><expr><call><name>avio_wb24</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>entries</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>ctts_entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>ctts_entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>duration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>ctts_entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>atom_size</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_write_stts_tag</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>MOVTrack</name> <modifier>*</modifier></type><name>track</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MOVStts</name> <modifier>*</modifier></type><name>stts_entries</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>entries</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>atom_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_AUDIO</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>track</name><operator>-&gt;</operator><name>audio_vbr</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>stts_entries</name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>stts_entries</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>stts_entries</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>stts_entries</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>count</name> <operator>=</operator> <name><name>track</name><operator>-&gt;</operator><name>sample_count</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stts_entries</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>duration</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>entries</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>entry</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>stts_entries</name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name><name>track</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>stts_entries</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>stts_entries</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>track</name><operator>-&gt;</operator><name>entry</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>duration</name> <init>= <expr><call><name>get_cluster_duration</name><argument_list>(<argument><expr><name>track</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&amp;&amp;</operator> <name>duration</name> <operator>==</operator> <name><name>stts_entries</name><index>[<expr><name>entries</name></expr>]</index></name><operator>.</operator><name>duration</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>stts_entries</name><index>[<expr><name>entries</name></expr>]</index></name><operator>.</operator><name>count</name><operator>++</operator></expr>;</expr_stmt> 

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>entries</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stts_entries</name><index>[<expr><name>entries</name></expr>]</index></name><operator>.</operator><name>duration</name> <operator>=</operator> <name>duration</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stts_entries</name><index>[<expr><name>entries</name></expr>]</index></name><operator>.</operator><name>count</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>entries</name><operator>++</operator></expr>;</expr_stmt> 

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>atom_size</name> <operator>=</operator> <literal type="number">16</literal> <operator>+</operator> <operator>(</operator><name>entries</name> <operator>*</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>atom_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"stts"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>entries</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>stts_entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>stts_entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>duration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>stts_entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>atom_size</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_write_dref_tag</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">28</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"dref"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0xc</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"url "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<return>return <expr><literal type="number">28</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_preroll_write_stbl_atoms</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>MOVTrack</name> <modifier>*</modifier></type><name>track</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<struct>struct <name>sgpd_entry</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name>roll_distance</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>group_description_index</name></decl>;</decl_stmt>

}</block>;</struct>

<decl_stmt><decl><type><name><name>struct</name> <name>sgpd_entry</name></name> <modifier>*</modifier></type><name>sgpd_entries</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>entries</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>group</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>OPUS_SEEK_PREROLL_MS</name> <init>= <expr><literal type="number">80</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>roll_samples</name> <init>= <macro><name>av_rescale_q</name><argument_list>(<argument>OPUS_SEEK_PREROLL_MS</argument>,

<argument>(AVRational){<literal type="number">1</literal></argument>, <argument><literal type="number">1000</literal>}</argument>,

<argument>(AVRational){<literal type="number">1</literal></argument>, <argument><literal type="number">48000</literal>}</argument>)</argument_list></macro></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>track</name><operator>-&gt;</operator><name>entry</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>sgpd_entries</name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name><name>track</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>sgpd_entries</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sgpd_entries</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_OPUS</name> <operator>||</operator> <name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_AAC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_OPUS</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>track</name><operator>-&gt;</operator><name>entry</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>roll_samples_remaining</name> <init>= <expr><name>roll_samples</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>distance</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>j</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>roll_samples_remaining</name> <operator>-=</operator> <call><name>get_cluster_duration</name><argument_list>(<argument><expr><name>track</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>distance</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>roll_samples_remaining</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>roll_samples_remaining</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>distance</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>distance</name> <operator>&gt;</operator> <literal type="number">32</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&amp;&amp;</operator> <name>distance</name> <operator>==</operator> <name><name>sgpd_entries</name><index>[<expr><name>entries</name></expr>]</index></name><operator>.</operator><name>roll_distance</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sgpd_entries</name><index>[<expr><name>entries</name></expr>]</index></name><operator>.</operator><name>count</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>entries</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sgpd_entries</name><index>[<expr><name>entries</name></expr>]</index></name><operator>.</operator><name>count</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sgpd_entries</name><index>[<expr><name>entries</name></expr>]</index></name><operator>.</operator><name>roll_distance</name> <operator>=</operator> <name>distance</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sgpd_entries</name><index>[<expr><name>entries</name></expr>]</index></name><operator>.</operator><name>group_description_index</name> <operator>=</operator> <ternary><condition><expr><name>distance</name></expr> ?</condition><then> <expr><operator>++</operator><name>group</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>entries</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sgpd_entries</name><index>[<expr><name>entries</name></expr>]</index></name><operator>.</operator><name>count</name> <operator>=</operator> <name><name>track</name><operator>-&gt;</operator><name>sample_count</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sgpd_entries</name><index>[<expr><name>entries</name></expr>]</index></name><operator>.</operator><name>roll_distance</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sgpd_entries</name><index>[<expr><name>entries</name></expr>]</index></name><operator>.</operator><name>group_description_index</name> <operator>=</operator> <operator>++</operator><name>group</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>entries</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>group</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>sgpd_entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">24</literal> <operator>+</operator> <operator>(</operator><name>group</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"sgpd"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"roll"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>entries</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>sgpd_entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>group_description_index</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>-</operator><name><name>sgpd_entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>roll_distance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">20</literal> <operator>+</operator> <operator>(</operator><name>entries</name> <operator>*</operator> <literal type="number">8</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"sbgp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"roll"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>entries</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>sgpd_entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>sgpd_entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>group_description_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>sgpd_entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_write_stbl_tag</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>MOVMuxContext</name> <modifier>*</modifier></type><name>mov</name></decl></parameter>, <parameter><decl><type><name>MOVTrack</name> <modifier>*</modifier></type><name>track</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>pos</name> <init>= <expr><call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"stbl"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>mov_write_stsd_tag</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>, <argument><expr><name>mov</name></expr></argument>, <argument><expr><name>track</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>mov_write_stts_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>track</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_VIDEO</name> <operator>||</operator>

<name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_TRUEHD</name> <operator>||</operator>

<name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_MPEGH_3D_AUDIO</name> <operator>||</operator>

<name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_tag</name></name> <operator>==</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'r'</literal></expr></argument>,<argument><expr><literal type="char">'t'</literal></expr></argument>,<argument><expr><literal type="char">'p'</literal></expr></argument>,<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>

<name><name>track</name><operator>-&gt;</operator><name>has_keyframes</name></name> <operator>&amp;&amp;</operator> <name><name>track</name><operator>-&gt;</operator><name>has_keyframes</name></name> <operator>&lt;</operator> <name><name>track</name><operator>-&gt;</operator><name>entry</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mov_write_stss_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>track</name></expr></argument>, <argument><expr><name>MOV_SYNC_SAMPLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_VIDEO</name> <operator>&amp;&amp;</operator> <name><name>track</name><operator>-&gt;</operator><name>has_disposable</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mov_write_sdtp_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>track</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>MODE_MOV</name> <operator>&amp;&amp;</operator> <name><name>track</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>MOV_TRACK_STPS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mov_write_stss_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>track</name></expr></argument>, <argument><expr><name>MOV_PARTIAL_SYNC_SAMPLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_VIDEO</name> <operator>&amp;&amp;</operator>

<name><name>track</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>MOV_TRACK_CTTS</name> <operator>&amp;&amp;</operator> <name><name>track</name><operator>-&gt;</operator><name>entry</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>mov_write_ctts_tag</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>, <argument><expr><name>track</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>mov_write_stsc_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>track</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mov_write_stsz_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>track</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mov_write_stco_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>track</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>cenc</name><operator>.</operator><name>aes_ctr</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ff_mov_cenc_write_stbl_atoms</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>track</name><operator>-&gt;</operator><name>cenc</name></name></expr></argument>, <argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_OPUS</name> <operator>||</operator> <name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_AAC</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>mov_preroll_write_stbl_atoms</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>track</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>update_size</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_write_dinf_tag</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>pos</name> <init>= <expr><call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"dinf"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mov_write_dref_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>update_size</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_write_nmhd_tag</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"nmhd"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">12</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_write_tcmi_tag</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>MOVTrack</name> <modifier>*</modifier></type><name>track</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>pos</name> <init>= <expr><call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>font</name> <init>= <expr><literal type="string">"Lucida Grande"</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"tcmi"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x0000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x0000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x0000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0xffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0xffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0xffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>font</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>font</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>font</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<return>return <expr><call><name>update_size</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_write_gmhd_tag</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>MOVTrack</name> <modifier>*</modifier></type><name>track</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>pos</name> <init>= <expr><call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"gmhd"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x18</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"gmin"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x40</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x8000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x8000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x8000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>tag</name></name> <operator>!=</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'c'</literal></expr></argument>,<argument><expr><literal type="char">'6'</literal></expr></argument>,<argument><expr><literal type="char">'0'</literal></expr></argument>,<argument><expr><literal type="char">'8'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x2C</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"text"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x01</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x01</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x00004000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x0000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_tag</name></name> <operator>==</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'t'</literal></expr></argument>,<argument><expr><literal type="char">'m'</literal></expr></argument>,<argument><expr><literal type="char">'c'</literal></expr></argument>,<argument><expr><literal type="char">'d'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>tmcd_pos</name> <init>= <expr><call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"tmcd"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mov_write_tcmi_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>track</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>update_size</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>tmcd_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_tag</name></name> <operator>==</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'g'</literal></expr></argument>,<argument><expr><literal type="char">'p'</literal></expr></argument>,<argument><expr><literal type="char">'m'</literal></expr></argument>,<argument><expr><literal type="char">'d'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>gpmd_pos</name> <init>= <expr><call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"gpmd"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>update_size</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>gpmd_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>update_size</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_write_smhd_tag</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"smhd"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<return>return <expr><literal type="number">16</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_write_vmhd_tag</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"vmhd"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x01</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<return>return <expr><literal type="number">0x14</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>is_clcp_track</name><parameter_list>(<parameter><decl><type><name>MOVTrack</name> <modifier>*</modifier></type><name>track</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>track</name><operator>-&gt;</operator><name>tag</name></name> <operator>==</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'c'</literal></expr></argument>,<argument><expr><literal type="char">'7'</literal></expr></argument>,<argument><expr><literal type="char">'0'</literal></expr></argument>,<argument><expr><literal type="char">'8'</literal></expr></argument>)</argument_list></call> <operator>||</operator>

<name><name>track</name><operator>-&gt;</operator><name>tag</name></name> <operator>==</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'c'</literal></expr></argument>,<argument><expr><literal type="char">'6'</literal></expr></argument>,<argument><expr><literal type="char">'0'</literal></expr></argument>,<argument><expr><literal type="char">'8'</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_write_hdlr_tag</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>MOVTrack</name> <modifier>*</modifier></type><name>track</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MOVMuxContext</name> <modifier>*</modifier></type><name>mov</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hdlr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>descr</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>hdlr_type</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>pos</name> <init>= <expr><call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>hdlr</name> <operator>=</operator> <literal type="string">"dhlr"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>hdlr_type</name> <operator>=</operator> <literal type="string">"url "</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>descr</name> <operator>=</operator> <literal type="string">"DataHandler"</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>track</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>hdlr</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>track</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>MODE_MOV</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"mhlr"</literal></expr> </then><else>: <expr><literal type="string">"\0\0\0\0"</literal></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>hdlr_type</name> <operator>=</operator> <literal type="string">"vide"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>descr</name> <operator>=</operator> <literal type="string">"VideoHandler"</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>hdlr_type</name> <operator>=</operator> <literal type="string">"soun"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>descr</name> <operator>=</operator> <literal type="string">"SoundHandler"</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_SUBTITLE</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>is_clcp_track</name><argument_list>(<argument><expr><name>track</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>hdlr_type</name> <operator>=</operator> <literal type="string">"clcp"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>descr</name> <operator>=</operator> <literal type="string">"ClosedCaptionHandler"</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>tag</name></name> <operator>==</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'t'</literal></expr></argument>,<argument><expr><literal type="char">'x'</literal></expr></argument>,<argument><expr><literal type="char">'3'</literal></expr></argument>,<argument><expr><literal type="char">'g'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>hdlr_type</name> <operator>=</operator> <literal type="string">"sbtl"</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>tag</name></name> <operator>==</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'m'</literal></expr></argument>,<argument><expr><literal type="char">'p'</literal></expr></argument>,<argument><expr><literal type="char">'4'</literal></expr></argument>,<argument><expr><literal type="char">'s'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>hdlr_type</name> <operator>=</operator> <literal type="string">"subp"</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>hdlr_type</name> <operator>=</operator> <literal type="string">"text"</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>descr</name> <operator>=</operator> <literal type="string">"SubtitleHandler"</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_tag</name></name> <operator>==</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'r'</literal></expr></argument>,<argument><expr><literal type="char">'t'</literal></expr></argument>,<argument><expr><literal type="char">'p'</literal></expr></argument>,<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>hdlr_type</name> <operator>=</operator> <literal type="string">"hint"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>descr</name> <operator>=</operator> <literal type="string">"HintHandler"</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_tag</name></name> <operator>==</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'t'</literal></expr></argument>,<argument><expr><literal type="char">'m'</literal></expr></argument>,<argument><expr><literal type="char">'c'</literal></expr></argument>,<argument><expr><literal type="char">'d'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>hdlr_type</name> <operator>=</operator> <literal type="string">"tmcd"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>descr</name> <operator>=</operator> <literal type="string">"TimeCodeHandler"</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_tag</name></name> <operator>==</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'g'</literal></expr></argument>,<argument><expr><literal type="char">'p'</literal></expr></argument>,<argument><expr><literal type="char">'m'</literal></expr></argument>,<argument><expr><literal type="char">'d'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>hdlr_type</name> <operator>=</operator> <literal type="string">"meta"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>descr</name> <operator>=</operator> <literal type="string">"GoPro MET"</literal></expr>;</expr_stmt> 

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,

<argument><expr><literal type="string">"Unknown hldr_type for %s, writing dummy values\n"</literal></expr></argument>,

<argument><expr><call><name>av_fourcc2str</name><argument_list>(<argument><expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_tag</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>st</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>AVDictionaryEntry</name> <modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>av_dict_get</name><argument_list>(<argument><expr><name><name>track</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><literal type="string">"handler_name"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>&amp;&amp;</operator> <call><name>utf8len</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>descr</name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>value</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mov</name><operator>-&gt;</operator><name>empty_hdlr_name</name></name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>descr</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"hdlr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>hdlr</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>hdlr_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>track</name> <operator>||</operator> <name><name>track</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>MODE_MOV</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>descr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>descr</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>descr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>track</name> <operator>&amp;&amp;</operator> <name><name>track</name><operator>-&gt;</operator><name>mode</name></name> <operator>!=</operator> <name>MODE_MOV</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<return>return <expr><call><name>update_size</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_write_hmhd_tag</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">28</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"hmhd"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<return>return <expr><literal type="number">28</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_write_minf_tag</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>MOVMuxContext</name> <modifier>*</modifier></type><name>mov</name></decl></parameter>, <parameter><decl><type><name>MOVTrack</name> <modifier>*</modifier></type><name>track</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>pos</name> <init>= <expr><call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"minf"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mov_write_vmhd_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mov_write_smhd_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_SUBTITLE</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>tag</name></name> <operator>==</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'t'</literal></expr></argument>,<argument><expr><literal type="char">'e'</literal></expr></argument>,<argument><expr><literal type="char">'x'</literal></expr></argument>,<argument><expr><literal type="char">'t'</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>is_clcp_track</name><argument_list>(<argument><expr><name>track</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>mov_write_gmhd_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>track</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>mov_write_nmhd_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>tag</name></name> <operator>==</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'r'</literal></expr></argument>,<argument><expr><literal type="char">'t'</literal></expr></argument>,<argument><expr><literal type="char">'p'</literal></expr></argument>,<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>mov_write_hmhd_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>tag</name></name> <operator>==</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'t'</literal></expr></argument>,<argument><expr><literal type="char">'m'</literal></expr></argument>,<argument><expr><literal type="char">'c'</literal></expr></argument>,<argument><expr><literal type="char">'d'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>mode</name></name> <operator>!=</operator> <name>MODE_MOV</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mov_write_nmhd_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mov_write_gmhd_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>track</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>tag</name></name> <operator>==</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'g'</literal></expr></argument>,<argument><expr><literal type="char">'p'</literal></expr></argument>,<argument><expr><literal type="char">'m'</literal></expr></argument>,<argument><expr><literal type="char">'d'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>mov_write_gmhd_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>track</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>MODE_MOV</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><call><name>mov_write_hdlr_tag</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>mov_write_dinf_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>mov_write_stbl_tag</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>, <argument><expr><name>mov</name></expr></argument>, <argument><expr><name>track</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>update_size</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64_t</name></type> <name>calc_pts_duration</name><parameter_list>(<parameter><decl><type><name>MOVMuxContext</name> <modifier>*</modifier></type><name>mov</name></decl></parameter>, <parameter><decl><type><name>MOVTrack</name> <modifier>*</modifier></type><name>track</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>tag</name></name> <operator>==</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'t'</literal></expr></argument>,<argument><expr><literal type="char">'m'</literal></expr></argument>,<argument><expr><literal type="char">'c'</literal></expr></argument>,<argument><expr><literal type="char">'d'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>av_rescale</name><argument_list>(<argument><expr><call><name>calc_pts_duration</name><argument_list>(<argument><expr><name>mov</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mov</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name><name>track</name><operator>-&gt;</operator><name>src_track</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>track</name><operator>-&gt;</operator><name>timescale</name></name></expr></argument>, <argument><expr><name><name>mov</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name><name>track</name><operator>-&gt;</operator><name>src_track</name></name></expr>]</index></name><operator>.</operator><name>timescale</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>end_pts</name></name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name> <operator>&amp;&amp;</operator>

<name><name>track</name><operator>-&gt;</operator><name>start_dts</name></name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name> <operator>&amp;&amp;</operator>

<name><name>track</name><operator>-&gt;</operator><name>start_cts</name></name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name><name>track</name><operator>-&gt;</operator><name>end_pts</name></name> <operator>-</operator> <operator>(</operator><name><name>track</name><operator>-&gt;</operator><name>start_dts</name></name> <operator>+</operator> <name><name>track</name><operator>-&gt;</operator><name>start_cts</name></name><operator>)</operator></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>track</name><operator>-&gt;</operator><name>track_duration</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_write_mdhd_tag</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>MOVMuxContext</name> <modifier>*</modifier></type><name>mov</name></decl></parameter>,

<parameter><decl><type><name>MOVTrack</name> <modifier>*</modifier></type><name>track</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>duration</name> <init>= <expr><call><name>calc_pts_duration</name><argument_list>(<argument><expr><name>mov</name></expr></argument>, <argument><expr><name>track</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>version</name> <init>= <expr><ternary><condition><expr><name>duration</name> <operator>&lt;</operator> <name>INT32_MAX</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>MODE_ISM</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>version</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><ternary><condition><expr><operator>(</operator><name>version</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">44</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"mdhd"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb24</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>version</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avio_wb64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>timescale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>track</name><operator>-&gt;</operator><name>entry</name></name> <operator>&amp;&amp;</operator> <name><name>mov</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>MODE_ISM</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><ternary><condition><expr><operator>(</operator><name>version</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><call><name>avio_wb64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0xffffffffffffffff</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0xffffffff</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>track</name><operator>-&gt;</operator><name>entry</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><ternary><condition><expr><operator>(</operator><name>version</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><call><name>avio_wb64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><ternary><condition><expr><operator>(</operator><name>version</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><call><name>avio_wb64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>duration</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>duration</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt> 

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>language</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>version</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>track</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>MODE_MOV</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"FATAL error, file duration too long for timebase, this file will not be\n"</literal>

<literal type="string">"playable with QuickTime. Choose a different timebase with "</literal>

<literal type="string">"-video_track_timescale or a different container format\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">32</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_write_mdia_tag</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>,

<parameter><decl><type><name>MOVMuxContext</name> <modifier>*</modifier></type><name>mov</name></decl></parameter>, <parameter><decl><type><name>MOVTrack</name> <modifier>*</modifier></type><name>track</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>pos</name> <init>= <expr><call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"mdia"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mov_write_mdhd_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>mov</name></expr></argument>, <argument><expr><name>track</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mov_write_hdlr_tag</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>, <argument><expr><name>track</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>mov_write_minf_tag</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>, <argument><expr><name>mov</name></expr></argument>, <argument><expr><name>track</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>update_size</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>write_matrix</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>c</name></decl></parameter>,

<parameter><decl><type><name>int16_t</name></type> <name>d</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>tx</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>ty</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>a</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>b</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>c</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>d</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>tx</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>ty</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">30</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_write_tkhd_tag</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>MOVMuxContext</name> <modifier>*</modifier></type><name>mov</name></decl></parameter>,

<parameter><decl><type><name>MOVTrack</name> <modifier>*</modifier></type><name>track</name></decl></parameter>, <parameter><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>duration</name> <init>= <expr><call><name>av_rescale_rnd</name><argument_list>(<argument><expr><call><name>calc_pts_duration</name><argument_list>(<argument><expr><name>mov</name></expr></argument>, <argument><expr><name>track</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>MOV_TIMESCALE</name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>timescale</name></name></expr></argument>,

<argument><expr><name>AV_ROUND_UP</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>version</name> <init>= <expr><ternary><condition><expr><name>duration</name> <operator>&lt;</operator> <name>INT32_MAX</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><name>MOV_TKHD_FLAG_IN_MOVIE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rotation</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>group</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>display_matrix</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>display_matrix_size</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>st</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>mov</name><operator>-&gt;</operator><name>per_stream_grouping</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>group</name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>index</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>group</name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>display_matrix</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><call><name>av_stream_get_side_data</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><name>AV_PKT_DATA_DISPLAYMATRIX</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>display_matrix_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>display_matrix</name> <operator>&amp;&amp;</operator> <name>display_matrix_size</name> <operator>&lt;</operator> <literal type="number">9</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>display_matrix</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>display_matrix</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>MOV_TRACK_ENABLED</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>MOV_TKHD_FLAG_ENABLED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>MODE_ISM</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>version</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><ternary><condition><expr><operator>(</operator><name>version</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">104</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">92</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"tkhd"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb24</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>version</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avio_wb64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>track_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>track</name><operator>-&gt;</operator><name>entry</name></name> <operator>&amp;&amp;</operator> <name><name>mov</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>MODE_ISM</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><ternary><condition><expr><operator>(</operator><name>version</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><call><name>avio_wb64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0xffffffffffffffff</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0xffffffff</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>track</name><operator>-&gt;</operator><name>entry</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><ternary><condition><expr><operator>(</operator><name>version</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><call><name>avio_wb64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><ternary><condition><expr><operator>(</operator><name>version</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><call><name>avio_wb64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>duration</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>duration</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x0100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_OLD_ROTATE_API</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>st</name> <operator>&amp;&amp;</operator> <name><name>st</name><operator>-&gt;</operator><name>metadata</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>AVDictionaryEntry</name> <modifier>*</modifier></type><name>rot</name> <init>= <expr><call><name>av_dict_get</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><literal type="string">"rotate"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>rotation</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>rot</name> <operator>&amp;&amp;</operator> <name><name>rot</name><operator>-&gt;</operator><name>value</name></name><operator>)</operator></expr> ?</condition><then> <expr><call><name>atoi</name><argument_list>(<argument><expr><name><name>rot</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>display_matrix</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">9</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>display_matrix</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_OLD_ROTATE_API</name></expr></cpp:if>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>rotation</name> <operator>==</operator> <literal type="number">90</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>write_matrix</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>rotation</name> <operator>==</operator> <literal type="number">180</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>write_matrix</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>rotation</name> <operator>==</operator> <literal type="number">270</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>write_matrix</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>write_matrix</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>st</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_VIDEO</name> <operator>||</operator>

<name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_SUBTITLE</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>track_width_1616</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>MODE_MOV</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>track_width_1616</name> <operator>=</operator> <name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <literal type="number">0x10000ULL</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>track_width_1616</name> <operator>=</operator> <call><name>av_rescale</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>num</name></name></expr></argument>,

<argument><expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <literal type="number">0x10000LL</literal></expr></argument>,

<argument><expr><name><name>st</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>den</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>track_width_1616</name> <operator>||</operator>

<name><name>track</name><operator>-&gt;</operator><name>height</name></name> <operator>!=</operator> <name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>height</name></name> <operator>||</operator>

<name>track_width_1616</name> <operator>&gt;</operator> <name>UINT32_MAX</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>track_width_1616</name> <operator>=</operator> <name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <literal type="number">0x10000ULL</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>track_width_1616</name> <operator>&gt;</operator> <name>UINT32_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>mov</name><operator>-&gt;</operator><name>fc</name></name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"track width is too large\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>track_width_1616</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>track_width_1616</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>height</name></name> <operator>&gt;</operator> <literal type="number">0xFFFF</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>mov</name><operator>-&gt;</operator><name>fc</name></name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"track height is too large\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>height</name></name> <operator>*</operator> <literal type="number">0x10000U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0x5c</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_write_tapt_tag</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>MOVTrack</name> <modifier>*</modifier></type><name>track</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name></type> <name>width</name> <init>= <expr><call><name>av_rescale</name><argument_list>(<argument><expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>width</name></name></expr></argument>,

<argument><expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>den</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>pos</name> <init>= <expr><call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"tapt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"clef"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>width</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>height</name></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"prof"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>width</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>height</name></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"enof"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>width</name></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>height</name></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>update_size</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_write_edts_tag</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>MOVMuxContext</name> <modifier>*</modifier></type><name>mov</name></decl></parameter>,

<parameter><decl><type><name>MOVTrack</name> <modifier>*</modifier></type><name>track</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>duration</name> <init>= <expr><call><name>av_rescale_rnd</name><argument_list>(<argument><expr><call><name>calc_pts_duration</name><argument_list>(<argument><expr><name>mov</name></expr></argument>, <argument><expr><name>track</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>MOV_TIMESCALE</name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>timescale</name></name></expr></argument>,

<argument><expr><name>AV_ROUND_UP</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>version</name> <init>= <expr><ternary><condition><expr><name>duration</name> <operator>&lt;</operator> <name>INT32_MAX</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>entry_size</name></decl>, <decl><type ref="prev"/><name>entry_count</name></decl>, <decl><type ref="prev"/><name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>delay</name></decl>, <decl><type ref="prev"/><name>start_ct</name> <init>= <expr><name><name>track</name><operator>-&gt;</operator><name>start_cts</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>start_dts</name> <init>= <expr><name><name>track</name><operator>-&gt;</operator><name>start_dts</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>entry</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>start_dts</name> <operator>!=</operator> <name><name>track</name><operator>-&gt;</operator><name>cluster</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>dts</name> <operator>||</operator> <name>start_ct</name> <operator>!=</operator> <name><name>track</name><operator>-&gt;</operator><name>cluster</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>cts</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>mov</name><operator>-&gt;</operator><name>fc</name></name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>,

<argument><expr><literal type="string">"EDTS using dts:%"</literal><name>PRId64</name><literal type="string">" cts:%d instead of dts:%"</literal><name>PRId64</name><literal type="string">" cts:%"</literal><name>PRId64</name><literal type="string">" tid:%d\n"</literal></expr></argument>,

<argument><expr><name><name>track</name><operator>-&gt;</operator><name>cluster</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>dts</name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>cluster</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>cts</name></expr></argument>,

<argument><expr><name>start_dts</name></expr></argument>, <argument><expr><name>start_ct</name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>track_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>start_dts</name> <operator>=</operator> <name><name>track</name><operator>-&gt;</operator><name>cluster</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>dts</name></expr>;</expr_stmt>

<expr_stmt><expr><name>start_ct</name> <operator>=</operator> <name><name>track</name><operator>-&gt;</operator><name>cluster</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>cts</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>delay</name> <operator>=</operator> <call><name>av_rescale_rnd</name><argument_list>(<argument><expr><name>start_dts</name> <operator>+</operator> <name>start_ct</name></expr></argument>, <argument><expr><name>MOV_TIMESCALE</name></expr></argument>,

<argument><expr><name><name>track</name><operator>-&gt;</operator><name>timescale</name></name></expr></argument>, <argument><expr><name>AV_ROUND_DOWN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>version</name> <operator>|=</operator> <ternary><condition><expr><name>delay</name> <operator>&lt;</operator> <name>INT32_MAX</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>entry_size</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>version</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">20</literal></expr> </then><else>: <expr><literal type="number">12</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>entry_count</name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <operator>(</operator><name>delay</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">24</literal> <operator>+</operator> <name>entry_count</name> <operator>*</operator> <name>entry_size</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"edts"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>size</name> <operator>-</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"elst"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb24</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>entry_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>delay</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><name>version</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avio_wb64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>delay</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>delay</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x00010000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><call><name>av_rescale_rnd</name><argument_list>(<argument><expr><name>start_dts</name></expr></argument>, <argument><expr><name>MOV_TIMESCALE</name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>timescale</name></name></expr></argument>, <argument><expr><name>AV_ROUND_DOWN</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>start_ct</name> <operator>=</operator> <operator>-</operator><call><name>FFMIN</name><argument_list>(<argument><expr><name>start_dts</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>duration</name> <operator>+=</operator> <name>delay</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mov</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FF_MOV_FLAG_FRAGMENT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>duration</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>version</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avio_wb64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>duration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>start_ct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>duration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>start_ct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x00010000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>size</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_write_tref_tag</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>MOVTrack</name> <modifier>*</modifier></type><name>track</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"tref"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>tref_tag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>tref_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">20</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_write_uuid_tag_psp</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>MOVTrack</name> <modifier>*</modifier></type><name>mov</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x34</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"uuid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"USMT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x21d24fce</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0xbb88695c</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0xfac9c740</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x1c</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"MTDT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x00010012</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x0a</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x55c40000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0x34</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_write_udta_sdp</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>MOVTrack</name> <modifier>*</modifier></type><name>track</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>track</name><operator>-&gt;</operator><name>rtp_ctx</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">1000</literal></expr>]</index></name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_sdp_write_media</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>streams</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>src_track</name></name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_strlcatf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"a=control:streamid=%d\r\n"</literal></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>track_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"udta"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"hnti"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"sdp "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>len</name> <operator>+</operator> <literal type="number">24</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_write_track_metadata</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tag</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>pos</name> <init>= <expr><call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVDictionaryEntry</name> <modifier>*</modifier></type><name>t</name> <init>= <expr><call><name>av_dict_get</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>t</name> <operator>||</operator> <operator>!</operator><call><name>utf8len</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<return>return <expr><call><name>update_size</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_write_track_udta_tag</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>MOVMuxContext</name> <modifier>*</modifier></type><name>mov</name></decl></parameter>,

<parameter><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb_buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>st</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avio_open_dyn_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mov</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <operator>(</operator><name>MODE_MP4</name><operator>|</operator><name>MODE_MOV</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mov_write_track_metadata</name><argument_list>(<argument><expr><name>pb_buf</name></expr></argument>, <argument><expr><name>st</name></expr></argument>, <argument><expr><literal type="string">"name"</literal></expr></argument>, <argument><expr><literal type="string">"title"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>size</name> <operator>=</operator> <call><name>avio_get_dyn_buf</name><argument_list>(<argument><expr><name>pb_buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>size</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"udta"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ffio_free_dyn_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_write_trak_tag</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>MOVMuxContext</name> <modifier>*</modifier></type><name>mov</name></decl></parameter>,

<parameter><decl><type><name>MOVTrack</name> <modifier>*</modifier></type><name>track</name></decl></parameter>, <parameter><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>pos</name> <init>= <expr><call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>entry_backup</name> <init>= <expr><name><name>track</name><operator>-&gt;</operator><name>entry</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>chunk_backup</name> <init>= <expr><name><name>track</name><operator>-&gt;</operator><name>chunkCount</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mov</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FF_MOV_FLAG_EMPTY_MOOV</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>chunkCount</name></name> <operator>=</operator> <name><name>track</name><operator>-&gt;</operator><name>entry</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"trak"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mov_write_tkhd_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>mov</name></expr></argument>, <argument><expr><name>track</name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name><name>mov</name><operator>-&gt;</operator><name>use_editlist</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>start_dts</name></name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>mov</name><operator>-&gt;</operator><name>use_editlist</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mov_write_edts_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>mov</name></expr></argument>, <argument><expr><name>track</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if> 

<if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>track</name><operator>-&gt;</operator><name>entry</name></name> <operator>&amp;&amp;</operator> <name><name>track</name><operator>-&gt;</operator><name>cluster</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>dts</name><operator>)</operator> <operator>||</operator> <name><name>track</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>MODE_PSP</name> <operator>||</operator> <call><name>is_clcp_track</name><argument_list>(<argument><expr><name>track</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>mov</name><operator>-&gt;</operator><name>fc</name></name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,

<argument><expr><literal type="string">"Not writing any edit list even though one would have been required\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>tref_tag</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mov_write_tref_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>track</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>mov_write_mdia_tag</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>, <argument><expr><name>mov</name></expr></argument>, <argument><expr><name>track</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>MODE_PSP</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mov_write_uuid_tag_psp</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>track</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>tag</name></name> <operator>==</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'r'</literal></expr></argument>,<argument><expr><literal type="char">'t'</literal></expr></argument>,<argument><expr><literal type="char">'p'</literal></expr></argument>,<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mov_write_udta_sdp</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>track</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>MODE_MOV</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>sample_aspect_ratio</name> <init>= <expr><call><name>av_q2d</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>sample_aspect_ratio</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>num</name></name> <operator>&amp;&amp;</operator> <literal type="number">1.0</literal> <operator>!=</operator> <name>sample_aspect_ratio</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>mov_write_tapt_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>track</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>is_clcp_track</name><argument_list>(<argument><expr><name>track</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>st</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>num</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>mov_write_tapt_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>track</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>mov_write_track_udta_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>mov</name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>entry</name></name> <operator>=</operator> <name>entry_backup</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>chunkCount</name></name> <operator>=</operator> <name>chunk_backup</name></expr>;</expr_stmt>

<return>return <expr><call><name>update_size</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_write_iods_tag</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>MOVMuxContext</name> <modifier>*</modifier></type><name>mov</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>has_audio</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>has_video</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>pos</name> <init>= <expr><call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>audio_profile</name> <init>= <expr><name><name>mov</name><operator>-&gt;</operator><name>iods_audio_profile</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>video_profile</name> <init>= <expr><name><name>mov</name><operator>-&gt;</operator><name>iods_video_profile</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>mov</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>mov</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>entry</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>mov</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FF_MOV_FLAG_EMPTY_MOOV</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>has_audio</name> <operator>|=</operator> <name><name>mov</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>par</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>;</expr_stmt>

<expr_stmt><expr><name>has_video</name> <operator>|=</operator> <name><name>mov</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>par</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>audio_profile</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>audio_profile</name> <operator>=</operator> <literal type="number">0xFF</literal> <operator>-</operator> <name>has_audio</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>video_profile</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>video_profile</name> <operator>=</operator> <literal type="number">0xFF</literal> <operator>-</operator> <name>has_video</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"iods"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>put_descr</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x10</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x004f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>audio_profile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>video_profile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>update_size</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_write_trex_tag</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>MOVTrack</name> <modifier>*</modifier></type><name>track</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"trex"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>track_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_write_mvex_tag</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>MOVMuxContext</name> <modifier>*</modifier></type><name>mov</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>pos</name> <init>= <expr><call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"mvex"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>mov</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mov_write_trex_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mov</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><call><name>update_size</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_write_mvhd_tag</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>MOVMuxContext</name> <modifier>*</modifier></type><name>mov</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>max_track_id</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>max_track_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>version</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>mov</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>mov</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>entry</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>mov</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>timescale</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>max_track_len_temp</name> <init>= <expr><call><name>av_rescale_rnd</name><argument_list>(

<argument><expr><call><name>calc_pts_duration</name><argument_list>(<argument><expr><name>mov</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mov</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>MOV_TIMESCALE</name></expr></argument>,

<argument><expr><name><name>mov</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>timescale</name></expr></argument>,

<argument><expr><name>AV_ROUND_UP</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>max_track_len</name> <operator>&lt;</operator> <name>max_track_len_temp</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>max_track_len</name> <operator>=</operator> <name>max_track_len_temp</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>max_track_id</name> <operator>&lt;</operator> <name><name>mov</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>track_id</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>max_track_id</name> <operator>=</operator> <name><name>mov</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>track_id</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>mov</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FF_MOV_FLAG_EMPTY_MOOV</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>max_track_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>max_track_id</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>version</name> <operator>=</operator> <ternary><condition><expr><name>max_track_len</name> <operator>&lt;</operator> <name>UINT32_MAX</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><ternary><condition><expr><name>version</name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="number">120</literal></expr> </then><else>: <expr><literal type="number">108</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"mvhd"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb24</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>version</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avio_wb64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>mov</name><operator>-&gt;</operator><name>time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>mov</name><operator>-&gt;</operator><name>time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>mov</name><operator>-&gt;</operator><name>time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>mov</name><operator>-&gt;</operator><name>time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>MOV_TIMESCALE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><ternary><condition><expr><operator>(</operator><name>version</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><call><name>avio_wb64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>max_track_len</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>max_track_len</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x00010000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x0100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>write_matrix</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>max_track_id</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<return>return <expr><literal type="number">0x6c</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_write_itunes_hdlr_tag</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>MOVMuxContext</name> <modifier>*</modifier></type><name>mov</name></decl></parameter>,

<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">33</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"hdlr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"mdir"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"appl"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">33</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_write_string_data_tag</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lang</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>long_style</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>long_style</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><literal type="number">16</literal> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>size</name></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>lang</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>lang</name> <operator>=</operator> <call><name>ff_mov_iso639_to_lang</name><argument_list>(<argument><expr><literal type="string">"und"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>lang</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>strlen</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">4</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_write_string_tag</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lang</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>long_style</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>value</name> <operator>&amp;&amp;</operator> <name><name>value</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>pos</name> <init>= <expr><call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mov_write_string_data_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>lang</name></expr></argument>, <argument><expr><name>long_style</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>update_size</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>size</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>AVDictionaryEntry</name> <modifier>*</modifier></type><name>get_metadata_lang</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tag</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>lang</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>, <decl><type ref="prev"/><name>len</name></decl>, <decl><type ref="prev"/><name>len2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVDictionaryEntry</name> <modifier>*</modifier></type><name>t</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>t2</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>tag2</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>lang</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>t</name> <operator>=</operator> <call><name>av_dict_get</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>tag2</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tag2</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s-"</literal></expr></argument>, <argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>t2</name> <operator>=</operator> <call><name>av_dict_get</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><name>tag2</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>, <argument><expr><name>AV_DICT_IGNORE_SUFFIX</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>len2</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>t2</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len2</name> <operator>==</operator> <name>len</name> <operator>+</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name><name>t2</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <operator>(</operator><name>l</name> <operator>=</operator> <call><name>ff_mov_iso639_to_lang</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>t2</name><operator>-&gt;</operator><name>key</name><index>[<expr><name>len2</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>lang</name> <operator>=</operator> <name>l</name></expr>;</expr_stmt>

<return>return <expr><name>t</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<return>return <expr><name>t</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_write_string_metadata</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tag</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>long_style</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>lang</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVDictionaryEntry</name> <modifier>*</modifier></type><name>t</name> <init>= <expr><call><name>get_metadata_lang</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lang</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>t</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>mov_write_string_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name>lang</name></expr></argument>, <argument><expr><name>long_style</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_write_tmpo_tag</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVDictionaryEntry</name> <modifier>*</modifier></type><name>t</name> <init>= <expr><call><name>av_dict_get</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><literal type="string">"tmpo"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>tmpo</name> <init>= <expr><ternary><condition><expr><name>t</name></expr> ?</condition><then> <expr><call><name>atoi</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>tmpo</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">26</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"tmpo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>size</name><operator>-</operator><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>tmpo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<return>return <expr><name>size</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_write_loci_tag</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>lang</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>pos</name> <init>= <expr><call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>latitude</name></decl>, <decl><type ref="prev"/><name>longitude</name></decl>, <decl><type ref="prev"/><name>altitude</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>latitude_fix</name></decl>, <decl><type ref="prev"/><name>longitude_fix</name></decl>, <decl><type ref="prev"/><name>altitude_fix</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVDictionaryEntry</name> <modifier>*</modifier></type><name>t</name> <init>= <expr><call><name>get_metadata_lang</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"location"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>lang</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>place</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>astronomical_body</name> <init>= <expr><literal type="string">"earth"</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>t</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>value</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>longitude</name> <operator>=</operator> <call><name>strtod</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>end</name> <operator>==</operator> <name>ptr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"malformed location metadata\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>end</name></expr>;</expr_stmt>

<expr_stmt><expr><name>latitude</name> <operator>=</operator> <call><name>strtod</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>end</name> <operator>==</operator> <name>ptr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"malformed location metadata\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>end</name></expr>;</expr_stmt>

<expr_stmt><expr><name>altitude</name> <operator>=</operator> <call><name>strtod</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>end</name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>place</name> <operator>=</operator> <name>end</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>latitude_fix</name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator> <operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>*</operator> <name>latitude</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>longitude_fix</name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator> <operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>*</operator> <name>longitude</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>altitude_fix</name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator> <operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>*</operator> <name>altitude</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"loci"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>lang</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>place</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>place</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>latitude_fix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>longitude_fix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>altitude_fix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>astronomical_body</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>astronomical_body</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<return>return <expr><call><name>update_size</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_write_trkn_tag</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>MOVMuxContext</name> <modifier>*</modifier></type><name>mov</name></decl></parameter>,

<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>disc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVDictionaryEntry</name> <modifier>*</modifier></type><name>t</name> <init>= <expr><call><name>av_dict_get</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>,

<argument><expr><ternary><condition><expr><name>disc</name></expr> ?</condition><then> <expr><literal type="string">"disc"</literal></expr> </then><else>: <expr><literal type="string">"track"</literal></expr></else></ternary></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>track</name> <init>= <expr><ternary><condition><expr><name>t</name></expr> ?</condition><then> <expr><call><name>atoi</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>track</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>tracks</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>slash</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>slash</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>tracks</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>slash</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><ternary><condition><expr><name>disc</name></expr> ?</condition><then> <expr><literal type="string">"disk"</literal></expr> </then><else>: <expr><literal type="string">"trkn"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>track</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>tracks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>size</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_write_int8_metadata</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tag</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVDictionaryEntry</name> <modifier>*</modifier></type><name>t</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>num</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><literal type="number">24</literal> <operator>+</operator> <name>len</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>!=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>len</name> <operator>!=</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>t</name> <operator>=</operator> <call><name>av_dict_get</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>num</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>size</name> <operator>-</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name><operator>==</operator><literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>avio_w8</name> <argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>size</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_write_covr</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MOVMuxContext</name> <modifier>*</modifier></type><name>mov</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>MOVTrack</name> <modifier>*</modifier></type><name>trk</name> <init>= <expr><operator>&amp;</operator><name><name>mov</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_cover_image</name><argument_list>(<argument><expr><name><name>trk</name><operator>-&gt;</operator><name>st</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>trk</name><operator>-&gt;</operator><name>cover_image</name><operator>.</operator><name>size</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pos</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"covr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">16</literal> <operator>+</operator> <name><name>trk</name><operator>-&gt;</operator><name>cover_image</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>trk</name><operator>-&gt;</operator><name>tag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument> , <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>trk</name><operator>-&gt;</operator><name>cover_image</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>trk</name><operator>-&gt;</operator><name>cover_image</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><ternary><condition><expr><name>pos</name></expr> ?</condition><then> <expr><call><name>update_size</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_write_ilst_tag</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>MOVMuxContext</name> <modifier>*</modifier></type><name>mov</name></decl></parameter>,

<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>pos</name> <init>= <expr><call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"ilst"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mov_write_string_metadata</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"\251nam"</literal></expr></argument>, <argument><expr><literal type="string">"title"</literal></expr></argument> , <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mov_write_string_metadata</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"\251ART"</literal></expr></argument>, <argument><expr><literal type="string">"artist"</literal></expr></argument> , <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mov_write_string_metadata</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"aART"</literal></expr></argument>, <argument><expr><literal type="string">"album_artist"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mov_write_string_metadata</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"\251wrt"</literal></expr></argument>, <argument><expr><literal type="string">"composer"</literal></expr></argument> , <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mov_write_string_metadata</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"\251alb"</literal></expr></argument>, <argument><expr><literal type="string">"album"</literal></expr></argument> , <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mov_write_string_metadata</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"\251day"</literal></expr></argument>, <argument><expr><literal type="string">"date"</literal></expr></argument> , <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>mov_write_string_metadata</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"\251too"</literal></expr></argument>, <argument><expr><literal type="string">"encoding_tool"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AVFMT_FLAG_BITEXACT</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mov_write_string_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"\251too"</literal></expr></argument>, <argument><expr><name>LIBAVFORMAT_IDENT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>mov_write_string_metadata</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"\251cmt"</literal></expr></argument>, <argument><expr><literal type="string">"comment"</literal></expr></argument> , <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mov_write_string_metadata</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"\251gen"</literal></expr></argument>, <argument><expr><literal type="string">"genre"</literal></expr></argument> , <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mov_write_string_metadata</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"cprt"</literal></expr></argument>, <argument><expr><literal type="string">"copyright"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mov_write_string_metadata</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"\251grp"</literal></expr></argument>, <argument><expr><literal type="string">"grouping"</literal></expr></argument> , <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mov_write_string_metadata</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"\251lyr"</literal></expr></argument>, <argument><expr><literal type="string">"lyrics"</literal></expr></argument> , <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mov_write_string_metadata</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"desc"</literal></expr></argument>, <argument><expr><literal type="string">"description"</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mov_write_string_metadata</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"ldes"</literal></expr></argument>, <argument><expr><literal type="string">"synopsis"</literal></expr></argument> , <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mov_write_string_metadata</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"tvsh"</literal></expr></argument>, <argument><expr><literal type="string">"show"</literal></expr></argument> , <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mov_write_string_metadata</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"tven"</literal></expr></argument>, <argument><expr><literal type="string">"episode_id"</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mov_write_string_metadata</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"tvnn"</literal></expr></argument>, <argument><expr><literal type="string">"network"</literal></expr></argument> , <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mov_write_string_metadata</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"keyw"</literal></expr></argument>, <argument><expr><literal type="string">"keywords"</literal></expr></argument> , <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mov_write_int8_metadata</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"tves"</literal></expr></argument>, <argument><expr><literal type="string">"episode_sort"</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mov_write_int8_metadata</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"tvsn"</literal></expr></argument>, <argument><expr><literal type="string">"season_number"</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mov_write_int8_metadata</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"stik"</literal></expr></argument>, <argument><expr><literal type="string">"media_type"</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mov_write_int8_metadata</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"hdvd"</literal></expr></argument>, <argument><expr><literal type="string">"hd_video"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mov_write_int8_metadata</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"pgap"</literal></expr></argument>, <argument><expr><literal type="string">"gapless_playback"</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mov_write_int8_metadata</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"cpil"</literal></expr></argument>, <argument><expr><literal type="string">"compilation"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mov_write_covr</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mov_write_trkn_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>mov</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>mov_write_trkn_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>mov</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>mov_write_tmpo_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>update_size</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_write_mdta_hdlr_tag</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>MOVMuxContext</name> <modifier>*</modifier></type><name>mov</name></decl></parameter>,

<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">33</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"hdlr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"mdta"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">33</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_write_mdta_keys_tag</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>MOVMuxContext</name> <modifier>*</modifier></type><name>mov</name></decl></parameter>,

<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVDictionaryEntry</name> <modifier>*</modifier></type><name>t</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>pos</name> <init>= <expr><call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>curpos</name></decl>, <decl><type ref="prev"/><name>entry_pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"keys"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>entry_pos</name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<while>while <condition>(<expr><name>t</name> <operator>=</operator> <call><name>av_dict_get</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>AV_DICT_IGNORE_SUFFIX</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"mdta"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>count</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>curpos</name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>entry_pos</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>curpos</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>update_size</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_write_mdta_ilst_tag</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>MOVMuxContext</name> <modifier>*</modifier></type><name>mov</name></decl></parameter>,

<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVDictionaryEntry</name> <modifier>*</modifier></type><name>t</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>pos</name> <init>= <expr><call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"ilst"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>t</name> <operator>=</operator> <call><name>av_dict_get</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>AV_DICT_IGNORE_SUFFIX</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>entry_pos</name> <init>= <expr><call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>mov_write_string_data_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>update_size</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>entry_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>count</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><call><name>update_size</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_write_meta_tag</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>MOVMuxContext</name> <modifier>*</modifier></type><name>mov</name></decl></parameter>,

<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>pos</name> <init>= <expr><call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"meta"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mov</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FF_MOV_FLAG_USE_MDTA</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>mov_write_mdta_hdlr_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>mov</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mov_write_mdta_keys_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>mov</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mov_write_mdta_ilst_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>mov</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>mov_write_itunes_hdlr_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>mov</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mov_write_ilst_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>mov</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>update_size</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>size</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_write_raw_metadata_tag</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVDictionaryEntry</name> <modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>t</name> <operator>=</operator> <call><name>av_dict_get</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><name>len</name> <operator>+</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>size</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ascii_to_wc</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>val</name></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>*</operator><name>b</name></expr>)</condition> <block>{<block_content>

<macro><name>GET_UTF8</name><argument_list>(<argument>val</argument>, <argument>*b++</argument>, <argument>return -<literal type="number">1</literal>;</argument>)</argument_list></macro>

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint16_t</name></type> <name>language_code</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><operator>(</operator><operator>(</operator><name><name>str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="number">0x60</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1F</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">10</literal><operator>)</operator> <operator>+</operator>

<operator>(</operator><operator>(</operator><operator>(</operator><name><name>str</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <literal type="number">0x60</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1F</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>+</operator>

<operator>(</operator><operator>(</operator> <name><name>str</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <literal type="number">0x60</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1F</literal><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_write_3gp_udta_tag</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tag</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>pos</name> <init>= <expr><call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVDictionaryEntry</name> <modifier>*</modifier></type><name>t</name> <init>= <expr><call><name>av_dict_get</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>t</name> <operator>||</operator> <operator>!</operator><call><name>utf8len</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><literal type="string">"yrrc"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><call><name>atoi</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><call><name>language_code</name><argument_list>(<argument><expr><literal type="string">"eng"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><literal type="string">"albm"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<operator>(</operator><name>t</name> <operator>=</operator> <call><name>av_dict_get</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><literal type="string">"track"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><call><name>atoi</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><call><name>update_size</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_write_chpl_tag</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>pos</name> <init>= <expr><call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>nb_chapters</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>nb_chapters</name></name></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"chpl"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x01000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>nb_chapters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_chapters</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>AVChapter</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>chapters</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVDictionaryEntry</name> <modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>

<macro><name>avio_wb64</name><argument_list>(<argument>pb</argument>, <argument>av_rescale_q(c-&gt;start, c-&gt;time_base, (AVRational){<literal type="number">1</literal>,<literal type="number">10000000</literal>})</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>t</name> <operator>=</operator> <call><name>av_dict_get</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><literal type="string">"title"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

<return>return <expr><call><name>update_size</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_write_udta_tag</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>MOVMuxContext</name> <modifier>*</modifier></type><name>mov</name></decl></parameter>,

<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb_buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avio_open_dyn_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mov</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <name>MODE_3GP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>mov_write_3gp_udta_tag</name><argument_list>(<argument><expr><name>pb_buf</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"perf"</literal></expr></argument>, <argument><expr><literal type="string">"artist"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mov_write_3gp_udta_tag</name><argument_list>(<argument><expr><name>pb_buf</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"titl"</literal></expr></argument>, <argument><expr><literal type="string">"title"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mov_write_3gp_udta_tag</name><argument_list>(<argument><expr><name>pb_buf</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"auth"</literal></expr></argument>, <argument><expr><literal type="string">"author"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mov_write_3gp_udta_tag</name><argument_list>(<argument><expr><name>pb_buf</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"gnre"</literal></expr></argument>, <argument><expr><literal type="string">"genre"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mov_write_3gp_udta_tag</name><argument_list>(<argument><expr><name>pb_buf</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"dscp"</literal></expr></argument>, <argument><expr><literal type="string">"comment"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mov_write_3gp_udta_tag</name><argument_list>(<argument><expr><name>pb_buf</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"albm"</literal></expr></argument>, <argument><expr><literal type="string">"album"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mov_write_3gp_udta_tag</name><argument_list>(<argument><expr><name>pb_buf</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"cprt"</literal></expr></argument>, <argument><expr><literal type="string">"copyright"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mov_write_3gp_udta_tag</name><argument_list>(<argument><expr><name>pb_buf</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"yrrc"</literal></expr></argument>, <argument><expr><literal type="string">"date"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mov_write_loci_tag</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pb_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>mov</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>MODE_MOV</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>mov</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FF_MOV_FLAG_USE_MDTA</name><operator>)</operator></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>mov_write_string_metadata</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pb_buf</name></expr></argument>, <argument><expr><literal type="string">"\251ART"</literal></expr></argument>, <argument><expr><literal type="string">"artist"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mov_write_string_metadata</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pb_buf</name></expr></argument>, <argument><expr><literal type="string">"\251nam"</literal></expr></argument>, <argument><expr><literal type="string">"title"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mov_write_string_metadata</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pb_buf</name></expr></argument>, <argument><expr><literal type="string">"\251aut"</literal></expr></argument>, <argument><expr><literal type="string">"author"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mov_write_string_metadata</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pb_buf</name></expr></argument>, <argument><expr><literal type="string">"\251alb"</literal></expr></argument>, <argument><expr><literal type="string">"album"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mov_write_string_metadata</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pb_buf</name></expr></argument>, <argument><expr><literal type="string">"\251day"</literal></expr></argument>, <argument><expr><literal type="string">"date"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mov_write_string_metadata</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pb_buf</name></expr></argument>, <argument><expr><literal type="string">"\251swr"</literal></expr></argument>, <argument><expr><literal type="string">"encoder"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mov_write_string_metadata</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pb_buf</name></expr></argument>, <argument><expr><literal type="string">"\251des"</literal></expr></argument>, <argument><expr><literal type="string">"comment"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mov_write_string_metadata</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pb_buf</name></expr></argument>, <argument><expr><literal type="string">"\251cmt"</literal></expr></argument>, <argument><expr><literal type="string">"comment"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mov_write_string_metadata</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pb_buf</name></expr></argument>, <argument><expr><literal type="string">"\251gen"</literal></expr></argument>, <argument><expr><literal type="string">"genre"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mov_write_string_metadata</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pb_buf</name></expr></argument>, <argument><expr><literal type="string">"\251cpy"</literal></expr></argument>, <argument><expr><literal type="string">"copyright"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mov_write_string_metadata</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pb_buf</name></expr></argument>, <argument><expr><literal type="string">"\251mak"</literal></expr></argument>, <argument><expr><literal type="string">"make"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mov_write_string_metadata</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pb_buf</name></expr></argument>, <argument><expr><literal type="string">"\251mod"</literal></expr></argument>, <argument><expr><literal type="string">"model"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mov_write_string_metadata</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pb_buf</name></expr></argument>, <argument><expr><literal type="string">"\251xyz"</literal></expr></argument>, <argument><expr><literal type="string">"location"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mov_write_string_metadata</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pb_buf</name></expr></argument>, <argument><expr><literal type="string">"\251key"</literal></expr></argument>, <argument><expr><literal type="string">"keywords"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mov_write_raw_metadata_tag</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pb_buf</name></expr></argument>, <argument><expr><literal type="string">"XMP_"</literal></expr></argument>, <argument><expr><literal type="string">"xmp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>mov_write_meta_tag</name><argument_list>(<argument><expr><name>pb_buf</name></expr></argument>, <argument><expr><name>mov</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mov_write_loci_tag</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pb_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>nb_chapters</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>mov</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FF_MOV_FLAG_DISABLE_CHPL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mov_write_chpl_tag</name><argument_list>(<argument><expr><name>pb_buf</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>size</name> <operator>=</operator> <call><name>avio_get_dyn_buf</name><argument_list>(<argument><expr><name>pb_buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>size</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"udta"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ffio_free_dyn_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mov_write_psp_udta_tag</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>lang</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>utf8len</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>len</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><call><name>language_code</name><argument_list>(<argument><expr><name>lang</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x01</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ascii_to_wc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_write_uuidusmt_tag</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVDictionaryEntry</name> <modifier>*</modifier></type><name>title</name> <init>= <expr><call><name>av_dict_get</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><literal type="string">"title"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>pos</name></decl>, <decl><type ref="prev"/><name>pos2</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>title</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"uuid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"USMT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x21d24fce</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0xbb88695c</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0xfac9c740</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pos2</name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"MTDT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x0C</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x0B</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><call><name>language_code</name><argument_list>(<argument><expr><literal type="string">"und"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x021C</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AVFMT_FLAG_BITEXACT</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mov_write_psp_udta_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>LIBAVCODEC_IDENT</name></expr></argument>, <argument><expr><literal type="string">"eng"</literal></expr></argument>, <argument><expr><literal type="number">0x04</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>mov_write_psp_udta_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>title</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><literal type="string">"eng"</literal></expr></argument>, <argument><expr><literal type="number">0x01</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mov_write_psp_udta_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"2006/04/01 11:11:11"</literal></expr></argument>, <argument><expr><literal type="string">"und"</literal></expr></argument>, <argument><expr><literal type="number">0x03</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>update_size</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pos2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>update_size</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>build_chunks</name><parameter_list>(<parameter><decl><type><name>MOVTrack</name> <modifier>*</modifier></type><name>trk</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MOVIentry</name> <modifier>*</modifier></type><name>chunk</name> <init>= <expr><operator>&amp;</operator><name><name>trk</name><operator>-&gt;</operator><name>cluster</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>chunkSize</name> <init>= <expr><name><name>chunk</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>chunk</name><operator>-&gt;</operator><name>chunkNum</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>trk</name><operator>-&gt;</operator><name>chunkCount</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>trk</name><operator>-&gt;</operator><name>chunkCount</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>trk</name><operator>-&gt;</operator><name>entry</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>chunk</name><operator>-&gt;</operator><name>pos</name></name> <operator>+</operator> <name>chunkSize</name> <operator>==</operator> <name><name>trk</name><operator>-&gt;</operator><name>cluster</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pos</name> <operator>&amp;&amp;</operator>

<name>chunkSize</name> <operator>+</operator> <name><name>trk</name><operator>-&gt;</operator><name>cluster</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">20</literal><operator>)</operator></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>chunkSize</name> <operator>+=</operator> <name><name>trk</name><operator>-&gt;</operator><name>cluster</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chunk</name><operator>-&gt;</operator><name>samples_in_chunk</name></name> <operator>+=</operator> <name><name>trk</name><operator>-&gt;</operator><name>cluster</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>entries</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>trk</name><operator>-&gt;</operator><name>cluster</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>chunkNum</name> <operator>=</operator> <name><name>chunk</name><operator>-&gt;</operator><name>chunkNum</name></name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>chunk</name><operator>=</operator><operator>&amp;</operator><name><name>trk</name><operator>-&gt;</operator><name>cluster</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>chunkSize</name> <operator>=</operator> <name><name>chunk</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>trk</name><operator>-&gt;</operator><name>chunkCount</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_setup_track_ids</name><parameter_list>(<parameter><decl><type><name>MOVMuxContext</name> <modifier>*</modifier></type><name>mov</name></decl></parameter>, <parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mov</name><operator>-&gt;</operator><name>track_ids_ok</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mov</name><operator>-&gt;</operator><name>use_stream_ids_as_track_ids</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>next_generated_track_id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>id</name> <operator>&gt;</operator> <name>next_generated_track_id</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>next_generated_track_id</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>id</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>mov</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>mov</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>entry</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>mov</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FF_MOV_FLAG_FRAGMENT</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>mov</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>track_id</name> <operator>=</operator> <ternary><condition><expr><name>i</name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name></expr> ?</condition><then> <expr><operator>++</operator><name>next_generated_track_id</name></expr> </then><else>: <expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>id</name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>mov</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>mov</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>entry</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>mov</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FF_MOV_FLAG_FRAGMENT</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>mov</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>track_id</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>mov</name><operator>-&gt;</operator><name>track_ids_ok</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_write_moov_tag</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>MOVMuxContext</name> <modifier>*</modifier></type><name>mov</name></decl></parameter>,

<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>pos</name> <init>= <expr><call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"moov"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mov_setup_track_ids</name><argument_list>(<argument><expr><name>mov</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>mov</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>mov</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>entry</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>mov</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FF_MOV_FLAG_FRAGMENT</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>mov</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>time</name> <operator>=</operator> <name><name>mov</name><operator>-&gt;</operator><name>time</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mov</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>entry</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>build_chunks</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mov</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>mov</name><operator>-&gt;</operator><name>chapter_track</name></name></expr>)</condition><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>mov</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>tref_tag</name> <operator>=</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'c'</literal></expr></argument>,<argument><expr><literal type="char">'h'</literal></expr></argument>,<argument><expr><literal type="char">'a'</literal></expr></argument>,<argument><expr><literal type="char">'p'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mov</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>tref_id</name> <operator>=</operator> <name><name>mov</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name><name>mov</name><operator>-&gt;</operator><name>chapter_track</name></name></expr>]</index></name><operator>.</operator><name>track_id</name></expr>;</expr_stmt>

</block_content>}</block></for></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>mov</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>MOVTrack</name> <modifier>*</modifier></type><name>track</name> <init>= <expr><operator>&amp;</operator><name><name>mov</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>tag</name></name> <operator>==</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'r'</literal></expr></argument>,<argument><expr><literal type="char">'t'</literal></expr></argument>,<argument><expr><literal type="char">'p'</literal></expr></argument>,<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>tref_tag</name></name> <operator>=</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'h'</literal></expr></argument>,<argument><expr><literal type="char">'i'</literal></expr></argument>,<argument><expr><literal type="char">'n'</literal></expr></argument>,<argument><expr><literal type="char">'t'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>tref_id</name></name> <operator>=</operator> <name><name>mov</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name><name>track</name><operator>-&gt;</operator><name>src_track</name></name></expr>]</index></name><operator>.</operator><name>track_id</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type> <name>fallback</name></decl>, <decl><type ref="prev"/><name>size</name></decl>;</decl_stmt>

<expr_stmt><expr><name>fallback</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>*</operator><operator>)</operator><call><name>av_stream_get_side_data</name><argument_list>(<argument><expr><name><name>track</name><operator>-&gt;</operator><name>st</name></name></expr></argument>,

<argument><expr><name>AV_PKT_DATA_FALLBACK_TRACK</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fallback</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>size</name> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>fallback</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>fallback</name> <operator>&lt;</operator> <name><name>mov</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>tref_tag</name></name> <operator>=</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'f'</literal></expr></argument>,<argument><expr><literal type="char">'a'</literal></expr></argument>,<argument><expr><literal type="char">'l'</literal></expr></argument>,<argument><expr><literal type="char">'l'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>tref_id</name></name> <operator>=</operator> <name><name>mov</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><operator>*</operator><name>fallback</name></expr>]</index></name><operator>.</operator><name>track_id</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>mov</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>mov</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>tag</name> <operator>==</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'t'</literal></expr></argument>,<argument><expr><literal type="char">'m'</literal></expr></argument>,<argument><expr><literal type="char">'c'</literal></expr></argument>,<argument><expr><literal type="char">'d'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>src_trk</name> <init>= <expr><name><name>mov</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>src_track</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>mov</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name>src_trk</name></expr>]</index></name><operator>.</operator><name>tref_tag</name> <operator>=</operator> <name><name>mov</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>tag</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mov</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name>src_trk</name></expr>]</index></name><operator>.</operator><name>tref_id</name> <operator>=</operator> <name><name>mov</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>track_id</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mov</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>track_duration</name> <operator>=</operator> <call><name>av_rescale</name><argument_list>(<argument><expr><name><name>mov</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name>src_trk</name></expr>]</index></name><operator>.</operator><name>track_duration</name></expr></argument>,

<argument><expr><name><name>mov</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>timescale</name></expr></argument>,

<argument><expr><name><name>mov</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name>src_trk</name></expr>]</index></name><operator>.</operator><name>timescale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>mov_write_mvhd_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>mov</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mov</name><operator>-&gt;</operator><name>mode</name></name> <operator>!=</operator> <name>MODE_MOV</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>mov</name><operator>-&gt;</operator><name>iods_skip</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mov_write_iods_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>mov</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>mov</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>mov</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>entry</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>mov</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FF_MOV_FLAG_FRAGMENT</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>mov_write_trak_tag</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>, <argument><expr><name>mov</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>mov</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><ternary><condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>mov</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FF_MOV_FLAG_FRAGMENT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mov_write_mvex_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>mov</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>mov</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>MODE_PSP</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mov_write_uuidusmt_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mov_write_udta_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>mov</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><call><name>update_size</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>param_write_int</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>avio_printf</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"&lt;param name=\"%s\" value=\"%d\" valuetype=\"data\"/&gt;\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>param_write_string</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>avio_printf</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"&lt;param name=\"%s\" value=\"%s\" valuetype=\"data\"/&gt;\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>param_write_hex</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">150</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_data_to_hex</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_printf</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"&lt;param name=\"%s\" value=\"%s\" valuetype=\"data\"/&gt;\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_write_isml_manifest</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>MOVMuxContext</name> <modifier>*</modifier></type><name>mov</name></decl></parameter>, <parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>pos</name> <init>= <expr><call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>manifest_bit_rate</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCPBProperties</name> <modifier>*</modifier></type><name>props</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>uuid</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">0xa5</literal></expr>, <expr><literal type="number">0xd4</literal></expr>, <expr><literal type="number">0x0b</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0xe8</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0xdd</literal></expr>,

<expr><literal type="number">0xba</literal></expr>, <expr><literal type="number">0x2f</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x0c</literal></expr>, <expr><literal type="number">0x9a</literal></expr>, <expr><literal type="number">0x66</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"uuid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>uuid</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uuid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_printf</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_printf</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"&lt;smil xmlns=\"http://www.w3.org/2001/SMIL20/Language\"&gt;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_printf</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"&lt;head&gt;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>mov</name><operator>-&gt;</operator><name>fc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AVFMT_FLAG_BITEXACT</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>avio_printf</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"&lt;meta name=\"creator\" content=\"%s\" /&gt;\n"</literal></expr></argument>,

<argument><expr><name>LIBAVFORMAT_IDENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>avio_printf</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"&lt;/head&gt;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_printf</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"&lt;body&gt;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_printf</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"&lt;switch&gt;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mov_setup_track_ids</name><argument_list>(<argument><expr><name>mov</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>mov</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>MOVTrack</name> <modifier>*</modifier></type><name>track</name> <init>= <expr><operator>&amp;</operator><name><name>mov</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>track_id</name> <init>= <expr><name><name>track</name><operator>-&gt;</operator><name>track_id</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>track_name_buf</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name><name>track</name><operator>-&gt;</operator><name>st</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVDictionaryEntry</name> <modifier>*</modifier></type><name>lang</name> <init>= <expr><call><name>av_dict_get</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><literal type="string">"language"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_VIDEO</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>is_cover_image</name><argument_list>(<argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="string">"video"</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="string">"audio"</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>props</name> <operator>=</operator> <operator>(</operator><name>AVCPBProperties</name><operator>*</operator><operator>)</operator><call><name>av_stream_get_side_data</name><argument_list>(<argument><expr><name><name>track</name><operator>-&gt;</operator><name>st</name></name></expr></argument>, <argument><expr><name>AV_PKT_DATA_CPB_PROPERTIES</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>bit_rate</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>manifest_bit_rate</name> <operator>=</operator> <name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>bit_rate</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>props</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>manifest_bit_rate</name> <operator>=</operator> <name><name>props</name><operator>-&gt;</operator><name>max_bitrate</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>avio_printf</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"&lt;%s systemBitrate=\"%"</literal><name>PRId64</name><literal type="string">"\"&gt;\n"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>,

<argument><expr><name>manifest_bit_rate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>param_write_int</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"systemBitrate"</literal></expr></argument>, <argument><expr><name>manifest_bit_rate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>param_write_int</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"trackID"</literal></expr></argument>, <argument><expr><name>track_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>param_write_string</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"systemLanguage"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>lang</name></expr> ?</condition><then> <expr><name><name>lang</name><operator>-&gt;</operator><name>value</name></name></expr> </then><else>: <expr><literal type="string">"und"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_strlcat</name><argument_list>(<argument><expr><name>track_name_buf</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>track_name_buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>lang</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_strlcatf</name><argument_list>(<argument><expr><name>track_name_buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>track_name_buf</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><literal type="string">"_%s"</literal></expr></argument>, <argument><expr><name><name>lang</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>disposition</name></name> <operator>&amp;</operator> <name>AV_DISPOSITION_HEARING_IMPAIRED</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_strlcat</name><argument_list>(<argument><expr><name>track_name_buf</name></expr></argument>, <argument><expr><literal type="string">"_cc"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>track_name_buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>disposition</name></name> <operator>&amp;</operator> <name>AV_DISPOSITION_VISUAL_IMPAIRED</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_strlcat</name><argument_list>(<argument><expr><name>track_name_buf</name></expr></argument>, <argument><expr><literal type="string">"_ad"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>track_name_buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>param_write_string</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"trackName"</literal></expr></argument>, <argument><expr><name>track_name_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_H264</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>extradata_size</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ff_avc_write_annexb_extradata</name><argument_list>(<argument><expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>param_write_hex</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"CodecPrivateData"</literal></expr></argument>,

<argument><expr><ternary><condition><expr><name>ptr</name></expr> ?</condition><then> <expr><name>ptr</name></expr> </then><else>: <expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>extradata</name></name></expr></else></ternary></expr></argument>,

<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>param_write_string</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"FourCC"</literal></expr></argument>, <argument><expr><literal type="string">"H264"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_VC1</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>param_write_string</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"FourCC"</literal></expr></argument>, <argument><expr><literal type="string">"WVC1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>param_write_hex</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"CodecPrivateData"</literal></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>,

<argument><expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>extradata_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>param_write_int</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"MaxWidth"</literal></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>param_write_int</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"MaxHeight"</literal></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>param_write_int</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"DisplayWidth"</literal></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>param_write_int</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"DisplayHeight"</literal></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_AAC</name></expr>)</condition> <block>{<block_content>

<switch>switch <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>profile</name></name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>FF_PROFILE_AAC_HE_V2</name></expr>:</case>

<expr_stmt><expr><call><name>param_write_string</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"FourCC"</literal></expr></argument>, <argument><expr><literal type="string">"AACP"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>FF_PROFILE_AAC_HE</name></expr>:</case>

<expr_stmt><expr><call><name>param_write_string</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"FourCC"</literal></expr></argument>, <argument><expr><literal type="string">"AACH"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>param_write_string</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"FourCC"</literal></expr></argument>, <argument><expr><literal type="string">"AACL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_WMAPRO</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>param_write_string</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"FourCC"</literal></expr></argument>, <argument><expr><literal type="string">"WMAP"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>param_write_hex</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"CodecPrivateData"</literal></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>,

<argument><expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>extradata_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>param_write_int</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"AudioTag"</literal></expr></argument>, <argument><expr><call><name>ff_codec_get_tag</name><argument_list>(<argument><expr><name>ff_codec_wav_tags</name></expr></argument>,

<argument><expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_id</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>param_write_int</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"Channels"</literal></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>param_write_int</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"SamplingRate"</literal></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>param_write_int</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"BitsPerSample"</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>param_write_int</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"PacketSize"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>block_align</name></name></expr> ?</condition><then>

<expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>block_align</name></name></expr> </then><else>: <expr><literal type="number">4</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>avio_printf</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"&lt;/%s&gt;\n"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>avio_printf</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"&lt;/switch&gt;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_printf</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"&lt;/body&gt;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_printf</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"&lt;/smil&gt;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>update_size</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_write_mfhd_tag</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>MOVMuxContext</name> <modifier>*</modifier></type><name>mov</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"mfhd"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>mov</name><operator>-&gt;</operator><name>fragments</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>get_sample_flags</name><parameter_list>(<parameter><decl><type><name>MOVTrack</name> <modifier>*</modifier></type><name>track</name></decl></parameter>, <parameter><decl><type><name>MOVIentry</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><ternary><condition><expr><name><name>entry</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>MOV_SYNC_SAMPLE</name></expr> ?</condition><then> <expr><name>MOV_FRAG_SAMPLE_FLAG_DEPENDS_NO</name></expr> </then><else>:

<expr><operator>(</operator><name>MOV_FRAG_SAMPLE_FLAG_DEPENDS_YES</name> <operator>|</operator> <name>MOV_FRAG_SAMPLE_FLAG_IS_NON_SYNC</name><operator>)</operator></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_write_tfhd_tag</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>MOVMuxContext</name> <modifier>*</modifier></type><name>mov</name></decl></parameter>,

<parameter><decl><type><name>MOVTrack</name> <modifier>*</modifier></type><name>track</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>moof_offset</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>pos</name> <init>= <expr><call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>flags</name> <init>= <expr><name>MOV_TFHD_DEFAULT_SIZE</name> <operator>|</operator> <name>MOV_TFHD_DEFAULT_DURATION</name> <operator>|</operator>

<name>MOV_TFHD_BASE_DATA_OFFSET</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>track</name><operator>-&gt;</operator><name>entry</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>MOV_TFHD_DURATION_IS_EMPTY</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>MOV_TFHD_DEFAULT_FLAGS</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mov</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FF_MOV_FLAG_OMIT_TFHD_OFFSET</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>flags</name> <operator>&amp;=</operator> <operator>~</operator><name>MOV_TFHD_BASE_DATA_OFFSET</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mov</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FF_MOV_FLAG_DEFAULT_BASE_MOOF</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>flags</name> <operator>&amp;=</operator> <operator>~</operator><name>MOV_TFHD_BASE_DATA_OFFSET</name></expr>;</expr_stmt>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>MOV_TFHD_DEFAULT_BASE_IS_MOOF</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mov</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FF_MOV_FLAG_CMAF</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>MOV_TFHD_STSD_ID</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>MODE_ISM</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>flags</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>MOV_TFHD_DEFAULT_SIZE</name> <operator>|</operator> <name>MOV_TFHD_DEFAULT_DURATION</name> <operator>|</operator>

<name>MOV_TFHD_BASE_DATA_OFFSET</name> <operator>|</operator> <name>MOV_TFHD_STSD_ID</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"tfhd"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb24</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>track_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>MOV_TFHD_BASE_DATA_OFFSET</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>avio_wb64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>moof_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>MOV_TFHD_STSD_ID</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>MOV_TFHD_DEFAULT_DURATION</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>default_duration</name></name> <operator>=</operator> <call><name>get_cluster_duration</name><argument_list>(<argument><expr><name>track</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>default_duration</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>MOV_TFHD_DEFAULT_SIZE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>default_size</name></name> <operator>=</operator> <ternary><condition><expr><name><name>track</name><operator>-&gt;</operator><name>entry</name></name></expr> ?</condition><then> <expr><name><name>track</name><operator>-&gt;</operator><name>cluster</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>size</name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>default_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>default_size</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>MOV_TFHD_DEFAULT_FLAGS</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>entry</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>default_sample_flags</name></name> <operator>=</operator> <call><name>get_sample_flags</name><argument_list>(<argument><expr><name>track</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>track</name><operator>-&gt;</operator><name>cluster</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>default_sample_flags</name></name> <operator>=</operator>

<ternary><condition><expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr> ?</condition><then>

<expr><operator>(</operator><name>MOV_FRAG_SAMPLE_FLAG_DEPENDS_YES</name> <operator>|</operator> <name>MOV_FRAG_SAMPLE_FLAG_IS_NON_SYNC</name><operator>)</operator></expr> </then><else>:

<expr><name>MOV_FRAG_SAMPLE_FLAG_DEPENDS_NO</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>default_sample_flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>update_size</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_write_trun_tag</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>MOVMuxContext</name> <modifier>*</modifier></type><name>mov</name></decl></parameter>,

<parameter><decl><type><name>MOVTrack</name> <modifier>*</modifier></type><name>track</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>moof_size</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>first</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>end</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>pos</name> <init>= <expr><call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>flags</name> <init>= <expr><name>MOV_TRUN_DATA_OFFSET</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>first</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>end</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>get_cluster_duration</name><argument_list>(<argument><expr><name>track</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>track</name><operator>-&gt;</operator><name>default_duration</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>MOV_TRUN_SAMPLE_DURATION</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>cluster</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>!=</operator> <name><name>track</name><operator>-&gt;</operator><name>default_size</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>MOV_TRUN_SAMPLE_SIZE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <name>first</name> <operator>&amp;&amp;</operator> <call><name>get_sample_flags</name><argument_list>(<argument><expr><name>track</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>track</name><operator>-&gt;</operator><name>cluster</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>track</name><operator>-&gt;</operator><name>default_sample_flags</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>MOV_TRUN_SAMPLE_FLAGS</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>MOV_TRUN_SAMPLE_FLAGS</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>track</name><operator>-&gt;</operator><name>entry</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<call><name>get_sample_flags</name><argument_list>(<argument><expr><name>track</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>track</name><operator>-&gt;</operator><name>cluster</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>track</name><operator>-&gt;</operator><name>default_sample_flags</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>MOV_TRUN_FIRST_SAMPLE_FLAGS</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>MOV_TRACK_CTTS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>MOV_TRUN_SAMPLE_CTS</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"trun"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mov</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FF_MOV_FLAG_NEGATIVE_CTS_OFFSETS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if> 

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt> 

<expr_stmt><expr><call><name>avio_wb24</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>end</name> <operator>-</operator> <name>first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>mov</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FF_MOV_FLAG_OMIT_TFHD_OFFSET</name> <operator>&amp;&amp;</operator>

<operator>!</operator><operator>(</operator><name><name>mov</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FF_MOV_FLAG_DEFAULT_BASE_MOOF</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>!</operator><name><name>mov</name><operator>-&gt;</operator><name>first_trun</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if> 

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>moof_size</name> <operator>+</operator> <literal type="number">8</literal> <operator>+</operator> <name><name>track</name><operator>-&gt;</operator><name>data_offset</name></name> <operator>+</operator>

<name><name>track</name><operator>-&gt;</operator><name>cluster</name><index>[<expr><name>first</name></expr>]</index></name><operator>.</operator><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt> 

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>MOV_TRUN_FIRST_SAMPLE_FLAGS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><call><name>get_sample_flags</name><argument_list>(<argument><expr><name>track</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>track</name><operator>-&gt;</operator><name>cluster</name><index>[<expr><name>first</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>first</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>end</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>MOV_TRUN_SAMPLE_DURATION</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><call><name>get_cluster_duration</name><argument_list>(<argument><expr><name>track</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>MOV_TRUN_SAMPLE_SIZE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>cluster</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>MOV_TRUN_SAMPLE_FLAGS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><call><name>get_sample_flags</name><argument_list>(<argument><expr><name>track</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>track</name><operator>-&gt;</operator><name>cluster</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>MOV_TRUN_SAMPLE_CTS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>cluster</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>cts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>mov</name><operator>-&gt;</operator><name>first_trun</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><call><name>update_size</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_write_tfxd_tag</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>MOVTrack</name> <modifier>*</modifier></type><name>track</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>pos</name> <init>= <expr><call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>uuid</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">0x6d</literal></expr>, <expr><literal type="number">0x1d</literal></expr>, <expr><literal type="number">0x9b</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x42</literal></expr>, <expr><literal type="number">0xd5</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0xe6</literal></expr>,

<expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0xe2</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x1d</literal></expr>, <expr><literal type="number">0xaf</literal></expr>, <expr><literal type="number">0xf7</literal></expr>, <expr><literal type="number">0x57</literal></expr>, <expr><literal type="number">0xb2</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"uuid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>uuid</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uuid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb24</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>start_dts</name></name> <operator>+</operator> <name><name>track</name><operator>-&gt;</operator><name>frag_start</name></name> <operator>+</operator>

<name><name>track</name><operator>-&gt;</operator><name>cluster</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>cts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>end_pts</name></name> <operator>-</operator>

<operator>(</operator><name><name>track</name><operator>-&gt;</operator><name>cluster</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>dts</name> <operator>+</operator> <name><name>track</name><operator>-&gt;</operator><name>cluster</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>cts</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>update_size</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_write_tfrf_tag</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>MOVMuxContext</name> <modifier>*</modifier></type><name>mov</name></decl></parameter>,

<parameter><decl><type><name>MOVTrack</name> <modifier>*</modifier></type><name>track</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>entry</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><name><name>track</name><operator>-&gt;</operator><name>nb_frag_info</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>entry</name></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><literal type="number">8</literal> <operator>+</operator> <literal type="number">16</literal> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">16</literal><operator>*</operator><name>n</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>uuid</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">0xd4</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x7e</literal></expr>, <expr><literal type="number">0xf2</literal></expr>, <expr><literal type="number">0xca</literal></expr>, <expr><literal type="number">0x39</literal></expr>, <expr><literal type="number">0x46</literal></expr>, <expr><literal type="number">0x95</literal></expr>,

<expr><literal type="number">0x8e</literal></expr>, <expr><literal type="number">0x54</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0xcb</literal></expr>, <expr><literal type="number">0x9e</literal></expr>, <expr><literal type="number">0x46</literal></expr>, <expr><literal type="number">0xa7</literal></expr>, <expr><literal type="number">0x9f</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>entry</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>frag_info</name><index>[<expr><name>entry</name></expr>]</index></name><operator>.</operator><name>tfrf_offset</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"uuid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>uuid</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uuid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb24</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><name>entry</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>avio_wb64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>frag_info</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>frag_info</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>duration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <name><name>mov</name><operator>-&gt;</operator><name>ism_lookahead</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>free_size</name> <init>= <expr><literal type="number">16</literal> <operator>*</operator> <operator>(</operator><name><name>mov</name><operator>-&gt;</operator><name>ism_lookahead</name></name> <operator>-</operator> <name>n</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>free_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"free"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ffio_fill</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>free_size</name> <operator>-</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_write_tfrf_tags</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>MOVMuxContext</name> <modifier>*</modifier></type><name>mov</name></decl></parameter>,

<parameter><decl><type><name>MOVTrack</name> <modifier>*</modifier></type><name>track</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>pos</name> <init>= <expr><call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>mov</name><operator>-&gt;</operator><name>ism_lookahead</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>mov_write_tfrf_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>mov</name></expr></argument>, <argument><expr><name>track</name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>nb_frag_info</name></name> <operator>-</operator> <literal type="number">2</literal> <operator>-</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_add_tfra_entries</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>MOVMuxContext</name> <modifier>*</modifier></type><name>mov</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tracks</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>mov</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>MOVTrack</name> <modifier>*</modifier></type><name>track</name> <init>= <expr><operator>&amp;</operator><name><name>mov</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MOVFragmentInfo</name> <modifier>*</modifier></type><name>info</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tracks</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>!=</operator> <name>tracks</name><operator>)</operator> <operator>||</operator> <operator>!</operator><name><name>track</name><operator>-&gt;</operator><name>entry</name></name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>nb_frag_info</name></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>nb_frag_info</name></name> <operator>&gt;=</operator> <name><name>track</name><operator>-&gt;</operator><name>frag_info_capacity</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>new_capacity</name> <init>= <expr><name><name>track</name><operator>-&gt;</operator><name>nb_frag_info</name></name> <operator>+</operator> <name>MOV_FRAG_INFO_ALLOC_INCREMENT</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_reallocp_array</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>track</name><operator>-&gt;</operator><name>frag_info</name></name></expr></argument>,

<argument><expr><name>new_capacity</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>track</name><operator>-&gt;</operator><name>frag_info</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>frag_info_capacity</name></name> <operator>=</operator> <name>new_capacity</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>info</name> <operator>=</operator> <operator>&amp;</operator><name><name>track</name><operator>-&gt;</operator><name>frag_info</name><index>[<expr><name><name>track</name><operator>-&gt;</operator><name>nb_frag_info</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>time</name></name> <operator>=</operator> <name><name>track</name><operator>-&gt;</operator><name>start_dts</name></name> <operator>+</operator> <name><name>track</name><operator>-&gt;</operator><name>frag_start</name></name> <operator>+</operator>

<name><name>track</name><operator>-&gt;</operator><name>cluster</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>cts</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>duration</name></name> <operator>=</operator> <name><name>track</name><operator>-&gt;</operator><name>end_pts</name></name> <operator>-</operator>

<operator>(</operator><name><name>track</name><operator>-&gt;</operator><name>cluster</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>dts</name> <operator>+</operator> <name><name>track</name><operator>-&gt;</operator><name>cluster</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>cts</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>time</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>duration</name></name> <operator>+=</operator> <name><name>info</name><operator>-&gt;</operator><name>time</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>tfrf_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mov_write_tfrf_tags</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>mov</name></expr></argument>, <argument><expr><name>track</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mov_prune_frag_info</name><parameter_list>(<parameter><decl><type><name>MOVMuxContext</name> <modifier>*</modifier></type><name>mov</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tracks</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>mov</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>MOVTrack</name> <modifier>*</modifier></type><name>track</name> <init>= <expr><operator>&amp;</operator><name><name>mov</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tracks</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>!=</operator> <name>tracks</name><operator>)</operator> <operator>||</operator> <operator>!</operator><name><name>track</name><operator>-&gt;</operator><name>entry</name></name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>nb_frag_info</name></name> <operator>&gt;</operator> <name>max</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>track</name><operator>-&gt;</operator><name>frag_info</name></name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>frag_info</name></name> <operator>+</operator> <operator>(</operator><name><name>track</name><operator>-&gt;</operator><name>nb_frag_info</name></name> <operator>-</operator> <name>max</name><operator>)</operator></expr></argument>, <argument><expr><name>max</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>track</name><operator>-&gt;</operator><name>frag_info</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>nb_frag_info</name></name> <operator>=</operator> <name>max</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_write_tfdt_tag</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>MOVTrack</name> <modifier>*</modifier></type><name>track</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>pos</name> <init>= <expr><call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"tfdt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb24</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>frag_start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>update_size</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_write_traf_tag</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>MOVMuxContext</name> <modifier>*</modifier></type><name>mov</name></decl></parameter>,

<parameter><decl><type><name>MOVTrack</name> <modifier>*</modifier></type><name>track</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>moof_offset</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>moof_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>pos</name> <init>= <expr><call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>start</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"traf"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mov_write_tfhd_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>mov</name></expr></argument>, <argument><expr><name>track</name></expr></argument>, <argument><expr><name>moof_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mov</name><operator>-&gt;</operator><name>mode</name></name> <operator>!=</operator> <name>MODE_ISM</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mov_write_tfdt_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>track</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>track</name><operator>-&gt;</operator><name>entry</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>cluster</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pos</name> <operator>!=</operator> <name><name>track</name><operator>-&gt;</operator><name>cluster</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pos</name> <operator>+</operator> <name><name>track</name><operator>-&gt;</operator><name>cluster</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>mov_write_trun_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>mov</name></expr></argument>, <argument><expr><name>track</name></expr></argument>, <argument><expr><name>moof_size</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>start</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>mov_write_trun_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>mov</name></expr></argument>, <argument><expr><name>track</name></expr></argument>, <argument><expr><name>moof_size</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mov</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>MODE_ISM</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>mov_write_tfxd_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>track</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mov</name><operator>-&gt;</operator><name>ism_lookahead</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>size</name> <init>= <expr><literal type="number">16</literal> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">16</literal> <operator>*</operator> <name><name>mov</name><operator>-&gt;</operator><name>ism_lookahead</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>nb_frag_info</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>MOVFragmentInfo</name> <modifier>*</modifier></type><name>info</name> <init>= <expr><operator>&amp;</operator><name><name>track</name><operator>-&gt;</operator><name>frag_info</name><index>[<expr><name><name>track</name><operator>-&gt;</operator><name>nb_frag_info</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>info</name><operator>-&gt;</operator><name>tfrf_offset</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>tfrf_offset</name></name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">8</literal> <operator>+</operator> <name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"free"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>update_size</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_write_moof_tag_internal</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>MOVMuxContext</name> <modifier>*</modifier></type><name>mov</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>tracks</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>moof_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>pos</name> <init>= <expr><call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"moof"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mov</name><operator>-&gt;</operator><name>first_trun</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mov_write_mfhd_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>mov</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>mov</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>MOVTrack</name> <modifier>*</modifier></type><name>track</name> <init>= <expr><operator>&amp;</operator><name><name>mov</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>tracks</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>!=</operator> <name>tracks</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>track</name><operator>-&gt;</operator><name>entry</name></name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>mov_write_traf_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>mov</name></expr></argument>, <argument><expr><name>track</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>moof_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><call><name>update_size</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_write_sidx_tag</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>,

<parameter><decl><type><name>MOVTrack</name> <modifier>*</modifier></type><name>track</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ref_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>total_sidx_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>pos</name> <init>= <expr><call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>offset_pos</name></decl>, <decl><type ref="prev"/><name>end_pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>presentation_time</name></decl>, <decl><type ref="prev"/><name>duration</name></decl>, <decl><type ref="prev"/><name>offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>starts_with_SAP</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>entries</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>entry</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>entries</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>presentation_time</name> <operator>=</operator> <name><name>track</name><operator>-&gt;</operator><name>start_dts</name></name> <operator>+</operator> <name><name>track</name><operator>-&gt;</operator><name>frag_start</name></name> <operator>+</operator>

<name><name>track</name><operator>-&gt;</operator><name>cluster</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>cts</name></expr>;</expr_stmt>

<expr_stmt><expr><name>duration</name> <operator>=</operator> <name><name>track</name><operator>-&gt;</operator><name>end_pts</name></name> <operator>-</operator>

<operator>(</operator><name><name>track</name><operator>-&gt;</operator><name>cluster</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>dts</name> <operator>+</operator> <name><name>track</name><operator>-&gt;</operator><name>cluster</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>cts</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>starts_with_SAP</name> <operator>=</operator> <name><name>track</name><operator>-&gt;</operator><name>cluster</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>flags</name> <operator>&amp;</operator> <name>MOV_SYNC_SAMPLE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>presentation_time</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>duration</name> <operator>+=</operator> <name>presentation_time</name></expr>;</expr_stmt>

<expr_stmt><expr><name>presentation_time</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>entries</name> <operator>=</operator> <name><name>track</name><operator>-&gt;</operator><name>nb_frag_info</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>entries</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>presentation_time</name> <operator>=</operator> <name><name>track</name><operator>-&gt;</operator><name>frag_info</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>time</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"sidx"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb24</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>track_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>timescale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>presentation_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>offset_pos</name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>entries</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>track</name><operator>-&gt;</operator><name>entry</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>track</name><operator>-&gt;</operator><name>frag_info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>offset</name> <operator>!=</operator> <name><name>track</name><operator>-&gt;</operator><name>frag_info</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>offset</name> <operator>+</operator> <name><name>track</name><operator>-&gt;</operator><name>frag_info</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Non-consecutive fragments, writing incorrect sidx\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>duration</name> <operator>=</operator> <name><name>track</name><operator>-&gt;</operator><name>frag_info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>duration</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ref_size</name> <operator>=</operator> <name><name>track</name><operator>-&gt;</operator><name>frag_info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>starts_with_SAP</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>(</operator><literal type="number">0</literal> <operator>&lt;&lt;</operator> <literal type="number">31</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>ref_size</name> <operator>&amp;</operator> <literal type="number">0x7fffffff</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>duration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>(</operator><name>starts_with_SAP</name> <operator>&lt;&lt;</operator> <literal type="number">31</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><literal type="number">0</literal> <operator>&lt;&lt;</operator> <literal type="number">28</literal><operator>)</operator> <operator>|</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></for>

<expr_stmt><expr><name>end_pos</name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <name>pos</name> <operator>+</operator> <name>total_sidx_size</name> <operator>-</operator> <name>end_pos</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>offset_pos</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>end_pos</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>update_size</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_write_sidx_tags</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>MOVMuxContext</name> <modifier>*</modifier></type><name>mov</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>tracks</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ref_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>round</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>avio_buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>total_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>round</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>round</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>round</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>round</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ffio_open_null_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>avio_buf</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>avio_buf</name> <operator>=</operator> <name>pb</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>mov</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>MOVTrack</name> <modifier>*</modifier></type><name>track</name> <init>= <expr><operator>&amp;</operator><name><name>mov</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>tracks</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>!=</operator> <name>tracks</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>track</name><operator>-&gt;</operator><name>entry</name></name> <operator>&amp;&amp;</operator> <name>ref_size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>total_size</name> <operator>-=</operator> <call><name>mov_write_sidx_tag</name><argument_list>(<argument><expr><name>avio_buf</name></expr></argument>, <argument><expr><name>track</name></expr></argument>, <argument><expr><name>ref_size</name></expr></argument>,

<argument><expr><name>total_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>round</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>total_size</name> <operator>=</operator> <call><name>ffio_close_null_buf</name><argument_list>(<argument><expr><name>avio_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_write_prft_tag</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>MOVMuxContext</name> <modifier>*</modifier></type><name>mov</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tracks</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>pos</name> <init>= <expr><call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>pts_us</name></decl>, <decl><type ref="prev"/><name>ntp_ts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MOVTrack</name> <modifier>*</modifier></type><name>first_track</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><literal type="number">24</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>tracks</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>first_track</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>mov</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>first_track</name><operator>-&gt;</operator><name>entry</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>mov</name><operator>-&gt;</operator><name>fc</name></name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Unable to write PRFT, no entries in the track\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>first_track</name><operator>-&gt;</operator><name>cluster</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pts</name> <operator>==</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>mov</name><operator>-&gt;</operator><name>fc</name></name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Unable to write PRFT, first PTS is invalid\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mov</name><operator>-&gt;</operator><name>write_prft</name></name> <operator>==</operator> <name>MOV_PRFT_SRC_WALLCLOCK</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>first_track</name><operator>-&gt;</operator><name>cluster</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>prft</name><operator>.</operator><name>wallclock</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ntp_ts</name> <operator>=</operator> <call><name>ff_get_formatted_ntp_time</name><argument_list>(<argument><expr><operator>(</operator><name><name>first_track</name><operator>-&gt;</operator><name>cluster</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>prft</name><operator>.</operator><name>wallclock</name></name> <operator>/</operator> <literal type="number">1000</literal><operator>)</operator> <operator>*</operator> <literal type="number">1000</literal> <operator>+</operator>

<name>NTP_OFFSET_US</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>flags</name> <operator>=</operator> <name><name>first_track</name><operator>-&gt;</operator><name>cluster</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>prft</name><operator>.</operator><name>flags</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>ntp_ts</name> <operator>=</operator> <call><name>ff_get_formatted_ntp_time</name><argument_list>(<argument><expr><call><name>ff_ntp_time</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>mov</name><operator>-&gt;</operator><name>write_prft</name></name> <operator>==</operator> <name>MOV_PRFT_SRC_PTS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pts_us</name> <operator>=</operator> <call><name>av_rescale_q</name><argument_list>(<argument><expr><name><name>first_track</name><operator>-&gt;</operator><name>cluster</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pts</name></expr></argument>,

<argument><expr><name><name>first_track</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>, <argument><expr><name>AV_TIME_BASE_Q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ntp_ts</name> <operator>=</operator> <call><name>ff_get_formatted_ntp_time</name><argument_list>(<argument><expr><name>pts_us</name> <operator>+</operator> <name>NTP_OFFSET_US</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>mov</name><operator>-&gt;</operator><name>fc</name></name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Unsupported PRFT box configuration: %d\n"</literal></expr></argument>,

<argument><expr><name><name>mov</name><operator>-&gt;</operator><name>write_prft</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"prft"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb24</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>first_track</name><operator>-&gt;</operator><name>track_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>ntp_ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>first_track</name><operator>-&gt;</operator><name>cluster</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<return>return <expr><call><name>update_size</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_write_moof_tag</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>MOVMuxContext</name> <modifier>*</modifier></type><name>mov</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tracks</name></decl></parameter>,

<parameter><decl><type><name>int64_t</name></type> <name>mdat_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>avio_buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>moof_size</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ffio_open_null_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>avio_buf</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>mov_write_moof_tag_internal</name><argument_list>(<argument><expr><name>avio_buf</name></expr></argument>, <argument><expr><name>mov</name></expr></argument>, <argument><expr><name>tracks</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>moof_size</name> <operator>=</operator> <call><name>ffio_close_null_buf</name><argument_list>(<argument><expr><name>avio_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mov</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FF_MOV_FLAG_DASH</name> <operator>&amp;&amp;</operator>

<operator>!</operator><operator>(</operator><name><name>mov</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>FF_MOV_FLAG_GLOBAL_SIDX</name> <operator>|</operator> <name>FF_MOV_FLAG_SKIP_SIDX</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mov_write_sidx_tags</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>mov</name></expr></argument>, <argument><expr><name>tracks</name></expr></argument>, <argument><expr><name>moof_size</name> <operator>+</operator> <literal type="number">8</literal> <operator>+</operator> <name>mdat_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mov</name><operator>-&gt;</operator><name>write_prft</name></name> <operator>&gt;</operator> <name>MOV_PRFT_NONE</name> <operator>&amp;&amp;</operator> <name><name>mov</name><operator>-&gt;</operator><name>write_prft</name></name> <operator>&lt;</operator> <name>MOV_PRFT_NB</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mov_write_prft_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>mov</name></expr></argument>, <argument><expr><name>tracks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mov</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FF_MOV_FLAG_GLOBAL_SIDX</name> <operator>||</operator>

<operator>!</operator><operator>(</operator><name><name>mov</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FF_MOV_FLAG_SKIP_TRAILER</name><operator>)</operator> <operator>||</operator>

<name><name>mov</name><operator>-&gt;</operator><name>ism_lookahead</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>mov_add_tfra_entries</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>mov</name></expr></argument>, <argument><expr><name>tracks</name></expr></argument>, <argument><expr><name>moof_size</name> <operator>+</operator> <literal type="number">8</literal> <operator>+</operator> <name>mdat_size</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>mov</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FF_MOV_FLAG_GLOBAL_SIDX</name><operator>)</operator> <operator>&amp;&amp;</operator>

<name><name>mov</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FF_MOV_FLAG_SKIP_TRAILER</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>mov_prune_frag_info</name><argument_list>(<argument><expr><name>mov</name></expr></argument>, <argument><expr><name>tracks</name></expr></argument>, <argument><expr><name><name>mov</name><operator>-&gt;</operator><name>ism_lookahead</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>mov_write_moof_tag_internal</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>mov</name></expr></argument>, <argument><expr><name>tracks</name></expr></argument>, <argument><expr><name>moof_size</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_write_tfra_tag</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>MOVTrack</name> <modifier>*</modifier></type><name>track</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>pos</name> <init>= <expr><call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"tfra"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb24</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>track_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>nb_frag_info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>track</name><operator>-&gt;</operator><name>nb_frag_info</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>avio_wb64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>frag_info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>frag_info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>offset</name> <operator>+</operator> <name><name>track</name><operator>-&gt;</operator><name>data_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></for>

<return>return <expr><call><name>update_size</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_write_mfra_tag</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>MOVMuxContext</name> <modifier>*</modifier></type><name>mov</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>pos</name> <init>= <expr><call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"mfra"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mov</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FF_MOV_FLAG_ISML</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>update_size</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>mov</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>MOVTrack</name> <modifier>*</modifier></type><name>track</name> <init>= <expr><operator>&amp;</operator><name><name>mov</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>nb_frag_info</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mov_write_tfra_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>track</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"mfro"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">4</literal> <operator>-</operator> <name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>update_size</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_write_mdat_tag</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>MOVMuxContext</name> <modifier>*</modifier></type><name>mov</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>mov</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>MODE_MOV</name></expr> ?</condition><then> <expr><literal type="string">"wide"</literal></expr> </then><else>: <expr><literal type="string">"free"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mov</name><operator>-&gt;</operator><name>mdat_pos</name></name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"mdat"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mov_write_ftyp_tag_internal</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>has_h264</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>has_video</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>write_minor</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MOVMuxContext</name> <modifier>*</modifier></type><name>mov</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>minor</name> <init>= <expr><literal type="number">0x200</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mov</name><operator>-&gt;</operator><name>major_brand</name></name> <operator>&amp;&amp;</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>mov</name><operator>-&gt;</operator><name>major_brand</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>mov</name><operator>-&gt;</operator><name>major_brand</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>mov</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>MODE_3GP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><ternary><condition><expr><name>has_h264</name></expr> ?</condition><then> <expr><literal type="string">"3gp6"</literal></expr> </then><else>: <expr><literal type="string">"3gp4"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>minor</name> <operator>=</operator> <ternary><condition><expr><name>has_h264</name></expr> ?</condition><then> <expr><literal type="number">0x100</literal></expr> </then><else>: <expr><literal type="number">0x200</literal></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>mov</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <name>MODE_3G2</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><ternary><condition><expr><name>has_h264</name></expr> ?</condition><then> <expr><literal type="string">"3g2b"</literal></expr> </then><else>: <expr><literal type="string">"3g2a"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>minor</name> <operator>=</operator> <ternary><condition><expr><name>has_h264</name></expr> ?</condition><then> <expr><literal type="number">0x20000</literal></expr> </then><else>: <expr><literal type="number">0x10000</literal></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>mov</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>MODE_PSP</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"MSNV"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>mov</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>MODE_MP4</name> <operator>&amp;&amp;</operator> <name><name>mov</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FF_MOV_FLAG_FRAGMENT</name> <operator>&amp;&amp;</operator>

<name><name>mov</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FF_MOV_FLAG_NEGATIVE_CTS_OFFSETS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"iso6"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if> 

<if type="elseif">else if <condition>(<expr><name><name>mov</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>MODE_MP4</name> <operator>&amp;&amp;</operator> <name><name>mov</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FF_MOV_FLAG_DEFAULT_BASE_MOOF</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"iso5"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if> 

<if type="elseif">else if <condition>(<expr><name><name>mov</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>MODE_MP4</name> <operator>&amp;&amp;</operator> <name><name>mov</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FF_MOV_FLAG_NEGATIVE_CTS_OFFSETS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"iso4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>mov</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>MODE_MP4</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"isom"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>mov</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>MODE_IPOD</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><ternary><condition><expr><name>has_video</name></expr> ?</condition><then> <expr><literal type="string">"M4V "</literal></expr></then><else>:<expr><literal type="string">"M4A "</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>mov</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>MODE_ISM</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"isml"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>mov</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>MODE_F4V</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"f4v "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"qt "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>write_minor</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>minor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_write_ftyp_tag</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MOVMuxContext</name> <modifier>*</modifier></type><name>mov</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>pos</name> <init>= <expr><call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>has_h264</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>has_video</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>is_cover_image</name><argument_list>(<argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>has_video</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_H264</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>has_h264</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"ftyp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mov_write_ftyp_tag_internal</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>has_h264</name></expr></argument>, <argument><expr><name>has_video</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mov_write_ftyp_tag_internal</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>has_h264</name></expr></argument>, <argument><expr><name>has_video</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mov</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>MODE_ISM</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"piff"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>mov</name><operator>-&gt;</operator><name>mode</name></name> <operator>!=</operator> <name>MODE_MOV</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>mov</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>MODE_MP4</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>mov</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FF_MOV_FLAG_CMAF</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"cmfc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mov</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FF_MOV_FLAG_FRAGMENT</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>mov</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FF_MOV_FLAG_NEGATIVE_CTS_OFFSETS</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"iso6"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>mov</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FF_MOV_FLAG_FRAGMENT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"iso6"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mov</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FF_MOV_FLAG_DEFAULT_BASE_MOOF</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"iso5"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>mov</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FF_MOV_FLAG_NEGATIVE_CTS_OFFSETS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"iso4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>mov</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FF_MOV_FLAG_DEFAULT_BASE_MOOF</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>mov</name><operator>-&gt;</operator><name>mode</name></name> <operator>!=</operator> <name>MODE_MP4</name> <operator>||</operator> <name><name>mov</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FF_MOV_FLAG_NEGATIVE_CTS_OFFSETS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"isom"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"iso2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>has_h264</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"avc1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mov</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>MODE_MP4</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"mp41"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mov</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FF_MOV_FLAG_DASH</name> <operator>&amp;&amp;</operator> <name><name>mov</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FF_MOV_FLAG_GLOBAL_SIDX</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"dash"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>update_size</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_write_uuidprof_tag</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>video_st</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodecParameters</name> <modifier>*</modifier></type><name>video_par</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>codecpar</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodecParameters</name> <modifier>*</modifier></type><name>audio_par</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>codecpar</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>audio_rate</name> <init>= <expr><name><name>audio_par</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>frame_rate</name> <init>= <expr><ternary><condition><expr><name><name>video_st</name><operator>-&gt;</operator><name>avg_frame_rate</name><operator>.</operator><name>den</name></name></expr> ?</condition><then>

<expr><operator>(</operator><name><name>video_st</name><operator>-&gt;</operator><name>avg_frame_rate</name><operator>.</operator><name>num</name></name> <operator>*</operator> <literal type="number">0x10000LL</literal><operator>)</operator> <operator>/</operator> <name><name>video_st</name><operator>-&gt;</operator><name>avg_frame_rate</name><operator>.</operator><name>den</name></name></expr> </then><else>:

<expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>audio_kbitrate</name> <init>= <expr><name><name>audio_par</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>/</operator> <literal type="number">1000</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>video_kbitrate</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>video_par</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>/</operator> <literal type="number">1000</literal></expr></argument>, <argument><expr><literal type="number">800</literal> <operator>-</operator> <name>audio_kbitrate</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>frame_rate</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>frame_rate</name></expr></argument> &gt;</argument_list></name> <name>INT32_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Frame rate %f outside supported range\n"</literal></expr></argument>, <argument><expr><name>frame_rate</name> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator><literal type="number">0x10000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x94</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"uuid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"PROF"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x21d24fce</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0xbb88695c</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0xfac9c740</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"FPRF"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x2c</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"APRF"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"mp4a"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x20f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>audio_kbitrate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>audio_kbitrate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>audio_rate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>audio_par</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x34</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"VPRF"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>video_par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_H264</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"avc1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x014D</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x0015</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"mp4v"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x0000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x0103</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>video_kbitrate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>video_kbitrate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>frame_rate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>frame_rate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>video_par</name><operator>-&gt;</operator><name>width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>video_par</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x010001</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_write_identification</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MOVMuxContext</name> <modifier>*</modifier></type><name>mov</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mov_write_ftyp_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>,<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mov</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>MODE_PSP</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>video_streams_nb</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>audio_streams_nb</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>other_streams_nb</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>is_cover_image</name><argument_list>(<argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>video_streams_nb</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>audio_streams_nb</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>other_streams_nb</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>video_streams_nb</name> <operator>!=</operator> <literal type="number">1</literal> <operator>||</operator> <name>audio_streams_nb</name> <operator>!=</operator> <literal type="number">1</literal> <operator>||</operator> <name>other_streams_nb</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"PSP mode need one video and one audio stream\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>mov_write_uuidprof_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_parse_mpeg2_frame</name><parameter_list>(<parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>c</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>closed_gop</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pkt</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><name>c</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <name><name>pkt</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="number">0x1b8</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>closed_gop</name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">6</literal> <operator>&amp;</operator> <literal type="number">0x01</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="number">0x100</literal></expr>)</condition> <block>{<block_content> 

<decl_stmt><decl><type><name>int</name></type> <name>temp_ref</name> <init>= <expr><operator>(</operator><name><name>pkt</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>pkt</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>temp_ref</name> <operator>||</operator> <name>closed_gop</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><operator>*</operator><name>flags</name> <operator>=</operator> <name>MOV_SYNC_SAMPLE</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>flags</name> <operator>=</operator> <name>MOV_PARTIAL_SYNC_SAMPLE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mov_parse_vc1_frame</name><parameter_list>(<parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>, <parameter><decl><type><name>MOVTrack</name> <modifier>*</modifier></type><name>trk</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>start</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>next</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>end</name> <init>= <expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>seq</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>entry</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>key</name> <init>= <expr><name><name>pkt</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PKT_FLAG_KEY</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>start</name> <operator>=</operator> <call><name>find_next_marker</name><argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>next</name> <operator>=</operator> <name>start</name></expr>;</init> <condition><expr><name>next</name> <operator>&lt;</operator> <name>end</name></expr>;</condition> <incr><expr><name>start</name> <operator>=</operator> <name>next</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>next</name> <operator>=</operator> <call><name>find_next_marker</name><argument_list>(<argument><expr><name>start</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><call><name>AV_RB32</name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<case>case <expr><name>VC1_CODE_SEQHDR</name></expr>:</case>

<expr_stmt><expr><name>seq</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VC1_CODE_ENTRYPOINT</name></expr>:</case>

<expr_stmt><expr><name>entry</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VC1_CODE_SLICE</name></expr>:</case>

<expr_stmt><expr><name><name>trk</name><operator>-&gt;</operator><name>vc1_info</name><operator>.</operator><name>slices</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>trk</name><operator>-&gt;</operator><name>entry</name></name> <operator>&amp;&amp;</operator> <name><name>trk</name><operator>-&gt;</operator><name>vc1_info</name><operator>.</operator><name>first_packet_seen</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>trk</name><operator>-&gt;</operator><name>vc1_info</name><operator>.</operator><name>first_frag_written</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>trk</name><operator>-&gt;</operator><name>entry</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>trk</name><operator>-&gt;</operator><name>vc1_info</name><operator>.</operator><name>first_frag_written</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>trk</name><operator>-&gt;</operator><name>vc1_info</name><operator>.</operator><name>first_packet_seq</name></name> <operator>=</operator> <name>seq</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>trk</name><operator>-&gt;</operator><name>vc1_info</name><operator>.</operator><name>first_packet_entry</name></name> <operator>=</operator> <name>entry</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>trk</name><operator>-&gt;</operator><name>vc1_info</name><operator>.</operator><name>first_packet_seen</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>seq</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>trk</name><operator>-&gt;</operator><name>vc1_info</name><operator>.</operator><name>packet_seq</name></name><operator>)</operator> <operator>||</operator>

<operator>(</operator><name>entry</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>trk</name><operator>-&gt;</operator><name>vc1_info</name><operator>.</operator><name>packet_entry</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>trk</name><operator>-&gt;</operator><name>entry</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>trk</name><operator>-&gt;</operator><name>cluster</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>&amp;=</operator> <operator>~</operator><name>MOV_SYNC_SAMPLE</name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>trk</name><operator>-&gt;</operator><name>has_keyframes</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>seq</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>trk</name><operator>-&gt;</operator><name>vc1_info</name><operator>.</operator><name>packet_seq</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>entry</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>trk</name><operator>-&gt;</operator><name>vc1_info</name><operator>.</operator><name>packet_entry</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>trk</name><operator>-&gt;</operator><name>vc1_info</name><operator>.</operator><name>first_frag_written</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name>seq</name> <operator>||</operator> <name><name>trk</name><operator>-&gt;</operator><name>vc1_info</name><operator>.</operator><name>first_packet_seq</name></name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><operator>!</operator><name>entry</name> <operator>||</operator> <name><name>trk</name><operator>-&gt;</operator><name>vc1_info</name><operator>.</operator><name>first_packet_entry</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>trk</name><operator>-&gt;</operator><name>cluster</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>flags</name> <operator>|=</operator> <name>MOV_SYNC_SAMPLE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>trk</name><operator>-&gt;</operator><name>has_keyframes</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>trk</name><operator>-&gt;</operator><name>vc1_info</name><operator>.</operator><name>packet_seq</name></name> <operator>&amp;&amp;</operator> <name><name>trk</name><operator>-&gt;</operator><name>vc1_info</name><operator>.</operator><name>packet_entry</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>key</name> <operator>=</operator> <name>seq</name> <operator>&amp;&amp;</operator> <name>entry</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>trk</name><operator>-&gt;</operator><name>vc1_info</name><operator>.</operator><name>packet_seq</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>key</name> <operator>=</operator> <name>seq</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>trk</name><operator>-&gt;</operator><name>vc1_info</name><operator>.</operator><name>packet_entry</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>key</name> <operator>=</operator> <name>entry</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>key</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>trk</name><operator>-&gt;</operator><name>cluster</name><index>[<expr><name><name>trk</name><operator>-&gt;</operator><name>entry</name></name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>|=</operator> <name>MOV_SYNC_SAMPLE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>trk</name><operator>-&gt;</operator><name>has_keyframes</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mov_parse_truehd_frame</name><parameter_list>(<parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>, <parameter><decl><type><name>MOVTrack</name> <modifier>*</modifier></type><name>trk</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>length</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>length</name> <operator>=</operator> <operator>(</operator><call><name>AV_RB16</name><argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0xFFF</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>length</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">8</literal> <operator>||</operator> <name>length</name></expr></argument> &gt;</argument_list></name> <name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>AV_RB32</name><argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0xF8726FBA</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>trk</name><operator>-&gt;</operator><name>cluster</name><index>[<expr><name><name>trk</name><operator>-&gt;</operator><name>entry</name></name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>|=</operator> <name>MOV_SYNC_SAMPLE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>trk</name><operator>-&gt;</operator><name>has_keyframes</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_flush_fragment_interleaving</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>MOVTrack</name> <modifier>*</modifier></type><name>track</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MOVMuxContext</name> <modifier>*</modifier></type><name>mov</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>buf_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>offset</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>track</name><operator>-&gt;</operator><name>mdat_buf</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>mov</name><operator>-&gt;</operator><name>mdat_buf</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>avio_open_dyn_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mov</name><operator>-&gt;</operator><name>mdat_buf</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>buf_size</name> <operator>=</operator> <call><name>avio_get_dyn_buf</name><argument_list>(<argument><expr><name><name>track</name><operator>-&gt;</operator><name>mdat_buf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name><name>mov</name><operator>-&gt;</operator><name>mdat_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name><name>mov</name><operator>-&gt;</operator><name>mdat_buf</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ffio_free_dyn_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>track</name><operator>-&gt;</operator><name>mdat_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>track</name><operator>-&gt;</operator><name>entries_flushed</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>track</name><operator>-&gt;</operator><name>entry</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>cluster</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pos</name> <operator>+=</operator> <name>offset</name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>entries_flushed</name></name> <operator>=</operator> <name><name>track</name><operator>-&gt;</operator><name>entry</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_flush_fragment</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>force</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MOVMuxContext</name> <modifier>*</modifier></type><name>mov</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>first_track</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>mdat_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>has_video</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>starts_with_key</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>first_video_track</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>mov</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FF_MOV_FLAG_FRAGMENT</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>MOVTrack</name> <modifier>*</modifier></type><name>track</name> <init>= <expr><operator>&amp;</operator><name><name>mov</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>track</name><operator>-&gt;</operator><name>end_reliable</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>AVPacket</name></type> <name>pkt</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ff_interleaved_peek</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>dts_shift</name></name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pkt</name><operator>.</operator><name>dts</name></name> <operator>+=</operator> <name><name>track</name><operator>-&gt;</operator><name>dts_shift</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>track_duration</name></name> <operator>=</operator> <name><name>pkt</name><operator>.</operator><name>dts</name></name> <operator>-</operator> <name><name>track</name><operator>-&gt;</operator><name>start_dts</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>.</operator><name>pts</name></name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>end_pts</name></name> <operator>=</operator> <name><name>pkt</name><operator>.</operator><name>pts</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>end_pts</name></name> <operator>=</operator> <name><name>pkt</name><operator>.</operator><name>dts</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>mov</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>MOVTrack</name> <modifier>*</modifier></type><name>track</name> <init>= <expr><operator>&amp;</operator><name><name>mov</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>entry</name></name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_cluster_duration</name><argument_list>(<argument><expr><name>track</name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>entry</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>track_duration</name></name> <operator>+=</operator> <call><name>get_cluster_duration</name><argument_list>(<argument><expr><name>track</name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>entry</name></name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>end_pts</name></name> <operator>+=</operator> <call><name>get_cluster_duration</name><argument_list>(<argument><expr><name>track</name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>entry</name></name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>mov</name><operator>-&gt;</operator><name>missing_duration_warned</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,

<argument><expr><literal type="string">"Estimating the duration of the last packet in a "</literal>

<literal type="string">"fragment, consider setting the duration field in "</literal>

<literal type="string">"AVPacket instead.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mov</name><operator>-&gt;</operator><name>missing_duration_warned</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>mov</name><operator>-&gt;</operator><name>moov_written</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>pos</name> <init>= <expr><call><name>avio_tell</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>buf_size</name></decl>, <decl><type ref="prev"/><name>moov_size</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>mov</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>mov</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>entry</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>is_cover_image</name><argument_list>(<argument><expr><name><name>mov</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>st</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>mov</name><operator>-&gt;</operator><name>nb_streams</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>force</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>moov_size</name> <operator>=</operator> <call><name>get_moov_size</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>mov</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>mov</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>data_offset</name> <operator>=</operator> <name>pos</name> <operator>+</operator> <name>moov_size</name> <operator>+</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>avio_write_marker</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>AV_NOPTS_VALUE</name></expr></argument>, <argument><expr><name>AVIO_DATA_MARKER_HEADER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mov</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FF_MOV_FLAG_DELAY_MOOV</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mov_write_identification</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>mov_write_moov_tag</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>mov</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mov</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FF_MOV_FLAG_DELAY_MOOV</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>mov</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FF_MOV_FLAG_GLOBAL_SIDX</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>mov</name><operator>-&gt;</operator><name>reserved_header_pos</name></name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>avio_write_marker</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>AV_NOPTS_VALUE</name></expr></argument>, <argument><expr><name>AVIO_DATA_MARKER_FLUSH_POINT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mov</name><operator>-&gt;</operator><name>moov_written</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>buf_size</name> <operator>=</operator> <call><name>avio_get_dyn_buf</name><argument_list>(<argument><expr><name><name>mov</name><operator>-&gt;</operator><name>mdat_buf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>buf_size</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="string">"mdat"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ffio_free_dyn_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mov</name><operator>-&gt;</operator><name>mdat_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mov</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FF_MOV_FLAG_GLOBAL_SIDX</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>mov</name><operator>-&gt;</operator><name>reserved_header_pos</name></name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>mov</name><operator>-&gt;</operator><name>moov_written</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mov</name><operator>-&gt;</operator><name>mdat_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>mov</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>mov</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>entry</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>mov</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>frag_start</name> <operator>+=</operator> <name><name>mov</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>start_dts</name> <operator>+</operator>

<name><name>mov</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>track_duration</name> <operator>-</operator>

<name><name>mov</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>cluster</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>dts</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>mov</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>entry</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mov</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>end_reliable</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>avio_write_marker</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>AV_NOPTS_VALUE</name></expr></argument>, <argument><expr><name>AVIO_DATA_MARKER_FLUSH_POINT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mov</name><operator>-&gt;</operator><name>frag_interleave</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>mov</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>MOVTrack</name> <modifier>*</modifier></type><name>track</name> <init>= <expr><operator>&amp;</operator><name><name>mov</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>mov_flush_fragment_interleaving</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>track</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>mov</name><operator>-&gt;</operator><name>mdat_buf</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>mdat_size</name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name><name>mov</name><operator>-&gt;</operator><name>mdat_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>mov</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>MOVTrack</name> <modifier>*</modifier></type><name>track</name> <init>= <expr><operator>&amp;</operator><name><name>mov</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mov</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FF_MOV_FLAG_SEPARATE_MOOF</name> <operator>||</operator> <name><name>mov</name><operator>-&gt;</operator><name>frag_interleave</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>data_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>data_offset</name></name> <operator>=</operator> <name>mdat_size</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>has_video</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>first_video_track</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>entry</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>starts_with_key</name> <operator>=</operator> <name><name>track</name><operator>-&gt;</operator><name>cluster</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>flags</name> <operator>&amp;</operator> <name>MOV_SYNC_SAMPLE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>first_video_track</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>track</name><operator>-&gt;</operator><name>entry</name></name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>mdat_buf</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>mdat_size</name> <operator>+=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name><name>track</name><operator>-&gt;</operator><name>mdat_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>first_track</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>first_track</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>mdat_size</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>avio_write_marker</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>,

<argument><expr><call><name>av_rescale</name><argument_list>(<argument><expr><name><name>mov</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name>first_track</name></expr>]</index></name><operator>.</operator><name><name>cluster</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>dts</name></expr></argument>, <argument><expr><name>AV_TIME_BASE</name></expr></argument>, <argument><expr><name><name>mov</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name>first_track</name></expr>]</index></name><operator>.</operator><name>timescale</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><ternary><condition><expr><operator>(</operator><ternary><condition><expr><name>has_video</name></expr> ?</condition><then> <expr><name>starts_with_key</name></expr> </then><else>: <expr><name><name>mov</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name>first_track</name></expr>]</index></name><operator>.</operator><name><name>cluster</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>flags</name> <operator>&amp;</operator> <name>MOV_SYNC_SAMPLE</name></expr></else></ternary><operator>)</operator></expr> ?</condition><then> <expr><name>AVIO_DATA_MARKER_SYNC_POINT</name></expr> </then><else>: <expr><name>AVIO_DATA_MARKER_BOUNDARY_POINT</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>mov</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>MOVTrack</name> <modifier>*</modifier></type><name>track</name> <init>= <expr><operator>&amp;</operator><name><name>mov</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>buf_size</name></decl>, <decl><type ref="prev"/><name>write_moof</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>moof_tracks</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>duration</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>entry</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>duration</name> <operator>=</operator> <name><name>track</name><operator>-&gt;</operator><name>start_dts</name></name> <operator>+</operator> <name><name>track</name><operator>-&gt;</operator><name>track_duration</name></name> <operator>-</operator>

<name><name>track</name><operator>-&gt;</operator><name>cluster</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>dts</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mov</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FF_MOV_FLAG_SEPARATE_MOOF</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>track</name><operator>-&gt;</operator><name>mdat_buf</name></name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>mdat_size</name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name><name>track</name><operator>-&gt;</operator><name>mdat_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>moof_tracks</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>write_moof</name> <operator>=</operator> <name>i</name> <operator>==</operator> <name>first_track</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>write_moof</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avio_write_marker</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>AV_NOPTS_VALUE</name></expr></argument>, <argument><expr><name>AVIO_DATA_MARKER_FLUSH_POINT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mov_write_moof_tag</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>mov</name></expr></argument>, <argument><expr><name>moof_tracks</name></expr></argument>, <argument><expr><name>mdat_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mov</name><operator>-&gt;</operator><name>fragments</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>mdat_size</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="string">"mdat"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>entry</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>frag_start</name></name> <operator>+=</operator> <name>duration</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>entry</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>entries_flushed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>end_reliable</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>mov</name><operator>-&gt;</operator><name>frag_interleave</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>track</name><operator>-&gt;</operator><name>mdat_buf</name></name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>buf_size</name> <operator>=</operator> <call><name>avio_close_dyn_buf</name><argument_list>(<argument><expr><name><name>track</name><operator>-&gt;</operator><name>mdat_buf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>mdat_buf</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>mov</name><operator>-&gt;</operator><name>mdat_buf</name></name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>buf_size</name> <operator>=</operator> <call><name>avio_close_dyn_buf</name><argument_list>(<argument><expr><name><name>mov</name><operator>-&gt;</operator><name>mdat_buf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mov</name><operator>-&gt;</operator><name>mdat_buf</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>mov</name><operator>-&gt;</operator><name>mdat_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_write_marker</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>AV_NOPTS_VALUE</name></expr></argument>, <argument><expr><name>AVIO_DATA_MARKER_FLUSH_POINT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_auto_flush_fragment</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>force</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MOVMuxContext</name> <modifier>*</modifier></type><name>mov</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>had_moov</name> <init>= <expr><name><name>mov</name><operator>-&gt;</operator><name>moov_written</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>mov_flush_fragment</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>force</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>had_moov</name> <operator>&amp;&amp;</operator> <name><name>mov</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FF_MOV_FLAG_DELAY_MOOV</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mov_flush_fragment</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>force</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>check_pkt</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MOVMuxContext</name> <modifier>*</modifier></type><name>mov</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MOVTrack</name> <modifier>*</modifier></type><name>trk</name> <init>= <expr><operator>&amp;</operator><name><name>mov</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name><name>pkt</name><operator>-&gt;</operator><name>stream_index</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>ref</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>duration</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>trk</name><operator>-&gt;</operator><name>entry</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ref</name> <operator>=</operator> <name><name>trk</name><operator>-&gt;</operator><name>cluster</name><index>[<expr><name><name>trk</name><operator>-&gt;</operator><name>entry</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>dts</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><name><name>trk</name><operator>-&gt;</operator><name>start_dts</name></name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name>

<operator>&amp;&amp;</operator> <operator>!</operator><name><name>trk</name><operator>-&gt;</operator><name>frag_discont</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ref</name> <operator>=</operator> <name><name>trk</name><operator>-&gt;</operator><name>start_dts</name></name> <operator>+</operator> <name><name>trk</name><operator>-&gt;</operator><name>track_duration</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>ref</name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>dts</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>trk</name><operator>-&gt;</operator><name>dts_shift</name></name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ref</name> <operator>-=</operator> <name><name>trk</name><operator>-&gt;</operator><name>dts_shift</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>duration</name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>dts</name></name> <operator>-</operator> <name>ref</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>dts</name></name> <operator>&lt;</operator> <name>ref</name> <operator>||</operator> <name>duration</name> <operator>&gt;=</operator> <name>INT_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Application provided duration: %"</literal><name>PRId64</name><literal type="string">" / timestamp: %"</literal><name>PRId64</name><literal type="string">" is out of range for mov/mp4 format\n"</literal></expr></argument>,

<argument><expr><name>duration</name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>dts</name></name></expr></argument>

)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>dts</name></name> <operator>=</operator> <name>ref</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name>AV_NOPTS_VALUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>duration</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>pkt</name><operator>-&gt;</operator><name>duration</name></name> <operator>&gt;</operator> <name>INT_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Application provided duration: %"</literal><name>PRId64</name><literal type="string">" is invalid\n"</literal></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>duration</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_mov_write_packet</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MOVMuxContext</name> <modifier>*</modifier></type><name>mov</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MOVTrack</name> <modifier>*</modifier></type><name>trk</name> <init>= <expr><operator>&amp;</operator><name><name>mov</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name><name>pkt</name><operator>-&gt;</operator><name>stream_index</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodecParameters</name> <modifier>*</modifier></type><name>par</name> <init>= <expr><name><name>trk</name><operator>-&gt;</operator><name>par</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVProducerReferenceTime</name> <modifier>*</modifier></type><name>prft</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>samples_in_chunk</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>, <decl><type ref="prev"/><name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>prft_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>reformatted_data</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>check_pkt</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mov</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FF_MOV_FLAG_FRAGMENT</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mov</name><operator>-&gt;</operator><name>moov_written</name></name> <operator>||</operator> <name><name>mov</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FF_MOV_FLAG_EMPTY_MOOV</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>mov</name><operator>-&gt;</operator><name>frag_interleave</name></name> <operator>&amp;&amp;</operator> <name><name>mov</name><operator>-&gt;</operator><name>fragments</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>trk</name><operator>-&gt;</operator><name>entry</name></name> <operator>-</operator> <name><name>trk</name><operator>-&gt;</operator><name>entries_flushed</name></name> <operator>&gt;=</operator> <name><name>mov</name><operator>-&gt;</operator><name>frag_interleave</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>mov_flush_fragment_interleaving</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>trk</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>trk</name><operator>-&gt;</operator><name>mdat_buf</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>avio_open_dyn_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>trk</name><operator>-&gt;</operator><name>mdat_buf</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pb</name> <operator>=</operator> <name><name>trk</name><operator>-&gt;</operator><name>mdat_buf</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>mov</name><operator>-&gt;</operator><name>mdat_buf</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>avio_open_dyn_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mov</name><operator>-&gt;</operator><name>mdat_buf</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pb</name> <operator>=</operator> <name><name>mov</name><operator>-&gt;</operator><name>mdat_buf</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_AMR_NB</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint16_t</name></type> <name><name>packed_size</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>=

<expr><block>{<expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>len</name> <operator>&lt;</operator> <name>size</name> <operator>&amp;&amp;</operator> <name>samples_in_chunk</name> <operator>&lt;</operator> <literal type="number">100</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>+=</operator> <name><name>packed_size</name><index>[<expr><operator>(</operator><name><name>pkt</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>len</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>samples_in_chunk</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>samples_in_chunk</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"fatal error, input is not a single packet, implement a AVParser for it\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_ADPCM_MS</name> <operator>||</operator>

<name><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_ADPCM_IMA_WAV</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>samples_in_chunk</name> <operator>=</operator> <name><name>trk</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>frame_size</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>trk</name><operator>-&gt;</operator><name>sample_size</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>samples_in_chunk</name> <operator>=</operator> <name>size</name> <operator>/</operator> <name><name>trk</name><operator>-&gt;</operator><name>sample_size</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>samples_in_chunk</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>samples_in_chunk</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"fatal error, input packet contains no samples\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>trk</name><operator>-&gt;</operator><name>vos_len</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>par</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<operator>!</operator><call><name>TAG_IS_AVCI</name><argument_list>(<argument><expr><name><name>trk</name><operator>-&gt;</operator><name>tag</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>!=</operator> <name>AV_CODEC_ID_DNXHD</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>trk</name><operator>-&gt;</operator><name>vos_len</name></name> <operator>=</operator> <name><name>par</name><operator>-&gt;</operator><name>extradata_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>trk</name><operator>-&gt;</operator><name>vos_data</name></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name><name>trk</name><operator>-&gt;</operator><name>vos_len</name></name> <operator>+</operator> <name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>trk</name><operator>-&gt;</operator><name>vos_data</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>err</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>trk</name><operator>-&gt;</operator><name>vos_data</name></name></expr></argument>, <argument><expr><name><name>par</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>, <argument><expr><name><name>trk</name><operator>-&gt;</operator><name>vos_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>trk</name><operator>-&gt;</operator><name>vos_data</name></name> <operator>+</operator> <name><name>trk</name><operator>-&gt;</operator><name>vos_len</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_AAC</name> <operator>&amp;&amp;</operator> <name><name>pkt</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator>

<operator>(</operator><call><name>AV_RB16</name><argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0xfff0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xfff0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name><name>pkt</name><operator>-&gt;</operator><name>stream_index</name></name></expr>]</index></name><operator>-&gt;</operator><name>nb_frames</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Malformed AAC bitstream detected: "</literal>

<literal type="string">"use the audio bitstream filter 'aac_adtstoasc' to fix it "</literal>

<literal type="string">"('-bsf:a aac_adtstoasc' option with ffmpeg)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"aac bitstream error\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_H264</name> <operator>&amp;&amp;</operator> <name><name>trk</name><operator>-&gt;</operator><name>vos_len</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>trk</name><operator>-&gt;</operator><name>vos_data</name></name> <operator>!=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>TAG_IS_AVCI</name><argument_list>(<argument><expr><name><name>trk</name><operator>-&gt;</operator><name>tag</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>trk</name><operator>-&gt;</operator><name>hint_track</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>trk</name><operator>-&gt;</operator><name>hint_track</name></name> <operator>&lt;</operator> <name><name>mov</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_avc_parse_nal_units_buf</name><argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>reformatted_data</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>reformatted_data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>trk</name><operator>-&gt;</operator><name>cenc</name><operator>.</operator><name>aes_ctr</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>ff_mov_cenc_avc_parse_nal_units</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>trk</name><operator>-&gt;</operator><name>cenc</name></name></expr></argument>, <argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

<goto>goto <name>err</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>ff_avc_parse_nal_units</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_HEVC</name> <operator>&amp;&amp;</operator> <name><name>trk</name><operator>-&gt;</operator><name>vos_len</name></name> <operator>&gt;</operator> <literal type="number">6</literal> <operator>&amp;&amp;</operator>

<operator>(</operator><call><name>AV_RB24</name><argument_list>(<argument><expr><name><name>trk</name><operator>-&gt;</operator><name>vos_data</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <call><name>AV_RB32</name><argument_list>(<argument><expr><name><name>trk</name><operator>-&gt;</operator><name>vos_data</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>trk</name><operator>-&gt;</operator><name>hint_track</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>trk</name><operator>-&gt;</operator><name>hint_track</name></name> <operator>&lt;</operator> <name><name>mov</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_hevc_annexb2mp4_buf</name><argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>reformatted_data</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>reformatted_data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>ff_hevc_annexb2mp4</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_AV1</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>trk</name><operator>-&gt;</operator><name>hint_track</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>trk</name><operator>-&gt;</operator><name>hint_track</name></name> <operator>&lt;</operator> <name><name>mov</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_av1_filter_obus_buf</name><argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>reformatted_data</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>reformatted_data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>ff_av1_filter_obus</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_AC3_PARSER</name></expr></cpp:if>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_EAC3</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>handle_eac3</name><argument_list>(<argument><expr><name>mov</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>trk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>size</name></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><name>size</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>trk</name><operator>-&gt;</operator><name>cenc</name><operator>.</operator><name>aes_ctr</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_H264</name> <operator>&amp;&amp;</operator> <name><name>par</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>&gt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>nal_size_length</name> <init>= <expr><operator>(</operator><name><name>par</name><operator>-&gt;</operator><name>extradata</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_mov_cenc_avc_write_nal_units</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>trk</name><operator>-&gt;</operator><name>cenc</name></name></expr></argument>, <argument><expr><name>nal_size_length</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_mov_cenc_write_packet</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>trk</name><operator>-&gt;</operator><name>cenc</name></name></expr></argument>, <argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>err</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_DNXHD</name> <operator>||</operator>

<name><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_TRUEHD</name> <operator>||</operator>

<name><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_AC3</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>trk</name><operator>-&gt;</operator><name>vos_len</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>trk</name><operator>-&gt;</operator><name>vos_len</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>trk</name><operator>-&gt;</operator><name>vos_data</name></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name>size</name> <operator>+</operator> <name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>trk</name><operator>-&gt;</operator><name>vos_data</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>err</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>trk</name><operator>-&gt;</operator><name>vos_data</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>trk</name><operator>-&gt;</operator><name>vos_data</name></name> <operator>+</operator> <name>size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>trk</name><operator>-&gt;</operator><name>entry</name></name> <operator>&gt;=</operator> <name><name>trk</name><operator>-&gt;</operator><name>cluster_capacity</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>new_capacity</name> <init>= <expr><name><name>trk</name><operator>-&gt;</operator><name>entry</name></name> <operator>+</operator> <name>MOV_INDEX_CLUSTER_SIZE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_reallocp_array</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>trk</name><operator>-&gt;</operator><name>cluster</name></name></expr></argument>, <argument><expr><name>new_capacity</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>trk</name><operator>-&gt;</operator><name>cluster</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>err</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>trk</name><operator>-&gt;</operator><name>cluster_capacity</name></name> <operator>=</operator> <name>new_capacity</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>trk</name><operator>-&gt;</operator><name>cluster</name><index>[<expr><name><name>trk</name><operator>-&gt;</operator><name>entry</name></name></expr>]</index></name><operator>.</operator><name>pos</name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>trk</name><operator>-&gt;</operator><name>cluster</name><index>[<expr><name><name>trk</name><operator>-&gt;</operator><name>entry</name></name></expr>]</index></name><operator>.</operator><name>samples_in_chunk</name> <operator>=</operator> <name>samples_in_chunk</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>trk</name><operator>-&gt;</operator><name>cluster</name><index>[<expr><name><name>trk</name><operator>-&gt;</operator><name>entry</name></name></expr>]</index></name><operator>.</operator><name>chunkNum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>trk</name><operator>-&gt;</operator><name>cluster</name><index>[<expr><name><name>trk</name><operator>-&gt;</operator><name>entry</name></name></expr>]</index></name><operator>.</operator><name>size</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>trk</name><operator>-&gt;</operator><name>cluster</name><index>[<expr><name><name>trk</name><operator>-&gt;</operator><name>entry</name></name></expr>]</index></name><operator>.</operator><name>entries</name> <operator>=</operator> <name>samples_in_chunk</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>trk</name><operator>-&gt;</operator><name>cluster</name><index>[<expr><name><name>trk</name><operator>-&gt;</operator><name>entry</name></name></expr>]</index></name><operator>.</operator><name>dts</name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>dts</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>trk</name><operator>-&gt;</operator><name>cluster</name><index>[<expr><name><name>trk</name><operator>-&gt;</operator><name>entry</name></name></expr>]</index></name><operator>.</operator><name>pts</name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>trk</name><operator>-&gt;</operator><name>entry</name></name> <operator>&amp;&amp;</operator> <name><name>trk</name><operator>-&gt;</operator><name>start_dts</name></name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>trk</name><operator>-&gt;</operator><name>frag_discont</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>trk</name><operator>-&gt;</operator><name>cluster</name><index>[<expr><name><name>trk</name><operator>-&gt;</operator><name>entry</name></name></expr>]</index></name><operator>.</operator><name>dts</name> <operator>=</operator> <name><name>trk</name><operator>-&gt;</operator><name>start_dts</name></name> <operator>+</operator> <name><name>trk</name><operator>-&gt;</operator><name>track_duration</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>mov</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FF_MOV_FLAG_DASH</name> <operator>&amp;&amp;</operator>

<operator>!</operator><operator>(</operator><name><name>mov</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>FF_MOV_FLAG_GLOBAL_SIDX</name> <operator>|</operator> <name>FF_MOV_FLAG_SKIP_SIDX</name><operator>)</operator><operator>)</operator><operator>)</operator> <operator>||</operator>

<name><name>mov</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>MODE_ISM</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>dts</name></name> <operator>+</operator> <name><name>trk</name><operator>-&gt;</operator><name>end_pts</name></name> <operator>-</operator> <name><name>trk</name><operator>-&gt;</operator><name>cluster</name><index>[<expr><name><name>trk</name><operator>-&gt;</operator><name>entry</name></name></expr>]</index></name><operator>.</operator><name>dts</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>trk</name><operator>-&gt;</operator><name>frag_start</name></name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>dts</name></name> <operator>-</operator> <name><name>trk</name><operator>-&gt;</operator><name>start_dts</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>trk</name><operator>-&gt;</operator><name>end_pts</name></name> <operator>=</operator> <name>AV_NOPTS_VALUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>trk</name><operator>-&gt;</operator><name>frag_discont</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>trk</name><operator>-&gt;</operator><name>entry</name></name> <operator>&amp;&amp;</operator> <name><name>trk</name><operator>-&gt;</operator><name>start_dts</name></name> <operator>==</operator> <name>AV_NOPTS_VALUE</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>mov</name><operator>-&gt;</operator><name>use_editlist</name></name> <operator>&amp;&amp;</operator>

<name><name>s</name><operator>-&gt;</operator><name>avoid_negative_ts</name></name> <operator>==</operator> <name>AVFMT_AVOID_NEG_TS_MAKE_ZERO</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>trk</name><operator>-&gt;</operator><name>cluster</name><index>[<expr><name><name>trk</name><operator>-&gt;</operator><name>entry</name></name></expr>]</index></name><operator>.</operator><name>dts</name> <operator>=</operator> <name><name>trk</name><operator>-&gt;</operator><name>start_dts</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>trk</name><operator>-&gt;</operator><name>start_dts</name></name> <operator>==</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>trk</name><operator>-&gt;</operator><name>start_dts</name></name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>dts</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>trk</name><operator>-&gt;</operator><name>frag_discont</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>mov</name><operator>-&gt;</operator><name>use_editlist</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>trk</name><operator>-&gt;</operator><name>frag_start</name></name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>trk</name><operator>-&gt;</operator><name>start_dts</name></name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>dts</name></name> <operator>-</operator> <name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>trk</name><operator>-&gt;</operator><name>frag_start</name></name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>dts</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>trk</name><operator>-&gt;</operator><name>start_dts</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>trk</name><operator>-&gt;</operator><name>frag_discont</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>dts</name></name> <operator>&amp;&amp;</operator> <name><name>mov</name><operator>-&gt;</operator><name>moov_written</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,

<argument><expr><literal type="string">"Track %d starts with a nonzero dts %"</literal><name>PRId64</name><literal type="string">", while the moov "</literal>

<literal type="string">"already has been written. Set the delay_moov flag to handle "</literal>

<literal type="string">"this case.\n"</literal></expr></argument>,

<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>stream_index</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>dts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>trk</name><operator>-&gt;</operator><name>track_duration</name></name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>dts</name></name> <operator>-</operator> <name><name>trk</name><operator>-&gt;</operator><name>start_dts</name></name> <operator>+</operator> <name><name>pkt</name><operator>-&gt;</operator><name>duration</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>trk</name><operator>-&gt;</operator><name>last_sample_is_subtitle_end</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name> <operator>==</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"pts has no value\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>dts</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>dts</name></name> <operator>!=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>trk</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>MOV_TRACK_CTTS</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>trk</name><operator>-&gt;</operator><name>cluster</name><index>[<expr><name><name>trk</name><operator>-&gt;</operator><name>entry</name></name></expr>]</index></name><operator>.</operator><name>cts</name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name> <operator>-</operator> <name><name>pkt</name><operator>-&gt;</operator><name>dts</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>trk</name><operator>-&gt;</operator><name>cluster</name><index>[<expr><name><name>trk</name><operator>-&gt;</operator><name>entry</name></name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>trk</name><operator>-&gt;</operator><name>start_cts</name></name> <operator>==</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>trk</name><operator>-&gt;</operator><name>start_cts</name></name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name> <operator>-</operator> <name><name>pkt</name><operator>-&gt;</operator><name>dts</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>trk</name><operator>-&gt;</operator><name>end_pts</name></name> <operator>==</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>trk</name><operator>-&gt;</operator><name>end_pts</name></name> <operator>=</operator> <name><name>trk</name><operator>-&gt;</operator><name>cluster</name><index>[<expr><name><name>trk</name><operator>-&gt;</operator><name>entry</name></name></expr>]</index></name><operator>.</operator><name>dts</name> <operator>+</operator>

<name><name>trk</name><operator>-&gt;</operator><name>cluster</name><index>[<expr><name><name>trk</name><operator>-&gt;</operator><name>entry</name></name></expr>]</index></name><operator>.</operator><name>cts</name> <operator>+</operator> <name><name>pkt</name><operator>-&gt;</operator><name>duration</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>trk</name><operator>-&gt;</operator><name>end_pts</name></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>trk</name><operator>-&gt;</operator><name>end_pts</name></name></expr></argument>, <argument><expr><name><name>trk</name><operator>-&gt;</operator><name>cluster</name><index>[<expr><name><name>trk</name><operator>-&gt;</operator><name>entry</name></name></expr>]</index></name><operator>.</operator><name>dts</name> <operator>+</operator>

<name><name>trk</name><operator>-&gt;</operator><name>cluster</name><index>[<expr><name><name>trk</name><operator>-&gt;</operator><name>entry</name></name></expr>]</index></name><operator>.</operator><name>cts</name> <operator>+</operator>

<name><name>pkt</name><operator>-&gt;</operator><name>duration</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_VC1</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>mov_parse_vc1_frame</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>trk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_TRUEHD</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>mov_parse_truehd_frame</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>trk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PKT_FLAG_KEY</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>mov</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>MODE_MOV</name> <operator>&amp;&amp;</operator> <name><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_MPEG2VIDEO</name> <operator>&amp;&amp;</operator>

<name><name>trk</name><operator>-&gt;</operator><name>entry</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>mov_parse_mpeg2_frame</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>trk</name><operator>-&gt;</operator><name>cluster</name><index>[<expr><name><name>trk</name><operator>-&gt;</operator><name>entry</name></name></expr>]</index></name><operator>.</operator><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>trk</name><operator>-&gt;</operator><name>cluster</name><index>[<expr><name><name>trk</name><operator>-&gt;</operator><name>entry</name></name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>&amp;</operator> <name>MOV_PARTIAL_SYNC_SAMPLE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>trk</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>MOV_TRACK_STPS</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>trk</name><operator>-&gt;</operator><name>cluster</name><index>[<expr><name><name>trk</name><operator>-&gt;</operator><name>entry</name></name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>=</operator> <name>MOV_SYNC_SAMPLE</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>trk</name><operator>-&gt;</operator><name>cluster</name><index>[<expr><name><name>trk</name><operator>-&gt;</operator><name>entry</name></name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>&amp;</operator> <name>MOV_SYNC_SAMPLE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>trk</name><operator>-&gt;</operator><name>has_keyframes</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PKT_FLAG_DISPOSABLE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>trk</name><operator>-&gt;</operator><name>cluster</name><index>[<expr><name><name>trk</name><operator>-&gt;</operator><name>entry</name></name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>|=</operator> <name>MOV_DISPOSABLE_SAMPLE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>trk</name><operator>-&gt;</operator><name>has_disposable</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>prft</name> <operator>=</operator> <operator>(</operator><name>AVProducerReferenceTime</name> <operator>*</operator><operator>)</operator><call><name>av_packet_get_side_data</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>AV_PKT_DATA_PRFT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>prft_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>prft</name> <operator>&amp;&amp;</operator> <name>prft_size</name> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>AVProducerReferenceTime</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>trk</name><operator>-&gt;</operator><name>cluster</name><index>[<expr><name><name>trk</name><operator>-&gt;</operator><name>entry</name></name></expr>]</index></name><operator>.</operator><name>prft</name></expr></argument>, <argument><expr><name>prft</name></expr></argument>, <argument><expr><name>prft_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>trk</name><operator>-&gt;</operator><name>cluster</name><index>[<expr><name><name>trk</name><operator>-&gt;</operator><name>entry</name></name></expr>]</index></name><operator>.</operator><name>prft</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>AVProducerReferenceTime</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>trk</name><operator>-&gt;</operator><name>entry</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>trk</name><operator>-&gt;</operator><name>sample_count</name></name> <operator>+=</operator> <name>samples_in_chunk</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mov</name><operator>-&gt;</operator><name>mdat_size</name></name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>trk</name><operator>-&gt;</operator><name>hint_track</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>trk</name><operator>-&gt;</operator><name>hint_track</name></name> <operator>&lt;</operator> <name><name>mov</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_mov_add_hinted_packet</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><name><name>trk</name><operator>-&gt;</operator><name>hint_track</name></name></expr></argument>, <argument><expr><name><name>trk</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>,

<argument><expr><ternary><condition><expr><name>reformatted_data</name></expr> ?</condition><then> <expr><name>reformatted_data</name> <operator>+</operator> <name>offset</name></expr>

</then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<label><name>end</name>:</label>

<label><name>err</name>:</label>

<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name> <operator>!=</operator> <name>reformatted_data</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>reformatted_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_write_single_packet</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MOVMuxContext</name> <modifier>*</modifier></type><name>mov</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MOVTrack</name> <modifier>*</modifier></type><name>trk</name> <init>= <expr><operator>&amp;</operator><name><name>mov</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name><name>pkt</name><operator>-&gt;</operator><name>stream_index</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodecParameters</name> <modifier>*</modifier></type><name>par</name> <init>= <expr><name><name>trk</name><operator>-&gt;</operator><name>par</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>frag_duration</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>check_pkt</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mov</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FF_MOV_FLAG_FRAG_DISCONT</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>mov</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>frag_discont</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>mov</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>FF_MOV_FLAG_FRAG_DISCONT</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mov</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FF_MOV_FLAG_NEGATIVE_CTS_OFFSETS</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>trk</name><operator>-&gt;</operator><name>dts_shift</name></name> <operator>==</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>trk</name><operator>-&gt;</operator><name>dts_shift</name></name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name> <operator>-</operator> <name><name>pkt</name><operator>-&gt;</operator><name>dts</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>dts</name></name> <operator>+=</operator> <name><name>trk</name><operator>-&gt;</operator><name>dts_shift</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>trk</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_MP4ALS</name> <operator>||</operator>

<name><name>trk</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_AAC</name> <operator>||</operator>

<name><name>trk</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_AV1</name> <operator>||</operator>

<name><name>trk</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_FLAC</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>side_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>side</name> <init>= <expr><call><name>av_packet_get_side_data</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>AV_PKT_DATA_NEW_EXTRADATA</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>side_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>side</name> <operator>&amp;&amp;</operator> <name>side_size</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>side_size</name> <operator>!=</operator> <name><name>par</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>||</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name>side</name></expr></argument>, <argument><expr><name><name>par</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>, <argument><expr><name>side_size</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>newextra</name> <init>= <expr><call><name>av_mallocz</name><argument_list>(<argument><expr><name>side_size</name> <operator>+</operator> <name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>newextra</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name><name>par</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par</name><operator>-&gt;</operator><name>extradata</name></name> <operator>=</operator> <name>newextra</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>par</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>, <argument><expr><name>side</name></expr></argument>, <argument><expr><name>side_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>=</operator> <name>side_size</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name><name>mov</name><operator>-&gt;</operator><name>need_rewrite_extradata</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>trk</name><operator>-&gt;</operator><name>start_dts</name></name> <operator>==</operator> <name>AV_NOPTS_VALUE</name> <operator>&amp;&amp;</operator> <name><name>trk</name><operator>-&gt;</operator><name>frag_discont</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>trk</name><operator>-&gt;</operator><name>start_dts</name></name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>dts</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>trk</name><operator>-&gt;</operator><name>start_cts</name></name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name> <operator>-</operator> <name><name>pkt</name><operator>-&gt;</operator><name>dts</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>trk</name><operator>-&gt;</operator><name>start_cts</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>trk</name><operator>-&gt;</operator><name>entry</name></name> <operator>&amp;&amp;</operator> <name><name>pkt</name><operator>-&gt;</operator><name>stream_index</name></name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>frag_duration</name> <operator>=</operator> <call><name>av_rescale_q</name><argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>dts</name></name> <operator>-</operator> <name><name>trk</name><operator>-&gt;</operator><name>cluster</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>dts</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name><name>pkt</name><operator>-&gt;</operator><name>stream_index</name></name></expr>]</index></name><operator>-&gt;</operator><name>time_base</name></expr></argument>,

<argument><expr><name>AV_TIME_BASE_Q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>mov</name><operator>-&gt;</operator><name>max_fragment_duration</name></name> <operator>&amp;&amp;</operator>

<name>frag_duration</name> <operator>&gt;=</operator> <name><name>mov</name><operator>-&gt;</operator><name>max_fragment_duration</name></name><operator>)</operator> <operator>||</operator>

<operator>(</operator><name><name>mov</name><operator>-&gt;</operator><name>max_fragment_size</name></name> <operator>&amp;&amp;</operator> <name><name>mov</name><operator>-&gt;</operator><name>mdat_size</name></name> <operator>+</operator> <name>size</name> <operator>&gt;=</operator> <name><name>mov</name><operator>-&gt;</operator><name>max_fragment_size</name></name><operator>)</operator> <operator>||</operator>

<operator>(</operator><name><name>mov</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FF_MOV_FLAG_FRAG_KEYFRAME</name> <operator>&amp;&amp;</operator>

<name><name>par</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_VIDEO</name> <operator>&amp;&amp;</operator>

<name><name>trk</name><operator>-&gt;</operator><name>entry</name></name> <operator>&amp;&amp;</operator> <name><name>pkt</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PKT_FLAG_KEY</name><operator>)</operator> <operator>||</operator>

<operator>(</operator><name><name>mov</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FF_MOV_FLAG_FRAG_EVERY_FRAME</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>frag_duration</name> <operator>&gt;=</operator> <name><name>mov</name><operator>-&gt;</operator><name>min_fragment_duration</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>trk</name><operator>-&gt;</operator><name>track_duration</name></name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>dts</name></name> <operator>-</operator> <name><name>trk</name><operator>-&gt;</operator><name>start_dts</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>trk</name><operator>-&gt;</operator><name>end_pts</name></name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>trk</name><operator>-&gt;</operator><name>end_pts</name></name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>dts</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>trk</name><operator>-&gt;</operator><name>end_reliable</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mov_auto_flush_fragment</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>ff_mov_write_packet</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_write_subtitle_end_packet</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>stream_index</name></decl></parameter>,

<parameter><decl><type><name>int64_t</name></type> <name>dts</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>AVPacket</name></type> <name>end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_init_packet</name><argument_list>(<argument><expr><operator>&amp;</operator><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>end</name><operator>.</operator><name>size</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>end</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>end</name><operator>.</operator><name>pts</name></name> <operator>=</operator> <name>dts</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>end</name><operator>.</operator><name>dts</name></name> <operator>=</operator> <name>dts</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>end</name><operator>.</operator><name>duration</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>end</name><operator>.</operator><name>stream_index</name></name> <operator>=</operator> <name>stream_index</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mov_write_single_packet</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_write_packet</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MOVMuxContext</name> <modifier>*</modifier></type><name>mov</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MOVTrack</name> <modifier>*</modifier></type><name>trk</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pkt</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>mov_flush_fragment</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>trk</name> <operator>=</operator> <operator>&amp;</operator><name><name>mov</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name><name>pkt</name><operator>-&gt;</operator><name>stream_index</name></name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>is_cover_image</name><argument_list>(<argument><expr><name><name>trk</name><operator>-&gt;</operator><name>st</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>trk</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>nb_frames</name></name> <operator>&gt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>trk</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>nb_frames</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Got more than one picture in stream %d,"</literal>

<literal type="string">" ignoring.\n"</literal></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>stream_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_packet_ref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>trk</name><operator>-&gt;</operator><name>cover_image</name></name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>mov_write_single_packet</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt> 

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>mov</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>MOVTrack</name> <modifier>*</modifier></type><name>trk</name> <init>= <expr><operator>&amp;</operator><name><name>mov</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>trk</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_MOV_TEXT</name> <operator>&amp;&amp;</operator>

<name><name>trk</name><operator>-&gt;</operator><name>track_duration</name></name> <operator>&lt;</operator> <name><name>pkt</name><operator>-&gt;</operator><name>dts</name></name> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>trk</name><operator>-&gt;</operator><name>entry</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>!</operator><name><name>trk</name><operator>-&gt;</operator><name>last_sample_is_subtitle_end</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mov_write_subtitle_end_packet</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>trk</name><operator>-&gt;</operator><name>track_duration</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>trk</name><operator>-&gt;</operator><name>last_sample_is_subtitle_end</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>trk</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>MODE_MOV</name> <operator>&amp;&amp;</operator> <name><name>trk</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>opkt</name> <init>= <expr><name>pkt</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>reshuffle_ret</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>trk</name><operator>-&gt;</operator><name>is_unaligned_qt_rgb</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>bpc</name> <init>= <expr><ternary><condition><expr><name><name>trk</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>bits_per_coded_sample</name></name> <operator>!=</operator> <literal type="number">15</literal></expr> ?</condition><then> <expr><name><name>trk</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>bits_per_coded_sample</name></name></expr> </then><else>: <expr><literal type="number">16</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>expected_stride</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>trk</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <name>bpc</name> <operator>+</operator> <literal type="number">15</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator><operator>*</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>reshuffle_ret</name> <operator>=</operator> <call><name>ff_reshuffle_raw_rgb</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>, <argument><expr><name><name>trk</name><operator>-&gt;</operator><name>par</name></name></expr></argument>, <argument><expr><name>expected_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>reshuffle_ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>reshuffle_ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>reshuffle_ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>trk</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>AV_PIX_FMT_PAL8</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>trk</name><operator>-&gt;</operator><name>pal_done</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_get_packet_palette</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>opkt</name></expr></argument>, <argument><expr><name>reshuffle_ret</name></expr></argument>, <argument><expr><name><name>trk</name><operator>-&gt;</operator><name>palette</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>trk</name><operator>-&gt;</operator><name>pal_done</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>trk</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_RAWVIDEO</name> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>trk</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>AV_PIX_FMT_GRAY8</name> <operator>||</operator>

<name><name>trk</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>AV_PIX_FMT_MONOBLACK</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>~</operator><name><name>pkt</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>reshuffle_ret</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mov_write_single_packet</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>fail</name>:</label>

<if_stmt><if>if <condition>(<expr><name>reshuffle_ret</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_packet_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>mov_write_single_packet</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_create_chapter_track</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tracknum</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MOVMuxContext</name> <modifier>*</modifier></type><name>mov</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MOVTrack</name> <modifier>*</modifier></type><name>track</name> <init>= <expr><operator>&amp;</operator><name><name>mov</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name>tracknum</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVPacket</name></type> <name>pkt</name> <init>= <expr><block>{ <expr><operator>.</operator><name>stream_index</name> <operator>=</operator> <name>tracknum</name></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>AV_PKT_FLAG_KEY</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name><name>mov</name><operator>-&gt;</operator><name>mode</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>tag</name></name> <operator>=</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'t'</literal></expr></argument>,<argument><expr><literal type="char">'e'</literal></expr></argument>,<argument><expr><literal type="char">'x'</literal></expr></argument>,<argument><expr><literal type="char">'t'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>timescale</name></name> <operator>=</operator> <name>MOV_TIMESCALE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>par</name></name> <operator>=</operator> <call><name>avcodec_parameters_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>track</name><operator>-&gt;</operator><name>par</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>=</operator> <name>AVMEDIA_TYPE_SUBTITLE</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

uint8_t chapter_properties[43] = { 0, 0, 0, 0, 0, 0, 0, 1, };

if (ff_alloc_extradata(track-&gt;par, sizeof(chapter_properties)))

return AVERROR(ENOMEM);

memcpy(track-&gt;par-&gt;extradata, chapter_properties, sizeof(chapter_properties));

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if <condition>(<expr><call><name>avio_open_dyn_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x01</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x01</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x0D</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"ftab"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x01</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x01</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>size</name> <operator>=</operator> <call><name>avio_close_dyn_buf</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>extradata</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_chapters</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>AVChapter</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>chapters</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVDictionaryEntry</name> <modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>end</name> <init>= <macro><name>av_rescale_q</name><argument_list>(<argument>c-&gt;end</argument>, <argument>c-&gt;time_base</argument>, <argument>(AVRational){<literal type="number">1</literal></argument>,<argument>MOV_TIMESCALE}</argument>)</argument_list></macro></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>.</operator><name>pts</name></name> <operator>=</operator> <name><name>pkt</name><operator>.</operator><name>dts</name></name> <operator>=</operator> <macro><name>av_rescale_q</name><argument_list>(<argument>c-&gt;start</argument>, <argument>c-&gt;time_base</argument>, <argument>(AVRational){<literal type="number">1</literal></argument>,<argument>MOV_TIMESCALE}</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>.</operator><name>duration</name></name> <operator>=</operator> <name>end</name> <operator>-</operator> <name><name>pkt</name><operator>.</operator><name>dts</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>t</name> <operator>=</operator> <call><name>av_dict_get</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><literal type="string">"title"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>encd</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x0C</literal></expr>,

<expr><literal type="char">'e'</literal></expr>, <expr><literal type="char">'n'</literal></expr>, <expr><literal type="char">'c'</literal></expr>, <expr><literal type="char">'d'</literal></expr>,

<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>.</operator><name>size</name></name> <operator>=</operator> <name>len</name> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">12</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>.</operator><name>data</name></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name><name>pkt</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pkt</name><operator>.</operator><name>data</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>AV_WB16</name><argument_list>(<argument><expr><name><name>pkt</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pkt</name><operator>.</operator><name>data</name></name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pkt</name><operator>.</operator><name>data</name></name> <operator>+</operator> <name>len</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>encd</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>encd</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_mov_write_packet</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pkt</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_check_timecode_track</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVTimecode</name> <modifier>*</modifier></type><name>tc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tcstr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_timecode_init_from_string</name><argument_list>(<argument><expr><name>tc</name></expr></argument>, <argument><expr><call><name>find_fps</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>src_index</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tcstr</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_create_timecode_track</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_index</name></decl></parameter>, <parameter><decl><type><name>AVTimecode</name></type> <name>tc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MOVMuxContext</name> <modifier>*</modifier></type><name>mov</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MOVTrack</name> <modifier>*</modifier></type><name>track</name> <init>= <expr><operator>&amp;</operator><name><name>mov</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name>index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>src_st</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>src_index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVPacket</name></type> <name>pkt</name> <init>= <expr><block>{<expr><operator>.</operator><name>stream_index</name> <operator>=</operator> <name>index</name></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>AV_PKT_FLAG_KEY</name></expr>, <expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">4</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVRational</name></type> <name>rate</name> <init>= <expr><call><name>find_fps</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>src_st</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name><name>mov</name><operator>-&gt;</operator><name>mode</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>tag</name></name> <operator>=</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'t'</literal></expr></argument>,<argument><expr><literal type="char">'m'</literal></expr></argument>,<argument><expr><literal type="char">'c'</literal></expr></argument>,<argument><expr><literal type="char">'d'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>src_track</name></name> <operator>=</operator> <name>src_index</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>timescale</name></name> <operator>=</operator> <name><name>mov</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name>src_index</name></expr>]</index></name><operator>.</operator><name>timescale</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tc</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_TIMECODE_FLAG_DROPFRAME</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>timecode_flags</name></name> <operator>|=</operator> <name>MOV_TIMECODE_FLAG_DROPFRAME</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>st</name></name> <operator>=</operator> <name>src_st</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>par</name></name> <operator>=</operator> <call><name>avcodec_parameters_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>track</name><operator>-&gt;</operator><name>par</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>=</operator> <name>AVMEDIA_TYPE_DATA</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_tag</name></name> <operator>=</operator> <name><name>track</name><operator>-&gt;</operator><name>tag</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>avg_frame_rate</name></name> <operator>=</operator> <call><name>av_inv_q</name><argument_list>(<argument><expr><name>rate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>.</operator><name>data</name></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name><name>pkt</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pkt</name><operator>.</operator><name>data</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>AV_WB32</name><argument_list>(<argument><expr><name><name>pkt</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>tc</name><operator>.</operator><name>start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_mov_write_packet</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name><name>pkt</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>enable_tracks</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MOVMuxContext</name> <modifier>*</modifier></type><name>mov</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>enabled</name><index>[<expr><name>AVMEDIA_TYPE_NB</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>first</name><index>[<expr><name>AVMEDIA_TYPE_NB</name></expr>]</index></name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>AVMEDIA_TYPE_NB</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>enabled</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>first</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>&lt;=</operator> <name>AVMEDIA_TYPE_UNKNOWN</name> <operator>||</operator>

<name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>&gt;=</operator> <name>AVMEDIA_TYPE_NB</name> <operator>||</operator>

<call><name>is_cover_image</name><argument_list>(<argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>first</name><index>[<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>first</name><index>[<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>disposition</name></name> <operator>&amp;</operator> <name>AV_DISPOSITION_DEFAULT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>mov</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>|=</operator> <name>MOV_TRACK_ENABLED</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>enabled</name><index>[<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>AVMEDIA_TYPE_NB</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<switch>switch <condition>(<expr><name>i</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AVMEDIA_TYPE_VIDEO</name></expr>:</case>

<case>case <expr><name>AVMEDIA_TYPE_AUDIO</name></expr>:</case>

<case>case <expr><name>AVMEDIA_TYPE_SUBTITLE</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>enabled</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>mov</name><operator>-&gt;</operator><name>per_stream_grouping</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>enabled</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>first</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>mov</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name><name>first</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>|=</operator> <name>MOV_TRACK_ENABLED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mov_free</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MOVMuxContext</name> <modifier>*</modifier></type><name>mov</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mov</name><operator>-&gt;</operator><name>chapter_track</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>mov</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name><name>mov</name><operator>-&gt;</operator><name>chapter_track</name></name></expr>]</index></name><operator>.</operator><name>par</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mov</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name><name>mov</name><operator>-&gt;</operator><name>chapter_track</name></name></expr>]</index></name><operator>.</operator><name><name>par</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mov</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name><name>mov</name><operator>-&gt;</operator><name>chapter_track</name></name></expr>]</index></name><operator>.</operator><name>par</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>mov</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>mov</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>tag</name> <operator>==</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'r'</literal></expr></argument>,<argument><expr><literal type="char">'t'</literal></expr></argument>,<argument><expr><literal type="char">'p'</literal></expr></argument>,<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_mov_close_hinting</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mov</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>mov</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>tag</name> <operator>==</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'t'</literal></expr></argument>,<argument><expr><literal type="char">'m'</literal></expr></argument>,<argument><expr><literal type="char">'c'</literal></expr></argument>,<argument><expr><literal type="char">'d'</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>mov</name><operator>-&gt;</operator><name>nb_meta_tmcd</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mov</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>par</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mov</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>cluster</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mov</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>frag_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mov</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>cover_image</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mov</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>eac3_priv</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>eac3_info</name></name> <modifier>*</modifier></type><name>info</name> <init>= <expr><name><name>mov</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>eac3_priv</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>pkt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mov</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>eac3_priv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mov</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>vos_len</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mov</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>vos_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ff_mov_cenc_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mov</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>cenc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mov</name><operator>-&gt;</operator><name>tracks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>rgb_to_yuv</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>rgb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>g</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>, <decl><type ref="prev"/><name>cb</name></decl>, <decl><type ref="prev"/><name>cr</name></decl>;</decl_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><name>rgb</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>g</name> <operator>=</operator> <operator>(</operator><name>rgb</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator><name>rgb</name> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><operator>(</operator> <literal type="number">16000</literal> <operator>+</operator> <literal type="number">257</literal> <operator>*</operator> <name>r</name> <operator>+</operator> <literal type="number">504</literal> <operator>*</operator> <name>g</name> <operator>+</operator> <literal type="number">98</literal> <operator>*</operator> <name>b</name><operator>)</operator><operator>/</operator><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cb</name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><operator>(</operator><literal type="number">128000</literal> <operator>-</operator> <literal type="number">148</literal> <operator>*</operator> <name>r</name> <operator>-</operator> <literal type="number">291</literal> <operator>*</operator> <name>g</name> <operator>+</operator> <literal type="number">439</literal> <operator>*</operator> <name>b</name><operator>)</operator><operator>/</operator><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cr</name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><operator>(</operator><literal type="number">128000</literal> <operator>+</operator> <literal type="number">439</literal> <operator>*</operator> <name>r</name> <operator>-</operator> <literal type="number">368</literal> <operator>*</operator> <name>g</name> <operator>-</operator> <literal type="number">71</literal> <operator>*</operator> <name>b</name><operator>)</operator><operator>/</operator><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>y</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>cr</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name>cb</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_create_dvd_sub_decoder_specific_info</name><parameter_list>(<parameter><decl><type><name>MOVTrack</name> <modifier>*</modifier></type><name>track</name></decl></parameter>,

<parameter><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>width</name> <init>= <expr><literal type="number">720</literal></expr></init></decl>, <decl><type ref="prev"/><name>height</name> <init>= <expr><literal type="number">480</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>have_palette</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>have_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>palette</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>extradata</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>cur</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>cur</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><literal type="string">"palette:"</literal></expr></argument>, <argument><expr><name>cur</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>count</name></decl>;</decl_stmt>

<expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>sscanf</name><argument_list>(<argument><expr><name>cur</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>,

<argument><expr><literal type="string">"%06"</literal><name>PRIx32</name><literal type="string">", %06"</literal><name>PRIx32</name><literal type="string">", %06"</literal><name>PRIx32</name><literal type="string">", %06"</literal><name>PRIx32</name><literal type="string">", "</literal>

<literal type="string">"%06"</literal><name>PRIx32</name><literal type="string">", %06"</literal><name>PRIx32</name><literal type="string">", %06"</literal><name>PRIx32</name><literal type="string">", %06"</literal><name>PRIx32</name><literal type="string">", "</literal>

<literal type="string">"%06"</literal><name>PRIx32</name><literal type="string">", %06"</literal><name>PRIx32</name><literal type="string">", %06"</literal><name>PRIx32</name><literal type="string">", %06"</literal><name>PRIx32</name><literal type="string">", "</literal>

<literal type="string">"%06"</literal><name>PRIx32</name><literal type="string">", %06"</literal><name>PRIx32</name><literal type="string">", %06"</literal><name>PRIx32</name><literal type="string">", %06"</literal><name>PRIx32</name><literal type="string">""</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>palette</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>palette</name><index>[ <expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>palette</name><index>[ <expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>palette</name><index>[ <expr><literal type="number">3</literal></expr>]</index></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>palette</name><index>[ <expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>palette</name><index>[ <expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>palette</name><index>[ <expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>palette</name><index>[ <expr><literal type="number">7</literal></expr>]</index></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>palette</name><index>[ <expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>palette</name><index>[ <expr><literal type="number">9</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>palette</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>palette</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>palette</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>palette</name><index>[<expr><literal type="number">13</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>palette</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>palette</name><index>[<expr><literal type="number">15</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>palette</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>rgb_to_yuv</name><argument_list>(<argument><expr><name><name>palette</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>have_palette</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><literal type="string">"size:"</literal></expr></argument>, <argument><expr><name>cur</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>sscanf</name><argument_list>(<argument><expr><name>cur</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><literal type="string">"%dx%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>width</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>have_size</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>have_palette</name> <operator>&amp;&amp;</operator> <name>have_size</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>cur</name> <operator>+=</operator> <call><name>strcspn</name><argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><literal type="string">"\n\r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cur</name> <operator>+=</operator> <call><name>strspn</name><argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><literal type="string">"\n\r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>have_palette</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>vos_data</name></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><literal type="number">16</literal><operator>*</operator><literal type="number">4</literal> <operator>+</operator> <name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>track</name><operator>-&gt;</operator><name>vos_data</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>AV_WB32</name><argument_list>(<argument><expr><name><name>track</name><operator>-&gt;</operator><name>vos_data</name></name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name><name>palette</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>track</name><operator>-&gt;</operator><name>vos_data</name></name> <operator>+</operator> <literal type="number">16</literal><operator>*</operator><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>vos_len</name></name> <operator>=</operator> <literal type="number">16</literal> <operator>*</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name>width</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>track</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name>height</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_init</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MOVMuxContext</name> <modifier>*</modifier></type><name>mov</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVDictionaryEntry</name> <modifier>*</modifier></type><name>global_tcr</name> <init>= <expr><call><name>av_dict_get</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><literal type="string">"timecode"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>mov</name><operator>-&gt;</operator><name>fc</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mov</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name>MODE_MP4</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>oformat</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"3gp"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>oformat</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>mov</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name>MODE_3GP</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"3g2"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>oformat</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>mov</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name>MODE_3GP</name><operator>|</operator><name>MODE_3G2</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"mov"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>oformat</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>mov</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name>MODE_MOV</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"psp"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>oformat</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>mov</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name>MODE_PSP</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"ipod"</literal></expr></argument>,<argument><expr><name><name>s</name><operator>-&gt;</operator><name>oformat</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>mov</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name>MODE_IPOD</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"ismv"</literal></expr></argument>,<argument><expr><name><name>s</name><operator>-&gt;</operator><name>oformat</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>mov</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name>MODE_ISM</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"f4v"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>oformat</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>mov</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name>MODE_F4V</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mov</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FF_MOV_FLAG_DELAY_MOOV</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>mov</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>FF_MOV_FLAG_EMPTY_MOOV</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mov</name><operator>-&gt;</operator><name>max_fragment_duration</name></name> <operator>||</operator> <name><name>mov</name><operator>-&gt;</operator><name>max_fragment_size</name></name> <operator>||</operator>

<name><name>mov</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>FF_MOV_FLAG_EMPTY_MOOV</name> <operator>|</operator>

<name>FF_MOV_FLAG_FRAG_KEYFRAME</name> <operator>|</operator>

<name>FF_MOV_FLAG_FRAG_CUSTOM</name> <operator>|</operator>

<name>FF_MOV_FLAG_FRAG_EVERY_FRAME</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>mov</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>FF_MOV_FLAG_FRAGMENT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mov</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>MODE_ISM</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>mov</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>FF_MOV_FLAG_EMPTY_MOOV</name> <operator>|</operator> <name>FF_MOV_FLAG_SEPARATE_MOOF</name> <operator>|</operator>

<name>FF_MOV_FLAG_FRAGMENT</name> <operator>|</operator> <name>FF_MOV_FLAG_NEGATIVE_CTS_OFFSETS</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mov</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FF_MOV_FLAG_DASH</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>mov</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>FF_MOV_FLAG_FRAGMENT</name> <operator>|</operator> <name>FF_MOV_FLAG_EMPTY_MOOV</name> <operator>|</operator>

<name>FF_MOV_FLAG_DEFAULT_BASE_MOOF</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mov</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FF_MOV_FLAG_CMAF</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>mov</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>FF_MOV_FLAG_FRAGMENT</name> <operator>|</operator> <name>FF_MOV_FLAG_EMPTY_MOOV</name> <operator>|</operator>

<name>FF_MOV_FLAG_DEFAULT_BASE_MOOF</name> <operator>|</operator> <name>FF_MOV_FLAG_NEGATIVE_CTS_OFFSETS</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mov</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FF_MOV_FLAG_EMPTY_MOOV</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AVFMT_FLAG_AUTO_BSF</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"Empty MOOV enabled; disabling automatic bitstream filtering\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>AVFMT_FLAG_AUTO_BSF</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mov</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FF_MOV_FLAG_GLOBAL_SIDX</name> <operator>&amp;&amp;</operator> <name><name>mov</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FF_MOV_FLAG_SKIP_SIDX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Global SIDX enabled; Ignoring skip_sidx option\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mov</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>FF_MOV_FLAG_SKIP_SIDX</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mov</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FF_MOV_FLAG_FASTSTART</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>mov</name><operator>-&gt;</operator><name>reserved_moov_size</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mov</name><operator>-&gt;</operator><name>use_editlist</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>mov</name><operator>-&gt;</operator><name>use_editlist</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mov</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FF_MOV_FLAG_FRAGMENT</name> <operator>&amp;&amp;</operator>

<operator>!</operator><operator>(</operator><name><name>mov</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FF_MOV_FLAG_DELAY_MOOV</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avoid_negative_ts</name></name> <operator>==</operator> <name>AVFMT_AVOID_NEG_TS_AUTO</name> <operator>||</operator>

<name><name>s</name><operator>-&gt;</operator><name>avoid_negative_ts</name></name> <operator>==</operator> <name>AVFMT_AVOID_NEG_TS_MAKE_ZERO</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>mov</name><operator>-&gt;</operator><name>use_editlist</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mov</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FF_MOV_FLAG_CMAF</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>mov</name><operator>-&gt;</operator><name>use_editlist</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mov</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FF_MOV_FLAG_EMPTY_MOOV</name> <operator>&amp;&amp;</operator>

<operator>!</operator><operator>(</operator><name><name>mov</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FF_MOV_FLAG_DELAY_MOOV</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>mov</name><operator>-&gt;</operator><name>use_editlist</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"No meaningful edit list will be written when using empty_moov without delay_moov\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mov</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FF_MOV_FLAG_CMAF</name> <operator>&amp;&amp;</operator> <name><name>mov</name><operator>-&gt;</operator><name>use_editlist</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Edit list enabled; Assuming writing CMAF Track File\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mov</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>FF_MOV_FLAG_NEGATIVE_CTS_OFFSETS</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>mov</name><operator>-&gt;</operator><name>use_editlist</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>avoid_negative_ts</name></name> <operator>==</operator> <name>AVFMT_AVOID_NEG_TS_AUTO</name> <operator>&amp;&amp;</operator>

<operator>!</operator><operator>(</operator><name><name>mov</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FF_MOV_FLAG_NEGATIVE_CTS_OFFSETS</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avoid_negative_ts</name></name> <operator>=</operator> <name>AVFMT_AVOID_NEG_TS_MAKE_ZERO</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mov</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FF_MOV_FLAG_OMIT_TFHD_OFFSET</name> <operator>&amp;&amp;</operator>

<name><name>mov</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FF_MOV_FLAG_DEFAULT_BASE_MOOF</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>mov</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>FF_MOV_FLAG_OMIT_TFHD_OFFSET</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mov</name><operator>-&gt;</operator><name>frag_interleave</name></name> <operator>&amp;&amp;</operator>

<name><name>mov</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>FF_MOV_FLAG_OMIT_TFHD_OFFSET</name> <operator>|</operator> <name>FF_MOV_FLAG_SEPARATE_MOOF</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Sample interleaving in fragments is mutually exclusive with "</literal>

<literal type="string">"omit_tfhd_offset and separate_moof\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name><operator>-&gt;</operator><name>seekable</name></name> <operator>&amp;</operator> <name>AVIO_SEEKABLE_NORMAL</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><operator>!</operator><operator>(</operator><name><name>mov</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FF_MOV_FLAG_FRAGMENT</name><operator>)</operator> <operator>||</operator> <name><name>mov</name><operator>-&gt;</operator><name>ism_lookahead</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"muxer does not support non seekable output\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>mov</name><operator>-&gt;</operator><name>nb_streams</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mov</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <operator>(</operator><name>MODE_MP4</name><operator>|</operator><name>MODE_MOV</name><operator>|</operator><name>MODE_IPOD</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_chapters</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>mov</name><operator>-&gt;</operator><name>chapter_track</name></name> <operator>=</operator> <name><name>mov</name><operator>-&gt;</operator><name>nb_streams</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mov</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FF_MOV_FLAG_RTP_HINT</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>rtp_hinting_needed</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>mov</name><operator>-&gt;</operator><name>nb_streams</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name><name>mov</name><operator>-&gt;</operator><name>write_tmcd</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>mov</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>MODE_MOV</name> <operator>||</operator> <name><name>mov</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>MODE_MP4</name><operator>)</operator>

<operator>||</operator> <name><name>mov</name><operator>-&gt;</operator><name>write_tmcd</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVDictionaryEntry</name> <modifier>*</modifier></type><name>t</name> <init>= <expr><name>global_tcr</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_VIDEO</name> <operator>&amp;&amp;</operator>

<operator>(</operator><name>t</name> <operator>||</operator> <operator>(</operator><name>t</name><operator>=</operator><call><name>av_dict_get</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><literal type="string">"timecode"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>AVTimecode</name></type> <name>tc</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mov_check_timecode_track</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tc</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>mov</name><operator>-&gt;</operator><name>nb_meta_tmcd</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>mov</name><operator>-&gt;</operator><name>nb_meta_tmcd</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_tag</name></name> <operator>==</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'t'</literal></expr></argument>,<argument><expr><literal type="char">'m'</literal></expr></argument>,<argument><expr><literal type="char">'c'</literal></expr></argument>,<argument><expr><literal type="char">'d'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"You requested a copy of the original timecode track "</literal>

<literal type="string">"so timecode metadata are now ignored\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mov</name><operator>-&gt;</operator><name>nb_meta_tmcd</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>mov</name><operator>-&gt;</operator><name>nb_streams</name></name> <operator>+=</operator> <name><name>mov</name><operator>-&gt;</operator><name>nb_meta_tmcd</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>mov</name><operator>-&gt;</operator><name>tracks</name></name> <operator>=</operator> <call><name>av_mallocz_array</name><argument_list>(<argument><expr><operator>(</operator><name><name>mov</name><operator>-&gt;</operator><name>nb_streams</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>mov</name><operator>-&gt;</operator><name>tracks</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>mov</name><operator>-&gt;</operator><name>tracks</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mov</name><operator>-&gt;</operator><name>encryption_scheme_str</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>mov</name><operator>-&gt;</operator><name>encryption_scheme_str</name></name></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>mov</name><operator>-&gt;</operator><name>encryption_scheme_str</name></name></expr></argument>, <argument><expr><literal type="string">"cenc-aes-ctr"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>mov</name><operator>-&gt;</operator><name>encryption_scheme</name></name> <operator>=</operator> <name>MOV_ENC_CENC_AES_CTR</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mov</name><operator>-&gt;</operator><name>encryption_key_len</name></name> <operator>!=</operator> <name>AES_CTR_KEY_SIZE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid encryption key len %d expected %d\n"</literal></expr></argument>,

<argument><expr><name><name>mov</name><operator>-&gt;</operator><name>encryption_key_len</name></name></expr></argument>, <argument><expr><name>AES_CTR_KEY_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mov</name><operator>-&gt;</operator><name>encryption_kid_len</name></name> <operator>!=</operator> <name>CENC_KID_SIZE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid encryption kid len %d expected %d\n"</literal></expr></argument>,

<argument><expr><name><name>mov</name><operator>-&gt;</operator><name>encryption_kid_len</name></name></expr></argument>, <argument><expr><name>CENC_KID_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"unsupported encryption scheme %s\n"</literal></expr></argument>,

<argument><expr><name><name>mov</name><operator>-&gt;</operator><name>encryption_scheme_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name><init>= <expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MOVTrack</name> <modifier>*</modifier></type><name>track</name><init>= <expr><operator>&amp;</operator><name><name>mov</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVDictionaryEntry</name> <modifier>*</modifier></type><name>lang</name> <init>= <expr><call><name>av_dict_get</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><literal type="string">"language"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>st</name></name> <operator>=</operator> <name>st</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>par</name></name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>codecpar</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>language</name></name> <operator>=</operator> <call><name>ff_mov_iso639_to_lang</name><argument_list>(<argument><expr><ternary><condition><expr><name>lang</name></expr>?</condition><then><expr><name><name>lang</name><operator>-&gt;</operator><name>value</name></name></expr></then><else>:<expr><literal type="string">"und"</literal></expr></else></ternary></expr></argument>, <argument><expr><name><name>mov</name><operator>-&gt;</operator><name>mode</name></name><operator>!=</operator><name>MODE_MOV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>language</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>language</name></name> <operator>=</operator> <literal type="number">32767</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name><name>mov</name><operator>-&gt;</operator><name>mode</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>tag</name></name> <operator>=</operator> <call><name>mov_find_codec_tag</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>track</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>track</name><operator>-&gt;</operator><name>tag</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Could not find tag for codec %s in stream #%d, "</literal>

<literal type="string">"codec not currently supported in container\n"</literal></expr></argument>,

<argument><expr><call><name>avcodec_get_name</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>hint_track</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>start_dts</name></name> <operator>=</operator> <name>AV_NOPTS_VALUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>start_cts</name></name> <operator>=</operator> <name>AV_NOPTS_VALUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>end_pts</name></name> <operator>=</operator> <name>AV_NOPTS_VALUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>dts_shift</name></name> <operator>=</operator> <name>AV_NOPTS_VALUE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>tag</name></name> <operator>==</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'m'</literal></expr></argument>,<argument><expr><literal type="char">'x'</literal></expr></argument>,<argument><expr><literal type="char">'3'</literal></expr></argument>,<argument><expr><literal type="char">'p'</literal></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>track</name><operator>-&gt;</operator><name>tag</name></name> <operator>==</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'m'</literal></expr></argument>,<argument><expr><literal type="char">'x'</literal></expr></argument>,<argument><expr><literal type="char">'3'</literal></expr></argument>,<argument><expr><literal type="char">'n'</literal></expr></argument>)</argument_list></call> <operator>||</operator>

<name><name>track</name><operator>-&gt;</operator><name>tag</name></name> <operator>==</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'m'</literal></expr></argument>,<argument><expr><literal type="char">'x'</literal></expr></argument>,<argument><expr><literal type="char">'4'</literal></expr></argument>,<argument><expr><literal type="char">'p'</literal></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>track</name><operator>-&gt;</operator><name>tag</name></name> <operator>==</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'m'</literal></expr></argument>,<argument><expr><literal type="char">'x'</literal></expr></argument>,<argument><expr><literal type="char">'4'</literal></expr></argument>,<argument><expr><literal type="char">'n'</literal></expr></argument>)</argument_list></call> <operator>||</operator>

<name><name>track</name><operator>-&gt;</operator><name>tag</name></name> <operator>==</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'m'</literal></expr></argument>,<argument><expr><literal type="char">'x'</literal></expr></argument>,<argument><expr><literal type="char">'5'</literal></expr></argument>,<argument><expr><literal type="char">'p'</literal></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>track</name><operator>-&gt;</operator><name>tag</name></name> <operator>==</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'m'</literal></expr></argument>,<argument><expr><literal type="char">'x'</literal></expr></argument>,<argument><expr><literal type="char">'5'</literal></expr></argument>,<argument><expr><literal type="char">'n'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>width</name></name> <operator>!=</operator> <literal type="number">720</literal> <operator>||</operator> <operator>(</operator><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>height</name></name> <operator>!=</operator> <literal type="number">608</literal> <operator>&amp;&amp;</operator> <name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>height</name></name> <operator>!=</operator> <literal type="number">512</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"D-10/IMX must use 720x608 or 720x512 video resolution\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <ternary><condition><expr><name><name>track</name><operator>-&gt;</operator><name>tag</name></name> <operator>&gt;&gt;</operator> <literal type="number">24</literal> <operator>==</operator> <literal type="char">'n'</literal></expr> ?</condition><then> <expr><literal type="number">486</literal></expr> </then><else>: <expr><literal type="number">576</literal></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mov</name><operator>-&gt;</operator><name>video_track_timescale</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>timescale</name></name> <operator>=</operator> <name><name>mov</name><operator>-&gt;</operator><name>video_track_timescale</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mov</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>MODE_ISM</name> <operator>&amp;&amp;</operator> <name><name>mov</name><operator>-&gt;</operator><name>video_track_timescale</name></name> <operator>!=</operator> <literal type="number">10000000</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Warning: some tools, like mp4split, assume a timescale of 10000000 for ISMV.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>timescale</name></name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>den</name></name></expr>;</expr_stmt>

<while>while<condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>timescale</name></name> <operator>&lt;</operator> <literal type="number">10000</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>timescale</name></name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></while>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>width</name></name> <operator>&gt;</operator> <literal type="number">65535</literal> <operator>||</operator> <name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>height</name></name> <operator>&gt;</operator> <literal type="number">65535</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Resolution %dx%d too large for mov/mp4\n"</literal></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>MODE_MOV</name> <operator>&amp;&amp;</operator> <name><name>track</name><operator>-&gt;</operator><name>timescale</name></name> <operator>&gt;</operator> <literal type="number">100000</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,

<argument><expr><literal type="string">"WARNING codec timebase is very high. If duration is too long,\n"</literal>

<literal type="string">"file may not be playable by quicktime. Specify a shorter timebase\n"</literal>

<literal type="string">"or choose different container.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>MODE_MOV</name> <operator>&amp;&amp;</operator>

<name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_RAWVIDEO</name> <operator>&amp;&amp;</operator>

<name><name>track</name><operator>-&gt;</operator><name>tag</name></name> <operator>==</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'r'</literal></expr></argument>,<argument><expr><literal type="char">'a'</literal></expr></argument>,<argument><expr><literal type="char">'w'</literal></expr></argument>,<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>pix_fmt</name> <init>= <expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>format</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pix_fmt</name> <operator>==</operator> <name>AV_PIX_FMT_NONE</name> <operator>&amp;&amp;</operator> <name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>bits_per_coded_sample</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>pix_fmt</name> <operator>=</operator> <name>AV_PIX_FMT_MONOWHITE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>is_unaligned_qt_rgb</name></name> <operator>=</operator>

<name>pix_fmt</name> <operator>==</operator> <name>AV_PIX_FMT_RGB24</name> <operator>||</operator>

<name>pix_fmt</name> <operator>==</operator> <name>AV_PIX_FMT_BGR24</name> <operator>||</operator>

<name>pix_fmt</name> <operator>==</operator> <name>AV_PIX_FMT_PAL8</name> <operator>||</operator>

<name>pix_fmt</name> <operator>==</operator> <name>AV_PIX_FMT_GRAY8</name> <operator>||</operator>

<name>pix_fmt</name> <operator>==</operator> <name>AV_PIX_FMT_MONOWHITE</name> <operator>||</operator>

<name>pix_fmt</name> <operator>==</operator> <name>AV_PIX_FMT_MONOBLACK</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_VP9</name> <operator>||</operator>

<name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_AV1</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>mode</name></name> <operator>!=</operator> <name>MODE_MP4</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"%s only supported in MP4.\n"</literal></expr></argument>, <argument><expr><call><name>avcodec_get_name</name><argument_list>(<argument><expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_id</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_VP8</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"VP8 muxing is currently not supported.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>timescale</name></name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>av_get_bits_per_sample</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"track %d: codec frame size is not set\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>audio_vbr</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if><if type="elseif">else if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_ADPCM_MS</name> <operator>||</operator>

<name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_ADPCM_IMA_WAV</name> <operator>||</operator>

<name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_ILBC</name></expr>)</condition><block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>block_align</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"track %d: codec block align is not set for adpcm\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>sample_size</name></name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>block_align</name></name></expr>;</expr_stmt>

</block_content>}</block></if><if type="elseif">else if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block>{<block_content> 

<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>audio_vbr</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>sample_size</name></name> <operator>=</operator> <operator>(</operator><call><name>av_get_bits_per_sample</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>*</operator> <name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_ILBC</name> <operator>||</operator>

<name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_ADPCM_IMA_QT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>audio_vbr</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>mode</name></name> <operator>!=</operator> <name>MODE_MOV</name> <operator>&amp;&amp;</operator>

<name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_MP3</name> <operator>&amp;&amp;</operator> <name><name>track</name><operator>-&gt;</operator><name>timescale</name></name> <operator>&lt;</operator> <literal type="number">16000</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>strict_std_compliance</name></name> <operator>&gt;=</operator> <name>FF_COMPLIANCE_NORMAL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"track %d: muxing mp3 at %dhz is not standard, to mux anyway set strict to -1\n"</literal></expr></argument>,

<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"track %d: muxing mp3 at %dhz is not standard in MP4\n"</literal></expr></argument>,

<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_FLAC</name> <operator>||</operator>

<name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_TRUEHD</name> <operator>||</operator>

<name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_OPUS</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>mode</name></name> <operator>!=</operator> <name>MODE_MP4</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"%s only supported in MP4.\n"</literal></expr></argument>, <argument><expr><call><name>avcodec_get_name</name><argument_list>(<argument><expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_id</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>!=</operator> <name>AV_CODEC_ID_OPUS</name> <operator>&amp;&amp;</operator>

<name><name>s</name><operator>-&gt;</operator><name>strict_std_compliance</name></name> <operator>&gt;</operator> <name>FF_COMPLIANCE_EXPERIMENTAL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"%s in MP4 support is experimental, add "</literal>

<literal type="string">"'-strict %d' if you want to use it.\n"</literal></expr></argument>,

<argument><expr><call><name>avcodec_get_name</name><argument_list>(<argument><expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_id</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FF_COMPLIANCE_EXPERIMENTAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_EXPERIMENTAL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_SUBTITLE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>timescale</name></name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>den</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_DATA</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>timescale</name></name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>den</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>timescale</name></name> <operator>=</operator> <name>MOV_TIMESCALE</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>track</name><operator>-&gt;</operator><name>height</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mov</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>MODE_ISM</name> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>!=</operator> <name>AVMEDIA_TYPE_VIDEO</name> <operator>||</operator>

<operator>(</operator><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_VIDEO</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>mov</name><operator>-&gt;</operator><name>video_track_timescale</name></name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>timescale</name></name> <operator>=</operator> <literal type="number">10000000</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>avpriv_set_pts_info</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>timescale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mov</name><operator>-&gt;</operator><name>encryption_scheme</name></name> <operator>==</operator> <name>MOV_ENC_CENC_AES_CTR</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_mov_cenc_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>track</name><operator>-&gt;</operator><name>cenc</name></name></expr></argument>, <argument><expr><name><name>mov</name><operator>-&gt;</operator><name>encryption_key</name></name></expr></argument>,

<argument><expr><name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_H264</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AVFMT_FLAG_BITEXACT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>enable_tracks</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_write_header</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MOVMuxContext</name> <modifier>*</modifier></type><name>mov</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVDictionaryEntry</name> <modifier>*</modifier></type><name>t</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>global_tcr</name> <init>= <expr><call><name>av_dict_get</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><literal type="string">"timecode"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>, <decl><type ref="prev"/><name>hint_track</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>tmcd_track</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>nb_tracks</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mov</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <operator>(</operator><name>MODE_MP4</name><operator>|</operator><name>MODE_MOV</name><operator>|</operator><name>MODE_IPOD</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_chapters</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>nb_tracks</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mov</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FF_MOV_FLAG_RTP_HINT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>hint_track</name> <operator>=</operator> <name>nb_tracks</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>rtp_hinting_needed</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>nb_tracks</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mov</name><operator>-&gt;</operator><name>nb_meta_tmcd</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>tmcd_track</name> <operator>=</operator> <name>nb_tracks</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name><init>= <expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MOVTrack</name> <modifier>*</modifier></type><name>track</name><init>= <expr><operator>&amp;</operator><name><name>mov</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>extradata_size</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_DVD_SUBTITLE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mov_create_dvd_sub_decoder_specific_info</name><argument_list>(<argument><expr><name>track</name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>TAG_IS_AVCI</name><argument_list>(<argument><expr><name><name>track</name><operator>-&gt;</operator><name>tag</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>!=</operator> <name>AV_CODEC_ID_DNXHD</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>vos_len</name></name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>extradata_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>vos_data</name></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name><name>track</name><operator>-&gt;</operator><name>vos_len</name></name> <operator>+</operator> <name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>track</name><operator>-&gt;</operator><name>vos_data</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>track</name><operator>-&gt;</operator><name>vos_data</name></name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>vos_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>track</name><operator>-&gt;</operator><name>vos_data</name></name> <operator>+</operator> <name><name>track</name><operator>-&gt;</operator><name>vos_len</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>!=</operator> <name>AVMEDIA_TYPE_AUDIO</name> <operator>||</operator>

<name><name>track</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>channel_layout</name></name> <operator>!=</operator> <name>AV_CH_LAYOUT_MONO</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>stj</name><init>= <expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MOVTrack</name> <modifier>*</modifier></type><name>trackj</name><init>= <expr><operator>&amp;</operator><name><name>mov</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>j</name> <operator>==</operator> <name>i</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>stj</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>!=</operator> <name>AVMEDIA_TYPE_AUDIO</name> <operator>||</operator>

<name><name>trackj</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>channel_layout</name></name> <operator>!=</operator> <name>AV_CH_LAYOUT_MONO</name> <operator>||</operator>

<name><name>trackj</name><operator>-&gt;</operator><name>language</name></name> <operator>!=</operator> <name><name>track</name><operator>-&gt;</operator><name>language</name></name> <operator>||</operator>

<name><name>trackj</name><operator>-&gt;</operator><name>tag</name></name> <operator>!=</operator> <name><name>track</name><operator>-&gt;</operator><name>tag</name></name></expr>

)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>multichannel_as_mono</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>mov</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FF_MOV_FLAG_DELAY_MOOV</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>mov_write_identification</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mov</name><operator>-&gt;</operator><name>reserved_moov_size</name></name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>mov</name><operator>-&gt;</operator><name>reserved_header_pos</name></name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mov</name><operator>-&gt;</operator><name>reserved_moov_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>mov</name><operator>-&gt;</operator><name>reserved_moov_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mov</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FF_MOV_FLAG_FRAGMENT</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>mov</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>FF_MOV_FLAG_FRAG_KEYFRAME</name> <operator>|</operator>

<name>FF_MOV_FLAG_FRAG_CUSTOM</name> <operator>|</operator>

<name>FF_MOV_FLAG_FRAG_EVERY_FRAME</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>!</operator><name><name>mov</name><operator>-&gt;</operator><name>max_fragment_duration</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>mov</name><operator>-&gt;</operator><name>max_fragment_size</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>mov</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>FF_MOV_FLAG_FRAG_KEYFRAME</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>mov</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FF_MOV_FLAG_FASTSTART</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>mov</name><operator>-&gt;</operator><name>reserved_header_pos</name></name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>mov_write_mdat_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>mov</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>ff_parse_creation_time_metadata</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mov</name><operator>-&gt;</operator><name>time</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mov</name><operator>-&gt;</operator><name>time</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>mov</name><operator>-&gt;</operator><name>time</name></name> <operator>+=</operator> <literal type="number">0x7C25B080</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>mov</name><operator>-&gt;</operator><name>chapter_track</name></name></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>mov_create_chapter_track</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>mov</name><operator>-&gt;</operator><name>chapter_track</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mov</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FF_MOV_FLAG_RTP_HINT</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>rtp_hinting_needed</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_mov_init_hinting</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>hint_track</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>hint_track</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mov</name><operator>-&gt;</operator><name>nb_meta_tmcd</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name>global_tcr</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>AVTimecode</name></type> <name>tc</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>t</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>av_dict_get</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><literal type="string">"timecode"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>t</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>mov_check_timecode_track</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tc</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>mov_create_timecode_track</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>tmcd_track</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>tc</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>tmcd_track</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>avio_flush</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mov</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FF_MOV_FLAG_ISML</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mov_write_isml_manifest</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>mov</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mov</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FF_MOV_FLAG_EMPTY_MOOV</name> <operator>&amp;&amp;</operator>

<operator>!</operator><operator>(</operator><name><name>mov</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FF_MOV_FLAG_DELAY_MOOV</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>mov_write_moov_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>mov</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>mov</name><operator>-&gt;</operator><name>moov_written</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mov</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FF_MOV_FLAG_GLOBAL_SIDX</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>mov</name><operator>-&gt;</operator><name>reserved_header_pos</name></name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_moov_size</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>moov_buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MOVMuxContext</name> <modifier>*</modifier></type><name>mov</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ffio_open_null_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>moov_buf</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>mov_write_moov_tag</name><argument_list>(<argument><expr><name>moov_buf</name></expr></argument>, <argument><expr><name>mov</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>ffio_close_null_buf</name><argument_list>(<argument><expr><name>moov_buf</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_sidx_size</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MOVMuxContext</name> <modifier>*</modifier></type><name>mov</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ffio_open_null_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>mov_write_sidx_tags</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>mov</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>ffio_close_null_buf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>compute_moov_size</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>moov_size</name></decl>, <decl><type ref="prev"/><name>moov_size2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MOVMuxContext</name> <modifier>*</modifier></type><name>mov</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>moov_size</name> <operator>=</operator> <call><name>get_moov_size</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>moov_size</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>moov_size</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>mov</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>mov</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>data_offset</name> <operator>+=</operator> <name>moov_size</name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>moov_size2</name> <operator>=</operator> <call><name>get_moov_size</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>moov_size2</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>moov_size2</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>moov_size2</name> <operator>!=</operator> <name>moov_size</name></expr>)</condition><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>mov</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>mov</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>data_offset</name> <operator>+=</operator> <name>moov_size2</name> <operator>-</operator> <name>moov_size</name></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>

<return>return <expr><name>moov_size2</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>compute_sidx_size</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>sidx_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MOVMuxContext</name> <modifier>*</modifier></type><name>mov</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>sidx_size</name> <operator>=</operator> <call><name>get_sidx_size</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sidx_size</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>sidx_size</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>mov</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>mov</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>data_offset</name> <operator>+=</operator> <name>sidx_size</name></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><name>sidx_size</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>shift_data</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>moov_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MOVMuxContext</name> <modifier>*</modifier></type><name>mov</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>pos</name></decl>, <decl><type ref="prev"/><name>pos_end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name><name>read_buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>read_buf_id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>read_size</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>read_pb</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mov</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FF_MOV_FLAG_FRAGMENT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>moov_size</name> <operator>=</operator> <call><name>compute_sidx_size</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>moov_size</name> <operator>=</operator> <call><name>compute_moov_size</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>moov_size</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>moov_size</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name>moov_size</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>read_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>read_buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>buf</name> <operator>+</operator> <name>moov_size</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_flush</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>s</name><operator>-&gt;</operator><name>io_open</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>read_pb</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>url</name></name></expr></argument>, <argument><expr><name>AVIO_FLAG_READ</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unable to re-open %s output file for "</literal>

<literal type="string">"the second pass (faststart)\n"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pos_end</name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name><name>mov</name><operator>-&gt;</operator><name>reserved_header_pos</name></name> <operator>+</operator> <name>moov_size</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name>read_pb</name></expr></argument>, <argument><expr><name><name>mov</name><operator>-&gt;</operator><name>reserved_header_pos</name></name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name>read_pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>READ_BLOCK</name></cpp:macro> <cpp:value>do { read_size[read_buf_id] = avio_read(read_pb, read_buf[read_buf_id], moov_size); read_buf_id ^= 1; } while (0)</cpp:value></cpp:define>

<expr_stmt><expr><name>READ_BLOCK</name></expr>;</expr_stmt>

<do>do <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<expr_stmt><expr><name>READ_BLOCK</name></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>read_size</name><index>[<expr><name>read_buf_id</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name><name>read_buf</name><index>[<expr><name>read_buf_id</name></expr>]</index></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pos</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name>pos</name> <operator>&lt;</operator> <name>pos_end</name></expr>)</condition>;</do>

<expr_stmt><expr><call><name>ff_format_io_close</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>read_pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>end</name>:</label>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_write_trailer</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MOVMuxContext</name> <modifier>*</modifier></type><name>mov</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>moov_pos</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mov</name><operator>-&gt;</operator><name>need_rewrite_extradata</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>MOVTrack</name> <modifier>*</modifier></type><name>track</name> <init>= <expr><operator>&amp;</operator><name><name>mov</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodecParameters</name> <modifier>*</modifier></type><name>par</name> <init>= <expr><name><name>track</name><operator>-&gt;</operator><name>par</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>vos_len</name></name> <operator>=</operator> <name><name>par</name><operator>-&gt;</operator><name>extradata_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>vos_data</name></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name><name>track</name><operator>-&gt;</operator><name>vos_len</name></name> <operator>+</operator> <name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>track</name><operator>-&gt;</operator><name>vos_data</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>track</name><operator>-&gt;</operator><name>vos_data</name></name></expr></argument>, <argument><expr><name><name>par</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>vos_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>track</name><operator>-&gt;</operator><name>vos_data</name></name> <operator>+</operator> <name><name>track</name><operator>-&gt;</operator><name>vos_len</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>mov</name><operator>-&gt;</operator><name>need_rewrite_extradata</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>mov</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>MOVTrack</name> <modifier>*</modifier></type><name>trk</name> <init>= <expr><operator>&amp;</operator><name><name>mov</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>trk</name><operator>-&gt;</operator><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_MOV_TEXT</name> <operator>&amp;&amp;</operator>

<operator>!</operator><name><name>trk</name><operator>-&gt;</operator><name>last_sample_is_subtitle_end</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>mov_write_subtitle_end_packet</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>trk</name><operator>-&gt;</operator><name>track_duration</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>trk</name><operator>-&gt;</operator><name>last_sample_is_subtitle_end</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>mov</name><operator>-&gt;</operator><name>chapter_track</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>mov</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FF_MOV_FLAG_FRAGMENT</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>mov</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <operator>(</operator><name>MODE_MP4</name><operator>|</operator><name>MODE_MOV</name><operator>|</operator><name>MODE_IPOD</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_chapters</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>mov</name><operator>-&gt;</operator><name>chapter_track</name></name> <operator>=</operator> <name><name>mov</name><operator>-&gt;</operator><name>nb_streams</name></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name>mov_create_chapter_track</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>mov</name><operator>-&gt;</operator><name>chapter_track</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>mov</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FF_MOV_FLAG_FRAGMENT</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>moov_pos</name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mov</name><operator>-&gt;</operator><name>mdat_size</name></name> <operator>+</operator> <literal type="number">8</literal> <operator>&lt;=</operator> <name>UINT32_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>mov</name><operator>-&gt;</operator><name>mdat_pos</name></name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>mov</name><operator>-&gt;</operator><name>mdat_size</name></name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>mov</name><operator>-&gt;</operator><name>mdat_pos</name></name> <operator>-</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"mdat"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>mov</name><operator>-&gt;</operator><name>mdat_size</name></name> <operator>+</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>mov</name><operator>-&gt;</operator><name>reserved_moov_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>mov</name><operator>-&gt;</operator><name>reserved_header_pos</name></name></expr> </then><else>: <expr><name>moov_pos</name></expr></else></ternary></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mov</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FF_MOV_FLAG_FASTSTART</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Starting second pass: moving the moov atom to the beginning of the file\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>shift_data</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>mov</name><operator>-&gt;</operator><name>reserved_header_pos</name></name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name>mov_write_moov_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>mov</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>mov</name><operator>-&gt;</operator><name>reserved_moov_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>size</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name>mov_write_moov_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>mov</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <name><name>mov</name><operator>-&gt;</operator><name>reserved_moov_size</name></name> <operator>-</operator> <operator>(</operator><call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>mov</name><operator>-&gt;</operator><name>reserved_header_pos</name></name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"reserved_moov_size is too small, needed %"</literal><name>PRId64</name><literal type="string">" additional\n"</literal></expr></argument>, <argument><expr><literal type="number">8</literal><operator>-</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"free"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ffio_fill</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>size</name> <operator>-</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>moov_pos</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name>mov_write_moov_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>mov</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>mov_auto_flush_fragment</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>mov</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>mov</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>data_offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name><name>mov</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FF_MOV_FLAG_GLOBAL_SIDX</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>end</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Starting second pass: inserting sidx atoms\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>shift_data</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>end</name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>mov</name><operator>-&gt;</operator><name>reserved_header_pos</name></name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mov_write_sidx_tags</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>mov</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>mov</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FF_MOV_FLAG_SKIP_TRAILER</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avio_write_marker</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>AV_NOPTS_VALUE</name></expr></argument>, <argument><expr><name>AVIO_DATA_MARKER_TRAILER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mov_write_mfra_tag</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>mov</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_check_bitstream</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>AVFormatContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name><name>pkt</name><operator>-&gt;</operator><name>stream_index</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_AAC</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>AV_RB16</name><argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0xfff0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xfff0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_stream_add_bitstream_filter</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><literal type="string">"aac_adtstoasc"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_VP9</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_stream_add_bitstream_filter</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><literal type="string">"vp9_superframe"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVCodecTag</name></type> <name><name>codec_3gp_tags</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><name>AV_CODEC_ID_H263</name></expr>, <macro><name>MKTAG</name><argument_list>(<argument><literal type="char">'s'</literal></argument>,<argument><literal type="char">'2'</literal></argument>,<argument><literal type="char">'6'</literal></argument>,<argument><literal type="char">'3'</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><name>AV_CODEC_ID_H264</name></expr>, <macro><name>MKTAG</name><argument_list>(<argument><literal type="char">'a'</literal></argument>,<argument><literal type="char">'v'</literal></argument>,<argument><literal type="char">'c'</literal></argument>,<argument><literal type="char">'1'</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><name>AV_CODEC_ID_MPEG4</name></expr>, <macro><name>MKTAG</name><argument_list>(<argument><literal type="char">'m'</literal></argument>,<argument><literal type="char">'p'</literal></argument>,<argument><literal type="char">'4'</literal></argument>,<argument><literal type="char">'v'</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><name>AV_CODEC_ID_AAC</name></expr>, <macro><name>MKTAG</name><argument_list>(<argument><literal type="char">'m'</literal></argument>,<argument><literal type="char">'p'</literal></argument>,<argument><literal type="char">'4'</literal></argument>,<argument><literal type="char">'a'</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><name>AV_CODEC_ID_AMR_NB</name></expr>, <macro><name>MKTAG</name><argument_list>(<argument><literal type="char">'s'</literal></argument>,<argument><literal type="char">'a'</literal></argument>,<argument><literal type="char">'m'</literal></argument>,<argument><literal type="char">'r'</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><name>AV_CODEC_ID_AMR_WB</name></expr>, <macro><name>MKTAG</name><argument_list>(<argument><literal type="char">'s'</literal></argument>,<argument><literal type="char">'a'</literal></argument>,<argument><literal type="char">'w'</literal></argument>,<argument><literal type="char">'b'</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><name>AV_CODEC_ID_MOV_TEXT</name></expr>, <macro><name>MKTAG</name><argument_list>(<argument><literal type="char">'t'</literal></argument>,<argument><literal type="char">'x'</literal></argument>,<argument><literal type="char">'3'</literal></argument>,<argument><literal type="char">'g'</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><name>AV_CODEC_ID_NONE</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVCodecTag</name></type> <name><name>codec_mp4_tags</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><name>AV_CODEC_ID_MPEG4</name></expr>, <macro><name>MKTAG</name><argument_list>(<argument><literal type="char">'m'</literal></argument>, <argument><literal type="char">'p'</literal></argument>, <argument><literal type="char">'4'</literal></argument>, <argument><literal type="char">'v'</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><name>AV_CODEC_ID_H264</name></expr>, <macro><name>MKTAG</name><argument_list>(<argument><literal type="char">'a'</literal></argument>, <argument><literal type="char">'v'</literal></argument>, <argument><literal type="char">'c'</literal></argument>, <argument><literal type="char">'1'</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><name>AV_CODEC_ID_H264</name></expr>, <macro><name>MKTAG</name><argument_list>(<argument><literal type="char">'a'</literal></argument>, <argument><literal type="char">'v'</literal></argument>, <argument><literal type="char">'c'</literal></argument>, <argument><literal type="char">'3'</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><name>AV_CODEC_ID_HEVC</name></expr>, <macro><name>MKTAG</name><argument_list>(<argument><literal type="char">'h'</literal></argument>, <argument><literal type="char">'e'</literal></argument>, <argument><literal type="char">'v'</literal></argument>, <argument><literal type="char">'1'</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><name>AV_CODEC_ID_HEVC</name></expr>, <macro><name>MKTAG</name><argument_list>(<argument><literal type="char">'h'</literal></argument>, <argument><literal type="char">'v'</literal></argument>, <argument><literal type="char">'c'</literal></argument>, <argument><literal type="char">'1'</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><name>AV_CODEC_ID_MPEG2VIDEO</name></expr>, <macro><name>MKTAG</name><argument_list>(<argument><literal type="char">'m'</literal></argument>, <argument><literal type="char">'p'</literal></argument>, <argument><literal type="char">'4'</literal></argument>, <argument><literal type="char">'v'</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><name>AV_CODEC_ID_MPEG1VIDEO</name></expr>, <macro><name>MKTAG</name><argument_list>(<argument><literal type="char">'m'</literal></argument>, <argument><literal type="char">'p'</literal></argument>, <argument><literal type="char">'4'</literal></argument>, <argument><literal type="char">'v'</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><name>AV_CODEC_ID_MJPEG</name></expr>, <macro><name>MKTAG</name><argument_list>(<argument><literal type="char">'m'</literal></argument>, <argument><literal type="char">'p'</literal></argument>, <argument><literal type="char">'4'</literal></argument>, <argument><literal type="char">'v'</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><name>AV_CODEC_ID_PNG</name></expr>, <macro><name>MKTAG</name><argument_list>(<argument><literal type="char">'m'</literal></argument>, <argument><literal type="char">'p'</literal></argument>, <argument><literal type="char">'4'</literal></argument>, <argument><literal type="char">'v'</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><name>AV_CODEC_ID_JPEG2000</name></expr>, <macro><name>MKTAG</name><argument_list>(<argument><literal type="char">'m'</literal></argument>, <argument><literal type="char">'p'</literal></argument>, <argument><literal type="char">'4'</literal></argument>, <argument><literal type="char">'v'</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><name>AV_CODEC_ID_VC1</name></expr>, <macro><name>MKTAG</name><argument_list>(<argument><literal type="char">'v'</literal></argument>, <argument><literal type="char">'c'</literal></argument>, <argument><literal type="char">'-'</literal></argument>, <argument><literal type="char">'1'</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><name>AV_CODEC_ID_DIRAC</name></expr>, <macro><name>MKTAG</name><argument_list>(<argument><literal type="char">'d'</literal></argument>, <argument><literal type="char">'r'</literal></argument>, <argument><literal type="char">'a'</literal></argument>, <argument><literal type="char">'c'</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><name>AV_CODEC_ID_TSCC2</name></expr>, <macro><name>MKTAG</name><argument_list>(<argument><literal type="char">'m'</literal></argument>, <argument><literal type="char">'p'</literal></argument>, <argument><literal type="char">'4'</literal></argument>, <argument><literal type="char">'v'</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><name>AV_CODEC_ID_VP9</name></expr>, <macro><name>MKTAG</name><argument_list>(<argument><literal type="char">'v'</literal></argument>, <argument><literal type="char">'p'</literal></argument>, <argument><literal type="char">'0'</literal></argument>, <argument><literal type="char">'9'</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><name>AV_CODEC_ID_AV1</name></expr>, <macro><name>MKTAG</name><argument_list>(<argument><literal type="char">'a'</literal></argument>, <argument><literal type="char">'v'</literal></argument>, <argument><literal type="char">'0'</literal></argument>, <argument><literal type="char">'1'</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><name>AV_CODEC_ID_AAC</name></expr>, <macro><name>MKTAG</name><argument_list>(<argument><literal type="char">'m'</literal></argument>, <argument><literal type="char">'p'</literal></argument>, <argument><literal type="char">'4'</literal></argument>, <argument><literal type="char">'a'</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><name>AV_CODEC_ID_MP4ALS</name></expr>, <macro><name>MKTAG</name><argument_list>(<argument><literal type="char">'m'</literal></argument>, <argument><literal type="char">'p'</literal></argument>, <argument><literal type="char">'4'</literal></argument>, <argument><literal type="char">'a'</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><name>AV_CODEC_ID_MP3</name></expr>, <macro><name>MKTAG</name><argument_list>(<argument><literal type="char">'m'</literal></argument>, <argument><literal type="char">'p'</literal></argument>, <argument><literal type="char">'4'</literal></argument>, <argument><literal type="char">'a'</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><name>AV_CODEC_ID_MP2</name></expr>, <macro><name>MKTAG</name><argument_list>(<argument><literal type="char">'m'</literal></argument>, <argument><literal type="char">'p'</literal></argument>, <argument><literal type="char">'4'</literal></argument>, <argument><literal type="char">'a'</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><name>AV_CODEC_ID_AC3</name></expr>, <macro><name>MKTAG</name><argument_list>(<argument><literal type="char">'a'</literal></argument>, <argument><literal type="char">'c'</literal></argument>, <argument><literal type="char">'-'</literal></argument>, <argument><literal type="char">'3'</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><name>AV_CODEC_ID_EAC3</name></expr>, <macro><name>MKTAG</name><argument_list>(<argument><literal type="char">'e'</literal></argument>, <argument><literal type="char">'c'</literal></argument>, <argument><literal type="char">'-'</literal></argument>, <argument><literal type="char">'3'</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><name>AV_CODEC_ID_DTS</name></expr>, <macro><name>MKTAG</name><argument_list>(<argument><literal type="char">'m'</literal></argument>, <argument><literal type="char">'p'</literal></argument>, <argument><literal type="char">'4'</literal></argument>, <argument><literal type="char">'a'</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><name>AV_CODEC_ID_TRUEHD</name></expr>, <macro><name>MKTAG</name><argument_list>(<argument><literal type="char">'m'</literal></argument>, <argument><literal type="char">'l'</literal></argument>, <argument><literal type="char">'p'</literal></argument>, <argument><literal type="char">'a'</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><name>AV_CODEC_ID_FLAC</name></expr>, <macro><name>MKTAG</name><argument_list>(<argument><literal type="char">'f'</literal></argument>, <argument><literal type="char">'L'</literal></argument>, <argument><literal type="char">'a'</literal></argument>, <argument><literal type="char">'C'</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><name>AV_CODEC_ID_OPUS</name></expr>, <macro><name>MKTAG</name><argument_list>(<argument><literal type="char">'O'</literal></argument>, <argument><literal type="char">'p'</literal></argument>, <argument><literal type="char">'u'</literal></argument>, <argument><literal type="char">'s'</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><name>AV_CODEC_ID_VORBIS</name></expr>, <macro><name>MKTAG</name><argument_list>(<argument><literal type="char">'m'</literal></argument>, <argument><literal type="char">'p'</literal></argument>, <argument><literal type="char">'4'</literal></argument>, <argument><literal type="char">'a'</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><name>AV_CODEC_ID_QCELP</name></expr>, <macro><name>MKTAG</name><argument_list>(<argument><literal type="char">'m'</literal></argument>, <argument><literal type="char">'p'</literal></argument>, <argument><literal type="char">'4'</literal></argument>, <argument><literal type="char">'a'</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><name>AV_CODEC_ID_EVRC</name></expr>, <macro><name>MKTAG</name><argument_list>(<argument><literal type="char">'m'</literal></argument>, <argument><literal type="char">'p'</literal></argument>, <argument><literal type="char">'4'</literal></argument>, <argument><literal type="char">'a'</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><name>AV_CODEC_ID_DVD_SUBTITLE</name></expr>, <macro><name>MKTAG</name><argument_list>(<argument><literal type="char">'m'</literal></argument>, <argument><literal type="char">'p'</literal></argument>, <argument><literal type="char">'4'</literal></argument>, <argument><literal type="char">'s'</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><name>AV_CODEC_ID_MOV_TEXT</name></expr>, <macro><name>MKTAG</name><argument_list>(<argument><literal type="char">'t'</literal></argument>, <argument><literal type="char">'x'</literal></argument>, <argument><literal type="char">'3'</literal></argument>, <argument><literal type="char">'g'</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><name>AV_CODEC_ID_BIN_DATA</name></expr>, <macro><name>MKTAG</name><argument_list>(<argument><literal type="char">'g'</literal></argument>, <argument><literal type="char">'p'</literal></argument>, <argument><literal type="char">'m'</literal></argument>, <argument><literal type="char">'d'</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><name>AV_CODEC_ID_MPEGH_3D_AUDIO</name></expr>, <macro><name>MKTAG</name><argument_list>(<argument><literal type="char">'m'</literal></argument>, <argument><literal type="char">'h'</literal></argument>, <argument><literal type="char">'m'</literal></argument>, <argument><literal type="char">'1'</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><name>AV_CODEC_ID_NONE</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVCodecTag</name></type> <name><name>codec_ism_tags</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><name>AV_CODEC_ID_WMAPRO</name></expr> , <macro><name>MKTAG</name><argument_list>(<argument><literal type="char">'w'</literal></argument>, <argument><literal type="char">'m'</literal></argument>, <argument><literal type="char">'a'</literal></argument>, <argument><literal type="char">' '</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><name>AV_CODEC_ID_NONE</name></expr> , <expr><literal type="number">0</literal></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVCodecTag</name></type> <name><name>codec_ipod_tags</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><name>AV_CODEC_ID_H264</name></expr>, <macro><name>MKTAG</name><argument_list>(<argument><literal type="char">'a'</literal></argument>,<argument><literal type="char">'v'</literal></argument>,<argument><literal type="char">'c'</literal></argument>,<argument><literal type="char">'1'</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><name>AV_CODEC_ID_MPEG4</name></expr>, <macro><name>MKTAG</name><argument_list>(<argument><literal type="char">'m'</literal></argument>,<argument><literal type="char">'p'</literal></argument>,<argument><literal type="char">'4'</literal></argument>,<argument><literal type="char">'v'</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><name>AV_CODEC_ID_AAC</name></expr>, <macro><name>MKTAG</name><argument_list>(<argument><literal type="char">'m'</literal></argument>,<argument><literal type="char">'p'</literal></argument>,<argument><literal type="char">'4'</literal></argument>,<argument><literal type="char">'a'</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><name>AV_CODEC_ID_ALAC</name></expr>, <macro><name>MKTAG</name><argument_list>(<argument><literal type="char">'a'</literal></argument>,<argument><literal type="char">'l'</literal></argument>,<argument><literal type="char">'a'</literal></argument>,<argument><literal type="char">'c'</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><name>AV_CODEC_ID_AC3</name></expr>, <macro><name>MKTAG</name><argument_list>(<argument><literal type="char">'a'</literal></argument>,<argument><literal type="char">'c'</literal></argument>,<argument><literal type="char">'-'</literal></argument>,<argument><literal type="char">'3'</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><name>AV_CODEC_ID_MOV_TEXT</name></expr>, <macro><name>MKTAG</name><argument_list>(<argument><literal type="char">'t'</literal></argument>,<argument><literal type="char">'x'</literal></argument>,<argument><literal type="char">'3'</literal></argument>,<argument><literal type="char">'g'</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><name>AV_CODEC_ID_MOV_TEXT</name></expr>, <macro><name>MKTAG</name><argument_list>(<argument><literal type="char">'t'</literal></argument>,<argument><literal type="char">'e'</literal></argument>,<argument><literal type="char">'x'</literal></argument>,<argument><literal type="char">'t'</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><name>AV_CODEC_ID_NONE</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVCodecTag</name></type> <name><name>codec_f4v_tags</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><name>AV_CODEC_ID_MP3</name></expr>, <macro><name>MKTAG</name><argument_list>(<argument><literal type="char">'.'</literal></argument>,<argument><literal type="char">'m'</literal></argument>,<argument><literal type="char">'p'</literal></argument>,<argument><literal type="char">'3'</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><name>AV_CODEC_ID_AAC</name></expr>, <macro><name>MKTAG</name><argument_list>(<argument><literal type="char">'m'</literal></argument>,<argument><literal type="char">'p'</literal></argument>,<argument><literal type="char">'4'</literal></argument>,<argument><literal type="char">'a'</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><name>AV_CODEC_ID_H264</name></expr>, <macro><name>MKTAG</name><argument_list>(<argument><literal type="char">'a'</literal></argument>,<argument><literal type="char">'v'</literal></argument>,<argument><literal type="char">'c'</literal></argument>,<argument><literal type="char">'1'</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><name>AV_CODEC_ID_VP6A</name></expr>, <macro><name>MKTAG</name><argument_list>(<argument><literal type="char">'V'</literal></argument>,<argument><literal type="char">'P'</literal></argument>,<argument><literal type="char">'6'</literal></argument>,<argument><literal type="char">'A'</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><name>AV_CODEC_ID_VP6F</name></expr>, <macro><name>MKTAG</name><argument_list>(<argument><literal type="char">'V'</literal></argument>,<argument><literal type="char">'P'</literal></argument>,<argument><literal type="char">'6'</literal></argument>,<argument><literal type="char">'F'</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><name>AV_CODEC_ID_NONE</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_MOV_MUXER</name></expr></cpp:if>

<macro><name>MOV_CLASS</name><argument_list>(<argument>mov</argument>)</argument_list></macro>

<decl_stmt><decl><type><name>AVOutputFormat</name></type> <name>ff_mov_muxer</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"mov"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"QuickTime / MOV"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>extensions</name> <operator>=</operator> <literal type="string">"mov"</literal></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>MOVMuxContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>audio_codec</name> <operator>=</operator> <name>AV_CODEC_ID_AAC</name></expr>,

<expr><operator>.</operator><name>video_codec</name> <operator>=</operator> <name>CONFIG_LIBX264_ENCODER</name> <operator>?</operator>

<name>AV_CODEC_ID_H264</name> <operator>:</operator> <name>AV_CODEC_ID_MPEG4</name></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>mov_init</name></expr>,

<expr><operator>.</operator><name>write_header</name> <operator>=</operator> <name>mov_write_header</name></expr>,

<expr><operator>.</operator><name>write_packet</name> <operator>=</operator> <name>mov_write_packet</name></expr>,

<expr><operator>.</operator><name>write_trailer</name> <operator>=</operator> <name>mov_write_trailer</name></expr>,

<expr><operator>.</operator><name>deinit</name> <operator>=</operator> <name>mov_free</name></expr>,

<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>AVFMT_GLOBALHEADER</name> <operator>|</operator> <name>AVFMT_ALLOW_FLUSH</name> <operator>|</operator> <name>AVFMT_TS_NEGATIVE</name></expr>,

<expr><operator>.</operator><name>codec_tag</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>AVCodecTag</name><operator>*</operator> <specifier>const</specifier> <index>[]</index><operator>)</operator><block>{

<expr><name>ff_codec_movvideo_tags</name></expr>, <expr><name>ff_codec_movaudio_tags</name></expr>, <expr><name>ff_codec_movsubtitle_tags</name></expr>, <expr><literal type="number">0</literal></expr>

}</block></expr>,

<expr><operator>.</operator><name>check_bitstream</name> <operator>=</operator> <name>mov_check_bitstream</name></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>mov_muxer_class</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_TGP_MUXER</name></expr></cpp:if>

<macro><name>MOV_CLASS</name><argument_list>(<argument>tgp</argument>)</argument_list></macro>

<decl_stmt><decl><type><name>AVOutputFormat</name></type> <name>ff_tgp_muxer</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"3gp"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"3GP (3GPP file format)"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>extensions</name> <operator>=</operator> <literal type="string">"3gp"</literal></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>MOVMuxContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>audio_codec</name> <operator>=</operator> <name>AV_CODEC_ID_AMR_NB</name></expr>,

<expr><operator>.</operator><name>video_codec</name> <operator>=</operator> <name>AV_CODEC_ID_H263</name></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>mov_init</name></expr>,

<expr><operator>.</operator><name>write_header</name> <operator>=</operator> <name>mov_write_header</name></expr>,

<expr><operator>.</operator><name>write_packet</name> <operator>=</operator> <name>mov_write_packet</name></expr>,

<expr><operator>.</operator><name>write_trailer</name> <operator>=</operator> <name>mov_write_trailer</name></expr>,

<expr><operator>.</operator><name>deinit</name> <operator>=</operator> <name>mov_free</name></expr>,

<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>AVFMT_GLOBALHEADER</name> <operator>|</operator> <name>AVFMT_ALLOW_FLUSH</name> <operator>|</operator> <name>AVFMT_TS_NEGATIVE</name></expr>,

<expr><operator>.</operator><name>codec_tag</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>AVCodecTag</name><operator>*</operator> <specifier>const</specifier> <index>[]</index><operator>)</operator><block>{ <expr><name>codec_3gp_tags</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><operator>.</operator><name>check_bitstream</name> <operator>=</operator> <name>mov_check_bitstream</name></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>tgp_muxer_class</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_MP4_MUXER</name></expr></cpp:if>

<macro><name>MOV_CLASS</name><argument_list>(<argument>mp4</argument>)</argument_list></macro>

<decl_stmt><decl><type><name>AVOutputFormat</name></type> <name>ff_mp4_muxer</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"mp4"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"MP4 (MPEG-4 Part 14)"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>mime_type</name> <operator>=</operator> <literal type="string">"video/mp4"</literal></expr>,

<expr><operator>.</operator><name>extensions</name> <operator>=</operator> <literal type="string">"mp4"</literal></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>MOVMuxContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>audio_codec</name> <operator>=</operator> <name>AV_CODEC_ID_AAC</name></expr>,

<expr><operator>.</operator><name>video_codec</name> <operator>=</operator> <name>CONFIG_LIBX264_ENCODER</name> <operator>?</operator>

<name>AV_CODEC_ID_H264</name> <operator>:</operator> <name>AV_CODEC_ID_MPEG4</name></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>mov_init</name></expr>,

<expr><operator>.</operator><name>write_header</name> <operator>=</operator> <name>mov_write_header</name></expr>,

<expr><operator>.</operator><name>write_packet</name> <operator>=</operator> <name>mov_write_packet</name></expr>,

<expr><operator>.</operator><name>write_trailer</name> <operator>=</operator> <name>mov_write_trailer</name></expr>,

<expr><operator>.</operator><name>deinit</name> <operator>=</operator> <name>mov_free</name></expr>,

<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>AVFMT_GLOBALHEADER</name> <operator>|</operator> <name>AVFMT_ALLOW_FLUSH</name> <operator>|</operator> <name>AVFMT_TS_NEGATIVE</name></expr>,

<expr><operator>.</operator><name>codec_tag</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>AVCodecTag</name><operator>*</operator> <specifier>const</specifier> <index>[]</index><operator>)</operator><block>{ <expr><name>codec_mp4_tags</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><operator>.</operator><name>check_bitstream</name> <operator>=</operator> <name>mov_check_bitstream</name></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>mp4_muxer_class</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_PSP_MUXER</name></expr></cpp:if>

<macro><name>MOV_CLASS</name><argument_list>(<argument>psp</argument>)</argument_list></macro>

<decl_stmt><decl><type><name>AVOutputFormat</name></type> <name>ff_psp_muxer</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"psp"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"PSP MP4 (MPEG-4 Part 14)"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>extensions</name> <operator>=</operator> <literal type="string">"mp4,psp"</literal></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>MOVMuxContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>audio_codec</name> <operator>=</operator> <name>AV_CODEC_ID_AAC</name></expr>,

<expr><operator>.</operator><name>video_codec</name> <operator>=</operator> <name>CONFIG_LIBX264_ENCODER</name> <operator>?</operator>

<name>AV_CODEC_ID_H264</name> <operator>:</operator> <name>AV_CODEC_ID_MPEG4</name></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>mov_init</name></expr>,

<expr><operator>.</operator><name>write_header</name> <operator>=</operator> <name>mov_write_header</name></expr>,

<expr><operator>.</operator><name>write_packet</name> <operator>=</operator> <name>mov_write_packet</name></expr>,

<expr><operator>.</operator><name>write_trailer</name> <operator>=</operator> <name>mov_write_trailer</name></expr>,

<expr><operator>.</operator><name>deinit</name> <operator>=</operator> <name>mov_free</name></expr>,

<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>AVFMT_GLOBALHEADER</name> <operator>|</operator> <name>AVFMT_ALLOW_FLUSH</name> <operator>|</operator> <name>AVFMT_TS_NEGATIVE</name></expr>,

<expr><operator>.</operator><name>codec_tag</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>AVCodecTag</name><operator>*</operator> <specifier>const</specifier> <index>[]</index><operator>)</operator><block>{ <expr><name>codec_mp4_tags</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><operator>.</operator><name>check_bitstream</name> <operator>=</operator> <name>mov_check_bitstream</name></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>psp_muxer_class</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_TG2_MUXER</name></expr></cpp:if>

<macro><name>MOV_CLASS</name><argument_list>(<argument>tg2</argument>)</argument_list></macro>

<decl_stmt><decl><type><name>AVOutputFormat</name></type> <name>ff_tg2_muxer</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"3g2"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"3GP2 (3GPP2 file format)"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>extensions</name> <operator>=</operator> <literal type="string">"3g2"</literal></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>MOVMuxContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>audio_codec</name> <operator>=</operator> <name>AV_CODEC_ID_AMR_NB</name></expr>,

<expr><operator>.</operator><name>video_codec</name> <operator>=</operator> <name>AV_CODEC_ID_H263</name></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>mov_init</name></expr>,

<expr><operator>.</operator><name>write_header</name> <operator>=</operator> <name>mov_write_header</name></expr>,

<expr><operator>.</operator><name>write_packet</name> <operator>=</operator> <name>mov_write_packet</name></expr>,

<expr><operator>.</operator><name>write_trailer</name> <operator>=</operator> <name>mov_write_trailer</name></expr>,

<expr><operator>.</operator><name>deinit</name> <operator>=</operator> <name>mov_free</name></expr>,

<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>AVFMT_GLOBALHEADER</name> <operator>|</operator> <name>AVFMT_ALLOW_FLUSH</name> <operator>|</operator> <name>AVFMT_TS_NEGATIVE</name></expr>,

<expr><operator>.</operator><name>codec_tag</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>AVCodecTag</name><operator>*</operator> <specifier>const</specifier> <index>[]</index><operator>)</operator><block>{ <expr><name>codec_3gp_tags</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><operator>.</operator><name>check_bitstream</name> <operator>=</operator> <name>mov_check_bitstream</name></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>tg2_muxer_class</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_IPOD_MUXER</name></expr></cpp:if>

<macro><name>MOV_CLASS</name><argument_list>(<argument>ipod</argument>)</argument_list></macro>

<decl_stmt><decl><type><name>AVOutputFormat</name></type> <name>ff_ipod_muxer</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"ipod"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"iPod H.264 MP4 (MPEG-4 Part 14)"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>mime_type</name> <operator>=</operator> <literal type="string">"video/mp4"</literal></expr>,

<expr><operator>.</operator><name>extensions</name> <operator>=</operator> <literal type="string">"m4v,m4a,m4b"</literal></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>MOVMuxContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>audio_codec</name> <operator>=</operator> <name>AV_CODEC_ID_AAC</name></expr>,

<expr><operator>.</operator><name>video_codec</name> <operator>=</operator> <name>AV_CODEC_ID_H264</name></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>mov_init</name></expr>,

<expr><operator>.</operator><name>write_header</name> <operator>=</operator> <name>mov_write_header</name></expr>,

<expr><operator>.</operator><name>write_packet</name> <operator>=</operator> <name>mov_write_packet</name></expr>,

<expr><operator>.</operator><name>write_trailer</name> <operator>=</operator> <name>mov_write_trailer</name></expr>,

<expr><operator>.</operator><name>deinit</name> <operator>=</operator> <name>mov_free</name></expr>,

<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>AVFMT_GLOBALHEADER</name> <operator>|</operator> <name>AVFMT_ALLOW_FLUSH</name> <operator>|</operator> <name>AVFMT_TS_NEGATIVE</name></expr>,

<expr><operator>.</operator><name>codec_tag</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>AVCodecTag</name><operator>*</operator> <specifier>const</specifier> <index>[]</index><operator>)</operator><block>{ <expr><name>codec_ipod_tags</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><operator>.</operator><name>check_bitstream</name> <operator>=</operator> <name>mov_check_bitstream</name></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>ipod_muxer_class</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_ISMV_MUXER</name></expr></cpp:if>

<macro><name>MOV_CLASS</name><argument_list>(<argument>ismv</argument>)</argument_list></macro>

<decl_stmt><decl><type><name>AVOutputFormat</name></type> <name>ff_ismv_muxer</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"ismv"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"ISMV/ISMA (Smooth Streaming)"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>mime_type</name> <operator>=</operator> <literal type="string">"video/mp4"</literal></expr>,

<expr><operator>.</operator><name>extensions</name> <operator>=</operator> <literal type="string">"ismv,isma"</literal></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>MOVMuxContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>audio_codec</name> <operator>=</operator> <name>AV_CODEC_ID_AAC</name></expr>,

<expr><operator>.</operator><name>video_codec</name> <operator>=</operator> <name>AV_CODEC_ID_H264</name></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>mov_init</name></expr>,

<expr><operator>.</operator><name>write_header</name> <operator>=</operator> <name>mov_write_header</name></expr>,

<expr><operator>.</operator><name>write_packet</name> <operator>=</operator> <name>mov_write_packet</name></expr>,

<expr><operator>.</operator><name>write_trailer</name> <operator>=</operator> <name>mov_write_trailer</name></expr>,

<expr><operator>.</operator><name>deinit</name> <operator>=</operator> <name>mov_free</name></expr>,

<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>AVFMT_GLOBALHEADER</name> <operator>|</operator> <name>AVFMT_ALLOW_FLUSH</name> <operator>|</operator> <name>AVFMT_TS_NEGATIVE</name></expr>,

<expr><operator>.</operator><name>codec_tag</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>AVCodecTag</name><operator>*</operator> <specifier>const</specifier> <index>[]</index><operator>)</operator><block>{

<expr><name>codec_mp4_tags</name></expr>, <expr><name>codec_ism_tags</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><operator>.</operator><name>check_bitstream</name> <operator>=</operator> <name>mov_check_bitstream</name></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>ismv_muxer_class</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_F4V_MUXER</name></expr></cpp:if>

<macro><name>MOV_CLASS</name><argument_list>(<argument>f4v</argument>)</argument_list></macro>

<decl_stmt><decl><type><name>AVOutputFormat</name></type> <name>ff_f4v_muxer</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"f4v"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"F4V Adobe Flash Video"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>mime_type</name> <operator>=</operator> <literal type="string">"application/f4v"</literal></expr>,

<expr><operator>.</operator><name>extensions</name> <operator>=</operator> <literal type="string">"f4v"</literal></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>MOVMuxContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>audio_codec</name> <operator>=</operator> <name>AV_CODEC_ID_AAC</name></expr>,

<expr><operator>.</operator><name>video_codec</name> <operator>=</operator> <name>AV_CODEC_ID_H264</name></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>mov_init</name></expr>,

<expr><operator>.</operator><name>write_header</name> <operator>=</operator> <name>mov_write_header</name></expr>,

<expr><operator>.</operator><name>write_packet</name> <operator>=</operator> <name>mov_write_packet</name></expr>,

<expr><operator>.</operator><name>write_trailer</name> <operator>=</operator> <name>mov_write_trailer</name></expr>,

<expr><operator>.</operator><name>deinit</name> <operator>=</operator> <name>mov_free</name></expr>,

<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>AVFMT_GLOBALHEADER</name> <operator>|</operator> <name>AVFMT_ALLOW_FLUSH</name></expr>,

<expr><operator>.</operator><name>codec_tag</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>AVCodecTag</name><operator>*</operator> <specifier>const</specifier> <index>[]</index><operator>)</operator><block>{ <expr><name>codec_f4v_tags</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><operator>.</operator><name>check_bitstream</name> <operator>=</operator> <name>mov_check_bitstream</name></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>f4v_muxer_class</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
