<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavformat\mpegvideodec.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avformat.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rawdec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/internal.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEQ_START_CODE</name></cpp:macro> <cpp:value>0x000001b3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GOP_START_CODE</name></cpp:macro> <cpp:value>0x000001b8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PICTURE_START_CODE</name></cpp:macro> <cpp:value>0x00000100</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SLICE_START_CODE</name></cpp:macro> <cpp:value>0x00000101</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PACK_START_CODE</name></cpp:macro> <cpp:value>0x000001ba</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIDEO_ID</name></cpp:macro> <cpp:value>0x000001e0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AUDIO_ID</name></cpp:macro> <cpp:value>0x000001c0</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mpegvideo_probe</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVProbeData</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>code</name><init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pic</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>seq</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>slice</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>pspack</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>vpes</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>apes</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>res</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>sicle</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>buf</name></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>end</name> <init>= <expr><name>ptr</name> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>buf_size</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>last</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<while>while <condition>(<expr><name>ptr</name> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>avpriv_find_start_code</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>code</name> <operator>&amp;</operator> <literal type="number">0xffffff00</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x100</literal></expr>)</condition> <block>{<block_content>

<switch>switch<condition>(<expr><name>code</name></expr>)</condition><block>{<block_content>

<case>case <expr><name>SEQ_START_CODE</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>ptr</name><index>[<expr><literal type="number">3</literal> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x20</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>j</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ptr</name><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">8</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>j</name><operator>+=</operator> <literal type="number">64</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&gt;=</operator> <name>end</name> <operator>-</operator> <name>ptr</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ptr</name><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">8</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>j</name><operator>+=</operator> <literal type="number">64</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&gt;=</operator> <name>end</name> <operator>-</operator> <name>ptr</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>AV_RB24</name><argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <name>j</name> <operator>+</operator> <literal type="number">9</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0xFFFFFE</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>seq</name><operator>++</operator></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>PICTURE_START_CODE</name></expr>:</case> <expr_stmt><expr><name>pic</name><operator>++</operator></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>PACK_START_CODE</name></expr>:</case> <expr_stmt><expr><name>pspack</name><operator>++</operator></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">0x1b6</literal></expr>:</case>

<expr_stmt><expr><name>res</name><operator>++</operator></expr>;</expr_stmt> <break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>code</name> <operator>&gt;=</operator> <name>SLICE_START_CODE</name> <operator>&amp;&amp;</operator> <name>code</name> <operator>&lt;=</operator> <literal type="number">0x1af</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>last</name> <operator>&gt;=</operator> <name>SLICE_START_CODE</name> <operator>&amp;&amp;</operator> <name>last</name> <operator>&lt;=</operator> <literal type="number">0x1af</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>code</name> <operator>&gt;=</operator> <name>last</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>slice</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>sicle</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <name>SLICE_START_CODE</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>slice</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>sicle</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>code</name> <operator>&amp;</operator> <literal type="number">0x1f0</literal><operator>)</operator> <operator>==</operator> <name>VIDEO_ID</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>vpes</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><operator>(</operator><name>code</name> <operator>&amp;</operator> <literal type="number">0x1e0</literal><operator>)</operator> <operator>==</operator> <name>AUDIO_ID</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>apes</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>last</name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if<condition>(<expr><name>seq</name> <operator>&amp;&amp;</operator> <name>seq</name><operator>*</operator><literal type="number">9</literal><operator>&lt;=</operator><name>pic</name><operator>*</operator><literal type="number">10</literal> <operator>&amp;&amp;</operator> <name>pic</name><operator>*</operator><literal type="number">9</literal><operator>&lt;=</operator><name>slice</name><operator>*</operator><literal type="number">10</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>pspack</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>apes</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>res</name> <operator>&amp;&amp;</operator> <name>slice</name> <operator>&gt;</operator> <name>sicle</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>vpes</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>AVPROBE_SCORE_EXTENSION</name> <operator>/</operator> <literal type="number">4</literal></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content> <return>return <expr><ternary><condition><expr><name>pic</name><operator>&gt;</operator><literal type="number">1</literal></expr> ?</condition><then> <expr><name>AVPROBE_SCORE_EXTENSION</name> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><name>AVPROBE_SCORE_EXTENSION</name> <operator>/</operator> <literal type="number">2</literal></expr></else></ternary></expr>;</return></block_content></block></else></if_stmt> 

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<macro><name>FF_DEF_RAWVIDEO_DEMUXER</name><argument_list>(<argument>mpegvideo</argument>, <argument><literal type="string">"raw MPEG video"</literal></argument>, <argument>mpegvideo_probe</argument>, <argument>NULL</argument>, <argument>AV_CODEC_ID_MPEG1VIDEO</argument>)</argument_list></macro>

</unit>
