<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavformat\mpeg.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avformat.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avio_internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpeg.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_SYNC_SIZE</name></cpp:macro> <cpp:value>100000</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>check_pes</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>end</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>pes1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pes2</name> <init>= <expr><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xC0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x80</literal> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>p</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xC0</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0x40</literal> <operator>&amp;&amp;</operator>

<operator>(</operator><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xC0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00</literal> <operator>||</operator>

<operator>(</operator><name><name>p</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xC0</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal> <operator>==</operator> <operator>(</operator><name><name>p</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xF0</literal><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>end</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="number">0xFF</literal></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <empty_stmt>;</empty_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>p</name> <operator>&amp;</operator> <literal type="number">0xC0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x40</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>p</name> <operator>&amp;</operator> <literal type="number">0xF0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x20</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>pes1</name> <operator>=</operator> <name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>(</operator><operator>*</operator><name>p</name> <operator>&amp;</operator> <literal type="number">0xF0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x30</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>pes1</name> <operator>=</operator> <name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>pes1</name> <operator>=</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="number">0x0F</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>pes1</name> <operator>||</operator> <name>pes2</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>check_pack_header</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xC0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x40</literal> <operator>||</operator> <operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xF0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x20</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mpegps_probe</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVProbeData</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>code</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sys</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>pspack</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>priv1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>vid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>audio</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>invalid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>score</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>endpes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p</name><operator>-&gt;</operator><name>buf_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>code</name> <operator>=</operator> <operator>(</operator><name>code</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>code</name> <operator>&amp;</operator> <literal type="number">0xffffff00</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x100</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>|</operator> <name><name>p</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pes</name> <init>= <expr><name>endpes</name> <operator>&lt;=</operator> <name>i</name> <operator>&amp;&amp;</operator> <call><name>check_pes</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>buf_size</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pack</name> <init>= <expr><call><name>check_pack_header</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <name>SYSTEM_HEADER_START_CODE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>sys</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>code</name> <operator>==</operator> <name>PACK_START_CODE</name> <operator>&amp;&amp;</operator> <name>pack</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>pspack</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>(</operator><name>code</name> <operator>&amp;</operator> <literal type="number">0xf0</literal><operator>)</operator> <operator>==</operator> <name>VIDEO_ID</name> <operator>&amp;&amp;</operator> <name>pes</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>endpes</name> <operator>=</operator> <name>i</name> <operator>+</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><name>vid</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>(</operator><name>code</name> <operator>&amp;</operator> <literal type="number">0xe0</literal><operator>)</operator> <operator>==</operator> <name>AUDIO_ID</name> <operator>&amp;&amp;</operator> <name>pes</name></expr>)</condition> <block>{<block_content><expr_stmt><expr><name>audio</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>i</name><operator>+=</operator><name>len</name></expr>;</expr_stmt></block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>code</name> <operator>==</operator> <name>PRIVATE_STREAM_1</name> <operator>&amp;&amp;</operator> <name>pes</name></expr>)</condition> <block>{<block_content><expr_stmt><expr><name>priv1</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>i</name><operator>+=</operator><name>len</name></expr>;</expr_stmt></block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>code</name> <operator>==</operator> <literal type="number">0x1fd</literal> <operator>&amp;&amp;</operator> <name>pes</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>vid</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if> 

<if type="elseif">else if <condition>(<expr><operator>(</operator><name>code</name> <operator>&amp;</operator> <literal type="number">0xf0</literal><operator>)</operator> <operator>==</operator> <name>VIDEO_ID</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>pes</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>invalid</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>(</operator><name>code</name> <operator>&amp;</operator> <literal type="number">0xe0</literal><operator>)</operator> <operator>==</operator> <name>AUDIO_ID</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>pes</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>invalid</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>code</name> <operator>==</operator> <name>PRIVATE_STREAM_1</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>pes</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>invalid</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>vid</name> <operator>+</operator> <name>audio</name> <operator>&gt;</operator> <name>invalid</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>score</name> <operator>=</operator> <name>AVPROBE_SCORE_EXTENSION</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sys</name> <operator>&gt;</operator> <name>invalid</name> <operator>&amp;&amp;</operator> <name>sys</name> <operator>*</operator> <literal type="number">9</literal> <operator>&lt;=</operator> <name>pspack</name> <operator>*</operator> <literal type="number">10</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><ternary><condition><expr><operator>(</operator><name>audio</name> <operator>&gt;</operator> <literal type="number">12</literal> <operator>||</operator> <name>vid</name> <operator>&gt;</operator> <literal type="number">3</literal> <operator>||</operator> <name>pspack</name> <operator>&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr> ?</condition><then> <expr><name>AVPROBE_SCORE_EXTENSION</name> <operator>+</operator> <literal type="number">2</literal></expr>

</then><else>: <expr><name>AVPROBE_SCORE_EXTENSION</name> <operator>/</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name>pspack</name> <operator>&gt;</operator> <name>invalid</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>priv1</name> <operator>+</operator> <name>vid</name> <operator>+</operator> <name>audio</name><operator>)</operator> <operator>*</operator> <literal type="number">10</literal> <operator>&gt;=</operator> <name>pspack</name> <operator>*</operator> <literal type="number">9</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><ternary><condition><expr><name>pspack</name> <operator>&gt;</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><name>AVPROBE_SCORE_EXTENSION</name> <operator>+</operator> <literal type="number">2</literal></expr>

</then><else>: <expr><name>AVPROBE_SCORE_EXTENSION</name> <operator>/</operator> <literal type="number">2</literal></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><operator>!</operator><name>vid</name> <operator>^</operator> <operator>!</operator><operator>!</operator><name>audio</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>audio</name> <operator>&gt;</operator> <literal type="number">4</literal> <operator>||</operator> <name>vid</name> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name>sys</name> <operator>&amp;&amp;</operator>

<operator>!</operator><name>pspack</name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>buf_size</name></name> <operator>&gt;</operator> <literal type="number">2048</literal> <operator>&amp;&amp;</operator> <name>vid</name> <operator>+</operator> <name>audio</name> <operator>&gt;</operator> <name>invalid</name></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><ternary><condition><expr><operator>(</operator><name>audio</name> <operator>&gt;</operator> <literal type="number">12</literal> <operator>||</operator> <name>vid</name> <operator>&gt;</operator> <literal type="number">6</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>invalid</name><operator>)</operator></expr> ?</condition><then> <expr><name>AVPROBE_SCORE_EXTENSION</name> <operator>+</operator> <literal type="number">2</literal></expr>

</then><else>: <expr><name>AVPROBE_SCORE_EXTENSION</name> <operator>/</operator> <literal type="number">2</literal></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>score</name></expr>;</return>

</block_content>}</block></function>

<typedef>typedef <type><struct>struct <name>MpegDemuxContext</name> <block>{

<decl_stmt><decl><type><name>int32_t</name></type> <name>header_state</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>psm_es_type</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sofdec</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dvd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>imkh_cctv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>raw_ac3</name></decl>;</decl_stmt>

}</block></struct></type> <name>MpegDemuxContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mpegps_read_header</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MpegDemuxContext</name> <modifier>*</modifier></type><name>m</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>last_pos</name> <init>= <expr><call><name>avio_tell</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>header_state</name></name> <operator>=</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ctx_flags</name></name> <operator>|=</operator> <name>AVFMTCTX_NOHEADER</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_get_str</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><literal type="string">"IMKH"</literal></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>imkh_cctv</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><literal type="string">"Sofdec"</literal></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>sofdec</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>last_pos</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64_t</name></type> <name>get_pts</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>buf</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>c</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><call><name>avio_r8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>c</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_read</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>ff_parse_pes_pts</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>find_next_start_code</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>size_ptr</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>header_state</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>state</name></decl>, <decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>val</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>

<expr_stmt><expr><name>state</name> <operator>=</operator> <operator>*</operator><name>header_state</name></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>*</operator><name>size_ptr</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>avio_feof</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>avio_r8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <literal type="number">0x000001</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>state</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>state</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name>v</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xffffff</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <name>state</name></expr>;</expr_stmt>

<goto>goto <name>found</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>state</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>state</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name>v</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xffffff</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<label><name>found</name>:</label>

<expr_stmt><expr><operator>*</operator><name>header_state</name> <operator>=</operator> <name>state</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>size_ptr</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>

<return>return <expr><name>val</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name></type> <name>mpegps_psm_parse</name><parameter_list>(<parameter><decl><type><name>MpegDemuxContext</name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>psm_length</name></decl>, <decl><type ref="prev"/><name>ps_info_length</name></decl>, <decl><type ref="prev"/><name>es_map_length</name></decl>;</decl_stmt>

<expr_stmt><expr><name>psm_length</name> <operator>=</operator> <call><name>avio_rb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_r8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_r8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ps_info_length</name> <operator>=</operator> <call><name>avio_rb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>ps_info_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_rb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>es_map_length</name> <operator>=</operator> <name>psm_length</name> <operator>-</operator> <name>ps_info_length</name> <operator>-</operator> <literal type="number">10</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>es_map_length</name> <operator>&gt;=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>type</name> <init>= <expr><call><name>avio_r8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>es_id</name> <init>= <expr><call><name>avio_r8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>es_info_length</name> <init>= <expr><call><name>avio_rb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>psm_es_type</name><index>[<expr><name>es_id</name></expr>]</index></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>es_info_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>es_map_length</name> <operator>-=</operator> <literal type="number">4</literal> <operator>+</operator> <name>es_info_length</name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>avio_rb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<return>return <expr><literal type="number">2</literal> <operator>+</operator> <name>psm_length</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mpegps_read_pes_header</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,

<parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>ppos</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pstart_code</name></decl></parameter>,

<parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>ppts</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>pdts</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MpegDemuxContext</name> <modifier>*</modifier></type><name>m</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>size</name></decl>, <decl><type ref="prev"/><name>startcode</name></decl>, <decl><type ref="prev"/><name>c</name></decl>, <decl><type ref="prev"/><name>flags</name></decl>, <decl><type ref="prev"/><name>header_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pes_ext</name></decl>, <decl><type ref="prev"/><name>ext2_len</name></decl>, <decl><type ref="prev"/><name>id_ext</name></decl>, <decl><type ref="prev"/><name>skip</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>pts</name></decl>, <decl><type ref="prev"/><name>dts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>last_sync</name> <init>= <expr><call><name>avio_tell</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<label><name>error_redo</name>:</label>

<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>last_sync</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>redo</name>:</label>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>header_state</name></name> <operator>=</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <name>MAX_SYNC_SIZE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>startcode</name> <operator>=</operator> <call><name>find_next_start_code</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>header_state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>last_sync</name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>startcode</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>avio_feof</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_EOF</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>FFERROR_REDO</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>startcode</name> <operator>==</operator> <name>PACK_START_CODE</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>redo</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>startcode</name> <operator>==</operator> <name>SYSTEM_HEADER_START_CODE</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>redo</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>startcode</name> <operator>==</operator> <name>PADDING_STREAM</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><call><name>avio_rb16</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>redo</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>startcode</name> <operator>==</operator> <name>PRIVATE_STREAM_2</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>m</name><operator>-&gt;</operator><name>sofdec</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>avio_rb16</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bytesread</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ps2buf</name> <init>= <expr><call><name>av_malloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ps2buf</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>bytesread</name> <operator>=</operator> <call><name>avio_read</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>ps2buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bytesread</name> <operator>!=</operator> <name>len</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <name>bytesread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <literal type="number">6</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>memchr</name><argument_list>(<argument><expr><name>ps2buf</name></expr></argument>, <argument><expr><literal type="char">'S'</literal></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>sofdec</name></name> <operator>=</operator> <operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>p</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"ofdec"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>sofdec</name></name> <operator>-=</operator> <operator>!</operator><name><name>m</name><operator>-&gt;</operator><name>sofdec</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>sofdec</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">980</literal> <operator>&amp;&amp;</operator> <name><name>ps2buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>startpts</name> <init>= <expr><call><name>AV_RB32</name><argument_list>(<argument><expr><name>ps2buf</name> <operator>+</operator> <literal type="number">0x0d</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>endpts</name> <init>= <expr><call><name>AV_RB32</name><argument_list>(<argument><expr><name>ps2buf</name> <operator>+</operator> <literal type="number">0x11</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>hours</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>ps2buf</name><index>[<expr><literal type="number">0x19</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>*</operator> <literal type="number">10</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>ps2buf</name><index>[<expr><literal type="number">0x19</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0f</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>mins</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>ps2buf</name><index>[<expr><literal type="number">0x1a</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>*</operator> <literal type="number">10</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>ps2buf</name><index>[<expr><literal type="number">0x1a</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0f</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>secs</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>ps2buf</name><index>[<expr><literal type="number">0x1b</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>*</operator> <literal type="number">10</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>ps2buf</name><index>[<expr><literal type="number">0x1b</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0f</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>dvd</name></name> <operator>=</operator> <operator>(</operator><name>hours</name> <operator>&lt;=</operator> <literal type="number">23</literal> <operator>&amp;&amp;</operator>

<name>mins</name> <operator>&lt;=</operator> <literal type="number">59</literal> <operator>&amp;&amp;</operator>

<name>secs</name> <operator>&lt;=</operator> <literal type="number">59</literal> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>ps2buf</name><index>[<expr><literal type="number">0x19</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0f</literal><operator>)</operator> <operator>&lt;</operator> <literal type="number">10</literal> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>ps2buf</name><index>[<expr><literal type="number">0x1a</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0f</literal><operator>)</operator> <operator>&lt;</operator> <literal type="number">10</literal> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>ps2buf</name><index>[<expr><literal type="number">0x1b</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0f</literal><operator>)</operator> <operator>&lt;</operator> <literal type="number">10</literal> <operator>&amp;&amp;</operator>

<name>endpts</name> <operator>&gt;=</operator> <name>startpts</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">1018</literal> <operator>&amp;&amp;</operator> <name><name>ps2buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>hours</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>ps2buf</name><index>[<expr><literal type="number">0x1d</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>*</operator> <literal type="number">10</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>ps2buf</name><index>[<expr><literal type="number">0x1d</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0f</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>mins</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>ps2buf</name><index>[<expr><literal type="number">0x1e</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>*</operator> <literal type="number">10</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>ps2buf</name><index>[<expr><literal type="number">0x1e</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0f</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>secs</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>ps2buf</name><index>[<expr><literal type="number">0x1f</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>*</operator> <literal type="number">10</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>ps2buf</name><index>[<expr><literal type="number">0x1f</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0f</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>dvd</name></name> <operator>=</operator> <operator>(</operator><name>hours</name> <operator>&lt;=</operator> <literal type="number">23</literal> <operator>&amp;&amp;</operator>

<name>mins</name> <operator>&lt;=</operator> <literal type="number">59</literal> <operator>&amp;&amp;</operator>

<name>secs</name> <operator>&lt;=</operator> <literal type="number">59</literal> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>ps2buf</name><index>[<expr><literal type="number">0x1d</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0f</literal><operator>)</operator> <operator>&lt;</operator> <literal type="number">10</literal> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>ps2buf</name><index>[<expr><literal type="number">0x1e</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0f</literal><operator>)</operator> <operator>&lt;</operator> <literal type="number">10</literal> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>ps2buf</name><index>[<expr><literal type="number">0x1f</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0f</literal><operator>)</operator> <operator>&lt;</operator> <literal type="number">10</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>ps2buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>m</name><operator>-&gt;</operator><name>dvd</name></name> <operator>||</operator> <call><name>avio_skip</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><operator>-</operator><operator>(</operator><name>len</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<goto>goto <name>redo</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>redo</name>;</goto>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>m</name><operator>-&gt;</operator><name>dvd</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>avio_rb16</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>redo</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>startcode</name> <operator>==</operator> <name>PROGRAM_STREAM_MAP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>mpegps_psm_parse</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>redo</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>(</operator><name>startcode</name> <operator>&gt;=</operator> <literal type="number">0x1c0</literal> <operator>&amp;&amp;</operator> <name>startcode</name> <operator>&lt;=</operator> <literal type="number">0x1df</literal><operator>)</operator> <operator>||</operator>

<operator>(</operator><name>startcode</name> <operator>&gt;=</operator> <literal type="number">0x1e0</literal> <operator>&amp;&amp;</operator> <name>startcode</name> <operator>&lt;=</operator> <literal type="number">0x1ef</literal><operator>)</operator> <operator>||</operator>

<operator>(</operator><name>startcode</name> <operator>==</operator> <literal type="number">0x1bd</literal><operator>)</operator> <operator>||</operator>

<operator>(</operator><name>startcode</name> <operator>==</operator> <name>PRIVATE_STREAM_2</name><operator>)</operator> <operator>||</operator>

<operator>(</operator><name>startcode</name> <operator>==</operator> <literal type="number">0x1fd</literal><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>redo</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ppos</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>ppos</name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>avio_rb16</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pts</name> <operator>=</operator>

<name>dts</name> <operator>=</operator> <name>AV_NOPTS_VALUE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>startcode</name> <operator>!=</operator> <name>PRIVATE_STREAM_2</name></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error_redo</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>avio_r8</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <literal type="number">0xff</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c</name> <operator>&amp;</operator> <literal type="number">0xc0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x40</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avio_r8</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>avio_r8</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c</name> <operator>&amp;</operator> <literal type="number">0xe0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x20</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>dts</name> <operator>=</operator>

<name>pts</name> <operator>=</operator> <call><name>get_pts</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&amp;</operator> <literal type="number">0x10</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>dts</name> <operator>=</operator> <call><name>get_pts</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>c</name> <operator>&amp;</operator> <literal type="number">0xc0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>flags</name> <operator>=</operator> <call><name>avio_r8</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>header_len</name> <operator>=</operator> <call><name>avio_r8</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>header_len</name> <operator>&gt;</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error_redo</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>header_len</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>dts</name> <operator>=</operator> <name>pts</name> <operator>=</operator> <call><name>get_pts</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>header_len</name> <operator>-=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <literal type="number">0x40</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>dts</name> <operator>=</operator> <call><name>get_pts</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>header_len</name> <operator>-=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <literal type="number">0x3f</literal> <operator>&amp;&amp;</operator> <name>header_len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>flags</name> <operator>&amp;=</operator> <literal type="number">0xC0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Further flags set but no bytes left\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <literal type="number">0x01</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>pes_ext</name> <operator>=</operator> <call><name>avio_r8</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>header_len</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>skip</name> <operator>=</operator> <operator>(</operator><name>pes_ext</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xb</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>skip</name> <operator>+=</operator> <name>skip</name> <operator>&amp;</operator> <literal type="number">0x9</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pes_ext</name> <operator>&amp;</operator> <literal type="number">0x40</literal> <operator>||</operator> <name>skip</name> <operator>&gt;</operator> <name>header_len</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"pes_ext %X is invalid\n"</literal></expr></argument>, <argument><expr><name>pes_ext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pes_ext</name> <operator>=</operator> <name>skip</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>skip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>header_len</name> <operator>-=</operator> <name>skip</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pes_ext</name> <operator>&amp;</operator> <literal type="number">0x01</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>ext2_len</name> <operator>=</operator> <call><name>avio_r8</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>header_len</name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ext2_len</name> <operator>&amp;</operator> <literal type="number">0x7f</literal><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>id_ext</name> <operator>=</operator> <call><name>avio_r8</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>id_ext</name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>startcode</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>startcode</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name>id_ext</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>header_len</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>header_len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error_redo</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>header_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>!=</operator> <literal type="number">0xf</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>redo</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>startcode</name> <operator>==</operator> <name>PRIVATE_STREAM_1</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>ffio_ensure_seekback</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>startcode</name> <operator>=</operator> <call><name>avio_r8</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>raw_ac3</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>startcode</name> <operator>==</operator> <literal type="number">0x0b</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>avio_r8</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0x77</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>startcode</name> <operator>=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>raw_ac3</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error_redo</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dts</name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name> <operator>&amp;&amp;</operator> <name>ppos</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>startcode</name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>id</name> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name><operator>-&gt;</operator><name>seekable</name></name> <operator>&amp;</operator> <name>AVIO_SEEKABLE_NORMAL</name><operator>)</operator></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ff_reduce_index</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_add_index_entry</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>*</operator><name>ppos</name></expr></argument>, <argument><expr><name>dts</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>AVINDEX_KEYFRAME</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>pstart_code</name> <operator>=</operator> <name>startcode</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>ppts</name> <operator>=</operator> <name>pts</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pdts</name> <operator>=</operator> <name>dts</name></expr>;</expr_stmt>

<return>return <expr><name>len</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mpegps_read_packet</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,

<parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MpegDemuxContext</name> <modifier>*</modifier></type><name>m</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>startcode</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>es_type</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pcm_dvd</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>request_probe</name><init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>AVCodecID</name></name></type> <name>codec_id</name> <init>= <expr><name>AV_CODEC_ID_NONE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>AVMediaType</name></name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>pts</name></decl>, <decl><type ref="prev"/><name>dts</name></decl>, <decl><type ref="prev"/><name>dummy_pos</name></decl>;</decl_stmt> 

<label><name>redo</name>:</label>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>mpegps_read_pes_header</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dummy_pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>startcode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>len</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>startcode</name> <operator>&gt;=</operator> <literal type="number">0x80</literal> <operator>&amp;&amp;</operator> <name>startcode</name> <operator>&lt;=</operator> <literal type="number">0xcf</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>skip</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>m</name><operator>-&gt;</operator><name>raw_ac3</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>startcode</name> <operator>&gt;=</operator> <literal type="number">0xb0</literal> <operator>&amp;&amp;</operator> <name>startcode</name> <operator>&lt;=</operator> <literal type="number">0xbf</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avio_r8</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>startcode</name> <operator>&gt;=</operator> <literal type="number">0xa0</literal> <operator>&amp;&amp;</operator> <name>startcode</name> <operator>&lt;=</operator> <literal type="number">0xaf</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ffio_ensure_seekback</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pcm_dvd</name> <operator>=</operator> <operator>(</operator><call><name>avio_rb24</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>st</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name>startcode</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>found</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>es_type</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>psm_es_type</name><index>[<expr><name>startcode</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>es_type</name> <operator>==</operator> <name>STREAM_TYPE_VIDEO_MPEG1</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>codec_id</name> <operator>=</operator> <name>AV_CODEC_ID_MPEG2VIDEO</name></expr>;</expr_stmt>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>es_type</name> <operator>==</operator> <name>STREAM_TYPE_VIDEO_MPEG2</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>codec_id</name> <operator>=</operator> <name>AV_CODEC_ID_MPEG2VIDEO</name></expr>;</expr_stmt>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>es_type</name> <operator>==</operator> <name>STREAM_TYPE_AUDIO_MPEG1</name> <operator>||</operator>

<name>es_type</name> <operator>==</operator> <name>STREAM_TYPE_AUDIO_MPEG2</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>codec_id</name> <operator>=</operator> <name>AV_CODEC_ID_MP3</name></expr>;</expr_stmt>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>es_type</name> <operator>==</operator> <name>STREAM_TYPE_AUDIO_AAC</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>codec_id</name> <operator>=</operator> <name>AV_CODEC_ID_AAC</name></expr>;</expr_stmt>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>es_type</name> <operator>==</operator> <name>STREAM_TYPE_VIDEO_MPEG4</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>codec_id</name> <operator>=</operator> <name>AV_CODEC_ID_MPEG4</name></expr>;</expr_stmt>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>es_type</name> <operator>==</operator> <name>STREAM_TYPE_VIDEO_H264</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>codec_id</name> <operator>=</operator> <name>AV_CODEC_ID_H264</name></expr>;</expr_stmt>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>es_type</name> <operator>==</operator> <name>STREAM_TYPE_VIDEO_HEVC</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>codec_id</name> <operator>=</operator> <name>AV_CODEC_ID_HEVC</name></expr>;</expr_stmt>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>es_type</name> <operator>==</operator> <name>STREAM_TYPE_AUDIO_AC3</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>codec_id</name> <operator>=</operator> <name>AV_CODEC_ID_AC3</name></expr>;</expr_stmt>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>imkh_cctv</name></name> <operator>&amp;&amp;</operator> <name>es_type</name> <operator>==</operator> <literal type="number">0x91</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>codec_id</name> <operator>=</operator> <name>AV_CODEC_ID_PCM_MULAW</name></expr>;</expr_stmt>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>startcode</name> <operator>&gt;=</operator> <literal type="number">0x1e0</literal> <operator>&amp;&amp;</operator> <name>startcode</name> <operator>&lt;=</operator> <literal type="number">0x1ef</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>avs_seqh</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0xb0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>avio_read</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">8</literal></expr></argument>, <argument><expr><name>SEEK_CUR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>avs_seqh</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>buf</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>codec_id</name> <operator>=</operator> <name>AV_CODEC_ID_CAVS</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>request_probe</name><operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>startcode</name> <operator>==</operator> <name>PRIVATE_STREAM_2</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_DATA</name></expr>;</expr_stmt>

<expr_stmt><expr><name>codec_id</name> <operator>=</operator> <name>AV_CODEC_ID_DVD_NAV</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>startcode</name> <operator>&gt;=</operator> <literal type="number">0x1c0</literal> <operator>&amp;&amp;</operator> <name>startcode</name> <operator>&lt;=</operator> <literal type="number">0x1df</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>sofdec</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>codec_id</name> <operator>=</operator> <name>AV_CODEC_ID_ADPCM_ADX</name></expr>;</expr_stmt>

<expr_stmt><expr><name>request_probe</name> <operator>=</operator> <literal type="number">50</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>imkh_cctv</name></name> <operator>&amp;&amp;</operator> <name>startcode</name> <operator>==</operator> <literal type="number">0x1c0</literal> <operator>&amp;&amp;</operator> <name>len</name> <operator>&gt;</operator> <literal type="number">80</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>codec_id</name> <operator>=</operator> <name>AV_CODEC_ID_PCM_ALAW</name></expr>;</expr_stmt>

<expr_stmt><expr><name>request_probe</name> <operator>=</operator> <literal type="number">50</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>codec_id</name> <operator>=</operator> <name>AV_CODEC_ID_MP2</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>imkh_cctv</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>request_probe</name> <operator>=</operator> <literal type="number">25</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>startcode</name> <operator>&gt;=</operator> <literal type="number">0x80</literal> <operator>&amp;&amp;</operator> <name>startcode</name> <operator>&lt;=</operator> <literal type="number">0x87</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>;</expr_stmt>

<expr_stmt><expr><name>codec_id</name> <operator>=</operator> <name>AV_CODEC_ID_AC3</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>startcode</name> <operator>&gt;=</operator> <literal type="number">0x88</literal> <operator>&amp;&amp;</operator> <name>startcode</name> <operator>&lt;=</operator> <literal type="number">0x8f</literal><operator>)</operator> <operator>||</operator>

<operator>(</operator><name>startcode</name> <operator>&gt;=</operator> <literal type="number">0x98</literal> <operator>&amp;&amp;</operator> <name>startcode</name> <operator>&lt;=</operator> <literal type="number">0x9f</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>;</expr_stmt>

<expr_stmt><expr><name>codec_id</name> <operator>=</operator> <name>AV_CODEC_ID_DTS</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>startcode</name> <operator>&gt;=</operator> <literal type="number">0xa0</literal> <operator>&amp;&amp;</operator> <name>startcode</name> <operator>&lt;=</operator> <literal type="number">0xaf</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pcm_dvd</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>codec_id</name> <operator>=</operator> <name>AV_CODEC_ID_MLP</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>codec_id</name> <operator>=</operator> <name>AV_CODEC_ID_PCM_DVD</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>startcode</name> <operator>&gt;=</operator> <literal type="number">0xb0</literal> <operator>&amp;&amp;</operator> <name>startcode</name> <operator>&lt;=</operator> <literal type="number">0xbf</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>;</expr_stmt>

<expr_stmt><expr><name>codec_id</name> <operator>=</operator> <name>AV_CODEC_ID_TRUEHD</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>startcode</name> <operator>&gt;=</operator> <literal type="number">0xc0</literal> <operator>&amp;&amp;</operator> <name>startcode</name> <operator>&lt;=</operator> <literal type="number">0xcf</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>;</expr_stmt>

<expr_stmt><expr><name>codec_id</name> <operator>=</operator> <name>AV_CODEC_ID_AC3</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>startcode</name> <operator>&gt;=</operator> <literal type="number">0x20</literal> <operator>&amp;&amp;</operator> <name>startcode</name> <operator>&lt;=</operator> <literal type="number">0x3f</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_SUBTITLE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>codec_id</name> <operator>=</operator> <name>AV_CODEC_ID_DVD_SUBTITLE</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>startcode</name> <operator>&gt;=</operator> <literal type="number">0xfd55</literal> <operator>&amp;&amp;</operator> <name>startcode</name> <operator>&lt;=</operator> <literal type="number">0xfd5f</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>;</expr_stmt>

<expr_stmt><expr><name>codec_id</name> <operator>=</operator> <name>AV_CODEC_ID_VC1</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<label><name>skip</name>:</label>

<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>redo</name>;</goto>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>st</name> <operator>=</operator> <call><name>avformat_new_stream</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>st</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>skip</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name>startcode</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>=</operator> <name>codec_id</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_PCM_MULAW</name>

<operator>||</operator> <name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_PCM_ALAW</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>channel_layout</name></name> <operator>=</operator> <name>AV_CH_LAYOUT_MONO</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>=</operator> <literal type="number">8000</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>request_probe</name></name> <operator>=</operator> <name>request_probe</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>need_parsing</name></name> <operator>=</operator> <name>AVSTREAM_PARSE_FULL</name></expr>;</expr_stmt>

<label><name>found</name>:</label>

<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>discard</name></name> <operator>&gt;=</operator> <name>AVDISCARD_ALL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>skip</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>startcode</name> <operator>&gt;=</operator> <literal type="number">0xa0</literal> <operator>&amp;&amp;</operator> <name>startcode</name> <operator>&lt;=</operator> <literal type="number">0xaf</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_MLP</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>skip</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>-=</operator><literal type="number">6</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_get_packet</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name>pts</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>dts</name></name> <operator>=</operator> <name>dts</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <name>dummy_pos</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>stream_index</name></name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>index</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>debug</name></name> <operator>&amp;</operator> <name>FF_FDEBUG_TS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"%d: pts=%0.3f dts=%0.3f size=%d\n"</literal></expr></argument>,

<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>stream_index</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name> <operator>/</operator> <literal type="number">90000.0</literal></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>dts</name></name> <operator>/</operator> <literal type="number">90000.0</literal></expr></argument>,

<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>ret</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64_t</name></type> <name>mpegps_read_dts</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stream_index</name></decl></parameter>,

<parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>ppos</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>pos_limit</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>startcode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>pos</name></decl>, <decl><type ref="prev"/><name>pts</name></decl>, <decl><type ref="prev"/><name>dts</name></decl>;</decl_stmt>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <operator>*</operator><name>ppos</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>avio_seek</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AV_NOPTS_VALUE</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>mpegps_read_pes_header</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>startcode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>debug</name></name> <operator>&amp;</operator> <name>FF_FDEBUG_TS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"none (ret=%d)\n"</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>AV_NOPTS_VALUE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>startcode</name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>stream_index</name></expr>]</index></name><operator>-&gt;</operator><name>id</name> <operator>&amp;&amp;</operator>

<name>dts</name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>debug</name></name> <operator>&amp;</operator> <name>FF_FDEBUG_TS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"pos=0x%"</literal><name>PRIx64</name><literal type="string">" dts=0x%"</literal><name>PRIx64</name><literal type="string">" %0.3f\n"</literal></expr></argument>,

<argument><expr><name>pos</name></expr></argument>, <argument><expr><name>dts</name></expr></argument>, <argument><expr><name>dts</name> <operator>/</operator> <literal type="number">90000.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>ppos</name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>

<return>return <expr><name>dts</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name>AVInputFormat</name></type> <name>ff_mpegps_demuxer</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"mpeg"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"MPEG-PS (MPEG-2 Program Stream)"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>MpegDemuxContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>read_probe</name> <operator>=</operator> <name>mpegps_probe</name></expr>,

<expr><operator>.</operator><name>read_header</name> <operator>=</operator> <name>mpegps_read_header</name></expr>,

<expr><operator>.</operator><name>read_packet</name> <operator>=</operator> <name>mpegps_read_packet</name></expr>,

<expr><operator>.</operator><name>read_timestamp</name> <operator>=</operator> <name>mpegps_read_dts</name></expr>,

<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>AVFMT_SHOW_IDS</name> <operator>|</operator> <name>AVFMT_TS_DISCONT</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_VOBSUB_DEMUXER</name></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"subtitles.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/bprint.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REF_STRING</name></cpp:macro> <cpp:value>"#VobSub index file,"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_LINE_SIZE</name></cpp:macro> <cpp:value>2048</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>VobSubDemuxContext</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>sub_ctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FFDemuxSubtitlesQueue</name></type> <name><name>q</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>sub_name</name></decl>;</decl_stmt>

}</block></struct></type> <name>VobSubDemuxContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vobsub_probe</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVProbeData</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>REF_STRING</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>REF_STRING</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVPROBE_SCORE_MAX</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vobsub_read_close</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VobSubDemuxContext</name> <modifier>*</modifier></type><name>vobsub</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_subtitles_queue_clean</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vobsub</name><operator>-&gt;</operator><name>q</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name><name>vobsub</name><operator>-&gt;</operator><name>sub_ctx</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>avformat_close_input</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vobsub</name><operator>-&gt;</operator><name>sub_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vobsub_read_header</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>header_parsed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>langidx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VobSubDemuxContext</name> <modifier>*</modifier></type><name>vobsub</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>fname_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVBPrint</name></type> <name>header</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>delay</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>stream_id</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>id</name><index>[<expr><literal type="number">64</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>alt</name><index>[<expr><name>MAX_LINE_SIZE</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ff_const59</name> <name>AVInputFormat</name> <modifier>*</modifier></type><name>iformat</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>vobsub</name><operator>-&gt;</operator><name>sub_name</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ext</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>vobsub</name><operator>-&gt;</operator><name>sub_name</name></name> <operator>=</operator> <call><name>av_strdup</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>vobsub</name><operator>-&gt;</operator><name>sub_name</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>fname_len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>vobsub</name><operator>-&gt;</operator><name>sub_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ext</name> <operator>=</operator> <name><name>vobsub</name><operator>-&gt;</operator><name>sub_name</name></name> <operator>-</operator> <literal type="number">3</literal> <operator>+</operator> <name>fname_len</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fname_len</name> <operator>&lt;</operator> <literal type="number">4</literal> <operator>||</operator> <operator>*</operator><operator>(</operator><name>ext</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>!=</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"The input index filename is too short "</literal>

<literal type="string">"to guess the associated .SUB file\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ext</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>ext</name></expr></argument>, <argument><expr><literal type="string">"IDX"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"SUB"</literal></expr> </then><else>: <expr><literal type="string">"sub"</literal></expr></else></ternary></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"IDX/SUB: %s -&gt; %s\n"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>url</name></name></expr></argument>, <argument><expr><name><name>vobsub</name><operator>-&gt;</operator><name>sub_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>iformat</name> <operator>=</operator> <call><name>av_find_input_format</name><argument_list>(<argument><expr><literal type="string">"mpeg"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name>AVERROR_DEMUXER_NOT_FOUND</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>vobsub</name><operator>-&gt;</operator><name>sub_ctx</name></name> <operator>=</operator> <call><name>avformat_alloc_context</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>vobsub</name><operator>-&gt;</operator><name>sub_ctx</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_bprint_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>header</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>INT_MAX</name> <operator>-</operator> <name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_copy_whiteblacklists</name><argument_list>(<argument><expr><name><name>vobsub</name><operator>-&gt;</operator><name>sub_ctx</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avformat_open_input</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vobsub</name><operator>-&gt;</operator><name>sub_ctx</name></name></expr></argument>, <argument><expr><name><name>vobsub</name><operator>-&gt;</operator><name>sub_name</name></name></expr></argument>, <argument><expr><name>iformat</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unable to open %s as MPEG subtitles\n"</literal></expr></argument>, <argument><expr><name><name>vobsub</name><operator>-&gt;</operator><name>sub_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><operator>!</operator><call><name>avio_feof</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>line</name><index>[<expr><name>MAX_LINE_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>ff_get_line</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>len</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>line</name><index>[<expr><call><name>strcspn</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"\r\n"</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"id:"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>sscanf</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"id: %63[^,], index: %u"</literal></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stream_id</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Unable to parse index line '%s', "</literal>

<literal type="string">"assuming 'id: und, index: 0'\n"</literal></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><literal type="string">"und"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>stream_id</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>stream_id</name> <operator>&gt;=</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name><name>vobsub</name><operator>-&gt;</operator><name>q</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Maximum number of subtitles streams reached\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>header_parsed</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>alt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"IDX stream[%d] id=%s\n"</literal></expr></argument>, <argument><expr><name>stream_id</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"timestamp:"</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>sub</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>hh</name></decl>, <decl><type ref="prev"/><name>mm</name></decl>, <decl><type ref="prev"/><name>ss</name></decl>, <decl><type ref="prev"/><name>ms</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>pos</name></decl>, <decl><type ref="prev"/><name>timestamp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>line</name> <operator>+</operator> <literal type="number">10</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>stream_id</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Timestamp declared before any stream\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>st</name> <operator>||</operator> <name><name>st</name><operator>-&gt;</operator><name>id</name></name> <operator>!=</operator> <name>stream_id</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>st</name> <operator>=</operator> <call><name>avformat_new_stream</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>st</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name>stream_id</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>=</operator> <name>AVMEDIA_TYPE_SUBTITLE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>=</operator> <name>AV_CODEC_ID_DVD_SUBTITLE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avpriv_set_pts_info</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>st</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><literal type="string">"language"</literal></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>alt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>st</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><literal type="string">"title"</literal></expr></argument>, <argument><expr><name>alt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>sscanf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"%02d:%02d:%02d:%03d, filepos: %"</literal><name>SCNx64</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>hh</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ss</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ms</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unable to parse timestamp line '%s', "</literal>

<literal type="string">"abort parsing\n"</literal></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>timestamp</name> <operator>=</operator> <operator>(</operator><name>hh</name><operator>*</operator><literal type="number">3600LL</literal> <operator>+</operator> <name>mm</name><operator>*</operator><literal type="number">60LL</literal> <operator>+</operator> <name>ss</name><operator>)</operator> <operator>*</operator> <literal type="number">1000LL</literal> <operator>+</operator> <name>ms</name> <operator>+</operator> <name>delay</name></expr>;</expr_stmt>

<expr_stmt><expr><name>timestamp</name> <operator>=</operator> <call><name>av_rescale_q</name><argument_list>(<argument><expr><name>timestamp</name></expr></argument>, <argument><expr><call><name>av_make_q</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sub</name> <operator>=</operator> <call><name>ff_subtitles_queue_insert</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vobsub</name><operator>-&gt;</operator><name>q</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sub</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sub</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sub</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name>timestamp</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sub</name><operator>-&gt;</operator><name>stream_index</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"alt:"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>line</name> <operator>+</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"IDX stream[%d] name=%s\n"</literal></expr></argument>, <argument><expr><name>stream_id</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_strlcpy</name><argument_list>(<argument><expr><name>alt</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>alt</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>header_parsed</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"delay:"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>sign</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>hh</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>mm</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>ss</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>ms</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>line</name> <operator>+</operator> <literal type="number">6</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'-'</literal> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'+'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>sign</name> <operator>=</operator> <ternary><condition><expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'-'</literal></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>sscanf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"%d:%d:%d:%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>hh</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ss</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>delay</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>hh</name><operator>*</operator><literal type="number">3600LL</literal> <operator>+</operator> <name>mm</name><operator>*</operator><literal type="number">60LL</literal> <operator>+</operator> <name>ss</name><operator>)</operator> <operator>*</operator> <literal type="number">1000LL</literal> <operator>+</operator> <name>ms</name><operator>)</operator> <operator>*</operator> <name>sign</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"langidx:"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>line</name> <operator>+</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>sscanf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>langidx</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid langidx specified\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>header_parsed</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>line</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>line</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'#'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>header</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>langidx</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>langidx</name></expr>]</index></name><operator>-&gt;</operator><name>disposition</name> <operator>|=</operator> <name>AV_DISPOSITION_DEFAULT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>vobsub</name><operator>-&gt;</operator><name>q</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sort</name> <operator>=</operator> <name>SUB_SORT_POS_TS</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vobsub</name><operator>-&gt;</operator><name>q</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>keep_duplicates</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_subtitles_queue_finalize</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vobsub</name><operator>-&gt;</operator><name>q</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>av_bprint_is_complete</name><argument_list>(<argument><expr><operator>&amp;</operator><name>header</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>AVCodecParameters</name> <modifier>*</modifier></type><name>par</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>codecpar</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_alloc_extradata</name><argument_list>(<argument><expr><name>par</name></expr></argument>, <argument><expr><name><name>header</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>par</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>, <argument><expr><name><name>header</name><operator>.</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>header</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<label><name>end</name>:</label>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vobsub_read_close</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_bprint_finalize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>header</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vobsub_read_packet</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VobSubDemuxContext</name> <modifier>*</modifier></type><name>vobsub</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FFDemuxSubtitlesQueue</name> <modifier>*</modifier></type><name>q</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>vobsub</name><operator>-&gt;</operator><name>sub_ctx</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>psize</name></decl>, <decl><type ref="prev"/><name>total_read</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>min_ts</name> <init>= <expr><name>INT64_MAX</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>FFDemuxSubtitlesQueue</name> <modifier>*</modifier></type><name>tmpq</name> <init>= <expr><operator>&amp;</operator><name><name>vobsub</name><operator>-&gt;</operator><name>q</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>ts</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>tmpq</name><operator>-&gt;</operator><name>nb_subs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ts</name> <operator>=</operator> <name><name>tmpq</name><operator>-&gt;</operator><name>subs</name><index>[<expr><name><name>tmpq</name><operator>-&gt;</operator><name>current_sub_idx</name></name></expr>]</index></name><operator>.</operator><name>pts</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ts</name> <operator>&lt;</operator> <name>min_ts</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>min_ts</name> <operator>=</operator> <name>ts</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sid</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>q</name> <operator>=</operator> <operator>&amp;</operator><name><name>vobsub</name><operator>-&gt;</operator><name>q</name><index>[<expr><name>sid</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_subtitles_queue_read_packet</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>current_sub_idx</name></name> <operator>&lt;</operator> <name><name>q</name><operator>-&gt;</operator><name>nb_subs</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>psize</name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>subs</name><index>[<expr><name><name>q</name><operator>-&gt;</operator><name>current_sub_idx</name></name></expr>]</index></name><operator>.</operator><name>pos</name> <operator>-</operator> <name><name>pkt</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>fsize</name> <init>= <expr><call><name>avio_size</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>psize</name> <operator>=</operator> <ternary><condition><expr><name>fsize</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0xffff</literal></expr> </then><else>: <expr><name>fsize</name> <operator>-</operator> <name><name>pkt</name><operator>-&gt;</operator><name>pos</name></name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<do>do <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>to_read</name></decl>, <decl><type ref="prev"/><name>startcode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>pts</name></decl>, <decl><type ref="prev"/><name>dts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>old_pos</name> <init>= <expr><call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>new_pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pkt_size</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mpegps_read_pes_header</name><argument_list>(<argument><expr><name><name>vobsub</name><operator>-&gt;</operator><name>sub_ctx</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>startcode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition><block type="pseudo"><block_content> 

<break>break;</break></block_content></block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>to_read</name> <operator>=</operator> <name>ret</name> <operator>&amp;</operator> <literal type="number">0xffff</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>new_pos</name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pkt_size</name> <operator>=</operator> <name>ret</name> <operator>+</operator> <operator>(</operator><name>new_pos</name> <operator>-</operator> <name>old_pos</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>total_read</name> <operator>+</operator> <name>pkt_size</name> <operator>&gt;</operator> <name>psize</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>total_read</name> <operator>+=</operator> <name>pkt_size</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>startcode</name> <operator>&amp;</operator> <literal type="number">0x1f</literal><operator>)</operator> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name><name>pkt</name><operator>-&gt;</operator><name>stream_index</name></name></expr>]</index></name><operator>-&gt;</operator><name>id</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_grow_packet</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>to_read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>avio_read</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <operator>(</operator><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name>to_read</name><operator>)</operator></expr></argument>, <argument><expr><name>to_read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <name>to_read</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name> <operator>-=</operator> <name>to_read</name> <operator>-</operator> <name>n</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block> while <condition>(<expr><name>total_read</name> <operator>&lt;</operator> <name>psize</name></expr>)</condition>;</do>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vobsub_read_seek</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stream_index</name></decl></parameter>,

<parameter><decl><type><name>int64_t</name></type> <name>min_ts</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>ts</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>max_ts</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VobSubDemuxContext</name> <modifier>*</modifier></type><name>vobsub</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>stream_index</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVRational</name></type> <name>time_base</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>time_base</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ts</name> <operator>=</operator> <call><name>av_rescale_q</name><argument_list>(<argument><expr><name>ts</name></expr></argument>, <argument><expr><name>AV_TIME_BASE_Q</name></expr></argument>, <argument><expr><name>time_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>min_ts</name> <operator>=</operator> <call><name>av_rescale_rnd</name><argument_list>(<argument><expr><name>min_ts</name></expr></argument>, <argument><expr><name><name>time_base</name><operator>.</operator><name>den</name></name></expr></argument>,

<argument><expr><name><name>time_base</name><operator>.</operator><name>num</name></name> <operator>*</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name>AV_TIME_BASE</name></expr></argument>,

<argument><expr><name>AV_ROUND_UP</name> <operator>|</operator> <name>AV_ROUND_PASS_MINMAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>max_ts</name> <operator>=</operator> <call><name>av_rescale_rnd</name><argument_list>(<argument><expr><name>max_ts</name></expr></argument>, <argument><expr><name><name>time_base</name><operator>.</operator><name>den</name></name></expr></argument>,

<argument><expr><name><name>time_base</name><operator>.</operator><name>num</name></name> <operator>*</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name>AV_TIME_BASE</name></expr></argument>,

<argument><expr><name>AV_ROUND_DOWN</name> <operator>|</operator> <name>AV_ROUND_PASS_MINMAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name>ff_subtitles_queue_seek</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vobsub</name><operator>-&gt;</operator><name>q</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>stream_index</name></expr></argument>,

<argument><expr><name>min_ts</name></expr></argument>, <argument><expr><name>ts</name></expr></argument>, <argument><expr><name>max_ts</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>r</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>stream_index</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>stream_index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>ff_subtitles_queue_seek</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vobsub</name><operator>-&gt;</operator><name>q</name><index>[<expr><name>stream_index</name></expr>]</index></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>stream_index</name></expr></argument>,

<argument><expr><name>min_ts</name></expr></argument>, <argument><expr><name>ts</name></expr></argument>, <argument><expr><name>max_ts</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>options</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"sub_name"</literal></expr>, <expr><literal type="string">"URI for .sub file"</literal></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>VobSubDemuxContext</name></expr></argument>, <argument><expr><name>sub_name</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{ <expr><operator>.</operator><name>str</name> <operator>=</operator> <name>NULL</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_FLAG_DECODING_PARAM</name></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>vobsub_demuxer_class</name> <init>= <expr><block>{

<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"vobsub"</literal></expr>,

<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,

<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>options</name></expr>,

<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVInputFormat</name></type> <name>ff_vobsub_demuxer</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"vobsub"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"VobSub subtitle format"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>VobSubDemuxContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>read_probe</name> <operator>=</operator> <name>vobsub_probe</name></expr>,

<expr><operator>.</operator><name>read_header</name> <operator>=</operator> <name>vobsub_read_header</name></expr>,

<expr><operator>.</operator><name>read_packet</name> <operator>=</operator> <name>vobsub_read_packet</name></expr>,

<expr><operator>.</operator><name>read_seek2</name> <operator>=</operator> <name>vobsub_read_seek</name></expr>,

<expr><operator>.</operator><name>read_close</name> <operator>=</operator> <name>vobsub_read_close</name></expr>,

<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>AVFMT_SHOW_IDS</name></expr>,

<expr><operator>.</operator><name>extensions</name> <operator>=</operator> <literal type="string">"idx"</literal></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>vobsub_demuxer_class</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
