<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavformat\rtmpdh.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/error.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mem.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/random_seed.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rtmpdh.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_MBEDTLS</name></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mbedtls/ctr_drbg.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mbedtls/entropy.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>P1024</name></cpp:macro> <cpp:value>"FFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD1" "29024E088A67CC74020BBEA63B139B22514A08798E3404DD" "EF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245" "E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7ED" "EE386BFB5A899FA5AE9F24117C4B1FE649286651ECE65381" "FFFFFFFFFFFFFFFF"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q1024</name></cpp:macro> <cpp:value>"7FFFFFFFFFFFFFFFE487ED5110B4611A62633145C06E0E68" "948127044533E63A0105DF531D89CD9128A5043CC71A026E" "F7CA8CD9E69D218D98158536F92F8A1BA7F09AB6B6A8E122" "F242DABB312F3F637A262174D31BF6B585FFAE5B7A035BF6" "F71C35FDAD44CFD2D74F9208BE258FF324943328F67329C0" "FFFFFFFFFFFFFFFF"</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_GMP</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bn_new</name><parameter_list>(<parameter><type><name>bn</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { bn = av_malloc(sizeof(*bn)); if (bn) mpz_init2(bn, 1); } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bn_free</name><parameter_list>(<parameter><type><name>bn</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { mpz_clear(bn); av_free(bn); } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bn_set_word</name><parameter_list>(<parameter><type><name>bn</name></type></parameter>, <parameter><type><name>w</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>mpz_set_ui(bn, w)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bn_cmp</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>mpz_cmp(a, b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bn_copy</name><parameter_list>(<parameter><type><name>to</name></type></parameter>, <parameter><type><name>from</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>mpz_set(to, from)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bn_sub_word</name><parameter_list>(<parameter><type><name>bn</name></type></parameter>, <parameter><type><name>w</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>mpz_sub_ui(bn, bn, w)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bn_cmp_1</name><parameter_list>(<parameter><type><name>bn</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>mpz_cmp_ui(bn, 1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bn_num_bytes</name><parameter_list>(<parameter><type><name>bn</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(mpz_sizeinbase(bn, 2) + 7) / 8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bn_bn2bin</name><parameter_list>(<parameter><type><name>bn</name></type></parameter>, <parameter><type><name>buf</name></type></parameter>, <parameter><type><name>len</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { memset(buf, 0, len); if (bn_num_bytes(bn) &lt;= len) mpz_export(buf, NULL, 1, 1, 0, 0, bn); } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bn_bin2bn</name><parameter_list>(<parameter><type><name>bn</name></type></parameter>, <parameter><type><name>buf</name></type></parameter>, <parameter><type><name>len</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { bn_new(bn); if (bn) mpz_import(bn, len, 1, 1, 0, 0, buf); } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bn_hex2bn</name><parameter_list>(<parameter><type><name>bn</name></type></parameter>, <parameter><type><name>buf</name></type></parameter>, <parameter><type><name>ret</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { bn_new(bn); if (bn) ret = (mpz_set_str(bn, buf, 16) == 0); else ret = 1; } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bn_random</name><parameter_list>(<parameter><type><name>bn</name></type></parameter>, <parameter><type><name>num_bits</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { int bits = num_bits; mpz_set_ui(bn, 0); for (bits = num_bits; bits &gt; 0; bits -= 32) { mpz_mul_2exp(bn, bn, 32); mpz_add_ui(bn, bn, av_get_random_seed()); } mpz_fdiv_r_2exp(bn, bn, num_bits); } while (0)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>bn_modexp</name><parameter_list>(<parameter><decl><type><name>FFBigNum</name></type> <name>bn</name></decl></parameter>, <parameter><decl><type><name>FFBigNum</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>FFBigNum</name></type> <name>q</name></decl></parameter>, <parameter><decl><type><name>FFBigNum</name></type> <name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>mpz_powm</name><argument_list>(<argument><expr><name>bn</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>q</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>CONFIG_GCRYPT</name></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bn_new</name><parameter_list>(<parameter><type><name>bn</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (!gcry_control(GCRYCTL_INITIALIZATION_FINISHED_P)) { if (!gcry_check_version("1.5.4")) return AVERROR(EINVAL); gcry_control(GCRYCTL_DISABLE_SECMEM, 0); gcry_control(GCRYCTL_INITIALIZATION_FINISHED, 0); } bn = gcry_mpi_new(1); } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bn_free</name><parameter_list>(<parameter><type><name>bn</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>gcry_mpi_release(bn)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bn_set_word</name><parameter_list>(<parameter><type><name>bn</name></type></parameter>, <parameter><type><name>w</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>gcry_mpi_set_ui(bn, w)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bn_cmp</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>gcry_mpi_cmp(a, b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bn_copy</name><parameter_list>(<parameter><type><name>to</name></type></parameter>, <parameter><type><name>from</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>gcry_mpi_set(to, from)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bn_sub_word</name><parameter_list>(<parameter><type><name>bn</name></type></parameter>, <parameter><type><name>w</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>gcry_mpi_sub_ui(bn, bn, w)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bn_cmp_1</name><parameter_list>(<parameter><type><name>bn</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>gcry_mpi_cmp_ui(bn, 1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bn_num_bytes</name><parameter_list>(<parameter><type><name>bn</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(gcry_mpi_get_nbits(bn) + 7) / 8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bn_bn2bin</name><parameter_list>(<parameter><type><name>bn</name></type></parameter>, <parameter><type><name>buf</name></type></parameter>, <parameter><type><name>len</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>gcry_mpi_print(GCRYMPI_FMT_USG, buf, len, NULL, bn)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bn_bin2bn</name><parameter_list>(<parameter><type><name>bn</name></type></parameter>, <parameter><type><name>buf</name></type></parameter>, <parameter><type><name>len</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>gcry_mpi_scan(&amp;bn, GCRYMPI_FMT_USG, buf, len, NULL)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bn_hex2bn</name><parameter_list>(<parameter><type><name>bn</name></type></parameter>, <parameter><type><name>buf</name></type></parameter>, <parameter><type><name>ret</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ret = (gcry_mpi_scan(&amp;bn, GCRYMPI_FMT_HEX, buf, 0, 0) == 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bn_random</name><parameter_list>(<parameter><type><name>bn</name></type></parameter>, <parameter><type><name>num_bits</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>gcry_mpi_randomize(bn, num_bits, GCRY_WEAK_RANDOM)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>bn_modexp</name><parameter_list>(<parameter><decl><type><name>FFBigNum</name></type> <name>bn</name></decl></parameter>, <parameter><decl><type><name>FFBigNum</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>FFBigNum</name></type> <name>q</name></decl></parameter>, <parameter><decl><type><name>FFBigNum</name></type> <name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>gcry_mpi_powm</name><argument_list>(<argument><expr><name>bn</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>q</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>CONFIG_OPENSSL</name></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bn_new</name><parameter_list>(<parameter><type><name>bn</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>bn = BN_new()</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bn_free</name><parameter_list>(<parameter><type><name>bn</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>BN_free(bn)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bn_set_word</name><parameter_list>(<parameter><type><name>bn</name></type></parameter>, <parameter><type><name>w</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>BN_set_word(bn, w)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bn_cmp</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>BN_cmp(a, b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bn_copy</name><parameter_list>(<parameter><type><name>to</name></type></parameter>, <parameter><type><name>from</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>BN_copy(to, from)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bn_sub_word</name><parameter_list>(<parameter><type><name>bn</name></type></parameter>, <parameter><type><name>w</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>BN_sub_word(bn, w)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bn_cmp_1</name><parameter_list>(<parameter><type><name>bn</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>BN_cmp(bn, BN_value_one())</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bn_num_bytes</name><parameter_list>(<parameter><type><name>bn</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>BN_num_bytes(bn)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bn_bn2bin</name><parameter_list>(<parameter><type><name>bn</name></type></parameter>, <parameter><type><name>buf</name></type></parameter>, <parameter><type><name>len</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>BN_bn2bin(bn, buf)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bn_bin2bn</name><parameter_list>(<parameter><type><name>bn</name></type></parameter>, <parameter><type><name>buf</name></type></parameter>, <parameter><type><name>len</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>bn = BN_bin2bn(buf, len, 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bn_hex2bn</name><parameter_list>(<parameter><type><name>bn</name></type></parameter>, <parameter><type><name>buf</name></type></parameter>, <parameter><type><name>ret</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ret = BN_hex2bn(&amp;bn, buf)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bn_random</name><parameter_list>(<parameter><type><name>bn</name></type></parameter>, <parameter><type><name>num_bits</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>BN_rand(bn, num_bits, 0, 0)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>bn_modexp</name><parameter_list>(<parameter><decl><type><name>FFBigNum</name></type> <name>bn</name></decl></parameter>, <parameter><decl><type><name>FFBigNum</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>FFBigNum</name></type> <name>q</name></decl></parameter>, <parameter><decl><type><name>FFBigNum</name></type> <name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>BN_CTX</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>BN_CTX_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ctx</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>BN_mod_exp</name><argument_list>(<argument><expr><name>bn</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>q</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>BN_CTX_free</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>BN_CTX_free</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>CONFIG_MBEDTLS</name></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bn_new</name><parameter_list>(<parameter><type><name>bn</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { bn = av_malloc(sizeof(*bn)); if (bn) mbedtls_mpi_init(bn); } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bn_free</name><parameter_list>(<parameter><type><name>bn</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { mbedtls_mpi_free(bn); av_free(bn); } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bn_set_word</name><parameter_list>(<parameter><type><name>bn</name></type></parameter>, <parameter><type><name>w</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>mbedtls_mpi_lset(bn, w)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bn_cmp</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>mbedtls_mpi_cmp_mpi(a, b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bn_copy</name><parameter_list>(<parameter><type><name>to</name></type></parameter>, <parameter><type><name>from</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>mbedtls_mpi_copy(to, from)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bn_sub_word</name><parameter_list>(<parameter><type><name>bn</name></type></parameter>, <parameter><type><name>w</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>mbedtls_mpi_sub_int(bn, bn, w)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bn_cmp_1</name><parameter_list>(<parameter><type><name>bn</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>mbedtls_mpi_cmp_int(bn, 1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bn_num_bytes</name><parameter_list>(<parameter><type><name>bn</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(mbedtls_mpi_bitlen(bn) + 7) / 8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bn_bn2bin</name><parameter_list>(<parameter><type><name>bn</name></type></parameter>, <parameter><type><name>buf</name></type></parameter>, <parameter><type><name>len</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>mbedtls_mpi_write_binary(bn, buf, len)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bn_bin2bn</name><parameter_list>(<parameter><type><name>bn</name></type></parameter>, <parameter><type><name>buf</name></type></parameter>, <parameter><type><name>len</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { bn_new(bn); if (bn) mbedtls_mpi_read_binary(bn, buf, len); } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bn_hex2bn</name><parameter_list>(<parameter><type><name>bn</name></type></parameter>, <parameter><type><name>buf</name></type></parameter>, <parameter><type><name>ret</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { bn_new(bn); if (bn) ret = (mbedtls_mpi_read_string(bn, 16, buf) == 0); else ret = 1; } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bn_random</name><parameter_list>(<parameter><type><name>bn</name></type></parameter>, <parameter><type><name>num_bits</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { mbedtls_entropy_context entropy_ctx; mbedtls_ctr_drbg_context ctr_drbg_ctx; mbedtls_entropy_init(&amp;entropy_ctx); mbedtls_ctr_drbg_init(&amp;ctr_drbg_ctx); mbedtls_ctr_drbg_seed(&amp;ctr_drbg_ctx, mbedtls_entropy_func, &amp;entropy_ctx, NULL, 0); mbedtls_mpi_fill_random(bn, (num_bits + 7) / 8, mbedtls_ctr_drbg_random, &amp;ctr_drbg_ctx); mbedtls_ctr_drbg_free(&amp;ctr_drbg_ctx); mbedtls_entropy_free(&amp;entropy_ctx); } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bn_modexp</name><parameter_list>(<parameter><type><name>bn</name></type></parameter>, <parameter><type><name>y</name></type></parameter>, <parameter><type><name>q</name></type></parameter>, <parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>mbedtls_mpi_exp_mod(bn, y, q, p, 0)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_BYTES</name></cpp:macro> <cpp:value>18000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dh_new</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>av_mallocz(sizeof(FF_DH))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>FFBigNum</name></type> <name>dh_generate_key</name><parameter_list>(<parameter><decl><type><name>FF_DH</name> <modifier>*</modifier></type><name>dh</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>num_bytes</name></decl>;</decl_stmt>

<expr_stmt><expr><name>num_bytes</name> <operator>=</operator> <call><name>bn_num_bytes</name><argument_list>(<argument><expr><name><name>dh</name><operator>-&gt;</operator><name>p</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>num_bytes</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>num_bytes</name> <operator>&gt;</operator> <name>MAX_BYTES</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bn_new</name><argument_list>(<argument><expr><name><name>dh</name><operator>-&gt;</operator><name>priv_key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dh</name><operator>-&gt;</operator><name>priv_key</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bn_random</name><argument_list>(<argument><expr><name><name>dh</name><operator>-&gt;</operator><name>priv_key</name></name></expr></argument>, <argument><expr><literal type="number">8</literal> <operator>*</operator> <name>num_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bn_new</name><argument_list>(<argument><expr><name><name>dh</name><operator>-&gt;</operator><name>pub_key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dh</name><operator>-&gt;</operator><name>pub_key</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bn_free</name><argument_list>(<argument><expr><name><name>dh</name><operator>-&gt;</operator><name>priv_key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>bn_modexp</name><argument_list>(<argument><expr><name><name>dh</name><operator>-&gt;</operator><name>pub_key</name></name></expr></argument>, <argument><expr><name><name>dh</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><name><name>dh</name><operator>-&gt;</operator><name>priv_key</name></name></expr></argument>, <argument><expr><name><name>dh</name><operator>-&gt;</operator><name>p</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name><name>dh</name><operator>-&gt;</operator><name>pub_key</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dh_compute_key</name><parameter_list>(<parameter><decl><type><name>FF_DH</name> <modifier>*</modifier></type><name>dh</name></decl></parameter>, <parameter><decl><type><name>FFBigNum</name></type> <name>pub_key_bn</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>secret_key_len</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>secret_key</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>FFBigNum</name></type> <name>k</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bn_new</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>k</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>bn_modexp</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>pub_key_bn</name></expr></argument>, <argument><expr><name><name>dh</name><operator>-&gt;</operator><name>priv_key</name></name></expr></argument>, <argument><expr><name><name>dh</name><operator>-&gt;</operator><name>p</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bn_free</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>bn_bn2bin</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>secret_key</name></expr></argument>, <argument><expr><name>secret_key_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bn_free</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>secret_key_len</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_dh_free</name><parameter_list>(<parameter><decl><type><name>FF_DH</name> <modifier>*</modifier></type><name>dh</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dh</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bn_free</name><argument_list>(<argument><expr><name><name>dh</name><operator>-&gt;</operator><name>p</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bn_free</name><argument_list>(<argument><expr><name><name>dh</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bn_free</name><argument_list>(<argument><expr><name><name>dh</name><operator>-&gt;</operator><name>pub_key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bn_free</name><argument_list>(<argument><expr><name><name>dh</name><operator>-&gt;</operator><name>priv_key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>dh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dh_is_valid_public_key</name><parameter_list>(<parameter><decl><type><name>FFBigNum</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>FFBigNum</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>FFBigNum</name></type> <name>q</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>FFBigNum</name></type> <name>bn</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bn_new</name><argument_list>(<argument><expr><name>bn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bn</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bn_set_word</name><argument_list>(<argument><expr><name>bn</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>bn_cmp</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>bn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bn_copy</name><argument_list>(<argument><expr><name>bn</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bn_sub_word</name><argument_list>(<argument><expr><name>bn</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>bn_cmp</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>bn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>bn_modexp</name><argument_list>(<argument><expr><name>bn</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>q</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>bn_cmp_1</name><argument_list>(<argument><expr><name>bn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>bn_free</name><argument_list>(<argument><expr><name>bn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>av_cold</name> <name>FF_DH</name> <modifier>*</modifier></type><name>ff_dh_init</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>key_len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>FF_DH</name> <modifier>*</modifier></type><name>dh</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>dh</name> <operator>=</operator> <call><name>dh_new</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bn_new</name><argument_list>(<argument><expr><name><name>dh</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dh</name><operator>-&gt;</operator><name>g</name></name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bn_hex2bn</name><argument_list>(<argument><expr><name><name>dh</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><name>P1024</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bn_set_word</name><argument_list>(<argument><expr><name><name>dh</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dh</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <name>key_len</name></expr>;</expr_stmt>

<return>return <expr><name>dh</name></expr>;</return>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>ff_dh_free</name><argument_list>(<argument><expr><name>dh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_dh_generate_public_key</name><parameter_list>(<parameter><decl><type><name>FF_DH</name> <modifier>*</modifier></type><name>dh</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>FFBigNum</name></type> <name>q1</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>dh_generate_key</name><argument_list>(<argument><expr><name>dh</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bn_hex2bn</name><argument_list>(<argument><expr><name>q1</name></expr></argument>, <argument><expr><name>Q1024</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>dh_is_valid_public_key</name><argument_list>(<argument><expr><name><name>dh</name><operator>-&gt;</operator><name>pub_key</name></name></expr></argument>, <argument><expr><name><name>dh</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><name>q1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bn_free</name><argument_list>(<argument><expr><name>q1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_dh_write_public_key</name><parameter_list>(<parameter><decl><type><name>FF_DH</name> <modifier>*</modifier></type><name>dh</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pub_key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pub_key_len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>bn_num_bytes</name><argument_list>(<argument><expr><name><name>dh</name><operator>-&gt;</operator><name>pub_key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>len</name> <operator>&gt;</operator> <name>pub_key_len</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pub_key</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pub_key_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bn_bn2bin</name><argument_list>(<argument><expr><name><name>dh</name><operator>-&gt;</operator><name>pub_key</name></name></expr></argument>, <argument><expr><name>pub_key</name> <operator>+</operator> <name>pub_key_len</name> <operator>-</operator> <name>len</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_dh_compute_shared_secret_key</name><parameter_list>(<parameter><decl><type><name>FF_DH</name> <modifier>*</modifier></type><name>dh</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>pub_key</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>pub_key_len</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>secret_key</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>secret_key_len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>FFBigNum</name></type> <name>q1</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>pub_key_bn</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bn_bin2bn</name><argument_list>(<argument><expr><name>pub_key_bn</name></expr></argument>, <argument><expr><name>pub_key</name></expr></argument>, <argument><expr><name>pub_key_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pub_key_bn</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bn_hex2bn</name><argument_list>(<argument><expr><name>q1</name></expr></argument>, <argument><expr><name>Q1024</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>dh_is_valid_public_key</name><argument_list>(<argument><expr><name>pub_key_bn</name></expr></argument>, <argument><expr><name><name>dh</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><name>q1</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>dh_compute_key</name><argument_list>(<argument><expr><name>dh</name></expr></argument>, <argument><expr><name>pub_key_bn</name></expr></argument>, <argument><expr><name>secret_key_len</name></expr></argument>,

<argument><expr><name>secret_key</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>bn_free</name><argument_list>(<argument><expr><name>pub_key_bn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bn_free</name><argument_list>(<argument><expr><name>q1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

</unit>
