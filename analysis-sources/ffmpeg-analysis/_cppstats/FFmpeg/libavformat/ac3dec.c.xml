<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavformat\ac3dec.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/crc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/ac3_parser.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avformat.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rawdec.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ac3_eac3_probe</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVProbeData</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVCodecID</name></name></type> <name>expected_codec_id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>max_frames</name></decl>, <decl><type ref="prev"/><name>first_frames</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>frames</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>buf2</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>AVCodecID</name></name></type> <name>codec_id</name> <init>= <expr><name>AV_CODEC_ID_AC3</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>max_frames</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>buf</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>end</name> <operator>=</operator> <name>buf</name> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>buf_size</name></name></expr>;</expr_stmt>

<for>for<control>(<init>;</init> <condition><expr><name>buf</name> <operator>&lt;</operator> <name>end</name></expr>;</condition> <incr><expr><name>buf</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>buf</name> <operator>&gt;</operator> <name><name>p</name><operator>-&gt;</operator><name>buf</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x0B</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x77</literal><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x77</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x0B</literal><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>buf2</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>frames</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>buf2</name> <operator>&lt;</operator> <name>end</name></expr>;</condition> <incr><expr><name>frames</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>buf3</name><index>[<expr><literal type="number">4096</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>bitstream_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>frame_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>buf2</name></expr></argument>, <argument><expr><literal type="string">"\x1\x10"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>buf2</name> <operator>+</operator> <literal type="number">16</literal> <operator>&gt;</operator> <name>end</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>buf2</name><operator>+=</operator><literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x77</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x0B</literal></expr>)</condition> <block>{<block_content>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>+=</operator><literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>buf3</name><index>[<expr><name>i</name></expr> ]</index></name> <operator>=</operator> <name><name>buf2</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf3</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>buf2</name><index>[<expr><name>i</name></expr> ]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_ac3_parse_header</name><argument_list>(<argument><expr><name>buf3</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>bitstream_id</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>frame_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_ac3_parse_header</name><argument_list>(<argument><expr><name>buf2</name></expr></argument>, <argument><expr><name>end</name> <operator>-</operator> <name>buf2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bitstream_id</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>frame_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>buf2</name> <operator>+</operator> <name>frame_size</name> <operator>&gt;</operator> <name>end</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x77</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x0B</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>frame_size</name> <operator>&lt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf3</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">8</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>frame_size</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>buf3</name><index>[<expr><name>i</name></expr> ]</index></name> <operator>=</operator> <name><name>buf2</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf3</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>buf2</name><index>[<expr><name>i</name></expr> ]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><call><name>av_crc</name><argument_list>(<argument><expr><call><name>av_crc_get_table</name><argument_list>(<argument><expr><name>AV_CRC_16_ANSI</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>buf3</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>frame_size</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>av_crc</name><argument_list>(<argument><expr><call><name>av_crc_get_table</name><argument_list>(<argument><expr><name>AV_CRC_16_ANSI</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>buf2</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>frame_size</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bitstream_id</name> <operator>&gt;</operator> <literal type="number">10</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>codec_id</name> <operator>=</operator> <name>AV_CODEC_ID_EAC3</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>buf2</name> <operator>+=</operator> <name>frame_size</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>max_frames</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>max_frames</name></expr></argument>, <argument><expr><name>frames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>buf</name> <operator>==</operator> <name><name>p</name><operator>-&gt;</operator><name>buf</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>first_frames</name> <operator>=</operator> <name>frames</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>(<expr><name>codec_id</name> <operator>!=</operator> <name>expected_codec_id</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>first_frames</name><operator>&gt;=</operator><literal type="number">7</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>AVPROBE_SCORE_EXTENSION</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name>max_frames</name><operator>&gt;</operator><literal type="number">200</literal></expr>)</condition><block type="pseudo"><block_content><return>return <expr><name>AVPROBE_SCORE_EXTENSION</name></expr>;</return></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name>max_frames</name><operator>&gt;=</operator><literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>AVPROBE_SCORE_EXTENSION</name><operator>/</operator><literal type="number">2</literal></expr>;</return></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name>max_frames</name><operator>&gt;=</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_AC3_DEMUXER</name></expr></cpp:if>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ac3_probe</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVProbeData</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>ac3_eac3_probe</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>AV_CODEC_ID_AC3</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<macro><name>FF_RAW_DEMUXER_CLASS</name><argument_list>(<argument>ac3</argument>)</argument_list></macro>

<decl_stmt><decl><type><name>AVInputFormat</name></type> <name>ff_ac3_demuxer</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"ac3"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"raw AC-3"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>read_probe</name> <operator>=</operator> <name>ac3_probe</name></expr>,

<expr><operator>.</operator><name>read_header</name> <operator>=</operator> <name>ff_raw_audio_read_header</name></expr>,

<expr><operator>.</operator><name>read_packet</name> <operator>=</operator> <name>ff_raw_read_partial_packet</name></expr>,

<expr><operator>.</operator><name>flags</name><operator>=</operator> <name>AVFMT_GENERIC_INDEX</name></expr>,

<expr><operator>.</operator><name>extensions</name> <operator>=</operator> <literal type="string">"ac3"</literal></expr>,

<expr><operator>.</operator><name>raw_codec_id</name> <operator>=</operator> <name>AV_CODEC_ID_AC3</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>FFRawDemuxerContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>ac3_demuxer_class</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_EAC3_DEMUXER</name></expr></cpp:if>

<function><type><specifier>static</specifier> <name>int</name></type> <name>eac3_probe</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVProbeData</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>ac3_eac3_probe</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>AV_CODEC_ID_EAC3</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<macro><name>FF_RAW_DEMUXER_CLASS</name><argument_list>(<argument>eac3</argument>)</argument_list></macro>

<decl_stmt><decl><type><name>AVInputFormat</name></type> <name>ff_eac3_demuxer</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"eac3"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"raw E-AC-3"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>read_probe</name> <operator>=</operator> <name>eac3_probe</name></expr>,

<expr><operator>.</operator><name>read_header</name> <operator>=</operator> <name>ff_raw_audio_read_header</name></expr>,

<expr><operator>.</operator><name>read_packet</name> <operator>=</operator> <name>ff_raw_read_partial_packet</name></expr>,

<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>AVFMT_GENERIC_INDEX</name></expr>,

<expr><operator>.</operator><name>extensions</name> <operator>=</operator> <literal type="string">"eac3"</literal></expr>,

<expr><operator>.</operator><name>raw_codec_id</name> <operator>=</operator> <name>AV_CODEC_ID_EAC3</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>FFRawDemuxerContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>eac3_demuxer_class</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
