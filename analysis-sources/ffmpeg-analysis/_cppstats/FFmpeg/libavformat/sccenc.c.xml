<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavformat\sccenc.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avformat.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/log.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>SCCContext</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>prev_h</name></decl>, <name>prev_m</name>, <name>prev_s</name>, <name>prev_f</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>inside</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

}</block></struct></type> <name>SCCContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>scc_write_header</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>avf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>SCCContext</name> <modifier>*</modifier></type><name>scc</name> <init>= <expr><name><name>avf</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avf</name><operator>-&gt;</operator><name>nb_streams</name></name> <operator>!=</operator> <literal type="number">1</literal> <operator>||</operator>

<name><name>avf</name><operator>-&gt;</operator><name>streams</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>!=</operator> <name>AVMEDIA_TYPE_SUBTITLE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avf</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"SCC supports only a single subtitles stream.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avf</name><operator>-&gt;</operator><name>streams</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>!=</operator> <name>AV_CODEC_ID_EIA_608</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avf</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Unsupported subtitles codec: %s\n"</literal></expr></argument>,

<argument><expr><call><name>avcodec_get_name</name><argument_list>(<argument><expr><name><name>avf</name><operator>-&gt;</operator><name>streams</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>avpriv_set_pts_info</name><argument_list>(<argument><expr><name><name>avf</name><operator>-&gt;</operator><name>streams</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_printf</name><argument_list>(<argument><expr><name><name>avf</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="string">"Scenarist_SCC V1.0\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>scc</name><operator>-&gt;</operator><name>prev_h</name></name> <operator>=</operator> <name><name>scc</name><operator>-&gt;</operator><name>prev_m</name></name> <operator>=</operator> <name><name>scc</name><operator>-&gt;</operator><name>prev_s</name></name> <operator>=</operator> <name><name>scc</name><operator>-&gt;</operator><name>prev_f</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>scc</name><operator>-&gt;</operator><name>inside</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>scc_write_packet</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>avf</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>SCCContext</name> <modifier>*</modifier></type><name>scc</name> <init>= <expr><name><name>avf</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>pts</name> <init>= <expr><name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>h</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>s</name></decl>, <decl><type ref="prev"/><name>f</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pts</name> <operator>==</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avf</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,

<argument><expr><literal type="string">"Insufficient timestamps.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>pts</name> <operator>/</operator> <operator>(</operator><literal type="number">3600000</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>m</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>pts</name> <operator>/</operator> <operator>(</operator><literal type="number">60000</literal><operator>)</operator><operator>)</operator> <operator>%</operator> <literal type="number">60</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>pts</name> <operator>/</operator> <literal type="number">1000</literal><operator>)</operator> <operator>%</operator> <literal type="number">60</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>f</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>pts</name> <operator>%</operator> <literal type="number">1000</literal><operator>)</operator> <operator>/</operator> <literal type="number">33</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>+=</operator><literal type="number">3</literal></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0xfc</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name><name>pkt</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0x80</literal> <operator>||</operator> <name><name>pkt</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0x80</literal><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>scc</name><operator>-&gt;</operator><name>inside</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>scc</name><operator>-&gt;</operator><name>prev_h</name></name> <operator>!=</operator> <name>h</name> <operator>||</operator> <name><name>scc</name><operator>-&gt;</operator><name>prev_m</name></name> <operator>!=</operator> <name>m</name> <operator>||</operator> <name><name>scc</name><operator>-&gt;</operator><name>prev_s</name></name> <operator>!=</operator> <name>s</name> <operator>||</operator> <name><name>scc</name><operator>-&gt;</operator><name>prev_f</name></name> <operator>!=</operator> <name>f</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avio_printf</name><argument_list>(<argument><expr><name><name>avf</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="string">"\n%02d:%02d:%02d:%02d\t"</literal></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>scc</name><operator>-&gt;</operator><name>inside</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>+=</operator><literal type="number">3</literal></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>+</operator> <literal type="number">3</literal> <operator>&gt;</operator> <name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0xfc</literal> <operator>||</operator> <operator>(</operator><name><name>pkt</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x80</literal> <operator>&amp;&amp;</operator> <name><name>pkt</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x80</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>scc</name><operator>-&gt;</operator><name>inside</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avio_printf</name><argument_list>(<argument><expr><name><name>avf</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="string">"\n%02d:%02d:%02d:%02d\t"</literal></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>scc</name><operator>-&gt;</operator><name>inside</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>scc</name><operator>-&gt;</operator><name>n</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>avio_printf</name><argument_list>(<argument><expr><name><name>avf</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>avio_printf</name><argument_list>(<argument><expr><name><name>avf</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="string">"%02x%02x"</literal></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>scc</name><operator>-&gt;</operator><name>n</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>scc</name><operator>-&gt;</operator><name>inside</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>scc</name><operator>-&gt;</operator><name>prev_h</name></name> <operator>!=</operator> <name>h</name> <operator>||</operator> <name><name>scc</name><operator>-&gt;</operator><name>prev_m</name></name> <operator>!=</operator> <name>m</name> <operator>||</operator> <name><name>scc</name><operator>-&gt;</operator><name>prev_s</name></name> <operator>!=</operator> <name>s</name> <operator>||</operator> <name><name>scc</name><operator>-&gt;</operator><name>prev_f</name></name> <operator>!=</operator> <name>f</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avio_printf</name><argument_list>(<argument><expr><name><name>avf</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>scc</name><operator>-&gt;</operator><name>n</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>scc</name><operator>-&gt;</operator><name>inside</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>scc</name><operator>-&gt;</operator><name>prev_h</name></name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>scc</name><operator>-&gt;</operator><name>prev_m</name></name> <operator>=</operator> <name>m</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>scc</name><operator>-&gt;</operator><name>prev_s</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>scc</name><operator>-&gt;</operator><name>prev_f</name></name> <operator>=</operator> <name>f</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name>AVOutputFormat</name></type> <name>ff_scc_muxer</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"scc"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Scenarist Closed Captions"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>extensions</name> <operator>=</operator> <literal type="string">"scc"</literal></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SCCContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>write_header</name> <operator>=</operator> <name>scc_write_header</name></expr>,

<expr><operator>.</operator><name>write_packet</name> <operator>=</operator> <name>scc_write_packet</name></expr>,

<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>AVFMT_GLOBALHEADER</name> <operator>|</operator> <name>AVFMT_VARIABLE_FPS</name> <operator>|</operator> <name>AVFMT_TS_NONSTRICT</name></expr>,

<expr><operator>.</operator><name>subtitle_codec</name> <operator>=</operator> <name>AV_CODEC_ID_EIA_608</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
