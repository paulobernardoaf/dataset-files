<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavformat\rtpdec.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mathematics.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avstring.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/time.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avformat.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"network.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"srtp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"url.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rtpdec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rtpdec_formats.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIN_FEEDBACK_INTERVAL</name></cpp:macro> <cpp:value>200000</cpp:value></cpp:define> 

<decl_stmt><decl><type><specifier>static</specifier> <name>RTPDynamicProtocolHandler</name></type> <name>l24_dynamic_handler</name> <init>= <expr><block>{

<expr><operator>.</operator><name>enc_name</name> <operator>=</operator> <literal type="string">"L24"</literal></expr>,

<expr><operator>.</operator><name>codec_type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,

<expr><operator>.</operator><name>codec_id</name> <operator>=</operator> <name>AV_CODEC_ID_PCM_S24BE</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>RTPDynamicProtocolHandler</name></type> <name>gsm_dynamic_handler</name> <init>= <expr><block>{

<expr><operator>.</operator><name>enc_name</name> <operator>=</operator> <literal type="string">"GSM"</literal></expr>,

<expr><operator>.</operator><name>codec_type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,

<expr><operator>.</operator><name>codec_id</name> <operator>=</operator> <name>AV_CODEC_ID_GSM</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>RTPDynamicProtocolHandler</name></type> <name>realmedia_mp3_dynamic_handler</name> <init>= <expr><block>{

<expr><operator>.</operator><name>enc_name</name> <operator>=</operator> <literal type="string">"X-MP3-draft-00"</literal></expr>,

<expr><operator>.</operator><name>codec_type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,

<expr><operator>.</operator><name>codec_id</name> <operator>=</operator> <name>AV_CODEC_ID_MP3ADU</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>RTPDynamicProtocolHandler</name></type> <name>speex_dynamic_handler</name> <init>= <expr><block>{

<expr><operator>.</operator><name>enc_name</name> <operator>=</operator> <literal type="string">"speex"</literal></expr>,

<expr><operator>.</operator><name>codec_type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,

<expr><operator>.</operator><name>codec_id</name> <operator>=</operator> <name>AV_CODEC_ID_SPEEX</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>RTPDynamicProtocolHandler</name></type> <name>opus_dynamic_handler</name> <init>= <expr><block>{

<expr><operator>.</operator><name>enc_name</name> <operator>=</operator> <literal type="string">"opus"</literal></expr>,

<expr><operator>.</operator><name>codec_type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,

<expr><operator>.</operator><name>codec_id</name> <operator>=</operator> <name>AV_CODEC_ID_OPUS</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>RTPDynamicProtocolHandler</name></type> <name>t140_dynamic_handler</name> <init>= <expr><block>{ 

<expr><operator>.</operator><name>enc_name</name> <operator>=</operator> <literal type="string">"t140"</literal></expr>,

<expr><operator>.</operator><name>codec_type</name> <operator>=</operator> <name>AVMEDIA_TYPE_SUBTITLE</name></expr>,

<expr><operator>.</operator><name>codec_id</name> <operator>=</operator> <name>AV_CODEC_ID_TEXT</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>RTPDynamicProtocolHandler</name></type> <name>ff_rdt_video_handler</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>RTPDynamicProtocolHandler</name></type> <name>ff_rdt_audio_handler</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>RTPDynamicProtocolHandler</name></type> <name>ff_rdt_live_video_handler</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>RTPDynamicProtocolHandler</name></type> <name>ff_rdt_live_audio_handler</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>RTPDynamicProtocolHandler</name> <modifier>*</modifier></type><name><name>rtp_dynamic_protocol_handler_list</name><index>[]</index></name> <init>= <expr><block>{

<expr><operator>&amp;</operator><name>ff_ac3_dynamic_handler</name></expr>,

<expr><operator>&amp;</operator><name>ff_amr_nb_dynamic_handler</name></expr>,

<expr><operator>&amp;</operator><name>ff_amr_wb_dynamic_handler</name></expr>,

<expr><operator>&amp;</operator><name>ff_dv_dynamic_handler</name></expr>,

<expr><operator>&amp;</operator><name>ff_g726_16_dynamic_handler</name></expr>,

<expr><operator>&amp;</operator><name>ff_g726_24_dynamic_handler</name></expr>,

<expr><operator>&amp;</operator><name>ff_g726_32_dynamic_handler</name></expr>,

<expr><operator>&amp;</operator><name>ff_g726_40_dynamic_handler</name></expr>,

<expr><operator>&amp;</operator><name>ff_g726le_16_dynamic_handler</name></expr>,

<expr><operator>&amp;</operator><name>ff_g726le_24_dynamic_handler</name></expr>,

<expr><operator>&amp;</operator><name>ff_g726le_32_dynamic_handler</name></expr>,

<expr><operator>&amp;</operator><name>ff_g726le_40_dynamic_handler</name></expr>,

<expr><operator>&amp;</operator><name>ff_h261_dynamic_handler</name></expr>,

<expr><operator>&amp;</operator><name>ff_h263_1998_dynamic_handler</name></expr>,

<expr><operator>&amp;</operator><name>ff_h263_2000_dynamic_handler</name></expr>,

<expr><operator>&amp;</operator><name>ff_h263_rfc2190_dynamic_handler</name></expr>,

<expr><operator>&amp;</operator><name>ff_h264_dynamic_handler</name></expr>,

<expr><operator>&amp;</operator><name>ff_hevc_dynamic_handler</name></expr>,

<expr><operator>&amp;</operator><name>ff_ilbc_dynamic_handler</name></expr>,

<expr><operator>&amp;</operator><name>ff_jpeg_dynamic_handler</name></expr>,

<expr><operator>&amp;</operator><name>ff_mp4a_latm_dynamic_handler</name></expr>,

<expr><operator>&amp;</operator><name>ff_mp4v_es_dynamic_handler</name></expr>,

<expr><operator>&amp;</operator><name>ff_mpeg_audio_dynamic_handler</name></expr>,

<expr><operator>&amp;</operator><name>ff_mpeg_audio_robust_dynamic_handler</name></expr>,

<expr><operator>&amp;</operator><name>ff_mpeg_video_dynamic_handler</name></expr>,

<expr><operator>&amp;</operator><name>ff_mpeg4_generic_dynamic_handler</name></expr>,

<expr><operator>&amp;</operator><name>ff_mpegts_dynamic_handler</name></expr>,

<expr><operator>&amp;</operator><name>ff_ms_rtp_asf_pfa_handler</name></expr>,

<expr><operator>&amp;</operator><name>ff_ms_rtp_asf_pfv_handler</name></expr>,

<expr><operator>&amp;</operator><name>ff_qcelp_dynamic_handler</name></expr>,

<expr><operator>&amp;</operator><name>ff_qdm2_dynamic_handler</name></expr>,

<expr><operator>&amp;</operator><name>ff_qt_rtp_aud_handler</name></expr>,

<expr><operator>&amp;</operator><name>ff_qt_rtp_vid_handler</name></expr>,

<expr><operator>&amp;</operator><name>ff_quicktime_rtp_aud_handler</name></expr>,

<expr><operator>&amp;</operator><name>ff_quicktime_rtp_vid_handler</name></expr>,

<expr><operator>&amp;</operator><name>ff_rfc4175_rtp_handler</name></expr>,

<expr><operator>&amp;</operator><name>ff_svq3_dynamic_handler</name></expr>,

<expr><operator>&amp;</operator><name>ff_theora_dynamic_handler</name></expr>,

<expr><operator>&amp;</operator><name>ff_vc2hq_dynamic_handler</name></expr>,

<expr><operator>&amp;</operator><name>ff_vorbis_dynamic_handler</name></expr>,

<expr><operator>&amp;</operator><name>ff_vp8_dynamic_handler</name></expr>,

<expr><operator>&amp;</operator><name>ff_vp9_dynamic_handler</name></expr>,

<expr><operator>&amp;</operator><name>gsm_dynamic_handler</name></expr>,

<expr><operator>&amp;</operator><name>l24_dynamic_handler</name></expr>,

<expr><operator>&amp;</operator><name>opus_dynamic_handler</name></expr>,

<expr><operator>&amp;</operator><name>realmedia_mp3_dynamic_handler</name></expr>,

<expr><operator>&amp;</operator><name>speex_dynamic_handler</name></expr>,

<expr><operator>&amp;</operator><name>t140_dynamic_handler</name></expr>,

<expr><operator>&amp;</operator><name>ff_rdt_video_handler</name></expr>,

<expr><operator>&amp;</operator><name>ff_rdt_audio_handler</name></expr>,

<expr><operator>&amp;</operator><name>ff_rdt_live_video_handler</name></expr>,

<expr><operator>&amp;</operator><name>ff_rdt_live_audio_handler</name></expr>,

<expr><name>NULL</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>const</specifier> <name>RTPDynamicProtocolHandler</name> <modifier>*</modifier></type><name>ff_rtp_handler_iterate</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>opaque</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uintptr_t</name></type> <name>i</name> <init>= <expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><operator>*</operator><name>opaque</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>RTPDynamicProtocolHandler</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><name><name>rtp_dynamic_protocol_handler_list</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>opaque</name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>r</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>RTPDynamicProtocolHandler</name> <modifier>*</modifier></type><name>ff_rtp_handler_find_by_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>AVMediaType</name></name></type> <name>codec_type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>RTPDynamicProtocolHandler</name> <modifier>*</modifier></type><name>handler</name></decl>;</decl_stmt>

<while>while <condition>(<expr><name>handler</name> <operator>=</operator> <call><name>ff_rtp_handler_iterate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>handler</name><operator>-&gt;</operator><name>enc_name</name></name> <operator>&amp;&amp;</operator>

<operator>!</operator><call><name>av_strcasecmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>handler</name><operator>-&gt;</operator><name>enc_name</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<name>codec_type</name> <operator>==</operator> <name><name>handler</name><operator>-&gt;</operator><name>codec_type</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>handler</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></while>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>RTPDynamicProtocolHandler</name> <modifier>*</modifier></type><name>ff_rtp_handler_find_by_id</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>AVMediaType</name></name></type> <name>codec_type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>RTPDynamicProtocolHandler</name> <modifier>*</modifier></type><name>handler</name></decl>;</decl_stmt>

<while>while <condition>(<expr><name>handler</name> <operator>=</operator> <call><name>ff_rtp_handler_iterate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>handler</name><operator>-&gt;</operator><name>static_payload_id</name></name> <operator>&amp;&amp;</operator> <name><name>handler</name><operator>-&gt;</operator><name>static_payload_id</name></name> <operator>==</operator> <name>id</name> <operator>&amp;&amp;</operator>

<name>codec_type</name> <operator>==</operator> <name><name>handler</name><operator>-&gt;</operator><name>codec_type</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>handler</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></while>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rtcp_parse_packet</name><parameter_list>(<parameter><decl><type><name>RTPDemuxContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>payload_len</name></decl>;</decl_stmt>

<while>while <condition>(<expr><name>len</name> <operator>&gt;=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>payload_len</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><operator>(</operator><call><name>AV_RB16</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>RTCP_SR</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>payload_len</name> <operator>&lt;</operator> <literal type="number">20</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>ic</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid RTCP SR packet length\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_rtcp_reception_time</name></name> <operator>=</operator> <call><name>av_gettime_relative</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_rtcp_ntp_time</name></name> <operator>=</operator> <call><name>AV_RB64</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_rtcp_timestamp</name></name> <operator>=</operator> <call><name>AV_RB32</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>first_rtcp_ntp_time</name></name> <operator>==</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>first_rtcp_ntp_time</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>last_rtcp_ntp_time</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>base_timestamp</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>base_timestamp</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>last_rtcp_timestamp</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rtcp_ts_offset</name></name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>last_rtcp_timestamp</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>base_timestamp</name></name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>RTCP_BYE</name></expr>:</case>

<return>return <expr><operator>-</operator><name>RTCP_BYE</name></expr>;</return>

</block_content>}</block></switch>

<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>payload_len</name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>payload_len</name></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RTP_SEQ_MOD</name></cpp:macro> <cpp:value>(1 &lt;&lt; 16)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>rtp_init_statistics</name><parameter_list>(<parameter><decl><type><name>RTPStatistics</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>base_sequence</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>RTPStatistics</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>max_seq</name></name> <operator>=</operator> <name>base_sequence</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>probation</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>rtp_init_sequence</name><parameter_list>(<parameter><decl><type><name>RTPStatistics</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>seq</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>max_seq</name></name> <operator>=</operator> <name>seq</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cycles</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>base_seq</name></name> <operator>=</operator> <name>seq</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bad_seq</name></name> <operator>=</operator> <name>RTP_SEQ_MOD</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>received</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>expected_prior</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>received_prior</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>jitter</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>transit</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rtp_valid_packet_in_sequence</name><parameter_list>(<parameter><decl><type><name>RTPStatistics</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>seq</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>udelta</name> <init>= <expr><name>seq</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>max_seq</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MAX_DROPOUT</name> <init>= <expr><literal type="number">3000</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MAX_MISORDER</name> <init>= <expr><literal type="number">100</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MIN_SEQUENTIAL</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>probation</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>seq</name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>max_seq</name></name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>probation</name></name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>max_seq</name></name> <operator>=</operator> <name>seq</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>probation</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rtp_init_sequence</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>seq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>received</name></name><operator>++</operator></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>probation</name></name> <operator>=</operator> <name>MIN_SEQUENTIAL</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>max_seq</name></name> <operator>=</operator> <name>seq</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>udelta</name> <operator>&lt;</operator> <name>MAX_DROPOUT</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>seq</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>max_seq</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cycles</name></name> <operator>+=</operator> <name>RTP_SEQ_MOD</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>max_seq</name></name> <operator>=</operator> <name>seq</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>udelta</name> <operator>&lt;=</operator> <name>RTP_SEQ_MOD</name> <operator>-</operator> <name>MAX_MISORDER</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>seq</name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>bad_seq</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rtp_init_sequence</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>seq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bad_seq</name></name> <operator>=</operator> <operator>(</operator><name>seq</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>RTP_SEQ_MOD</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>received</name></name><operator>++</operator></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>rtcp_update_jitter</name><parameter_list>(<parameter><decl><type><name>RTPStatistics</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>sent_timestamp</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>arrival_timestamp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>transit</name> <init>= <expr><name>arrival_timestamp</name> <operator>-</operator> <name>sent_timestamp</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>prev_transit</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>transit</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>d</name> <init>= <expr><name>transit</name> <operator>-</operator> <name>prev_transit</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>transit</name></name> <operator>=</operator> <name>transit</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>prev_transit</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>jitter</name></name> <operator>+=</operator> <name>d</name> <operator>-</operator> <operator>(</operator><name>int32_t</name><operator>)</operator> <operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>jitter</name></name> <operator>+</operator> <literal type="number">8</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_rtp_check_and_send_back_rr</name><parameter_list>(<parameter><decl><type><name>RTPDemuxContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>,

<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>avio</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rtcp_bytes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RTPStatistics</name> <modifier>*</modifier></type><name>stats</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>statistics</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>lost</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>extended_max</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>expected_interval</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>received_interval</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>lost_interval</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>expected</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>fraction</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name>fd</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>avio</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>count</name> <operator>&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>octet_count</name></name> <operator>+=</operator> <name>count</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rtcp_bytes</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>octet_count</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>last_octet_count</name></name><operator>)</operator> <operator>*</operator> <name>RTCP_TX_RATIO_NUM</name><operator>)</operator> <operator>/</operator>

<name>RTCP_TX_RATIO_DEN</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rtcp_bytes</name> <operator>/=</operator> <literal type="number">50</literal></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>rtcp_bytes</name> <operator>&lt;</operator> <literal type="number">28</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_octet_count</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>octet_count</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fd</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>pb</name> <operator>=</operator> <name>avio</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>avio_open_dyn_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>(</operator><name>RTP_VERSION</name> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>RTCP_RR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>ssrc</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>ssrc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>extended_max</name> <operator>=</operator> <name><name>stats</name><operator>-&gt;</operator><name>cycles</name></name> <operator>+</operator> <name><name>stats</name><operator>-&gt;</operator><name>max_seq</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>expected</name> <operator>=</operator> <name>extended_max</name> <operator>-</operator> <name><name>stats</name><operator>-&gt;</operator><name>base_seq</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>lost</name> <operator>=</operator> <name>expected</name> <operator>-</operator> <name><name>stats</name><operator>-&gt;</operator><name>received</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>lost</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>lost</name></expr></argument>, <argument><expr><literal type="number">0xffffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>expected_interval</name> <operator>=</operator> <name>expected</name> <operator>-</operator> <name><name>stats</name><operator>-&gt;</operator><name>expected_prior</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stats</name><operator>-&gt;</operator><name>expected_prior</name></name> <operator>=</operator> <name>expected</name></expr>;</expr_stmt>

<expr_stmt><expr><name>received_interval</name> <operator>=</operator> <name><name>stats</name><operator>-&gt;</operator><name>received</name></name> <operator>-</operator> <name><name>stats</name><operator>-&gt;</operator><name>received_prior</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stats</name><operator>-&gt;</operator><name>received_prior</name></name> <operator>=</operator> <name><name>stats</name><operator>-&gt;</operator><name>received</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>lost_interval</name> <operator>=</operator> <name>expected_interval</name> <operator>-</operator> <name>received_interval</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>expected_interval</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>lost_interval</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>fraction</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>fraction</name> <operator>=</operator> <operator>(</operator><name>lost_interval</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>/</operator> <name>expected_interval</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>fraction</name> <operator>=</operator> <operator>(</operator><name>fraction</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>|</operator> <name>lost</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>fraction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>extended_max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>stats</name><operator>-&gt;</operator><name>jitter</name></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>last_rtcp_ntp_time</name></name> <operator>==</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>middle_32_bits</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>last_rtcp_ntp_time</name></name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>delay_since_last</name> <init>= <expr><call><name>av_rescale</name><argument_list>(<argument><expr><call><name>av_gettime_relative</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>last_rtcp_reception_time</name></name></expr></argument>,

<argument><expr><literal type="number">65536</literal></expr></argument>, <argument><expr><name>AV_TIME_BASE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>middle_32_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>delay_since_last</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>(</operator><name>RTP_VERSION</name> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>RTCP_SDES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>hostname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>(</operator><literal type="number">7</literal> <operator>+</operator> <name>len</name> <operator>+</operator> <literal type="number">3</literal><operator>)</operator> <operator>/</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>ssrc</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x01</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>hostname</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<for>for <control>(<init><expr><name>len</name> <operator>=</operator> <operator>(</operator><literal type="number">7</literal> <operator>+</operator> <name>len</name><operator>)</operator> <operator>%</operator> <literal type="number">4</literal></expr>;</init> <condition><expr><name>len</name> <operator>%</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>len</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>avio_flush</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fd</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>avio_close_dyn_buf</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>buf</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name> <name>av_unused</name></type> <name>result</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>ic</name></name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"sending %d bytes of RR\n"</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>ffurl_write</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>ic</name></name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"result from ffurl_write: %d\n"</literal></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_rtp_send_punch_packets</name><parameter_list>(<parameter><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>rtp_handle</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>avio_open_dyn_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>(</operator><name>RTP_VERSION</name> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>avio_close_dyn_buf</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>buf</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ffurl_write</name><argument_list>(<argument><expr><name>rtp_handle</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>avio_open_dyn_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>(</operator><name>RTP_VERSION</name> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>RTCP_RR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>avio_close_dyn_buf</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>buf</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ffurl_write</name><argument_list>(<argument><expr><name>rtp_handle</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>find_missing_packets</name><parameter_list>(<parameter><decl><type><name>RTPDemuxContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>first_missing</name></decl></parameter>,

<parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>missing_mask</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>next_seq</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>seq</name></name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RTPPacket</name> <modifier>*</modifier></type><name>pkt</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>queue</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pkt</name> <operator>||</operator> <name><name>pkt</name><operator>-&gt;</operator><name>seq</name></name> <operator>==</operator> <name>next_seq</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>missing_mask</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>missing_seq</name> <init>= <expr><name>next_seq</name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>pkt</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int16_t</name></type> <name>diff</name> <init>= <expr><name><name>pkt</name><operator>-&gt;</operator><name>seq</name></name> <operator>-</operator> <name>missing_seq</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>diff</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pkt</name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pkt</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>seq</name></name> <operator>==</operator> <name>missing_seq</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>missing_mask</name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>i</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>first_missing</name> <operator>=</operator> <name>next_seq</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_rtp_send_rtcp_feedback</name><parameter_list>(<parameter><decl><type><name>RTPDemuxContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>,

<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>avio</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>need_keyframe</name></decl>, <decl><type ref="prev"/><name>missing_packets</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>now</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>first_missing</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>missing_mask</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fd</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>avio</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>need_keyframe</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>handler</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>need_keyframe</name></name> <operator>&amp;&amp;</operator>

<call><name><name>s</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>need_keyframe</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>dynamic_protocol_context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>missing_packets</name> <operator>=</operator> <call><name>find_missing_packets</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>first_missing</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>missing_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>need_keyframe</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>missing_packets</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>now</name> <operator>=</operator> <call><name>av_gettime_relative</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>last_feedback_time</name></name> <operator>&amp;&amp;</operator>

<operator>(</operator><name>now</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>last_feedback_time</name></name><operator>)</operator> <operator>&lt;</operator> <name>MIN_FEEDBACK_INTERVAL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_feedback_time</name></name> <operator>=</operator> <name>now</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fd</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>pb</name> <operator>=</operator> <name>avio</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>avio_open_dyn_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>need_keyframe</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>(</operator><name>RTP_VERSION</name> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>|</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>RTCP_PSFB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>ssrc</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>ssrc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>missing_packets</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>(</operator><name>RTP_VERSION</name> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>|</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>RTCP_RTPFB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>ssrc</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>ssrc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>first_missing</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>missing_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>avio_flush</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fd</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>avio_close_dyn_buf</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>buf</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ffurl_write</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>RTPDemuxContext</name> <modifier>*</modifier></type><name>ff_rtp_parse_open</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s1</name></decl></parameter>, <parameter><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>payload_type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>queue_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>RTPDemuxContext</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>RTPDemuxContext</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>s</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>payload_type</name></name> <operator>=</operator> <name>payload_type</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_rtcp_ntp_time</name></name> <operator>=</operator> <name>AV_NOPTS_VALUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>first_rtcp_ntp_time</name></name> <operator>=</operator> <name>AV_NOPTS_VALUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ic</name></name> <operator>=</operator> <name>s1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>st</name></name> <operator>=</operator> <name>st</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>queue_size</name></name> <operator>=</operator> <name>queue_size</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>ic</name></name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"setting jitter buffer size to %d\n"</literal></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>queue_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rtp_init_statistics</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>statistics</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>st</name></expr>)</condition> <block>{<block_content>

<switch>switch <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_CODEC_ID_ADPCM_G722</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>==</operator> <literal type="number">8000</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>=</operator> <literal type="number">16000</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>gethostname</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>hostname</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>hostname</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>s</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_rtp_parse_set_dynamic_protocol</name><parameter_list>(<parameter><decl><type><name>RTPDemuxContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>PayloadContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>RTPDynamicProtocolHandler</name> <modifier>*</modifier></type><name>handler</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dynamic_protocol_context</name></name> <operator>=</operator> <name>ctx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>handler</name></name> <operator>=</operator> <name>handler</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_rtp_parse_set_crypto</name><parameter_list>(<parameter><decl><type><name>RTPDemuxContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>suite</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>params</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ff_srtp_set_crypto</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>srtp</name></name></expr></argument>, <argument><expr><name>suite</name></expr></argument>, <argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>srtp_enabled</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>finalize_packet</name><parameter_list>(<parameter><decl><type><name>RTPDemuxContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>timestamp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name> <operator>||</operator> <name><name>pkt</name><operator>-&gt;</operator><name>dts</name></name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name>timestamp</name> <operator>==</operator> <name>RTP_NOTS_VALUE</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>last_rtcp_ntp_time</name></name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>ic</name><operator>-&gt;</operator><name>nb_streams</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>addend</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>delta_timestamp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>delta_timestamp</name> <operator>=</operator> <name>timestamp</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>last_rtcp_timestamp</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>addend</name> <operator>=</operator> <call><name>av_rescale</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>last_rtcp_ntp_time</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>first_rtcp_ntp_time</name></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>den</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator> <name><name>s</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>num</name></name> <operator>&lt;&lt;</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>range_start_offset</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>rtcp_ts_offset</name></name> <operator>+</operator> <name>addend</name> <operator>+</operator>

<name>delta_timestamp</name></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>base_timestamp</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>base_timestamp</name></name> <operator>=</operator> <name>timestamp</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>timestamp</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>unwrapped_timestamp</name></name> <operator>+=</operator> <name>timestamp</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>unwrapped_timestamp</name></name> <operator>+=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><name>timestamp</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>timestamp</name></name><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>timestamp</name></name> <operator>=</operator> <name>timestamp</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>unwrapped_timestamp</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>range_start_offset</name></name> <operator>-</operator>

<name><name>s</name><operator>-&gt;</operator><name>base_timestamp</name></name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rtp_parse_packet_internal</name><parameter_list>(<parameter><decl><type><name>RTPDemuxContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>ssrc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>payload_type</name></decl>, <decl><type ref="prev"/><name>seq</name></decl>, <decl><type ref="prev"/><name>flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ext</name></decl>, <decl><type ref="prev"/><name>csrc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>timestamp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rv</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>csrc</name> <operator>=</operator> <name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ext</name> <operator>=</operator> <name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x10</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>payload_type</name> <operator>=</operator> <name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7f</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>RTP_FLAG_MARKER</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>seq</name> <operator>=</operator> <call><name>AV_RB16</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>timestamp</name> <operator>=</operator> <call><name>AV_RB32</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ssrc</name> <operator>=</operator> <call><name>AV_RB32</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ssrc</name></name> <operator>=</operator> <name>ssrc</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>payload_type</name></name> <operator>!=</operator> <name>payload_type</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>st</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>st</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>rtp_valid_packet_in_sequence</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>statistics</name></name></expr></argument>, <argument><expr><name>seq</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>ic</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"RTP: PT=%02x: bad cseq %04x expected=%04x\n"</literal></expr></argument>,

<argument><expr><name>payload_type</name></expr></argument>, <argument><expr><name>seq</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>seq</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x20</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>padding</name> <init>= <expr><name><name>buf</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <literal type="number">12</literal> <operator>+</operator> <name>padding</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>padding</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>seq</name></name> <operator>=</operator> <name>seq</name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">12</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>+=</operator> <literal type="number">12</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">4</literal> <operator>*</operator> <name>csrc</name></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>+=</operator> <literal type="number">4</literal> <operator>*</operator> <name>csrc</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ext</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ext</name> <operator>=</operator> <operator>(</operator><call><name>AV_RB16</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <name>ext</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>ext</name></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>ext</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>handler</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>parse_packet</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name><name>s</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>parse_packet</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>ic</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>dynamic_protocol_context</name></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>st</name></name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>timestamp</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>seq</name></expr></argument>,

<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>st</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>rv</name> <operator>=</operator> <call><name>av_new_packet</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>rv</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>stream_index</name></name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>index</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>finalize_packet</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>rv</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_rtp_reset_packet_queue</name><parameter_list>(<parameter><decl><type><name>RTPDemuxContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<while>while <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>queue</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>RTPPacket</name> <modifier>*</modifier></type><name>next</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>queue</name><operator>-&gt;</operator><name>next</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>queue</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>queue</name></name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>seq</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>queue_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>prev_ret</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>enqueue_packet</name><parameter_list>(<parameter><decl><type><name>RTPDemuxContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>seq</name> <init>= <expr><call><name>AV_RB16</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RTPPacket</name> <modifier>*</modifier><modifier>*</modifier></type><name>cur</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>queue</name></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>packet</name></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>*</operator><name>cur</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int16_t</name></type> <name>diff</name> <init>= <expr><name>seq</name> <operator>-</operator> <name><operator>(</operator><operator>*</operator><name>cur</name><operator>)</operator><operator>-&gt;</operator><name>seq</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>diff</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>cur</name> <operator>=</operator> <operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>cur</name><operator>)</operator><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>packet</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>packet</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>packet</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>recvtime</name></name> <operator>=</operator> <call><name>av_gettime_relative</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>seq</name></name> <operator>=</operator> <name>seq</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <operator>*</operator><name>cur</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>cur</name> <operator>=</operator> <name>packet</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>queue_len</name></name><operator>++</operator></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>has_next_packet</name><parameter_list>(<parameter><decl><type><name>RTPDemuxContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>s</name><operator>-&gt;</operator><name>queue</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>queue</name><operator>-&gt;</operator><name>seq</name></name> <operator>==</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>seq</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>int64_t</name></type> <name>ff_rtp_queued_packet_time</name><parameter_list>(<parameter><decl><type><name>RTPDemuxContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>queue</name></name></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>queue</name><operator>-&gt;</operator><name>recvtime</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rtp_parse_queued_packet</name><parameter_list>(<parameter><decl><type><name>RTPDemuxContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RTPPacket</name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>queue_len</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>has_next_packet</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>ic</name></name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,

<argument><expr><literal type="string">"RTP: missed %d packets\n"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>queue</name><operator>-&gt;</operator><name>seq</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>seq</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>rtp_parse_packet_internal</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>queue</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>queue</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>queue</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>queue</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>queue</name></name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>queue_len</name></name><operator>--</operator></expr>;</expr_stmt>

<return>return <expr><name>rv</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rtp_parse_one_packet</name><parameter_list>(<parameter><decl><type><name>RTPDemuxContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>bufptr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><ternary><condition><expr><name>bufptr</name></expr> ?</condition><then> <expr><operator>*</operator><name>bufptr</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>timestamp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rv</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>prev_ret</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>rtp_parse_queued_packet</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>handler</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>parse_packet</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>timestamp</name> <operator>=</operator> <name>RTP_NOTS_VALUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name><name>s</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>parse_packet</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>ic</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>dynamic_protocol_context</name></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>st</name></name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>timestamp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>finalize_packet</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>rv</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">12</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xc0</literal><operator>)</operator> <operator>!=</operator> <operator>(</operator><name>RTP_VERSION</name> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>RTP_PT_IS_RTCP</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>rtcp_parse_packet</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>st</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>received</name> <init>= <expr><call><name>av_gettime_relative</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>arrival_ts</name> <init>= <expr><call><name>av_rescale_q</name><argument_list>(<argument><expr><name>received</name></expr></argument>, <argument><expr><name>AV_TIME_BASE_Q</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>st</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>timestamp</name> <operator>=</operator> <call><name>AV_RB32</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rtcp_update_jitter</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>statistics</name></name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>, <argument><expr><name>arrival_ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>seq</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>queue</name></name><operator>)</operator> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>queue_size</name></name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>rtp_parse_packet_internal</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>seq</name> <init>= <expr><call><name>AV_RB16</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name>diff</name> <init>= <expr><name>seq</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>seq</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>diff</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>ic</name></name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,

<argument><expr><literal type="string">"RTP: dropping old packet received too late\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>diff</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>rtp_parse_packet_internal</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>rv</name></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>enqueue_packet</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rv</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>rv</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>bufptr</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>queue_len</name></name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>queue_size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>ic</name></name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"jitter buffer full\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>rtp_parse_queued_packet</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_rtp_parse_packet</name><parameter_list>(<parameter><decl><type><name>RTPDemuxContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>bufptr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>srtp_enabled</name></name> <operator>&amp;&amp;</operator> <name>bufptr</name> <operator>&amp;&amp;</operator> <call><name>ff_srtp_decrypt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>srtp</name></name></expr></argument>, <argument><expr><operator>*</operator><name>bufptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>rtp_parse_one_packet</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>bufptr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>prev_ret</name></name> <operator>=</operator> <name>rv</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>rv</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>has_next_packet</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>rtp_parse_queued_packet</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<return>return <expr><ternary><condition><expr><name>rv</name></expr> ?</condition><then> <expr><name>rv</name></expr> </then><else>: <expr><call><name>has_next_packet</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_rtp_parse_close</name><parameter_list>(<parameter><decl><type><name>RTPDemuxContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ff_rtp_reset_packet_queue</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_srtp_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>srtp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_parse_fmtp</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,

<parameter><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>PayloadContext</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,

<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>parse_fmtp</name>)<parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,

<parameter><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>,

<parameter><decl><type><name>PayloadContext</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>attr</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>value_size</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>value</name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name>value_size</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to allocate data for FMTP.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while> 

<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while> 

<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while> 

<while>while <condition>(<expr><call><name>ff_rtsp_next_attr_and_value</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>,

<argument><expr><name>attr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><name>value</name></expr></argument>, <argument><expr><name>value_size</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>parse_fmtp</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>res</name> <operator>!=</operator> <name>AVERROR_PATCHWELCOME</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_rtp_finalize_packet</name><parameter_list>(<parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>, <parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier><modifier>*</modifier></type><name>dyn_buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stream_idx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_init_packet</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <call><name>avio_close_dyn_buf</name><argument_list>(<argument><expr><operator>*</operator><name>dyn_buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>stream_index</name></name> <operator>=</operator> <name>stream_idx</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>dyn_buf</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_packet_from_data</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>

</block_content>}</block></function>

</unit>
