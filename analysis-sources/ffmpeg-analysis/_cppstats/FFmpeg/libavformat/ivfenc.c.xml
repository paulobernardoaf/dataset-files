<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavformat\ivfenc.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avformat.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>IVFEncContext</name> <block>{

<decl_stmt><decl><type><name>unsigned</name></type> <name>frame_cnt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>last_pts</name></decl>, <name>sum_delta_pts</name>;</decl_stmt>

}</block></struct></type> <name>IVFEncContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ivf_write_header</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVCodecParameters</name> <modifier>*</modifier></type><name>par</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Format supports only exactly one video stream\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>par</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>codecpar</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>par</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>!=</operator> <name>AVMEDIA_TYPE_VIDEO</name> <operator>||</operator>

<operator>!</operator><operator>(</operator><name><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_AV1</name> <operator>||</operator>

<name><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_VP8</name> <operator>||</operator>

<name><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_VP9</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Currently only VP8, VP9 and AV1 are supported!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"DKIF"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_VP9</name></expr> ?</condition><then> <expr><call><name>AV_RL32</name><argument_list>(<argument><expr><literal type="string">"VP90"</literal></expr></argument>)</argument_list></call></expr> </then><else>:

<expr><ternary><condition><expr><name><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_VP8</name></expr> ?</condition><then> <expr><call><name>AV_RL32</name><argument_list>(<argument><expr><literal type="string">"VP80"</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>AV_RL32</name><argument_list>(<argument><expr><literal type="string">"AV01"</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>par</name><operator>-&gt;</operator><name>width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>par</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>time_base</name><operator>.</operator><name>den</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>time_base</name><operator>.</operator><name>num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wl64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0xFFFFFFFFFFFFFFFFULL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ivf_write_packet</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IVFEncContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>avio_wl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wl64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>frame_cnt</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>sum_delta_pts</name></name> <operator>+=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name> <operator>-</operator> <name><name>ctx</name><operator>-&gt;</operator><name>last_pts</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>frame_cnt</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>last_pts</name></name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ivf_write_trailer</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IVFEncContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>pb</name><operator>-&gt;</operator><name>seekable</name></name> <operator>&amp;</operator> <name>AVIO_SEEKABLE_NORMAL</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>frame_cnt</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>end</name> <init>= <expr><call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>frame_cnt</name></name> <operator>*</operator> <name><name>ctx</name><operator>-&gt;</operator><name>sum_delta_pts</name></name> <operator>/</operator> <operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>frame_cnt</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ivf_check_bitstream</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>AVFormatContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name><name>pkt</name><operator>-&gt;</operator><name>stream_index</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_VP9</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_stream_add_bitstream_filter</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><literal type="string">"vp9_superframe"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_AV1</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_stream_add_bitstream_filter</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><literal type="string">"av1_metadata"</literal></expr></argument>, <argument><expr><literal type="string">"td=insert"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVCodecTag</name></type> <name><name>codec_ivf_tags</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><name>AV_CODEC_ID_VP8</name></expr>, <macro><name>MKTAG</name><argument_list>(<argument><literal type="char">'V'</literal></argument>, <argument><literal type="char">'P'</literal></argument>, <argument><literal type="char">'8'</literal></argument>, <argument><literal type="char">'0'</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><name>AV_CODEC_ID_VP9</name></expr>, <macro><name>MKTAG</name><argument_list>(<argument><literal type="char">'V'</literal></argument>, <argument><literal type="char">'P'</literal></argument>, <argument><literal type="char">'9'</literal></argument>, <argument><literal type="char">'0'</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><name>AV_CODEC_ID_AV1</name></expr>, <macro><name>MKTAG</name><argument_list>(<argument><literal type="char">'A'</literal></argument>, <argument><literal type="char">'V'</literal></argument>, <argument><literal type="char">'0'</literal></argument>, <argument><literal type="char">'1'</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><name>AV_CODEC_ID_NONE</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVOutputFormat</name></type> <name>ff_ivf_muxer</name> <init>= <expr><block>{

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>IVFEncContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"ivf"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"On2 IVF"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>extensions</name> <operator>=</operator> <literal type="string">"ivf"</literal></expr>,

<expr><operator>.</operator><name>audio_codec</name> <operator>=</operator> <name>AV_CODEC_ID_NONE</name></expr>,

<expr><operator>.</operator><name>video_codec</name> <operator>=</operator> <name>AV_CODEC_ID_VP8</name></expr>,

<expr><operator>.</operator><name>write_header</name> <operator>=</operator> <name>ivf_write_header</name></expr>,

<expr><operator>.</operator><name>write_packet</name> <operator>=</operator> <name>ivf_write_packet</name></expr>,

<expr><operator>.</operator><name>write_trailer</name> <operator>=</operator> <name>ivf_write_trailer</name></expr>,

<expr><operator>.</operator><name>check_bitstream</name> <operator>=</operator> <name>ivf_check_bitstream</name></expr>,

<expr><operator>.</operator><name>codec_tag</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>AVCodecTag</name><operator>*</operator> <specifier>const</specifier> <index>[]</index><operator>)</operator><block>{ <expr><name>codec_ivf_tags</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
