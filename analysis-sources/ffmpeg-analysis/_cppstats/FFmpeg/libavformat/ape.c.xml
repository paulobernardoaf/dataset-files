<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavformat\ape.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avformat.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apetag.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APE_MIN_VERSION</name></cpp:macro> <cpp:value>3800</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APE_MAX_VERSION</name></cpp:macro> <cpp:value>3990</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAC_FORMAT_FLAG_8_BIT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAC_FORMAT_FLAG_CRC</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAC_FORMAT_FLAG_HAS_PEAK_LEVEL</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAC_FORMAT_FLAG_24_BIT</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAC_FORMAT_FLAG_HAS_SEEK_ELEMENTS</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAC_FORMAT_FLAG_CREATE_WAV_HEADER</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APE_EXTRADATA_SIZE</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>APEFrame</name> <block>{

<decl_stmt><decl><type><name>int64_t</name></type> <name>pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nblocks</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>skip</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>pts</name></decl>;</decl_stmt>

}</block></struct></type> <name>APEFrame</name>;</typedef>

<typedef>typedef <type><struct>struct <name>APEContext</name> <block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name>junklength</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>firstframe</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>totalsamples</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>currentframe</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>APEFrame</name> <modifier>*</modifier></type><name>frames</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name>fileversion</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name>padding1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>descriptorlength</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>headerlength</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>seektablelength</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>wavheaderlength</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>audiodatalength</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>audiodatalength_high</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>wavtaillength</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>md5</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>compressiontype</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>formatflags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>blocksperframe</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>finalframeblocks</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>totalframes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>bps</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>channels</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>samplerate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>seektable</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>bittable</name></decl>;</decl_stmt>

}</block></struct></type> <name>APEContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ape_probe</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVProbeData</name> <modifier>*</modifier></type> <name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>version</name> <init>= <expr><call><name>AV_RL16</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>buf</name></name><operator>+</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>AV_RL32</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'M'</literal></expr></argument>, <argument><expr><literal type="char">'A'</literal></expr></argument>, <argument><expr><literal type="char">'C'</literal></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>version</name> <argument_list type="generic">&lt; <argument><expr><name>APE_MIN_VERSION</name> <operator>||</operator> <name>version</name></expr></argument> &gt;</argument_list></name> <name>APE_MAX_VERSION</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVPROBE_SCORE_MAX</name><operator>/</operator><literal type="number">4</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>AVPROBE_SCORE_MAX</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ape_dumpinfo</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>APEContext</name> <modifier>*</modifier></type> <name>ape_ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Descriptor Block:\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"fileversion = %"</literal><name>PRId16</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>ape_ctx</name><operator>-&gt;</operator><name>fileversion</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"descriptorlength = %"</literal><name>PRIu32</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>ape_ctx</name><operator>-&gt;</operator><name>descriptorlength</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"headerlength = %"</literal><name>PRIu32</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>ape_ctx</name><operator>-&gt;</operator><name>headerlength</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"seektablelength = %"</literal><name>PRIu32</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>ape_ctx</name><operator>-&gt;</operator><name>seektablelength</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"wavheaderlength = %"</literal><name>PRIu32</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>ape_ctx</name><operator>-&gt;</operator><name>wavheaderlength</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"audiodatalength = %"</literal><name>PRIu32</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>ape_ctx</name><operator>-&gt;</operator><name>audiodatalength</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"audiodatalength_high = %"</literal><name>PRIu32</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>ape_ctx</name><operator>-&gt;</operator><name>audiodatalength_high</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"wavtaillength = %"</literal><name>PRIu32</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>ape_ctx</name><operator>-&gt;</operator><name>wavtaillength</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"md5 = "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"%02x"</literal></expr></argument>, <argument><expr><name><name>ape_ctx</name><operator>-&gt;</operator><name>md5</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"\nHeader Block:\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"compressiontype = %"</literal><name>PRIu16</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>ape_ctx</name><operator>-&gt;</operator><name>compressiontype</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"formatflags = %"</literal><name>PRIu16</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>ape_ctx</name><operator>-&gt;</operator><name>formatflags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"blocksperframe = %"</literal><name>PRIu32</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>ape_ctx</name><operator>-&gt;</operator><name>blocksperframe</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"finalframeblocks = %"</literal><name>PRIu32</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>ape_ctx</name><operator>-&gt;</operator><name>finalframeblocks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"totalframes = %"</literal><name>PRIu32</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>ape_ctx</name><operator>-&gt;</operator><name>totalframes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"bps = %"</literal><name>PRIu16</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>ape_ctx</name><operator>-&gt;</operator><name>bps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"channels = %"</literal><name>PRIu16</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>ape_ctx</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"samplerate = %"</literal><name>PRIu32</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>ape_ctx</name><operator>-&gt;</operator><name>samplerate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"\nSeektable\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ape_ctx</name><operator>-&gt;</operator><name>seektablelength</name></name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>!=</operator> <name><name>ape_ctx</name><operator>-&gt;</operator><name>totalframes</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"No seektable\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ape_ctx</name><operator>-&gt;</operator><name>seektablelength</name></name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>ape_ctx</name><operator>-&gt;</operator><name>totalframes</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"%8d %"</literal><name>PRIu32</name><literal type="string">" (%"</literal><name>PRIu32</name><literal type="string">" bytes)"</literal></expr></argument>,

<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>ape_ctx</name><operator>-&gt;</operator><name>seektable</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>ape_ctx</name><operator>-&gt;</operator><name>seektable</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>ape_ctx</name><operator>-&gt;</operator><name>seektable</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ape_ctx</name><operator>-&gt;</operator><name>bittable</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">" + %2d bits\n"</literal></expr></argument>,

<argument><expr><name><name>ape_ctx</name><operator>-&gt;</operator><name>bittable</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"%8d %"</literal><name>PRIu32</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>ape_ctx</name><operator>-&gt;</operator><name>seektable</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"\nFrames\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ape_ctx</name><operator>-&gt;</operator><name>totalframes</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"%8d %8"</literal><name>PRId64</name><literal type="string">" %8d (%d samples)\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>,

<argument><expr><name><name>ape_ctx</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pos</name></expr></argument>, <argument><expr><name><name>ape_ctx</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr></argument>,

<argument><expr><name><name>ape_ctx</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nblocks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"\nCalculated information:\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"junklength = %"</literal><name>PRIu32</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>ape_ctx</name><operator>-&gt;</operator><name>junklength</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"firstframe = %"</literal><name>PRIu32</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>ape_ctx</name><operator>-&gt;</operator><name>firstframe</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"totalsamples = %"</literal><name>PRIu32</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>ape_ctx</name><operator>-&gt;</operator><name>totalsamples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ape_read_header</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>APEContext</name> <modifier>*</modifier></type><name>ape</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>tag</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>total_blocks</name></decl>, <decl><type ref="prev"/><name>final_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>pts</name></decl>, <decl><type ref="prev"/><name>file_size</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ape</name><operator>-&gt;</operator><name>junklength</name></name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tag</name> <operator>=</operator> <call><name>avio_rl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tag</name> <operator>!=</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'M'</literal></expr></argument>, <argument><expr><literal type="char">'A'</literal></expr></argument>, <argument><expr><literal type="char">'C'</literal></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ape</name><operator>-&gt;</operator><name>fileversion</name></name> <operator>=</operator> <call><name>avio_rl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ape</name><operator>-&gt;</operator><name>fileversion</name></name> <operator>&lt;</operator> <name>APE_MIN_VERSION</name> <operator>||</operator> <name><name>ape</name><operator>-&gt;</operator><name>fileversion</name></name> <operator>&gt;</operator> <name>APE_MAX_VERSION</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unsupported file version - %d.%02d\n"</literal></expr></argument>,

<argument><expr><name><name>ape</name><operator>-&gt;</operator><name>fileversion</name></name> <operator>/</operator> <literal type="number">1000</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>ape</name><operator>-&gt;</operator><name>fileversion</name></name> <operator>%</operator> <literal type="number">1000</literal><operator>)</operator> <operator>/</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ape</name><operator>-&gt;</operator><name>fileversion</name></name> <operator>&gt;=</operator> <literal type="number">3980</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ape</name><operator>-&gt;</operator><name>padding1</name></name> <operator>=</operator> <call><name>avio_rl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ape</name><operator>-&gt;</operator><name>descriptorlength</name></name> <operator>=</operator> <call><name>avio_rl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ape</name><operator>-&gt;</operator><name>headerlength</name></name> <operator>=</operator> <call><name>avio_rl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ape</name><operator>-&gt;</operator><name>seektablelength</name></name> <operator>=</operator> <call><name>avio_rl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ape</name><operator>-&gt;</operator><name>wavheaderlength</name></name> <operator>=</operator> <call><name>avio_rl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ape</name><operator>-&gt;</operator><name>audiodatalength</name></name> <operator>=</operator> <call><name>avio_rl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ape</name><operator>-&gt;</operator><name>audiodatalength_high</name></name> <operator>=</operator> <call><name>avio_rl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ape</name><operator>-&gt;</operator><name>wavtaillength</name></name> <operator>=</operator> <call><name>avio_rl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_read</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>ape</name><operator>-&gt;</operator><name>md5</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ape</name><operator>-&gt;</operator><name>descriptorlength</name></name> <operator>&gt;</operator> <literal type="number">52</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>ape</name><operator>-&gt;</operator><name>descriptorlength</name></name> <operator>-</operator> <literal type="number">52</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ape</name><operator>-&gt;</operator><name>compressiontype</name></name> <operator>=</operator> <call><name>avio_rl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ape</name><operator>-&gt;</operator><name>formatflags</name></name> <operator>=</operator> <call><name>avio_rl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ape</name><operator>-&gt;</operator><name>blocksperframe</name></name> <operator>=</operator> <call><name>avio_rl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ape</name><operator>-&gt;</operator><name>finalframeblocks</name></name> <operator>=</operator> <call><name>avio_rl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ape</name><operator>-&gt;</operator><name>totalframes</name></name> <operator>=</operator> <call><name>avio_rl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ape</name><operator>-&gt;</operator><name>bps</name></name> <operator>=</operator> <call><name>avio_rl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ape</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <call><name>avio_rl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ape</name><operator>-&gt;</operator><name>samplerate</name></name> <operator>=</operator> <call><name>avio_rl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>ape</name><operator>-&gt;</operator><name>descriptorlength</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ape</name><operator>-&gt;</operator><name>headerlength</name></name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ape</name><operator>-&gt;</operator><name>compressiontype</name></name> <operator>=</operator> <call><name>avio_rl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ape</name><operator>-&gt;</operator><name>formatflags</name></name> <operator>=</operator> <call><name>avio_rl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ape</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <call><name>avio_rl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ape</name><operator>-&gt;</operator><name>samplerate</name></name> <operator>=</operator> <call><name>avio_rl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ape</name><operator>-&gt;</operator><name>wavheaderlength</name></name> <operator>=</operator> <call><name>avio_rl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ape</name><operator>-&gt;</operator><name>wavtaillength</name></name> <operator>=</operator> <call><name>avio_rl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ape</name><operator>-&gt;</operator><name>totalframes</name></name> <operator>=</operator> <call><name>avio_rl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ape</name><operator>-&gt;</operator><name>finalframeblocks</name></name> <operator>=</operator> <call><name>avio_rl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ape</name><operator>-&gt;</operator><name>formatflags</name></name> <operator>&amp;</operator> <name>MAC_FORMAT_FLAG_HAS_PEAK_LEVEL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>ape</name><operator>-&gt;</operator><name>headerlength</name></name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ape</name><operator>-&gt;</operator><name>formatflags</name></name> <operator>&amp;</operator> <name>MAC_FORMAT_FLAG_HAS_SEEK_ELEMENTS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ape</name><operator>-&gt;</operator><name>seektablelength</name></name> <operator>=</operator> <call><name>avio_rl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ape</name><operator>-&gt;</operator><name>headerlength</name></name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ape</name><operator>-&gt;</operator><name>seektablelength</name></name> <operator>*=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ape</name><operator>-&gt;</operator><name>seektablelength</name></name> <operator>=</operator> <name><name>ape</name><operator>-&gt;</operator><name>totalframes</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ape</name><operator>-&gt;</operator><name>formatflags</name></name> <operator>&amp;</operator> <name>MAC_FORMAT_FLAG_8_BIT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ape</name><operator>-&gt;</operator><name>bps</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>ape</name><operator>-&gt;</operator><name>formatflags</name></name> <operator>&amp;</operator> <name>MAC_FORMAT_FLAG_24_BIT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ape</name><operator>-&gt;</operator><name>bps</name></name> <operator>=</operator> <literal type="number">24</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ape</name><operator>-&gt;</operator><name>bps</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ape</name><operator>-&gt;</operator><name>fileversion</name></name> <operator>&gt;=</operator> <literal type="number">3950</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ape</name><operator>-&gt;</operator><name>blocksperframe</name></name> <operator>=</operator> <literal type="number">73728</literal> <operator>*</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>ape</name><operator>-&gt;</operator><name>fileversion</name></name> <operator>&gt;=</operator> <literal type="number">3900</literal> <operator>||</operator> <operator>(</operator><name><name>ape</name><operator>-&gt;</operator><name>fileversion</name></name> <operator>&gt;=</operator> <literal type="number">3800</literal> <operator>&amp;&amp;</operator> <name><name>ape</name><operator>-&gt;</operator><name>compressiontype</name></name> <operator>&gt;=</operator> <literal type="number">4000</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ape</name><operator>-&gt;</operator><name>blocksperframe</name></name> <operator>=</operator> <literal type="number">73728</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ape</name><operator>-&gt;</operator><name>blocksperframe</name></name> <operator>=</operator> <literal type="number">9216</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>ape</name><operator>-&gt;</operator><name>formatflags</name></name> <operator>&amp;</operator> <name>MAC_FORMAT_FLAG_CREATE_WAV_HEADER</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>ape</name><operator>-&gt;</operator><name>wavheaderlength</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>ape</name><operator>-&gt;</operator><name>totalframes</name></name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"No frames in the file!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ape</name><operator>-&gt;</operator><name>totalframes</name></name> <operator>&gt;</operator> <name>UINT_MAX</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>APEFrame</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Too many frames: %"</literal><name>PRIu32</name><literal type="string">"\n"</literal></expr></argument>,

<argument><expr><name><name>ape</name><operator>-&gt;</operator><name>totalframes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ape</name><operator>-&gt;</operator><name>seektablelength</name></name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>ape</name><operator>-&gt;</operator><name>seektable</name></name></expr></argument>)</argument_list></sizeof> <operator>&lt;</operator> <name><name>ape</name><operator>-&gt;</operator><name>totalframes</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Number of seek entries is less than number of frames: %"</literal><name>SIZE_SPECIFIER</name><literal type="string">" vs. %"</literal><name>PRIu32</name><literal type="string">"\n"</literal></expr></argument>,

<argument><expr><name><name>ape</name><operator>-&gt;</operator><name>seektablelength</name></name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>ape</name><operator>-&gt;</operator><name>seektable</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>ape</name><operator>-&gt;</operator><name>totalframes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ape</name><operator>-&gt;</operator><name>frames</name></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name><name>ape</name><operator>-&gt;</operator><name>totalframes</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>APEFrame</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>ape</name><operator>-&gt;</operator><name>frames</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ape</name><operator>-&gt;</operator><name>firstframe</name></name> <operator>=</operator> <name><name>ape</name><operator>-&gt;</operator><name>junklength</name></name> <operator>+</operator> <name><name>ape</name><operator>-&gt;</operator><name>descriptorlength</name></name> <operator>+</operator> <name><name>ape</name><operator>-&gt;</operator><name>headerlength</name></name> <operator>+</operator> <name><name>ape</name><operator>-&gt;</operator><name>seektablelength</name></name> <operator>+</operator> <name><name>ape</name><operator>-&gt;</operator><name>wavheaderlength</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ape</name><operator>-&gt;</operator><name>fileversion</name></name> <operator>&lt;</operator> <literal type="number">3810</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ape</name><operator>-&gt;</operator><name>firstframe</name></name> <operator>+=</operator> <name><name>ape</name><operator>-&gt;</operator><name>totalframes</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ape</name><operator>-&gt;</operator><name>currentframe</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ape</name><operator>-&gt;</operator><name>totalsamples</name></name> <operator>=</operator> <name><name>ape</name><operator>-&gt;</operator><name>finalframeblocks</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ape</name><operator>-&gt;</operator><name>totalframes</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ape</name><operator>-&gt;</operator><name>totalsamples</name></name> <operator>+=</operator> <name><name>ape</name><operator>-&gt;</operator><name>blocksperframe</name></name> <operator>*</operator> <operator>(</operator><name><name>ape</name><operator>-&gt;</operator><name>totalframes</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ape</name><operator>-&gt;</operator><name>seektablelength</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ape</name><operator>-&gt;</operator><name>seektable</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><name><name>ape</name><operator>-&gt;</operator><name>seektablelength</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ape</name><operator>-&gt;</operator><name>seektable</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ape</name><operator>-&gt;</operator><name>seektablelength</name></name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>pb</name><operator>-&gt;</operator><name>eof_reached</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ape</name><operator>-&gt;</operator><name>seektable</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>avio_rl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name><name>ape</name><operator>-&gt;</operator><name>fileversion</name></name> <operator>&lt;</operator> <literal type="number">3810</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ape</name><operator>-&gt;</operator><name>bittable</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><name><name>ape</name><operator>-&gt;</operator><name>totalframes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ape</name><operator>-&gt;</operator><name>bittable</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ape</name><operator>-&gt;</operator><name>totalframes</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>pb</name><operator>-&gt;</operator><name>eof_reached</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ape</name><operator>-&gt;</operator><name>bittable</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>avio_r8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pb</name><operator>-&gt;</operator><name>eof_reached</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"File truncated\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ape</name><operator>-&gt;</operator><name>frames</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pos</name> <operator>=</operator> <name><name>ape</name><operator>-&gt;</operator><name>firstframe</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ape</name><operator>-&gt;</operator><name>frames</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nblocks</name> <operator>=</operator> <name><name>ape</name><operator>-&gt;</operator><name>blocksperframe</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ape</name><operator>-&gt;</operator><name>frames</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>skip</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ape</name><operator>-&gt;</operator><name>totalframes</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>ape</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pos</name> <operator>=</operator> <name><name>ape</name><operator>-&gt;</operator><name>seektable</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>ape</name><operator>-&gt;</operator><name>junklength</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ape</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nblocks</name> <operator>=</operator> <name><name>ape</name><operator>-&gt;</operator><name>blocksperframe</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ape</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>size</name> <operator>=</operator> <name><name>ape</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pos</name> <operator>-</operator> <name><name>ape</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pos</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ape</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>skip</name> <operator>=</operator> <operator>(</operator><name><name>ape</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pos</name> <operator>-</operator> <name><name>ape</name><operator>-&gt;</operator><name>frames</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pos</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>ape</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name><name>ape</name><operator>-&gt;</operator><name>totalframes</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>nblocks</name> <operator>=</operator> <name><name>ape</name><operator>-&gt;</operator><name>finalframeblocks</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>file_size</name> <operator>=</operator> <call><name>avio_size</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>file_size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>final_size</name> <operator>=</operator> <name>file_size</name> <operator>-</operator> <name><name>ape</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name><name>ape</name><operator>-&gt;</operator><name>totalframes</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pos</name> <operator>-</operator>

<name><name>ape</name><operator>-&gt;</operator><name>wavtaillength</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>final_size</name> <operator>-=</operator> <name>final_size</name> <operator>&amp;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>file_size</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>final_size</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>final_size</name> <operator>=</operator> <name><name>ape</name><operator>-&gt;</operator><name>finalframeblocks</name></name> <operator>*</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ape</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name><name>ape</name><operator>-&gt;</operator><name>totalframes</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>size</name> <operator>=</operator> <name>final_size</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ape</name><operator>-&gt;</operator><name>totalframes</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>ape</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>skip</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>ape</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pos</name> <operator>-=</operator> <name><name>ape</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>skip</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ape</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>+=</operator> <name><name>ape</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>skip</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ape</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>=</operator> <operator>(</operator><name><name>ape</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>+</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>ape</name><operator>-&gt;</operator><name>fileversion</name></name> <operator>&lt;</operator> <literal type="number">3810</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ape</name><operator>-&gt;</operator><name>totalframes</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>ape</name><operator>-&gt;</operator><name>totalframes</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>ape</name><operator>-&gt;</operator><name>bittable</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ape</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ape</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>skip</name> <operator>&lt;&lt;=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ape</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>skip</name> <operator>+=</operator> <name><name>ape</name><operator>-&gt;</operator><name>bittable</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ape_dumpinfo</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>ape</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"Decoding file - v%d.%02d, compression level %"</literal><name>PRIu16</name><literal type="string">"\n"</literal></expr></argument>,

<argument><expr><name><name>ape</name><operator>-&gt;</operator><name>fileversion</name></name> <operator>/</operator> <literal type="number">1000</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>ape</name><operator>-&gt;</operator><name>fileversion</name></name> <operator>%</operator> <literal type="number">1000</literal><operator>)</operator> <operator>/</operator> <literal type="number">10</literal></expr></argument>,

<argument><expr><name><name>ape</name><operator>-&gt;</operator><name>compressiontype</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>st</name> <operator>=</operator> <call><name>avformat_new_stream</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>st</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>total_blocks</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>ape</name><operator>-&gt;</operator><name>totalframes</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>(</operator><operator>(</operator><name><name>ape</name><operator>-&gt;</operator><name>totalframes</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>ape</name><operator>-&gt;</operator><name>blocksperframe</name></name><operator>)</operator> <operator>+</operator> <name><name>ape</name><operator>-&gt;</operator><name>finalframeblocks</name></name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>=</operator> <name>AV_CODEC_ID_APE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_tag</name></name> <operator>=</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'A'</literal></expr></argument>, <argument><expr><literal type="char">'P'</literal></expr></argument>, <argument><expr><literal type="char">'E'</literal></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <name><name>ape</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>=</operator> <name><name>ape</name><operator>-&gt;</operator><name>samplerate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>bits_per_coded_sample</name></name> <operator>=</operator> <name><name>ape</name><operator>-&gt;</operator><name>bps</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>nb_frames</name></name> <operator>=</operator> <name><name>ape</name><operator>-&gt;</operator><name>totalframes</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>start_time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>duration</name></name> <operator>=</operator> <name>total_blocks</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avpriv_set_pts_info</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>ape</name><operator>-&gt;</operator><name>samplerate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_alloc_extradata</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name></name></expr></argument>, <argument><expr><name>APE_EXTRADATA_SIZE</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>AV_WL16</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>extradata</name></name> <operator>+</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name><name>ape</name><operator>-&gt;</operator><name>fileversion</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WL16</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>extradata</name></name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name><name>ape</name><operator>-&gt;</operator><name>compressiontype</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WL16</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>extradata</name></name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name><name>ape</name><operator>-&gt;</operator><name>formatflags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pts</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ape</name><operator>-&gt;</operator><name>totalframes</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>ape</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pts</name> <operator>=</operator> <name>pts</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_add_index_entry</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><name><name>ape</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pos</name></expr></argument>, <argument><expr><name><name>ape</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pts</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>AVINDEX_KEYFRAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pts</name> <operator>+=</operator> <name><name>ape</name><operator>-&gt;</operator><name>blocksperframe</name></name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>pb</name><operator>-&gt;</operator><name>seekable</name></name> <operator>&amp;</operator> <name>AVIO_SEEKABLE_NORMAL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ff_ape_parse_tag</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ape_read_packet</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type> <name>pkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nblocks</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>APEContext</name> <modifier>*</modifier></type><name>ape</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>extra_size</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>ret64</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>avio_feof</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_EOF</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ape</name><operator>-&gt;</operator><name>currentframe</name></name> <operator>&gt;=</operator> <name><name>ape</name><operator>-&gt;</operator><name>totalframes</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_EOF</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret64</name> <operator>=</operator> <call><name>avio_seek</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name><name>ape</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name><name>ape</name><operator>-&gt;</operator><name>currentframe</name></name></expr>]</index></name><operator>.</operator><name>pos</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret64</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret64</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ape</name><operator>-&gt;</operator><name>currentframe</name></name> <operator>==</operator> <operator>(</operator><name><name>ape</name><operator>-&gt;</operator><name>totalframes</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>nblocks</name> <operator>=</operator> <name><name>ape</name><operator>-&gt;</operator><name>finalframeblocks</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>nblocks</name> <operator>=</operator> <name><name>ape</name><operator>-&gt;</operator><name>blocksperframe</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ape</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name><name>ape</name><operator>-&gt;</operator><name>currentframe</name></name></expr>]</index></name><operator>.</operator><name>size</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator>

<name><name>ape</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name><name>ape</name><operator>-&gt;</operator><name>currentframe</name></name></expr>]</index></name><operator>.</operator><name>size</name> <operator>&gt;</operator> <name>INT_MAX</name> <operator>-</operator> <name>extra_size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid packet size: %d\n"</literal></expr></argument>,

<argument><expr><name><name>ape</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name><name>ape</name><operator>-&gt;</operator><name>currentframe</name></name></expr>]</index></name><operator>.</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ape</name><operator>-&gt;</operator><name>currentframe</name></name><operator>++</operator></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_new_packet</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><name><name>ape</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name><name>ape</name><operator>-&gt;</operator><name>currentframe</name></name></expr>]</index></name><operator>.</operator><name>size</name> <operator>+</operator> <name>extra_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>AV_WL32</name><argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument> , <argument><expr><name>nblocks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WL32</name><argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name><name>ape</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name><name>ape</name><operator>-&gt;</operator><name>currentframe</name></name></expr>]</index></name><operator>.</operator><name>skip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avio_read</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>extra_size</name></expr></argument>, <argument><expr><name><name>ape</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name><name>ape</name><operator>-&gt;</operator><name>currentframe</name></name></expr>]</index></name><operator>.</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name><name>ape</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name><name>ape</name><operator>-&gt;</operator><name>currentframe</name></name></expr>]</index></name><operator>.</operator><name>pts</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>stream_index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>ret</name> <operator>+</operator> <name>extra_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ape</name><operator>-&gt;</operator><name>currentframe</name></name><operator>++</operator></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ape_read_close</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>APEContext</name> <modifier>*</modifier></type><name>ape</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ape</name><operator>-&gt;</operator><name>frames</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ape</name><operator>-&gt;</operator><name>seektable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ape</name><operator>-&gt;</operator><name>bittable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ape_read_seek</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stream_index</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>timestamp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>stream_index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>APEContext</name> <modifier>*</modifier></type><name>ape</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><call><name>av_index_search_timestamp</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>index</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>avio_seek</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>index_entries</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>pos</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ape</name><operator>-&gt;</operator><name>currentframe</name></name> <operator>=</operator> <name>index</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name>AVInputFormat</name></type> <name>ff_ape_demuxer</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"ape"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Monkey's Audio"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>APEContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>read_probe</name> <operator>=</operator> <name>ape_probe</name></expr>,

<expr><operator>.</operator><name>read_header</name> <operator>=</operator> <name>ape_read_header</name></expr>,

<expr><operator>.</operator><name>read_packet</name> <operator>=</operator> <name>ape_read_packet</name></expr>,

<expr><operator>.</operator><name>read_close</name> <operator>=</operator> <name>ape_read_close</name></expr>,

<expr><operator>.</operator><name>read_seek</name> <operator>=</operator> <name>ape_read_seek</name></expr>,

<expr><operator>.</operator><name>extensions</name> <operator>=</operator> <literal type="string">"ape,apl,mac"</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
