<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavformat\dtsdec.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/crc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/bytestream.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/dca.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/dca_syncwords.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/get_bits.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avformat.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rawdec.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dts_probe</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVProbeData</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>bufp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>state</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>markers</name><index>[<expr><literal type="number">4</literal><operator>*</operator><literal type="number">16</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>exss_markers</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>exss_nextpos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sum</name></decl>, <decl><type ref="prev"/><name>max</name></decl>, <decl><type ref="prev"/><name>pos</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>diff</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>diffcount</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>hdr</name><index>[<expr><name>DCA_CORE_FRAME_HEADER_SIZE</name> <operator>+</operator> <name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>pos</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><literal type="number">4096</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>buf_size</name></name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>pos</name> <operator>&lt;</operator> <name><name>p</name><operator>-&gt;</operator><name>buf_size</name></name> <operator>-</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>pos</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>marker</name></decl>, <decl><type ref="prev"/><name>wide_hdr</name></decl>, <decl><type ref="prev"/><name>hdr_size</name></decl>, <decl><type ref="prev"/><name>framesize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DCACoreFrameHeader</name></type> <name>h</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GetBitContext</name></type> <name>gb</name></decl>;</decl_stmt>

<expr_stmt><expr><name>bufp</name> <operator>=</operator> <name>buf</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name>pos</name></expr>;</expr_stmt>

<expr_stmt><expr><name>state</name> <operator>=</operator> <operator>(</operator><name>state</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <call><name>bytestream_get_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bufp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&gt;=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>AV_RL16</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>AV_RL16</name><argument_list>(<argument><expr><name>buf</name><operator>-</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>diff</name> <operator>+=</operator> <call><name>FFABS</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>int16_t</name><operator>)</operator><call><name>AV_RL16</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>-</operator> <operator>(</operator><name>int16_t</name><operator>)</operator><call><name>AV_RL16</name><argument_list>(<argument><expr><name>buf</name><operator>-</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>diffcount</name> <operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <name>DCA_SYNCWORD_SUBSTREAM</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&lt;</operator> <name>exss_nextpos</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>init_get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>buf</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">96</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>skip_bits_long</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">42</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>wide_hdr</name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hdr_size</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>wide_hdr</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>framesize</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">16</literal> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>wide_hdr</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>hdr_size</name> <operator>&amp;</operator> <literal type="number">3</literal> <operator>||</operator> <name>framesize</name> <operator>&amp;</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>hdr_size</name> <operator>&lt;</operator> <literal type="number">16</literal> <operator>||</operator> <name>framesize</name> <operator>&lt;</operator> <name>hdr_size</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>-</operator> <literal type="number">2</literal> <operator>+</operator> <name>hdr_size</name> <operator>&gt;</operator> <name><name>p</name><operator>-&gt;</operator><name>buf_size</name></name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_crc</name><argument_list>(<argument><expr><call><name>av_crc_get_table</name><argument_list>(<argument><expr><name>AV_CRC_16_CCITT</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0xffff</literal></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>hdr_size</name> <operator>-</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>==</operator> <name>exss_nextpos</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>exss_markers</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>exss_markers</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>exss_markers</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>exss_nextpos</name> <operator>=</operator> <name>pos</name> <operator>+</operator> <name>framesize</name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <name>DCA_SYNCWORD_CORE_BE</name> <operator>&amp;&amp;</operator>

<operator>(</operator><call><name>bytestream_get_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bufp</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0xFC00</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xFC00</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>marker</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>state</name> <operator>==</operator> <name>DCA_SYNCWORD_CORE_LE</name> <operator>&amp;&amp;</operator>

<operator>(</operator><call><name>bytestream_get_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bufp</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0x00FC</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00FC</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>marker</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>state</name> <operator>==</operator> <name>DCA_SYNCWORD_CORE_14B_BE</name> <operator>&amp;&amp;</operator>

<operator>(</operator><call><name>bytestream_get_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bufp</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0xFFF0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x07F0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>marker</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>state</name> <operator>==</operator> <name>DCA_SYNCWORD_CORE_14B_LE</name> <operator>&amp;&amp;</operator>

<operator>(</operator><call><name>bytestream_get_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bufp</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0xF0FF</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xF007</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>marker</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>avpriv_dca_convert_bitstream</name><argument_list>(<argument><expr><name>buf</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>DCA_CORE_FRAME_HEADER_SIZE</name></expr></argument>,

<argument><expr><name>hdr</name></expr></argument>, <argument><expr><name>DCA_CORE_FRAME_HEADER_SIZE</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>avpriv_dca_parse_core_frame_header</name><argument_list>(<argument><expr><operator>&amp;</operator><name>h</name></expr></argument>, <argument><expr><name>hdr</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>marker</name> <operator>+=</operator> <literal type="number">4</literal> <operator>*</operator> <name><name>h</name><operator>.</operator><name>sr_code</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>markers</name><index>[<expr><name>marker</name></expr>]</index></name> <operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>exss_markers</name> <operator>&gt;</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVPROBE_SCORE_EXTENSION</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>sum</name> <operator>=</operator> <name>max</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>markers</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>sum</name> <operator>+=</operator> <name><name>markers</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>markers</name><index>[<expr><name>max</name></expr>]</index></name> <operator>&lt;</operator> <name><name>markers</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>max</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>markers</name><index>[<expr><name>max</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>buf_size</name></name> <operator>/</operator> <name><name>markers</name><index>[<expr><name>max</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">32</literal><operator>*</operator><literal type="number">1024</literal> <operator>&amp;&amp;</operator>

<name><name>markers</name><index>[<expr><name>max</name></expr>]</index></name> <operator>*</operator> <literal type="number">4</literal> <operator>&gt;</operator> <name>sum</name> <operator>*</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator>

<name>diff</name> <operator>/</operator> <name>diffcount</name> <operator>&gt;</operator> <literal type="number">600</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVPROBE_SCORE_EXTENSION</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<macro><name>FF_RAW_DEMUXER_CLASS</name><argument_list>(<argument>dts</argument>)</argument_list></macro>

<decl_stmt><decl><type><name>AVInputFormat</name></type> <name>ff_dts_demuxer</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"dts"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"raw DTS"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>read_probe</name> <operator>=</operator> <name>dts_probe</name></expr>,

<expr><operator>.</operator><name>read_header</name> <operator>=</operator> <name>ff_raw_audio_read_header</name></expr>,

<expr><operator>.</operator><name>read_packet</name> <operator>=</operator> <name>ff_raw_read_partial_packet</name></expr>,

<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>AVFMT_GENERIC_INDEX</name></expr>,

<expr><operator>.</operator><name>extensions</name> <operator>=</operator> <literal type="string">"dts"</literal></expr>,

<expr><operator>.</operator><name>raw_codec_id</name> <operator>=</operator> <name>AV_CODEC_ID_DTS</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>FFRawDemuxerContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>dts_demuxer_class</name></expr>,}</block></expr></init></decl>;</decl_stmt>

</unit>
