<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavformat\hlsplaylist.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/time_internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avformat.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hlsplaylist.h"</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>ff_hls_write_playlist_version</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>out</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>avio_printf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"#EXTM3U\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_printf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"#EXT-X-VERSION:%d\n"</literal></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_hls_write_audio_rendition</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>agroup</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>language</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>name_id</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is_default</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>out</name> <operator>||</operator> <operator>!</operator><name>agroup</name> <operator>||</operator> <operator>!</operator><name>filename</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>avio_printf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"#EXT-X-MEDIA:TYPE=AUDIO,GROUP-ID=\"group_%s\""</literal></expr></argument>, <argument><expr><name>agroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_printf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">",NAME=\"audio_%d\",DEFAULT=%s,"</literal></expr></argument>, <argument><expr><name>name_id</name></expr></argument>, <argument><expr><ternary><condition><expr><name>is_default</name></expr> ?</condition><then> <expr><literal type="string">"YES"</literal></expr> </then><else>: <expr><literal type="string">"NO"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>language</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avio_printf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"LANGUAGE=\"%s\","</literal></expr></argument>, <argument><expr><name>language</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>avio_printf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"URI=\"%s\"\n"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_hls_write_stream_info</name><parameter_list>(<parameter><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name></decl></parameter>, <parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>out</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>bandwidth</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>agroup</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>codecs</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ccgroup</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>out</name> <operator>||</operator> <operator>!</operator><name>filename</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bandwidth</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,

<argument><expr><literal type="string">"Bandwidth info not available, set audio and video bitrates\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>avio_printf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"#EXT-X-STREAM-INF:BANDWIDTH=%d"</literal></expr></argument>, <argument><expr><name>bandwidth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>st</name> <operator>&amp;&amp;</operator> <name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>width</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>height</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>avio_printf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">",RESOLUTION=%dx%d"</literal></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>width</name></name></expr></argument>,

<argument><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>codecs</name> <operator>&amp;&amp;</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>codecs</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>avio_printf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">",CODECS=\"%s\""</literal></expr></argument>, <argument><expr><name>codecs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>agroup</name> <operator>&amp;&amp;</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>agroup</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>avio_printf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">",AUDIO=\"group_%s\""</literal></expr></argument>, <argument><expr><name>agroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ccgroup</name> <operator>&amp;&amp;</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>ccgroup</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>avio_printf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">",CLOSED-CAPTIONS=\"%s\""</literal></expr></argument>, <argument><expr><name>ccgroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>avio_printf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"\n%s\n\n"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_hls_write_playlist_header</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>allowcache</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>target_duration</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>sequence</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>playlist_type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iframe_mode</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>out</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ff_hls_write_playlist_version</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>allowcache</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>allowcache</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avio_printf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"#EXT-X-ALLOW-CACHE:%s\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>allowcache</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="string">"NO"</literal></expr> </then><else>: <expr><literal type="string">"YES"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>avio_printf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"#EXT-X-TARGETDURATION:%d\n"</literal></expr></argument>, <argument><expr><name>target_duration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_printf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"#EXT-X-MEDIA-SEQUENCE:%"</literal><name>PRId64</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>sequence</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"EXT-X-MEDIA-SEQUENCE:%"</literal><name>PRId64</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>sequence</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>playlist_type</name> <operator>==</operator> <name>PLAYLIST_TYPE_EVENT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avio_printf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"#EXT-X-PLAYLIST-TYPE:EVENT\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>playlist_type</name> <operator>==</operator> <name>PLAYLIST_TYPE_VOD</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avio_printf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"#EXT-X-PLAYLIST-TYPE:VOD\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>iframe_mode</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avio_printf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"#EXT-X-I-FRAMES-ONLY\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_hls_write_init_file</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>byterange_mode</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>pos</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>avio_printf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"#EXT-X-MAP:URI=\"%s\""</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>byterange_mode</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avio_printf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">",BYTERANGE=\"%"</literal><name>PRId64</name><literal type="string">"@%"</literal><name>PRId64</name><literal type="string">"\""</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>avio_printf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_hls_write_file_entry</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>insert_discont</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>byterange_mode</name></decl></parameter>,

<parameter><decl><type><name>double</name></type> <name>duration</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>round_duration</name></decl></parameter>,

<parameter><decl><type><name>int64_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>pos</name></decl></parameter>, 

<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>baseurl</name></decl></parameter>, 

<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>prog_date_time</name></decl></parameter>,

<parameter><decl><type><name>int64_t</name></type> <name>video_keyframe_size</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>video_keyframe_pos</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iframe_mode</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>out</name> <operator>||</operator> <operator>!</operator><name>filename</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>insert_discont</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avio_printf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"#EXT-X-DISCONTINUITY\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>round_duration</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>avio_printf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"#EXTINF:%ld,\n"</literal></expr></argument>, <argument><expr><call><name>lrint</name><argument_list>(<argument><expr><name>duration</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>avio_printf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"#EXTINF:%f,\n"</literal></expr></argument>, <argument><expr><name>duration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>byterange_mode</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>avio_printf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"#EXT-X-BYTERANGE:%"</literal><name>PRId64</name><literal type="string">"@%"</literal><name>PRId64</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>iframe_mode</name></expr> ?</condition><then> <expr><name>video_keyframe_size</name></expr> </then><else>: <expr><name>size</name></expr></else></ternary></expr></argument>,

<argument><expr><ternary><condition><expr><name>iframe_mode</name></expr> ?</condition><then> <expr><name>video_keyframe_pos</name></expr> </then><else>: <expr><name>pos</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>prog_date_time</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>time_t</name></type> <name>tt</name></decl>, <decl><type ref="prev"/><name>wrongsecs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>milli</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>tm</name></decl>, <decl><type ref="prev"/><name>tmpbuf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf0</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>buf1</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>tt</name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><operator>*</operator><name>prog_date_time</name></expr>;</expr_stmt>

<expr_stmt><expr><name>milli</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><call><name>lrint</name><argument_list>(<argument><expr><literal type="number">1000</literal><operator>*</operator><operator>(</operator><operator>*</operator><name>prog_date_time</name> <operator>-</operator> <name>tt</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">999</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tm</name> <operator>=</operator> <call><name>localtime_r</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmpbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strftime</name><argument_list>(<argument><expr><name>buf0</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf0</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%Y-%m-%dT%H:%M:%S"</literal></expr></argument>, <argument><expr><name>tm</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"strftime error in ff_hls_write_file_entry\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_UNKNOWN</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strftime</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf1</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%z"</literal></expr></argument>, <argument><expr><name>tm</name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>buf1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&lt;</operator><literal type="char">'0'</literal> <operator>||</operator><name><name>buf1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&gt;</operator><literal type="char">'2'</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>tz_min</name></decl>, <decl><type ref="prev"/><name>dst</name> <init>= <expr><name><name>tm</name><operator>-&gt;</operator><name>tm_isdst</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>tm</name> <operator>=</operator> <call><name>gmtime_r</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmpbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_isdst</name></name> <operator>=</operator> <name>dst</name></expr>;</expr_stmt>

<expr_stmt><expr><name>wrongsecs</name> <operator>=</operator> <call><name>mktime</name><argument_list>(<argument><expr><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tz_min</name> <operator>=</operator> <operator>(</operator><call><name>FFABS</name><argument_list>(<argument><expr><name>wrongsecs</name> <operator>-</operator> <name>tt</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">30</literal><operator>)</operator> <operator>/</operator> <literal type="number">60</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf1</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><literal type="string">"%c%02d%02d"</literal></expr></argument>,

<argument><expr><ternary><condition><expr><name>wrongsecs</name> <operator>&lt;=</operator> <name>tt</name></expr> ?</condition><then> <expr><literal type="char">'+'</literal></expr> </then><else>: <expr><literal type="char">'-'</literal></expr></else></ternary></expr></argument>,

<argument><expr><name>tz_min</name> <operator>/</operator> <literal type="number">60</literal></expr></argument>,

<argument><expr><name>tz_min</name> <operator>%</operator> <literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>avio_printf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"#EXT-X-PROGRAM-DATE-TIME:%s.%03d%s\n"</literal></expr></argument>, <argument><expr><name>buf0</name></expr></argument>, <argument><expr><name>milli</name></expr></argument>, <argument><expr><name>buf1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>prog_date_time</name> <operator>+=</operator> <name>duration</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>baseurl</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>avio_printf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>baseurl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>avio_printf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_hls_write_end_list</name> <parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>out</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>avio_printf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"#EXT-X-ENDLIST\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
