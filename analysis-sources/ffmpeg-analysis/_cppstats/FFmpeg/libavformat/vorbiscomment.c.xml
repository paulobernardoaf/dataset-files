<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavformat\vorbiscomment.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avformat.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"metadata.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vorbiscomment.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/bytestream.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/dict.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVMetadataConv</name></type> <name><name>ff_vorbiscomment_metadata_conv</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"ALBUMARTIST"</literal></expr>, <expr><literal type="string">"album_artist"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"TRACKNUMBER"</literal></expr>, <expr><literal type="string">"track"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"DISCNUMBER"</literal></expr>, <expr><literal type="string">"disc"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"DESCRIPTION"</literal></expr>, <expr><literal type="string">"comment"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><name>int64_t</name></type> <name>ff_vorbiscomment_length</name><parameter_list>(<parameter><decl><type><name>AVDictionary</name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>vendor_string</name></decl></parameter>,

<parameter><decl><type><name>AVChapter</name> <modifier>*</modifier><modifier>*</modifier></type><name>chapters</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>nb_chapters</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>len</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>vendor_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>chapters</name> <operator>&amp;&amp;</operator> <name>nb_chapters</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_chapters</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>AVDictionaryEntry</name> <modifier>*</modifier></type><name>tag</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>len</name> <operator>+=</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">12</literal> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">10</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>tag</name> <operator>=</operator> <call><name>av_dict_get</name><argument_list>(<argument><expr><name><name>chapters</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>metadata</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>AV_DICT_IGNORE_SUFFIX</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>len1</name> <init>= <expr><ternary><condition><expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>tag</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><literal type="string">"title"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> </then><else>: <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>tag</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>len</name> <operator>+=</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">10</literal> <operator>+</operator> <name>len1</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>tag</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>m</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>AVDictionaryEntry</name> <modifier>*</modifier></type><name>tag</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>tag</name> <operator>=</operator> <call><name>av_dict_get</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>AV_DICT_IGNORE_SUFFIX</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>+=</operator> <literal type="number">4</literal> <operator>+</operator><call><name>strlen</name><argument_list>(<argument><expr><name><name>tag</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>tag</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>len</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_vorbiscomment_write</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>AVDictionary</name> <modifier>*</modifier><modifier>*</modifier></type><name>m</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>vendor_string</name></decl></parameter>,

<parameter><decl><type><name>AVChapter</name> <modifier>*</modifier><modifier>*</modifier></type><name>chapters</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>nb_chapters</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>cm_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bytestream_put_le32</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>vendor_string</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream_put_buffer</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>vendor_string</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>vendor_string</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>chapters</name> <operator>&amp;&amp;</operator> <name>nb_chapters</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_chapters</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>cm_count</name> <operator>+=</operator> <call><name>av_dict_count</name><argument_list>(<argument><expr><name><name>chapters</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>metadata</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>m</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><call><name>av_dict_count</name><argument_list>(<argument><expr><operator>*</operator><name>m</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>cm_count</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVDictionaryEntry</name> <modifier>*</modifier></type><name>tag</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bytestream_put_le32</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>tag</name> <operator>=</operator> <call><name>av_dict_get</name><argument_list>(<argument><expr><operator>*</operator><name>m</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>AV_DICT_IGNORE_SUFFIX</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>len1</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>tag</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>len2</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>tag</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len1</name><operator>+</operator><literal type="number">1</literal><operator>+</operator><name>len2</name> <operator>&gt;</operator> <name>UINT32_MAX</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bytestream_put_le32</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>len1</name><operator>+</operator><literal type="number">1</literal><operator>+</operator><name>len2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream_put_buffer</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>tag</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name>len1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream_put_byte</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">'='</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream_put_buffer</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>tag</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name>len2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_chapters</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>AVChapter</name> <modifier>*</modifier></type><name>chp</name> <init>= <expr><name><name>chapters</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>chapter_time</name><index>[<expr><literal type="number">13</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>chapter_number</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>h</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>s</name></decl>, <decl><type ref="prev"/><name>ms</name></decl>;</decl_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>av_rescale</name><argument_list>(<argument><expr><name><name>chp</name><operator>-&gt;</operator><name>start</name></name></expr></argument>, <argument><expr><name><name>chp</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><name><name>chp</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>den</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <name>s</name> <operator>/</operator> <literal type="number">3600</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>m</name> <operator>=</operator> <operator>(</operator><name>s</name> <operator>/</operator> <literal type="number">60</literal><operator>)</operator> <operator>%</operator> <literal type="number">60</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ms</name> <operator>=</operator> <call><name>av_rescale_q</name><argument_list>(<argument><expr><name><name>chp</name><operator>-&gt;</operator><name>start</name></name></expr></argument>, <argument><expr><name><name>chp</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>, <argument><expr><call><name>av_make_q</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>%</operator> <literal type="number">1000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name>s</name> <operator>%</operator> <literal type="number">60</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>chapter_number</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>chapter_number</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%03d"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>chapter_time</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>chapter_time</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%02d:%02d:%02d.%03d"</literal></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>ms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream_put_le32</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">10</literal><operator>+</operator><literal type="number">1</literal><operator>+</operator><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream_put_buffer</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"CHAPTER"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream_put_buffer</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>chapter_number</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream_put_byte</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">'='</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream_put_buffer</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>chapter_time</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tag</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>tag</name> <operator>=</operator> <call><name>av_dict_get</name><argument_list>(<argument><expr><name><name>chapters</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>metadata</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>AV_DICT_IGNORE_SUFFIX</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>len1</name> <init>= <expr><ternary><condition><expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>tag</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><literal type="string">"title"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> </then><else>: <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>tag</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>len2</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>tag</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len1</name><operator>+</operator><literal type="number">1</literal><operator>+</operator><name>len2</name><operator>+</operator><literal type="number">10</literal> <operator>&gt;</operator> <name>UINT32_MAX</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bytestream_put_le32</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">10</literal><operator>+</operator><name>len1</name><operator>+</operator><literal type="number">1</literal><operator>+</operator><name>len2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream_put_buffer</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"CHAPTER"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream_put_buffer</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>chapter_number</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>tag</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><literal type="string">"title"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bytestream_put_buffer</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"NAME"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bytestream_put_buffer</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>tag</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name>len1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>bytestream_put_byte</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">'='</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream_put_buffer</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>tag</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name>len2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></for>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bytestream_put_le32</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
