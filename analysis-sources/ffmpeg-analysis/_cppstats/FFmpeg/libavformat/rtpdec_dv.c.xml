<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavformat\rtpdec_dv.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avstring.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/bytestream.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avio_internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rtpdec_formats.h"</cpp:file></cpp:include>

<struct>struct <name>PayloadContext</name> <block>{

<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>timestamp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bundled_audio</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>dv_close_context</name><parameter_list>(<parameter><decl><type><name>PayloadContext</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ffio_free_dyn_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>dv_sdp_parse_fmtp_config</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,

<parameter><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>,

<parameter><decl><type><name>PayloadContext</name> <modifier>*</modifier></type><name>dv_data</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>attr</name></expr></argument>, <argument><expr><literal type="string">"audio"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"bundled"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dv_data</name><operator>-&gt;</operator><name>bundled_audio</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>attr</name></expr></argument>, <argument><expr><literal type="string">"encode"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>dv_parse_sdp_line</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>st_index</name></decl></parameter>,

<parameter><decl><type><name>PayloadContext</name> <modifier>*</modifier></type><name>dv_data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>current_stream</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sdp_line_ptr</name> <init>= <expr><name>line</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>st_index</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>current_stream</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>st_index</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_strstart</name><argument_list>(<argument><expr><name>sdp_line_ptr</name></expr></argument>, <argument><expr><literal type="string">"fmtp:"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>sdp_line_ptr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>ff_parse_fmtp</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>current_stream</name></expr></argument>, <argument><expr><name>dv_data</name></expr></argument>, <argument><expr><name>sdp_line_ptr</name></expr></argument>,

<argument><expr><name>dv_sdp_parse_fmtp_config</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dv_handle_packet</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>PayloadContext</name> <modifier>*</modifier></type><name>rtp_dv_ctx</name></decl></parameter>,

<parameter><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>timestamp</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>seq</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rtp_dv_ctx</name><operator>-&gt;</operator><name>buf</name></name> <operator>&amp;&amp;</operator> <name><name>rtp_dv_ctx</name><operator>-&gt;</operator><name>timestamp</name></name> <operator>!=</operator> <operator>*</operator><name>timestamp</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ffio_free_dyn_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rtp_dv_ctx</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Too short RTP/DV packet, got %d bytes\n"</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>rtp_dv_ctx</name><operator>-&gt;</operator><name>buf</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>avio_open_dyn_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rtp_dv_ctx</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>rtp_dv_ctx</name><operator>-&gt;</operator><name>timestamp</name></name> <operator>=</operator> <operator>*</operator><name>timestamp</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name><name>rtp_dv_ctx</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>RTP_FLAG_MARKER</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>ff_rtp_finalize_packet</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rtp_dv_ctx</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>RTPDynamicProtocolHandler</name></type> <name>ff_dv_dynamic_handler</name> <init>= <expr><block>{

<expr><operator>.</operator><name>enc_name</name> <operator>=</operator> <literal type="string">"DV"</literal></expr>,

<expr><operator>.</operator><name>codec_type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>codec_id</name> <operator>=</operator> <name>AV_CODEC_ID_DVVIDEO</name></expr>,

<expr><operator>.</operator><name>need_parsing</name> <operator>=</operator> <name>AVSTREAM_PARSE_FULL</name></expr>,

<expr><operator>.</operator><name>parse_sdp_a_line</name> <operator>=</operator> <name>dv_parse_sdp_line</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>PayloadContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>dv_close_context</name></expr>,

<expr><operator>.</operator><name>parse_packet</name> <operator>=</operator> <name>dv_handle_packet</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
