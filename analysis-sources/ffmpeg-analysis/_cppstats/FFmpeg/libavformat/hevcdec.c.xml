<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavformat\hevcdec.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/hevc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avformat.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rawdec.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>int</name></type> <name>hevc_probe</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVProbeData</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>code</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>vps</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>sps</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>pps</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>irap</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p</name><operator>-&gt;</operator><name>buf_size</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>code</name> <operator>=</operator> <operator>(</operator><name>code</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>code</name> <operator>&amp;</operator> <literal type="number">0xffffff00</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x100</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>nal2</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>type</name> <init>= <expr><operator>(</operator><name>code</name> <operator>&amp;</operator> <literal type="number">0x7E</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>code</name> <operator>&amp;</operator> <literal type="number">0x81</literal></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>nal2</name> <operator>&amp;</operator> <literal type="number">0xf8</literal></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>HEVC_NAL_VPS</name></expr>:</case> <expr_stmt><expr><name>vps</name><operator>++</operator></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>HEVC_NAL_SPS</name></expr>:</case> <expr_stmt><expr><name>sps</name><operator>++</operator></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>HEVC_NAL_PPS</name></expr>:</case> <expr_stmt><expr><name>pps</name><operator>++</operator></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>HEVC_NAL_BLA_N_LP</name></expr>:</case>

<case>case <expr><name>HEVC_NAL_BLA_W_LP</name></expr>:</case>

<case>case <expr><name>HEVC_NAL_BLA_W_RADL</name></expr>:</case>

<case>case <expr><name>HEVC_NAL_CRA_NUT</name></expr>:</case>

<case>case <expr><name>HEVC_NAL_IDR_N_LP</name></expr>:</case>

<case>case <expr><name>HEVC_NAL_IDR_W_RADL</name></expr>:</case> <expr_stmt><expr><name>irap</name><operator>++</operator></expr>;</expr_stmt> <break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>vps</name> <operator>&amp;&amp;</operator> <name>sps</name> <operator>&amp;&amp;</operator> <name>pps</name> <operator>&amp;&amp;</operator> <name>irap</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVPROBE_SCORE_EXTENSION</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt> 

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<macro><name>FF_DEF_RAWVIDEO_DEMUXER</name><argument_list>(<argument>hevc</argument>, <argument><literal type="string">"raw HEVC video"</literal></argument>, <argument>hevc_probe</argument>, <argument><literal type="string">"hevc,h265,265"</literal></argument>, <argument>AV_CODEC_ID_HEVC</argument>)</argument_list></macro>

</unit>
