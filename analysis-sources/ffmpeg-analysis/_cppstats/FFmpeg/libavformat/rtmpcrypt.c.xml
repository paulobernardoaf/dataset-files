<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavformat\rtmpcrypt.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/blowfish.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/rc4.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/xtea.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rtmp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rtmpdh.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rtmpcrypt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"url.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>RTMPEContext</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>stream</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>FF_DH</name> <modifier>*</modifier></type><name>dh</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>AVRC4</name></name></type> <name>key_in</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>AVRC4</name></name></type> <name>key_out</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>handshaked</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>tunneling</name></decl>;</decl_stmt> 

}</block></struct></type> <name>RTMPEContext</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>rtmpe8_keys</name><index>[<expr><literal type="number">16</literal></expr>]</index><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="number">0xb2</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0xf0</literal></expr>, <expr><literal type="number">0xbf</literal></expr>, <expr><literal type="number">0x1f</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0xd9</literal></expr>, <expr><literal type="number">0x11</literal></expr>,

<expr><literal type="number">0x95</literal></expr>, <expr><literal type="number">0xb7</literal></expr>, <expr><literal type="number">0xdf</literal></expr>, <expr><literal type="number">0xcc</literal></expr>, <expr><literal type="number">0x32</literal></expr>, <expr><literal type="number">0xe7</literal></expr>, <expr><literal type="number">0x8d</literal></expr>, <expr><literal type="number">0x74</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0xb6</literal></expr>, <expr><literal type="number">0x5e</literal></expr>, <expr><literal type="number">0x6a</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x0e</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x43</literal></expr>, <expr><literal type="number">0x17</literal></expr>,

<expr><literal type="number">0xb8</literal></expr>, <expr><literal type="number">0x5a</literal></expr>, <expr><literal type="number">0xf0</literal></expr>, <expr><literal type="number">0x6e</literal></expr>, <expr><literal type="number">0xe2</literal></expr>, <expr><literal type="number">0x39</literal></expr>, <expr><literal type="number">0x5a</literal></expr>, <expr><literal type="number">0xfe</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x6f</literal></expr>, <expr><literal type="number">0x95</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x7b</literal></expr>, <expr><literal type="number">0x21</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0xce</literal></expr>, <expr><literal type="number">0x76</literal></expr>,

<expr><literal type="number">0x3a</literal></expr>, <expr><literal type="number">0xa7</literal></expr>, <expr><literal type="number">0x88</literal></expr>, <expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0xa1</literal></expr>, <expr><literal type="number">0x49</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x44</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0xf3</literal></expr>, <expr><literal type="number">0x43</literal></expr>, <expr><literal type="number">0xa9</literal></expr>, <expr><literal type="number">0xb2</literal></expr>, <expr><literal type="number">0x1b</literal></expr>, <expr><literal type="number">0xf1</literal></expr>, <expr><literal type="number">0xeb</literal></expr>,

<expr><literal type="number">0xee</literal></expr>, <expr><literal type="number">0xa5</literal></expr>, <expr><literal type="number">0x91</literal></expr>, <expr><literal type="number">0xa6</literal></expr>, <expr><literal type="number">0x39</literal></expr>, <expr><literal type="number">0x63</literal></expr>, <expr><literal type="number">0xf3</literal></expr>, <expr><literal type="number">0x17</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x0a</literal></expr>, <expr><literal type="number">0xe0</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x7a</literal></expr>, <expr><literal type="number">0x2c</literal></expr>, <expr><literal type="number">0xe2</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0xb5</literal></expr>,

<expr><literal type="number">0xa5</literal></expr>, <expr><literal type="number">0xae</literal></expr>, <expr><literal type="number">0x87</literal></expr>, <expr><literal type="number">0xa0</literal></expr>, <expr><literal type="number">0xac</literal></expr>, <expr><literal type="number">0x79</literal></expr>, <expr><literal type="number">0xcb</literal></expr>, <expr><literal type="number">0xc0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0x0c</literal></expr>, <expr><literal type="number">0xce</literal></expr>, <expr><literal type="number">0xbd</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xde</literal></expr>, <expr><literal type="number">0xeb</literal></expr>, <expr><literal type="number">0x2f</literal></expr>,

<expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0xae</literal></expr>, <expr><literal type="number">0xfa</literal></expr>, <expr><literal type="number">0x1c</literal></expr>, <expr><literal type="number">0x9d</literal></expr>, <expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0x11</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x7b</literal></expr>, <expr><literal type="number">0x3f</literal></expr>, <expr><literal type="number">0xdd</literal></expr>, <expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0x2e</literal></expr>, <expr><literal type="number">0xe6</literal></expr>, <expr><literal type="number">0xe7</literal></expr>, <expr><literal type="number">0x77</literal></expr>,

<expr><literal type="number">0x99</literal></expr>, <expr><literal type="number">0xc4</literal></expr>, <expr><literal type="number">0xb8</literal></expr>, <expr><literal type="number">0x9b</literal></expr>, <expr><literal type="number">0xe4</literal></expr>, <expr><literal type="number">0x1e</literal></expr>, <expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0xc9</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0xb4</literal></expr>, <expr><literal type="number">0xb6</literal></expr>, <expr><literal type="number">0x7b</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x36</literal></expr>, <expr><literal type="number">0x91</literal></expr>, <expr><literal type="number">0xe8</literal></expr>, <expr><literal type="number">0x71</literal></expr>,

<expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0xbf</literal></expr>, <expr><literal type="number">0xae</literal></expr>, <expr><literal type="number">0xa7</literal></expr>, <expr><literal type="number">0x39</literal></expr>, <expr><literal type="number">0xb8</literal></expr>, <expr><literal type="number">0x33</literal></expr>, <expr><literal type="number">0xca</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0xc3</literal></expr>, <expr><literal type="number">0xbd</literal></expr>, <expr><literal type="number">0xf6</literal></expr>, <expr><literal type="number">0xfc</literal></expr>, <expr><literal type="number">0x97</literal></expr>, <expr><literal type="number">0x36</literal></expr>, <expr><literal type="number">0x3c</literal></expr>, <expr><literal type="number">0xb6</literal></expr>,

<expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0xf8</literal></expr>, <expr><literal type="number">0xe4</literal></expr>, <expr><literal type="number">0x7c</literal></expr>, <expr><literal type="number">0xb2</literal></expr>, <expr><literal type="number">0x59</literal></expr>, <expr><literal type="number">0xd9</literal></expr>, <expr><literal type="number">0x04</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0xfd</literal></expr>, <expr><literal type="number">0x91</literal></expr>, <expr><literal type="number">0xe0</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0x4c</literal></expr>, <expr><literal type="number">0x4c</literal></expr>, <expr><literal type="number">0x95</literal></expr>, <expr><literal type="number">0x41</literal></expr>,

<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xdb</literal></expr>, <expr><literal type="number">0xb7</literal></expr>, <expr><literal type="number">0x7f</literal></expr>, <expr><literal type="number">0xf8</literal></expr>, <expr><literal type="number">0x66</literal></expr>, <expr><literal type="number">0xa0</literal></expr>, <expr><literal type="number">0xe3</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0x5b</literal></expr>, <expr><literal type="number">0x84</literal></expr>, <expr><literal type="number">0x57</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x1b</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x4f</literal></expr>,

<expr><literal type="number">0xcd</literal></expr>, <expr><literal type="number">0x5b</literal></expr>, <expr><literal type="number">0xd4</literal></expr>, <expr><literal type="number">0x46</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0x0d</literal></expr>, <expr><literal type="number">0xc3</literal></expr>, <expr><literal type="number">0xa2</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0xf8</literal></expr>, <expr><literal type="number">0xee</literal></expr>, <expr><literal type="number">0xcc</literal></expr>, <expr><literal type="number">0x0a</literal></expr>, <expr><literal type="number">0x46</literal></expr>, <expr><literal type="number">0xb5</literal></expr>, <expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0xda</literal></expr>,

<expr><literal type="number">0x52</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0x47</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x3b</literal></expr>, <expr><literal type="number">0x71</literal></expr>, <expr><literal type="number">0x63</literal></expr>, <expr><literal type="number">0x58</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0xdc</literal></expr>, <expr><literal type="number">0x75</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0xb8</literal></expr>, <expr><literal type="number">0xee</literal></expr>, <expr><literal type="number">0x1f</literal></expr>, <expr><literal type="number">0x5f</literal></expr>, <expr><literal type="number">0xa7</literal></expr>,

<expr><literal type="number">0xe8</literal></expr>, <expr><literal type="number">0x68</literal></expr>, <expr><literal type="number">0x42</literal></expr>, <expr><literal type="number">0xd8</literal></expr>, <expr><literal type="number">0xcc</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0x2a</literal></expr>, <expr><literal type="number">0xa7</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x9e</literal></expr>, <expr><literal type="number">0x6e</literal></expr>, <expr><literal type="number">0xcf</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x7b</literal></expr>, <expr><literal type="number">0x6d</literal></expr>, <expr><literal type="number">0xa1</literal></expr>,

<expr><literal type="number">0x6c</literal></expr>, <expr><literal type="number">0xae</literal></expr>, <expr><literal type="number">0xa7</literal></expr>, <expr><literal type="number">0x9f</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0x56</literal></expr>, <expr><literal type="number">0x2f</literal></expr>, <expr><literal type="number">0xd9</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0xe4</literal></expr>, <expr><literal type="number">0xea</literal></expr>, <expr><literal type="number">0xb1</literal></expr>, <expr><literal type="number">0xfe</literal></expr>, <expr><literal type="number">0xe1</literal></expr>, <expr><literal type="number">0x3c</literal></expr>, <expr><literal type="number">0x8c</literal></expr>, <expr><literal type="number">0x8c</literal></expr>,

<expr><literal type="number">0xa7</literal></expr>, <expr><literal type="number">0x64</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x4e</literal></expr>, <expr><literal type="number">0x2a</literal></expr>, <expr><literal type="number">0x7c</literal></expr>, <expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0x6a</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0x94</literal></expr>, <expr><literal type="number">0x3a</literal></expr>, <expr><literal type="number">0x89</literal></expr>, <expr><literal type="number">0xa2</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0xcc</literal></expr>,

<expr><literal type="number">0x5b</literal></expr>, <expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0xf1</literal></expr>, <expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0xf9</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0xa8</literal></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>rtmpe9_keys</name><index>[<expr><literal type="number">16</literal></expr>]</index><index>[<expr><literal type="number">24</literal></expr>]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="number">0x79</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0x77</literal></expr>, <expr><literal type="number">0x4c</literal></expr>, <expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0xd1</literal></expr>, <expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0x3a</literal></expr>, <expr><literal type="number">0xdf</literal></expr>, <expr><literal type="number">0xb3</literal></expr>, <expr><literal type="number">0x56</literal></expr>, <expr><literal type="number">0xbe</literal></expr>,

<expr><literal type="number">0x8b</literal></expr>, <expr><literal type="number">0x7b</literal></expr>, <expr><literal type="number">0xd0</literal></expr>, <expr><literal type="number">0x24</literal></expr>, <expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0xe0</literal></expr>, <expr><literal type="number">0x73</literal></expr>, <expr><literal type="number">0x58</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x5d</literal></expr>, <expr><literal type="number">0x69</literal></expr>, <expr><literal type="number">0x67</literal></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="number">0x46</literal></expr>, <expr><literal type="number">0xf6</literal></expr>, <expr><literal type="number">0xb4</literal></expr>, <expr><literal type="number">0xcc</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x93</literal></expr>, <expr><literal type="number">0xe3</literal></expr>, <expr><literal type="number">0xa1</literal></expr>, <expr><literal type="number">0x9e</literal></expr>, <expr><literal type="number">0x7d</literal></expr>, <expr><literal type="number">0x3c</literal></expr>, <expr><literal type="number">0x65</literal></expr>,

<expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0xfd</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x8f</literal></expr>, <expr><literal type="number">0xf7</literal></expr>, <expr><literal type="number">0xb3</literal></expr>, <expr><literal type="number">0xc4</literal></expr>, <expr><literal type="number">0x6f</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0xca</literal></expr>, <expr><literal type="number">0x5c</literal></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="number">0x1a</literal></expr>, <expr><literal type="number">0xe7</literal></expr>, <expr><literal type="number">0xe2</literal></expr>, <expr><literal type="number">0xf3</literal></expr>, <expr><literal type="number">0xf9</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x79</literal></expr>, <expr><literal type="number">0x94</literal></expr>, <expr><literal type="number">0xc0</literal></expr>, <expr><literal type="number">0xd3</literal></expr>, <expr><literal type="number">0x97</literal></expr>, <expr><literal type="number">0x43</literal></expr>,

<expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x7b</literal></expr>, <expr><literal type="number">0xb3</literal></expr>, <expr><literal type="number">0x84</literal></expr>, <expr><literal type="number">0x43</literal></expr>, <expr><literal type="number">0x2f</literal></expr>, <expr><literal type="number">0x9d</literal></expr>, <expr><literal type="number">0x84</literal></expr>, <expr><literal type="number">0x3f</literal></expr>, <expr><literal type="number">0x21</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x9b</literal></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="number">0xd3</literal></expr>, <expr><literal type="number">0xe3</literal></expr>, <expr><literal type="number">0x54</literal></expr>, <expr><literal type="number">0xb0</literal></expr>, <expr><literal type="number">0xf7</literal></expr>, <expr><literal type="number">0x1d</literal></expr>, <expr><literal type="number">0xf6</literal></expr>, <expr><literal type="number">0x2b</literal></expr>, <expr><literal type="number">0x5a</literal></expr>, <expr><literal type="number">0x43</literal></expr>, <expr><literal type="number">0x4d</literal></expr>, <expr><literal type="number">0x04</literal></expr>,

<expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">0x64</literal></expr>, <expr><literal type="number">0x3e</literal></expr>, <expr><literal type="number">0x0d</literal></expr>, <expr><literal type="number">0x59</literal></expr>, <expr><literal type="number">0x2f</literal></expr>, <expr><literal type="number">0x61</literal></expr>, <expr><literal type="number">0xcb</literal></expr>, <expr><literal type="number">0xb1</literal></expr>, <expr><literal type="number">0x6a</literal></expr>, <expr><literal type="number">0x59</literal></expr>, <expr><literal type="number">0x0d</literal></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="number">0xc8</literal></expr>, <expr><literal type="number">0xc1</literal></expr>, <expr><literal type="number">0xe9</literal></expr>, <expr><literal type="number">0xb8</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x56</literal></expr>, <expr><literal type="number">0x99</literal></expr>, <expr><literal type="number">0x21</literal></expr>, <expr><literal type="number">0x7b</literal></expr>, <expr><literal type="number">0x5b</literal></expr>, <expr><literal type="number">0x36</literal></expr>, <expr><literal type="number">0xb7</literal></expr>,

<expr><literal type="number">0xb5</literal></expr>, <expr><literal type="number">0x9b</literal></expr>, <expr><literal type="number">0xdf</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x49</literal></expr>, <expr><literal type="number">0x2c</literal></expr>, <expr><literal type="number">0x97</literal></expr>, <expr><literal type="number">0xf5</literal></expr>, <expr><literal type="number">0x95</literal></expr>, <expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0x85</literal></expr>, <expr><literal type="number">0x7e</literal></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="number">0xeb</literal></expr>, <expr><literal type="number">0xe5</literal></expr>, <expr><literal type="number">0xe6</literal></expr>, <expr><literal type="number">0x2e</literal></expr>, <expr><literal type="number">0xa4</literal></expr>, <expr><literal type="number">0xba</literal></expr>, <expr><literal type="number">0xd4</literal></expr>, <expr><literal type="number">0x2c</literal></expr>, <expr><literal type="number">0xf2</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0xe0</literal></expr>, <expr><literal type="number">0x8f</literal></expr>,

<expr><literal type="number">0x66</literal></expr>, <expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0xa9</literal></expr>, <expr><literal type="number">0x43</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0xce</literal></expr>, <expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x84</literal></expr>, <expr><literal type="number">0x95</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x53</literal></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="number">0x66</literal></expr>, <expr><literal type="number">0xdb</literal></expr>, <expr><literal type="number">0x90</literal></expr>, <expr><literal type="number">0xf0</literal></expr>, <expr><literal type="number">0x3b</literal></expr>, <expr><literal type="number">0x4f</literal></expr>, <expr><literal type="number">0xf5</literal></expr>, <expr><literal type="number">0x6f</literal></expr>, <expr><literal type="number">0xe4</literal></expr>, <expr><literal type="number">0x9c</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x89</literal></expr>,

<expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0x5e</literal></expr>, <expr><literal type="number">0xd2</literal></expr>, <expr><literal type="number">0xb2</literal></expr>, <expr><literal type="number">0xc3</literal></expr>, <expr><literal type="number">0x9e</literal></expr>, <expr><literal type="number">0x9f</literal></expr>, <expr><literal type="number">0x7f</literal></expr>, <expr><literal type="number">0x63</literal></expr>, <expr><literal type="number">0xb2</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0x81</literal></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="number">0xbb</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0xac</literal></expr>, <expr><literal type="number">0xed</literal></expr>, <expr><literal type="number">0x2a</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x6a</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0x94</literal></expr>, <expr><literal type="number">0x98</literal></expr>, <expr><literal type="number">0x9b</literal></expr>, <expr><literal type="number">0xc8</literal></expr>,

<expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xcd</literal></expr>, <expr><literal type="number">0x93</literal></expr>, <expr><literal type="number">0xef</literal></expr>, <expr><literal type="number">0xc6</literal></expr>, <expr><literal type="number">0x0d</literal></expr>, <expr><literal type="number">0x56</literal></expr>, <expr><literal type="number">0xa7</literal></expr>, <expr><literal type="number">0xeb</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0xd9</literal></expr>, <expr><literal type="number">0x30</literal></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="number">0xbc</literal></expr>, <expr><literal type="number">0xf2</literal></expr>, <expr><literal type="number">0x43</literal></expr>, <expr><literal type="number">0x82</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x8a</literal></expr>, <expr><literal type="number">0x87</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x43</literal></expr>, <expr><literal type="number">0x6d</literal></expr>, <expr><literal type="number">0xe6</literal></expr>,

<expr><literal type="number">0xbb</literal></expr>, <expr><literal type="number">0xa4</literal></expr>, <expr><literal type="number">0xb9</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0x58</literal></expr>, <expr><literal type="number">0x3f</literal></expr>, <expr><literal type="number">0x21</literal></expr>, <expr><literal type="number">0x7c</literal></expr>, <expr><literal type="number">0x99</literal></expr>, <expr><literal type="number">0xbb</literal></expr>, <expr><literal type="number">0x3f</literal></expr>, <expr><literal type="number">0x24</literal></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="number">0xec</literal></expr>, <expr><literal type="number">0x1a</literal></expr>, <expr><literal type="number">0xaa</literal></expr>, <expr><literal type="number">0xcd</literal></expr>, <expr><literal type="number">0xce</literal></expr>, <expr><literal type="number">0xbd</literal></expr>, <expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0xd2</literal></expr>, <expr><literal type="number">0xfb</literal></expr>, <expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">0xb6</literal></expr>,

<expr><literal type="number">0xc3</literal></expr>, <expr><literal type="number">0xba</literal></expr>, <expr><literal type="number">0xab</literal></expr>, <expr><literal type="number">0x4f</literal></expr>, <expr><literal type="number">0x62</literal></expr>, <expr><literal type="number">0x79</literal></expr>, <expr><literal type="number">0xe8</literal></expr>, <expr><literal type="number">0x65</literal></expr>, <expr><literal type="number">0xa9</literal></expr>, <expr><literal type="number">0x92</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0x76</literal></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="number">0xc6</literal></expr>, <expr><literal type="number">0x0c</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x91</literal></expr>, <expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0x2d</literal></expr>, <expr><literal type="number">0x7b</literal></expr>, <expr><literal type="number">0x79</literal></expr>, <expr><literal type="number">0xda</literal></expr>, <expr><literal type="number">0xe1</literal></expr>, <expr><literal type="number">0xd5</literal></expr>,

<expr><literal type="number">0x64</literal></expr>, <expr><literal type="number">0x77</literal></expr>, <expr><literal type="number">0x9a</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0xc5</literal></expr>, <expr><literal type="number">0xb1</literal></expr>, <expr><literal type="number">0xd7</literal></expr>, <expr><literal type="number">0x91</literal></expr>, <expr><literal type="number">0x4f</literal></expr>, <expr><literal type="number">0x96</literal></expr>, <expr><literal type="number">0x4c</literal></expr>, <expr><literal type="number">0xa3</literal></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="number">0xd7</literal></expr>, <expr><literal type="number">0x7c</literal></expr>, <expr><literal type="number">0x2a</literal></expr>, <expr><literal type="number">0xbf</literal></expr>, <expr><literal type="number">0xa6</literal></expr>, <expr><literal type="number">0xe7</literal></expr>, <expr><literal type="number">0x85</literal></expr>, <expr><literal type="number">0x7c</literal></expr>, <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0xad</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0x12</literal></expr>,

<expr><literal type="number">0x94</literal></expr>, <expr><literal type="number">0xd8</literal></expr>, <expr><literal type="number">0xde</literal></expr>, <expr><literal type="number">0xa4</literal></expr>, <expr><literal type="number">0x5c</literal></expr>, <expr><literal type="number">0x3d</literal></expr>, <expr><literal type="number">0x79</literal></expr>, <expr><literal type="number">0xa4</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x5d</literal></expr>, <expr><literal type="number">0x22</literal></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0x0d</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0x6a</literal></expr>, <expr><literal type="number">0x4c</literal></expr>, <expr><literal type="number">0xc7</literal></expr>, <expr><literal type="number">0xf8</literal></expr>, <expr><literal type="number">0xb8</literal></expr>, <expr><literal type="number">0xf9</literal></expr>, <expr><literal type="number">0x4e</literal></expr>, <expr><literal type="number">0xcd</literal></expr>,

<expr><literal type="number">0x2c</literal></expr>, <expr><literal type="number">0x9e</literal></expr>, <expr><literal type="number">0x90</literal></expr>, <expr><literal type="number">0x84</literal></expr>, <expr><literal type="number">0xb2</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x60</literal></expr>, <expr><literal type="number">0xe1</literal></expr>, <expr><literal type="number">0x1e</literal></expr>, <expr><literal type="number">0xae</literal></expr>, <expr><literal type="number">0x18</literal></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="number">0xe9</literal></expr>, <expr><literal type="number">0x7c</literal></expr>, <expr><literal type="number">0x58</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x1b</literal></expr>, <expr><literal type="number">0x51</literal></expr>, <expr><literal type="number">0x9e</literal></expr>, <expr><literal type="number">0x49</literal></expr>, <expr><literal type="number">0x82</literal></expr>, <expr><literal type="number">0x60</literal></expr>, <expr><literal type="number">0x61</literal></expr>, <expr><literal type="number">0xfc</literal></expr>,

<expr><literal type="number">0xa0</literal></expr>, <expr><literal type="number">0xa0</literal></expr>, <expr><literal type="number">0x1b</literal></expr>, <expr><literal type="number">0xcd</literal></expr>, <expr><literal type="number">0xf5</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0xd6</literal></expr>, <expr><literal type="number">0xa6</literal></expr>, <expr><literal type="number">0x6d</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x88</literal></expr>, <expr><literal type="number">0xa3</literal></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="number">0x2b</literal></expr>, <expr><literal type="number">0x97</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x8b</literal></expr>, <expr><literal type="number">0xd9</literal></expr>, <expr><literal type="number">0x4e</literal></expr>, <expr><literal type="number">0xd9</literal></expr>, <expr><literal type="number">0xdf</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0xe3</literal></expr>, <expr><literal type="number">0x9c</literal></expr>, <expr><literal type="number">0x10</literal></expr>,

<expr><literal type="number">0xe6</literal></expr>, <expr><literal type="number">0xa1</literal></expr>, <expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0x21</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0xf9</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x0d</literal></expr>, <expr><literal type="number">0x0b</literal></expr>, <expr><literal type="number">0x24</literal></expr>, <expr><literal type="number">0x65</literal></expr>, <expr><literal type="number">0xb2</literal></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0x6a</literal></expr>, <expr><literal type="number">0x4c</literal></expr>, <expr><literal type="number">0x54</literal></expr>, <expr><literal type="number">0xac</literal></expr>, <expr><literal type="number">0x8b</literal></expr>, <expr><literal type="number">0x9b</literal></expr>, <expr><literal type="number">0xb8</literal></expr>, <expr><literal type="number">0x97</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0xfc</literal></expr>, <expr><literal type="number">0x60</literal></expr>,

<expr><literal type="number">0x2c</literal></expr>, <expr><literal type="number">0x5b</literal></expr>, <expr><literal type="number">0x3a</literal></expr>, <expr><literal type="number">0x85</literal></expr>, <expr><literal type="number">0x68</literal></expr>, <expr><literal type="number">0xb5</literal></expr>, <expr><literal type="number">0xaa</literal></expr>, <expr><literal type="number">0x6a</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0xcd</literal></expr>, <expr><literal type="number">0x3f</literal></expr>, <expr><literal type="number">0xa7</literal></expr>, }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>ff_rtmpe_gen_pub_key</name><parameter_list>(<parameter><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>RTMPEContext</name> <modifier>*</modifier></type><name>rt</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>offset</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>rt</name><operator>-&gt;</operator><name>dh</name></name> <operator>=</operator> <call><name>ff_dh_init</name><argument_list>(<argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>ff_rtmp_calc_digest_pos</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">768</literal></expr></argument>, <argument><expr><literal type="number">632</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>offset</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_dh_generate_public_key</name><argument_list>(<argument><expr><name><name>rt</name><operator>-&gt;</operator><name>dh</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_dh_write_public_key</name><argument_list>(<argument><expr><name><name>rt</name><operator>-&gt;</operator><name>dh</name></name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_rtmpe_compute_secret_key</name><parameter_list>(<parameter><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>serverdata</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>clientdata</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>RTMPEContext</name> <modifier>*</modifier></type><name>rt</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>secret_key</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>digest</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>server_pos</name></decl>, <decl><type ref="prev"/><name>client_pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>server_pos</name> <operator>=</operator> <call><name>ff_rtmp_calc_digest_pos</name><argument_list>(<argument><expr><name>serverdata</name></expr></argument>, <argument><expr><literal type="number">1532</literal></expr></argument>, <argument><expr><literal type="number">632</literal></expr></argument>, <argument><expr><literal type="number">772</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>server_pos</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>server_pos</name> <operator>=</operator> <call><name>ff_rtmp_calc_digest_pos</name><argument_list>(<argument><expr><name>serverdata</name></expr></argument>, <argument><expr><literal type="number">768</literal></expr></argument>, <argument><expr><literal type="number">632</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>server_pos</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>client_pos</name> <operator>=</operator> <call><name>ff_rtmp_calc_digest_pos</name><argument_list>(<argument><expr><name>clientdata</name></expr></argument>, <argument><expr><literal type="number">768</literal></expr></argument>, <argument><expr><literal type="number">632</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>client_pos</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_dh_compute_shared_secret_key</name><argument_list>(<argument><expr><name><name>rt</name><operator>-&gt;</operator><name>dh</name></name></expr></argument>, <argument><expr><name>serverdata</name> <operator>+</operator> <name>server_pos</name></expr></argument>,

<argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><name>secret_key</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>secret_key</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_rtmp_calc_digest</name><argument_list>(<argument><expr><name>serverdata</name> <operator>+</operator> <name>server_pos</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>secret_key</name></expr></argument>,

<argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><name>digest</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_rc4_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rt</name><operator>-&gt;</operator><name>key_out</name></name></expr></argument>, <argument><expr><name>digest</name></expr></argument>, <argument><expr><literal type="number">16</literal> <operator>*</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_rtmp_calc_digest</name><argument_list>(<argument><expr><name>clientdata</name> <operator>+</operator> <name>client_pos</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>secret_key</name></expr></argument>,

<argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><name>digest</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_rc4_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rt</name><operator>-&gt;</operator><name>key_in</name></name></expr></argument>, <argument><expr><name>digest</name></expr></argument>, <argument><expr><literal type="number">16</literal> <operator>*</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>rtmpe8_sig</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>key_id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>AVXTEA</name></name></type> <name>ctx</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_xtea_le_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name><name>rtmpe8_keys</name><index>[<expr><name>key_id</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_xtea_le_crypt</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>rtmpe9_sig</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>key_id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>AVBlowfish</name></name></type> <name>ctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>xl</name></decl>, <decl><type ref="prev"/><name>xr</name></decl>;</decl_stmt>

<expr_stmt><expr><name>xl</name> <operator>=</operator> <call><name>AV_RL32</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>xr</name> <operator>=</operator> <call><name>AV_RL32</name><argument_list>(<argument><expr><name>in</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_blowfish_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name><name>rtmpe9_keys</name><index>[<expr><name>key_id</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_blowfish_crypt_ecb</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WL32</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>xl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WL32</name><argument_list>(<argument><expr><name>out</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>xr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_rtmpe_encrypt_sig</name><parameter_list>(<parameter><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>sig</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>digest</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">8</literal></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rtmpe8_sig</name><argument_list>(<argument><expr><name>sig</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>sig</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name><name>digest</name><index>[<expr><name>i</name></expr>]</index></name> <operator>%</operator> <literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <literal type="number">9</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rtmpe9_sig</name><argument_list>(<argument><expr><name>sig</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>sig</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name><name>digest</name><index>[<expr><name>i</name></expr>]</index></name> <operator>%</operator> <literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_rtmpe_update_keystream</name><parameter_list>(<parameter><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>RTMPEContext</name> <modifier>*</modifier></type><name>rt</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>RTMP_HANDSHAKE_PACKET_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_rc4_crypt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rt</name><operator>-&gt;</operator><name>key_in</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_rc4_crypt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rt</name><operator>-&gt;</operator><name>key_out</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rt</name><operator>-&gt;</operator><name>handshaked</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rtmpe_close</name><parameter_list>(<parameter><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>RTMPEContext</name> <modifier>*</modifier></type><name>rt</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_dh_free</name><argument_list>(<argument><expr><name><name>rt</name><operator>-&gt;</operator><name>dh</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ffurl_close</name><argument_list>(<argument><expr><name><name>rt</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rtmpe_open</name><parameter_list>(<parameter><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>uri</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>RTMPEContext</name> <modifier>*</modifier></type><name>rt</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>host</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>url</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>port</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_url_split</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>port</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rt</name><operator>-&gt;</operator><name>tunneling</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>port</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>port</name> <operator>=</operator> <literal type="number">80</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ff_url_join</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"ffrtmphttp"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>port</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>port</name> <operator>=</operator> <literal type="number">1935</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ff_url_join</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"tcp"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ffurl_open_whitelist</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rt</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name>AVIO_FLAG_READ_WRITE</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>interrupt_callback</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name><name>h</name><operator>-&gt;</operator><name>protocol_whitelist</name></name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>protocol_blacklist</name></name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rtmpe_close</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rtmpe_read</name><parameter_list>(<parameter><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>RTMPEContext</name> <modifier>*</modifier></type><name>rt</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rt</name><operator>-&gt;</operator><name>stream</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name><name>h</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AVIO_FLAG_NONBLOCK</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ffurl_read</name><argument_list>(<argument><expr><name><name>rt</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rt</name><operator>-&gt;</operator><name>stream</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>AVIO_FLAG_NONBLOCK</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>ret</name> <operator>!=</operator> <name>AVERROR_EOF</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rt</name><operator>-&gt;</operator><name>handshaked</name></name> <operator>&amp;&amp;</operator> <name>ret</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_rc4_crypt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rt</name><operator>-&gt;</operator><name>key_in</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rtmpe_write</name><parameter_list>(<parameter><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>RTMPEContext</name> <modifier>*</modifier></type><name>rt</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rt</name><operator>-&gt;</operator><name>handshaked</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_rc4_crypt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rt</name><operator>-&gt;</operator><name>key_out</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ffurl_write</name><argument_list>(<argument><expr><name><name>rt</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>size</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(RTMPEContext, x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEC</name></cpp:macro> <cpp:value>AV_OPT_FLAG_DECODING_PARAM</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>ffrtmpcrypt_options</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{<expr><literal type="string">"ffrtmpcrypt_tunneling"</literal></expr>, <expr><literal type="string">"Use a HTTP tunneling connection (RTMPTE)."</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>tunneling</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>DEC</name></expr>}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>ffrtmpcrypt_class</name> <init>= <expr><block>{

<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"ffrtmpcrypt"</literal></expr>,

<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,

<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>ffrtmpcrypt_options</name></expr>,

<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>URLProtocol</name></type> <name>ff_ffrtmpcrypt_protocol</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"ffrtmpcrypt"</literal></expr>,

<expr><operator>.</operator><name>url_open</name> <operator>=</operator> <name>rtmpe_open</name></expr>,

<expr><operator>.</operator><name>url_read</name> <operator>=</operator> <name>rtmpe_read</name></expr>,

<expr><operator>.</operator><name>url_write</name> <operator>=</operator> <name>rtmpe_write</name></expr>,

<expr><operator>.</operator><name>url_close</name> <operator>=</operator> <name>rtmpe_close</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>RTMPEContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>URL_PROTOCOL_FLAG_NETWORK</name></expr>,

<expr><operator>.</operator><name>priv_data_class</name> <operator>=</operator> <operator>&amp;</operator><name>ffrtmpcrypt_class</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
