<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavformat\tls_mbedtls.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mbedtls/certs.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mbedtls/config.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mbedtls/ctr_drbg.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mbedtls/entropy.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mbedtls/net_sockets.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mbedtls/platform.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mbedtls/ssl.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mbedtls/x509_crt.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avformat.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"url.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tls.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/parseutils.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>TLSContext</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TLSShared</name></type> <name>tls_shared</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mbedtls_ssl_context</name></type> <name>ssl_context</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mbedtls_ssl_config</name></type> <name>ssl_config</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mbedtls_entropy_context</name></type> <name>entropy_context</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mbedtls_ctr_drbg_context</name></type> <name>ctr_drbg_context</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mbedtls_x509_crt</name></type> <name>ca_cert</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mbedtls_x509_crt</name></type> <name>own_cert</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mbedtls_pk_context</name></type> <name>priv_key</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>priv_key_pw</name></decl>;</decl_stmt>

}</block></struct></type> <name>TLSContext</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(TLSContext, x)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>tls_close</name><parameter_list>(<parameter><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TLSContext</name> <modifier>*</modifier></type><name>tls_ctx</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mbedtls_ssl_close_notify</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tls_ctx</name><operator>-&gt;</operator><name>ssl_context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mbedtls_pk_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tls_ctx</name><operator>-&gt;</operator><name>priv_key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mbedtls_x509_crt_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tls_ctx</name><operator>-&gt;</operator><name>ca_cert</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mbedtls_x509_crt_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tls_ctx</name><operator>-&gt;</operator><name>own_cert</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mbedtls_ssl_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tls_ctx</name><operator>-&gt;</operator><name>ssl_context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mbedtls_ssl_config_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tls_ctx</name><operator>-&gt;</operator><name>ssl_config</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mbedtls_ctr_drbg_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tls_ctx</name><operator>-&gt;</operator><name>ctr_drbg_context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mbedtls_entropy_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tls_ctx</name><operator>-&gt;</operator><name>entropy_context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>handle_transport_error</name><parameter_list>(<parameter><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>func_name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>react_on_eagain</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ret</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>

<case>case <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call></expr>:</case>

<return>return <expr><name>react_on_eagain</name></expr>;</return>

<case>case <expr><name>AVERROR_EXIT</name></expr>:</case>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EPIPE</name></expr></argument>)</argument_list></call></expr>:</case>

<case>case <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ECONNRESET</name></expr></argument>)</argument_list></call></expr>:</case>

<return>return <expr><name>MBEDTLS_ERR_NET_CONN_RESET</name></expr>;</return>

<default>default:</default>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"%s returned 0x%x\n"</literal></expr></argument>, <argument><expr><name>func_name</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EIO</name></expr>;</expr_stmt>

<return>return <expr><name>MBEDTLS_ERR_NET_SEND_FAILED</name></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mbedtls_send</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><operator>(</operator><name>URLContext</name><operator>*</operator><operator>)</operator> <name>ctx</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>ffurl_write</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>max_packet_size</name></name> <operator>&amp;&amp;</operator> <name>len</name> <operator>&gt;</operator> <name><name>h</name><operator>-&gt;</operator><name>max_packet_size</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>MBEDTLS_ERR_SSL_BUFFER_TOO_SMALL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>handle_transport_error</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="string">"ffurl_write"</literal></expr></argument>, <argument><expr><name>MBEDTLS_ERR_SSL_WANT_WRITE</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mbedtls_recv</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><operator>(</operator><name>URLContext</name><operator>*</operator><operator>)</operator> <name>ctx</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>ffurl_read</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>max_packet_size</name></name> <operator>&amp;&amp;</operator> <name>len</name> <operator>&gt;</operator> <name><name>h</name><operator>-&gt;</operator><name>max_packet_size</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>MBEDTLS_ERR_SSL_BUFFER_TOO_SMALL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>handle_transport_error</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="string">"ffurl_read"</literal></expr></argument>, <argument><expr><name>MBEDTLS_ERR_SSL_WANT_READ</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handle_pk_parse_error</name><parameter_list>(<parameter><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ret</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>MBEDTLS_ERR_PK_FILE_IO_ERROR</name></expr>:</case>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Read of key file failed. Is it actually there, are the access permissions correct?\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>MBEDTLS_ERR_PK_PASSWORD_REQUIRED</name></expr>:</case>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"A password for the private key is missing.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>MBEDTLS_ERR_PK_PASSWORD_MISMATCH</name></expr>:</case>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"The given password for the private key is wrong.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"mbedtls_pk_parse_key returned -0x%x\n"</literal></expr></argument>, <argument><expr><operator>-</operator><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handle_handshake_error</name><parameter_list>(<parameter><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ret</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>MBEDTLS_ERR_SSL_NO_USABLE_CIPHERSUITE</name></expr>:</case>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"None of the common ciphersuites is usable. Was the local certificate correctly set?\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>MBEDTLS_ERR_SSL_FATAL_ALERT_MESSAGE</name></expr>:</case>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"A fatal alert message was received from the peer, has the peer a correct certificate?\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>MBEDTLS_ERR_SSL_CA_CHAIN_REQUIRED</name></expr>:</case>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"No CA chain is set, but required to operate. Was the CA correctly set?\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>MBEDTLS_ERR_NET_CONN_RESET</name></expr>:</case>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"TLS handshake was aborted by peer.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"mbedtls_ssl_handshake returned -0x%x\n"</literal></expr></argument>, <argument><expr><operator>-</operator><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>parse_options</name><parameter_list>(<parameter><decl><type><name>TLSContext</name> <modifier>*</modifier></type><name>tls_ctxc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>uri</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><literal type="char">'?'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>tls_ctxc</name><operator>-&gt;</operator><name>priv_key_pw</name></name> <operator>&amp;&amp;</operator> <call><name>av_find_info_tag</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"key_password"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>tls_ctxc</name><operator>-&gt;</operator><name>priv_key_pw</name></name> <operator>=</operator> <call><name>av_strdup</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>tls_open</name><parameter_list>(<parameter><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>uri</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>AVDictionary</name> <modifier>*</modifier><modifier>*</modifier></type><name>options</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TLSContext</name> <modifier>*</modifier></type><name>tls_ctx</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TLSShared</name> <modifier>*</modifier></type><name>shr</name> <init>= <expr><operator>&amp;</operator><name><name>tls_ctx</name><operator>-&gt;</operator><name>tls_shared</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>verify_res_flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>parse_options</name><argument_list>(<argument><expr><name>tls_ctx</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_tls_open_underlying</name><argument_list>(<argument><expr><name>shr</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>mbedtls_ssl_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tls_ctx</name><operator>-&gt;</operator><name>ssl_context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mbedtls_ssl_config_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tls_ctx</name><operator>-&gt;</operator><name>ssl_config</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mbedtls_entropy_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tls_ctx</name><operator>-&gt;</operator><name>entropy_context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mbedtls_ctr_drbg_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tls_ctx</name><operator>-&gt;</operator><name>ctr_drbg_context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mbedtls_x509_crt_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tls_ctx</name><operator>-&gt;</operator><name>ca_cert</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mbedtls_pk_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tls_ctx</name><operator>-&gt;</operator><name>priv_key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>shr</name><operator>-&gt;</operator><name>ca_file</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>mbedtls_x509_crt_parse_file</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tls_ctx</name><operator>-&gt;</operator><name>ca_cert</name></name></expr></argument>, <argument><expr><name><name>shr</name><operator>-&gt;</operator><name>ca_file</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"mbedtls_x509_crt_parse_file for CA cert returned %d\n"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>shr</name><operator>-&gt;</operator><name>cert_file</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>mbedtls_x509_crt_parse_file</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tls_ctx</name><operator>-&gt;</operator><name>own_cert</name></name></expr></argument>, <argument><expr><name><name>shr</name><operator>-&gt;</operator><name>cert_file</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"mbedtls_x509_crt_parse_file for own cert returned %d\n"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>shr</name><operator>-&gt;</operator><name>key_file</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>mbedtls_pk_parse_keyfile</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tls_ctx</name><operator>-&gt;</operator><name>priv_key</name></name></expr></argument>,

<argument><expr><name><name>shr</name><operator>-&gt;</operator><name>key_file</name></name></expr></argument>,

<argument><expr><name><name>tls_ctx</name><operator>-&gt;</operator><name>priv_key_pw</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>handle_pk_parse_error</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>mbedtls_ctr_drbg_seed</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tls_ctx</name><operator>-&gt;</operator><name>ctr_drbg_context</name></name></expr></argument>,

<argument><expr><name>mbedtls_entropy_func</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>tls_ctx</name><operator>-&gt;</operator><name>entropy_context</name></name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"mbedtls_ctr_drbg_seed returned %d\n"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>mbedtls_ssl_config_defaults</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tls_ctx</name><operator>-&gt;</operator><name>ssl_config</name></name></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>shr</name><operator>-&gt;</operator><name>listen</name></name></expr> ?</condition><then> <expr><name>MBEDTLS_SSL_IS_SERVER</name></expr> </then><else>: <expr><name>MBEDTLS_SSL_IS_CLIENT</name></expr></else></ternary></expr></argument>,

<argument><expr><name>MBEDTLS_SSL_TRANSPORT_STREAM</name></expr></argument>,

<argument><expr><name>MBEDTLS_SSL_PRESET_DEFAULT</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"mbedtls_ssl_config_defaults returned %d\n"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>mbedtls_ssl_conf_authmode</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tls_ctx</name><operator>-&gt;</operator><name>ssl_config</name></name></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>shr</name><operator>-&gt;</operator><name>ca_file</name></name></expr> ?</condition><then> <expr><name>MBEDTLS_SSL_VERIFY_REQUIRED</name></expr> </then><else>: <expr><name>MBEDTLS_SSL_VERIFY_NONE</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mbedtls_ssl_conf_rng</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tls_ctx</name><operator>-&gt;</operator><name>ssl_config</name></name></expr></argument>, <argument><expr><name>mbedtls_ctr_drbg_random</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tls_ctx</name><operator>-&gt;</operator><name>ctr_drbg_context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mbedtls_ssl_conf_ca_chain</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tls_ctx</name><operator>-&gt;</operator><name>ssl_config</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tls_ctx</name><operator>-&gt;</operator><name>ca_cert</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>mbedtls_ssl_conf_own_cert</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tls_ctx</name><operator>-&gt;</operator><name>ssl_config</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tls_ctx</name><operator>-&gt;</operator><name>own_cert</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tls_ctx</name><operator>-&gt;</operator><name>priv_key</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"mbedtls_ssl_conf_own_cert returned %d\n"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>mbedtls_ssl_setup</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tls_ctx</name><operator>-&gt;</operator><name>ssl_context</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tls_ctx</name><operator>-&gt;</operator><name>ssl_config</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"mbedtls_ssl_setup returned %d\n"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>shr</name><operator>-&gt;</operator><name>listen</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>shr</name><operator>-&gt;</operator><name>numerichost</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>mbedtls_ssl_set_hostname</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tls_ctx</name><operator>-&gt;</operator><name>ssl_context</name></name></expr></argument>, <argument><expr><name><name>shr</name><operator>-&gt;</operator><name>host</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"mbedtls_ssl_set_hostname returned %d\n"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>mbedtls_ssl_set_bio</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tls_ctx</name><operator>-&gt;</operator><name>ssl_context</name></name></expr></argument>, <argument><expr><name><name>shr</name><operator>-&gt;</operator><name>tcp</name></name></expr></argument>, <argument><expr><name>mbedtls_send</name></expr></argument>, <argument><expr><name>mbedtls_recv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>mbedtls_ssl_handshake</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tls_ctx</name><operator>-&gt;</operator><name>ssl_context</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>MBEDTLS_ERR_SSL_WANT_READ</name> <operator>&amp;&amp;</operator> <name>ret</name> <operator>!=</operator> <name>MBEDTLS_ERR_SSL_WANT_WRITE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>handle_handshake_error</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name><name>shr</name><operator>-&gt;</operator><name>verify</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>verify_res_flags</name> <operator>=</operator> <call><name>mbedtls_ssl_get_verify_result</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tls_ctx</name><operator>-&gt;</operator><name>ssl_context</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"mbedtls_ssl_get_verify_result reported problems "</literal>\

<literal type="string">"with the certificate verification, returned flags: %u\n"</literal></expr></argument>,

<argument><expr><name>verify_res_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>verify_res_flags</name> <operator>&amp;</operator> <name>MBEDTLS_X509_BADCERT_NOT_TRUSTED</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"The certificate is not correctly signed by the trusted CA.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>tls_close</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>handle_tls_error</name><parameter_list>(<parameter><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>func_name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ret</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>MBEDTLS_ERR_SSL_WANT_READ</name></expr>:</case>

<case>case <expr><name>MBEDTLS_ERR_SSL_WANT_WRITE</name></expr>:</case>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>MBEDTLS_ERR_NET_SEND_FAILED</name></expr>:</case>

<case>case <expr><name>MBEDTLS_ERR_NET_RECV_FAILED</name></expr>:</case>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>MBEDTLS_ERR_NET_CONN_RESET</name></expr>:</case>

<case>case <expr><name>MBEDTLS_ERR_SSL_PEER_CLOSE_NOTIFY</name></expr>:</case>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"%s reported connection reset by peer\n"</literal></expr></argument>, <argument><expr><name>func_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_EOF</name></expr>;</return>

<default>default:</default>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"%s returned -0x%x\n"</literal></expr></argument>, <argument><expr><name>func_name</name></expr></argument>, <argument><expr><operator>-</operator><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>tls_read</name><parameter_list>(<parameter><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TLSContext</name> <modifier>*</modifier></type><name>tls_ctx</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>mbedtls_ssl_read</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tls_ctx</name><operator>-&gt;</operator><name>ssl_context</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>handle_tls_error</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="string">"mbedtls_ssl_read"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>tls_write</name><parameter_list>(<parameter><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TLSContext</name> <modifier>*</modifier></type><name>tls_ctx</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>mbedtls_ssl_write</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tls_ctx</name><operator>-&gt;</operator><name>ssl_context</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>handle_tls_error</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="string">"mbedtls_ssl_write"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>tls_get_file_handle</name><parameter_list>(<parameter><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TLSContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>ffurl_get_file_handle</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>tls_shared</name><operator>.</operator><name>tcp</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>options</name><index>[]</index></name> <init>= <expr><block>{

<expr><call><name>TLS_COMMON_OPTIONS</name><argument_list>(<argument><expr><name>TLSContext</name></expr></argument>, <argument><expr><name>tls_shared</name></expr></argument>)</argument_list></call></expr>, \

<expr><block>{<expr><literal type="string">"key_password"</literal></expr>, <expr><literal type="string">"Password for the private key file"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>priv_key_pw</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>TLS_OPTFL</name></expr> }</block></expr>, \

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>tls_class</name> <init>= <expr><block>{

<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"tls"</literal></expr>,

<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,

<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>options</name></expr>,

<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>URLProtocol</name></type> <name>ff_tls_protocol</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"tls"</literal></expr>,

<expr><operator>.</operator><name>url_open2</name> <operator>=</operator> <name>tls_open</name></expr>,

<expr><operator>.</operator><name>url_read</name> <operator>=</operator> <name>tls_read</name></expr>,

<expr><operator>.</operator><name>url_write</name> <operator>=</operator> <name>tls_write</name></expr>,

<expr><operator>.</operator><name>url_close</name> <operator>=</operator> <name>tls_close</name></expr>,

<expr><operator>.</operator><name>url_get_file_handle</name> <operator>=</operator> <name>tls_get_file_handle</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TLSContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>URL_PROTOCOL_FLAG_NETWORK</name></expr>,

<expr><operator>.</operator><name>priv_data_class</name> <operator>=</operator> <operator>&amp;</operator><name>tls_class</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
