<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavformat\asfenc.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/dict.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mathematics.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avformat.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avlanguage.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avio_internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"riff.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"asf.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASF_INDEXED_INTERVAL</name></cpp:macro> <cpp:value>10000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASF_INDEX_BLOCK</name></cpp:macro> <cpp:value>(1&lt;&lt;9)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASF_PAYLOADS_PER_PACKET</name></cpp:macro> <cpp:value>63</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASF_PACKET_ERROR_CORRECTION_DATA_SIZE</name></cpp:macro> <cpp:value>0x2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASF_PACKET_ERROR_CORRECTION_FLAGS</name></cpp:macro> <cpp:value>(ASF_PACKET_FLAG_ERROR_CORRECTION_PRESENT | ASF_PACKET_ERROR_CORRECTION_DATA_SIZE)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>ASF_PACKET_ERROR_CORRECTION_FLAGS</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASF_PACKET_ERROR_CORRECTION_FLAGS_FIELD_SIZE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASF_PACKET_ERROR_CORRECTION_FLAGS_FIELD_SIZE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASF_PPI_PROPERTY_FLAGS</name></cpp:macro> <cpp:value>(ASF_PL_FLAG_REPLICATED_DATA_LENGTH_FIELD_IS_BYTE | ASF_PL_FLAG_OFFSET_INTO_MEDIA_OBJECT_LENGTH_FIELD_IS_DWORD | ASF_PL_FLAG_MEDIA_OBJECT_NUMBER_LENGTH_FIELD_IS_BYTE | ASF_PL_FLAG_STREAM_NUMBER_LENGTH_FIELD_IS_BYTE)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASF_PPI_LENGTH_TYPE_FLAGS</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASF_PAYLOAD_FLAGS</name></cpp:macro> <cpp:value>ASF_PL_FLAG_PAYLOAD_LENGTH_FIELD_IS_WORD</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>ASF_PPI_FLAG_SEQUENCE_FIELD_IS_BYTE</name> <operator>==</operator> <operator>(</operator><name>ASF_PPI_LENGTH_TYPE_FLAGS</name> <operator>&amp;</operator> <name>ASF_PPI_MASK_SEQUENCE_FIELD_SIZE</name><operator>)</operator><operator>)</operator></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASF_PPI_SEQUENCE_FIELD_SIZE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>ASF_PPI_FLAG_SEQUENCE_FIELD_IS_WORD</name> <operator>==</operator> <operator>(</operator><name>ASF_PPI_LENGTH_TYPE_FLAGS</name> <operator>&amp;</operator> <name>ASF_PPI_MASK_SEQUENCE_FIELD_SIZE</name><operator>)</operator><operator>)</operator></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASF_PPI_SEQUENCE_FIELD_SIZE</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>ASF_PPI_FLAG_SEQUENCE_FIELD_IS_DWORD</name> <operator>==</operator> <operator>(</operator><name>ASF_PPI_LENGTH_TYPE_FLAGS</name> <operator>&amp;</operator> <name>ASF_PPI_MASK_SEQUENCE_FIELD_SIZE</name><operator>)</operator><operator>)</operator></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASF_PPI_SEQUENCE_FIELD_SIZE</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ASF_PPI_SEQUENCE_FIELD_SIZE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASF_PPI_SEQUENCE_FIELD_SIZE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>ASF_PPI_FLAG_PACKET_LENGTH_FIELD_IS_BYTE</name> <operator>==</operator> <operator>(</operator><name>ASF_PPI_LENGTH_TYPE_FLAGS</name> <operator>&amp;</operator> <name>ASF_PPI_MASK_PACKET_LENGTH_FIELD_SIZE</name><operator>)</operator><operator>)</operator></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASF_PPI_PACKET_LENGTH_FIELD_SIZE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>ASF_PPI_FLAG_PACKET_LENGTH_FIELD_IS_WORD</name> <operator>==</operator> <operator>(</operator><name>ASF_PPI_LENGTH_TYPE_FLAGS</name> <operator>&amp;</operator> <name>ASF_PPI_MASK_PACKET_LENGTH_FIELD_SIZE</name><operator>)</operator><operator>)</operator></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASF_PPI_PACKET_LENGTH_FIELD_SIZE</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>ASF_PPI_FLAG_PACKET_LENGTH_FIELD_IS_DWORD</name> <operator>==</operator> <operator>(</operator><name>ASF_PPI_LENGTH_TYPE_FLAGS</name> <operator>&amp;</operator> <name>ASF_PPI_MASK_PACKET_LENGTH_FIELD_SIZE</name><operator>)</operator><operator>)</operator></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASF_PPI_PACKET_LENGTH_FIELD_SIZE</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ASF_PPI_PACKET_LENGTH_FIELD_SIZE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASF_PPI_PACKET_LENGTH_FIELD_SIZE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>ASF_PPI_FLAG_PADDING_LENGTH_FIELD_IS_BYTE</name> <operator>==</operator> <operator>(</operator><name>ASF_PPI_LENGTH_TYPE_FLAGS</name> <operator>&amp;</operator> <name>ASF_PPI_MASK_PADDING_LENGTH_FIELD_SIZE</name><operator>)</operator><operator>)</operator></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASF_PPI_PADDING_LENGTH_FIELD_SIZE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>ASF_PPI_FLAG_PADDING_LENGTH_FIELD_IS_WORD</name> <operator>==</operator> <operator>(</operator><name>ASF_PPI_LENGTH_TYPE_FLAGS</name> <operator>&amp;</operator> <name>ASF_PPI_MASK_PADDING_LENGTH_FIELD_SIZE</name><operator>)</operator><operator>)</operator></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASF_PPI_PADDING_LENGTH_FIELD_SIZE</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>ASF_PPI_FLAG_PADDING_LENGTH_FIELD_IS_DWORD</name> <operator>==</operator> <operator>(</operator><name>ASF_PPI_LENGTH_TYPE_FLAGS</name> <operator>&amp;</operator> <name>ASF_PPI_MASK_PADDING_LENGTH_FIELD_SIZE</name><operator>)</operator><operator>)</operator></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASF_PPI_PADDING_LENGTH_FIELD_SIZE</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ASF_PPI_PADDING_LENGTH_FIELD_SIZE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASF_PPI_PADDING_LENGTH_FIELD_SIZE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>ASF_PL_FLAG_REPLICATED_DATA_LENGTH_FIELD_IS_BYTE</name> <operator>==</operator> <operator>(</operator><name>ASF_PPI_PROPERTY_FLAGS</name> <operator>&amp;</operator> <name>ASF_PL_MASK_REPLICATED_DATA_LENGTH_FIELD_SIZE</name><operator>)</operator><operator>)</operator></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASF_PAYLOAD_REPLICATED_DATA_LENGTH_FIELD_SIZE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>ASF_PL_FLAG_REPLICATED_DATA_LENGTH_FIELD_IS_WORD</name> <operator>==</operator> <operator>(</operator><name>ASF_PPI_PROPERTY_FLAGS</name> <operator>&amp;</operator> <name>ASF_PL_MASK_REPLICATED_DATA_LENGTH_FIELD_SIZE</name><operator>)</operator><operator>)</operator></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASF_PAYLOAD_REPLICATED_DATA_LENGTH_FIELD_SIZE</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>ASF_PL_FLAG_REPLICATED_DATA_LENGTH_FIELD_IS_DWORD</name> <operator>==</operator> <operator>(</operator><name>ASF_PPI_PROPERTY_FLAGS</name> <operator>&amp;</operator> <name>ASF_PL_MASK_REPLICATED_DATA_LENGTH_FIELD_SIZE</name><operator>)</operator><operator>)</operator></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASF_PAYLOAD_REPLICATED_DATA_LENGTH_FIELD_SIZE</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ASF_PAYLOAD_REPLICATED_DATA_LENGTH_FIELD_SIZE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASF_PAYLOAD_REPLICATED_DATA_LENGTH_FIELD_SIZE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>ASF_PL_FLAG_OFFSET_INTO_MEDIA_OBJECT_LENGTH_FIELD_IS_BYTE</name> <operator>==</operator> <operator>(</operator><name>ASF_PPI_PROPERTY_FLAGS</name> <operator>&amp;</operator> <name>ASF_PL_MASK_OFFSET_INTO_MEDIA_OBJECT_LENGTH_FIELD_SIZE</name><operator>)</operator><operator>)</operator></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASF_PAYLOAD_OFFSET_INTO_MEDIA_OBJECT_FIELD_SIZE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>ASF_PL_FLAG_OFFSET_INTO_MEDIA_OBJECT_LENGTH_FIELD_IS_WORD</name> <operator>==</operator> <operator>(</operator><name>ASF_PPI_PROPERTY_FLAGS</name> <operator>&amp;</operator> <name>ASF_PL_MASK_OFFSET_INTO_MEDIA_OBJECT_LENGTH_FIELD_SIZE</name><operator>)</operator><operator>)</operator></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASF_PAYLOAD_OFFSET_INTO_MEDIA_OBJECT_FIELD_SIZE</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>ASF_PL_FLAG_OFFSET_INTO_MEDIA_OBJECT_LENGTH_FIELD_IS_DWORD</name> <operator>==</operator> <operator>(</operator><name>ASF_PPI_PROPERTY_FLAGS</name> <operator>&amp;</operator> <name>ASF_PL_MASK_OFFSET_INTO_MEDIA_OBJECT_LENGTH_FIELD_SIZE</name><operator>)</operator><operator>)</operator></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASF_PAYLOAD_OFFSET_INTO_MEDIA_OBJECT_FIELD_SIZE</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ASF_PAYLOAD_OFFSET_INTO_MEDIA_OBJECT_FIELD_SIZE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASF_PAYLOAD_OFFSET_INTO_MEDIA_OBJECT_FIELD_SIZE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>ASF_PL_FLAG_MEDIA_OBJECT_NUMBER_LENGTH_FIELD_IS_BYTE</name> <operator>==</operator> <operator>(</operator><name>ASF_PPI_PROPERTY_FLAGS</name> <operator>&amp;</operator> <name>ASF_PL_MASK_MEDIA_OBJECT_NUMBER_LENGTH_FIELD_SIZE</name><operator>)</operator><operator>)</operator></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASF_PAYLOAD_MEDIA_OBJECT_NUMBER_FIELD_SIZE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>ASF_PL_FLAG_MEDIA_OBJECT_NUMBER_LENGTH_FIELD_IS_WORD</name> <operator>==</operator> <operator>(</operator><name>ASF_PPI_PROPERTY_FLAGS</name> <operator>&amp;</operator> <name>ASF_PL_MASK_MEDIA_OBJECT_NUMBER_LENGTH_FIELD_SIZE</name><operator>)</operator><operator>)</operator></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASF_PAYLOAD_MEDIA_OBJECT_NUMBER_FIELD_SIZE</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>ASF_PL_FLAG_MEDIA_OBJECT_NUMBER_LENGTH_FIELD_IS_DWORD</name> <operator>==</operator> <operator>(</operator><name>ASF_PPI_PROPERTY_FLAGS</name> <operator>&amp;</operator> <name>ASF_PL_MASK_MEDIA_OBJECT_NUMBER_LENGTH_FIELD_SIZE</name><operator>)</operator><operator>)</operator></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASF_PAYLOAD_MEDIA_OBJECT_NUMBER_FIELD_SIZE</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ASF_PAYLOAD_MEDIA_OBJECT_NUMBER_FIELD_SIZE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASF_PAYLOAD_MEDIA_OBJECT_NUMBER_FIELD_SIZE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>ASF_PL_FLAG_PAYLOAD_LENGTH_FIELD_IS_BYTE</name> <operator>==</operator> <operator>(</operator><name>ASF_PAYLOAD_FLAGS</name> <operator>&amp;</operator> <name>ASF_PL_MASK_PAYLOAD_LENGTH_FIELD_SIZE</name><operator>)</operator><operator>)</operator></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASF_PAYLOAD_LENGTH_FIELD_SIZE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>ASF_PL_FLAG_PAYLOAD_LENGTH_FIELD_IS_WORD</name> <operator>==</operator> <operator>(</operator><name>ASF_PAYLOAD_FLAGS</name> <operator>&amp;</operator> <name>ASF_PL_MASK_PAYLOAD_LENGTH_FIELD_SIZE</name><operator>)</operator><operator>)</operator></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASF_PAYLOAD_LENGTH_FIELD_SIZE</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ASF_PAYLOAD_LENGTH_FIELD_SIZE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASF_PAYLOAD_LENGTH_FIELD_SIZE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PACKET_HEADER_MIN_SIZE</name></cpp:macro> <cpp:value>(ASF_PACKET_ERROR_CORRECTION_FLAGS_FIELD_SIZE + ASF_PACKET_ERROR_CORRECTION_DATA_SIZE + 1 + 1 + ASF_PPI_PACKET_LENGTH_FIELD_SIZE + ASF_PPI_SEQUENCE_FIELD_SIZE + ASF_PPI_PADDING_LENGTH_FIELD_SIZE + 4 + 2)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASF_PAYLOAD_REPLICATED_DATA_LENGTH</name></cpp:macro> <cpp:value>0x08</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PAYLOAD_HEADER_SIZE_SINGLE_PAYLOAD</name></cpp:macro> <cpp:value>(1 + ASF_PAYLOAD_MEDIA_OBJECT_NUMBER_FIELD_SIZE + ASF_PAYLOAD_OFFSET_INTO_MEDIA_OBJECT_FIELD_SIZE + ASF_PAYLOAD_REPLICATED_DATA_LENGTH_FIELD_SIZE + ASF_PAYLOAD_REPLICATED_DATA_LENGTH)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PAYLOAD_HEADER_SIZE_MULTIPLE_PAYLOADS</name></cpp:macro> <cpp:value>(1 + ASF_PAYLOAD_MEDIA_OBJECT_NUMBER_FIELD_SIZE + ASF_PAYLOAD_OFFSET_INTO_MEDIA_OBJECT_FIELD_SIZE + ASF_PAYLOAD_REPLICATED_DATA_LENGTH_FIELD_SIZE + ASF_PAYLOAD_REPLICATED_DATA_LENGTH + ASF_PAYLOAD_LENGTH_FIELD_SIZE)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SINGLE_PAYLOAD_HEADERS</name></cpp:macro> <cpp:value>(PACKET_HEADER_MIN_SIZE + PAYLOAD_HEADER_SIZE_SINGLE_PAYLOAD)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MULTI_PAYLOAD_HEADERS</name></cpp:macro> <cpp:value>(PACKET_HEADER_MIN_SIZE + 1 + 2 * PAYLOAD_HEADER_SIZE_MULTIPLE_PAYLOADS)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DATA_HEADER_SIZE</name></cpp:macro> <cpp:value>50</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PACKET_SIZE_MAX</name></cpp:macro> <cpp:value>65536</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PACKET_SIZE_MIN</name></cpp:macro> <cpp:value>100</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>ASFPayload</name> <block>{

<decl_stmt><decl><type><name>uint8_t</name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>size</name></decl>;</decl_stmt>

}</block></struct></type> <name>ASFPayload</name>;</typedef>

<typedef>typedef <type><struct>struct <name>ASFStream</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>num</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>seq</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVPacket</name></type> <name>pkt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>frag_offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>packet_obj_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>timestamp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>duration</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>skip_to_key</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pkt_clean</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ds_span</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>ds_packet_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ds_chunk_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>packet_pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>stream_language_index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>palette_changed</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>palette</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>payload_ext_ct</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ASFPayload</name></type> <name><name>payload</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>ASFStream</name>;</typedef>

<typedef>typedef <type><struct>struct <name>ASFContext</name> <block>{

<decl_stmt><decl><type><name>AVClass</name> <modifier>*</modifier></type><name>av_class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>seqno</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>is_streamed</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ASFStream</name></type> <name><name>streams</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>languages</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nb_languages</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>creation_time</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>nb_packets</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int64_t</name></type> <name>duration</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>multi_payloads_present</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>packet_size_left</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>packet_timestamp_start</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>packet_timestamp_end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>packet_nb_payloads</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>packet_buf</name><index>[<expr><name>PACKET_SIZE_MAX</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVIOContext</name></type> <name>pb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>data_offset</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ASFIndex</name> <modifier>*</modifier></type><name>index_ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>nb_index_memory_alloc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>maximum_packet</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>next_packet_number</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>next_packet_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>next_packet_offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>next_start_sec</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>end_sec</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>packet_size</name></decl>;</decl_stmt>

}</block></struct></type> <name>ASFContext</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVCodecTag</name></type> <name><name>codec_asf_bmp_tags</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><name>AV_CODEC_ID_MPEG4</name></expr>, <macro><name>MKTAG</name><argument_list>(<argument><literal type="char">'M'</literal></argument>, <argument><literal type="char">'4'</literal></argument>, <argument><literal type="char">'S'</literal></argument>, <argument><literal type="char">'2'</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><name>AV_CODEC_ID_MPEG4</name></expr>, <macro><name>MKTAG</name><argument_list>(<argument><literal type="char">'M'</literal></argument>, <argument><literal type="char">'P'</literal></argument>, <argument><literal type="char">'4'</literal></argument>, <argument><literal type="char">'S'</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><name>AV_CODEC_ID_MSMPEG4V3</name></expr>, <macro><name>MKTAG</name><argument_list>(<argument><literal type="char">'M'</literal></argument>, <argument><literal type="char">'P'</literal></argument>, <argument><literal type="char">'4'</literal></argument>, <argument><literal type="char">'3'</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><name>AV_CODEC_ID_NONE</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PREROLL_TIME</name></cpp:macro> <cpp:value>3100</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>put_str16</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tag</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>dyn_buf</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>avio_open_dyn_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dyn_buf</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>avio_put_str16le</name><argument_list>(<argument><expr><name>dyn_buf</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>avio_close_dyn_buf</name><argument_list>(<argument><expr><name>dyn_buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wl16</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64_t</name></type> <name>put_header</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ff_asf_guid</name> <modifier>*</modifier></type><name>g</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>pos</name></decl>;</decl_stmt>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_put_guid</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wl64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>pos</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>end_header</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>pos</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>pos1</name></decl>;</decl_stmt>

<expr_stmt><expr><name>pos1</name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pos</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wl64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pos1</name> <operator>-</operator> <name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pos1</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>put_chunk</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>payload_length</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ASFContext</name> <modifier>*</modifier></type><name>asf</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>length</name></decl>;</decl_stmt>

<expr_stmt><expr><name>length</name> <operator>=</operator> <name>payload_length</name> <operator>+</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>asf</name><operator>-&gt;</operator><name>seqno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>seqno</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64_t</name></type> <name>unix_to_file_time</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>ti</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>t</name></decl>;</decl_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name>ti</name> <operator>*</operator> <call><name>INT64_C</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>+=</operator> <call><name>INT64_C</name><argument_list>(<argument><expr><literal type="number">116444736000000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>t</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>get_send_time</name><parameter_list>(<parameter><decl><type><name>ASFContext</name> <modifier>*</modifier></type><name>asf</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>pres_time</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>offset</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>send_time</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>offset</name> <operator>=</operator> <name><name>asf</name><operator>-&gt;</operator><name>data_offset</name></name> <operator>+</operator> <name>DATA_HEADER_SIZE</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>asf</name><operator>-&gt;</operator><name>next_start_sec</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>pres_time</name> <operator>&lt;=</operator> <name><name>asf</name><operator>-&gt;</operator><name>index_ptr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>send_time</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>send_time</name> <operator>=</operator> <name><name>asf</name><operator>-&gt;</operator><name>index_ptr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>send_time</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>offset</name> <operator>=</operator> <name><name>asf</name><operator>-&gt;</operator><name>index_ptr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>offset</name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>send_time</name> <operator>/</operator> <literal type="number">10000</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>asf_write_markers</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ASFContext</name> <modifier>*</modifier></type><name>asf</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVRational</name></type> <name>scale</name> <init>= <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">10000000</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>hpos</name> <init>= <expr><call><name>put_header</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ff_asf_marker_header</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_put_guid</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ff_asf_reserved_4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>nb_chapters</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_chapters</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>AVChapter</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>chapters</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVDictionaryEntry</name> <modifier>*</modifier></type><name>t</name> <init>= <expr><call><name>av_dict_get</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><literal type="string">"title"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>pres_time</name> <init>= <expr><call><name>av_rescale_q</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>start</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>, <argument><expr><name>scale</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>send_time</name> <init>= <expr><call><name>get_send_time</name><argument_list>(<argument><expr><name>asf</name></expr></argument>, <argument><expr><name>pres_time</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>dyn_buf</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>t</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>avio_open_dyn_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dyn_buf</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>avio_put_str16le</name><argument_list>(<argument><expr><name>dyn_buf</name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>avio_close_dyn_buf</name><argument_list>(<argument><expr><name>dyn_buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>avio_wl64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wl64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pres_time</name> <operator>+</operator> <name>PREROLL_TIME</name> <operator>*</operator> <literal type="number">10000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">12</literal> <operator>+</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>send_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>len</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>t</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>end_header</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>hpos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>asf_write_header1</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>file_size</name></decl></parameter>,

<parameter><decl><type><name>int64_t</name></type> <name>data_chunk_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ASFContext</name> <modifier>*</modifier></type><name>asf</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVDictionaryEntry</name> <modifier>*</modifier></type><name><name>tags</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>header_size</name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>extra_size</name></decl>, <decl><type ref="prev"/><name>extra_size2</name></decl>, <decl><type ref="prev"/><name>wav_extra_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>has_title</name></decl>, <decl><type ref="prev"/><name>has_aspect_ratio</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>metadata_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodecParameters</name> <modifier>*</modifier></type><name>par</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>header_offset</name></decl>, <decl><type ref="prev"/><name>cur_pos</name></decl>, <decl><type ref="prev"/><name>hpos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bit_rate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>duration</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>audio_language_counts</name><index>[<expr><literal type="number">128</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_metadata_conv</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><name>ff_asf_metadata_conv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tags</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>av_dict_get</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><literal type="string">"title"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tags</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>av_dict_get</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><literal type="string">"author"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tags</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>av_dict_get</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><literal type="string">"copyright"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tags</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>av_dict_get</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><literal type="string">"comment"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tags</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <call><name>av_dict_get</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><literal type="string">"rating"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>duration</name> <operator>=</operator> <name><name>asf</name><operator>-&gt;</operator><name>duration</name></name> <operator>+</operator> <name>PREROLL_TIME</name> <operator>*</operator> <literal type="number">10000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>has_title</name> <operator>=</operator> <name><name>tags</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>||</operator> <name><name>tags</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>||</operator> <name><name>tags</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>||</operator> <name><name>tags</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>||</operator> <name><name>tags</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>file_size</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>ff_parse_creation_time_metadata</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>asf</name><operator>-&gt;</operator><name>creation_time</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><literal type="string">"creation_time"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>metadata_count</name> <operator>=</operator> <call><name>av_dict_count</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bit_rate</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>AVDictionaryEntry</name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>

<expr_stmt><expr><name>par</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>n</name></expr>]</index></name><operator>-&gt;</operator><name>codecpar</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avpriv_set_pts_info</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>bit_rate</name> <operator>+=</operator> <name><name>par</name><operator>-&gt;</operator><name>bit_rate</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name><name>par</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_VIDEO</name>

<operator>&amp;&amp;</operator> <name><name>par</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>num</name></name> <operator>&gt;</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <name><name>par</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>den</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>has_aspect_ratio</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>entry</name> <operator>=</operator> <call><name>av_dict_get</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>n</name></expr>]</index></name><operator>-&gt;</operator><name>metadata</name></expr></argument>, <argument><expr><literal type="string">"language"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>entry</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>iso6391lang</name> <init>= <expr><call><name>ff_convert_lang_to</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name>AV_LANG_ISO639_1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>iso6391lang</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>asf</name><operator>-&gt;</operator><name>nb_languages</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>asf</name><operator>-&gt;</operator><name>languages</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>iso6391lang</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>stream_language_index</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name><name>asf</name><operator>-&gt;</operator><name>nb_languages</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>languages</name><index>[<expr><name><name>asf</name><operator>-&gt;</operator><name>nb_languages</name></name></expr>]</index></name> <operator>=</operator> <name>iso6391lang</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>stream_language_index</name> <operator>=</operator> <name><name>asf</name><operator>-&gt;</operator><name>nb_languages</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>nb_languages</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>par</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>audio_language_counts</name><index>[<expr><name><name>asf</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>stream_language_index</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>stream_language_index</name> <operator>=</operator> <literal type="number">128</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>asf</name><operator>-&gt;</operator><name>is_streamed</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>put_chunk</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0x4824</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0xc00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ff_put_guid</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ff_asf_header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wl64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">3</literal> <operator>+</operator> <name>has_title</name> <operator>+</operator> <operator>!</operator><operator>!</operator><name>metadata_count</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>header_offset</name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hpos</name> <operator>=</operator> <call><name>put_header</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ff_asf_file_header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_put_guid</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ff_asf_my_guid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wl64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>file_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wl64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><call><name>unix_to_file_time</name><argument_list>(<argument><expr><name><name>asf</name><operator>-&gt;</operator><name>creation_time</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wl64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>asf</name><operator>-&gt;</operator><name>nb_packets</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wl64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>duration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wl64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>asf</name><operator>-&gt;</operator><name>duration</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wl64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>PREROLL_TIME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name><name>asf</name><operator>-&gt;</operator><name>is_streamed</name></name> <operator>||</operator> <operator>!</operator><operator>(</operator><name><name>pb</name><operator>-&gt;</operator><name>seekable</name></name> <operator>&amp;</operator> <name>AVIO_SEEKABLE_NORMAL</name><operator>)</operator><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">3</literal></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>packet_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>packet_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><ternary><condition><expr><name>bit_rate</name></expr> ?</condition><then> <expr><name>bit_rate</name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>end_header</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>hpos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hpos</name> <operator>=</operator> <call><name>put_header</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ff_asf_head1_guid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_put_guid</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ff_asf_head2_guid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>asf</name><operator>-&gt;</operator><name>nb_languages</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>hpos2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nb_audio_languages</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>hpos2</name> <operator>=</operator> <call><name>put_header</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ff_asf_language_guid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>asf</name><operator>-&gt;</operator><name>nb_languages</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>asf</name><operator>-&gt;</operator><name>nb_languages</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_put_str16le</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>asf</name><operator>-&gt;</operator><name>languages</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>end_header</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>hpos2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>asf</name><operator>-&gt;</operator><name>nb_languages</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>audio_language_counts</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>nb_audio_languages</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>nb_audio_languages</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>hpos2</name> <operator>=</operator> <call><name>put_header</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ff_asf_group_mutual_exclusion_object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_put_guid</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ff_asf_mutex_language</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>nb_audio_languages</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>asf</name><operator>-&gt;</operator><name>nb_languages</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>audio_language_counts</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avio_wl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>audio_language_counts</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>asf</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>stream_language_index</name> <operator>==</operator> <name>i</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>n</name></expr>]</index></name><operator>-&gt;</operator><name><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>avio_wl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>end_header</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>hpos2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>es_pos</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>asf</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>stream_language_index</name> <operator>&gt;</operator> <literal type="number">127</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>es_pos</name> <operator>=</operator> <call><name>put_header</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ff_asf_extended_stream_properties_object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wl64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wl64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>n</name></expr>]</index></name><operator>-&gt;</operator><name><name>codecpar</name><operator>-&gt;</operator><name>bit_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">5000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>n</name></expr>]</index></name><operator>-&gt;</operator><name><name>codecpar</name><operator>-&gt;</operator><name>bit_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">5000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>(</operator><operator>!</operator><name><name>asf</name><operator>-&gt;</operator><name>is_streamed</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pb</name><operator>-&gt;</operator><name>seekable</name></name> <operator>&amp;</operator> <name>AVIO_SEEKABLE_NORMAL</name><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>asf</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>stream_language_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wl64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>end_header</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>es_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>has_aspect_ratio</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>hpos2</name></decl>;</decl_stmt>

<expr_stmt><expr><name>hpos2</name> <operator>=</operator> <call><name>put_header</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ff_asf_metadata_header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>has_aspect_ratio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>par</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>n</name></expr>]</index></name><operator>-&gt;</operator><name>codecpar</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name><name>par</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_VIDEO</name>

<operator>&amp;&amp;</operator> <name><name>par</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>num</name></name> <operator>&gt;</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <name><name>par</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>den</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>AVRational</name></type> <name>sar</name> <init>= <expr><name><name>par</name><operator>-&gt;</operator><name>sample_aspect_ratio</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>avio_wl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">26</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_put_str16le</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"AspectRatioX"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>sar</name><operator>.</operator><name>num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">26</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_put_str16le</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"AspectRatioY"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>sar</name><operator>.</operator><name>den</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>end_header</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>hpos2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>pos1</name></decl>;</decl_stmt>

<expr_stmt><expr><name>pos1</name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>hpos</name> <operator>+</operator> <literal type="number">42</literal></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pos1</name> <operator>-</operator> <name>hpos</name> <operator>-</operator> <literal type="number">46</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pos1</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>end_header</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>hpos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>has_title</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>dyn_buf</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>avio_open_dyn_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dyn_buf</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>hpos</name> <operator>=</operator> <call><name>put_header</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ff_asf_comment_header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>tags</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <ternary><condition><expr><name><name>tags</name><index>[<expr><name>n</name></expr>]</index></name></expr> ?</condition><then> <expr><call><name>avio_put_str16le</name><argument_list>(<argument><expr><name>dyn_buf</name></expr></argument>, <argument><expr><name><name>tags</name><index>[<expr><name>n</name></expr>]</index></name><operator>-&gt;</operator><name>value</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>avio_close_dyn_buf</name><argument_list>(<argument><expr><name>dyn_buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>end_header</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>hpos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>metadata_count</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>AVDictionaryEntry</name> <modifier>*</modifier></type><name>tag</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>hpos</name> <operator>=</operator> <call><name>put_header</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ff_asf_extended_content_header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>metadata_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>tag</name> <operator>=</operator> <call><name>av_dict_get</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>AV_DICT_IGNORE_SUFFIX</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>put_str16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>tag</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_str16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>tag</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>end_header</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>hpos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>asf</name><operator>-&gt;</operator><name>is_streamed</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_chapters</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>asf_write_markers</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>es_pos</name></decl>;</decl_stmt>

<expr_stmt><expr><name>par</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>n</name></expr>]</index></name><operator>-&gt;</operator><name>codecpar</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>seq</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>par</name><operator>-&gt;</operator><name>codec_type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AVMEDIA_TYPE_AUDIO</name></expr>:</case>

<expr_stmt><expr><name>wav_extra_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>extra_size</name> <operator>=</operator> <literal type="number">18</literal> <operator>+</operator> <name>wav_extra_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>extra_size2</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<case>case <expr><name>AVMEDIA_TYPE_VIDEO</name></expr>:</case>

<expr_stmt><expr><name>wav_extra_size</name> <operator>=</operator> <name><name>par</name><operator>-&gt;</operator><name>extradata_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>extra_size</name> <operator>=</operator> <literal type="number">0x33</literal> <operator>+</operator> <name>wav_extra_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>extra_size2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name>hpos</name> <operator>=</operator> <call><name>put_header</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ff_asf_stream_header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>par</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ff_put_guid</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ff_asf_audio_stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_put_guid</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ff_asf_audio_conceal_spread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>ff_put_guid</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ff_asf_video_stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_put_guid</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ff_asf_video_conceal_none</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>avio_wl64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>es_pos</name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>extra_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>extra_size2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>par</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>wavsize</name> <init>= <expr><call><name>ff_put_wav_header</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>, <argument><expr><name>par</name></expr></argument>, <argument><expr><name>FF_PUT_WAV_HEADER_FORCE_WAVEFORMATEX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>wavsize</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>wavsize</name> <operator>!=</operator> <name>extra_size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cur_pos</name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>es_pos</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>wavsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>cur_pos</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x01</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_ADPCM_G726</name> <operator>||</operator> <operator>!</operator><name><name>par</name><operator>-&gt;</operator><name>block_align</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avio_wl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x0190</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x0190</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>avio_wl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>par</name><operator>-&gt;</operator><name>block_align</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>par</name><operator>-&gt;</operator><name>block_align</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>avio_wl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x01</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>avio_wl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>par</name><operator>-&gt;</operator><name>width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>par</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">40</literal> <operator>+</operator> <name><name>par</name><operator>-&gt;</operator><name>extradata_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ff_put_bmp_header</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>par</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>end_header</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>hpos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>hpos</name> <operator>=</operator> <call><name>put_header</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ff_asf_codec_comment_header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_put_guid</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ff_asf_codec_comment1_header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVCodecDescriptor</name> <modifier>*</modifier></type><name>codec_desc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>desc</name></decl>;</decl_stmt>

<expr_stmt><expr><name>par</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>n</name></expr>]</index></name><operator>-&gt;</operator><name>codecpar</name></expr>;</expr_stmt>

<expr_stmt><expr><name>codec_desc</name> <operator>=</operator> <call><name>avcodec_descriptor_get</name><argument_list>(<argument><expr><name><name>par</name><operator>-&gt;</operator><name>codec_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>par</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>avio_wl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>par</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>avio_wl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>avio_wl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>par</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_WMAV2</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>desc</name> <operator>=</operator> <literal type="string">"Windows Media Audio V8"</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>desc</name> <operator>=</operator> <ternary><condition><expr><name>codec_desc</name></expr> ?</condition><then> <expr><name><name>codec_desc</name><operator>-&gt;</operator><name>name</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>desc</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>dyn_buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>avio_open_dyn_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dyn_buf</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>avio_put_str16le</name><argument_list>(<argument><expr><name>dyn_buf</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>avio_close_dyn_buf</name><argument_list>(<argument><expr><name>dyn_buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>len</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>avio_wl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>avio_wl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>par</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avio_wl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>par</name><operator>-&gt;</operator><name>codec_tag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>avio_wl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>par</name><operator>-&gt;</operator><name>codec_tag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>par</name><operator>-&gt;</operator><name>codec_tag</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>end_header</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>hpos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cur_pos</name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>header_size</name> <operator>=</operator> <name>cur_pos</name> <operator>-</operator> <name>header_offset</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>asf</name><operator>-&gt;</operator><name>is_streamed</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>header_size</name> <operator>+=</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">30</literal> <operator>+</operator> <name>DATA_HEADER_SIZE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>header_offset</name> <operator>-</operator> <literal type="number">10</literal> <operator>-</operator> <literal type="number">30</literal></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>header_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>header_offset</name> <operator>-</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">30</literal></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>header_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>header_size</name> <operator>-=</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">30</literal> <operator>+</operator> <name>DATA_HEADER_SIZE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>header_size</name> <operator>+=</operator> <literal type="number">24</literal> <operator>+</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>header_offset</name> <operator>-</operator> <literal type="number">14</literal></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wl64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>header_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>cur_pos</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>data_offset</name></name> <operator>=</operator> <name>cur_pos</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_put_guid</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ff_asf_data_header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wl64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>data_chunk_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_put_guid</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ff_asf_my_guid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wl64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>asf</name><operator>-&gt;</operator><name>nb_packets</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>asf_write_header</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ASFContext</name> <modifier>*</modifier></type><name>asf</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>packet_size</name></name> <operator>=</operator> <name><name>asf</name><operator>-&gt;</operator><name>packet_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>max_interleave_delta</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>nb_packets</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name> <operator>&gt;</operator> <literal type="number">127</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"ASF can only handle 127 streams\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>index_ptr</name></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ASFIndex</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>ASF_INDEX_BLOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>asf</name><operator>-&gt;</operator><name>index_ptr</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>nb_index_memory_alloc</name></name> <operator>=</operator> <name>ASF_INDEX_BLOCK</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>maximum_packet</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>asf_write_header1</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>DATA_HEADER_SIZE</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>asf</name><operator>-&gt;</operator><name>index_ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>packet_nb_payloads</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>packet_timestamp_start</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>packet_timestamp_end</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ffio_init_context</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>asf</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name><name>asf</name><operator>-&gt;</operator><name>packet_buf</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>packet_size</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avoid_negative_ts</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avoid_negative_ts</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>asf_write_stream_header</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ASFContext</name> <modifier>*</modifier></type><name>asf</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>is_streamed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><call><name>asf_write_header</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>put_payload_parsing_info</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name></type> <name>sendtime</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>duration</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>nb_payloads</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>padsize</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ASFContext</name> <modifier>*</modifier></type><name>asf</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ppi_size</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>start</name> <init>= <expr><call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>iLengthTypeFlags</name> <init>= <expr><name>ASF_PPI_LENGTH_TYPE_FLAGS</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>padsize</name> <operator>-=</operator> <name>PACKET_HEADER_MIN_SIZE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>asf</name><operator>-&gt;</operator><name>multi_payloads_present</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>padsize</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>padsize</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>ASF_PACKET_ERROR_CORRECTION_FLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ASF_PACKET_ERROR_CORRECTION_DATA_SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name><name>asf</name><operator>-&gt;</operator><name>multi_payloads_present</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>iLengthTypeFlags</name> <operator>|=</operator> <name>ASF_PPI_FLAG_MULTIPLE_PAYLOADS_PRESENT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>padsize</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>padsize</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>iLengthTypeFlags</name> <operator>|=</operator> <name>ASF_PPI_FLAG_PADDING_LENGTH_FIELD_IS_BYTE</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>iLengthTypeFlags</name> <operator>|=</operator> <name>ASF_PPI_FLAG_PADDING_LENGTH_FIELD_IS_WORD</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>iLengthTypeFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>ASF_PPI_PROPERTY_FLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>iLengthTypeFlags</name> <operator>&amp;</operator> <name>ASF_PPI_FLAG_PADDING_LENGTH_FIELD_IS_WORD</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>avio_wl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>padsize</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>iLengthTypeFlags</name> <operator>&amp;</operator> <name>ASF_PPI_FLAG_PADDING_LENGTH_FIELD_IS_BYTE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>padsize</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>avio_wl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>sendtime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>duration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>asf</name><operator>-&gt;</operator><name>multi_payloads_present</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>nb_payloads</name> <operator>|</operator> <name>ASF_PAYLOAD_FLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ppi_size</name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>start</name></expr>;</expr_stmt>

<return>return <expr><name>ppi_size</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>flush_packet</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ASFContext</name> <modifier>*</modifier></type><name>asf</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>packet_hdr_size</name></decl>, <decl><type ref="prev"/><name>packet_filled_size</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>asf</name><operator>-&gt;</operator><name>packet_timestamp_end</name></name> <operator>&gt;=</operator> <name><name>asf</name><operator>-&gt;</operator><name>packet_timestamp_start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>asf</name><operator>-&gt;</operator><name>is_streamed</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>put_chunk</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0x4424</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>packet_size</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>packet_hdr_size</name> <operator>=</operator> <call><name>put_payload_parsing_info</name><argument_list>(<argument><expr><name>s</name></expr></argument>,

<argument><expr><name><name>asf</name><operator>-&gt;</operator><name>packet_timestamp_start</name></name></expr></argument>,

<argument><expr><name><name>asf</name><operator>-&gt;</operator><name>packet_timestamp_end</name></name> <operator>-</operator> <name><name>asf</name><operator>-&gt;</operator><name>packet_timestamp_start</name></name></expr></argument>,

<argument><expr><name><name>asf</name><operator>-&gt;</operator><name>packet_nb_payloads</name></name></expr></argument>,

<argument><expr><name><name>asf</name><operator>-&gt;</operator><name>packet_size_left</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>packet_filled_size</name> <operator>=</operator> <name><name>asf</name><operator>-&gt;</operator><name>packet_size</name></name> <operator>-</operator> <name><name>asf</name><operator>-&gt;</operator><name>packet_size_left</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>packet_hdr_size</name> <operator>&lt;=</operator> <name><name>asf</name><operator>-&gt;</operator><name>packet_size_left</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>asf</name><operator>-&gt;</operator><name>packet_buf</name></name> <operator>+</operator> <name>packet_filled_size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>asf</name><operator>-&gt;</operator><name>packet_size_left</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name><name>asf</name><operator>-&gt;</operator><name>packet_buf</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>packet_size</name></name> <operator>-</operator> <name>packet_hdr_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_write_marker</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>AV_NOPTS_VALUE</name></expr></argument>, <argument><expr><name>AVIO_DATA_MARKER_FLUSH_POINT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>nb_packets</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>packet_nb_payloads</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>packet_timestamp_start</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>packet_timestamp_end</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ffio_init_context</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>asf</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name><name>asf</name><operator>-&gt;</operator><name>packet_buf</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>packet_size</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>put_payload_header</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>ASFStream</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>,

<parameter><decl><type><name>int64_t</name></type> <name>presentation_time</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>m_obj_size</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>m_obj_offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>payload_len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ASFContext</name> <modifier>*</modifier></type><name>asf</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><operator>&amp;</operator><name><name>asf</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>val</name></decl>;</decl_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <name><name>stream</name><operator>-&gt;</operator><name>num</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>AV_PKT_FLAG_KEY</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>val</name> <operator>|=</operator> <name>ASF_PL_FLAG_KEY_FRAME</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>stream</name><operator>-&gt;</operator><name>seq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>m_obj_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>ASF_PAYLOAD_REPLICATED_DATA_LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>m_obj_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator> <name>presentation_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>asf</name><operator>-&gt;</operator><name>multi_payloads_present</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avio_wl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>payload_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>put_frame</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>ASFStream</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>avst</name></decl></parameter>,

<parameter><decl><type><name>int64_t</name></type> <name>timestamp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>m_obj_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ASFContext</name> <modifier>*</modifier></type><name>asf</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>m_obj_offset</name></decl>, <decl><type ref="prev"/><name>payload_len</name></decl>, <decl><type ref="prev"/><name>frag_len1</name></decl>;</decl_stmt>

<expr_stmt><expr><name>m_obj_offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>m_obj_offset</name> <operator>&lt;</operator> <name>m_obj_size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>payload_len</name> <operator>=</operator> <name>m_obj_size</name> <operator>-</operator> <name>m_obj_offset</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>asf</name><operator>-&gt;</operator><name>packet_timestamp_start</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>multi_payload_constant</name> <init>= <expr><operator>(</operator><name><name>asf</name><operator>-&gt;</operator><name>packet_size</name></name> <operator>-</operator> <name>MULTI_PAYLOAD_HEADERS</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>multi_payloads_present</name></name> <operator>=</operator> <operator>(</operator><name>payload_len</name> <operator>&lt;</operator> <name>multi_payload_constant</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>packet_size_left</name></name> <operator>=</operator> <name><name>asf</name><operator>-&gt;</operator><name>packet_size</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>asf</name><operator>-&gt;</operator><name>multi_payloads_present</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>frag_len1</name> <operator>=</operator> <name>multi_payload_constant</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>frag_len1</name> <operator>=</operator> <name><name>asf</name><operator>-&gt;</operator><name>packet_size</name></name> <operator>-</operator> <name>SINGLE_PAYLOAD_HEADERS</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>packet_timestamp_start</name></name> <operator>=</operator> <name>timestamp</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>frag_len1</name> <operator>=</operator> <name><name>asf</name><operator>-&gt;</operator><name>packet_size_left</name></name> <operator>-</operator>

<name>PAYLOAD_HEADER_SIZE_MULTIPLE_PAYLOADS</name> <operator>-</operator>

<name>PACKET_HEADER_MIN_SIZE</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>frag_len1</name> <operator>&lt;</operator> <name>payload_len</name> <operator>&amp;&amp;</operator>

<name><name>avst</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>flush_packet</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>asf</name><operator>-&gt;</operator><name>packet_timestamp_start</name></name> <operator>&gt;</operator> <name>INT64_MAX</name> <operator>-</operator> <name>UINT16_MAX</name> <operator>||</operator>

<name>timestamp</name> <operator>&gt;</operator> <name><name>asf</name><operator>-&gt;</operator><name>packet_timestamp_start</name></name> <operator>+</operator> <name>UINT16_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>flush_packet</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>frag_len1</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>payload_len</name> <operator>&gt;</operator> <name>frag_len1</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>payload_len</name> <operator>=</operator> <name>frag_len1</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>payload_len</name> <operator>==</operator> <operator>(</operator><name>frag_len1</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>payload_len</name> <operator>=</operator> <name>frag_len1</name> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<expr_stmt><expr><call><name>put_payload_header</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>, <argument><expr><name>timestamp</name> <operator>+</operator> <name>PREROLL_TIME</name></expr></argument>,

<argument><expr><name>m_obj_size</name></expr></argument>, <argument><expr><name>m_obj_offset</name></expr></argument>, <argument><expr><name>payload_len</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>asf</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>payload_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>asf</name><operator>-&gt;</operator><name>multi_payloads_present</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>packet_size_left</name></name> <operator>-=</operator> <operator>(</operator><name>payload_len</name> <operator>+</operator> <name>PAYLOAD_HEADER_SIZE_MULTIPLE_PAYLOADS</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>packet_size_left</name></name> <operator>-=</operator> <operator>(</operator><name>payload_len</name> <operator>+</operator> <name>PAYLOAD_HEADER_SIZE_SINGLE_PAYLOAD</name><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>packet_timestamp_end</name></name> <operator>=</operator> <name>timestamp</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>packet_nb_payloads</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>payload_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>m_obj_offset</name> <operator>+=</operator> <name>payload_len</name></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>payload_len</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>asf</name><operator>-&gt;</operator><name>multi_payloads_present</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>flush_packet</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>asf</name><operator>-&gt;</operator><name>packet_size_left</name></name> <operator>&lt;=</operator> <operator>(</operator><name>PAYLOAD_HEADER_SIZE_MULTIPLE_PAYLOADS</name> <operator>+</operator> <name>PACKET_HEADER_MIN_SIZE</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>flush_packet</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>asf</name><operator>-&gt;</operator><name>packet_nb_payloads</name></name> <operator>==</operator> <name>ASF_PAYLOADS_PER_PACKET</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>flush_packet</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>seq</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>update_index</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>start_sec</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>packet_number</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>packet_count</name></decl></parameter>,

<parameter><decl><type><name>uint64_t</name></type> <name>packet_offset</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ASFContext</name> <modifier>*</modifier></type><name>asf</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>start_sec</name> <operator>&gt;</operator> <name><name>asf</name><operator>-&gt;</operator><name>next_start_sec</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>asf</name><operator>-&gt;</operator><name>next_start_sec</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>next_packet_number</name></name> <operator>=</operator> <name>packet_number</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>next_packet_count</name></name> <operator>=</operator> <name>packet_count</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>next_packet_offset</name></name> <operator>=</operator> <name>packet_offset</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>start_sec</name> <operator>&gt;</operator> <name><name>asf</name><operator>-&gt;</operator><name>nb_index_memory_alloc</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>nb_index_memory_alloc</name></name> <operator>=</operator> <operator>(</operator><name>start_sec</name> <operator>+</operator> <name>ASF_INDEX_BLOCK</name><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>ASF_INDEX_BLOCK</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>av_reallocp_array</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>asf</name><operator>-&gt;</operator><name>index_ptr</name></name></expr></argument>,

<argument><expr><name><name>asf</name><operator>-&gt;</operator><name>nb_index_memory_alloc</name></name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>asf</name><operator>-&gt;</operator><name>index_ptr</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>nb_index_memory_alloc</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>asf</name><operator>-&gt;</operator><name>next_start_sec</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>start_sec</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>index_ptr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>packet_number</name> <operator>=</operator> <name><name>asf</name><operator>-&gt;</operator><name>next_packet_number</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>index_ptr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>packet_count</name> <operator>=</operator> <name><name>asf</name><operator>-&gt;</operator><name>next_packet_count</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>index_ptr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>send_time</name> <operator>=</operator> <name><name>asf</name><operator>-&gt;</operator><name>next_start_sec</name></name> <operator>*</operator> <call><name>INT64_C</name><argument_list>(<argument><expr><literal type="number">10000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>index_ptr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>offset</name> <operator>=</operator> <name><name>asf</name><operator>-&gt;</operator><name>next_packet_offset</name></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>maximum_packet</name></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>asf</name><operator>-&gt;</operator><name>maximum_packet</name></name></expr></argument>, <argument><expr><name>packet_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>next_packet_number</name></name> <operator>=</operator> <name>packet_number</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>next_packet_count</name></name> <operator>=</operator> <name>packet_count</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>next_packet_offset</name></name> <operator>=</operator> <name>packet_offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>next_start_sec</name></name> <operator>=</operator> <name>start_sec</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>asf_write_packet</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ASFContext</name> <modifier>*</modifier></type><name>asf</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ASFStream</name> <modifier>*</modifier></type><name>stream</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodecParameters</name> <modifier>*</modifier></type><name>par</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>packet_number</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>pts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>start_sec</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><name><name>pkt</name><operator>-&gt;</operator><name>flags</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>offset</name> <init>= <expr><call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>par</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name><name>pkt</name><operator>-&gt;</operator><name>stream_index</name></name></expr>]</index></name><operator>-&gt;</operator><name>codecpar</name></expr>;</expr_stmt>

<expr_stmt><expr><name>stream</name> <operator>=</operator> <operator>&amp;</operator><name><name>asf</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name><name>pkt</name><operator>-&gt;</operator><name>stream_index</name></name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>par</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>flags</name> <operator>&amp;=</operator> <operator>~</operator><name>AV_PKT_FLAG_KEY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pts</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name></expr> </then><else>: <expr><name><name>pkt</name><operator>-&gt;</operator><name>dts</name></name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>pts</name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><call><name><name>pts</name> <argument_list type="generic">&lt; <argument><expr><operator>-</operator> <name>PREROLL_TIME</name>

<operator>||</operator> <name>pts</name></expr></argument> &gt;</argument_list></name> <argument_list>(<argument><expr><name>INT_MAX</name><operator>-</operator><literal type="number">3</literal></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">10000LL</literal> <operator>*</operator> <name>ASF_INDEXED_INTERVAL</name> <operator>-</operator> <name>PREROLL_TIME</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"input pts %"</literal><name>PRId64</name><literal type="string">" is invalid\n"</literal></expr></argument>, <argument><expr><name>pts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pts</name> <operator>*=</operator> <literal type="number">10000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>duration</name></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>asf</name><operator>-&gt;</operator><name>duration</name></name></expr></argument>, <argument><expr><name>pts</name> <operator>+</operator> <name><name>pkt</name><operator>-&gt;</operator><name>duration</name></name> <operator>*</operator> <literal type="number">10000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>packet_number</name> <operator>=</operator> <name><name>asf</name><operator>-&gt;</operator><name>nb_packets</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_frame</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name><name>pkt</name><operator>-&gt;</operator><name>stream_index</name></name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>dts</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>start_sec</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>PREROLL_TIME</name> <operator>*</operator> <literal type="number">10000</literal> <operator>+</operator> <name>pts</name> <operator>+</operator> <name>ASF_INDEXED_INTERVAL</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator>

<operator>/</operator> <name>ASF_INDEXED_INTERVAL</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name><name>asf</name><operator>-&gt;</operator><name>is_streamed</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>AV_PKT_FLAG_KEY</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>packet_count</name> <init>= <expr><name><name>asf</name><operator>-&gt;</operator><name>nb_packets</name></name> <operator>-</operator> <name>packet_number</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>update_index</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>start_sec</name></expr></argument>, <argument><expr><name>packet_number</name></expr></argument>, <argument><expr><name>packet_count</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>asf</name><operator>-&gt;</operator><name>end_sec</name></name> <operator>=</operator> <name>start_sec</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>asf_write_index</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ASFIndex</name> <modifier>*</modifier></type><name>index</name></decl></parameter>,

<parameter><decl><type><name>uint16_t</name></type> <name>max</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>count</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_put_guid</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ff_asf_simple_index_header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wl64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">24</literal> <operator>+</operator> <literal type="number">16</literal> <operator>+</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <operator>(</operator><literal type="number">4</literal> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_put_guid</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ff_asf_my_guid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wl64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>ASF_INDEXED_INTERVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>avio_wl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>index</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>packet_number</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>index</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>packet_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>asf_write_trailer</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ASFContext</name> <modifier>*</modifier></type><name>asf</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>file_size</name></decl>, <decl><type ref="prev"/><name>data_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>asf</name><operator>-&gt;</operator><name>pb</name><operator>.</operator><name>buf_ptr</name></name> <operator>&gt;</operator> <name><name>asf</name><operator>-&gt;</operator><name>pb</name><operator>.</operator><name>buffer</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>flush_packet</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>data_size</name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>asf</name><operator>-&gt;</operator><name>is_streamed</name></name> <operator>&amp;&amp;</operator> <name><name>asf</name><operator>-&gt;</operator><name>next_start_sec</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>update_index</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>asf</name><operator>-&gt;</operator><name>end_sec</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>asf_write_index</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>asf</name><operator>-&gt;</operator><name>index_ptr</name></name></expr></argument>, <argument><expr><name><name>asf</name><operator>-&gt;</operator><name>maximum_packet</name></name></expr></argument>, <argument><expr><name><name>asf</name><operator>-&gt;</operator><name>next_start_sec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>asf</name><operator>-&gt;</operator><name>is_streamed</name></name> <operator>||</operator> <operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name><operator>-&gt;</operator><name>seekable</name></name> <operator>&amp;</operator> <name>AVIO_SEEKABLE_NORMAL</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>put_chunk</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0x4524</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>file_size</name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>asf_write_header1</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>file_size</name></expr></argument>, <argument><expr><name>data_size</name> <operator>-</operator> <name><name>asf</name><operator>-&gt;</operator><name>data_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>asf</name><operator>-&gt;</operator><name>index_ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>asf_options</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"packet_size"</literal></expr>, <expr><literal type="string">"Packet size"</literal></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>ASFContext</name></expr></argument>, <argument><expr><name>packet_size</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">3200</literal></expr>}</block></expr>, <expr><name>PACKET_SIZE_MIN</name></expr>, <expr><name>PACKET_SIZE_MAX</name></expr>, <expr><name>AV_OPT_FLAG_ENCODING_PARAM</name></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_ASF_MUXER</name></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>asf_muxer_class</name> <init>= <expr><block>{

<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"ASF muxer"</literal></expr>,

<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,

<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>asf_options</name></expr>,

<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVOutputFormat</name></type> <name>ff_asf_muxer</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"asf"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"ASF (Advanced / Active Streaming Format)"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>mime_type</name> <operator>=</operator> <literal type="string">"video/x-ms-asf"</literal></expr>,

<expr><operator>.</operator><name>extensions</name> <operator>=</operator> <literal type="string">"asf,wmv,wma"</literal></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ASFContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>audio_codec</name> <operator>=</operator> <name>AV_CODEC_ID_WMAV2</name></expr>,

<expr><operator>.</operator><name>video_codec</name> <operator>=</operator> <name>AV_CODEC_ID_MSMPEG4V3</name></expr>,

<expr><operator>.</operator><name>write_header</name> <operator>=</operator> <name>asf_write_header</name></expr>,

<expr><operator>.</operator><name>write_packet</name> <operator>=</operator> <name>asf_write_packet</name></expr>,

<expr><operator>.</operator><name>write_trailer</name> <operator>=</operator> <name>asf_write_trailer</name></expr>,

<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>AVFMT_GLOBALHEADER</name></expr>,

<expr><operator>.</operator><name>codec_tag</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>AVCodecTag</name> <operator>*</operator> <specifier>const</specifier> <index>[]</index><operator>)</operator> <block>{

<expr><name>codec_asf_bmp_tags</name></expr>, <expr><name>ff_codec_bmp_tags</name></expr>, <expr><name>ff_codec_wav_tags</name></expr>, <expr><literal type="number">0</literal></expr>

}</block></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>asf_muxer_class</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_ASF_STREAM_MUXER</name></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>asf_stream_muxer_class</name> <init>= <expr><block>{

<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"ASF stream muxer"</literal></expr>,

<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,

<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>asf_options</name></expr>,

<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVOutputFormat</name></type> <name>ff_asf_stream_muxer</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"asf_stream"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"ASF (Advanced / Active Streaming Format)"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>mime_type</name> <operator>=</operator> <literal type="string">"video/x-ms-asf"</literal></expr>,

<expr><operator>.</operator><name>extensions</name> <operator>=</operator> <literal type="string">"asf,wmv,wma"</literal></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ASFContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>audio_codec</name> <operator>=</operator> <name>AV_CODEC_ID_WMAV2</name></expr>,

<expr><operator>.</operator><name>video_codec</name> <operator>=</operator> <name>AV_CODEC_ID_MSMPEG4V3</name></expr>,

<expr><operator>.</operator><name>write_header</name> <operator>=</operator> <name>asf_write_stream_header</name></expr>,

<expr><operator>.</operator><name>write_packet</name> <operator>=</operator> <name>asf_write_packet</name></expr>,

<expr><operator>.</operator><name>write_trailer</name> <operator>=</operator> <name>asf_write_trailer</name></expr>,

<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>AVFMT_GLOBALHEADER</name></expr>,

<expr><operator>.</operator><name>codec_tag</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>AVCodecTag</name> <operator>*</operator> <specifier>const</specifier> <index>[]</index><operator>)</operator> <block>{

<expr><name>codec_asf_bmp_tags</name></expr>, <expr><name>ff_codec_bmp_tags</name></expr>, <expr><name>ff_codec_wav_tags</name></expr>, <expr><literal type="number">0</literal></expr>

}</block></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>asf_stream_muxer_class</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
