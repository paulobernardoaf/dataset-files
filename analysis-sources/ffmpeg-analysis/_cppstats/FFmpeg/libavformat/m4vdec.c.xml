<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavformat\m4vdec.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avformat.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rawdec.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VOS_STARTCODE</name></cpp:macro> <cpp:value>0x1B0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USER_DATA_STARTCODE</name></cpp:macro> <cpp:value>0x1B2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GOP_STARTCODE</name></cpp:macro> <cpp:value>0x1B3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VISUAL_OBJ_STARTCODE</name></cpp:macro> <cpp:value>0x1B5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VOP_STARTCODE</name></cpp:macro> <cpp:value>0x1B6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SLICE_STARTCODE</name></cpp:macro> <cpp:value>0x1B7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXT_STARTCODE</name></cpp:macro> <cpp:value>0x1B8</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mpeg4video_probe</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVProbeData</name> <modifier>*</modifier></type><name>probe_packet</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>temp_buffer</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>VO</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>VOL</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>VOP</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>VISO</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>res_main</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>probe_packet</name><operator>-&gt;</operator><name>buf_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>temp_buffer</name> <operator>=</operator> <operator>(</operator><name>temp_buffer</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <name><name>probe_packet</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>temp_buffer</name> <operator>&amp;</operator> <literal type="number">0xfffffe00</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>temp_buffer</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>temp_buffer</name> <operator>==</operator> <name>VOP_STARTCODE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>VOP</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>temp_buffer</name> <operator>==</operator> <name>VISUAL_OBJ_STARTCODE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>VISO</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>temp_buffer</name> <operator>&gt;=</operator> <literal type="number">0x100</literal> <operator>&amp;&amp;</operator> <name>temp_buffer</name> <operator>&lt;</operator> <literal type="number">0x120</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>VO</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>temp_buffer</name> <operator>&gt;=</operator> <literal type="number">0x120</literal> <operator>&amp;&amp;</operator> <name>temp_buffer</name> <operator>&lt;</operator> <literal type="number">0x130</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>VOL</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>temp_buffer</name> <operator>==</operator> <name>SLICE_STARTCODE</name> <operator>||</operator> <name>temp_buffer</name> <operator>==</operator> <name>EXT_STARTCODE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>res_main</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><literal type="number">0x1AF</literal> <operator>&lt;</operator> <name>temp_buffer</name> <operator>&amp;&amp;</operator> <name>temp_buffer</name> <operator>&lt;</operator> <literal type="number">0x1B7</literal><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>!</operator><operator>(</operator><literal type="number">0x1B9</literal> <operator>&lt;</operator> <name>temp_buffer</name> <operator>&amp;&amp;</operator> <name>temp_buffer</name> <operator>&lt;</operator> <literal type="number">0x1C4</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>res</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>res_main</name> <operator>&amp;&amp;</operator> <literal type="number">2</literal><operator>*</operator><name>res_main</name> <operator>&lt;</operator> <name>VOP</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>res</name> <operator>+=</operator> <name>res_main</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>VOP</name> <operator>&gt;=</operator> <name>VISO</name> <operator>&amp;&amp;</operator> <name>VOP</name> <operator>&gt;=</operator> <name>VOL</name> <operator>&amp;&amp;</operator> <name>VO</name> <operator>&gt;=</operator> <name>VOL</name> <operator>&amp;&amp;</operator> <name>VOL</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>res</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><ternary><condition><expr><name>VOP</name><operator>+</operator><name>VO</name> <operator>&gt;</operator> <literal type="number">4</literal></expr> ?</condition><then> <expr><name>AVPROBE_SCORE_EXTENSION</name></expr> </then><else>: <expr><name>AVPROBE_SCORE_EXTENSION</name><operator>/</operator><literal type="number">2</literal></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>VOP</name> <operator>&gt;=</operator> <name>VISO</name> <operator>&amp;&amp;</operator> <name>VOP</name> <operator>&gt;=</operator> <name>VOL</name> <operator>&amp;&amp;</operator> <name>VO</name> <operator>&gt;=</operator> <name>VOL</name> <operator>&amp;&amp;</operator> <name>VOL</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>VOP</name><operator>+</operator><name>VO</name> <operator>&gt;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVPROBE_SCORE_EXTENSION</name><operator>/</operator><literal type="number">10</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<macro><name>FF_DEF_RAWVIDEO_DEMUXER2</name><argument_list>(<argument>m4v</argument>, <argument><literal type="string">"raw MPEG-4 video"</literal></argument>, <argument>mpeg4video_probe</argument>, <argument><literal type="string">"m4v"</literal></argument>,

<argument>AV_CODEC_ID_MPEG4</argument>, <argument>AVFMT_GENERIC_INDEX | AVFMT_TS_DISCONT</argument>)</argument_list></macro>

</unit>
