<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavformat\wtvdec.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/channel_layout.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intfloat.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/time_internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avformat.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"wtv.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpegts.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRI_PRETTY_GUID</name></cpp:macro> <cpp:value>"%08"PRIx32"-%04"PRIx16"-%04"PRIx16"-%02x%02x%02x%02x%02x%02x%02x%02x"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARG_PRETTY_GUID</name><parameter_list>(<parameter><type><name>g</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>AV_RL32(g),AV_RL16(g+4),AV_RL16(g+6),g[8],g[9],g[10],g[11],g[12],g[13],g[14],g[15]</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LEN_PRETTY_GUID</name></cpp:macro> <cpp:value>34</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>WtvFile</name> <block>{

<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb_filesystem</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>sector_bits</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>sectors</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>nb_sectors</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>error</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>position</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>length</name></decl>;</decl_stmt>

}</block></struct></type> <name>WtvFile</name>;</typedef>

<function><type><specifier>static</specifier> <name>int64_t</name></type> <name>seek_by_sector</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>sector</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>offset</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>avio_seek</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>(</operator><name>sector</name> <operator>&lt;&lt;</operator> <name>WTV_SECTOR_BITS</name><operator>)</operator> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>wtvfile_read_packet</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>WtvFile</name> <modifier>*</modifier></type><name>wf</name> <init>= <expr><name>opaque</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>wf</name><operator>-&gt;</operator><name>pb_filesystem</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nread</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wf</name><operator>-&gt;</operator><name>error</name></name> <operator>||</operator> <name><name>pb</name><operator>-&gt;</operator><name>error</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wf</name><operator>-&gt;</operator><name>position</name></name> <operator>&gt;=</operator> <name><name>wf</name><operator>-&gt;</operator><name>length</name></name> <operator>||</operator> <call><name>avio_feof</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_EOF</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>buf_size</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>buf_size</name></expr></argument>, <argument><expr><name><name>wf</name><operator>-&gt;</operator><name>length</name></name> <operator>-</operator> <name><name>wf</name><operator>-&gt;</operator><name>position</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while<condition>(<expr><name>nread</name> <operator>&lt;</operator> <name>buf_size</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>remaining_in_sector</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>wf</name><operator>-&gt;</operator><name>sector_bits</name></name><operator>)</operator> <operator>-</operator> <operator>(</operator><name><name>wf</name><operator>-&gt;</operator><name>position</name></name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>wf</name><operator>-&gt;</operator><name>sector_bits</name></name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>read_request</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>buf_size</name> <operator>-</operator> <name>nread</name></expr></argument>, <argument><expr><name>remaining_in_sector</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>avio_read</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>read_request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>nread</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wf</name><operator>-&gt;</operator><name>position</name></name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <name>remaining_in_sector</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>wf</name><operator>-&gt;</operator><name>position</name></name> <operator>&gt;&gt;</operator> <name><name>wf</name><operator>-&gt;</operator><name>sector_bits</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name><name>wf</name><operator>-&gt;</operator><name>nb_sectors</name></name> <operator>||</operator>

<operator>(</operator><name><name>wf</name><operator>-&gt;</operator><name>sectors</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>wf</name><operator>-&gt;</operator><name>sectors</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>wf</name><operator>-&gt;</operator><name>sector_bits</name></name> <operator>-</operator> <name>WTV_SECTOR_BITS</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator>

<call><name>seek_by_sector</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>wf</name><operator>-&gt;</operator><name>sectors</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>wf</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<return>return <expr><ternary><condition><expr><name>nread</name></expr> ?</condition><then> <expr><name>nread</name></expr> </then><else>: <expr><name>n</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64_t</name></type> <name>wtvfile_seek</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>whence</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>WtvFile</name> <modifier>*</modifier></type><name>wf</name> <init>= <expr><name>opaque</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>wf</name><operator>-&gt;</operator><name>pb_filesystem</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>whence</name> <operator>==</operator> <name>AVSEEK_SIZE</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>wf</name><operator>-&gt;</operator><name>length</name></name></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>whence</name> <operator>==</operator> <name>SEEK_CUR</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>wf</name><operator>-&gt;</operator><name>position</name></name> <operator>+</operator> <name>offset</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>whence</name> <operator>==</operator> <name>SEEK_END</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>wf</name><operator>-&gt;</operator><name>length</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>wf</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <name>offset</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>offset</name> <operator>&gt;=</operator> <name><name>wf</name><operator>-&gt;</operator><name>length</name></name> <operator>||</operator>

<call><name>seek_by_sector</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>wf</name><operator>-&gt;</operator><name>sectors</name><index>[<expr><name>offset</name> <operator>&gt;&gt;</operator> <name><name>wf</name><operator>-&gt;</operator><name>sector_bits</name></name></expr>]</index></name></expr></argument>,

<argument><expr><name>offset</name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>wf</name><operator>-&gt;</operator><name>sector_bits</name></name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wf</name><operator>-&gt;</operator><name>position</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>

<return>return <expr><name>offset</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>read_ints</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>total</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>data</name><index>[<expr><name>total</name></expr>]</index></name> <operator>=</operator> <call><name>avio_rl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>total</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>total</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>AVIOContext</name> <modifier>*</modifier></type> <name>wtvfile_open_sector</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>first_sector</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>depth</name></decl></parameter>, <parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WtvFile</name> <modifier>*</modifier></type><name>wf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buffer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>size</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>seek_by_sector</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>first_sector</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>wf</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>WtvFile</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>wf</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>depth</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>wf</name><operator>-&gt;</operator><name>sectors</name></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>wf</name><operator>-&gt;</operator><name>sectors</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>wf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>wf</name><operator>-&gt;</operator><name>sectors</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>first_sector</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wf</name><operator>-&gt;</operator><name>nb_sectors</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>depth</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>wf</name><operator>-&gt;</operator><name>sectors</name></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name>WTV_SECTOR_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>wf</name><operator>-&gt;</operator><name>sectors</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>wf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>wf</name><operator>-&gt;</operator><name>nb_sectors</name></name> <operator>=</operator> <call><name>read_ints</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name><name>wf</name><operator>-&gt;</operator><name>sectors</name></name></expr></argument>, <argument><expr><name>WTV_SECTOR_SIZE</name> <operator>/</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>depth</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>sectors1</name><index>[<expr><name>WTV_SECTOR_SIZE</name> <operator>/</operator> <literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nb_sectors1</name> <init>= <expr><call><name>read_ints</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>sectors1</name></expr></argument>, <argument><expr><name>WTV_SECTOR_SIZE</name> <operator>/</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>wf</name><operator>-&gt;</operator><name>sectors</name></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name>nb_sectors1</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>WTV_SECTOR_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>wf</name><operator>-&gt;</operator><name>sectors</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>wf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>wf</name><operator>-&gt;</operator><name>nb_sectors</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_sectors1</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>seek_by_sector</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name><name>sectors1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>wf</name><operator>-&gt;</operator><name>nb_sectors</name></name> <operator>+=</operator> <call><name>read_ints</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name><name>wf</name><operator>-&gt;</operator><name>sectors</name></name> <operator>+</operator> <name>i</name> <operator>*</operator> <name>WTV_SECTOR_SIZE</name> <operator>/</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>WTV_SECTOR_SIZE</name> <operator>/</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"unsupported file allocation table depth (0x%x)\n"</literal></expr></argument>, <argument><expr><name>depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>wf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>wf</name><operator>-&gt;</operator><name>sector_bits</name></name> <operator>=</operator> <ternary><condition><expr><name>length</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1ULL</literal><operator>&lt;&lt;</operator><literal type="number">63</literal><operator>)</operator></expr> ?</condition><then> <expr><name>WTV_SECTOR_BITS</name></expr> </then><else>: <expr><name>WTV_BIGSECTOR_BITS</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>wf</name><operator>-&gt;</operator><name>nb_sectors</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wf</name><operator>-&gt;</operator><name>sectors</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>avio_size</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>wf</name><operator>-&gt;</operator><name>sectors</name><index>[<expr><name><name>wf</name><operator>-&gt;</operator><name>nb_sectors</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <name>WTV_SECTOR_BITS</name> <operator>&gt;</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"truncated file\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>length</name> <operator>&amp;=</operator> <literal type="number">0xFFFFFFFFFFFF</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>length</name> <operator>&gt;</operator> <operator>(</operator><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>wf</name><operator>-&gt;</operator><name>nb_sectors</name></name> <operator>&lt;&lt;</operator> <name><name>wf</name><operator>-&gt;</operator><name>sector_bits</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"reported file length (0x%"</literal><name>PRIx64</name><literal type="string">") exceeds number of available sectors (0x%"</literal><name>PRIx64</name><literal type="string">")\n"</literal></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>wf</name><operator>-&gt;</operator><name>nb_sectors</name></name> <operator>&lt;&lt;</operator> <name><name>wf</name><operator>-&gt;</operator><name>sector_bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>length</name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>wf</name><operator>-&gt;</operator><name>nb_sectors</name></name> <operator>&lt;&lt;</operator> <name><name>wf</name><operator>-&gt;</operator><name>sector_bits</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>wf</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <name>length</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wf</name><operator>-&gt;</operator><name>position</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>seek_by_sector</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name><name>wf</name><operator>-&gt;</operator><name>sectors</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wf</name><operator>-&gt;</operator><name>sectors</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>wf</name><operator>-&gt;</operator><name>pb_filesystem</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>buffer</name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>wf</name><operator>-&gt;</operator><name>sector_bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buffer</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wf</name><operator>-&gt;</operator><name>sectors</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pb</name> <operator>=</operator> <call><name>avio_alloc_context</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>wf</name><operator>-&gt;</operator><name>sector_bits</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>wf</name></expr></argument>,

<argument><expr><name>wtvfile_read_packet</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>wtvfile_seek</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pb</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wf</name><operator>-&gt;</operator><name>sectors</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>pb</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>AVIOContext</name> <modifier>*</modifier></type> <name>wtvfile_open2</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>filename_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf_end</name> <init>= <expr><name>buf</name> <operator>+</operator> <name>buf_size</name></expr></init></decl>;</decl_stmt>

<while>while<condition>(<expr><name>buf</name> <operator>+</operator> <literal type="number">48</literal> <operator>&lt;=</operator> <name>buf_end</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>dir_length</name></decl>, <decl><type ref="prev"/><name>name_size</name></decl>, <decl><type ref="prev"/><name>first_sector</name></decl>, <decl><type ref="prev"/><name>depth</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>file_length</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ff_guidcmp</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>ff_dir_entry_guid</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"unknown guid "</literal><name>FF_PRI_GUID</name><literal type="string">", expected dir_entry_guid; "</literal>

<literal type="string">"remaining directory entries ignored\n"</literal></expr></argument>, <argument><expr><call><name>FF_ARG_GUID</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>dir_length</name> <operator>=</operator> <call><name>AV_RL16</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>file_length</name> <operator>=</operator> <call><name>AV_RL64</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>name_size</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <call><name>AV_RL32</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>name_size</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"bad filename length, remaining directory entries ignored\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">48</literal> <operator>+</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name>name_size</name> <operator>&gt;</operator> <name>buf_end</name> <operator>-</operator> <name>buf</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"filename exceeds buffer size; remaining directory entries ignored\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>first_sector</name> <operator>=</operator> <call><name>AV_RL32</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">40</literal> <operator>+</operator> <name>name_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>depth</name> <operator>=</operator> <call><name>AV_RL32</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">44</literal> <operator>+</operator> <name>name_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <name>buf</name> <operator>+</operator> <literal type="number">40</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>name_size</name> <operator>&gt;=</operator> <name>filename_size</name> <operator>&amp;&amp;</operator>

<operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>filename_size</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<operator>(</operator><name>name_size</name> <operator>&lt;</operator> <name>filename_size</name> <operator>+</operator> <literal type="number">2</literal> <operator>||</operator> <operator>!</operator><call><name>AV_RN16</name><argument_list>(<argument><expr><name>name</name> <operator>+</operator> <name>filename_size</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>wtvfile_open_sector</name><argument_list>(<argument><expr><name>first_sector</name></expr></argument>, <argument><expr><name>file_length</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>dir_length</name></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wtvfile_open</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>buf</name></type></parameter>, <parameter><type><name>buf_size</name></type></parameter>, <parameter><type><name>filename</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>wtvfile_open2(s, buf, buf_size, filename, sizeof(filename))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>wtvfile_close</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>WtvFile</name> <modifier>*</modifier></type><name>wf</name> <init>= <expr><name><name>pb</name><operator>-&gt;</operator><name>opaque</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wf</name><operator>-&gt;</operator><name>sectors</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pb</name><operator>-&gt;</operator><name>opaque</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pb</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_context_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<typedef>typedef <type><struct>struct <name>WtvStream</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>seen_data</name></decl>;</decl_stmt>

}</block></struct></type> <name>WtvStream</name>;</typedef>

<typedef>typedef <type><struct>struct <name>WtvContext</name> <block>{

<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int64_t</name></type> <name>epoch</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>pts</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int64_t</name></type> <name>last_valid_pts</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>AVIndexEntry</name> <modifier>*</modifier></type><name>index_entries</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nb_index_entries</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>index_entries_allocated_size</name></decl>;</decl_stmt>

}</block></struct></type> <name>WtvContext</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ff_asf_guid</name></type> <name>EVENTID_SubtitleSpanningEvent</name> <init>=

<expr><block>{<expr><literal type="number">0x48</literal></expr>,<expr><literal type="number">0xC0</literal></expr>,<expr><literal type="number">0xCE</literal></expr>,<expr><literal type="number">0x5D</literal></expr>,<expr><literal type="number">0xB9</literal></expr>,<expr><literal type="number">0xD0</literal></expr>,<expr><literal type="number">0x63</literal></expr>,<expr><literal type="number">0x41</literal></expr>,<expr><literal type="number">0x87</literal></expr>,<expr><literal type="number">0x2C</literal></expr>,<expr><literal type="number">0x4F</literal></expr>,<expr><literal type="number">0x32</literal></expr>,<expr><literal type="number">0x22</literal></expr>,<expr><literal type="number">0x3B</literal></expr>,<expr><literal type="number">0xE8</literal></expr>,<expr><literal type="number">0x8A</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ff_asf_guid</name></type> <name>EVENTID_LanguageSpanningEvent</name> <init>=

<expr><block>{<expr><literal type="number">0x6D</literal></expr>,<expr><literal type="number">0x66</literal></expr>,<expr><literal type="number">0x92</literal></expr>,<expr><literal type="number">0xE2</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x9C</literal></expr>,<expr><literal type="number">0x8D</literal></expr>,<expr><literal type="number">0x44</literal></expr>,<expr><literal type="number">0xAA</literal></expr>,<expr><literal type="number">0x8D</literal></expr>,<expr><literal type="number">0x78</literal></expr>,<expr><literal type="number">0x1A</literal></expr>,<expr><literal type="number">0x93</literal></expr>,<expr><literal type="number">0xFD</literal></expr>,<expr><literal type="number">0xC3</literal></expr>,<expr><literal type="number">0x95</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ff_asf_guid</name></type> <name>EVENTID_AudioDescriptorSpanningEvent</name> <init>=

<expr><block>{<expr><literal type="number">0x1C</literal></expr>,<expr><literal type="number">0xD4</literal></expr>,<expr><literal type="number">0x7B</literal></expr>,<expr><literal type="number">0x10</literal></expr>,<expr><literal type="number">0xDA</literal></expr>,<expr><literal type="number">0xA6</literal></expr>,<expr><literal type="number">0x91</literal></expr>,<expr><literal type="number">0x46</literal></expr>,<expr><literal type="number">0x83</literal></expr>,<expr><literal type="number">0x69</literal></expr>,<expr><literal type="number">0x11</literal></expr>,<expr><literal type="number">0xB2</literal></expr>,<expr><literal type="number">0xCD</literal></expr>,<expr><literal type="number">0xAA</literal></expr>,<expr><literal type="number">0x28</literal></expr>,<expr><literal type="number">0x8E</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ff_asf_guid</name></type> <name>EVENTID_CtxADescriptorSpanningEvent</name> <init>=

<expr><block>{<expr><literal type="number">0xE6</literal></expr>,<expr><literal type="number">0xA2</literal></expr>,<expr><literal type="number">0xB4</literal></expr>,<expr><literal type="number">0x3A</literal></expr>,<expr><literal type="number">0x47</literal></expr>,<expr><literal type="number">0x42</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x4B</literal></expr>,<expr><literal type="number">0x89</literal></expr>,<expr><literal type="number">0x6C</literal></expr>,<expr><literal type="number">0x30</literal></expr>,<expr><literal type="number">0xAF</literal></expr>,<expr><literal type="number">0xA5</literal></expr>,<expr><literal type="number">0xD2</literal></expr>,<expr><literal type="number">0x1C</literal></expr>,<expr><literal type="number">0x24</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ff_asf_guid</name></type> <name>EVENTID_CSDescriptorSpanningEvent</name> <init>=

<expr><block>{<expr><literal type="number">0xD9</literal></expr>,<expr><literal type="number">0x79</literal></expr>,<expr><literal type="number">0xE7</literal></expr>,<expr><literal type="number">0xEf</literal></expr>,<expr><literal type="number">0xF0</literal></expr>,<expr><literal type="number">0x97</literal></expr>,<expr><literal type="number">0x86</literal></expr>,<expr><literal type="number">0x47</literal></expr>,<expr><literal type="number">0x80</literal></expr>,<expr><literal type="number">0x0D</literal></expr>,<expr><literal type="number">0x95</literal></expr>,<expr><literal type="number">0xCF</literal></expr>,<expr><literal type="number">0x50</literal></expr>,<expr><literal type="number">0x5D</literal></expr>,<expr><literal type="number">0xDC</literal></expr>,<expr><literal type="number">0x66</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ff_asf_guid</name></type> <name>EVENTID_DVBScramblingControlSpanningEvent</name> <init>=

<expr><block>{<expr><literal type="number">0xC4</literal></expr>,<expr><literal type="number">0xE1</literal></expr>,<expr><literal type="number">0xD4</literal></expr>,<expr><literal type="number">0x4B</literal></expr>,<expr><literal type="number">0xA1</literal></expr>,<expr><literal type="number">0x90</literal></expr>,<expr><literal type="number">0x09</literal></expr>,<expr><literal type="number">0x41</literal></expr>,<expr><literal type="number">0x82</literal></expr>,<expr><literal type="number">0x36</literal></expr>,<expr><literal type="number">0x27</literal></expr>,<expr><literal type="number">0xF0</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x7D</literal></expr>,<expr><literal type="number">0xCC</literal></expr>,<expr><literal type="number">0x5B</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ff_asf_guid</name></type> <name>EVENTID_StreamIDSpanningEvent</name> <init>=

<expr><block>{<expr><literal type="number">0x68</literal></expr>,<expr><literal type="number">0xAB</literal></expr>,<expr><literal type="number">0xF1</literal></expr>,<expr><literal type="number">0xCA</literal></expr>,<expr><literal type="number">0x53</literal></expr>,<expr><literal type="number">0xE1</literal></expr>,<expr><literal type="number">0x41</literal></expr>,<expr><literal type="number">0x4D</literal></expr>,<expr><literal type="number">0xA6</literal></expr>,<expr><literal type="number">0xB3</literal></expr>,<expr><literal type="number">0xA7</literal></expr>,<expr><literal type="number">0xC9</literal></expr>,<expr><literal type="number">0x98</literal></expr>,<expr><literal type="number">0xDB</literal></expr>,<expr><literal type="number">0x75</literal></expr>,<expr><literal type="number">0xEE</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ff_asf_guid</name></type> <name>EVENTID_TeletextSpanningEvent</name> <init>=

<expr><block>{<expr><literal type="number">0x50</literal></expr>,<expr><literal type="number">0xD9</literal></expr>,<expr><literal type="number">0x99</literal></expr>,<expr><literal type="number">0x95</literal></expr>,<expr><literal type="number">0x33</literal></expr>,<expr><literal type="number">0x5F</literal></expr>,<expr><literal type="number">0x17</literal></expr>,<expr><literal type="number">0x46</literal></expr>,<expr><literal type="number">0xAF</literal></expr>,<expr><literal type="number">0x7C</literal></expr>,<expr><literal type="number">0x1E</literal></expr>,<expr><literal type="number">0x54</literal></expr>,<expr><literal type="number">0xB5</literal></expr>,<expr><literal type="number">0x10</literal></expr>,<expr><literal type="number">0xDA</literal></expr>,<expr><literal type="number">0xA3</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ff_asf_guid</name></type> <name>EVENTID_AudioTypeSpanningEvent</name> <init>=

<expr><block>{<expr><literal type="number">0xBE</literal></expr>,<expr><literal type="number">0xBF</literal></expr>,<expr><literal type="number">0x1C</literal></expr>,<expr><literal type="number">0x50</literal></expr>,<expr><literal type="number">0x49</literal></expr>,<expr><literal type="number">0xB8</literal></expr>,<expr><literal type="number">0xCE</literal></expr>,<expr><literal type="number">0x42</literal></expr>,<expr><literal type="number">0x9B</literal></expr>,<expr><literal type="number">0xE9</literal></expr>,<expr><literal type="number">0x3D</literal></expr>,<expr><literal type="number">0xB8</literal></expr>,<expr><literal type="number">0x69</literal></expr>,<expr><literal type="number">0xFB</literal></expr>,<expr><literal type="number">0x82</literal></expr>,<expr><literal type="number">0xB3</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ff_asf_guid</name></type> <name>mediasubtype_mpeg1payload</name> <init>=

<expr><block>{<expr><literal type="number">0x81</literal></expr>,<expr><literal type="number">0xEB</literal></expr>,<expr><literal type="number">0x36</literal></expr>,<expr><literal type="number">0xE4</literal></expr>,<expr><literal type="number">0x4F</literal></expr>,<expr><literal type="number">0x52</literal></expr>,<expr><literal type="number">0xCE</literal></expr>,<expr><literal type="number">0x11</literal></expr>,<expr><literal type="number">0x9F</literal></expr>,<expr><literal type="number">0x53</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x20</literal></expr>,<expr><literal type="number">0xAF</literal></expr>,<expr><literal type="number">0x0B</literal></expr>,<expr><literal type="number">0xA7</literal></expr>,<expr><literal type="number">0x70</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ff_asf_guid</name></type> <name>mediatype_mpeg2_sections</name> <init>=

<expr><block>{<expr><literal type="number">0x6C</literal></expr>,<expr><literal type="number">0x17</literal></expr>,<expr><literal type="number">0x5F</literal></expr>,<expr><literal type="number">0x45</literal></expr>,<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x4B</literal></expr>,<expr><literal type="number">0xCE</literal></expr>,<expr><literal type="number">0x47</literal></expr>,<expr><literal type="number">0x9A</literal></expr>,<expr><literal type="number">0xEF</literal></expr>,<expr><literal type="number">0x8C</literal></expr>,<expr><literal type="number">0xAE</literal></expr>,<expr><literal type="number">0xF7</literal></expr>,<expr><literal type="number">0x3D</literal></expr>,<expr><literal type="number">0xF7</literal></expr>,<expr><literal type="number">0xB5</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ff_asf_guid</name></type> <name>mediatype_mpeg2_pes</name> <init>=

<expr><block>{<expr><literal type="number">0x20</literal></expr>,<expr><literal type="number">0x80</literal></expr>,<expr><literal type="number">0x6D</literal></expr>,<expr><literal type="number">0xE0</literal></expr>,<expr><literal type="number">0x46</literal></expr>,<expr><literal type="number">0xDB</literal></expr>,<expr><literal type="number">0xCF</literal></expr>,<expr><literal type="number">0x11</literal></expr>,<expr><literal type="number">0xB4</literal></expr>,<expr><literal type="number">0xD1</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x80</literal></expr>,<expr><literal type="number">0x5F</literal></expr>,<expr><literal type="number">0x6C</literal></expr>,<expr><literal type="number">0xBB</literal></expr>,<expr><literal type="number">0xEA</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ff_asf_guid</name></type> <name>mediatype_mstvcaption</name> <init>=

<expr><block>{<expr><literal type="number">0x89</literal></expr>,<expr><literal type="number">0x8A</literal></expr>,<expr><literal type="number">0x8B</literal></expr>,<expr><literal type="number">0xB8</literal></expr>,<expr><literal type="number">0x49</literal></expr>,<expr><literal type="number">0xB0</literal></expr>,<expr><literal type="number">0x80</literal></expr>,<expr><literal type="number">0x4C</literal></expr>,<expr><literal type="number">0xAD</literal></expr>,<expr><literal type="number">0xCF</literal></expr>,<expr><literal type="number">0x58</literal></expr>,<expr><literal type="number">0x98</literal></expr>,<expr><literal type="number">0x98</literal></expr>,<expr><literal type="number">0x5E</literal></expr>,<expr><literal type="number">0x22</literal></expr>,<expr><literal type="number">0xC1</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ff_asf_guid</name></type> <name>mediasubtype_dvb_subtitle</name> <init>=

<expr><block>{<expr><literal type="number">0xC3</literal></expr>,<expr><literal type="number">0xCB</literal></expr>,<expr><literal type="number">0xFF</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0xB3</literal></expr>,<expr><literal type="number">0xD5</literal></expr>,<expr><literal type="number">0x71</literal></expr>,<expr><literal type="number">0x41</literal></expr>,<expr><literal type="number">0x90</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0xD4</literal></expr>,<expr><literal type="number">0xC6</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x69</literal></expr>,<expr><literal type="number">0x7F</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ff_asf_guid</name></type> <name>mediasubtype_teletext</name> <init>=

<expr><block>{<expr><literal type="number">0xE3</literal></expr>,<expr><literal type="number">0x76</literal></expr>,<expr><literal type="number">0x2A</literal></expr>,<expr><literal type="number">0xF7</literal></expr>,<expr><literal type="number">0x0A</literal></expr>,<expr><literal type="number">0xEB</literal></expr>,<expr><literal type="number">0xD0</literal></expr>,<expr><literal type="number">0x11</literal></expr>,<expr><literal type="number">0xAC</literal></expr>,<expr><literal type="number">0xE4</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0xC0</literal></expr>,<expr><literal type="number">0xCC</literal></expr>,<expr><literal type="number">0x16</literal></expr>,<expr><literal type="number">0xBA</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ff_asf_guid</name></type> <name>mediasubtype_dtvccdata</name> <init>=

<expr><block>{<expr><literal type="number">0xAA</literal></expr>,<expr><literal type="number">0xDD</literal></expr>,<expr><literal type="number">0x2A</literal></expr>,<expr><literal type="number">0xF5</literal></expr>,<expr><literal type="number">0xF0</literal></expr>,<expr><literal type="number">0x36</literal></expr>,<expr><literal type="number">0xF5</literal></expr>,<expr><literal type="number">0x43</literal></expr>,<expr><literal type="number">0x95</literal></expr>,<expr><literal type="number">0xEA</literal></expr>,<expr><literal type="number">0x6D</literal></expr>,<expr><literal type="number">0x86</literal></expr>,<expr><literal type="number">0x64</literal></expr>,<expr><literal type="number">0x84</literal></expr>,<expr><literal type="number">0x26</literal></expr>,<expr><literal type="number">0x2A</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ff_asf_guid</name></type> <name>mediasubtype_mpeg2_sections</name> <init>=

<expr><block>{<expr><literal type="number">0x79</literal></expr>,<expr><literal type="number">0x85</literal></expr>,<expr><literal type="number">0x9F</literal></expr>,<expr><literal type="number">0x4A</literal></expr>,<expr><literal type="number">0xF8</literal></expr>,<expr><literal type="number">0x6B</literal></expr>,<expr><literal type="number">0x92</literal></expr>,<expr><literal type="number">0x43</literal></expr>,<expr><literal type="number">0x8A</literal></expr>,<expr><literal type="number">0x6D</literal></expr>,<expr><literal type="number">0xD2</literal></expr>,<expr><literal type="number">0xDD</literal></expr>,<expr><literal type="number">0x09</literal></expr>,<expr><literal type="number">0xFA</literal></expr>,<expr><literal type="number">0x78</literal></expr>,<expr><literal type="number">0x61</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>read_probe</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVProbeData</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><ternary><condition><expr><call><name>ff_guidcmp</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>ff_wtv_guid</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>AVPROBE_SCORE_MAX</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>filetime_to_iso8601</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>value</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>time_t</name></type> <name>t</name> <init>= <expr><operator>(</operator><name>value</name> <operator>/</operator> <literal type="number">10000000LL</literal><operator>)</operator> <operator>-</operator> <literal type="number">11644473600LL</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>tmbuf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>tm</name> <init>= <expr><call><name>gmtime_r</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmbuf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tm</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strftime</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>, <argument><expr><literal type="string">"%Y-%m-%d %H:%M:%S"</literal></expr></argument>, <argument><expr><name>tm</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>crazytime_to_iso8601</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>value</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>time_t</name></type> <name>t</name> <init>= <expr><operator>(</operator><name>value</name> <operator>/</operator> <literal type="number">10000000LL</literal><operator>)</operator> <operator>-</operator> <literal type="number">719162LL</literal><operator>*</operator><literal type="number">86400LL</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>tmbuf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>tm</name> <init>= <expr><call><name>gmtime_r</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmbuf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tm</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strftime</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>, <argument><expr><literal type="string">"%Y-%m-%d %H:%M:%S"</literal></expr></argument>, <argument><expr><name>tm</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>oledate_to_iso8601</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>value</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>time_t</name></type> <name>t</name> <init>= <expr><operator>(</operator><call><name>av_int2double</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">25569.0</literal><operator>)</operator> <operator>*</operator> <literal type="number">86400</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>tmbuf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>tm</name><init>= <expr><call><name>gmtime_r</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmbuf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tm</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strftime</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>, <argument><expr><literal type="string">"%Y-%m-%d %H:%M:%S"</literal></expr></argument>, <argument><expr><name>tm</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>get_attachment</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>mime</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>description</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>filesize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>pos</name> <init>= <expr><call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>avio_get_str16le</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>, <argument><expr><name>mime</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mime</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>mime</name></expr></argument>, <argument><expr><literal type="string">"image/jpeg"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>avio_r8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_get_str16le</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>, <argument><expr><name>description</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>description</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>filesize</name> <operator>=</operator> <call><name>avio_rl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>filesize</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>st</name> <operator>=</operator> <call><name>avformat_new_stream</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>st</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>st</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><literal type="string">"title"</literal></expr></argument>, <argument><expr><name>description</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>=</operator> <name>AV_CODEC_ID_MJPEG</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_get_packet</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>st</name><operator>-&gt;</operator><name>attached_pic</name></name></expr></argument>, <argument><expr><name>filesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>attached_pic</name><operator>.</operator><name>stream_index</name></name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>index</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>attached_pic</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>AV_PKT_FLAG_KEY</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>disposition</name></name> <operator>|=</operator> <name>AV_DISPOSITION_ATTACHED_PIC</name></expr>;</expr_stmt>

<label><name>done</name>:</label>

<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pos</name> <operator>+</operator> <name>length</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>get_tag</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>buf_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"WM/MediaThumbType"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>buf_size</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name>length</name></expr></argument>, <argument><expr><name>LEN_PRETTY_GUID</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>length</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>, <argument><expr><literal type="string">"%u"</literal></expr></argument>, <argument><expr><call><name>avio_rl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avio_get_str16le</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name>length</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><ternary><condition><expr><call><name>avio_rl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"true"</literal></expr> </then><else>: <expr><literal type="string">"false"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <name>length</name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>num</name> <init>= <expr><call><name>avio_rl64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"WM/EncodingTime"</literal></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"WM/MediaOriginalBroadcastDateTime"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>filetime_to_iso8601</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"WM/WMRVEncodeTime"</literal></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"WM/WMRVEndTime"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>crazytime_to_iso8601</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"WM/WMRVExpirationDate"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>oledate_to_iso8601</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"WM/WMRVBitrate"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>, <argument><expr><literal type="string">"%f"</literal></expr></argument>, <argument><expr><call><name>av_int2double</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>, <argument><expr><literal type="string">"%"</literal><name>PRIi64</name></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <literal type="number">5</literal> <operator>&amp;&amp;</operator> <name>length</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>, <argument><expr><literal type="string">"%u"</literal></expr></argument>, <argument><expr><call><name>avio_rl16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <literal type="number">6</literal> <operator>&amp;&amp;</operator> <name>length</name> <operator>==</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ff_asf_guid</name></type> <name>guid</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>avio_read</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>guid</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>, <argument><expr><name>PRI_PRETTY_GUID</name></expr></argument>, <argument><expr><call><name>ARG_PRETTY_GUID</name><argument_list>(<argument><expr><name>guid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"WM/Picture"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>get_attachment</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"unsupported metadata entry; key:%s, type:%d, length:0x%x\n"</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>parse_legacy_attrib</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ff_asf_guid</name></type> <name>guid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>length</name></decl>, <decl><type ref="prev"/><name>type</name></decl>;</decl_stmt>

<while>while<condition>(<expr><operator>!</operator><call><name>avio_feof</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>key</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_get_guid</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>guid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>avio_rl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>length</name> <operator>=</operator> <call><name>avio_rl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>length</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ff_guidcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>guid</name></expr></argument>, <argument><expr><name>ff_metadata_guid</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"unknown guid "</literal><name>FF_PRI_GUID</name><literal type="string">", expected metadata_guid; "</literal>

<literal type="string">"remaining metadata entries ignored\n"</literal></expr></argument>, <argument><expr><call><name>FF_ARG_GUID</name><argument_list>(<argument><expr><name>guid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>avio_get_str16le</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>get_tag</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>ff_metadata_conv</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ff_asf_metadata_conv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_videoinfoheader2</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>WtvContext</name> <modifier>*</modifier></type><name>wtv</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>wtv</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">72</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_tag</name></name> <operator>=</operator> <call><name>ff_get_bmp_header</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>st</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">72</literal> <operator>+</operator> <literal type="number">40</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>parse_mpeg1waveformatex</name><parameter_list>(<parameter><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><call><name>AV_RL16</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0x0001</literal></expr> :</case> <expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>=</operator> <name>AV_CODEC_ID_MP1</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">0x0002</literal></expr> :</case> <expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>=</operator> <name>AV_CODEC_ID_MP2</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">0x0004</literal></expr> :</case> <expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>=</operator> <name>AV_CODEC_ID_MP3</name></expr>;</expr_stmt> <break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>=</operator> <call><name>AV_RL32</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>extradata</name></name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<switch>switch <condition>(<expr><call><name>AV_RL16</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>extradata</name></name> <operator>+</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr> :</case>

<case>case <expr><literal type="number">2</literal></expr> :</case>

<case>case <expr><literal type="number">4</literal></expr> :</case> <expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>channel_layout</name></name> <operator>=</operator> <name>AV_CH_LAYOUT_STEREO</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">8</literal></expr> :</case> <expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>channel_layout</name></name> <operator>=</operator> <name>AV_CH_LAYOUT_MONO</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>AVStream</name> <modifier>*</modifier></type> <name>new_stream</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>codec_type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>st</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>extradata</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>WtvStream</name> <modifier>*</modifier></type><name>wst</name> <init>= <expr><call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>WtvStream</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>wst</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>st</name> <operator>=</operator> <call><name>avformat_new_stream</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>st</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>wst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name>sid</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>priv_data</name></name> <operator>=</operator> <name>wst</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>=</operator> <name>codec_type</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>need_parsing</name></name> <operator>=</operator> <name>AVSTREAM_PARSE_FULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avpriv_set_pts_info</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">10000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>st</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>AVStream</name> <modifier>*</modifier></type> <name>parse_media_type</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sid</name></decl></parameter>,

<parameter><decl><type><name>ff_asf_guid</name></type> <name>mediatype</name></decl></parameter>, <parameter><decl><type><name>ff_asf_guid</name></type> <name>subtype</name></decl></parameter>,

<parameter><decl><type><name>ff_asf_guid</name></type> <name>formattype</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>WtvContext</name> <modifier>*</modifier></type><name>wtv</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>wtv</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ff_guidcmp</name><argument_list>(<argument><expr><name>subtype</name></expr></argument>, <argument><expr><name>ff_mediasubtype_cpfilters_processed</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<operator>!</operator><call><name>ff_guidcmp</name><argument_list>(<argument><expr><name>formattype</name></expr></argument>, <argument><expr><name>ff_format_cpfilters_processed</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ff_asf_guid</name></type> <name>actual_subtype</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ff_asf_guid</name></type> <name>actual_formattype</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"format buffer size underflow\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>size</name> <operator>-</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_get_guid</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>actual_subtype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_get_guid</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>actual_formattype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>-</operator><name>size</name></expr></argument>, <argument><expr><name>SEEK_CUR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>st</name> <operator>=</operator> <call><name>parse_media_type</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>st</name></expr></argument>, <argument><expr><name>sid</name></expr></argument>, <argument><expr><name>mediatype</name></expr></argument>, <argument><expr><name>actual_subtype</name></expr></argument>, <argument><expr><name>actual_formattype</name></expr></argument>, <argument><expr><name>size</name> <operator>-</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>st</name></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>ff_guidcmp</name><argument_list>(<argument><expr><name>mediatype</name></expr></argument>, <argument><expr><name>ff_mediatype_audio</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>st</name> <operator>=</operator> <call><name>new_stream</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>st</name></expr></argument>, <argument><expr><name>sid</name></expr></argument>, <argument><expr><name>AVMEDIA_TYPE_AUDIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>st</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ff_guidcmp</name><argument_list>(<argument><expr><name>formattype</name></expr></argument>, <argument><expr><name>ff_format_waveformatex</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>ff_get_wav_header</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>ff_guidcmp</name><argument_list>(<argument><expr><name>formattype</name></expr></argument>, <argument><expr><name>ff_format_none</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"unknown formattype:"</literal><name>FF_PRI_GUID</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><call><name>FF_ARG_GUID</name><argument_list>(<argument><expr><name>formattype</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><macro><name>memcmp</name><argument_list>(<argument>subtype + <literal type="number">4</literal></argument>, <argument>(const uint8_t[]){FF_MEDIASUBTYPE_BASE_GUID}</argument>, <argument><literal type="number">12</literal></argument>)</argument_list></macro></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>=</operator> <call><name>ff_wav_codec_get_id</name><argument_list>(<argument><expr><call><name>AV_RL32</name><argument_list>(<argument><expr><name>subtype</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>bits_per_coded_sample</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>ff_guidcmp</name><argument_list>(<argument><expr><name>subtype</name></expr></argument>, <argument><expr><name>mediasubtype_mpeg1payload</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>extradata</name></name> <operator>&amp;&amp;</operator> <name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>&gt;=</operator> <literal type="number">22</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>parse_mpeg1waveformatex</name><argument_list>(<argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"MPEG1WAVEFORMATEX underflow\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>=</operator> <call><name>ff_codec_guid_get_id</name><argument_list>(<argument><expr><name>ff_codec_wav_guids</name></expr></argument>, <argument><expr><name>subtype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_NONE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"unknown subtype:"</literal><name>FF_PRI_GUID</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><call><name>FF_ARG_GUID</name><argument_list>(<argument><expr><name>subtype</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>st</name></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>ff_guidcmp</name><argument_list>(<argument><expr><name>mediatype</name></expr></argument>, <argument><expr><name>ff_mediatype_video</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>st</name> <operator>=</operator> <call><name>new_stream</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>st</name></expr></argument>, <argument><expr><name>sid</name></expr></argument>, <argument><expr><name>AVMEDIA_TYPE_VIDEO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>st</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ff_guidcmp</name><argument_list>(<argument><expr><name>formattype</name></expr></argument>, <argument><expr><name>ff_format_videoinfo2</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>consumed</name> <init>= <expr><call><name>parse_videoinfoheader2</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><call><name>FFMAX</name><argument_list>(<argument><expr><name>size</name> <operator>-</operator> <name>consumed</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>ff_guidcmp</name><argument_list>(<argument><expr><name>formattype</name></expr></argument>, <argument><expr><name>ff_format_mpeg2_video</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>consumed</name> <init>= <expr><call><name>parse_videoinfoheader2</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><call><name>FFMAX</name><argument_list>(<argument><expr><name>size</name> <operator>-</operator> <name>consumed</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>ff_guidcmp</name><argument_list>(<argument><expr><name>formattype</name></expr></argument>, <argument><expr><name>ff_format_none</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"unknown formattype:"</literal><name>FF_PRI_GUID</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><call><name>FF_ARG_GUID</name><argument_list>(<argument><expr><name>formattype</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><macro><name>memcmp</name><argument_list>(<argument>subtype + <literal type="number">4</literal></argument>, <argument>(const uint8_t[]){FF_MEDIASUBTYPE_BASE_GUID}</argument>, <argument><literal type="number">12</literal></argument>)</argument_list></macro></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>=</operator> <call><name>ff_codec_get_id</name><argument_list>(<argument><expr><name>ff_codec_bmp_tags</name></expr></argument>, <argument><expr><call><name>AV_RL32</name><argument_list>(<argument><expr><name>subtype</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>=</operator> <call><name>ff_codec_guid_get_id</name><argument_list>(<argument><expr><name>ff_video_guids</name></expr></argument>, <argument><expr><name>subtype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_NONE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"unknown subtype:"</literal><name>FF_PRI_GUID</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><call><name>FF_ARG_GUID</name><argument_list>(<argument><expr><name>subtype</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>st</name></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>ff_guidcmp</name><argument_list>(<argument><expr><name>mediatype</name></expr></argument>, <argument><expr><name>mediatype_mpeg2_pes</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<operator>!</operator><call><name>ff_guidcmp</name><argument_list>(<argument><expr><name>subtype</name></expr></argument>, <argument><expr><name>mediasubtype_dvb_subtitle</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>st</name> <operator>=</operator> <call><name>new_stream</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>st</name></expr></argument>, <argument><expr><name>sid</name></expr></argument>, <argument><expr><name>AVMEDIA_TYPE_SUBTITLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>st</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ff_guidcmp</name><argument_list>(<argument><expr><name>formattype</name></expr></argument>, <argument><expr><name>ff_format_none</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"unknown formattype:"</literal><name>FF_PRI_GUID</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><call><name>FF_ARG_GUID</name><argument_list>(<argument><expr><name>formattype</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>=</operator> <name>AV_CODEC_ID_DVB_SUBTITLE</name></expr>;</expr_stmt>

<return>return <expr><name>st</name></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>ff_guidcmp</name><argument_list>(<argument><expr><name>mediatype</name></expr></argument>, <argument><expr><name>mediatype_mstvcaption</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<operator>(</operator><operator>!</operator><call><name>ff_guidcmp</name><argument_list>(<argument><expr><name>subtype</name></expr></argument>, <argument><expr><name>mediasubtype_teletext</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>ff_guidcmp</name><argument_list>(<argument><expr><name>subtype</name></expr></argument>, <argument><expr><name>mediasubtype_dtvccdata</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>st</name> <operator>=</operator> <call><name>new_stream</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>st</name></expr></argument>, <argument><expr><name>sid</name></expr></argument>, <argument><expr><name>AVMEDIA_TYPE_SUBTITLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>st</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ff_guidcmp</name><argument_list>(<argument><expr><name>formattype</name></expr></argument>, <argument><expr><name>ff_format_none</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"unknown formattype:"</literal><name>FF_PRI_GUID</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><call><name>FF_ARG_GUID</name><argument_list>(<argument><expr><name>formattype</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>=</operator> <ternary><condition><expr><operator>!</operator><call><name>ff_guidcmp</name><argument_list>(<argument><expr><name>subtype</name></expr></argument>, <argument><expr><name>mediasubtype_teletext</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>AV_CODEC_ID_DVB_TELETEXT</name></expr> </then><else>: <expr><name>AV_CODEC_ID_EIA_608</name></expr></else></ternary></expr>;</expr_stmt>

<return>return <expr><name>st</name></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>ff_guidcmp</name><argument_list>(<argument><expr><name>mediatype</name></expr></argument>, <argument><expr><name>mediatype_mpeg2_sections</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<operator>!</operator><call><name>ff_guidcmp</name><argument_list>(<argument><expr><name>subtype</name></expr></argument>, <argument><expr><name>mediasubtype_mpeg2_sections</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>ff_guidcmp</name><argument_list>(<argument><expr><name>formattype</name></expr></argument>, <argument><expr><name>ff_format_none</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"unknown formattype:"</literal><name>FF_PRI_GUID</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><call><name>FF_ARG_GUID</name><argument_list>(<argument><expr><name>formattype</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"unknown media type, mediatype:"</literal><name>FF_PRI_GUID</name>

<literal type="string">", subtype:"</literal><name>FF_PRI_GUID</name><literal type="string">", formattype:"</literal><name>FF_PRI_GUID</name><literal type="string">"\n"</literal></expr></argument>,

<argument><expr><call><name>FF_ARG_GUID</name><argument_list>(<argument><expr><name>mediatype</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>FF_ARG_GUID</name><argument_list>(<argument><expr><name>subtype</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>FF_ARG_GUID</name><argument_list>(<argument><expr><name>formattype</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<enum>enum <block>{

<decl><name>SEEK_TO_DATA</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>SEEK_TO_PTS</name></decl>,

}</block>;</enum>

<function><type><specifier>static</specifier> <name>int</name></type> <name>recover</name><parameter_list>(<parameter><decl><type><name>WtvContext</name> <modifier>*</modifier></type><name>wtv</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>broken_pos</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>wtv</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>wtv</name><operator>-&gt;</operator><name>nb_index_entries</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>wtv</name><operator>-&gt;</operator><name>index_entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pos</name> <operator>&gt;</operator> <name>broken_pos</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>ret</name> <init>= <expr><call><name>avio_seek</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>wtv</name><operator>-&gt;</operator><name>index_entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pos</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>wtv</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name><name>wtv</name><operator>-&gt;</operator><name>index_entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>timestamp</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_chunks</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>seekts</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>len_ptr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>WtvContext</name> <modifier>*</modifier></type><name>wtv</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>wtv</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>!</operator><call><name>avio_feof</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ff_asf_guid</name></type> <name>g</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>sid</name></decl>, <decl><type ref="prev"/><name>consumed</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_get_guid</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>avio_rl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>avio_feof</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_EOF</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"encountered broken chunk\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>recover</name><argument_list>(<argument><expr><name>wtv</name></expr></argument>, <argument><expr><call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">20</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>sid</name> <operator>=</operator> <call><name>avio_rl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0x7FFF</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>consumed</name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ff_guidcmp</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>ff_SBE2_STREAM_DESC_EVENT</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>ff_find_stream_index</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>sid</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ff_asf_guid</name></type> <name>mediatype</name></decl>, <decl><type ref="prev"/><name>subtype</name></decl>, <decl><type ref="prev"/><name>formattype</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">28</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_get_guid</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mediatype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_get_guid</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>subtype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_get_guid</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>formattype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>avio_rl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>parse_media_type</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>sid</name></expr></argument>, <argument><expr><name>mediatype</name></expr></argument>, <argument><expr><name>subtype</name></expr></argument>, <argument><expr><name>formattype</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>consumed</name> <operator>+=</operator> <literal type="number">92</literal> <operator>+</operator> <name>size</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>ff_guidcmp</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>ff_stream2_guid</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>stream_index</name> <init>= <expr><call><name>ff_find_stream_index</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>sid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>stream_index</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>stream_index</name></expr>]</index></name><operator>-&gt;</operator><name>priv_data</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><operator>(</operator><name>WtvStream</name><operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>stream_index</name></expr>]</index></name><operator>-&gt;</operator><name>priv_data</name><operator>)</operator><operator>-&gt;</operator><name>seen_data</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ff_asf_guid</name></type> <name>mediatype</name></decl>, <decl><type ref="prev"/><name>subtype</name></decl>, <decl><type ref="prev"/><name>formattype</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_get_guid</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mediatype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_get_guid</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>subtype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_get_guid</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>formattype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>avio_rl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>parse_media_type</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>stream_index</name></expr>]</index></name></expr></argument>, <argument><expr><name>sid</name></expr></argument>, <argument><expr><name>mediatype</name></expr></argument>, <argument><expr><name>subtype</name></expr></argument>, <argument><expr><name>formattype</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>consumed</name> <operator>+=</operator> <literal type="number">76</literal> <operator>+</operator> <name>size</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>ff_guidcmp</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>EVENTID_AudioDescriptorSpanningEvent</name></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>ff_guidcmp</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>EVENTID_CtxADescriptorSpanningEvent</name></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>ff_guidcmp</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>EVENTID_CSDescriptorSpanningEvent</name></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>ff_guidcmp</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>EVENTID_StreamIDSpanningEvent</name></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>ff_guidcmp</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>EVENTID_SubtitleSpanningEvent</name></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>ff_guidcmp</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>EVENTID_TeletextSpanningEvent</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>stream_index</name> <init>= <expr><call><name>ff_find_stream_index</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>sid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>stream_index</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>stream_index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>buf</name><index>[<expr><literal type="number">258</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>pbuf</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>buf_size</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>consumed</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ff_guidcmp</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>EVENTID_CtxADescriptorSpanningEvent</name></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>ff_guidcmp</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>EVENTID_CSDescriptorSpanningEvent</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>consumed</name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>buf_size</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>len</name> <operator>-</operator> <name>consumed</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_read</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>consumed</name> <operator>+=</operator> <name>buf_size</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_parse_mpeg2_descriptor</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>st</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>pbuf</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>buf_size</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>ff_guidcmp</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>EVENTID_AudioTypeSpanningEvent</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>stream_index</name> <init>= <expr><call><name>ff_find_stream_index</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>sid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>stream_index</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>stream_index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>audio_type</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>audio_type</name> <operator>=</operator> <call><name>avio_r8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>audio_type</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>disposition</name></name> <operator>|=</operator> <name>AV_DISPOSITION_HEARING_IMPAIRED</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>audio_type</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>disposition</name></name> <operator>|=</operator> <name>AV_DISPOSITION_VISUAL_IMPAIRED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>consumed</name> <operator>+=</operator> <literal type="number">9</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>ff_guidcmp</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>EVENTID_DVBScramblingControlSpanningEvent</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>stream_index</name> <init>= <expr><call><name>ff_find_stream_index</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>sid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>stream_index</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>avio_rl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"DVB scrambled stream detected (st:%d), decoding will likely fail\n"</literal></expr></argument>, <argument><expr><name>stream_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>consumed</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>ff_guidcmp</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>EVENTID_LanguageSpanningEvent</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>stream_index</name> <init>= <expr><call><name>ff_find_stream_index</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>sid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>stream_index</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>stream_index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>language</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_read</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>language</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>language</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>language</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>st</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><literal type="string">"language"</literal></expr></argument>, <argument><expr><name>language</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>language</name></expr></argument>, <argument><expr><literal type="string">"nar"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>language</name></expr></argument>, <argument><expr><literal type="string">"NAR"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>disposition</name></name> <operator>|=</operator> <name>AV_DISPOSITION_VISUAL_IMPAIRED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>consumed</name> <operator>+=</operator> <literal type="number">15</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>ff_guidcmp</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>ff_timestamp_guid</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>stream_index</name> <init>= <expr><call><name>ff_find_stream_index</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>sid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>stream_index</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wtv</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <call><name>avio_rl64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>consumed</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wtv</name><operator>-&gt;</operator><name>pts</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>wtv</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name>AV_NOPTS_VALUE</name></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name><name>wtv</name><operator>-&gt;</operator><name>last_valid_pts</name></name> <operator>=</operator> <name><name>wtv</name><operator>-&gt;</operator><name>pts</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wtv</name><operator>-&gt;</operator><name>epoch</name></name> <operator>==</operator> <name>AV_NOPTS_VALUE</name> <operator>||</operator> <name><name>wtv</name><operator>-&gt;</operator><name>pts</name></name> <operator>&lt;</operator> <name><name>wtv</name><operator>-&gt;</operator><name>epoch</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>wtv</name><operator>-&gt;</operator><name>epoch</name></name> <operator>=</operator> <name><name>wtv</name><operator>-&gt;</operator><name>pts</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>SEEK_TO_PTS</name> <operator>&amp;&amp;</operator> <name><name>wtv</name><operator>-&gt;</operator><name>pts</name></name> <operator>&gt;=</operator> <name>seekts</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><call><name>WTV_PAD8</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>consumed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>ff_guidcmp</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>ff_data_guid</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>stream_index</name> <init>= <expr><call><name>ff_find_stream_index</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>sid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>SEEK_TO_DATA</name> <operator>&amp;&amp;</operator> <name>stream_index</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>len</name> <operator>&gt;</operator> <literal type="number">32</literal> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>stream_index</name></expr>]</index></name><operator>-&gt;</operator><name>priv_data</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>WtvStream</name> <modifier>*</modifier></type><name>wst</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>stream_index</name></expr>]</index></name><operator>-&gt;</operator><name>priv_data</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>wst</name><operator>-&gt;</operator><name>seen_data</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len_ptr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>len_ptr</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>stream_index</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><macro><name>ff_guidcmp</name><argument_list>(<argument>g</argument>, <argument>(const ff_asf_guid){<literal type="number">0x83</literal></argument>,<argument><literal type="number">0x95</literal></argument>,<argument><literal type="number">0x74</literal></argument>,<argument><literal type="number">0x40</literal></argument>,<argument><literal type="number">0x9D</literal></argument>,<argument><literal type="number">0x6B</literal></argument>,<argument><literal type="number">0xEC</literal></argument>,<argument><literal type="number">0x4E</literal></argument>,<argument><literal type="number">0xB4</literal></argument>,<argument><literal type="number">0x3C</literal></argument>,<argument><literal type="number">0x67</literal></argument>,<argument><literal type="number">0xA1</literal></argument>,<argument><literal type="number">0x80</literal></argument>,<argument><literal type="number">0x1E</literal></argument>,<argument><literal type="number">0x1A</literal></argument>,<argument><literal type="number">0x9B</literal>}</argument>)</argument_list></macro></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>stream_index</name> <init>= <expr><call><name>ff_find_stream_index</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>sid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>stream_index</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"encrypted stream detected (st:%d), decoding will likely fail\n"</literal></expr></argument>, <argument><expr><name>stream_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(

<expr><operator>!</operator><macro><name>ff_guidcmp</name><argument_list>(<argument>g</argument>, <argument>(const ff_asf_guid){<literal type="number">0x14</literal></argument>,<argument><literal type="number">0x56</literal></argument>,<argument><literal type="number">0x1A</literal></argument>,<argument><literal type="number">0x0C</literal></argument>,<argument><literal type="number">0xCD</literal></argument>,<argument><literal type="number">0x30</literal></argument>,<argument><literal type="number">0x40</literal></argument>,<argument><literal type="number">0x4F</literal></argument>,<argument><literal type="number">0xBC</literal></argument>,<argument><literal type="number">0xBF</literal></argument>,<argument><literal type="number">0xD0</literal></argument>,<argument><literal type="number">0x3E</literal></argument>,<argument><literal type="number">0x52</literal></argument>,<argument><literal type="number">0x30</literal></argument>,<argument><literal type="number">0x62</literal></argument>,<argument><literal type="number">0x07</literal>}</argument>)</argument_list></macro> <operator>||</operator>

<operator>!</operator><macro><name>ff_guidcmp</name><argument_list>(<argument>g</argument>, <argument>(const ff_asf_guid){<literal type="number">0x79</literal></argument>,<argument><literal type="number">0x66</literal></argument>,<argument><literal type="number">0xB5</literal></argument>,<argument><literal type="number">0xE0</literal></argument>,<argument><literal type="number">0xB9</literal></argument>,<argument><literal type="number">0x12</literal></argument>,<argument><literal type="number">0xCC</literal></argument>,<argument><literal type="number">0x43</literal></argument>,<argument><literal type="number">0xB7</literal></argument>,<argument><literal type="number">0xDF</literal></argument>,<argument><literal type="number">0x57</literal></argument>,<argument><literal type="number">0x8C</literal></argument>,<argument><literal type="number">0xAA</literal></argument>,<argument><literal type="number">0x5A</literal></argument>,<argument><literal type="number">0x7B</literal></argument>,<argument><literal type="number">0x63</literal>}</argument>)</argument_list></macro> <operator>||</operator>

<operator>!</operator><macro><name>ff_guidcmp</name><argument_list>(<argument>g</argument>, <argument>(const ff_asf_guid){<literal type="number">0x02</literal></argument>,<argument><literal type="number">0xAE</literal></argument>,<argument><literal type="number">0x5B</literal></argument>,<argument><literal type="number">0x2F</literal></argument>,<argument><literal type="number">0x8F</literal></argument>,<argument><literal type="number">0x7B</literal></argument>,<argument><literal type="number">0x60</literal></argument>,<argument><literal type="number">0x4F</literal></argument>,<argument><literal type="number">0x82</literal></argument>,<argument><literal type="number">0xD6</literal></argument>,<argument><literal type="number">0xE4</literal></argument>,<argument><literal type="number">0xEA</literal></argument>,<argument><literal type="number">0x2F</literal></argument>,<argument><literal type="number">0x1F</literal></argument>,<argument><literal type="number">0x4C</literal></argument>,<argument><literal type="number">0x99</literal>}</argument>)</argument_list></macro> <operator>||</operator>

<operator>!</operator><call><name>ff_guidcmp</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>ff_DSATTRIB_TRANSPORT_PROPERTIES</name></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>!</operator><macro><name>ff_guidcmp</name><argument_list>(<argument>g</argument>, <argument>(const ff_asf_guid){<literal type="number">0xCC</literal></argument>,<argument><literal type="number">0x32</literal></argument>,<argument><literal type="number">0x64</literal></argument>,<argument><literal type="number">0xDD</literal></argument>,<argument><literal type="number">0x29</literal></argument>,<argument><literal type="number">0xE2</literal></argument>,<argument><literal type="number">0xDB</literal></argument>,<argument><literal type="number">0x40</literal></argument>,<argument><literal type="number">0x80</literal></argument>,<argument><literal type="number">0xF6</literal></argument>,<argument><literal type="number">0xD2</literal></argument>,<argument><literal type="number">0x63</literal></argument>,<argument><literal type="number">0x28</literal></argument>,<argument><literal type="number">0xD2</literal></argument>,<argument><literal type="number">0x76</literal></argument>,<argument><literal type="number">0x1F</literal>}</argument>)</argument_list></macro> <operator>||</operator>

<operator>!</operator><macro><name>ff_guidcmp</name><argument_list>(<argument>g</argument>, <argument>(const ff_asf_guid){<literal type="number">0xE5</literal></argument>,<argument><literal type="number">0xC5</literal></argument>,<argument><literal type="number">0x67</literal></argument>,<argument><literal type="number">0x90</literal></argument>,<argument><literal type="number">0x5C</literal></argument>,<argument><literal type="number">0x4C</literal></argument>,<argument><literal type="number">0x05</literal></argument>,<argument><literal type="number">0x42</literal></argument>,<argument><literal type="number">0x86</literal></argument>,<argument><literal type="number">0xC8</literal></argument>,<argument><literal type="number">0x7A</literal></argument>,<argument><literal type="number">0xFE</literal></argument>,<argument><literal type="number">0x20</literal></argument>,<argument><literal type="number">0xFE</literal></argument>,<argument><literal type="number">0x1E</literal></argument>,<argument><literal type="number">0xFA</literal>}</argument>)</argument_list></macro> <operator>||</operator>

<operator>!</operator><macro><name>ff_guidcmp</name><argument_list>(<argument>g</argument>, <argument>(const ff_asf_guid){<literal type="number">0x80</literal></argument>,<argument><literal type="number">0x6D</literal></argument>,<argument><literal type="number">0xF3</literal></argument>,<argument><literal type="number">0x41</literal></argument>,<argument><literal type="number">0x32</literal></argument>,<argument><literal type="number">0x41</literal></argument>,<argument><literal type="number">0xC2</literal></argument>,<argument><literal type="number">0x4C</literal></argument>,<argument><literal type="number">0xB1</literal></argument>,<argument><literal type="number">0x21</literal></argument>,<argument><literal type="number">0x01</literal></argument>,<argument><literal type="number">0xA4</literal></argument>,<argument><literal type="number">0x32</literal></argument>,<argument><literal type="number">0x19</literal></argument>,<argument><literal type="number">0xD8</literal></argument>,<argument><literal type="number">0x1B</literal>}</argument>)</argument_list></macro> <operator>||</operator>

<operator>!</operator><macro><name>ff_guidcmp</name><argument_list>(<argument>g</argument>, <argument>(const ff_asf_guid){<literal type="number">0x51</literal></argument>,<argument><literal type="number">0x1D</literal></argument>,<argument><literal type="number">0xAB</literal></argument>,<argument><literal type="number">0x72</literal></argument>,<argument><literal type="number">0xD2</literal></argument>,<argument><literal type="number">0x87</literal></argument>,<argument><literal type="number">0x9B</literal></argument>,<argument><literal type="number">0x48</literal></argument>,<argument><literal type="number">0xBA</literal></argument>,<argument><literal type="number">0x11</literal></argument>,<argument><literal type="number">0x0E</literal></argument>,<argument><literal type="number">0x08</literal></argument>,<argument><literal type="number">0xDC</literal></argument>,<argument><literal type="number">0x21</literal></argument>,<argument><literal type="number">0x02</literal></argument>,<argument><literal type="number">0x43</literal>}</argument>)</argument_list></macro> <operator>||</operator>

<operator>!</operator><macro><name>ff_guidcmp</name><argument_list>(<argument>g</argument>, <argument>(const ff_asf_guid){<literal type="number">0x65</literal></argument>,<argument><literal type="number">0x8F</literal></argument>,<argument><literal type="number">0xFC</literal></argument>,<argument><literal type="number">0x47</literal></argument>,<argument><literal type="number">0xBB</literal></argument>,<argument><literal type="number">0xE2</literal></argument>,<argument><literal type="number">0x34</literal></argument>,<argument><literal type="number">0x46</literal></argument>,<argument><literal type="number">0x9C</literal></argument>,<argument><literal type="number">0xEF</literal></argument>,<argument><literal type="number">0xFD</literal></argument>,<argument><literal type="number">0xBF</literal></argument>,<argument><literal type="number">0xE6</literal></argument>,<argument><literal type="number">0x26</literal></argument>,<argument><literal type="number">0x1D</literal></argument>,<argument><literal type="number">0x5C</literal>}</argument>)</argument_list></macro> <operator>||</operator>

<operator>!</operator><macro><name>ff_guidcmp</name><argument_list>(<argument>g</argument>, <argument>(const ff_asf_guid){<literal type="number">0xCB</literal></argument>,<argument><literal type="number">0xC5</literal></argument>,<argument><literal type="number">0x68</literal></argument>,<argument><literal type="number">0x80</literal></argument>,<argument><literal type="number">0x04</literal></argument>,<argument><literal type="number">0x3C</literal></argument>,<argument><literal type="number">0x2B</literal></argument>,<argument><literal type="number">0x49</literal></argument>,<argument><literal type="number">0xB4</literal></argument>,<argument><literal type="number">0x7D</literal></argument>,<argument><literal type="number">0x03</literal></argument>,<argument><literal type="number">0x08</literal></argument>,<argument><literal type="number">0x82</literal></argument>,<argument><literal type="number">0x0D</literal></argument>,<argument><literal type="number">0xCE</literal></argument>,<argument><literal type="number">0x51</literal>}</argument>)</argument_list></macro> <operator>||</operator>

<operator>!</operator><macro><name>ff_guidcmp</name><argument_list>(<argument>g</argument>, <argument>(const ff_asf_guid){<literal type="number">0xBC</literal></argument>,<argument><literal type="number">0x2E</literal></argument>,<argument><literal type="number">0xAF</literal></argument>,<argument><literal type="number">0x82</literal></argument>,<argument><literal type="number">0xA6</literal></argument>,<argument><literal type="number">0x30</literal></argument>,<argument><literal type="number">0x64</literal></argument>,<argument><literal type="number">0x42</literal></argument>,<argument><literal type="number">0xA8</literal></argument>,<argument><literal type="number">0x0B</literal></argument>,<argument><literal type="number">0xAD</literal></argument>,<argument><literal type="number">0x2E</literal></argument>,<argument><literal type="number">0x13</literal></argument>,<argument><literal type="number">0x72</literal></argument>,<argument><literal type="number">0xAC</literal></argument>,<argument><literal type="number">0x60</literal>}</argument>)</argument_list></macro> <operator>||</operator>

<operator>!</operator><macro><name>ff_guidcmp</name><argument_list>(<argument>g</argument>, <argument>(const ff_asf_guid){<literal type="number">0x1E</literal></argument>,<argument><literal type="number">0xBE</literal></argument>,<argument><literal type="number">0xC3</literal></argument>,<argument><literal type="number">0xC5</literal></argument>,<argument><literal type="number">0x43</literal></argument>,<argument><literal type="number">0x92</literal></argument>,<argument><literal type="number">0xDC</literal></argument>,<argument><literal type="number">0x11</literal></argument>,<argument><literal type="number">0x85</literal></argument>,<argument><literal type="number">0xE5</literal></argument>,<argument><literal type="number">0x00</literal></argument>,<argument><literal type="number">0x12</literal></argument>,<argument><literal type="number">0x3F</literal></argument>,<argument><literal type="number">0x6F</literal></argument>,<argument><literal type="number">0x73</literal></argument>,<argument><literal type="number">0xB9</literal>}</argument>)</argument_list></macro> <operator>||</operator>

<operator>!</operator><macro><name>ff_guidcmp</name><argument_list>(<argument>g</argument>, <argument>(const ff_asf_guid){<literal type="number">0x3B</literal></argument>,<argument><literal type="number">0x86</literal></argument>,<argument><literal type="number">0xA2</literal></argument>,<argument><literal type="number">0xB1</literal></argument>,<argument><literal type="number">0xEB</literal></argument>,<argument><literal type="number">0x1E</literal></argument>,<argument><literal type="number">0xC3</literal></argument>,<argument><literal type="number">0x44</literal></argument>,<argument><literal type="number">0x8C</literal></argument>,<argument><literal type="number">0x88</literal></argument>,<argument><literal type="number">0x1C</literal></argument>,<argument><literal type="number">0xA3</literal></argument>,<argument><literal type="number">0xFF</literal></argument>,<argument><literal type="number">0xE3</literal></argument>,<argument><literal type="number">0xE7</literal></argument>,<argument><literal type="number">0x6A</literal>}</argument>)</argument_list></macro> <operator>||</operator>

<operator>!</operator><macro><name>ff_guidcmp</name><argument_list>(<argument>g</argument>, <argument>(const ff_asf_guid){<literal type="number">0x4E</literal></argument>,<argument><literal type="number">0x7F</literal></argument>,<argument><literal type="number">0x4C</literal></argument>,<argument><literal type="number">0x5B</literal></argument>,<argument><literal type="number">0xC4</literal></argument>,<argument><literal type="number">0xD0</literal></argument>,<argument><literal type="number">0x38</literal></argument>,<argument><literal type="number">0x4B</literal></argument>,<argument><literal type="number">0xA8</literal></argument>,<argument><literal type="number">0x3E</literal></argument>,<argument><literal type="number">0x21</literal></argument>,<argument><literal type="number">0x7F</literal></argument>,<argument><literal type="number">0x7B</literal></argument>,<argument><literal type="number">0xBF</literal></argument>,<argument><literal type="number">0x52</literal></argument>,<argument><literal type="number">0xE7</literal>}</argument>)</argument_list></macro> <operator>||</operator>

<operator>!</operator><macro><name>ff_guidcmp</name><argument_list>(<argument>g</argument>, <argument>(const ff_asf_guid){<literal type="number">0x63</literal></argument>,<argument><literal type="number">0x36</literal></argument>,<argument><literal type="number">0xEB</literal></argument>,<argument><literal type="number">0xFE</literal></argument>,<argument><literal type="number">0xA1</literal></argument>,<argument><literal type="number">0x7E</literal></argument>,<argument><literal type="number">0xD9</literal></argument>,<argument><literal type="number">0x11</literal></argument>,<argument><literal type="number">0x83</literal></argument>,<argument><literal type="number">0x08</literal></argument>,<argument><literal type="number">0x00</literal></argument>,<argument><literal type="number">0x07</literal></argument>,<argument><literal type="number">0xE9</literal></argument>,<argument><literal type="number">0x5E</literal></argument>,<argument><literal type="number">0xAD</literal></argument>,<argument><literal type="number">0x8D</literal>}</argument>)</argument_list></macro> <operator>||</operator>

<operator>!</operator><macro><name>ff_guidcmp</name><argument_list>(<argument>g</argument>, <argument>(const ff_asf_guid){<literal type="number">0x70</literal></argument>,<argument><literal type="number">0xE9</literal></argument>,<argument><literal type="number">0xF1</literal></argument>,<argument><literal type="number">0xF8</literal></argument>,<argument><literal type="number">0x89</literal></argument>,<argument><literal type="number">0xA4</literal></argument>,<argument><literal type="number">0x4C</literal></argument>,<argument><literal type="number">0x4D</literal></argument>,<argument><literal type="number">0x83</literal></argument>,<argument><literal type="number">0x73</literal></argument>,<argument><literal type="number">0xB8</literal></argument>,<argument><literal type="number">0x12</literal></argument>,<argument><literal type="number">0xE0</literal></argument>,<argument><literal type="number">0xD5</literal></argument>,<argument><literal type="number">0xF8</literal></argument>,<argument><literal type="number">0x1E</literal>}</argument>)</argument_list></macro> <operator>||</operator>

<operator>!</operator><call><name>ff_guidcmp</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>ff_index_guid</name></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>ff_guidcmp</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>ff_sync_guid</name></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>ff_guidcmp</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>ff_stream1_guid</name></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>!</operator><macro><name>ff_guidcmp</name><argument_list>(<argument>g</argument>, <argument>(const ff_asf_guid){<literal type="number">0xF7</literal></argument>,<argument><literal type="number">0x10</literal></argument>,<argument><literal type="number">0x02</literal></argument>,<argument><literal type="number">0xB9</literal></argument>,<argument><literal type="number">0xEE</literal></argument>,<argument><literal type="number">0x7C</literal></argument>,<argument><literal type="number">0xED</literal></argument>,<argument><literal type="number">0x4E</literal></argument>,<argument><literal type="number">0xBD</literal></argument>,<argument><literal type="number">0x7F</literal></argument>,<argument><literal type="number">0x05</literal></argument>,<argument><literal type="number">0x40</literal></argument>,<argument><literal type="number">0x35</literal></argument>,<argument><literal type="number">0x86</literal></argument>,<argument><literal type="number">0x18</literal></argument>,<argument><literal type="number">0xA1</literal>}</argument>)</argument_list></macro></expr>)</condition> <block>{<block_content>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"unsupported chunk:"</literal><name>FF_PRI_GUID</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><call><name>FF_ARG_GUID</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><call><name>WTV_PAD8</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>consumed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>AVERROR_EOF</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>read_header</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>WtvContext</name> <modifier>*</modifier></type><name>wtv</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>root_sector</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>root_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>root</name><index>[<expr><name>WTV_SECTOR_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>timeline_pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>wtv</name><operator>-&gt;</operator><name>epoch</name></name> <operator>=</operator>

<name><name>wtv</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator>

<name><name>wtv</name><operator>-&gt;</operator><name>last_valid_pts</name></name> <operator>=</operator> <name>AV_NOPTS_VALUE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">0x30</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>root_size</name> <operator>=</operator> <call><name>avio_rl32</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>root_size</name> <operator>&gt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"root directory size exceeds sector size\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>root_sector</name> <operator>=</operator> <call><name>avio_rl32</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>seek_by_sector</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>root_sector</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>root_size</name> <operator>=</operator> <call><name>avio_read</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name>root_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>root_size</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>wtv</name><operator>-&gt;</operator><name>pb</name></name> <operator>=</operator> <call><name>wtvfile_open</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name>root_size</name></expr></argument>, <argument><expr><name>ff_timeline_le16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>wtv</name><operator>-&gt;</operator><name>pb</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"timeline data missing\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>parse_chunks</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>SEEK_TO_DATA</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>wtvfile_close</name><argument_list>(<argument><expr><name><name>wtv</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name><name>wtv</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">32</literal></expr></argument>, <argument><expr><name>SEEK_CUR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>timeline_pos</name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>pb</name> <operator>=</operator> <call><name>wtvfile_open</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name>root_size</name></expr></argument>, <argument><expr><name>ff_table_0_entries_legacy_attrib_le16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pb</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>parse_legacy_attrib</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wtvfile_close</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ctx_flags</name></name> <operator>|=</operator> <name>AVFMTCTX_NOHEADER</name></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>pb</name> <operator>=</operator> <call><name>wtvfile_open</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name>root_size</name></expr></argument>, <argument><expr><name>ff_table_0_entries_time_le16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pb</name></expr>)</condition> <block>{<block_content>

<while>while<condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>timestamp</name> <init>= <expr><call><name>avio_rl64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>frame_nb</name> <init>= <expr><call><name>avio_rl64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>avio_feof</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ff_add_index_entry</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wtv</name><operator>-&gt;</operator><name>index_entries</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>wtv</name><operator>-&gt;</operator><name>nb_index_entries</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>wtv</name><operator>-&gt;</operator><name>index_entries_allocated_size</name></name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>, <argument><expr><name>frame_nb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>AVINDEX_KEYFRAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>wtvfile_close</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wtv</name><operator>-&gt;</operator><name>nb_index_entries</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pb</name> <operator>=</operator> <call><name>wtvfile_open</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name>root_size</name></expr></argument>, <argument><expr><name>ff_timeline_table_0_entries_Events_le16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pb</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>AVIndexEntry</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><name><name>wtv</name><operator>-&gt;</operator><name>index_entries</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVIndexEntry</name> <modifier>*</modifier></type><name>e_end</name> <init>= <expr><name><name>wtv</name><operator>-&gt;</operator><name>index_entries</name></name> <operator>+</operator> <name><name>wtv</name><operator>-&gt;</operator><name>nb_index_entries</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>last_position</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>frame_nb</name> <init>= <expr><call><name>avio_rl64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>position</name> <init>= <expr><call><name>avio_rl64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>e</name> <operator>&lt;=</operator> <name>e_end</name> <operator>&amp;&amp;</operator> <name>frame_nb</name> <operator>&gt;</operator> <name><name>e</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <name>last_position</name></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><call><name>avio_feof</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>last_position</name> <operator>=</operator> <name>position</name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name><name>e_end</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <name>last_position</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wtvfile_close</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>duration</name></name> <operator>=</operator> <name><name>e_end</name><operator>-&gt;</operator><name>timestamp</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>timeline_pos</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>read_packet</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>WtvContext</name> <modifier>*</modifier></type><name>wtv</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>wtv</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>stream_index</name></decl>, <decl><type ref="prev"/><name>len</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>stream_index</name> <operator>=</operator> <call><name>parse_chunks</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>SEEK_TO_DATA</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>stream_index</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>stream_index</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_get_packet</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>stream_index</name></name> <operator>=</operator> <name>stream_index</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name><name>wtv</name><operator>-&gt;</operator><name>pts</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><call><name>WTV_PAD8</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>read_seek</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stream_index</name></decl></parameter>,

<parameter><decl><type><name>int64_t</name></type> <name>ts</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>WtvContext</name> <modifier>*</modifier></type><name>wtv</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>wtv</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>ts_relative</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>AVSEEK_FLAG_FRAME</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>AVSEEK_FLAG_BYTE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ts_relative</name> <operator>=</operator> <name>ts</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wtv</name><operator>-&gt;</operator><name>epoch</name></name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ts_relative</name> <operator>-=</operator> <name><name>wtv</name><operator>-&gt;</operator><name>epoch</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>ff_index_search_timestamp</name><argument_list>(<argument><expr><name><name>wtv</name><operator>-&gt;</operator><name>index_entries</name></name></expr></argument>, <argument><expr><name><name>wtv</name><operator>-&gt;</operator><name>nb_index_entries</name></name></expr></argument>, <argument><expr><name>ts_relative</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>wtv</name><operator>-&gt;</operator><name>last_valid_pts</name></name> <operator>==</operator> <name>AV_NOPTS_VALUE</name> <operator>||</operator> <name>ts</name> <operator>&lt;</operator> <name><name>wtv</name><operator>-&gt;</operator><name>last_valid_pts</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>avio_seek</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>duration</name></name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name> <operator>&amp;&amp;</operator> <name>ts_relative</name> <operator>&gt;</operator> <name><name>st</name><operator>-&gt;</operator><name>duration</name></name> <operator>&amp;&amp;</operator> <name><name>wtv</name><operator>-&gt;</operator><name>nb_index_entries</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>avio_seek</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>wtv</name><operator>-&gt;</operator><name>index_entries</name><index>[<expr><name><name>wtv</name><operator>-&gt;</operator><name>nb_index_entries</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pos</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>parse_chunks</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>SEEK_TO_PTS</name></expr></argument>, <argument><expr><name>ts</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ERANGE</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>avio_seek</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>wtv</name><operator>-&gt;</operator><name>index_entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pos</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>wtv</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name><name>wtv</name><operator>-&gt;</operator><name>index_entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>timestamp</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wtv</name><operator>-&gt;</operator><name>epoch</name></name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>wtv</name><operator>-&gt;</operator><name>pts</name></name> <operator>+=</operator> <name><name>wtv</name><operator>-&gt;</operator><name>epoch</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>wtv</name><operator>-&gt;</operator><name>last_valid_pts</name></name> <operator>=</operator> <name><name>wtv</name><operator>-&gt;</operator><name>pts</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>read_close</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>WtvContext</name> <modifier>*</modifier></type><name>wtv</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wtv</name><operator>-&gt;</operator><name>index_entries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wtvfile_close</name><argument_list>(<argument><expr><name><name>wtv</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name>AVInputFormat</name></type> <name>ff_wtv_demuxer</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"wtv"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Windows Television (WTV)"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>WtvContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>read_probe</name> <operator>=</operator> <name>read_probe</name></expr>,

<expr><operator>.</operator><name>read_header</name> <operator>=</operator> <name>read_header</name></expr>,

<expr><operator>.</operator><name>read_packet</name> <operator>=</operator> <name>read_packet</name></expr>,

<expr><operator>.</operator><name>read_seek</name> <operator>=</operator> <name>read_seek</name></expr>,

<expr><operator>.</operator><name>read_close</name> <operator>=</operator> <name>read_close</name></expr>,

<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>AVFMT_SHOW_IDS</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
