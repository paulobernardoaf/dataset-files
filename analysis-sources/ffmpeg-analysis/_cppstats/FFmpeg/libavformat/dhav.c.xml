<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavformat\dhav.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/parseutils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avio_internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avformat.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>DHAVContext</name> <block>{

<decl_stmt><decl><type><name>unsigned</name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>subtype</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>channel</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>frame_subnumber</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>frame_number</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>date</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>timestamp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>, <name>height</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>video_codec</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>frame_rate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>audio_channels</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>audio_codec</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sample_rate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>last_good_pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>duration</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>video_stream_index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>audio_stream_index</name></decl>;</decl_stmt>

}</block></struct></type> <name>DHAVContext</name>;</typedef>

<typedef>typedef <type><struct>struct <name>DHAVStream</name> <block>{

<decl_stmt><decl><type><name>int64_t</name></type> <name>last_timestamp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>last_time</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>pts</name></decl>;</decl_stmt>

}</block></struct></type> <name>DHAVStream</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dhav_probe</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVProbeData</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="string">"DAHUA"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVPROBE_SCORE_MAX</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="string">"DHAV"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xf0</literal> <operator>||</operator>

<name><name>p</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xf1</literal> <operator>||</operator>

<name><name>p</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xfc</literal> <operator>||</operator>

<name><name>p</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xfd</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVPROBE_SCORE_MAX</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32_t</name></type> <name><name>sample_rates</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">8000</literal></expr>, <expr><literal type="number">4000</literal></expr>, <expr><literal type="number">8000</literal></expr>, <expr><literal type="number">11025</literal></expr>, <expr><literal type="number">16000</literal></expr>,

<expr><literal type="number">20000</literal></expr>, <expr><literal type="number">22050</literal></expr>, <expr><literal type="number">32000</literal></expr>, <expr><literal type="number">44100</literal></expr>, <expr><literal type="number">48000</literal></expr>,

<expr><literal type="number">96000</literal></expr>, <expr><literal type="number">192000</literal></expr>, <expr><literal type="number">64000</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_ext</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>DHAVContext</name> <modifier>*</modifier></type><name>dhav</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>index</name></decl>, <decl><type ref="prev"/><name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>length</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>type</name> <init>= <expr><call><name>avio_r8</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0x80</literal></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avio_skip</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dhav</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <literal type="number">8</literal> <operator>*</operator> <call><name>avio_r8</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dhav</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <literal type="number">8</literal> <operator>*</operator> <call><name>avio_r8</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>length</name> <operator>-=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x81</literal></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avio_skip</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dhav</name><operator>-&gt;</operator><name>video_codec</name></name> <operator>=</operator> <call><name>avio_r8</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dhav</name><operator>-&gt;</operator><name>frame_rate</name></name> <operator>=</operator> <call><name>avio_r8</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>length</name> <operator>-=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x82</literal></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avio_skip</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dhav</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <call><name>avio_rl16</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dhav</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <call><name>avio_rl16</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>length</name> <operator>-=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x83</literal></expr>:</case>

<expr_stmt><expr><name><name>dhav</name><operator>-&gt;</operator><name>audio_channels</name></name> <operator>=</operator> <call><name>avio_r8</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dhav</name><operator>-&gt;</operator><name>audio_codec</name></name> <operator>=</operator> <call><name>avio_r8</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>index</name> <operator>=</operator> <call><name>avio_r8</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>index</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>sample_rates</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>dhav</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>=</operator> <name><name>sample_rates</name><index>[<expr><name>index</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>dhav</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>=</operator> <literal type="number">8000</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>length</name> <operator>-=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x88</literal></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avio_skip</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>length</name> <operator>-=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x8c</literal></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avio_skip</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dhav</name><operator>-&gt;</operator><name>audio_channels</name></name> <operator>=</operator> <call><name>avio_r8</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dhav</name><operator>-&gt;</operator><name>audio_codec</name></name> <operator>=</operator> <call><name>avio_r8</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>index</name> <operator>=</operator> <call><name>avio_r8</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>index</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>sample_rates</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>dhav</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>=</operator> <name><name>sample_rates</name><index>[<expr><name>index</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>dhav</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>=</operator> <literal type="number">8000</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avio_skip</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>length</name> <operator>-=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x91</literal></expr>:</case>

<case>case <expr><literal type="number">0x92</literal></expr>:</case>

<case>case <expr><literal type="number">0x93</literal></expr>:</case>

<case>case <expr><literal type="number">0x95</literal></expr>:</case>

<case>case <expr><literal type="number">0x9a</literal></expr>:</case>

<case>case <expr><literal type="number">0x9b</literal></expr>:</case> 

<case>case <expr><literal type="number">0xb3</literal></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avio_skip</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>length</name> <operator>-=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x84</literal></expr>:</case>

<case>case <expr><literal type="number">0x85</literal></expr>:</case>

<case>case <expr><literal type="number">0x8b</literal></expr>:</case>

<case>case <expr><literal type="number">0x94</literal></expr>:</case>

<case>case <expr><literal type="number">0x96</literal></expr>:</case>

<case>case <expr><literal type="number">0xa0</literal></expr>:</case>

<case>case <expr><literal type="number">0xb2</literal></expr>:</case>

<case>case <expr><literal type="number">0xb4</literal></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avio_skip</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>length</name> <operator>-=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Unknown type: %X, skipping rest of header.\n"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avio_skip</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>length</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>length</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></while>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>read_chunk</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>DHAVContext</name> <modifier>*</modifier></type><name>dhav</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>frame_length</name></decl>, <decl><type ref="prev"/><name>ext_length</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>start</name></decl>, <decl><type ref="prev"/><name>end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>avio_feof</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_EOF</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>avio_rl32</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'D'</literal></expr></argument>,<argument><expr><literal type="char">'H'</literal></expr></argument>,<argument><expr><literal type="char">'A'</literal></expr></argument>,<argument><expr><literal type="char">'V'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>dhav</name><operator>-&gt;</operator><name>last_good_pos</name></name> <operator>+=</operator> <literal type="number">0x8000</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name><name>dhav</name><operator>-&gt;</operator><name>last_good_pos</name></name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>avio_rl32</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'D'</literal></expr></argument>,<argument><expr><literal type="char">'H'</literal></expr></argument>,<argument><expr><literal type="char">'A'</literal></expr></argument>,<argument><expr><literal type="char">'V'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>avio_feof</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_EOF</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>dhav</name><operator>-&gt;</operator><name>last_good_pos</name></name> <operator>+=</operator> <literal type="number">0x8000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avio_skip</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">0x8000</literal> <operator>-</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>start</name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dhav</name><operator>-&gt;</operator><name>last_good_pos</name></name> <operator>=</operator> <name>start</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dhav</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <call><name>avio_r8</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dhav</name><operator>-&gt;</operator><name>subtype</name></name> <operator>=</operator> <call><name>avio_r8</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dhav</name><operator>-&gt;</operator><name>channel</name></name> <operator>=</operator> <call><name>avio_r8</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dhav</name><operator>-&gt;</operator><name>frame_subnumber</name></name> <operator>=</operator> <call><name>avio_r8</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dhav</name><operator>-&gt;</operator><name>frame_number</name></name> <operator>=</operator> <call><name>avio_rl32</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>frame_length</name> <operator>=</operator> <call><name>avio_rl32</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dhav</name><operator>-&gt;</operator><name>date</name></name> <operator>=</operator> <call><name>avio_rl32</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>frame_length</name> <operator>&lt;</operator> <literal type="number">24</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dhav</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <literal type="number">0xf1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avio_skip</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>frame_length</name> <operator>-</operator> <literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>ret</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>dhav</name><operator>-&gt;</operator><name>timestamp</name></name> <operator>=</operator> <call><name>avio_rl16</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ext_length</name> <operator>=</operator> <call><name>avio_r8</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>parse_ext</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>ext_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>end</name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>frame_length</name> <operator>-</operator> <literal type="number">8</literal> <operator>-</operator> <operator>(</operator><name>end</name> <operator>-</operator> <name>start</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>get_timeinfo</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>date</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>timeinfo</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>year</name></decl>, <decl><type ref="prev"/><name>month</name></decl>, <decl><type ref="prev"/><name>day</name></decl>, <decl><type ref="prev"/><name>hour</name></decl>, <decl><type ref="prev"/><name>min</name></decl>, <decl><type ref="prev"/><name>sec</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sec</name> <operator>=</operator> <name>date</name> <operator>&amp;</operator> <literal type="number">0x3F</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>min</name> <operator>=</operator> <operator>(</operator><name>date</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>hour</name> <operator>=</operator> <operator>(</operator><name>date</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1F</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>day</name> <operator>=</operator> <operator>(</operator><name>date</name> <operator>&gt;&gt;</operator> <literal type="number">17</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1F</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>month</name> <operator>=</operator> <operator>(</operator><name>date</name> <operator>&gt;&gt;</operator> <literal type="number">22</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>year</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>date</name> <operator>&gt;&gt;</operator> <literal type="number">26</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator> <operator>+</operator> <literal type="number">2000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>timeinfo</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>=</operator> <name>year</name> <operator>-</operator> <literal type="number">1900</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>timeinfo</name><operator>-&gt;</operator><name>tm_mon</name></name> <operator>=</operator> <name>month</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>timeinfo</name><operator>-&gt;</operator><name>tm_mday</name></name> <operator>=</operator> <name>day</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>timeinfo</name><operator>-&gt;</operator><name>tm_hour</name></name> <operator>=</operator> <name>hour</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>timeinfo</name><operator>-&gt;</operator><name>tm_min</name></name> <operator>=</operator> <name>min</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>timeinfo</name><operator>-&gt;</operator><name>tm_sec</name></name> <operator>=</operator> <name>sec</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64_t</name></type> <name>get_duration</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>DHAVContext</name> <modifier>*</modifier></type><name>dhav</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>start_pos</name> <init>= <expr><call><name>avio_tell</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>start</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>end</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>timeinfo</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name><operator>-&gt;</operator><name>seekable</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><call><name>avio_size</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>avio_rl32</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'d'</literal></expr></argument>,<argument><expr><literal type="char">'h'</literal></expr></argument>,<argument><expr><literal type="char">'a'</literal></expr></argument>,<argument><expr><literal type="char">'v'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>seek_back</name> <init>= <expr><call><name>avio_rl32</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><operator>-</operator><name>seek_back</name></expr></argument>, <argument><expr><name>SEEK_CUR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>read_chunk</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>get_timeinfo</name><argument_list>(<argument><expr><name><name>dhav</name><operator>-&gt;</operator><name>date</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>timeinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>end</name> <operator>=</operator> <call><name>av_timegm</name><argument_list>(<argument><expr><operator>&amp;</operator><name>timeinfo</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">1000LL</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>start_pos</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>start_pos</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>read_chunk</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>get_timeinfo</name><argument_list>(<argument><expr><name><name>dhav</name><operator>-&gt;</operator><name>date</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>timeinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>start</name> <operator>=</operator> <call><name>av_timegm</name><argument_list>(<argument><expr><operator>&amp;</operator><name>timeinfo</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">1000LL</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>start_pos</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>end</name> <operator>-</operator> <name>start</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dhav_read_header</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>DHAVContext</name> <modifier>*</modifier></type><name>dhav</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>signature</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ffio_ensure_seekback</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_read</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>signature</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>signature</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>signature</name></expr></argument>, <argument><expr><literal type="string">"DAHUA"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">0x400</literal> <operator>-</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dhav</name><operator>-&gt;</operator><name>last_good_pos</name></name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>signature</name></expr></argument>, <argument><expr><literal type="string">"DHAV"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">5</literal></expr></argument>, <argument><expr><name>SEEK_CUR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dhav</name><operator>-&gt;</operator><name>last_good_pos</name></name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>pb</name><operator>-&gt;</operator><name>seekable</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><call><name>avio_size</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>avio_rl32</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'d'</literal></expr></argument>,<argument><expr><literal type="char">'h'</literal></expr></argument>,<argument><expr><literal type="char">'a'</literal></expr></argument>,<argument><expr><literal type="char">'v'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>seek_back</name></decl>;</decl_stmt>

<expr_stmt><expr><name>seek_back</name> <operator>=</operator> <call><name>avio_rl32</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dhav</name><operator>-&gt;</operator><name>last_good_pos</name></name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><operator>-</operator><name>seek_back</name></expr></argument>, <argument><expr><name>SEEK_CUR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name><name>dhav</name><operator>-&gt;</operator><name>last_good_pos</name></name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>dhav</name><operator>-&gt;</operator><name>duration</name></name> <operator>=</operator> <call><name>get_duration</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dhav</name><operator>-&gt;</operator><name>last_good_pos</name></name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ctx_flags</name></name> <operator>|=</operator> <name>AVFMTCTX_NOHEADER</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dhav</name><operator>-&gt;</operator><name>video_stream_index</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dhav</name><operator>-&gt;</operator><name>audio_stream_index</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64_t</name></type> <name>get_pts</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stream_index</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>DHAVStream</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>stream_index</name></expr>]</index></name><operator>-&gt;</operator><name>priv_data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DHAVContext</name> <modifier>*</modifier></type><name>dhav</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>timeinfo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>time_t</name></type> <name>t</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>get_timeinfo</name><argument_list>(<argument><expr><name><name>dhav</name><operator>-&gt;</operator><name>date</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>timeinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>av_timegm</name><argument_list>(<argument><expr><operator>&amp;</operator><name>timeinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dst</name><operator>-&gt;</operator><name>last_time</name></name> <operator>==</operator> <name>t</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>diff</name> <init>= <expr><name><name>dhav</name><operator>-&gt;</operator><name>timestamp</name></name> <operator>-</operator> <name><name>dst</name><operator>-&gt;</operator><name>last_timestamp</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>diff</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>diff</name> <operator>+=</operator> <literal type="number">65535</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>pts</name></name> <operator>+=</operator> <name>diff</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name>t</name> <operator>*</operator> <literal type="number">1000LL</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>last_time</name></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>last_timestamp</name></name> <operator>=</operator> <name><name>dhav</name><operator>-&gt;</operator><name>timestamp</name></name></expr>;</expr_stmt>

<return>return <expr><name><name>dst</name><operator>-&gt;</operator><name>pts</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dhav_read_packet</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>DHAVContext</name> <modifier>*</modifier></type><name>dhav</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>, <decl><type ref="prev"/><name>stream_index</name></decl>;</decl_stmt>

<label><name>retry</name>:</label>

<while>while <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>read_chunk</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dhav</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <literal type="number">0xfd</literal> <operator>&amp;&amp;</operator> <name><name>dhav</name><operator>-&gt;</operator><name>video_stream_index</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><call><name>avformat_new_stream</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DHAVStream</name> <modifier>*</modifier></type><name>dst</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>st</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>dhav</name><operator>-&gt;</operator><name>video_codec</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0x1</literal></expr>:</case> <expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>=</operator> <name>AV_CODEC_ID_MPEG4</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">0x3</literal></expr>:</case> <expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>=</operator> <name>AV_CODEC_ID_MJPEG</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">0x2</literal></expr>:</case>

<case>case <expr><literal type="number">0x4</literal></expr>:</case>

<case>case <expr><literal type="number">0x8</literal></expr>:</case> <expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>=</operator> <name>AV_CODEC_ID_H264</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">0xc</literal></expr>:</case> <expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>=</operator> <name>AV_CODEC_ID_HEVC</name></expr>;</expr_stmt> <break>break;</break>

<default>default:</default> <expr_stmt><expr><call><name>avpriv_request_sample</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"Unknown video codec %X\n"</literal></expr></argument>, <argument><expr><name><name>dhav</name><operator>-&gt;</operator><name>video_codec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>duration</name></name> <operator>=</operator> <name><name>dhav</name><operator>-&gt;</operator><name>duration</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>dhav</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>dhav</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>avg_frame_rate</name><operator>.</operator><name>num</name></name> <operator>=</operator> <name><name>dhav</name><operator>-&gt;</operator><name>frame_rate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>avg_frame_rate</name><operator>.</operator><name>den</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>priv_data</name></name> <operator>=</operator> <name>dst</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>DHAVStream</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>st</name><operator>-&gt;</operator><name>priv_data</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>last_time</name></name> <operator>=</operator> <name>AV_NOPTS_VALUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dhav</name><operator>-&gt;</operator><name>video_stream_index</name></name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>index</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avpriv_set_pts_info</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>dhav</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <literal type="number">0xf0</literal> <operator>&amp;&amp;</operator> <name><name>dhav</name><operator>-&gt;</operator><name>audio_stream_index</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><call><name>avformat_new_stream</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DHAVStream</name> <modifier>*</modifier></type><name>dst</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>st</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>dhav</name><operator>-&gt;</operator><name>audio_codec</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0x07</literal></expr>:</case> <expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>=</operator> <name>AV_CODEC_ID_PCM_S8</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">0x0c</literal></expr>:</case> <expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>=</operator> <name>AV_CODEC_ID_PCM_S16LE</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">0x10</literal></expr>:</case> <expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>=</operator> <name>AV_CODEC_ID_PCM_S16LE</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">0x0a</literal></expr>:</case> <expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>=</operator> <name>AV_CODEC_ID_PCM_MULAW</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">0x16</literal></expr>:</case> <expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>=</operator> <name>AV_CODEC_ID_PCM_MULAW</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">0x0e</literal></expr>:</case> <expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>=</operator> <name>AV_CODEC_ID_PCM_ALAW</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">0x1a</literal></expr>:</case> <expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>=</operator> <name>AV_CODEC_ID_AAC</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">0x1f</literal></expr>:</case> <expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>=</operator> <name>AV_CODEC_ID_MP2</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">0x21</literal></expr>:</case> <expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>=</operator> <name>AV_CODEC_ID_MP3</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">0x0d</literal></expr>:</case> <expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>=</operator> <name>AV_CODEC_ID_ADPCM_MS</name></expr>;</expr_stmt> <break>break;</break>

<default>default:</default> <expr_stmt><expr><call><name>avpriv_request_sample</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"Unknown audio codec %X\n"</literal></expr></argument>, <argument><expr><name><name>dhav</name><operator>-&gt;</operator><name>audio_codec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>duration</name></name> <operator>=</operator> <name><name>dhav</name><operator>-&gt;</operator><name>duration</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <name><name>dhav</name><operator>-&gt;</operator><name>audio_channels</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>=</operator> <name><name>dhav</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>priv_data</name></name> <operator>=</operator> <name>dst</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>DHAVStream</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>st</name><operator>-&gt;</operator><name>priv_data</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>last_time</name></name> <operator>=</operator> <name>AV_NOPTS_VALUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dhav</name><operator>-&gt;</operator><name>audio_stream_index</name></name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>index</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avpriv_set_pts_info</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>stream_index</name> <operator>=</operator> <ternary><condition><expr><name><name>dhav</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <literal type="number">0xf0</literal></expr> ?</condition><then> <expr><name><name>dhav</name><operator>-&gt;</operator><name>audio_stream_index</name></name></expr> </then><else>: <expr><name><name>dhav</name><operator>-&gt;</operator><name>video_stream_index</name></name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>stream_index</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>avio_rl32</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'d'</literal></expr></argument>,<argument><expr><literal type="char">'h'</literal></expr></argument>,<argument><expr><literal type="char">'a'</literal></expr></argument>,<argument><expr><literal type="char">'v'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<goto>goto <name>retry</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_get_packet</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>stream_index</name></name> <operator>=</operator> <name>stream_index</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dhav</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <literal type="number">0xfc</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>AV_PKT_FLAG_KEY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>duration</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>stream_index</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <call><name>get_pts</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>stream_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <name><name>dhav</name><operator>-&gt;</operator><name>last_good_pos</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>avio_rl32</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'d'</literal></expr></argument>,<argument><expr><literal type="char">'h'</literal></expr></argument>,<argument><expr><literal type="char">'a'</literal></expr></argument>,<argument><expr><literal type="char">'v'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dhav_read_seek</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stream_index</name></decl></parameter>,

<parameter><decl><type><name>int64_t</name></type> <name>timestamp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>DHAVContext</name> <modifier>*</modifier></type><name>dhav</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>stream_index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><call><name>av_index_search_timestamp</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>pts</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>index</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>avio_seek</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>index_entries</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>pos</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pts</name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>index_entries</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>timestamp</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>n</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DHAVStream</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><name><name>st</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name>pts</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>last_time</name></name> <operator>=</operator> <name>AV_NOPTS_VALUE</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>dhav</name><operator>-&gt;</operator><name>last_good_pos</name></name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name>AVInputFormat</name></type> <name>ff_dhav_demuxer</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"dhav"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Video DAV"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>DHAVContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>read_probe</name> <operator>=</operator> <name>dhav_probe</name></expr>,

<expr><operator>.</operator><name>read_header</name> <operator>=</operator> <name>dhav_read_header</name></expr>,

<expr><operator>.</operator><name>read_packet</name> <operator>=</operator> <name>dhav_read_packet</name></expr>,

<expr><operator>.</operator><name>read_seek</name> <operator>=</operator> <name>dhav_read_seek</name></expr>,

<expr><operator>.</operator><name>extensions</name> <operator>=</operator> <literal type="string">"dav"</literal></expr>,

<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>AVFMT_GENERIC_INDEX</name> <operator>|</operator> <name>AVFMT_NO_BYTE_SEEK</name> <operator>|</operator> <name>AVFMT_TS_DISCONT</name> <operator>|</operator> <name>AVFMT_TS_NONSTRICT</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
