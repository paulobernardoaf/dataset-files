<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavformat\mxf.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avformat.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><name>uint8_t</name></type> <name><name>UID</name><index>[<expr><literal type="number">16</literal></expr>]</index></name>;</typedef>

<enum>enum <name>MXFMetadataSetType</name> <block>{

<decl><name>AnyType</name></decl>,

<decl><name>MaterialPackage</name></decl>,

<decl><name>SourcePackage</name></decl>,

<decl><name>SourceClip</name></decl>,

<decl><name>TimecodeComponent</name></decl>,

<decl><name>PulldownComponent</name></decl>,

<decl><name>Sequence</name></decl>,

<decl><name>MultipleDescriptor</name></decl>,

<decl><name>Descriptor</name></decl>,

<decl><name>Track</name></decl>,

<decl><name>CryptoContext</name></decl>,

<decl><name>Preface</name></decl>,

<decl><name>Identification</name></decl>,

<decl><name>ContentStorage</name></decl>,

<decl><name>SubDescriptor</name></decl>,

<decl><name>IndexTableSegment</name></decl>,

<decl><name>EssenceContainerData</name></decl>,

<decl><name>EssenceGroup</name></decl>,

<decl><name>TaggedValue</name></decl>,

<decl><name>TapeDescriptor</name></decl>,

<decl><name>AVCSubDescriptor</name></decl>,

}</block>;</enum>

<enum>enum <name>MXFFrameLayout</name> <block>{

<decl><name>FullFrame</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>SeparateFields</name></decl>,

<decl><name>OneField</name></decl>,

<decl><name>MixedFields</name></decl>,

<decl><name>SegmentedFrame</name></decl>,

}</block>;</enum>

<typedef>typedef <type><struct>struct <name>MXFContentPackageRate</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>rate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVRational</name></type> <name>tb</name></decl>;</decl_stmt>

}</block></struct></type> <name>MXFContentPackageRate</name>;</typedef>

<typedef>typedef <type><struct>struct <name>KLVPacket</name> <block>{

<decl_stmt><decl><type><name>UID</name></type> <name>key</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>length</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>next_klv</name></decl>;</decl_stmt>

}</block></struct></type> <name>KLVPacket</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{

<decl><name>NormalWrap</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>D10D11Wrap</name></decl>,

<decl><name>RawAWrap</name></decl>,

<decl><name>RawVWrap</name></decl>

}</block></enum></type> <name>MXFWrappingIndicatorType</name>;</typedef>

<typedef>typedef <type><struct>struct <name>MXFCodecUL</name> <block>{

<decl_stmt><decl><type><name>UID</name></type> <name>uid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>matching_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>desc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>wrapping_indicator_pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MXFWrappingIndicatorType</name></type> <name>wrapping_indicator_type</name></decl>;</decl_stmt>

}</block></struct></type> <name>MXFCodecUL</name>;</typedef>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>MXFCodecUL</name></type> <name><name>ff_mxf_data_definition_uls</name><index>[]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>MXFCodecUL</name></type> <name><name>ff_mxf_codec_uls</name><index>[]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>MXFCodecUL</name></type> <name><name>ff_mxf_pixel_format_uls</name><index>[]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>MXFCodecUL</name></type> <name><name>ff_mxf_codec_tag_uls</name><index>[]</index></name></decl>;</decl_stmt>

<function_decl><type><name>int</name></type> <name>ff_mxf_decode_pixel_layout</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>pixel_layout</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name> <modifier>*</modifier></type><name>pix_fmt</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_mxf_get_content_package_rate</name><parameter_list>(<parameter><decl><type><name>AVRational</name></type> <name>time_base</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRIxUID</name></cpp:macro> <cpp:value>"%02x.%02x.%02x.%02x." "%02x.%02x.%02x.%02x." "%02x.%02x.%02x.%02x." "%02x.%02x.%02x.%02x"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UID_ARG</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x)[0], (x)[1], (x)[2], (x)[3], (x)[4], (x)[5], (x)[6], (x)[7], (x)[8], (x)[9], (x)[10], (x)[11], (x)[12], (x)[13], (x)[14], (x)[15]</cpp:value></cpp:define> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRINT_KEY</name><parameter_list>(<parameter><type><name>pc</name></type></parameter>, <parameter><type><name>s</name></type></parameter>, <parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>av_log(pc, AV_LOG_VERBOSE, "%s " "0x%02x,0x%02x,0x%02x,0x%02x," "0x%02x,0x%02x,0x%02x,0x%02x," "0x%02x,0x%02x,0x%02x,0x%02x," "0x%02x,0x%02x,0x%02x,0x%02x ", s, UID_ARG(x)); av_log(pc, AV_LOG_INFO, "%s " "%02x.%02x.%02x.%02x." "%02x.%02x.%02x.%02x." "%02x.%02x.%02x.%02x." "%02x.%02x.%02x.%02x\n", s, UID_ARG(x))</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRINT_KEY</name><parameter_list>(<parameter><type><name>pc</name></type></parameter>, <parameter><type><name>s</name></type></parameter>, <parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if(0) av_log(pc, AV_LOG_VERBOSE, "%s " "0x%02x,0x%02x,0x%02x,0x%02x," "0x%02x,0x%02x,0x%02x,0x%02x," "0x%02x,0x%02x,0x%02x,0x%02x," "0x%02x,0x%02x,0x%02x,0x%02x ", s, UID_ARG(x)); }while(0)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
