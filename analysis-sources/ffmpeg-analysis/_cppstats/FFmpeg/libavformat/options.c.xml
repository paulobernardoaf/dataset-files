<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavformat\options.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avformat.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avio_internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<function><type><name>FF_DISABLE_DEPRECATION_WARNINGS</name>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"options_table.h"</cpp:file></cpp:include>

<name>FF_ENABLE_DEPRECATION_WARNINGS</name>

<specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>format_to_name</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>ptr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFormatContext</name><modifier>*</modifier></type> <name>fc</name> <init>= <expr><operator>(</operator><name>AVFormatContext</name><operator>*</operator><operator>)</operator> <name>ptr</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>fc</name><operator>-&gt;</operator><name>iformat</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name><name>fc</name><operator>-&gt;</operator><name>iformat</name><operator>-&gt;</operator><name>name</name></name></expr>;</return></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name><name>fc</name><operator>-&gt;</operator><name>oformat</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name><name>fc</name><operator>-&gt;</operator><name>oformat</name><operator>-&gt;</operator><name>name</name></name></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content> <return>return <expr><literal type="string">"NULL"</literal></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>format_child_next</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>prev</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>obj</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>prev</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name> <operator>&amp;&amp;</operator>

<operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>iformat</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>iformat</name><operator>-&gt;</operator><name>priv_class</name></name><operator>)</operator> <operator>||</operator>

<name><name>s</name><operator>-&gt;</operator><name>oformat</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>oformat</name><operator>-&gt;</operator><name>priv_class</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>pb</name><operator>-&gt;</operator><name>av_class</name></name> <operator>&amp;&amp;</operator> <name>prev</name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>format_child_class_next</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>prev</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVInputFormat</name> <modifier>*</modifier></type><name>ifmt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVOutputFormat</name> <modifier>*</modifier></type><name>ofmt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>prev</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>&amp;</operator><name>ff_avio_class</name></expr>;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><operator>(</operator><name>ifmt</name> <operator>=</operator> <call><name>av_iformat_next</name><argument_list>(<argument><expr><name>ifmt</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>ifmt</name><operator>-&gt;</operator><name>priv_class</name></name> <operator>==</operator> <name>prev</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ifmt</name></expr>)</condition><block type="pseudo"><block_content>

<while>while <condition>(<expr><operator>(</operator><name>ofmt</name> <operator>=</operator> <call><name>av_oformat_next</name><argument_list>(<argument><expr><name>ofmt</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>ofmt</name><operator>-&gt;</operator><name>priv_class</name></name> <operator>==</operator> <name>prev</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></while></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ofmt</name></expr>)</condition><block type="pseudo"><block_content>

<while>while <condition>(<expr><name>ifmt</name> <operator>=</operator> <call><name>av_iformat_next</name><argument_list>(<argument><expr><name>ifmt</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>ifmt</name><operator>-&gt;</operator><name>priv_class</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>ifmt</name><operator>-&gt;</operator><name>priv_class</name></name></expr>;</return></block_content></block></if></if_stmt></block_content></block></while></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name>ofmt</name> <operator>=</operator> <call><name>av_oformat_next</name><argument_list>(<argument><expr><name>ofmt</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>ofmt</name><operator>-&gt;</operator><name>priv_class</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>ofmt</name><operator>-&gt;</operator><name>priv_class</name></name></expr>;</return></block_content></block></if></if_stmt></block_content></block></while>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>AVClassCategory</name></type> <name>get_category</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFormatContext</name><modifier>*</modifier></type> <name>s</name> <init>= <expr><name>ptr</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>iformat</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>AV_CLASS_CATEGORY_DEMUXER</name></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content> <return>return <expr><name>AV_CLASS_CATEGORY_MUXER</name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>av_format_context_class</name> <init>= <expr><block>{

<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"AVFormatContext"</literal></expr>,

<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>format_to_name</name></expr>,

<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>avformat_options</name></expr>,

<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,

<expr><operator>.</operator><name>child_next</name> <operator>=</operator> <name>format_child_next</name></expr>,

<expr><operator>.</operator><name>child_class_next</name> <operator>=</operator> <name>format_child_class_next</name></expr>,

<expr><operator>.</operator><name>category</name> <operator>=</operator> <name>AV_CLASS_CATEGORY_MUXER</name></expr>,

<expr><operator>.</operator><name>get_category</name> <operator>=</operator> <name>get_category</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>io_open_default</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier><modifier>*</modifier></type><name>pb</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>url</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>AVDictionary</name> <modifier>*</modifier><modifier>*</modifier></type><name>options</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>loglevel</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>url</name></name></expr></argument>)</argument_list></call> <operator>||</operator>

<name><name>s</name><operator>-&gt;</operator><name>iformat</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>iformat</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"image2"</literal></expr></argument>)</argument_list></call> <operator>||</operator>

<name><name>s</name><operator>-&gt;</operator><name>oformat</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>oformat</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"image2"</literal></expr></argument>)</argument_list></call></expr>

)</condition> <block>{<block_content>

<expr_stmt><expr><name>loglevel</name> <operator>=</operator> <name>AV_LOG_DEBUG</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>loglevel</name> <operator>=</operator> <name>AV_LOG_INFO</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>loglevel</name></expr></argument>, <argument><expr><literal type="string">"Opening \'%s\' for %s\n"</literal></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><ternary><condition><expr><name>flags</name> <operator>&amp;</operator> <name>AVIO_FLAG_WRITE</name></expr> ?</condition><then> <expr><literal type="string">"writing"</literal></expr> </then><else>: <expr><literal type="string">"reading"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_OLD_OPEN_CALLBACKS</name></expr></cpp:if>

<macro><name>FF_DISABLE_DEPRECATION_WARNINGS</name></macro>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>open_cb</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name><name>s</name><operator>-&gt;</operator><name>open_cb</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>interrupt_callback</name></name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<macro><name>FF_ENABLE_DEPRECATION_WARNINGS</name></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><call><name>ffio_open_whitelist</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>interrupt_callback</name></name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>protocol_whitelist</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>protocol_blacklist</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>io_close_default</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>avio_close</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>avformat_get_context_defaults</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>AVFormatContext</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>av_class</name></name> <operator>=</operator> <operator>&amp;</operator><name>av_format_context_class</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>io_open</name></name> <operator>=</operator> <name>io_open_default</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>io_close</name></name> <operator>=</operator> <name>io_close_default</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_opt_set_defaults</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>avformat_alloc_context</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>ic</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFormatInternal</name> <modifier>*</modifier></type><name>internal</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ic</name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>AVFormatContext</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ic</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ic</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>internal</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>internal</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>internal</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>ic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>avformat_get_context_defaults</name><argument_list>(<argument><expr><name>ic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ic</name><operator>-&gt;</operator><name>internal</name></name> <operator>=</operator> <name>internal</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ic</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name>AV_NOPTS_VALUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ic</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>raw_packet_buffer_remaining_size</name></name> <operator>=</operator> <name>RAW_PACKET_BUFFER_SIZE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ic</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>shortest_end</name></name> <operator>=</operator> <name>AV_NOPTS_VALUE</name></expr>;</expr_stmt>

<return>return <expr><name>ic</name></expr>;</return>

</block_content>}</block></function>

<function><type><name><name>enum</name> <name>AVDurationEstimationMethod</name></name></type> <name>av_fmt_ctx_get_duration_estimation_method</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVFormatContext</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>ctx</name><operator>-&gt;</operator><name>duration_estimation_method</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>avformat_get_class</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>&amp;</operator><name>av_format_context_class</name></expr>;</return>

</block_content>}</block></function>

</unit>
