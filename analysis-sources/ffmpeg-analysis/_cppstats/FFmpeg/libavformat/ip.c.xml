<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavformat\ip.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ip.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avstring.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>int</name></type> <name>compare_addr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr_storage</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr_storage</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>ss_family</name></name> <operator>!=</operator> <name><name>b</name><operator>-&gt;</operator><name>ss_family</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>ss_family</name></name> <operator>==</operator> <name>AF_INET</name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>(</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> struct <name>sockaddr_in</name> <operator>*</operator><operator>)</operator><name>a</name><operator>)</operator><operator>-&gt;</operator><name><name>sin_addr</name><operator>.</operator><name>s_addr</name></name> <operator>!=</operator>

<operator>(</operator><operator>(</operator><specifier>const</specifier> struct <name>sockaddr_in</name> <operator>*</operator><operator>)</operator><name>b</name><operator>)</operator><operator>-&gt;</operator><name><name>sin_addr</name><operator>.</operator><name>s_addr</name></name><operator>)</operator></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_STRUCT_SOCKADDR_IN6</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>ss_family</name></name> <operator>==</operator> <name>AF_INET6</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>s6_addr_a</name> <init>= <expr><operator>(</operator><operator>(</operator><specifier>const</specifier> struct <name>sockaddr_in6</name> <operator>*</operator><operator>)</operator><name>a</name><operator>)</operator><operator>-&gt;</operator><name><name>sin6_addr</name><operator>.</operator><name>s6_addr</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>s6_addr_b</name> <init>= <expr><operator>(</operator><operator>(</operator><specifier>const</specifier> struct <name>sockaddr_in6</name> <operator>*</operator><operator>)</operator><name>b</name><operator>)</operator><operator>-&gt;</operator><name><name>sin6_addr</name><operator>.</operator><name>s6_addr</name></name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>memcmp</name><argument_list>(<argument><expr><name>s6_addr_a</name></expr></argument>, <argument><expr><name>s6_addr_b</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_ip_check_source_lists</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sockaddr_storage</name></name> <modifier>*</modifier></type><name>source_addr_ptr</name></decl></parameter>, <parameter><decl><type><name>IPSourceFilters</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>nb_exclude_addrs</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_exclude_addrs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>compare_addr</name><argument_list>(<argument><expr><name>source_addr_ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>exclude_addrs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>nb_include_addrs</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_include_addrs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>compare_addr</name><argument_list>(<argument><expr><name>source_addr_ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>include_addrs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>ff_ip_resolve_host</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>log_ctx</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hostname</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>port</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>family</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name></type> <name>hints</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>error</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>sport</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>service</name> <init>= <expr><literal type="string">"0"</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>port</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>sport</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sport</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>service</name> <operator>=</operator> <name>sport</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>hostname</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>hostname</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>hostname</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'?'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>node</name> <operator>=</operator> <name>hostname</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_socktype</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_family</name></name> <operator>=</operator> <name>family</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_flags</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>error</name> <operator>=</operator> <call><name>getaddrinfo</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>service</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>log_ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"getaddrinfo(%s, %s): %s\n"</literal></expr></argument>,

<argument><expr><ternary><condition><expr><name>node</name></expr> ?</condition><then> <expr><name>node</name></expr> </then><else>: <expr><literal type="string">"unknown"</literal></expr></else></ternary></expr></argument>,

<argument><expr><name>service</name></expr></argument>,

<argument><expr><call><name>gai_strerror</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ip_parse_addr_list</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>log_ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>sockaddr_storage</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>address_list_ptr</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>address_list_size_ptr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>ai</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>buf</name> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>host</name> <init>= <expr><call><name>av_get_token</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>host</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ai</name> <operator>=</operator> <call><name>ff_ip_resolve_host</name><argument_list>(<argument><expr><name>log_ctx</name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SOCK_DGRAM</name></expr></argument>, <argument><expr><name>AF_UNSPEC</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ai</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_storage</name></name></type> <name>source_addr</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>source_addr</name></expr></argument>, <argument><expr><name><name>ai</name><operator>-&gt;</operator><name>ai_addr</name></name></expr></argument>, <argument><expr><name><name>ai</name><operator>-&gt;</operator><name>ai_addrlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>freeaddrinfo</name><argument_list>(<argument><expr><name>ai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_dynarray2_add</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>address_list_ptr</name></expr></argument>, <argument><expr><name>address_list_size_ptr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>source_addr</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>source_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>address_list_ptr</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>buf</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>buf</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></while>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ip_parse_sources_and_blocks</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>log_ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>IPSourceFilters</name> <modifier>*</modifier></type><name>filters</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>parse_include_list</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>parse_include_list</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ip_parse_addr_list</name><argument_list>(<argument><expr><name>log_ctx</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>filters</name><operator>-&gt;</operator><name>include_addrs</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>filters</name><operator>-&gt;</operator><name>nb_include_addrs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ip_parse_addr_list</name><argument_list>(<argument><expr><name>log_ctx</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>filters</name><operator>-&gt;</operator><name>exclude_addrs</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>filters</name><operator>-&gt;</operator><name>nb_exclude_addrs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>filters</name><operator>-&gt;</operator><name>nb_include_addrs</name></name> <operator>&amp;&amp;</operator> <name><name>filters</name><operator>-&gt;</operator><name>nb_exclude_addrs</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>log_ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Simultaneously including and excluding sources is not supported.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_ip_parse_sources</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>log_ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>IPSourceFilters</name> <modifier>*</modifier></type><name>filters</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>ip_parse_sources_and_blocks</name><argument_list>(<argument><expr><name>log_ctx</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>filters</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_ip_parse_blocks</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>log_ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>IPSourceFilters</name> <modifier>*</modifier></type><name>filters</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>ip_parse_sources_and_blocks</name><argument_list>(<argument><expr><name>log_ctx</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>filters</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_ip_reset_filters</name><parameter_list>(<parameter><decl><type><name>IPSourceFilters</name> <modifier>*</modifier></type><name>filters</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>filters</name><operator>-&gt;</operator><name>exclude_addrs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>filters</name><operator>-&gt;</operator><name>include_addrs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>filters</name><operator>-&gt;</operator><name>nb_include_addrs</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>filters</name><operator>-&gt;</operator><name>nb_exclude_addrs</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
