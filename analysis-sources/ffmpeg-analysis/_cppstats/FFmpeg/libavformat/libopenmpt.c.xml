<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavformat\libopenmpt.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libopenmpt/libopenmpt.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libopenmpt/libopenmpt_stream_callbacks_file.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libopenmpt/libopenmpt_version.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>OPENMPT_API_VERSION_MAKE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPENMPT_API_VERSION_MAKE</name><parameter_list>(<parameter><type><name>major</name></type></parameter>, <parameter><type><name>minor</name></type></parameter>, <parameter><type><name>patch</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((major)&lt;&lt;24)|((minor)&lt;&lt;16)|((patch)&lt;&lt;0))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>OPENMPT_API_VERSION_AT_LEAST</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPENMPT_API_VERSION_AT_LEAST</name><parameter_list>(<parameter><type><name>major</name></type></parameter>, <parameter><type><name>minor</name></type></parameter>, <parameter><type><name>patch</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(OPENMPT_API_VERSION &gt;= OPENMPT_API_VERSION_MAKE((major), (minor), (patch)))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avstring.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avformat.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>OpenMPTContext</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>openmpt_module</name> <modifier>*</modifier></type><name>module</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>channels</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>duration</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sample_rate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>layout</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>subsong</name></decl>;</decl_stmt>

}</block></struct></type> <name>OpenMPTContext</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(OpenMPTContext, x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A</name></cpp:macro> <cpp:value>AV_OPT_FLAG_AUDIO_PARAM</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D</name></cpp:macro> <cpp:value>AV_OPT_FLAG_DECODING_PARAM</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>options</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"sample_rate"</literal></expr>, <expr><literal type="string">"set sample rate"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>sample_rate</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">48000</literal></expr> }</block></expr>, <expr><literal type="number">1000</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>A</name> <operator>|</operator> <name>D</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"layout"</literal></expr>, <expr><literal type="string">"set channel layout"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>layout</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_CHANNEL_LAYOUT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AV_CH_LAYOUT_STEREO</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT64_MAX</name></expr>, <expr><name>A</name> <operator>|</operator> <name>D</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"subsong"</literal></expr>, <expr><literal type="string">"set subsong"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>subsong</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">2</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">2</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>A</name> <operator>|</operator> <name>D</name></expr>, <expr><literal type="string">"subsong"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"all"</literal></expr>, <expr><literal type="string">"all"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A</name> <operator>|</operator> <name>D</name></expr>, <expr><literal type="string">"subsong"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"auto"</literal></expr>, <expr><literal type="string">"auto"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">2</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A</name> <operator>|</operator> <name>D</name></expr>, <expr><literal type="string">"subsong"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>openmpt_logfunc</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>message</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userdata</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>level</name> <init>= <expr><name>AV_LOG_INFO</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><literal type="string">"ERROR"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>level</name> <operator>=</operator> <name>AV_LOG_ERROR</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>userdata</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>add_meta</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>meta</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { const char *value = meta; if (value &amp;&amp; value[0]) av_dict_set(&amp;s-&gt;metadata, name, value, 0); openmpt_free_string(value); } while(0)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>read_header_openmpt</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OpenMPTContext</name> <modifier>*</modifier></type><name>openmpt</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>OPENMPT_API_VERSION_AT_LEAST</name><argument_list>(<argument><expr><literal type="number">0</literal><operator>,</operator><literal type="number">3</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>int</name></type> <name>error</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>avio_size</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>avio_read</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Reading input buffer failed.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>size</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>OPENMPT_API_VERSION_AT_LEAST</name><argument_list>(<argument><expr><literal type="number">0</literal><operator>,</operator><literal type="number">3</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name>error</name> <operator>=</operator> <name>OPENMPT_ERROR_OK</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>openmpt</name><operator>-&gt;</operator><name>module</name></name> <operator>=</operator> <call><name>openmpt_module_create_from_memory2</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>openmpt_logfunc</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>openmpt</name><operator>-&gt;</operator><name>module</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>error</name> <operator>==</operator> <name>OPENMPT_ERROR_OUT_OF_MEMORY</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>error</name> <operator>&gt;=</operator> <name>OPENMPT_ERROR_GENERAL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_UNKNOWN</name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name><name>openmpt</name><operator>-&gt;</operator><name>module</name></name> <operator>=</operator> <call><name>openmpt_module_create_from_memory</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>openmpt_logfunc</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>openmpt</name><operator>-&gt;</operator><name>module</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>openmpt</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <call><name>av_get_channel_layout_nb_channels</name><argument_list>(<argument><expr><name><name>openmpt</name><operator>-&gt;</operator><name>layout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>openmpt</name><operator>-&gt;</operator><name>subsong</name></name> <operator>&gt;=</operator> <call><name>openmpt_module_get_num_subsongs</name><argument_list>(<argument><expr><name><name>openmpt</name><operator>-&gt;</operator><name>module</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>openmpt_module_destroy</name><argument_list>(<argument><expr><name><name>openmpt</name><operator>-&gt;</operator><name>module</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid subsong index: %d\n"</literal></expr></argument>, <argument><expr><name><name>openmpt</name><operator>-&gt;</operator><name>subsong</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>openmpt</name><operator>-&gt;</operator><name>subsong</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>openmpt</name><operator>-&gt;</operator><name>subsong</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_dict_set_int</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><literal type="string">"track"</literal></expr></argument>, <argument><expr><name><name>openmpt</name><operator>-&gt;</operator><name>subsong</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>openmpt_module_select_subsong</name><argument_list>(<argument><expr><name><name>openmpt</name><operator>-&gt;</operator><name>module</name></name></expr></argument>, <argument><expr><name><name>openmpt</name><operator>-&gt;</operator><name>subsong</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>openmpt_module_destroy</name><argument_list>(<argument><expr><name><name>openmpt</name><operator>-&gt;</operator><name>module</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Could not select requested subsong: %d"</literal></expr></argument>, <argument><expr><name><name>openmpt</name><operator>-&gt;</operator><name>subsong</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>openmpt</name><operator>-&gt;</operator><name>duration</name></name> <operator>=</operator> <call><name>openmpt_module_get_duration_seconds</name><argument_list>(<argument><expr><name><name>openmpt</name><operator>-&gt;</operator><name>module</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_meta</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"artist"</literal></expr></argument>, <argument><expr><call><name>openmpt_module_get_metadata</name><argument_list>(<argument><expr><name><name>openmpt</name><operator>-&gt;</operator><name>module</name></name></expr></argument>, <argument><expr><literal type="string">"artist"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_meta</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"title"</literal></expr></argument>, <argument><expr><call><name>openmpt_module_get_metadata</name><argument_list>(<argument><expr><name><name>openmpt</name><operator>-&gt;</operator><name>module</name></name></expr></argument>, <argument><expr><literal type="string">"title"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_meta</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"encoder"</literal></expr></argument>, <argument><expr><call><name>openmpt_module_get_metadata</name><argument_list>(<argument><expr><name><name>openmpt</name><operator>-&gt;</operator><name>module</name></name></expr></argument>, <argument><expr><literal type="string">"tracker"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_meta</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"comment"</literal></expr></argument>, <argument><expr><call><name>openmpt_module_get_metadata</name><argument_list>(<argument><expr><name><name>openmpt</name><operator>-&gt;</operator><name>module</name></name></expr></argument>, <argument><expr><literal type="string">"message"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_meta</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"date"</literal></expr></argument>, <argument><expr><call><name>openmpt_module_get_metadata</name><argument_list>(<argument><expr><name><name>openmpt</name><operator>-&gt;</operator><name>module</name></name></expr></argument>, <argument><expr><literal type="string">"date"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>st</name> <operator>=</operator> <call><name>avformat_new_stream</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>st</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>openmpt_module_destroy</name><argument_list>(<argument><expr><name><name>openmpt</name><operator>-&gt;</operator><name>module</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>openmpt</name><operator>-&gt;</operator><name>module</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>avpriv_set_pts_info</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>AV_TIME_BASE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>duration</name></name> <operator>=</operator> <call><name>llrint</name><argument_list>(<argument><expr><name><name>openmpt</name><operator>-&gt;</operator><name>duration</name></name><operator>*</operator><name>AV_TIME_BASE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>=</operator> <call><name>AV_NE</name><argument_list>(<argument><expr><name>AV_CODEC_ID_PCM_F32BE</name></expr></argument>, <argument><expr><name>AV_CODEC_ID_PCM_F32LE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <name><name>openmpt</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>=</operator> <name><name>openmpt</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AUDIO_PKT_SIZE</name></cpp:macro> <cpp:value>2048</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>read_packet_openmpt</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>OpenMPTContext</name> <modifier>*</modifier></type><name>openmpt</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n_samples</name> <init>= <expr><name>AUDIO_PKT_SIZE</name> <operator>/</operator> <operator>(</operator><ternary><condition><expr><name><name>openmpt</name><operator>-&gt;</operator><name>channels</name></name></expr> ?</condition><then> <expr><name><name>openmpt</name><operator>-&gt;</operator><name>channels</name></name><operator>*</operator><literal type="number">4</literal></expr> </then><else>: <expr><literal type="number">4</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_new_packet</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>AUDIO_PKT_SIZE</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>openmpt</name><operator>-&gt;</operator><name>channels</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>openmpt_module_read_float_mono</name><argument_list>(<argument><expr><name><name>openmpt</name><operator>-&gt;</operator><name>module</name></name></expr></argument>, <argument><expr><name><name>openmpt</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>,

<argument><expr><name>n_samples</name></expr></argument>, <argument><expr><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>openmpt_module_read_interleaved_float_stereo</name><argument_list>(<argument><expr><name><name>openmpt</name><operator>-&gt;</operator><name>module</name></name></expr></argument>, <argument><expr><name><name>openmpt</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>,

<argument><expr><name>n_samples</name></expr></argument>, <argument><expr><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">4</literal></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>openmpt_module_read_interleaved_float_quad</name><argument_list>(<argument><expr><name><name>openmpt</name><operator>-&gt;</operator><name>module</name></name></expr></argument>, <argument><expr><name><name>openmpt</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>,

<argument><expr><name>n_samples</name></expr></argument>, <argument><expr><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unsupported number of channels: %d"</literal></expr></argument>, <argument><expr><name><name>openmpt</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_EOF</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>ret</name> <operator>*</operator> <operator>(</operator><name><name>openmpt</name><operator>-&gt;</operator><name>channels</name></name> <operator>*</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>read_close_openmpt</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>OpenMPTContext</name> <modifier>*</modifier></type><name>openmpt</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>openmpt_module_destroy</name><argument_list>(<argument><expr><name><name>openmpt</name><operator>-&gt;</operator><name>module</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>openmpt</name><operator>-&gt;</operator><name>module</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>read_seek_openmpt</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stream_idx</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>ts</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>OpenMPTContext</name> <modifier>*</modifier></type><name>openmpt</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>openmpt_module_set_position_seconds</name><argument_list>(<argument><expr><name><name>openmpt</name><operator>-&gt;</operator><name>module</name></name></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>ts</name><operator>/</operator><name>AV_TIME_BASE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>probe_openmpt_extension</name><parameter_list>(<parameter><decl><type><name>AVProbeData</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ext</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>filename</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ext</name> <operator>=</operator> <call><name>strrchr</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ext</name> <operator>&amp;&amp;</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>ext</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ext</name><operator>++</operator></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><call><name>openmpt_is_extension_supported</name><argument_list>(<argument><expr><name>ext</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVPROBE_SCORE_EXTENSION</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>read_probe_openmpt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVProbeData</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>OPENMPT_API_VERSION_AT_LEAST</name><argument_list>(<argument><expr><literal type="number">0</literal><operator>,</operator><literal type="number">3</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>int</name></type> <name>probe_result</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>buf</name></name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>buf_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>probe_result</name> <operator>=</operator> <call><name>openmpt_probe_file_header_without_filesize</name><argument_list>(

<argument><expr><name>OPENMPT_PROBE_FILE_HEADER_FLAGS_DEFAULT</name></expr></argument>,

<argument><expr><name><name>p</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>buf_size</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>openmpt_logfunc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>probe_result</name> <operator>==</operator> <name>OPENMPT_PROBE_FILE_HEADER_RESULT_SUCCESS</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>AVPROBE_SCORE_MIME</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>probe_result</name> <operator>==</operator> <name>OPENMPT_PROBE_FILE_HEADER_RESULT_WANTMOREDATA</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>probe_openmpt_extension</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>AVPROBE_SCORE_RETRY</name></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>buf_size</name></name> <operator>&gt;=</operator> <call><name>openmpt_probe_file_header_get_recommended_size</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>AVPROBE_SCORE_RETRY</name> <operator>/</operator> <literal type="number">2</literal></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>probe_result</name> <operator>==</operator> <name>OPENMPT_PROBE_FILE_HEADER_RESULT_FAILURE</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><call><name>probe_openmpt_extension</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>class_openmpt</name> <init>= <expr><block>{

<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"libopenmpt"</literal></expr>,

<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,

<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>options</name></expr>,

<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVInputFormat</name></type> <name>ff_libopenmpt_demuxer</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"libopenmpt"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Tracker formats (libopenmpt)"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>OpenMPTContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>read_probe</name> <operator>=</operator> <name>read_probe_openmpt</name></expr>,

<expr><operator>.</operator><name>read_header</name> <operator>=</operator> <name>read_header_openmpt</name></expr>,

<expr><operator>.</operator><name>read_packet</name> <operator>=</operator> <name>read_packet_openmpt</name></expr>,

<expr><operator>.</operator><name>read_close</name> <operator>=</operator> <name>read_close_openmpt</name></expr>,

<expr><operator>.</operator><name>read_seek</name> <operator>=</operator> <name>read_seek_openmpt</name></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>class_openmpt</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>OPENMPT_API_VERSION_AT_LEAST</name><argument_list>(<argument><expr><literal type="number">0</literal><operator>,</operator><literal type="number">3</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><operator>.</operator><name>extensions</name> <operator>=</operator> <literal type="string">"669,amf,ams,dbm,digi,dmf,dsm,dtm,far,gdm,ice,imf,it,j2b,m15,mdl,med,mmcmp,mms,mo3,mod,mptm,mt2,mtm,nst,okt,plm,ppm,psm,pt36,ptm,s3m,sfx,sfx2,st26,stk,stm,stp,ult,umx,wow,xm,xpk"</literal></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><operator>.</operator><name>extensions</name> <operator>=</operator> <literal type="string">"669,amf,ams,dbm,digi,dmf,dsm,far,gdm,ice,imf,it,j2b,m15,mdl,med,mmcmp,mms,mo3,mod,mptm,mt2,mtm,nst,okt,plm,ppm,psm,pt36,ptm,s3m,sfx,sfx2,st26,stk,stm,ult,umx,wow,xm,xpk"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr></init></decl>;</decl_stmt>

</unit>
