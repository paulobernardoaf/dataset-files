<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavformat\async.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avstring.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/error.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/fifo.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/log.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/thread.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"url.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_UNISTD_H</name></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUFFER_CAPACITY</name></cpp:macro> <cpp:value>(4 * 1024 * 1024)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>READ_BACK_CAPACITY</name></cpp:macro> <cpp:value>(4 * 1024 * 1024)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHORT_SEEK_THRESHOLD</name></cpp:macro> <cpp:value>(256 * 1024)</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>RingBuffer</name>

<block>{

<decl_stmt><decl><type><name>AVFifoBuffer</name> <modifier>*</modifier></type><name>fifo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>read_back_capacity</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>read_pos</name></decl>;</decl_stmt>

}</block></struct></type> <name>RingBuffer</name>;</typedef>

<typedef>typedef <type><struct>struct <name>Context</name> <block>{

<decl_stmt><decl><type><name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>inner</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>seek_request</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>seek_pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>seek_whence</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>seek_completed</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>seek_ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>inner_io_error</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>io_error</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>io_eof_reached</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>logical_pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>logical_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RingBuffer</name></type> <name>ring</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pthread_cond_t</name></type> <name>cond_wakeup_main</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pthread_cond_t</name></type> <name>cond_wakeup_background</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pthread_mutex_t</name></type> <name>mutex</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pthread_t</name></type> <name>async_buffer_thread</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>abort_request</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVIOInterruptCB</name></type> <name>interrupt_callback</name></decl>;</decl_stmt>

}</block></struct></type> <name>Context</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ring_init</name><parameter_list>(<parameter><decl><type><name>RingBuffer</name> <modifier>*</modifier></type><name>ring</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>capacity</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>read_back_capacity</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>ring</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>RingBuffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ring</name><operator>-&gt;</operator><name>fifo</name></name> <operator>=</operator> <call><name>av_fifo_alloc</name><argument_list>(<argument><expr><name>capacity</name> <operator>+</operator> <name>read_back_capacity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ring</name><operator>-&gt;</operator><name>fifo</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ring</name><operator>-&gt;</operator><name>read_back_capacity</name></name> <operator>=</operator> <name>read_back_capacity</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ring_destroy</name><parameter_list>(<parameter><decl><type><name>RingBuffer</name> <modifier>*</modifier></type><name>ring</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>av_fifo_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ring</name><operator>-&gt;</operator><name>fifo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ring_reset</name><parameter_list>(<parameter><decl><type><name>RingBuffer</name> <modifier>*</modifier></type><name>ring</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>av_fifo_reset</name><argument_list>(<argument><expr><name><name>ring</name><operator>-&gt;</operator><name>fifo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ring</name><operator>-&gt;</operator><name>read_pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ring_size</name><parameter_list>(<parameter><decl><type><name>RingBuffer</name> <modifier>*</modifier></type><name>ring</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>av_fifo_size</name><argument_list>(<argument><expr><name><name>ring</name><operator>-&gt;</operator><name>fifo</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>ring</name><operator>-&gt;</operator><name>read_pos</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ring_space</name><parameter_list>(<parameter><decl><type><name>RingBuffer</name> <modifier>*</modifier></type><name>ring</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>av_fifo_space</name><argument_list>(<argument><expr><name><name>ring</name><operator>-&gt;</operator><name>fifo</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ring_generic_read</name><parameter_list>(<parameter><decl><type><name>RingBuffer</name> <modifier>*</modifier></type><name>ring</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>func</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name>buf_size</name> <operator>&lt;=</operator> <call><name>ring_size</name><argument_list>(<argument><expr><name>ring</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_fifo_generic_peek_at</name><argument_list>(<argument><expr><name><name>ring</name><operator>-&gt;</operator><name>fifo</name></name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name><name>ring</name><operator>-&gt;</operator><name>read_pos</name></name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>, <argument><expr><name>func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ring</name><operator>-&gt;</operator><name>read_pos</name></name> <operator>+=</operator> <name>buf_size</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ring</name><operator>-&gt;</operator><name>read_pos</name></name> <operator>&gt;</operator> <name><name>ring</name><operator>-&gt;</operator><name>read_back_capacity</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_fifo_drain</name><argument_list>(<argument><expr><name><name>ring</name><operator>-&gt;</operator><name>fifo</name></name></expr></argument>, <argument><expr><name><name>ring</name><operator>-&gt;</operator><name>read_pos</name></name> <operator>-</operator> <name><name>ring</name><operator>-&gt;</operator><name>read_back_capacity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ring</name><operator>-&gt;</operator><name>read_pos</name></name> <operator>=</operator> <name><name>ring</name><operator>-&gt;</operator><name>read_back_capacity</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ring_generic_write</name><parameter_list>(<parameter><decl><type><name>RingBuffer</name> <modifier>*</modifier></type><name>ring</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>func</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name>size</name> <operator>&lt;=</operator> <call><name>ring_space</name><argument_list>(<argument><expr><name>ring</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>av_fifo_generic_write</name><argument_list>(<argument><expr><name><name>ring</name><operator>-&gt;</operator><name>fifo</name></name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>func</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ring_size_of_read_back</name><parameter_list>(<parameter><decl><type><name>RingBuffer</name> <modifier>*</modifier></type><name>ring</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>ring</name><operator>-&gt;</operator><name>read_pos</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ring_drain</name><parameter_list>(<parameter><decl><type><name>RingBuffer</name> <modifier>*</modifier></type><name>ring</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name>offset</name> <operator>&gt;=</operator> <operator>-</operator><call><name>ring_size_of_read_back</name><argument_list>(<argument><expr><name>ring</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name>offset</name> <operator>&lt;=</operator> <call><name>ring_size</name><argument_list>(<argument><expr><name>ring</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ring</name><operator>-&gt;</operator><name>read_pos</name></name> <operator>+=</operator> <name>offset</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>async_check_interrupt</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Context</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>abort_request</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ff_check_interrupt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>interrupt_callback</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>abort_request</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name><name>c</name><operator>-&gt;</operator><name>abort_request</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>wrapped_url_read</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><name>src</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Context</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ffurl_read</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>inner</name></name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>inner_io_error</name></name> <operator>=</operator> <ternary><condition><expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>ret</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>async_buffer_task</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Context</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RingBuffer</name> <modifier>*</modifier></type><name>ring</name> <init>= <expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>ring</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>seek_ret</name></decl>;</decl_stmt>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>fifo_space</name></decl>, <decl><type ref="prev"/><name>to_copy</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>async_check_interrupt</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>io_eof_reached</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>io_error</name></name> <operator>=</operator> <name>AVERROR_EXIT</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_cond_signal</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>cond_wakeup_main</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>seek_request</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>seek_ret</name> <operator>=</operator> <call><name>ffurl_seek</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>inner</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>seek_pos</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>seek_whence</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>seek_ret</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>io_eof_reached</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>io_error</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ring_reset</name><argument_list>(<argument><expr><name>ring</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>seek_completed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>seek_ret</name></name> <operator>=</operator> <name>seek_ret</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>seek_request</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_cond_signal</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>cond_wakeup_main</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>fifo_space</name> <operator>=</operator> <call><name>ring_space</name><argument_list>(<argument><expr><name>ring</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>io_eof_reached</name></name> <operator>||</operator> <name>fifo_space</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pthread_cond_signal</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>cond_wakeup_main</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_cond_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>cond_wakeup_background</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>to_copy</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><literal type="number">4096</literal></expr></argument>, <argument><expr><name>fifo_space</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ring_generic_write</name><argument_list>(<argument><expr><name>ring</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>h</name></expr></argument>, <argument><expr><name>to_copy</name></expr></argument>, <argument><expr><name>wrapped_url_read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>io_eof_reached</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>inner_io_error</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>io_error</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>inner_io_error</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>pthread_cond_signal</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>cond_wakeup_main</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>async_open</name><parameter_list>(<parameter><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>AVDictionary</name> <modifier>*</modifier><modifier>*</modifier></type><name>options</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Context</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVIOInterruptCB</name></type> <name>interrupt_callback</name> <init>= <expr><block>{<expr><operator>.</operator><name>callback</name> <operator>=</operator> <name>async_check_interrupt</name></expr>, <expr><operator>.</operator><name>opaque</name> <operator>=</operator> <name>h</name></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_strstart</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"async:"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ring_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>ring</name></name></expr></argument>, <argument><expr><name>BUFFER_CAPACITY</name></expr></argument>, <argument><expr><name>READ_BACK_CAPACITY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fifo_fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>interrupt_callback</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>interrupt_callback</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ffurl_open_whitelist</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>inner</name></name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>interrupt_callback</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>protocol_whitelist</name></name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>protocol_blacklist</name></name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"ffurl_open failed : %s, %s\n"</literal></expr></argument>, <argument><expr><call><name>av_err2str</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>url_fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>logical_size</name></name> <operator>=</operator> <call><name>ffurl_size</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>inner</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>is_streamed</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>inner</name><operator>-&gt;</operator><name>is_streamed</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"pthread_mutex_init failed : %s\n"</literal></expr></argument>, <argument><expr><call><name>av_err2str</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>mutex_fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>pthread_cond_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>cond_wakeup_main</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"pthread_cond_init failed : %s\n"</literal></expr></argument>, <argument><expr><call><name>av_err2str</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>cond_wakeup_main_fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>pthread_cond_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>cond_wakeup_background</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"pthread_cond_init failed : %s\n"</literal></expr></argument>, <argument><expr><call><name>av_err2str</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>cond_wakeup_background_fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>pthread_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>async_buffer_thread</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>async_buffer_task</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"pthread_create failed : %s\n"</literal></expr></argument>, <argument><expr><call><name>av_err2str</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>thread_fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>thread_fail</name>:</label>

<expr_stmt><expr><call><name>pthread_cond_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>cond_wakeup_background</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>cond_wakeup_background_fail</name>:</label>

<expr_stmt><expr><call><name>pthread_cond_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>cond_wakeup_main</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>cond_wakeup_main_fail</name>:</label>

<expr_stmt><expr><call><name>pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>mutex_fail</name>:</label>

<expr_stmt><expr><call><name>ffurl_close</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>inner</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>url_fail</name>:</label>

<expr_stmt><expr><call><name>ring_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>ring</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>fifo_fail</name>:</label>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>async_close</name><parameter_list>(<parameter><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Context</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>abort_request</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_cond_signal</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>cond_wakeup_background</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>pthread_join</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>async_buffer_thread</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"pthread_join(): %s\n"</literal></expr></argument>, <argument><expr><call><name>av_err2str</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>pthread_cond_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>cond_wakeup_background</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_cond_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>cond_wakeup_main</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ffurl_close</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>inner</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ring_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>ring</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>async_read_internal</name><parameter_list>(<parameter><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>read_complete</name></decl></parameter>,

<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>func</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Context</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RingBuffer</name> <modifier>*</modifier></type><name>ring</name> <init>= <expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>ring</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>to_read</name> <init>= <expr><name>size</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>to_read</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>fifo_size</name></decl>, <decl><type ref="prev"/><name>to_copy</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>async_check_interrupt</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_EXIT</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>fifo_size</name> <operator>=</operator> <call><name>ring_size</name><argument_list>(<argument><expr><name>ring</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>to_copy</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>to_read</name></expr></argument>, <argument><expr><name>fifo_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>to_copy</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ring_generic_read</name><argument_list>(<argument><expr><name>ring</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>to_copy</name></expr></argument>, <argument><expr><name>func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>func</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>dest</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>dest</name> <operator>+</operator> <name>to_copy</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>logical_pos</name></name> <operator>+=</operator> <name>to_copy</name></expr>;</expr_stmt>

<expr_stmt><expr><name>to_read</name> <operator>-=</operator> <name>to_copy</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>size</name> <operator>-</operator> <name>to_read</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>to_read</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <operator>!</operator><name>read_complete</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>io_eof_reached</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>io_error</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>io_error</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_EOF</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>pthread_cond_signal</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>cond_wakeup_background</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_cond_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>cond_wakeup_main</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>pthread_cond_signal</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>cond_wakeup_background</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>async_read</name><parameter_list>(<parameter><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>async_read_internal</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fifo_do_not_copy_func</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>dest</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64_t</name></type> <name>async_seek</name><parameter_list>(<parameter><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>whence</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Context</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RingBuffer</name> <modifier>*</modifier></type><name>ring</name> <init>= <expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>ring</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>new_logical_pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fifo_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fifo_size_of_read_back</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>whence</name> <operator>==</operator> <name>AVSEEK_SIZE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"async_seek: AVSEEK_SIZE: %"</literal><name>PRId64</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>c</name><operator>-&gt;</operator><name>logical_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>c</name><operator>-&gt;</operator><name>logical_size</name></name></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>whence</name> <operator>==</operator> <name>SEEK_CUR</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"async_seek: %"</literal><name>PRId64</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>new_logical_pos</name> <operator>=</operator> <name>pos</name> <operator>+</operator> <name><name>c</name><operator>-&gt;</operator><name>logical_pos</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>whence</name> <operator>==</operator> <name>SEEK_SET</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"async_seek: %"</literal><name>PRId64</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>new_logical_pos</name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>new_logical_pos</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>fifo_size</name> <operator>=</operator> <call><name>ring_size</name><argument_list>(<argument><expr><name>ring</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fifo_size_of_read_back</name> <operator>=</operator> <call><name>ring_size_of_read_back</name><argument_list>(<argument><expr><name>ring</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>new_logical_pos</name> <operator>==</operator> <name><name>c</name><operator>-&gt;</operator><name>logical_pos</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name><name>c</name><operator>-&gt;</operator><name>logical_pos</name></name></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>new_logical_pos</name> <operator>&gt;=</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>logical_pos</name></name> <operator>-</operator> <name>fifo_size_of_read_back</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name>new_logical_pos</name> <operator>&lt;</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>logical_pos</name></name> <operator>+</operator> <name>fifo_size</name> <operator>+</operator> <name>SHORT_SEEK_THRESHOLD</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>pos_delta</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>new_logical_pos</name> <operator>-</operator> <name><name>c</name><operator>-&gt;</operator><name>logical_pos</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"async_seek: fask_seek %"</literal><name>PRId64</name><literal type="string">" from %d dist:%d/%d\n"</literal></expr></argument>,

<argument><expr><name>new_logical_pos</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>c</name><operator>-&gt;</operator><name>logical_pos</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>new_logical_pos</name> <operator>-</operator> <name><name>c</name><operator>-&gt;</operator><name>logical_pos</name></name><operator>)</operator></expr></argument>, <argument><expr><name>fifo_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pos_delta</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>async_read_internal</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pos_delta</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>fifo_do_not_copy_func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>ring_drain</name><argument_list>(<argument><expr><name>ring</name></expr></argument>, <argument><expr><name>pos_delta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>logical_pos</name></name> <operator>=</operator> <name>new_logical_pos</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name><name>c</name><operator>-&gt;</operator><name>logical_pos</name></name></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>logical_size</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>new_logical_pos</name> <operator>&gt;</operator> <name><name>c</name><operator>-&gt;</operator><name>logical_size</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>seek_request</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>seek_pos</name></name> <operator>=</operator> <name>new_logical_pos</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>seek_whence</name></name> <operator>=</operator> <name>SEEK_SET</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>seek_completed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>seek_ret</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>async_check_interrupt</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_EXIT</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>seek_completed</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>seek_ret</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>logical_pos</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>seek_ret</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>seek_ret</name></name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>pthread_cond_signal</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>cond_wakeup_background</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_cond_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>cond_wakeup_main</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(Context, x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D</name></cpp:macro> <cpp:value>AV_OPT_FLAG_DECODING_PARAM</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>options</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{<expr><name>NULL</name></expr>}</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>D</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>OFFSET</name></cpp:undef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>async_context_class</name> <init>= <expr><block>{

<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"Async"</literal></expr>,

<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,

<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>options</name></expr>,

<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>URLProtocol</name></type> <name>ff_async_protocol</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"async"</literal></expr>,

<expr><operator>.</operator><name>url_open2</name> <operator>=</operator> <name>async_open</name></expr>,

<expr><operator>.</operator><name>url_read</name> <operator>=</operator> <name>async_read</name></expr>,

<expr><operator>.</operator><name>url_seek</name> <operator>=</operator> <name>async_seek</name></expr>,

<expr><operator>.</operator><name>url_close</name> <operator>=</operator> <name>async_close</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Context</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>priv_data_class</name> <operator>=</operator> <operator>&amp;</operator><name>async_context_class</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_SEEK_POS</name></cpp:macro> <cpp:value>(1536)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_STREAM_SIZE</name></cpp:macro> <cpp:value>(2048)</cpp:value></cpp:define>

typedef struct TestContext {

AVClass *class;

int64_t logical_pos;

int64_t logical_size;

int opt_read_error;

} TestContext;

static int async_test_open(URLContext *h, const char *arg, int flags, AVDictionary **options)

{

TestContext *c = h-&gt;priv_data;

c-&gt;logical_pos = 0;

c-&gt;logical_size = TEST_STREAM_SIZE;

return 0;

}

static int async_test_close(URLContext *h)

{

return 0;

}

static int async_test_read(URLContext *h, unsigned char *buf, int size)

{

TestContext *c = h-&gt;priv_data;

int i;

int read_len = 0;

if (c-&gt;opt_read_error)

return c-&gt;opt_read_error;

if (c-&gt;logical_pos &gt;= c-&gt;logical_size)

return AVERROR_EOF;

for (i = 0; i &lt; size; ++i) {

buf[i] = c-&gt;logical_pos &amp; 0xFF;

c-&gt;logical_pos++;

read_len++;

if (c-&gt;logical_pos &gt;= c-&gt;logical_size)

break;

}

return read_len;

}

static int64_t async_test_seek(URLContext *h, int64_t pos, int whence)

{

TestContext *c = h-&gt;priv_data;

int64_t new_logical_pos;

if (whence == AVSEEK_SIZE) {

return c-&gt;logical_size;

} else if (whence == SEEK_CUR) {

new_logical_pos = pos + c-&gt;logical_pos;

} else if (whence == SEEK_SET){

new_logical_pos = pos;

} else {

return AVERROR(EINVAL);

}

if (new_logical_pos &lt; 0)

return AVERROR(EINVAL);

c-&gt;logical_pos = new_logical_pos;

return new_logical_pos;

}

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(TestContext, x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D</name></cpp:macro> <cpp:value>AV_OPT_FLAG_DECODING_PARAM</cpp:value></cpp:define>

static const AVOption async_test_options[] = {

{ "async-test-read-error", "cause read fail",

OFFSET(opt_read_error), AV_OPT_TYPE_INT, { .i64 = 0 }, INT_MIN, INT_MAX, .flags = D },

{NULL},

};

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>D</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>OFFSET</name></cpp:undef>

static const AVClass async_test_context_class = {

.class_name = "Async-Test",

.item_name = av_default_item_name,

.option = async_test_options,

.version = LIBAVUTIL_VERSION_INT,

};

const URLProtocol ff_async_test_protocol = {

.name = "async-test",

.url_open2 = async_test_open,

.url_read = async_test_read,

.url_seek = async_test_seek,

.url_close = async_test_close,

.priv_data_size = sizeof(TestContext),

.priv_data_class = &amp;async_test_context_class,

};

int main(void)

{

URLContext *h = NULL;

int i;

int ret;

int64_t size;

int64_t pos;

int64_t read_len;

unsigned char buf[4096];

AVDictionary *opts = NULL;

ffurl_register_protocol(&amp;ff_async_protocol);

ffurl_register_protocol(&amp;ff_async_test_protocol);

ret = ffurl_open(&amp;h, "async:async-test:", AVIO_FLAG_READ, NULL, NULL);

printf("open: %d\n", ret);

size = ffurl_size(h);

printf("size: %"PRId64"\n", size);

pos = ffurl_seek(h, 0, SEEK_CUR);

read_len = 0;

while (1) {

ret = ffurl_read(h, buf, sizeof(buf));

if (ret == AVERROR_EOF) {

printf("read-error: AVERROR_EOF at %"PRId64"\n", ffurl_seek(h, 0, SEEK_CUR));

break;

}

else if (ret == 0)

break;

else if (ret &lt; 0) {

printf("read-error: %d at %"PRId64"\n", ret, ffurl_seek(h, 0, SEEK_CUR));

goto fail;

} else {

for (i = 0; i &lt; ret; ++i) {

if (buf[i] != (pos &amp; 0xFF)) {

printf("read-mismatch: actual %d, expecting %d, at %"PRId64"\n",

(int)buf[i], (int)(pos &amp; 0xFF), pos);

break;

}

pos++;

}

}

read_len += ret;

}

printf("read: %"PRId64"\n", read_len);

ret = ffurl_read(h, buf, 1);

printf("read: %d\n", ret);

pos = ffurl_seek(h, TEST_SEEK_POS, SEEK_SET);

printf("seek: %"PRId64"\n", pos);

read_len = 0;

while (1) {

ret = ffurl_read(h, buf, sizeof(buf));

if (ret == AVERROR_EOF)

break;

else if (ret == 0)

break;

else if (ret &lt; 0) {

printf("read-error: %d at %"PRId64"\n", ret, ffurl_seek(h, 0, SEEK_CUR));

goto fail;

} else {

for (i = 0; i &lt; ret; ++i) {

if (buf[i] != (pos &amp; 0xFF)) {

printf("read-mismatch: actual %d, expecting %d, at %"PRId64"\n",

(int)buf[i], (int)(pos &amp; 0xFF), pos);

break;

}

pos++;

}

}

read_len += ret;

}

printf("read: %"PRId64"\n", read_len);

ret = ffurl_read(h, buf, 1);

printf("read: %d\n", ret);

ffurl_close(h);

av_dict_set_int(&amp;opts, "async-test-read-error", -10000, 0);

ret = ffurl_open(&amp;h, "async:async-test:", AVIO_FLAG_READ, NULL, &amp;opts);

printf("open: %d\n", ret);

ret = ffurl_read(h, buf, 1);

printf("read: %d\n", ret);

fail:

av_dict_free(&amp;opts);

ffurl_close(h);

return 0;

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
