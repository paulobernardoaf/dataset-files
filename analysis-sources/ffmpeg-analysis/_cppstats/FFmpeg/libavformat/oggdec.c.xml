<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavformat\oggdec.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"oggdec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avformat.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vorbiscomment.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_PAGE_SIZE</name></cpp:macro> <cpp:value>65307</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECODER_BUFFER_SIZE</name></cpp:macro> <cpp:value>MAX_PAGE_SIZE</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>ogg_codec</name></name> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>ogg_codecs</name><index>[]</index></name> <init>= <expr><block>{

<expr><operator>&amp;</operator><name>ff_skeleton_codec</name></expr>,

<expr><operator>&amp;</operator><name>ff_daala_codec</name></expr>,

<expr><operator>&amp;</operator><name>ff_dirac_codec</name></expr>,

<expr><operator>&amp;</operator><name>ff_speex_codec</name></expr>,

<expr><operator>&amp;</operator><name>ff_vorbis_codec</name></expr>,

<expr><operator>&amp;</operator><name>ff_theora_codec</name></expr>,

<expr><operator>&amp;</operator><name>ff_flac_codec</name></expr>,

<expr><operator>&amp;</operator><name>ff_celt_codec</name></expr>,

<expr><operator>&amp;</operator><name>ff_opus_codec</name></expr>,

<expr><operator>&amp;</operator><name>ff_vp8_codec</name></expr>,

<expr><operator>&amp;</operator><name>ff_old_dirac_codec</name></expr>,

<expr><operator>&amp;</operator><name>ff_old_flac_codec</name></expr>,

<expr><operator>&amp;</operator><name>ff_ogm_video_codec</name></expr>,

<expr><operator>&amp;</operator><name>ff_ogm_audio_codec</name></expr>,

<expr><operator>&amp;</operator><name>ff_ogm_text_codec</name></expr>,

<expr><operator>&amp;</operator><name>ff_ogm_old_codec</name></expr>,

<expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>int64_t</name></type> <name>ogg_calc_pts</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>dts</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ogg_new_stream</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>serial</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ogg_restore</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type> <name>free_stream</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ogg</name></name> <modifier>*</modifier></type><name>ogg</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ogg_stream</name></name> <modifier>*</modifier></type><name>stream</name> <init>= <expr><operator>&amp;</operator><name><name>ogg</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>codec</name></name> <operator>&amp;&amp;</operator>

<name><name>stream</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>cleanup</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>stream</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>cleanup</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>private</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>new_metadata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ogg_save</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ogg</name></name> <modifier>*</modifier></type><name>ogg</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ogg_state</name></name> <modifier>*</modifier></type><name>ost</name> <init>=

<expr><call><name>av_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ost</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <operator>(</operator><name><name>ogg</name><operator>-&gt;</operator><name>nstreams</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>ogg</name><operator>-&gt;</operator><name>streams</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ost</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ost</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ost</name><operator>-&gt;</operator><name>curidx</name></name> <operator>=</operator> <name><name>ogg</name><operator>-&gt;</operator><name>curidx</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ost</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>ogg</name><operator>-&gt;</operator><name>state</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ost</name><operator>-&gt;</operator><name>nstreams</name></name> <operator>=</operator> <name><name>ogg</name><operator>-&gt;</operator><name>nstreams</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>streams</name></name></expr></argument>, <argument><expr><name><name>ogg</name><operator>-&gt;</operator><name>streams</name></name></expr></argument>, <argument><expr><name><name>ogg</name><operator>-&gt;</operator><name>nstreams</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>ogg</name><operator>-&gt;</operator><name>streams</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ogg</name><operator>-&gt;</operator><name>nstreams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ogg_stream</name></name> <modifier>*</modifier></type><name>os</name> <init>= <expr><name><name>ogg</name><operator>-&gt;</operator><name>streams</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>os</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><name><name>os</name><operator>-&gt;</operator><name>bufsize</name></name> <operator>+</operator> <name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>os</name><operator>-&gt;</operator><name>buf</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>os</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>ost</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>buf</name></expr></argument>, <argument><expr><name><name>os</name><operator>-&gt;</operator><name>bufpos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>os</name><operator>-&gt;</operator><name>new_metadata</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>os</name><operator>-&gt;</operator><name>new_metadata_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>ogg</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ost</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ogg_restore</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ogg_restore</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ogg</name></name> <modifier>*</modifier></type><name>ogg</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>bc</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ogg_state</name></name> <modifier>*</modifier></type><name>ost</name> <init>= <expr><name><name>ogg</name><operator>-&gt;</operator><name>state</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>err</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ost</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ogg</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name><name>ost</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ogg</name><operator>-&gt;</operator><name>nstreams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ogg_stream</name></name> <modifier>*</modifier></type><name>stream</name> <init>= <expr><operator>&amp;</operator><name><name>ogg</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>new_metadata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name><name>ost</name><operator>-&gt;</operator><name>nstreams</name></name> <operator>||</operator> <operator>!</operator><name><name>ost</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>private</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free_stream</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name>bc</name></expr></argument>, <argument><expr><name><name>ost</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ogg</name><operator>-&gt;</operator><name>page_pos</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ogg</name><operator>-&gt;</operator><name>curidx</name></name> <operator>=</operator> <name><name>ost</name><operator>-&gt;</operator><name>curidx</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ogg</name><operator>-&gt;</operator><name>nstreams</name></name> <operator>=</operator> <name><name>ost</name><operator>-&gt;</operator><name>nstreams</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>av_reallocp_array</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ogg</name><operator>-&gt;</operator><name>streams</name></name></expr></argument>, <argument><expr><name><name>ogg</name><operator>-&gt;</operator><name>nstreams</name></name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>ogg</name><operator>-&gt;</operator><name>streams</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ogg</name><operator>-&gt;</operator><name>nstreams</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ogg</name><operator>-&gt;</operator><name>streams</name></name></expr></argument>, <argument><expr><name><name>ost</name><operator>-&gt;</operator><name>streams</name></name></expr></argument>,

<argument><expr><name><name>ost</name><operator>-&gt;</operator><name>nstreams</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>ogg</name><operator>-&gt;</operator><name>streams</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>ost</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ogg_reset</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ogg</name></name> <modifier>*</modifier></type><name>ogg</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>start_pos</name> <init>= <expr><call><name>avio_tell</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ogg</name><operator>-&gt;</operator><name>nstreams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ogg_stream</name></name> <modifier>*</modifier></type><name>os</name> <init>= <expr><name><name>ogg</name><operator>-&gt;</operator><name>streams</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>os</name><operator>-&gt;</operator><name>bufpos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>os</name><operator>-&gt;</operator><name>pstart</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>os</name><operator>-&gt;</operator><name>psize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>os</name><operator>-&gt;</operator><name>granule</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>os</name><operator>-&gt;</operator><name>lastpts</name></name> <operator>=</operator> <name>AV_NOPTS_VALUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>os</name><operator>-&gt;</operator><name>lastdts</name></name> <operator>=</operator> <name>AV_NOPTS_VALUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>os</name><operator>-&gt;</operator><name>sync_pos</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>os</name><operator>-&gt;</operator><name>page_pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>os</name><operator>-&gt;</operator><name>nsegs</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>os</name><operator>-&gt;</operator><name>segp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>os</name><operator>-&gt;</operator><name>incomplete</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>os</name><operator>-&gt;</operator><name>got_data</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>start_pos</name> <operator>&lt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>data_offset</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>os</name><operator>-&gt;</operator><name>lastpts</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>os</name><operator>-&gt;</operator><name>end_trimming</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>os</name><operator>-&gt;</operator><name>new_metadata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>os</name><operator>-&gt;</operator><name>new_metadata_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>ogg</name><operator>-&gt;</operator><name>page_pos</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ogg</name><operator>-&gt;</operator><name>curidx</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>ogg_codec</name></name> <modifier>*</modifier></type><name>ogg_find_codec</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>ogg_codecs</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;=</operator> <name><name>ogg_codecs</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>magicsize</name> <operator>&amp;&amp;</operator>

<operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>ogg_codecs</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>magic</name></expr></argument>, <argument><expr><name><name>ogg_codecs</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>magicsize</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>ogg_codecs</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ogg_replace_stream</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>serial</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nsegs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ogg</name></name> <modifier>*</modifier></type><name>ogg</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ogg_stream</name></name> <modifier>*</modifier></type><name>os</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ogg_codec</name></name> <modifier>*</modifier></type><name>codec</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>pb</name><operator>-&gt;</operator><name>seekable</name></name> <operator>&amp;</operator> <name>AVIO_SEEKABLE_NORMAL</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>magic</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>pos</name> <init>= <expr><call><name>avio_tell</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>nsegs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>avio_read</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>magic</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>magic</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>magic</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>codec</name> <operator>=</operator> <call><name>ogg_find_codec</name><argument_list>(<argument><expr><name>magic</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>magic</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>codec</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Cannot identify new stream\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ogg</name><operator>-&gt;</operator><name>nstreams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ogg</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>codec</name> <operator>==</operator> <name>codec</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name><name>ogg</name><operator>-&gt;</operator><name>nstreams</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>ogg_new_stream</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>serial</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ogg</name><operator>-&gt;</operator><name>nstreams</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avpriv_report_missing_feature</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"Changing stream parameters in multistream ogg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>os</name> <operator>=</operator> <operator>&amp;</operator><name><name>ogg</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>os</name><operator>-&gt;</operator><name>serial</name></name> <operator>=</operator> <name>serial</name></expr>;</expr_stmt>

<return>return <expr><name>i</name></expr>;</return>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

buf = os-&gt;buf;

bufsize = os-&gt;bufsize;

codec = os-&gt;codec;

if (!ogg-&gt;state || ogg-&gt;state-&gt;streams[i].private != os-&gt;private)

av_freep(&amp;ogg-&gt;streams[i].private);

memset(os, 0, sizeof(*os));

os-&gt;serial = serial;

os-&gt;bufsize = bufsize;

os-&gt;buf = buf;

os-&gt;header = -1;

os-&gt;codec = codec;

return i;

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ogg_new_stream</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>serial</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ogg</name></name> <modifier>*</modifier></type><name>ogg</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><name><name>ogg</name><operator>-&gt;</operator><name>nstreams</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ogg_stream</name></name> <modifier>*</modifier></type><name>os</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ogg</name><operator>-&gt;</operator><name>state</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"New streams are not supposed to be added "</literal>

<literal type="string">"in between Ogg context save/restore operations.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_BUG</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_size_mult</name><argument_list>(<argument><expr><name><name>ogg</name><operator>-&gt;</operator><name>nstreams</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>ogg</name><operator>-&gt;</operator><name>streams</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>

<operator>!</operator><operator>(</operator><name>os</name> <operator>=</operator> <call><name>av_realloc</name><argument_list>(<argument><expr><name><name>ogg</name><operator>-&gt;</operator><name>streams</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ogg</name><operator>-&gt;</operator><name>streams</name></name> <operator>=</operator> <name>os</name></expr>;</expr_stmt>

<expr_stmt><expr><name>os</name> <operator>=</operator> <name><name>ogg</name><operator>-&gt;</operator><name>streams</name></name> <operator>+</operator> <name>idx</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>os</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>os</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>os</name><operator>-&gt;</operator><name>serial</name></name> <operator>=</operator> <name>serial</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>os</name><operator>-&gt;</operator><name>bufsize</name></name> <operator>=</operator> <name>DECODER_BUFFER_SIZE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>os</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name><name>os</name><operator>-&gt;</operator><name>bufsize</name></name> <operator>+</operator> <name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>os</name><operator>-&gt;</operator><name>header</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>os</name><operator>-&gt;</operator><name>start_granule</name></name> <operator>=</operator> <name>OGG_NOGRANULE_VALUE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>os</name><operator>-&gt;</operator><name>buf</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>st</name> <operator>=</operator> <call><name>avformat_new_stream</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>st</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>os</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name>idx</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avpriv_set_pts_info</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ogg</name><operator>-&gt;</operator><name>nstreams</name></name><operator>++</operator></expr>;</expr_stmt>

<return>return <expr><name>idx</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ogg_new_buf</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ogg</name></name> <modifier>*</modifier></type><name>ogg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ogg_stream</name></name> <modifier>*</modifier></type><name>os</name> <init>= <expr><name><name>ogg</name><operator>-&gt;</operator><name>streams</name></name> <operator>+</operator> <name>idx</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>nb</name> <init>= <expr><call><name>av_malloc</name><argument_list>(<argument><expr><name><name>os</name><operator>-&gt;</operator><name>bufsize</name></name> <operator>+</operator> <name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><name><name>os</name><operator>-&gt;</operator><name>bufpos</name></name> <operator>-</operator> <name><name>os</name><operator>-&gt;</operator><name>pstart</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>nb</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>os</name><operator>-&gt;</operator><name>buf</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>nb</name></expr></argument>, <argument><expr><name><name>os</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name><name>os</name><operator>-&gt;</operator><name>pstart</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name><name>os</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>os</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <name>nb</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>os</name><operator>-&gt;</operator><name>bufpos</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>os</name><operator>-&gt;</operator><name>pstart</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>data_packets_seen</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ogg</name></name> <modifier>*</modifier></type><name>ogg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ogg</name><operator>-&gt;</operator><name>nstreams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>ogg</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>got_data</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ogg_read_page</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>sid</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>bc</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ogg</name></name> <modifier>*</modifier></type><name>ogg</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ogg_stream</name></name> <modifier>*</modifier></type><name>os</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>, <decl><type ref="prev"/><name>nsegs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>gp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>serial</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>, <decl><type ref="prev"/><name>idx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>sync</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avio_read</name><argument_list>(<argument><expr><name>bc</name></expr></argument>, <argument><expr><name>sync</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><ternary><condition><expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>ret</name></expr> </then><else>: <expr><name>AVERROR_EOF</name></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>

<do>do <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sync</name><index>[<expr><name>sp</name> <operator>&amp;</operator> <literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'O'</literal> <operator>&amp;&amp;</operator>

<name><name>sync</name><index>[<expr><operator>(</operator><name>sp</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'g'</literal> <operator>&amp;&amp;</operator>

<name><name>sync</name><index>[<expr><operator>(</operator><name>sp</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'g'</literal> <operator>&amp;&amp;</operator> <name><name>sync</name><index>[<expr><operator>(</operator><name>sp</name> <operator>+</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'S'</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>i</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>bc</name><operator>-&gt;</operator><name>seekable</name></name> <operator>&amp;</operator> <name>AVIO_SEEKABLE_NORMAL</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>ogg</name><operator>-&gt;</operator><name>page_pos</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>sync</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name>bc</name></expr></argument>, <argument><expr><name><name>ogg</name><operator>-&gt;</operator><name>page_pos</name></name><operator>+</operator><literal type="number">4</literal></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ogg</name><operator>-&gt;</operator><name>page_pos</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>avio_r8</name><argument_list>(<argument><expr><name>bc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>avio_feof</name><argument_list>(<argument><expr><name>bc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_EOF</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sync</name><index>[<expr><name>sp</name><operator>++</operator> <operator>&amp;</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name>i</name><operator>++</operator> <operator>&lt;</operator> <name>MAX_PAGE_SIZE</name></expr>)</condition>;</do>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name>MAX_PAGE_SIZE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"cannot find sync word\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>avio_r8</name><argument_list>(<argument><expr><name>bc</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>av_log</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"ogg page, unsupported version\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>flags</name> <operator>=</operator> <call><name>avio_r8</name><argument_list>(<argument><expr><name>bc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>gp</name> <operator>=</operator> <call><name>avio_rl64</name><argument_list>(<argument><expr><name>bc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>serial</name> <operator>=</operator> <call><name>avio_rl32</name><argument_list>(<argument><expr><name>bc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><name>bc</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>nsegs</name> <operator>=</operator> <call><name>avio_r8</name><argument_list>(<argument><expr><name>bc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>ogg_find_stream</name><argument_list>(<argument><expr><name>ogg</name></expr></argument>, <argument><expr><name>serial</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>data_packets_seen</name><argument_list>(<argument><expr><name>ogg</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>ogg_replace_stream</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>serial</name></expr></argument>, <argument><expr><name>nsegs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>ogg_new_stream</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>serial</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"failed to create or replace stream\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>idx</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>os</name> <operator>=</operator> <name><name>ogg</name><operator>-&gt;</operator><name>streams</name></name> <operator>+</operator> <name>idx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ogg</name><operator>-&gt;</operator><name>page_pos</name></name> <operator>=</operator>

<name><name>os</name><operator>-&gt;</operator><name>page_pos</name></name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name>bc</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">27</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>os</name><operator>-&gt;</operator><name>psize</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ogg_new_buf</name><argument_list>(<argument><expr><name>ogg</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avio_read</name><argument_list>(<argument><expr><name>bc</name></expr></argument>, <argument><expr><name><name>os</name><operator>-&gt;</operator><name>segments</name></name></expr></argument>, <argument><expr><name>nsegs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <name>nsegs</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><ternary><condition><expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>ret</name></expr> </then><else>: <expr><name>AVERROR_EOF</name></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>os</name><operator>-&gt;</operator><name>nsegs</name></name> <operator>=</operator> <name>nsegs</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>os</name><operator>-&gt;</operator><name>segp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nsegs</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <name><name>os</name><operator>-&gt;</operator><name>segments</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>OGG_FLAG_BOS</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>os</name><operator>-&gt;</operator><name>got_data</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>OGG_FLAG_CONT</name> <operator>||</operator> <name><name>os</name><operator>-&gt;</operator><name>incomplete</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>os</name><operator>-&gt;</operator><name>psize</name></name></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><name><name>os</name><operator>-&gt;</operator><name>segp</name></name> <operator>&lt;</operator> <name><name>os</name><operator>-&gt;</operator><name>nsegs</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>seg</name> <init>= <expr><name><name>os</name><operator>-&gt;</operator><name>segments</name><index>[<expr><name><name>os</name><operator>-&gt;</operator><name>segp</name></name><operator>++</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>os</name><operator>-&gt;</operator><name>pstart</name></name> <operator>+=</operator> <name>seg</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>seg</name> <operator>&lt;</operator> <literal type="number">255</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name><name>os</name><operator>-&gt;</operator><name>sync_pos</name></name> <operator>=</operator> <name><name>os</name><operator>-&gt;</operator><name>page_pos</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>os</name><operator>-&gt;</operator><name>psize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>os</name><operator>-&gt;</operator><name>sync_pos</name></name> <operator>=</operator> <name><name>os</name><operator>-&gt;</operator><name>page_pos</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>os</name><operator>-&gt;</operator><name>bufsize</name></name> <operator>-</operator> <name><name>os</name><operator>-&gt;</operator><name>bufpos</name></name> <operator>&lt;</operator> <name>size</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>nb</name> <init>= <expr><call><name>av_malloc</name><argument_list>(<argument><expr><operator>(</operator><name><name>os</name><operator>-&gt;</operator><name>bufsize</name></name> <operator>*=</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>nb</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>nb</name></expr></argument>, <argument><expr><name><name>os</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>os</name><operator>-&gt;</operator><name>bufpos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name><name>os</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>os</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <name>nb</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avio_read</name><argument_list>(<argument><expr><name>bc</name></expr></argument>, <argument><expr><name><name>os</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name><name>os</name><operator>-&gt;</operator><name>bufpos</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><ternary><condition><expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>ret</name></expr> </then><else>: <expr><name>AVERROR_EOF</name></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>os</name><operator>-&gt;</operator><name>bufpos</name></name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>os</name><operator>-&gt;</operator><name>granule</name></name> <operator>=</operator> <name>gp</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>os</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>os</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name><name>os</name><operator>-&gt;</operator><name>bufpos</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sid</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>sid</name> <operator>=</operator> <name>idx</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ogg_packet</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>sid</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>dstart</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>dsize</name></decl></parameter>,

<parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>fpos</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ogg</name></name> <modifier>*</modifier></type><name>ogg</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ogg_stream</name></name> <modifier>*</modifier></type><name>os</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>complete</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>segp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>psize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"ogg_packet: curidx=%i\n"</literal></expr></argument>, <argument><expr><name><name>ogg</name><operator>-&gt;</operator><name>curidx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sid</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>sid</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <name><name>ogg</name><operator>-&gt;</operator><name>curidx</name></name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>idx</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ogg_read_page</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>os</name> <operator>=</operator> <name><name>ogg</name><operator>-&gt;</operator><name>streams</name></name> <operator>+</operator> <name>idx</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"ogg_packet: idx=%d pstart=%d psize=%d segp=%d nsegs=%d\n"</literal></expr></argument>,

<argument><expr><name>idx</name></expr></argument>, <argument><expr><name><name>os</name><operator>-&gt;</operator><name>pstart</name></name></expr></argument>, <argument><expr><name><name>os</name><operator>-&gt;</operator><name>psize</name></name></expr></argument>, <argument><expr><name><name>os</name><operator>-&gt;</operator><name>segp</name></name></expr></argument>, <argument><expr><name><name>os</name><operator>-&gt;</operator><name>nsegs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>os</name><operator>-&gt;</operator><name>codec</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>os</name><operator>-&gt;</operator><name>header</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>os</name><operator>-&gt;</operator><name>codec</name></name> <operator>=</operator> <call><name>ogg_find_codec</name><argument_list>(<argument><expr><name><name>os</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>os</name><operator>-&gt;</operator><name>bufpos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>os</name><operator>-&gt;</operator><name>codec</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Codec not found\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>os</name><operator>-&gt;</operator><name>header</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>segp</name> <operator>=</operator> <name><name>os</name><operator>-&gt;</operator><name>segp</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>psize</name> <operator>=</operator> <name><name>os</name><operator>-&gt;</operator><name>psize</name></name></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>os</name><operator>-&gt;</operator><name>segp</name></name> <operator>&lt;</operator> <name><name>os</name><operator>-&gt;</operator><name>nsegs</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ss</name> <init>= <expr><name><name>os</name><operator>-&gt;</operator><name>segments</name><index>[<expr><name><name>os</name><operator>-&gt;</operator><name>segp</name></name><operator>++</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>os</name><operator>-&gt;</operator><name>psize</name></name> <operator>+=</operator> <name>ss</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ss</name> <operator>&lt;</operator> <literal type="number">255</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>complete</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>complete</name> <operator>&amp;&amp;</operator> <name><name>os</name><operator>-&gt;</operator><name>segp</name></name> <operator>==</operator> <name><name>os</name><operator>-&gt;</operator><name>nsegs</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ogg</name><operator>-&gt;</operator><name>curidx</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>os</name><operator>-&gt;</operator><name>incomplete</name></name> <operator>=</operator> <operator>!</operator><operator>!</operator><name><name>os</name><operator>-&gt;</operator><name>psize</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block> while <condition>(<expr><operator>!</operator><name>complete</name></expr>)</condition>;</do>

<if_stmt><if>if <condition>(<expr><name><name>os</name><operator>-&gt;</operator><name>granule</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,

<argument><expr><literal type="string">"Page at %"</literal><name>PRId64</name><literal type="string">" is missing granule\n"</literal></expr></argument>,

<argument><expr><name><name>os</name><operator>-&gt;</operator><name>page_pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ogg</name><operator>-&gt;</operator><name>curidx</name></name> <operator>=</operator> <name>idx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>os</name><operator>-&gt;</operator><name>incomplete</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>os</name><operator>-&gt;</operator><name>header</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name><name>os</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>header</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Header processing failed: %s\n"</literal></expr></argument>, <argument><expr><call><name>av_err2str</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>os</name><operator>-&gt;</operator><name>header</name></name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>os</name><operator>-&gt;</operator><name>header</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>os</name><operator>-&gt;</operator><name>segp</name></name> <operator>=</operator> <name>segp</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>os</name><operator>-&gt;</operator><name>psize</name></name> <operator>=</operator> <name>psize</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ogg</name><operator>-&gt;</operator><name>headers</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>data_offset</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>data_offset</name></name> <operator>=</operator> <name><name>os</name><operator>-&gt;</operator><name>sync_pos</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ogg</name><operator>-&gt;</operator><name>nstreams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ogg_stream</name></name> <modifier>*</modifier></type><name>cur_os</name> <init>= <expr><name><name>ogg</name><operator>-&gt;</operator><name>streams</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cur_os</name><operator>-&gt;</operator><name>incomplete</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>data_offset</name></name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>data_offset</name></name></expr></argument>, <argument><expr><name><name>cur_os</name><operator>-&gt;</operator><name>sync_pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>os</name><operator>-&gt;</operator><name>nb_header</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>os</name><operator>-&gt;</operator><name>pstart</name></name> <operator>+=</operator> <name><name>os</name><operator>-&gt;</operator><name>psize</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>os</name><operator>-&gt;</operator><name>psize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>os</name><operator>-&gt;</operator><name>pflags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>os</name><operator>-&gt;</operator><name>pduration</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>os</name><operator>-&gt;</operator><name>codec</name></name> <operator>&amp;&amp;</operator> <name><name>os</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>packet</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name><name>os</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>packet</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Packet processing failed: %s\n"</literal></expr></argument>, <argument><expr><call><name>av_err2str</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sid</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>sid</name> <operator>=</operator> <name>idx</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dstart</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>dstart</name> <operator>=</operator> <name><name>os</name><operator>-&gt;</operator><name>pstart</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dsize</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>dsize</name> <operator>=</operator> <name><name>os</name><operator>-&gt;</operator><name>psize</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>fpos</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>fpos</name> <operator>=</operator> <name><name>os</name><operator>-&gt;</operator><name>sync_pos</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>os</name><operator>-&gt;</operator><name>pstart</name></name> <operator>+=</operator> <name><name>os</name><operator>-&gt;</operator><name>psize</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>os</name><operator>-&gt;</operator><name>psize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>os</name><operator>-&gt;</operator><name>pstart</name></name> <operator>==</operator> <name><name>os</name><operator>-&gt;</operator><name>bufpos</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>os</name><operator>-&gt;</operator><name>bufpos</name></name> <operator>=</operator> <name><name>os</name><operator>-&gt;</operator><name>pstart</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>os</name><operator>-&gt;</operator><name>sync_pos</name></name> <operator>=</operator> <name><name>os</name><operator>-&gt;</operator><name>page_pos</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>os</name><operator>-&gt;</operator><name>page_end</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>os</name><operator>-&gt;</operator><name>segp</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>os</name><operator>-&gt;</operator><name>nsegs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>os</name><operator>-&gt;</operator><name>segments</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">255</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>os</name><operator>-&gt;</operator><name>page_end</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name><name>os</name><operator>-&gt;</operator><name>segp</name></name> <operator>==</operator> <name><name>os</name><operator>-&gt;</operator><name>nsegs</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ogg</name><operator>-&gt;</operator><name>curidx</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ogg_get_length</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ogg</name></name> <modifier>*</modifier></type><name>ogg</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>size</name></decl>, <decl><type ref="prev"/><name>end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>streams_left</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name><operator>-&gt;</operator><name>seekable</name></name> <operator>&amp;</operator> <name>AVIO_SEEKABLE_NORMAL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>duration</name></name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>avio_size</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>end</name> <operator>=</operator> <ternary><condition><expr><name>size</name> <operator>&gt;</operator> <name>MAX_PAGE_SIZE</name></expr> ?</condition><then> <expr><name>size</name> <operator>-</operator> <name>MAX_PAGE_SIZE</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ogg_save</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ogg</name><operator>-&gt;</operator><name>page_pos</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>!</operator><call><name>ogg_read_page</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ogg</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>granule</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>ogg</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>granule</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<name><name>ogg</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>codec</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>duration</name> <operator>=</operator>

<call><name>ogg_gptopts</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>ogg</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>granule</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>start_time</name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>duration</name> <operator>-=</operator> <name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>start_time</name></expr>;</expr_stmt>

<expr_stmt><expr><name>streams_left</name><operator>-=</operator> <operator>(</operator><name><name>ogg</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>got_start</name><operator>==</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ogg</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>got_start</name><operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><operator>!</operator><name><name>ogg</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>got_start</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ogg</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>got_start</name><operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>streams_left</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>ogg_restore</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ogg_save</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>avio_seek</name> <argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>data_offset</name></name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ogg_reset</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>streams_left</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>ogg_packet</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>pts</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pts</name> <operator>=</operator> <call><name>ogg_calc_pts</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>duration</name> <operator>==</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pts</name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>start_time</name> <operator>==</operator> <name>AV_NOPTS_VALUE</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>ogg</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>got_start</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>duration</name> <operator>-=</operator> <name>pts</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ogg</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>got_start</name><operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>streams_left</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if><if type="elseif">else if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>start_time</name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>ogg</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>got_start</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ogg</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>got_start</name><operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>streams_left</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>ogg_restore</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ogg_read_close</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ogg</name></name> <modifier>*</modifier></type><name>ogg</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ogg</name><operator>-&gt;</operator><name>nstreams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>free_stream</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>ogg</name><operator>-&gt;</operator><name>nstreams</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ogg</name><operator>-&gt;</operator><name>streams</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ogg_read_header</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ogg</name></name> <modifier>*</modifier></type><name>ogg</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ogg</name><operator>-&gt;</operator><name>curidx</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ogg_packet</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ogg_read_close</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block> while <condition>(<expr><operator>!</operator><name><name>ogg</name><operator>-&gt;</operator><name>headers</name></name></expr>)</condition>;</do>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"found headers\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ogg</name><operator>-&gt;</operator><name>nstreams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ogg_stream</name></name> <modifier>*</modifier></type><name>os</name> <init>= <expr><name><name>ogg</name><operator>-&gt;</operator><name>streams</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ogg</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>header</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Header parsing failed for stream %d\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ogg</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>codec</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ogg</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>private</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>os</name><operator>-&gt;</operator><name>codec</name></name> <operator>&amp;&amp;</operator> <name><name>os</name><operator>-&gt;</operator><name>nb_header</name></name> <operator>&lt;</operator> <name><name>os</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>nb_header</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,

<argument><expr><literal type="string">"Headers mismatch for stream %d: "</literal>

<literal type="string">"expected %d received %d.\n"</literal></expr></argument>,

<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>os</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>nb_header</name></name></expr></argument>, <argument><expr><name><name>os</name><operator>-&gt;</operator><name>nb_header</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>error_recognition</name></name> <operator>&amp;</operator> <name>AV_EF_EXPLODE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ogg_read_close</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>os</name><operator>-&gt;</operator><name>start_granule</name></name> <operator>!=</operator> <name>OGG_NOGRANULE_VALUE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>os</name><operator>-&gt;</operator><name>lastpts</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>start_time</name> <operator>=</operator>

<call><name>ogg_gptopts</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>os</name><operator>-&gt;</operator><name>start_granule</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ogg_get_length</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ogg_read_close</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64_t</name></type> <name>ogg_calc_pts</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>dts</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ogg</name></name> <modifier>*</modifier></type><name>ogg</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ogg_stream</name></name> <modifier>*</modifier></type><name>os</name> <init>= <expr><name><name>ogg</name><operator>-&gt;</operator><name>streams</name></name> <operator>+</operator> <name>idx</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>pts</name> <init>= <expr><name>AV_NOPTS_VALUE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>dts</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>dts</name> <operator>=</operator> <name>AV_NOPTS_VALUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>os</name><operator>-&gt;</operator><name>lastpts</name></name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pts</name> <operator>=</operator> <name><name>os</name><operator>-&gt;</operator><name>lastpts</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>os</name><operator>-&gt;</operator><name>lastpts</name></name> <operator>=</operator> <name>AV_NOPTS_VALUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>os</name><operator>-&gt;</operator><name>lastdts</name></name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>dts</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>dts</name> <operator>=</operator> <name><name>os</name><operator>-&gt;</operator><name>lastdts</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>os</name><operator>-&gt;</operator><name>lastdts</name></name> <operator>=</operator> <name>AV_NOPTS_VALUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>os</name><operator>-&gt;</operator><name>page_end</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>os</name><operator>-&gt;</operator><name>granule</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1LL</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>os</name><operator>-&gt;</operator><name>codec</name></name> <operator>&amp;&amp;</operator> <name><name>os</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>granule_is_start</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>pts</name> <operator>=</operator> <call><name>ogg_gptopts</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name><name>os</name><operator>-&gt;</operator><name>granule</name></name></expr></argument>, <argument><expr><name>dts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>os</name><operator>-&gt;</operator><name>lastpts</name></name> <operator>=</operator> <call><name>ogg_gptopts</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name><name>os</name><operator>-&gt;</operator><name>granule</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>os</name><operator>-&gt;</operator><name>lastdts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>os</name><operator>-&gt;</operator><name>granule</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1LL</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>pts</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ogg_validate_keyframe</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pstart</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>psize</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ogg</name></name> <modifier>*</modifier></type><name>ogg</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ogg_stream</name></name> <modifier>*</modifier></type><name>os</name> <init>= <expr><name><name>ogg</name><operator>-&gt;</operator><name>streams</name></name> <operator>+</operator> <name>idx</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>invalid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>psize</name></expr>)</condition> <block>{<block_content>

<switch>switch <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>idx</name></expr>]</index></name><operator>-&gt;</operator><name><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_CODEC_ID_THEORA</name></expr>:</case>

<expr_stmt><expr><name>invalid</name> <operator>=</operator> <operator>!</operator><operator>!</operator><operator>(</operator><name><name>os</name><operator>-&gt;</operator><name>pflags</name></name> <operator>&amp;</operator> <name>AV_PKT_FLAG_KEY</name><operator>)</operator> <operator>!=</operator> <operator>!</operator><operator>(</operator><name><name>os</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>pstart</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x40</literal><operator>)</operator></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_CODEC_ID_VP8</name></expr>:</case>

<expr_stmt><expr><name>invalid</name> <operator>=</operator> <operator>!</operator><operator>!</operator><operator>(</operator><name><name>os</name><operator>-&gt;</operator><name>pflags</name></name> <operator>&amp;</operator> <name>AV_PKT_FLAG_KEY</name><operator>)</operator> <operator>!=</operator> <operator>!</operator><operator>(</operator><name><name>os</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>pstart</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>invalid</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>os</name><operator>-&gt;</operator><name>pflags</name></name> <operator>^=</operator> <name>AV_PKT_FLAG_KEY</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Broken file, %skeyframe not correctly marked.\n"</literal></expr></argument>,

<argument><expr><ternary><condition><expr><operator>(</operator><name><name>os</name><operator>-&gt;</operator><name>pflags</name></name> <operator>&amp;</operator> <name>AV_PKT_FLAG_KEY</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><literal type="string">"non-"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ogg_read_packet</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ogg</name></name> <modifier>*</modifier></type><name>ogg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ogg_stream</name></name> <modifier>*</modifier></type><name>os</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pstart</name></decl>, <decl><type ref="prev"/><name>psize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>fpos</name></decl>, <decl><type ref="prev"/><name>pts</name></decl>, <decl><type ref="prev"/><name>dts</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>io_repositioned</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ogg_reset</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>io_repositioned</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<label><name>retry</name>:</label>

<do>do <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ogg_packet</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>idx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pstart</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psize</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fpos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block> while <condition>(<expr><name>idx</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>idx</name></expr>]</index></name></expr>)</condition>;</do>

<expr_stmt><expr><name>ogg</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>os</name> <operator>=</operator> <name><name>ogg</name><operator>-&gt;</operator><name>streams</name></name> <operator>+</operator> <name>idx</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pts</name> <operator>=</operator> <call><name>ogg_calc_pts</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ogg_validate_keyframe</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>pstart</name></expr></argument>, <argument><expr><name>psize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>os</name><operator>-&gt;</operator><name>keyframe_seek</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>os</name><operator>-&gt;</operator><name>pflags</name></name> <operator>&amp;</operator> <name>AV_PKT_FLAG_KEY</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>retry</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>os</name><operator>-&gt;</operator><name>keyframe_seek</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_new_packet</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>psize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>stream_index</name></name> <operator>=</operator> <name>idx</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>os</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name>pstart</name></expr></argument>, <argument><expr><name>psize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name>pts</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>dts</name></name> <operator>=</operator> <name>dts</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name><name>os</name><operator>-&gt;</operator><name>pflags</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>duration</name></name> <operator>=</operator> <name><name>os</name><operator>-&gt;</operator><name>pduration</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <name>fpos</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>os</name><operator>-&gt;</operator><name>end_trimming</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>side_data</name> <init>= <expr><call><name>av_packet_new_side_data</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>,

<argument><expr><name>AV_PKT_DATA_SKIP_SAMPLES</name></expr></argument>,

<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>side_data</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>AV_WL32</name><argument_list>(<argument><expr><name>side_data</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name><name>os</name><operator>-&gt;</operator><name>end_trimming</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>os</name><operator>-&gt;</operator><name>end_trimming</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>os</name><operator>-&gt;</operator><name>new_metadata</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>side_data</name> <init>= <expr><call><name>av_packet_new_side_data</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>,

<argument><expr><name>AV_PKT_DATA_METADATA_UPDATE</name></expr></argument>,

<argument><expr><name><name>os</name><operator>-&gt;</operator><name>new_metadata_size</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>side_data</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>side_data</name></expr></argument>, <argument><expr><name><name>os</name><operator>-&gt;</operator><name>new_metadata</name></name></expr></argument>, <argument><expr><name><name>os</name><operator>-&gt;</operator><name>new_metadata_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>os</name><operator>-&gt;</operator><name>new_metadata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>os</name><operator>-&gt;</operator><name>new_metadata_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>psize</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64_t</name></type> <name>ogg_read_timestamp</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stream_index</name></decl></parameter>,

<parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>pos_arg</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>pos_limit</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ogg</name></name> <modifier>*</modifier></type><name>ogg</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>bc</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>pts</name> <init>= <expr><name>AV_NOPTS_VALUE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>keypos</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pstart</name></decl>, <decl><type ref="prev"/><name>psize</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name>bc</name></expr></argument>, <argument><expr><operator>*</operator><name>pos_arg</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ogg_reset</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>( <expr><call><name>avio_tell</name><argument_list>(<argument><expr><name>bc</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>pos_limit</name>

<operator>&amp;&amp;</operator> <operator>!</operator><call><name>ogg_packet</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pstart</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psize</name></expr></argument>, <argument><expr><name>pos_arg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>stream_index</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ogg_stream</name></name> <modifier>*</modifier></type><name>os</name> <init>= <expr><name><name>ogg</name><operator>-&gt;</operator><name>streams</name></name> <operator>+</operator> <name>stream_index</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><operator>(</operator><name><name>os</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>OGG_FLAG_EOS</name><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>os</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>OGG_FLAG_BOS</name><operator>)</operator>

<operator>&amp;&amp;</operator> <name><name>os</name><operator>-&gt;</operator><name>codec</name></name> <operator>==</operator> <operator>&amp;</operator><name>ff_ogm_video_codec</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pts</name> <operator>=</operator> <call><name>ogg_calc_pts</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ogg_validate_keyframe</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>pstart</name></expr></argument>, <argument><expr><name>psize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>os</name><operator>-&gt;</operator><name>pflags</name></name> <operator>&amp;</operator> <name>AV_PKT_FLAG_KEY</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>keypos</name> <operator>=</operator> <operator>*</operator><name>pos_arg</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>os</name><operator>-&gt;</operator><name>keyframe_seek</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>keypos</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>pos_arg</name> <operator>=</operator> <name>keypos</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>pts</name> <operator>=</operator> <name>AV_NOPTS_VALUE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pts</name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>ogg_reset</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>pts</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ogg_read_seek</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stream_index</name></decl></parameter>,

<parameter><decl><type><name>int64_t</name></type> <name>timestamp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ogg</name></name> <modifier>*</modifier></type><name>ogg</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ogg_stream</name></name> <modifier>*</modifier></type><name>os</name> <init>= <expr><name><name>ogg</name><operator>-&gt;</operator><name>streams</name></name> <operator>+</operator> <name>stream_index</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>stream_index</name> <operator>&lt;</operator> <name><name>ogg</name><operator>-&gt;</operator><name>nstreams</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ogg_reset</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>stream_index</name></expr>]</index></name><operator>-&gt;</operator><name><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_VIDEO</name>

<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>AVSEEK_FLAG_ANY</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>os</name><operator>-&gt;</operator><name>keyframe_seek</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_seek_frame_binary</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>stream_index</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ogg_reset</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>os</name> <operator>=</operator> <name><name>ogg</name><operator>-&gt;</operator><name>streams</name></name> <operator>+</operator> <name>stream_index</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>os</name><operator>-&gt;</operator><name>keyframe_seek</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ogg_probe</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVProbeData</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><literal type="string">"OggS"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&lt;=</operator> <literal type="number">0x7</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVPROBE_SCORE_MAX</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name>AVInputFormat</name></type> <name>ff_ogg_demuxer</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"ogg"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Ogg"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>ogg</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>read_probe</name> <operator>=</operator> <name>ogg_probe</name></expr>,

<expr><operator>.</operator><name>read_header</name> <operator>=</operator> <name>ogg_read_header</name></expr>,

<expr><operator>.</operator><name>read_packet</name> <operator>=</operator> <name>ogg_read_packet</name></expr>,

<expr><operator>.</operator><name>read_close</name> <operator>=</operator> <name>ogg_read_close</name></expr>,

<expr><operator>.</operator><name>read_seek</name> <operator>=</operator> <name>ogg_read_seek</name></expr>,

<expr><operator>.</operator><name>read_timestamp</name> <operator>=</operator> <name>ogg_read_timestamp</name></expr>,

<expr><operator>.</operator><name>extensions</name> <operator>=</operator> <literal type="string">"ogg"</literal></expr>,

<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>AVFMT_GENERIC_INDEX</name> <operator>|</operator> <name>AVFMT_TS_DISCONT</name> <operator>|</operator> <name>AVFMT_NOBINSEARCH</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
