<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavformat\mpsubdec.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avformat.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"subtitles.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TSBASE</name></cpp:macro> <cpp:value>10000000</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>FFDemuxSubtitlesQueue</name></type> <name>q</name></decl>;</decl_stmt>

}</block></struct></type> <name>MPSubContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mpsub_probe</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVProbeData</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>buf</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr_end</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>buf_size</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>ptr</name> <operator>&lt;</operator> <name>ptr_end</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>inc</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"FORMAT=TIME"</literal></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVPROBE_SCORE_EXTENSION</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"FORMAT="</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVPROBE_SCORE_EXTENSION</name> <operator>/</operator> <literal type="number">3</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>inc</name> <operator>=</operator> <call><name>ff_subtitles_next_line</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>inc</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <name>inc</name></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_line</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>value2</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>vi</name></decl>, <decl><type ref="prev"/><name>p1</name></decl>, <decl><type ref="prev"/><name>p2</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>vi</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>vi</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>vi</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>intval</name></decl>, <decl><type ref="prev"/><name>fracval</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name>av_sscanf</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"%lld%n.%lld%n"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>intval</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fracval</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>intval</name> <argument_list type="generic">&lt; <argument><expr><name>INT64_MIN</name> <operator>/</operator> <name>TSBASE</name> <operator>||</operator> <name>intval</name></expr></argument> &gt;</argument_list></name> <name>INT64_MAX</name> <operator>/</operator> <name>TSBASE</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>intval</name> <operator>*=</operator> <name>TSBASE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>fracval</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init>;</init><condition><expr><name>p2</name> <operator>-</operator> <name>p1</name> <operator>&lt;</operator> <literal type="number">7</literal> <operator>+</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>p1</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>fracval</name> <operator>*=</operator> <literal type="number">10</literal></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init>;</init><condition><expr><name>p2</name> <operator>-</operator> <name>p1</name> <operator>&gt;</operator> <literal type="number">7</literal> <operator>+</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>p1</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>fracval</name> <operator>/=</operator> <literal type="number">10</literal></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>intval</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>intval</name> <operator>+=</operator> <name>fracval</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>intval</name> <operator>-=</operator> <name>fracval</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>line</name> <operator>+=</operator> <name>p2</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>line</name> <operator>+=</operator> <name>p1</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <name>intval</name></expr>;</expr_stmt>

<expr_stmt><expr><name>value</name> <operator>=</operator> <name>value2</name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mpsub_read_header</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MPSubContext</name> <modifier>*</modifier></type><name>mpsub</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVBPrint</name></type> <name>buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVRational</name></type> <name>pts_info</name> <init>= <expr><operator>(</operator><name>AVRational</name><operator>)</operator><block>{ <expr><name>TSBASE</name></expr>, <expr><literal type="number">1</literal></expr> }</block></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>current_pts</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>common_factor</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_bprint_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>AV_BPRINT_SIZE_UNLIMITED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>!</operator><call><name>avio_feof</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>line</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>start</name></decl>, <decl><type ref="prev"/><name>duration</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fps</name></decl>, <decl><type ref="prev"/><name>len</name> <init>= <expr><call><name>ff_get_line</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>len</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>line</name><index>[<expr><call><name>strcspn</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"\r\n"</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>sscanf</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"FORMAT=%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>fps</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>fps</name> <operator>&gt;</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name>fps</name> <operator>&lt;</operator> <literal type="number">100</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pts_info</name> <operator>=</operator> <operator>(</operator><name>AVRational</name><operator>)</operator><block>{ <expr><name>TSBASE</name> <operator>*</operator> <name>fps</name></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>parse_line</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>start</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>duration</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>sub</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>pos</name> <init>= <expr><call><name>avio_tell</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_subtitles_read_chunk</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>.</operator><name>len</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>sub</name> <operator>=</operator> <call><name>ff_subtitles_queue_insert</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mpsub</name><operator>-&gt;</operator><name>q</name></name></expr></argument>, <argument><expr><name><name>buf</name><operator>.</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>buf</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sub</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name><name>current_pts</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>start</name> <argument_list type="generic">&lt; <argument><expr><name>INT64_MIN</name> <operator>-</operator> <name>current_pts</name>

<operator>||</operator> <name>current_pts</name></expr></argument> &gt;</argument_list></name> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>start</name></expr></argument> &gt;</argument_list></name> <name>INT64_MAX</name> <operator>-</operator> <name>current_pts</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sub</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name>current_pts</name> <operator>+</operator> <name>start</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>duration</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name><name>sub</name><operator>-&gt;</operator><name>pts</name></name></expr></argument> &gt;</argument_list></name> <name>INT64_MAX</name> <operator>-</operator> <name>duration</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sub</name><operator>-&gt;</operator><name>duration</name></name> <operator>=</operator> <name>duration</name></expr>;</expr_stmt>

<expr_stmt><expr><name>common_factor</name> <operator>=</operator> <call><name>av_gcd</name><argument_list>(<argument><expr><name>duration</name></expr></argument>, <argument><expr><name>common_factor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>common_factor</name> <operator>=</operator> <call><name>av_gcd</name><argument_list>(<argument><expr><name><name>sub</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>, <argument><expr><name>common_factor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>current_pts</name> <operator>=</operator> <name><name>sub</name><operator>-&gt;</operator><name>pts</name></name> <operator>+</operator> <name>duration</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sub</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>common_factor</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>common_factor</name> <operator>=</operator> <call><name>av_gcd</name><argument_list>(<argument><expr><name><name>pts_info</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><name>common_factor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>mpsub</name><operator>-&gt;</operator><name>q</name><operator>.</operator><name>nb_subs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>mpsub</name><operator>-&gt;</operator><name>q</name><operator>.</operator><name>subs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pts</name> <operator>/=</operator> <name>common_factor</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mpsub</name><operator>-&gt;</operator><name>q</name><operator>.</operator><name>subs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>duration</name> <operator>/=</operator> <name>common_factor</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>pts_info</name><operator>.</operator><name>num</name></name> <operator>/=</operator> <name>common_factor</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>st</name> <operator>=</operator> <call><name>avformat_new_stream</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>st</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>avpriv_set_pts_info</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><name><name>pts_info</name><operator>.</operator><name>den</name></name></expr></argument>, <argument><expr><name><name>pts_info</name><operator>.</operator><name>num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>=</operator> <name>AVMEDIA_TYPE_SUBTITLE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>=</operator> <name>AV_CODEC_ID_TEXT</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_subtitles_queue_finalize</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mpsub</name><operator>-&gt;</operator><name>q</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>end</name>:</label>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_subtitles_queue_clean</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mpsub</name><operator>-&gt;</operator><name>q</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_bprint_finalize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mpsub_read_packet</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MPSubContext</name> <modifier>*</modifier></type><name>mpsub</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>ff_subtitles_queue_read_packet</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mpsub</name><operator>-&gt;</operator><name>q</name></name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mpsub_read_seek</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stream_index</name></decl></parameter>,

<parameter><decl><type><name>int64_t</name></type> <name>min_ts</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>ts</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>max_ts</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MPSubContext</name> <modifier>*</modifier></type><name>mpsub</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>ff_subtitles_queue_seek</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mpsub</name><operator>-&gt;</operator><name>q</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>stream_index</name></expr></argument>,

<argument><expr><name>min_ts</name></expr></argument>, <argument><expr><name>ts</name></expr></argument>, <argument><expr><name>max_ts</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mpsub_read_close</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MPSubContext</name> <modifier>*</modifier></type><name>mpsub</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_subtitles_queue_clean</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mpsub</name><operator>-&gt;</operator><name>q</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name>AVInputFormat</name></type> <name>ff_mpsub_demuxer</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"mpsub"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"MPlayer subtitles"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>MPSubContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>read_probe</name> <operator>=</operator> <name>mpsub_probe</name></expr>,

<expr><operator>.</operator><name>read_header</name> <operator>=</operator> <name>mpsub_read_header</name></expr>,

<expr><operator>.</operator><name>read_packet</name> <operator>=</operator> <name>mpsub_read_packet</name></expr>,

<expr><operator>.</operator><name>read_seek2</name> <operator>=</operator> <name>mpsub_read_seek</name></expr>,

<expr><operator>.</operator><name>read_close</name> <operator>=</operator> <name>mpsub_read_close</name></expr>,

<expr><operator>.</operator><name>extensions</name> <operator>=</operator> <literal type="string">"sub"</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
