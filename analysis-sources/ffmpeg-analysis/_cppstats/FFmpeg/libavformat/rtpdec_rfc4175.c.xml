<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavformat\rtpdec_rfc4175.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avio_internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rtpdec_formats.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avstring.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixdesc.h"</cpp:file></cpp:include>

<struct>struct <name>PayloadContext</name> <block>{

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>sampling</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>depth</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>height</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>frame</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>frame_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>pgroup</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>xinc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>timestamp</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rfc4175_parse_format</name><parameter_list>(<parameter><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>PayloadContext</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>pixfmt</name> <init>= <expr><name>AV_PIX_FMT_NONE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bits_per_sample</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>sampling</name></name></expr></argument>, <argument><expr><literal type="string">"YCbCr-4:2:2"</literal></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tag</name> <operator>=</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'U'</literal></expr></argument>, <argument><expr><literal type="char">'Y'</literal></expr></argument>, <argument><expr><literal type="char">'V'</literal></expr></argument>, <argument><expr><literal type="char">'Y'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>xinc</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>depth</name></name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>pgroup</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>bits_per_sample</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>pixfmt</name> <operator>=</operator> <name>AV_PIX_FMT_UYVY422</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>depth</name></name> <operator>==</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>pgroup</name></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>bits_per_sample</name> <operator>=</operator> <literal type="number">20</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>pixfmt</name> <operator>=</operator> <name>AV_PIX_FMT_YUV422P10</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>pixfmt</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_tag</name></name> <operator>=</operator> <name>tag</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>bits_per_coded_sample</name></name> <operator>=</operator> <name>bits_per_sample</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <name><name>data</name><operator>-&gt;</operator><name>height</name></name> <operator>*</operator> <name><name>data</name><operator>-&gt;</operator><name>pgroup</name></name> <operator>/</operator> <name><name>data</name><operator>-&gt;</operator><name>xinc</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rfc4175_parse_fmtp</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>,

<parameter><decl><type><name>PayloadContext</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>attr</name></expr></argument>, <argument><expr><literal type="string">"width"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>attr</name></expr></argument>, <argument><expr><literal type="string">"height"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>attr</name></expr></argument>, <argument><expr><literal type="string">"sampling"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>sampling</name></name> <operator>=</operator> <call><name>av_strdup</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>attr</name></expr></argument>, <argument><expr><literal type="string">"depth"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>depth</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rfc4175_parse_sdp_line</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>st_index</name></decl></parameter>,

<parameter><decl><type><name>PayloadContext</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>st_index</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_strstart</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"fmtp:"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>stream</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>st_index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>ff_parse_fmtp</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>rfc4175_parse_fmtp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>sampling</name></name> <operator>||</operator> <operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>depth</name></name> <operator>||</operator> <operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>width</name></name> <operator>||</operator> <operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>height</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>rfc4175_parse_format</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>sampling</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rfc4175_finalize_packet</name><parameter_list>(<parameter><decl><type><name>PayloadContext</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>stream_index</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>stream_index</name></name> <operator>=</operator> <name>stream_index</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_packet_from_data</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>frame_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>frame</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rfc4175_handle_packet</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>PayloadContext</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>timestamp</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>,

<parameter><decl><type><name>uint16_t</name></type> <name>seq</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>length</name></decl>, <decl><type ref="prev"/><name>line</name></decl>, <decl><type ref="prev"/><name>offset</name></decl>, <decl><type ref="prev"/><name>cont</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>headers</name> <init>= <expr><name>buf</name> <operator>+</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>payload</name> <init>= <expr><name>buf</name> <operator>+</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>payload_len</name> <init>= <expr><name>len</name> <operator>-</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>missed_last_packet</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>timestamp</name> <operator>!=</operator> <name><name>data</name><operator>-&gt;</operator><name>timestamp</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>frame</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Missed previous RTP Marker\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>missed_last_packet</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rfc4175_finalize_packet</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>frame</name></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>frame_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>timestamp</name></name> <operator>=</operator> <operator>*</operator><name>timestamp</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>frame</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Out of memory.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<do>do <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>payload_len</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>cont</name> <operator>=</operator> <name><name>payload</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>payload</name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>payload_len</name> <operator>-=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name>cont</name></expr>)</condition>;</do>

<do>do <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>copy_offset</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>payload_len</name> <operator>&lt;</operator> <name><name>data</name><operator>-&gt;</operator><name>pgroup</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>length</name> <operator>=</operator> <operator>(</operator><name><name>headers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>headers</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>line</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>headers</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7f</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>headers</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>headers</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7f</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>headers</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>cont</name> <operator>=</operator> <name><name>headers</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>headers</name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>length</name> <operator>%</operator> <name><name>data</name><operator>-&gt;</operator><name>pgroup</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>length</name> <operator>&gt;</operator> <name>payload_len</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>length</name> <operator>=</operator> <name>payload_len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>copy_offset</name> <operator>=</operator> <operator>(</operator><name>line</name> <operator>*</operator> <name><name>data</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <name>offset</name><operator>)</operator> <operator>*</operator> <name><name>data</name><operator>-&gt;</operator><name>pgroup</name></name> <operator>/</operator> <name><name>data</name><operator>-&gt;</operator><name>xinc</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>copy_offset</name> <operator>+</operator> <name>length</name> <operator>&gt;</operator> <name><name>data</name><operator>-&gt;</operator><name>frame_size</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>dest</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>frame</name></name> <operator>+</operator> <name>copy_offset</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>payload</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>payload</name> <operator>+=</operator> <name>length</name></expr>;</expr_stmt>

<expr_stmt><expr><name>payload_len</name> <operator>-=</operator> <name>length</name></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name>cont</name></expr>)</condition>;</do>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>RTP_FLAG_MARKER</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>rfc4175_finalize_packet</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>missed_last_packet</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>RTPDynamicProtocolHandler</name></type> <name>ff_rfc4175_rtp_handler</name> <init>= <expr><block>{

<expr><operator>.</operator><name>enc_name</name> <operator>=</operator> <literal type="string">"raw"</literal></expr>,

<expr><operator>.</operator><name>codec_type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>codec_id</name> <operator>=</operator> <name>AV_CODEC_ID_BITPACKED</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>PayloadContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>parse_sdp_a_line</name> <operator>=</operator> <name>rfc4175_parse_sdp_line</name></expr>,

<expr><operator>.</operator><name>parse_packet</name> <operator>=</operator> <name>rfc4175_handle_packet</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
