<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavformat\mp3enc.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avformat.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avio_internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"id3v1.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"id3v2.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rawenc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avstring.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/mpegaudio.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/mpegaudiodata.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/mpegaudiodecheader.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/dict.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/crc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mathematics.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/replaygain.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>int</name></type> <name>id3v1_set_string</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVDictionaryEntry</name> <modifier>*</modifier></type><name>tag</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tag</name> <operator>=</operator> <call><name>av_dict_get</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_strlcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>tag</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>!</operator><operator>!</operator><name>tag</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>id3v1_create_tag</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVDictionaryEntry</name> <modifier>*</modifier></type><name>tag</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ID3v1_TAG_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'T'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'A'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'G'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>count</name> <operator>+=</operator> <call><name>id3v1_set_string</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"TIT2"</literal></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">30</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>count</name> <operator>+=</operator> <call><name>id3v1_set_string</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"TPE1"</literal></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">33</literal></expr></argument>, <argument><expr><literal type="number">30</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>count</name> <operator>+=</operator> <call><name>id3v1_set_string</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"TALB"</literal></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">63</literal></expr></argument>, <argument><expr><literal type="number">30</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>count</name> <operator>+=</operator> <call><name>id3v1_set_string</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"TDRC"</literal></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">93</literal></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>count</name> <operator>+=</operator> <call><name>id3v1_set_string</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"comment"</literal></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">97</literal></expr></argument>, <argument><expr><literal type="number">30</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tag</name> <operator>=</operator> <call><name>av_dict_get</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><literal type="string">"TRCK"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">125</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">126</literal></expr>]</index></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>tag</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">127</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tag</name> <operator>=</operator> <call><name>av_dict_get</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><literal type="string">"TCON"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content> 

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>ID3v1_GENRE_MAX</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>av_strcasecmp</name><argument_list>(<argument><expr><name><name>tag</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name><name>ff_id3v1_genre_str</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">127</literal></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>count</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XING_NUM_BAGS</name></cpp:macro> <cpp:value>400</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XING_TOC_SIZE</name></cpp:macro> <cpp:value>100</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XING_SIZE</name></cpp:macro> <cpp:value>156</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>MP3Context</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ID3v2EncContext</name></type> <name>id3</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>id3v2_version</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>write_id3v1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>write_xing</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>xing_frame</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>xing_frame_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCRC</name></type> <name>audio_crc</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>audio_size</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int64_t</name></type> <name>xing_frame_offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>xing_offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>frames</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>want</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>seen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name><name>bag</name><index>[<expr><name>XING_NUM_BAGS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>initial_bitrate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>has_variable_bitrate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>delay</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>padding</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>audio_stream_idx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pics_to_write</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVPacketList</name> <modifier>*</modifier></type><name>queue</name></decl>, <modifier>*</modifier><name>queue_end</name>;</decl_stmt>

}</block></struct></type> <name>MP3Context</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>xing_offtbl</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{<expr><block>{<expr><literal type="number">32</literal></expr>, <expr><literal type="number">17</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">17</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mp3_write_xing</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MP3Context</name> <modifier>*</modifier></type><name>mp3</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodecParameters</name> <modifier>*</modifier></type><name>par</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name><name>mp3</name><operator>-&gt;</operator><name>audio_stream_idx</name></name></expr>]</index></name><operator>-&gt;</operator><name>codecpar</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVDictionaryEntry</name> <modifier>*</modifier></type><name>enc</name> <init>= <expr><call><name>av_dict_get</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name><name>mp3</name><operator>-&gt;</operator><name>audio_stream_idx</name></name></expr>]</index></name><operator>-&gt;</operator><name>metadata</name></expr></argument>, <argument><expr><literal type="string">"encoder"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>dyn_ctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>header</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MPADecodeHeader</name></type> <name>mpah</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>srate_idx</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>channels</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bitrate_idx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>best_bitrate_idx</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>best_bitrate_error</name> <init>= <expr><name>INT_MAX</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ver</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bytes_needed</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name><operator>-&gt;</operator><name>seekable</name></name> <operator>&amp;</operator> <name>AVIO_SEEKABLE_NORMAL</name><operator>)</operator> <operator>||</operator> <operator>!</operator><name><name>mp3</name><operator>-&gt;</operator><name>write_xing</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>avpriv_mpa_freq_tab</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name></type> <name>base_freq</name> <init>= <expr><name><name>avpriv_mpa_freq_tab</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>par</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>==</operator> <name>base_freq</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>ver</name> <operator>=</operator> <literal type="number">0x3</literal></expr>;</expr_stmt></block_content></block></if> 

<if type="elseif">else if <condition>(<expr><name><name>par</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>==</operator> <name>base_freq</name> <operator>/</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>ver</name> <operator>=</operator> <literal type="number">0x2</literal></expr>;</expr_stmt></block_content></block></if> 

<if type="elseif">else if <condition>(<expr><name><name>par</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>==</operator> <name>base_freq</name> <operator>/</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>ver</name> <operator>=</operator> <literal type="number">0x0</literal></expr>;</expr_stmt></block_content></block></if> 

<else>else<block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></else></if_stmt>

<expr_stmt><expr><name>srate_idx</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>avpriv_mpa_freq_tab</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Unsupported sample rate, not writing Xing header.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>par</name><operator>-&gt;</operator><name>channels</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><name>channels</name> <operator>=</operator> <name>MPA_MONO</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case> <expr_stmt><expr><name>channels</name> <operator>=</operator> <name>MPA_STEREO</name></expr>;</expr_stmt> <break>break;</break>

<default>default:</default> <expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Unsupported number of channels, "</literal>

<literal type="string">"not writing Xing header.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

<expr_stmt><expr><name>header</name> <operator>=</operator> <literal type="number">0xffU</literal> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>header</name> <operator>|=</operator> <operator>(</operator><literal type="number">0x7</literal> <operator>&lt;&lt;</operator> <literal type="number">5</literal> <operator>|</operator> <name>ver</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal> <operator>|</operator> <literal type="number">0x1</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal> <operator>|</operator> <literal type="number">0x1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>header</name> <operator>|=</operator> <operator>(</operator><name>srate_idx</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>header</name> <operator>|=</operator> <name>channels</name> <operator>&lt;&lt;</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>bitrate_idx</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>bitrate_idx</name> <operator>&lt;</operator> <literal type="number">15</literal></expr>;</condition> <incr><expr><name>bitrate_idx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>bit_rate</name> <init>= <expr><literal type="number">1000</literal> <operator>*</operator> <name><name>avpriv_mpa_bitrate_tab</name><index>[<expr><name>ver</name> <operator>!=</operator> <literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">3</literal> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>bitrate_idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>error</name> <init>= <expr><call><name>FFABS</name><argument_list>(<argument><expr><name>bit_rate</name> <operator>-</operator> <name><name>par</name><operator>-&gt;</operator><name>bit_rate</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>error</name> <operator>&lt;</operator> <name>best_bitrate_error</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>best_bitrate_error</name> <operator>=</operator> <name>error</name></expr>;</expr_stmt>

<expr_stmt><expr><name>best_bitrate_idx</name> <operator>=</operator> <name>bitrate_idx</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>best_bitrate_idx</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>bitrate_idx</name> <operator>=</operator> <name>best_bitrate_idx</name></expr>;</init> <condition>;</condition> <incr><expr><name>bitrate_idx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name></type> <name>mask</name> <init>= <expr><name>bitrate_idx</name> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">4</literal> <operator>+</operator> <literal type="number">8</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">15</literal> <operator>==</operator> <name>bitrate_idx</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>header</name> <operator>|=</operator> <name>mask</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avpriv_mpegaudio_decode_header</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mpah</name></expr></argument>, <argument><expr><name>header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>ret</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mp3</name><operator>-&gt;</operator><name>xing_offset</name></name> <operator>=</operator> <name><name>xing_offtbl</name><index>[<expr><name><name>mpah</name><operator>.</operator><name>lsf</name></name> <operator>==</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name><name>mpah</name><operator>.</operator><name>nb_channels</name></name> <operator>==</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>bytes_needed</name> <operator>=</operator> <name><name>mp3</name><operator>-&gt;</operator><name>xing_offset</name></name> <operator>+</operator> <name>XING_SIZE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bytes_needed</name> <operator>&lt;=</operator> <name><name>mpah</name><operator>.</operator><name>frame_size</name></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>header</name> <operator>&amp;=</operator> <operator>~</operator><name>mask</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avio_open_dyn_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dyn_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>dyn_ctx</name></expr></argument>, <argument><expr><name>header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ffio_fill</name><argument_list>(<argument><expr><name>dyn_ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>mp3</name><operator>-&gt;</operator><name>xing_offset</name></name> <operator>-</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>dyn_ctx</name></expr></argument>, <argument><expr><literal type="string">"Xing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>dyn_ctx</name></expr></argument>, <argument><expr><literal type="number">0x01</literal> <operator>|</operator> <literal type="number">0x02</literal> <operator>|</operator> <literal type="number">0x04</literal> <operator>|</operator> <literal type="number">0x08</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>mp3</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>mpah</name><operator>.</operator><name>frame_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mp3</name><operator>-&gt;</operator><name>want</name></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mp3</name><operator>-&gt;</operator><name>seen</name></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mp3</name><operator>-&gt;</operator><name>pos</name></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>dyn_ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>dyn_ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>XING_TOC_SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>dyn_ctx</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><literal type="number">255</literal> <operator>*</operator> <name>i</name> <operator>/</operator> <name>XING_TOC_SIZE</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>dyn_ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>enc</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>encoder_str</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>enc</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>encoder_str</name></expr></argument>)</argument_list></sizeof>

<operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"Lavc libmp3lame"</literal></expr></argument>, <argument><expr><name><name>enc</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>encoder_str</name></expr></argument>, <argument><expr><literal type="string">"Lavf lame"</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>encoder_str</name></expr></argument>, <argument><expr><name><name>enc</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>enc</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>encoder_str</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name>dyn_ctx</name></expr></argument>, <argument><expr><name>encoder_str</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>encoder_str</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name>dyn_ctx</name></expr></argument>, <argument><expr><literal type="string">"Lavf\0\0\0\0\0"</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>dyn_ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>dyn_ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ffio_fill</name><argument_list>(<argument><expr><name>dyn_ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>dyn_ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>dyn_ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb24</name><argument_list>(<argument><expr><name>dyn_ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>dyn_ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>dyn_ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>dyn_ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>dyn_ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>dyn_ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>dyn_ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ffio_fill</name><argument_list>(<argument><expr><name>dyn_ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>mpah</name><operator>.</operator><name>frame_size</name></name> <operator>-</operator> <name>bytes_needed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mp3</name><operator>-&gt;</operator><name>xing_frame_size</name></name> <operator>=</operator> <call><name>avio_close_dyn_buf</name><argument_list>(<argument><expr><name>dyn_ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mp3</name><operator>-&gt;</operator><name>xing_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mp3</name><operator>-&gt;</operator><name>xing_frame_offset</name></name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name><name>mp3</name><operator>-&gt;</operator><name>xing_frame</name></name></expr></argument>, <argument><expr><name><name>mp3</name><operator>-&gt;</operator><name>xing_frame_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mp3</name><operator>-&gt;</operator><name>audio_size</name></name> <operator>=</operator> <name><name>mp3</name><operator>-&gt;</operator><name>xing_frame_size</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mp3_xing_add_frame</name><parameter_list>(<parameter><decl><type><name>MP3Context</name> <modifier>*</modifier></type><name>mp3</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>mp3</name><operator>-&gt;</operator><name>frames</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mp3</name><operator>-&gt;</operator><name>seen</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mp3</name><operator>-&gt;</operator><name>size</name></name> <operator>+=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mp3</name><operator>-&gt;</operator><name>want</name></name> <operator>==</operator> <name><name>mp3</name><operator>-&gt;</operator><name>seen</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>mp3</name><operator>-&gt;</operator><name>bag</name><index>[<expr><name><name>mp3</name><operator>-&gt;</operator><name>pos</name></name></expr>]</index></name> <operator>=</operator> <name><name>mp3</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>XING_NUM_BAGS</name> <operator>==</operator> <operator>++</operator><name><name>mp3</name><operator>-&gt;</operator><name>pos</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>XING_NUM_BAGS</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>mp3</name><operator>-&gt;</operator><name>bag</name><index>[<expr><name>i</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>mp3</name><operator>-&gt;</operator><name>bag</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>mp3</name><operator>-&gt;</operator><name>want</name></name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mp3</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <name>XING_NUM_BAGS</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>mp3</name><operator>-&gt;</operator><name>seen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mp3_write_audio_packet</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MP3Context</name> <modifier>*</modifier></type><name>mp3</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name> <operator>&amp;&amp;</operator> <name><name>pkt</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>MPADecodeHeader</name></type> <name>mpah</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <name>av_unused</name></type> <name>base</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>h</name></decl>;</decl_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>AV_RB32</name><argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avpriv_mpegaudio_decode_header</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mpah</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>mp3</name><operator>-&gt;</operator><name>initial_bitrate</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>mp3</name><operator>-&gt;</operator><name>initial_bitrate</name></name> <operator>=</operator> <name><name>mpah</name><operator>.</operator><name>bit_rate</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>mpah</name><operator>.</operator><name>bit_rate</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>mp3</name><operator>-&gt;</operator><name>initial_bitrate</name></name> <operator>!=</operator> <name><name>mpah</name><operator>.</operator><name>bit_rate</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>mp3</name><operator>-&gt;</operator><name>has_variable_bitrate</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Audio packet of size %d (starting with %08"</literal><name>PRIX32</name><literal type="string">"...) "</literal>

<literal type="string">"is invalid, writing it anyway.\n"</literal></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FILTER_VBR_HEADERS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>base</name> <operator>=</operator> <literal type="number">4</literal> <operator>+</operator> <name><name>xing_offtbl</name><index>[<expr><name><name>mpah</name><operator>.</operator><name>lsf</name></name> <operator>==</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name><name>mpah</name><operator>.</operator><name>nb_channels</name></name> <operator>==</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>base</name> <operator>+</operator> <literal type="number">4</literal> <operator>&lt;=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>v</name> <init>= <expr><call><name>AV_RB32</name><argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>base</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>MKBETAG</name><argument_list>(<argument><expr><literal type="char">'X'</literal></expr></argument>,<argument><expr><literal type="char">'i'</literal></expr></argument>,<argument><expr><literal type="char">'n'</literal></expr></argument>,<argument><expr><literal type="char">'g'</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>v</name> <operator>||</operator> <call><name>MKBETAG</name><argument_list>(<argument><expr><literal type="char">'I'</literal></expr></argument>,<argument><expr><literal type="char">'n'</literal></expr></argument>,<argument><expr><literal type="char">'f'</literal></expr></argument>,<argument><expr><literal type="char">'o'</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>v</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>base</name> <operator>=</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">32</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>base</name> <operator>+</operator> <literal type="number">4</literal> <operator>&lt;=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>size</name></name> <operator>&amp;&amp;</operator> <call><name>MKBETAG</name><argument_list>(<argument><expr><literal type="char">'V'</literal></expr></argument>,<argument><expr><literal type="char">'B'</literal></expr></argument>,<argument><expr><literal type="char">'R'</literal></expr></argument>,<argument><expr><literal type="char">'I'</literal></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>AV_RB32</name><argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>base</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>mp3</name><operator>-&gt;</operator><name>xing_offset</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>side_data</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>side_data_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mp3_xing_add_frame</name><argument_list>(<argument><expr><name>mp3</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mp3</name><operator>-&gt;</operator><name>audio_size</name></name> <operator>+=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mp3</name><operator>-&gt;</operator><name>audio_crc</name></name> <operator>=</operator> <call><name>av_crc</name><argument_list>(<argument><expr><call><name>av_crc_get_table</name><argument_list>(<argument><expr><name>AV_CRC_16_ANSI_LE</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>mp3</name><operator>-&gt;</operator><name>audio_crc</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>side_data</name> <operator>=</operator> <call><name>av_packet_get_side_data</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>,

<argument><expr><name>AV_PKT_DATA_SKIP_SAMPLES</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>side_data_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>side_data</name> <operator>&amp;&amp;</operator> <name>side_data_size</name> <operator>&gt;=</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>mp3</name><operator>-&gt;</operator><name>padding</name></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><call><name>AV_RL32</name><argument_list>(<argument><expr><name>side_data</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">528</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>mp3</name><operator>-&gt;</operator><name>delay</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>mp3</name><operator>-&gt;</operator><name>delay</name></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><call><name>AV_RL32</name><argument_list>(<argument><expr><name>side_data</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">528</literal> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>mp3</name><operator>-&gt;</operator><name>padding</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>ff_raw_write_packet</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mp3_queue_flush</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MP3Context</name> <modifier>*</modifier></type><name>mp3</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVPacket</name></type> <name>pkt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>write</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_id3v2_finish</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mp3</name><operator>-&gt;</operator><name>id3</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>metadata_header_padding</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mp3_write_xing</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>mp3</name><operator>-&gt;</operator><name>queue</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ff_packet_list_get</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mp3</name><operator>-&gt;</operator><name>queue</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mp3</name><operator>-&gt;</operator><name>queue_end</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>write</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>ret</name> <operator>=</operator> <call><name>mp3_write_audio_packet</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>write</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mp3_update_xing</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MP3Context</name> <modifier>*</modifier></type><name>mp3</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVReplayGain</name> <modifier>*</modifier></type><name>rg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>tag_crc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>toc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>rg_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>old_pos</name> <init>= <expr><call><name>avio_tell</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>mp3</name><operator>-&gt;</operator><name>has_variable_bitrate</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>AV_WL32</name><argument_list>(<argument><expr><name><name>mp3</name><operator>-&gt;</operator><name>xing_frame</name></name> <operator>+</operator> <name><name>mp3</name><operator>-&gt;</operator><name>xing_offset</name></name></expr></argument>, <argument><expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'I'</literal></expr></argument>, <argument><expr><literal type="char">'n'</literal></expr></argument>, <argument><expr><literal type="char">'f'</literal></expr></argument>, <argument><expr><literal type="char">'o'</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>AV_WB32</name><argument_list>(<argument><expr><name><name>mp3</name><operator>-&gt;</operator><name>xing_frame</name></name> <operator>+</operator> <name><name>mp3</name><operator>-&gt;</operator><name>xing_offset</name></name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name><name>mp3</name><operator>-&gt;</operator><name>frames</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WB32</name><argument_list>(<argument><expr><name><name>mp3</name><operator>-&gt;</operator><name>xing_frame</name></name> <operator>+</operator> <name><name>mp3</name><operator>-&gt;</operator><name>xing_offset</name></name> <operator>+</operator> <literal type="number">12</literal></expr></argument>, <argument><expr><name><name>mp3</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>toc</name> <operator>=</operator> <name><name>mp3</name><operator>-&gt;</operator><name>xing_frame</name></name> <operator>+</operator> <name><name>mp3</name><operator>-&gt;</operator><name>xing_offset</name></name> <operator>+</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>toc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>XING_TOC_SIZE</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>i</name> <operator>*</operator> <name><name>mp3</name><operator>-&gt;</operator><name>pos</name></name> <operator>/</operator> <name>XING_TOC_SIZE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>seek_point</name> <init>= <expr><literal type="number">256LL</literal> <operator>*</operator> <name><name>mp3</name><operator>-&gt;</operator><name>bag</name><index>[<expr><name>j</name></expr>]</index></name> <operator>/</operator> <name><name>mp3</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>toc</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>seek_point</name></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>rg</name> <operator>=</operator> <operator>(</operator><name>AVReplayGain</name><operator>*</operator><operator>)</operator><call><name>av_stream_get_side_data</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>AV_PKT_DATA_REPLAYGAIN</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>rg_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rg</name> <operator>&amp;&amp;</operator> <name>rg_size</name> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>rg</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>val</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AV_WB32</name><argument_list>(<argument><expr><name><name>mp3</name><operator>-&gt;</operator><name>xing_frame</name></name> <operator>+</operator> <name><name>mp3</name><operator>-&gt;</operator><name>xing_offset</name></name> <operator>+</operator> <literal type="number">131</literal></expr></argument>,

<argument><expr><call><name>av_rescale</name><argument_list>(<argument><expr><name><name>rg</name><operator>-&gt;</operator><name>track_peak</name></name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">23</literal></expr></argument>, <argument><expr><literal type="number">100000</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rg</name><operator>-&gt;</operator><name>track_gain</name></name> <operator>!=</operator> <name>INT32_MIN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name><name>rg</name><operator>-&gt;</operator><name>track_gain</name></name> <operator>/</operator> <literal type="number">10000</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">9</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name> <operator>|=</operator> <operator>(</operator><name><name>rg</name><operator>-&gt;</operator><name>track_gain</name></name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">9</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WB16</name><argument_list>(<argument><expr><name><name>mp3</name><operator>-&gt;</operator><name>xing_frame</name></name> <operator>+</operator> <name><name>mp3</name><operator>-&gt;</operator><name>xing_offset</name></name> <operator>+</operator> <literal type="number">135</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rg</name><operator>-&gt;</operator><name>album_gain</name></name> <operator>!=</operator> <name>INT32_MIN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name><name>rg</name><operator>-&gt;</operator><name>album_gain</name></name> <operator>/</operator> <literal type="number">10000</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">9</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name> <operator>|=</operator> <operator>(</operator><name><name>rg</name><operator>-&gt;</operator><name>album_gain</name></name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">9</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WB16</name><argument_list>(<argument><expr><name><name>mp3</name><operator>-&gt;</operator><name>xing_frame</name></name> <operator>+</operator> <name><name>mp3</name><operator>-&gt;</operator><name>xing_offset</name></name> <operator>+</operator> <literal type="number">137</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mp3</name><operator>-&gt;</operator><name>delay</name></name> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">12</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>mp3</name><operator>-&gt;</operator><name>delay</name></name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Too many samples of initial padding.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mp3</name><operator>-&gt;</operator><name>padding</name></name> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">12</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>mp3</name><operator>-&gt;</operator><name>padding</name></name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Too many samples of trailing padding.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>AV_WB24</name><argument_list>(<argument><expr><name><name>mp3</name><operator>-&gt;</operator><name>xing_frame</name></name> <operator>+</operator> <name><name>mp3</name><operator>-&gt;</operator><name>xing_offset</name></name> <operator>+</operator> <literal type="number">141</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>mp3</name><operator>-&gt;</operator><name>delay</name></name> <operator>&lt;&lt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>+</operator> <name><name>mp3</name><operator>-&gt;</operator><name>padding</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WB32</name><argument_list>(<argument><expr><name><name>mp3</name><operator>-&gt;</operator><name>xing_frame</name></name> <operator>+</operator> <name><name>mp3</name><operator>-&gt;</operator><name>xing_offset</name></name> <operator>+</operator> <name>XING_SIZE</name> <operator>-</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name><name>mp3</name><operator>-&gt;</operator><name>audio_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WB16</name><argument_list>(<argument><expr><name><name>mp3</name><operator>-&gt;</operator><name>xing_frame</name></name> <operator>+</operator> <name><name>mp3</name><operator>-&gt;</operator><name>xing_offset</name></name> <operator>+</operator> <name>XING_SIZE</name> <operator>-</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name><name>mp3</name><operator>-&gt;</operator><name>audio_crc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tag_crc</name> <operator>=</operator> <call><name>av_crc</name><argument_list>(<argument><expr><call><name>av_crc_get_table</name><argument_list>(<argument><expr><name>AV_CRC_16_ANSI_LE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>mp3</name><operator>-&gt;</operator><name>xing_frame</name></name></expr></argument>, <argument><expr><literal type="number">190</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WB16</name><argument_list>(<argument><expr><name><name>mp3</name><operator>-&gt;</operator><name>xing_frame</name></name> <operator>+</operator> <name><name>mp3</name><operator>-&gt;</operator><name>xing_offset</name></name> <operator>+</operator> <name>XING_SIZE</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>tag_crc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name><name>mp3</name><operator>-&gt;</operator><name>xing_frame_offset</name></name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name><name>mp3</name><operator>-&gt;</operator><name>xing_frame</name></name></expr></argument>, <argument><expr><name><name>mp3</name><operator>-&gt;</operator><name>xing_frame_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>old_pos</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mp3_write_trailer</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>AVFormatContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>buf</name><index>[<expr><name>ID3v1_TAG_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MP3Context</name> <modifier>*</modifier></type><name>mp3</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mp3</name><operator>-&gt;</operator><name>pics_to_write</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"No packets were sent for some of the "</literal>

<literal type="string">"attached pictures.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mp3_queue_flush</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mp3</name><operator>-&gt;</operator><name>write_id3v1</name></name> <operator>&amp;&amp;</operator> <call><name>id3v1_create_tag</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>ID3v1_TAG_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mp3</name><operator>-&gt;</operator><name>xing_offset</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mp3_update_xing</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>query_codec</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVCodecID</name></name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>std_compliance</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>CodecMime</name> <modifier>*</modifier></type><name>cm</name><init>= <expr><name>ff_id3v2_mime_tags</name></expr></init></decl>;</decl_stmt>

<while>while<condition>(<expr><name><name>cm</name><operator>-&gt;</operator><name>id</name></name> <operator>!=</operator> <name>AV_CODEC_ID_NONE</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>id</name> <operator>==</operator> <name><name>cm</name><operator>-&gt;</operator><name>id</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'A'</literal></expr></argument>, <argument><expr><literal type="char">'P'</literal></expr></argument>, <argument><expr><literal type="char">'I'</literal></expr></argument>, <argument><expr><literal type="char">'C'</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>cm</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>options</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"id3v2_version"</literal></expr>, <expr><literal type="string">"Select ID3v2 version to write. Currently 3 and 4 are supported."</literal></expr>,

<expr><call><name>offsetof</name><argument_list>(<argument><expr><name>MP3Context</name></expr></argument>, <argument><expr><name>id3v2_version</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">4</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><name>AV_OPT_FLAG_ENCODING_PARAM</name></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"write_id3v1"</literal></expr>, <expr><literal type="string">"Enable ID3v1 writing. ID3v1 tags are written in UTF-8 which may not be supported by most software."</literal></expr>,

<expr><call><name>offsetof</name><argument_list>(<argument><expr><name>MP3Context</name></expr></argument>, <argument><expr><name>write_id3v1</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>AV_OPT_FLAG_ENCODING_PARAM</name></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"write_xing"</literal></expr>, <expr><literal type="string">"Write the Xing header containing file duration."</literal></expr>,

<expr><call><name>offsetof</name><argument_list>(<argument><expr><name>MP3Context</name></expr></argument>, <argument><expr><name>write_xing</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>AV_OPT_FLAG_ENCODING_PARAM</name></expr>}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>mp3_muxer_class</name> <init>= <expr><block>{

<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"MP3 muxer"</literal></expr>,

<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,

<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>options</name></expr>,

<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mp3_write_packet</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MP3Context</name> <modifier>*</modifier></type><name>mp3</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>stream_index</name></name> <operator>==</operator> <name><name>mp3</name><operator>-&gt;</operator><name>audio_stream_idx</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>mp3</name><operator>-&gt;</operator><name>pics_to_write</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>ff_packet_list_put</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mp3</name><operator>-&gt;</operator><name>queue</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mp3</name><operator>-&gt;</operator><name>queue_end</name></name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>FF_PACKETLIST_FLAG_REF_PACKET</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Not enough memory to buffer audio. Skipping picture streams\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mp3</name><operator>-&gt;</operator><name>pics_to_write</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mp3_queue_flush</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>mp3_write_audio_packet</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<return>return <expr><call><name>mp3_write_audio_packet</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name><name>pkt</name><operator>-&gt;</operator><name>stream_index</name></name></expr>]</index></name><operator>-&gt;</operator><name>nb_frames</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Got more than one picture in stream %d,"</literal>

<literal type="string">" ignoring.\n"</literal></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>stream_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>mp3</name><operator>-&gt;</operator><name>pics_to_write</name></name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name><name>pkt</name><operator>-&gt;</operator><name>stream_index</name></name></expr>]</index></name><operator>-&gt;</operator><name>nb_frames</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_id3v2_write_apic</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mp3</name><operator>-&gt;</operator><name>id3</name></name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>mp3</name><operator>-&gt;</operator><name>pics_to_write</name></name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>mp3</name><operator>-&gt;</operator><name>pics_to_write</name></name> <operator>&amp;&amp;</operator>

<operator>(</operator><name>ret</name> <operator>=</operator> <call><name>mp3_queue_flush</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mp3_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>AVFormatContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MP3Context</name> <modifier>*</modifier></type><name>mp3</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mp3</name><operator>-&gt;</operator><name>id3v2_version</name></name> <operator>&amp;&amp;</operator>

<name><name>mp3</name><operator>-&gt;</operator><name>id3v2_version</name></name> <operator>!=</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator>

<name><name>mp3</name><operator>-&gt;</operator><name>id3v2_version</name></name> <operator>!=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid ID3v2 version requested: %d. Only "</literal>

<literal type="string">"3, 4 or 0 (disabled) are allowed.\n"</literal></expr></argument>, <argument><expr><name><name>mp3</name><operator>-&gt;</operator><name>id3v2_version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>mp3</name><operator>-&gt;</operator><name>audio_stream_idx</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>mp3</name><operator>-&gt;</operator><name>audio_stream_idx</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>!=</operator> <name>AV_CODEC_ID_MP3</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid audio stream. Exactly one MP3 "</literal>

<literal type="string">"audio stream is required.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>mp3</name><operator>-&gt;</operator><name>audio_stream_idx</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>!=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Only audio streams and pictures are allowed in MP3.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>mp3</name><operator>-&gt;</operator><name>audio_stream_idx</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"No audio stream present.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>mp3</name><operator>-&gt;</operator><name>pics_to_write</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mp3</name><operator>-&gt;</operator><name>pics_to_write</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>mp3</name><operator>-&gt;</operator><name>id3v2_version</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Attached pictures were requested, but the "</literal>

<literal type="string">"ID3v2 header is disabled.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mp3_write_header</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>AVFormatContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MP3Context</name> <modifier>*</modifier></type><name>mp3</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mp3</name><operator>-&gt;</operator><name>id3v2_version</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ff_id3v2_start</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mp3</name><operator>-&gt;</operator><name>id3</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name><name>mp3</name><operator>-&gt;</operator><name>id3v2_version</name></name></expr></argument>, <argument><expr><name>ID3v2_DEFAULT_MAGIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_id3v2_write_metadata</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mp3</name><operator>-&gt;</operator><name>id3</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>mp3</name><operator>-&gt;</operator><name>pics_to_write</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>mp3</name><operator>-&gt;</operator><name>id3v2_version</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_id3v2_finish</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mp3</name><operator>-&gt;</operator><name>id3</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>metadata_header_padding</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>mp3_write_xing</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mp3_deinit</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>AVFormatContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MP3Context</name> <modifier>*</modifier></type><name>mp3</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_packet_list_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mp3</name><operator>-&gt;</operator><name>queue</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mp3</name><operator>-&gt;</operator><name>queue_end</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mp3</name><operator>-&gt;</operator><name>xing_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><name>AVOutputFormat</name></type> <name>ff_mp3_muxer</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"mp3"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"MP3 (MPEG audio layer 3)"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>mime_type</name> <operator>=</operator> <literal type="string">"audio/mpeg"</literal></expr>,

<expr><operator>.</operator><name>extensions</name> <operator>=</operator> <literal type="string">"mp3"</literal></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>MP3Context</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>audio_codec</name> <operator>=</operator> <name>AV_CODEC_ID_MP3</name></expr>,

<expr><operator>.</operator><name>video_codec</name> <operator>=</operator> <name>AV_CODEC_ID_PNG</name></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>mp3_init</name></expr>,

<expr><operator>.</operator><name>write_header</name> <operator>=</operator> <name>mp3_write_header</name></expr>,

<expr><operator>.</operator><name>write_packet</name> <operator>=</operator> <name>mp3_write_packet</name></expr>,

<expr><operator>.</operator><name>write_trailer</name> <operator>=</operator> <name>mp3_write_trailer</name></expr>,

<expr><operator>.</operator><name>deinit</name> <operator>=</operator> <name>mp3_deinit</name></expr>,

<expr><operator>.</operator><name>query_codec</name> <operator>=</operator> <name>query_codec</name></expr>,

<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>AVFMT_NOTIMESTAMPS</name></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>mp3_muxer_class</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
