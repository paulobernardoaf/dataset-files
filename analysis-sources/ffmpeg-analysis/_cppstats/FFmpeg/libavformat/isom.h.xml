<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavformat\isom.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/encryption_info.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mastering_display_metadata.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/spherical.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/stereo3d.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avio.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dv.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>AVCodecTag</name></type> <name><name>ff_mp4_obj_type</name><index>[]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>AVCodecTag</name></type> <name><name>ff_codec_movvideo_tags</name><index>[]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>AVCodecTag</name></type> <name><name>ff_codec_movaudio_tags</name><index>[]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>AVCodecTag</name></type> <name><name>ff_codec_movsubtitle_tags</name><index>[]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>AVCodecTag</name></type> <name><name>ff_codec_movdata_tags</name><index>[]</index></name></decl>;</decl_stmt>

<function_decl><type><name>int</name></type> <name>ff_mov_iso639_to_lang</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>lang</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mp4</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_mov_lang_to_iso639</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name><name>to</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>)</parameter_list>;</function_decl>

<struct_decl>struct <name>AVAESCTR</name>;</struct_decl>

<typedef>typedef <type><struct>struct <name>MOVStts</name> <block>{

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>duration</name></decl>;</decl_stmt>

}</block></struct></type> <name>MOVStts</name>;</typedef>

<typedef>typedef <type><struct>struct <name>MOVStsc</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>first</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>id</name></decl>;</decl_stmt>

}</block></struct></type> <name>MOVStsc</name>;</typedef>

<typedef>typedef <type><struct>struct <name>MOVElst</name> <block>{

<decl_stmt><decl><type><name>int64_t</name></type> <name>duration</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>time</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>rate</name></decl>;</decl_stmt>

}</block></struct></type> <name>MOVElst</name>;</typedef>

<typedef>typedef <type><struct>struct <name>MOVDref</name> <block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dir</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>volume</name><index>[<expr><literal type="number">28</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>filename</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name>nlvl_to</name></decl>, <name>nlvl_from</name>;</decl_stmt>

}</block></struct></type> <name>MOVDref</name>;</typedef>

<typedef>typedef <type><struct>struct <name>MOVAtom</name> <block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>size</name></decl>;</decl_stmt> 

}</block></struct></type> <name>MOVAtom</name>;</typedef>

<struct_decl>struct <name>MOVParseTableEntry</name>;</struct_decl>

<typedef>typedef <type><struct>struct <name>MOVFragment</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>found_tfhd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>track_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>base_data_offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>moof_offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>implicit_offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>stsd_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>duration</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>flags</name></decl>;</decl_stmt>

}</block></struct></type> <name>MOVFragment</name>;</typedef>

<typedef>typedef <type><struct>struct <name>MOVTrackExt</name> <block>{

<decl_stmt><decl><type><name>unsigned</name></type> <name>track_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>stsd_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>duration</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>flags</name></decl>;</decl_stmt>

}</block></struct></type> <name>MOVTrackExt</name>;</typedef>

<typedef>typedef <type><struct>struct <name>MOVSbgp</name> <block>{

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>index</name></decl>;</decl_stmt>

}</block></struct></type> <name>MOVSbgp</name>;</typedef>

<typedef>typedef <type><struct>struct <name>MOVEncryptionIndex</name> <block>{

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>nb_encrypted_samples</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVEncryptionInfo</name> <modifier>*</modifier><modifier>*</modifier></type><name>encrypted_samples</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>auxiliary_info_sizes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>auxiliary_info_sample_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>auxiliary_info_default_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name><modifier>*</modifier></type> <name>auxiliary_offsets</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>size_t</name></type> <name>auxiliary_offsets_count</name></decl>;</decl_stmt>

}</block></struct></type> <name>MOVEncryptionIndex</name>;</typedef>

<typedef>typedef <type><struct>struct <name>MOVFragmentStreamInfo</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>sidx_pts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>first_tfra_pts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>tfdt_dts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>index_entry</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MOVEncryptionIndex</name> <modifier>*</modifier></type><name>encryption_index</name></decl>;</decl_stmt>

}</block></struct></type> <name>MOVFragmentStreamInfo</name>;</typedef>

<typedef>typedef <type><struct>struct <name>MOVFragmentIndexItem</name> <block>{

<decl_stmt><decl><type><name>int64_t</name></type> <name>moof_offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>headers_read</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>current</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nb_stream_info</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MOVFragmentStreamInfo</name> <modifier>*</modifier></type> <name>stream_info</name></decl>;</decl_stmt>

}</block></struct></type> <name>MOVFragmentIndexItem</name>;</typedef>

<typedef>typedef <type><struct>struct <name>MOVFragmentIndex</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>allocated_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>complete</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>current</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nb_items</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MOVFragmentIndexItem</name> <modifier>*</modifier></type> <name>item</name></decl>;</decl_stmt>

}</block></struct></type> <name>MOVFragmentIndex</name>;</typedef>

<typedef>typedef <type><struct>struct <name>MOVIndexRange</name> <block>{

<decl_stmt><decl><type><name>int64_t</name></type> <name>start</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>end</name></decl>;</decl_stmt>

}</block></struct></type> <name>MOVIndexRange</name>;</typedef>

<typedef>typedef <type><struct>struct <name>MOVStreamContext</name> <block>{

<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pb_is_copied</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ffindex</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>next_chunk</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>chunk_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>chunk_offsets</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>stts_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MOVStts</name> <modifier>*</modifier></type><name>stts_data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>sdtp_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>sdtp_data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>ctts_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>ctts_allocated_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MOVStts</name> <modifier>*</modifier></type><name>ctts_data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>stsc_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MOVStsc</name> <modifier>*</modifier></type><name>stsc_data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>stsc_index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>stsc_sample</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>stps_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>stps_data</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>MOVElst</name> <modifier>*</modifier></type><name>elst_data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>elst_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ctts_index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ctts_sample</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>sample_size</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>stsz_sample_size</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>sample_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>sample_sizes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>keyframe_absent</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>keyframe_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>keyframes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>time_scale</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>time_offset</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int64_t</name></type> <name>min_corrected_pts</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>current_sample</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>current_index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MOVIndexRange</name><modifier>*</modifier></type> <name>index_ranges</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MOVIndexRange</name><modifier>*</modifier></type> <name>current_index_range</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>bytes_per_frame</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>samples_per_frame</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dv_audio_container</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pseudo_stream_id</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int16_t</name></type> <name>audio_cid</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name></type> <name>drefs_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MOVDref</name> <modifier>*</modifier></type><name>drefs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dref_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>timecode_track</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>height</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>dts_shift</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>palette</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>has_palette</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>data_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>tmcd_flags</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int64_t</name></type> <name>track_end</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>start_pad</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>rap_group_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MOVSbgp</name> <modifier>*</modifier></type><name>rap_group</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nb_frames_for_fps</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>duration_for_fps</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>extradata</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>extradata_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>last_stsd_index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>stsd_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>stsd_version</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>display_matrix</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVStereo3D</name> <modifier>*</modifier></type><name>stereo3d</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVSphericalMapping</name> <modifier>*</modifier></type><name>spherical</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>spherical_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVMasteringDisplayMetadata</name> <modifier>*</modifier></type><name>mastering</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVContentLightMetadata</name> <modifier>*</modifier></type><name>coll</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>coll_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>format</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>has_sidx</name></decl>;</decl_stmt> 

<struct>struct <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>AVAESCTR</name></name><modifier>*</modifier></type> <name>aes_ctr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>per_sample_iv_size</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>AVEncryptionInfo</name> <modifier>*</modifier></type><name>default_encrypted_sample</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MOVEncryptionIndex</name> <modifier>*</modifier></type><name>encryption_index</name></decl>;</decl_stmt>

}</block> <decl><name>cenc</name></decl>;</struct>

}</block></struct></type> <name>MOVStreamContext</name>;</typedef>

<typedef>typedef <type><struct>struct <name>MOVContext</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>fc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>time_scale</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>duration</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>found_moov</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>found_mdat</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>found_hdlr_mdta</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>trak_index</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>meta_keys</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>meta_keys_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DVDemuxContext</name> <modifier>*</modifier></type><name>dv_demux</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>dv_fctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>isom</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>MOVFragment</name></type> <name>fragment</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>MOVTrackExt</name> <modifier>*</modifier></type><name>trex_data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>trex_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>itunes_metadata</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>handbrake_version</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>chapter_tracks</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>nb_chapter_tracks</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>use_absolute_path</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ignore_editlist</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>advanced_editlist</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ignore_chapters</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>seek_individually</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>next_root_atom</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>export_all</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>export_xmp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>bitrates</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>bitrates_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>moov_retry</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>use_mfra_for</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>has_looked_for_mfra</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MOVFragmentIndex</name></type> <name>frag_index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>atom_depth</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>aax_mode</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>file_key</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>file_iv</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>activation_bytes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>activation_bytes_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>audible_fixed_key</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>audible_fixed_key_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>AVAES</name></name> <modifier>*</modifier></type><name>aes_decrypt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>decryption_key</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>decryption_key_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>enable_drefs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name><name>movie_display_matrix</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt> 

}</block></struct></type> <name>MOVContext</name>;</typedef>

<function_decl><type><name>int</name></type> <name>ff_mp4_read_descr_len</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_mp4_read_descr</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>fc</name></decl></parameter>, <parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>tag</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_mp4_read_dec_config_descr</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>fc</name></decl></parameter>, <parameter><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name></decl></parameter>, <parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_mp4_parse_es_descr</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>es_id</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP4ODescrTag</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP4IODescrTag</name></cpp:macro> <cpp:value>0x02</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP4ESDescrTag</name></cpp:macro> <cpp:value>0x03</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP4DecConfigDescrTag</name></cpp:macro> <cpp:value>0x04</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP4DecSpecificDescrTag</name></cpp:macro> <cpp:value>0x05</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP4SLDescrTag</name></cpp:macro> <cpp:value>0x06</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOV_TFHD_BASE_DATA_OFFSET</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOV_TFHD_STSD_ID</name></cpp:macro> <cpp:value>0x02</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOV_TFHD_DEFAULT_DURATION</name></cpp:macro> <cpp:value>0x08</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOV_TFHD_DEFAULT_SIZE</name></cpp:macro> <cpp:value>0x10</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOV_TFHD_DEFAULT_FLAGS</name></cpp:macro> <cpp:value>0x20</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOV_TFHD_DURATION_IS_EMPTY</name></cpp:macro> <cpp:value>0x010000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOV_TFHD_DEFAULT_BASE_IS_MOOF</name></cpp:macro> <cpp:value>0x020000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOV_TRUN_DATA_OFFSET</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOV_TRUN_FIRST_SAMPLE_FLAGS</name></cpp:macro> <cpp:value>0x04</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOV_TRUN_SAMPLE_DURATION</name></cpp:macro> <cpp:value>0x100</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOV_TRUN_SAMPLE_SIZE</name></cpp:macro> <cpp:value>0x200</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOV_TRUN_SAMPLE_FLAGS</name></cpp:macro> <cpp:value>0x400</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOV_TRUN_SAMPLE_CTS</name></cpp:macro> <cpp:value>0x800</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOV_FRAG_SAMPLE_FLAG_DEGRADATION_PRIORITY_MASK</name></cpp:macro> <cpp:value>0x0000ffff</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOV_FRAG_SAMPLE_FLAG_IS_NON_SYNC</name></cpp:macro> <cpp:value>0x00010000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOV_FRAG_SAMPLE_FLAG_PADDING_MASK</name></cpp:macro> <cpp:value>0x000e0000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOV_FRAG_SAMPLE_FLAG_REDUNDANCY_MASK</name></cpp:macro> <cpp:value>0x00300000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOV_FRAG_SAMPLE_FLAG_DEPENDED_MASK</name></cpp:macro> <cpp:value>0x00c00000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOV_FRAG_SAMPLE_FLAG_DEPENDS_MASK</name></cpp:macro> <cpp:value>0x03000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOV_FRAG_SAMPLE_FLAG_DEPENDS_NO</name></cpp:macro> <cpp:value>0x02000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOV_FRAG_SAMPLE_FLAG_DEPENDS_YES</name></cpp:macro> <cpp:value>0x01000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOV_TKHD_FLAG_ENABLED</name></cpp:macro> <cpp:value>0x0001</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOV_TKHD_FLAG_IN_MOVIE</name></cpp:macro> <cpp:value>0x0002</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOV_TKHD_FLAG_IN_PREVIEW</name></cpp:macro> <cpp:value>0x0004</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOV_TKHD_FLAG_IN_POSTER</name></cpp:macro> <cpp:value>0x0008</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOV_SAMPLE_DEPENDENCY_UNKNOWN</name></cpp:macro> <cpp:value>0x0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOV_SAMPLE_DEPENDENCY_YES</name></cpp:macro> <cpp:value>0x1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOV_SAMPLE_DEPENDENCY_NO</name></cpp:macro> <cpp:value>0x2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TAG_IS_AVCI</name><parameter_list>(<parameter><type><name>tag</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((tag) == MKTAG('a', 'i', '5', 'p') || (tag) == MKTAG('a', 'i', '5', 'q') || (tag) == MKTAG('a', 'i', '5', '2') || (tag) == MKTAG('a', 'i', '5', '3') || (tag) == MKTAG('a', 'i', '5', '5') || (tag) == MKTAG('a', 'i', '5', '6') || (tag) == MKTAG('a', 'i', '1', 'p') || (tag) == MKTAG('a', 'i', '1', 'q') || (tag) == MKTAG('a', 'i', '1', '2') || (tag) == MKTAG('a', 'i', '1', '3') || (tag) == MKTAG('a', 'i', '1', '5') || (tag) == MKTAG('a', 'i', '1', '6') || (tag) == MKTAG('a', 'i', 'v', 'x') || (tag) == MKTAG('A', 'V', 'i', 'n'))</cpp:value></cpp:define>

<function_decl><type><name>int</name></type> <name>ff_mov_read_esds</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>fc</name></decl></parameter>, <parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_mov_read_stsd_entries</name><parameter_list>(<parameter><decl><type><name>MOVContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>entries</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_mov_write_chan</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>channel_layout</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_MOV_FLAG_MFRA_AUTO</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_MOV_FLAG_MFRA_DTS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_MOV_FLAG_MFRA_PTS</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>enum</name> <name>AVCodecID</name></name></type> <name>ff_mov_get_lpcm_codec_id</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>bps</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>ff_get_pcm_codec_id</name><argument_list>(<argument><expr><name>bps</name></expr></argument>, <argument><expr><name>flags</name> <operator>&amp;</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>flags</name> <operator>&amp;</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>flags</name> <operator>&amp;</operator> <literal type="number">4</literal></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

</unit>
