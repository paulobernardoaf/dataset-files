<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavformat\format.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avstring.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/bprint.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/thread.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avio_internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avformat.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"id3v2.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>av_match_ext</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>extensions</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ext</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>filename</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ext</name> <operator>=</operator> <call><name>strrchr</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ext</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>av_match_name</name><argument_list>(<argument><expr><name>ext</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>extensions</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>ff_const59</name> <name>AVOutputFormat</name> <modifier>*</modifier></type><name>av_guess_format</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>short_name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mime_type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVOutputFormat</name> <modifier>*</modifier></type><name>fmt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVOutputFormat</name> <modifier>*</modifier></type><name>fmt_found</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>score_max</name></decl>, <decl><type ref="prev"/><name>score</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_IMAGE2_MUXER</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>short_name</name> <operator>&amp;&amp;</operator> <name>filename</name> <operator>&amp;&amp;</operator>

<call><name>av_filename_number_test</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<call><name>ff_guess_image2_codec</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>AV_CODEC_ID_NONE</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>av_guess_format</name><argument_list>(<argument><expr><literal type="string">"image2"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>score_max</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>fmt</name> <operator>=</operator> <call><name>av_muxer_iterate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>i</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>score</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fmt</name><operator>-&gt;</operator><name>name</name></name> <operator>&amp;&amp;</operator> <name>short_name</name> <operator>&amp;&amp;</operator> <call><name>av_match_name</name><argument_list>(<argument><expr><name>short_name</name></expr></argument>, <argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>score</name> <operator>+=</operator> <literal type="number">100</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fmt</name><operator>-&gt;</operator><name>mime_type</name></name> <operator>&amp;&amp;</operator> <name>mime_type</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>mime_type</name></name></expr></argument>, <argument><expr><name>mime_type</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>score</name> <operator>+=</operator> <literal type="number">10</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>filename</name> <operator>&amp;&amp;</operator> <name><name>fmt</name><operator>-&gt;</operator><name>extensions</name></name> <operator>&amp;&amp;</operator>

<call><name>av_match_ext</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>extensions</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>score</name> <operator>+=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>score</name> <operator>&gt;</operator> <name>score_max</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>score_max</name> <operator>=</operator> <name>score</name></expr>;</expr_stmt>

<expr_stmt><expr><name>fmt_found</name> <operator>=</operator> <operator>(</operator><name>AVOutputFormat</name><operator>*</operator><operator>)</operator><name>fmt</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<return>return <expr><name>fmt_found</name></expr>;</return>

</block_content>}</block></function>

<function><type><name><name>enum</name> <name>AVCodecID</name></name></type> <name>av_guess_codec</name><parameter_list>(<parameter><decl><type><name>ff_const59</name> <name>AVOutputFormat</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>short_name</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mime_type</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>AVMediaType</name></name></type> <name>type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>av_match_name</name><argument_list>(<argument><expr><literal type="string">"segment"</literal></expr></argument>, <argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>av_match_name</name><argument_list>(<argument><expr><literal type="string">"ssegment"</literal></expr></argument>, <argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ff_const59</name> <name>AVOutputFormat</name> <modifier>*</modifier></type><name>fmt2</name> <init>= <expr><call><name>av_guess_format</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>fmt2</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>fmt</name> <operator>=</operator> <name>fmt2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>enum</name> <name>AVCodecID</name></name></type> <name>codec_id</name> <init>= <expr><name>AV_CODEC_ID_NONE</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_IMAGE2_MUXER</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"image2"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"image2pipe"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>codec_id</name> <operator>=</operator> <call><name>ff_guess_image2_codec</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>codec_id</name> <operator>==</operator> <name>AV_CODEC_ID_NONE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>codec_id</name> <operator>=</operator> <name><name>fmt</name><operator>-&gt;</operator><name>video_codec</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>codec_id</name></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>fmt</name><operator>-&gt;</operator><name>audio_codec</name></name></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>AVMEDIA_TYPE_SUBTITLE</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>fmt</name><operator>-&gt;</operator><name>subtitle_codec</name></name></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>AVMEDIA_TYPE_DATA</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>fmt</name><operator>-&gt;</operator><name>data_codec</name></name></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name>AV_CODEC_ID_NONE</name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>ff_const59</name> <name>AVInputFormat</name> <modifier>*</modifier></type><name>av_find_input_format</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>short_name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVInputFormat</name> <modifier>*</modifier></type><name>fmt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>fmt</name> <operator>=</operator> <call><name>av_demuxer_iterate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>i</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>av_match_name</name><argument_list>(<argument><expr><name>short_name</name></expr></argument>, <argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>AVInputFormat</name><operator>*</operator><operator>)</operator><name>fmt</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></while>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>ff_const59</name> <name>AVInputFormat</name> <modifier>*</modifier></type><name>av_probe_input_format3</name><parameter_list>(<parameter><decl><type><name>ff_const59</name> <name>AVProbeData</name> <modifier>*</modifier></type><name>pd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is_opened</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>score_ret</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVProbeData</name></type> <name>lpd</name> <init>= <expr><operator>*</operator><name>pd</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVInputFormat</name> <modifier>*</modifier></type><name>fmt1</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ff_const59</name> <name>AVInputFormat</name> <modifier>*</modifier></type><name>fmt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>score</name></decl>, <decl><type ref="prev"/><name>score_max</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <specifier>static</specifier> <name>uint8_t</name></type> <name><name>zerobuffer</name><index>[<expr><name>AVPROBE_PADDING_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<enum>enum <name>nodat</name> <block>{

<decl><name>NO_ID3</name></decl>,

<decl><name>ID3_ALMOST_GREATER_PROBE</name></decl>,

<decl><name>ID3_GREATER_PROBE</name></decl>,

<decl><name>ID3_GREATER_MAX_PROBE</name></decl>,

}</block> <decl><name>nodat</name> <init>= <expr><name>NO_ID3</name></expr></init></decl>;</enum>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>lpd</name><operator>.</operator><name>buf</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>lpd</name><operator>.</operator><name>buf</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>zerobuffer</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>lpd</name><operator>.</operator><name>buf_size</name></name> <operator>&gt;</operator> <literal type="number">10</literal> <operator>&amp;&amp;</operator> <call><name>ff_id3v2_match</name><argument_list>(<argument><expr><name><name>lpd</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name>ID3v2_DEFAULT_MAGIC</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>id3len</name> <init>= <expr><call><name>ff_id3v2_tag_len</name><argument_list>(<argument><expr><name><name>lpd</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>lpd</name><operator>.</operator><name>buf_size</name></name> <operator>&gt;</operator> <name>id3len</name> <operator>+</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>lpd</name><operator>.</operator><name>buf_size</name></name> <operator>&lt;</operator> <literal type="number">2LL</literal><operator>*</operator><name>id3len</name> <operator>+</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>nodat</name> <operator>=</operator> <name>ID3_ALMOST_GREATER_PROBE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>lpd</name><operator>.</operator><name>buf</name></name> <operator>+=</operator> <name>id3len</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lpd</name><operator>.</operator><name>buf_size</name></name> <operator>-=</operator> <name>id3len</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>id3len</name> <operator>&gt;=</operator> <name>PROBE_BUF_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>nodat</name> <operator>=</operator> <name>ID3_GREATER_MAX_PROBE</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>nodat</name> <operator>=</operator> <name>ID3_GREATER_PROBE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><operator>(</operator><name>fmt1</name> <operator>=</operator> <call><name>av_demuxer_iterate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>i</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_opened</name> <operator>==</operator> <operator>!</operator><operator>(</operator><name><name>fmt1</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AVFMT_NOFILE</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>fmt1</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"image2"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>score</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fmt1</name><operator>-&gt;</operator><name>read_probe</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>score</name> <operator>=</operator> <call><name><name>fmt1</name><operator>-&gt;</operator><name>read_probe</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>lpd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>score</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"Probing %s score:%d size:%d\n"</literal></expr></argument>, <argument><expr><name><name>fmt1</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>score</name></expr></argument>, <argument><expr><name><name>lpd</name><operator>.</operator><name>buf_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fmt1</name><operator>-&gt;</operator><name>extensions</name></name> <operator>&amp;&amp;</operator> <call><name>av_match_ext</name><argument_list>(<argument><expr><name><name>lpd</name><operator>.</operator><name>filename</name></name></expr></argument>, <argument><expr><name><name>fmt1</name><operator>-&gt;</operator><name>extensions</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<switch>switch <condition>(<expr><name>nodat</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>NO_ID3</name></expr>:</case>

<expr_stmt><expr><name>score</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>score</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ID3_GREATER_PROBE</name></expr>:</case>

<case>case <expr><name>ID3_ALMOST_GREATER_PROBE</name></expr>:</case>

<expr_stmt><expr><name>score</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>score</name></expr></argument>, <argument><expr><name>AVPROBE_SCORE_EXTENSION</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ID3_GREATER_MAX_PROBE</name></expr>:</case>

<expr_stmt><expr><name>score</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>score</name></expr></argument>, <argument><expr><name>AVPROBE_SCORE_EXTENSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>fmt1</name><operator>-&gt;</operator><name>extensions</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>av_match_ext</name><argument_list>(<argument><expr><name><name>lpd</name><operator>.</operator><name>filename</name></name></expr></argument>, <argument><expr><name><name>fmt1</name><operator>-&gt;</operator><name>extensions</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>score</name> <operator>=</operator> <name>AVPROBE_SCORE_EXTENSION</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_match_name</name><argument_list>(<argument><expr><name><name>lpd</name><operator>.</operator><name>mime_type</name></name></expr></argument>, <argument><expr><name><name>fmt1</name><operator>-&gt;</operator><name>mime_type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>AVPROBE_SCORE_MIME</name> <operator>&gt;</operator> <name>score</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Probing %s score:%d increased to %d due to MIME type\n"</literal></expr></argument>, <argument><expr><name><name>fmt1</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>score</name></expr></argument>, <argument><expr><name>AVPROBE_SCORE_MIME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>score</name> <operator>=</operator> <name>AVPROBE_SCORE_MIME</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>score</name> <operator>&gt;</operator> <name>score_max</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>score_max</name> <operator>=</operator> <name>score</name></expr>;</expr_stmt>

<expr_stmt><expr><name>fmt</name> <operator>=</operator> <operator>(</operator><name>AVInputFormat</name><operator>*</operator><operator>)</operator><name>fmt1</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>score</name> <operator>==</operator> <name>score_max</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>fmt</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>nodat</name> <operator>==</operator> <name>ID3_GREATER_PROBE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>score_max</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>AVPROBE_SCORE_EXTENSION</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>score_max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>score_ret</name> <operator>=</operator> <name>score_max</name></expr>;</expr_stmt>

<return>return <expr><name>fmt</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>ff_const59</name> <name>AVInputFormat</name> <modifier>*</modifier></type><name>av_probe_input_format2</name><parameter_list>(<parameter><decl><type><name>ff_const59</name> <name>AVProbeData</name> <modifier>*</modifier></type><name>pd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is_opened</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>score_max</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>score_ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ff_const59</name> <name>AVInputFormat</name> <modifier>*</modifier></type><name>fmt</name> <init>= <expr><call><name>av_probe_input_format3</name><argument_list>(<argument><expr><name>pd</name></expr></argument>, <argument><expr><name>is_opened</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>score_ret</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>score_ret</name> <operator>&gt;</operator> <operator>*</operator><name>score_max</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>score_max</name> <operator>=</operator> <name>score_ret</name></expr>;</expr_stmt>

<return>return <expr><name>fmt</name></expr>;</return>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>ff_const59</name> <name>AVInputFormat</name> <modifier>*</modifier></type><name>av_probe_input_format</name><parameter_list>(<parameter><decl><type><name>ff_const59</name> <name>AVProbeData</name> <modifier>*</modifier></type><name>pd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is_opened</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>score</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>av_probe_input_format2</name><argument_list>(<argument><expr><name>pd</name></expr></argument>, <argument><expr><name>is_opened</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>score</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>av_probe_input_buffer2</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>ff_const59</name> <name>AVInputFormat</name> <modifier>*</modifier><modifier>*</modifier></type><name>fmt</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>logctx</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>max_probe_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVProbeData</name></type> <name>pd</name> <init>= <expr><block>{ <expr><name>filename</name> <operator>?</operator> <name>filename</name> <operator>:</operator> <literal type="string">""</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>probe_size</name></decl>, <decl><type ref="prev"/><name>buf_offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>score</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret2</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>max_probe_size</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>max_probe_size</name> <operator>=</operator> <name>PROBE_BUF_MAX</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>max_probe_size</name> <operator>&lt;</operator> <name>PROBE_BUF_MIN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>logctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Specified probe size value %u cannot be &lt; %u\n"</literal></expr></argument>, <argument><expr><name>max_probe_size</name></expr></argument>, <argument><expr><name>PROBE_BUF_MIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&gt;=</operator> <name>max_probe_size</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pb</name><operator>-&gt;</operator><name>av_class</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>mime_type_opt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>semi</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_opt_get</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"mime_type"</literal></expr></argument>, <argument><expr><name>AV_OPT_SEARCH_CHILDREN</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mime_type_opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pd</name><operator>.</operator><name>mime_type</name></name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>mime_type_opt</name></expr>;</expr_stmt>

<expr_stmt><expr><name>semi</name> <operator>=</operator> <ternary><condition><expr><name><name>pd</name><operator>.</operator><name>mime_type</name></name></expr> ?</condition><then> <expr><call><name>strchr</name><argument_list>(<argument><expr><name><name>pd</name><operator>.</operator><name>mime_type</name></name></expr></argument>, <argument><expr><literal type="char">';'</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>semi</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>semi</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>probe_size</name> <operator>=</operator> <name>PROBE_BUF_MIN</name></expr>;</init> <condition><expr><name>probe_size</name> <operator>&lt;=</operator> <name>max_probe_size</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>*</operator><name>fmt</name></expr>;</condition>

<incr><expr><name>probe_size</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>probe_size</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><call><name>FFMAX</name><argument_list>(<argument><expr><name>max_probe_size</name></expr></argument>, <argument><expr><name>probe_size</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>score</name> <operator>=</operator> <ternary><condition><expr><name>probe_size</name> <operator>&lt;</operator> <name>max_probe_size</name></expr> ?</condition><then> <expr><name>AVPROBE_SCORE_RETRY</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_reallocp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>probe_size</name> <operator>+</operator> <name>AVPROBE_PADDING_SIZE</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>avio_read</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>buf_offset</name></expr></argument>,

<argument><expr><name>probe_size</name> <operator>-</operator> <name>buf_offset</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>AVERROR_EOF</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>score</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>buf_offset</name> <operator>+=</operator> <name>ret</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>buf_offset</name> <operator>&lt;</operator> <name>offset</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pd</name><operator>.</operator><name>buf_size</name></name> <operator>=</operator> <name>buf_offset</name> <operator>-</operator> <name>offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pd</name><operator>.</operator><name>buf</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>buf</name><index>[<expr><name>offset</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>pd</name><operator>.</operator><name>buf</name></name> <operator>+</operator> <name><name>pd</name><operator>.</operator><name>buf_size</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>AVPROBE_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>fmt</name> <operator>=</operator> <call><name>av_probe_input_format2</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pd</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>score</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>fmt</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>score</name> <operator>&lt;=</operator> <name>AVPROBE_SCORE_RETRY</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>logctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,

<argument><expr><literal type="string">"Format %s detected only with low score of %d, "</literal>

<literal type="string">"misdetection possible!\n"</literal></expr></argument>, <argument><expr><name><operator>(</operator><operator>*</operator><name>fmt</name><operator>)</operator><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>score</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>logctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>,

<argument><expr><literal type="string">"Format %s probed with size=%d and score=%d\n"</literal></expr></argument>,

<argument><expr><name><operator>(</operator><operator>*</operator><name>fmt</name><operator>)</operator><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>probe_size</name></expr></argument>, <argument><expr><name>score</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

FILE *f = fopen("probestat.tmp", "ab");

fprintf(f, "probe_size:%d format:%s score:%d filename:%s\n", probe_size, (*fmt)-&gt;name, score, filename);

fclose(f);

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>fmt</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<label><name>fail</name>:</label>

<expr_stmt><expr><name>ret2</name> <operator>=</operator> <call><name>ffio_rewind_with_probe_data</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>buf_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ret2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pd</name><operator>.</operator><name>mime_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>ret</name></expr> </then><else>: <expr><name>score</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>av_probe_input_buffer</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>ff_const59</name> <name>AVInputFormat</name> <modifier>*</modifier><modifier>*</modifier></type><name>fmt</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>logctx</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>max_probe_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>av_probe_input_buffer2</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>logctx</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>max_probe_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>ret</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

</unit>
