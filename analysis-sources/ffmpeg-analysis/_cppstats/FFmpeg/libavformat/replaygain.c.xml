<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavformat\replaygain.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avstring.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/dict.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mathematics.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mem.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/replaygain.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avformat.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"replaygain.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>parse_value</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>min</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>fraction</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>scale</name> <init>= <expr><literal type="number">10000</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>mb</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sign</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>db</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>min</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>value</name> <operator>+=</operator> <call><name>strspn</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">" \t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>value</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>sign</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>db</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fraction</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>fraction</name><operator>++</operator> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><call><name>av_isdigit</name><argument_list>(<argument><expr><operator>*</operator><name>fraction</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>scale</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mb</name> <operator>+=</operator> <name>scale</name> <operator>*</operator> <operator>(</operator><operator>*</operator><name>fraction</name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>scale</name> <operator>/=</operator> <literal type="number">10</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>fraction</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>abs</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <operator>(</operator><name>INT32_MAX</name> <operator>-</operator> <name>mb</name><operator>)</operator> <operator>/</operator> <literal type="number">100000</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>min</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>db</name> <operator>*</operator> <literal type="number">100000</literal> <operator>+</operator> <name>sign</name> <operator>*</operator> <name>mb</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_replaygain_export_raw</name><parameter_list>(<parameter><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>tg</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>tp</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>ag</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>ap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVReplayGain</name> <modifier>*</modifier></type><name>replaygain</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>tg</name> <operator>==</operator> <name>INT32_MIN</name> <operator>&amp;&amp;</operator> <name>ag</name> <operator>==</operator> <name>INT32_MIN</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>replaygain</name> <operator>=</operator> <operator>(</operator><name>AVReplayGain</name><operator>*</operator><operator>)</operator><call><name>av_stream_new_side_data</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><name>AV_PKT_DATA_REPLAYGAIN</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>replaygain</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>replaygain</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>replaygain</name><operator>-&gt;</operator><name>track_gain</name></name> <operator>=</operator> <name>tg</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>replaygain</name><operator>-&gt;</operator><name>track_peak</name></name> <operator>=</operator> <name>tp</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>replaygain</name><operator>-&gt;</operator><name>album_gain</name></name> <operator>=</operator> <name>ag</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>replaygain</name><operator>-&gt;</operator><name>album_peak</name></name> <operator>=</operator> <name>ap</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_replaygain_export</name><parameter_list>(<parameter><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name></decl></parameter>, <parameter><decl><type><name>AVDictionary</name> <modifier>*</modifier></type><name>metadata</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVDictionaryEntry</name> <modifier>*</modifier></type><name>tg</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ag</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ap</name></decl>;</decl_stmt>

<expr_stmt><expr><name>tg</name> <operator>=</operator> <call><name>av_dict_get</name><argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><literal type="string">"REPLAYGAIN_TRACK_GAIN"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tp</name> <operator>=</operator> <call><name>av_dict_get</name><argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><literal type="string">"REPLAYGAIN_TRACK_PEAK"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ag</name> <operator>=</operator> <call><name>av_dict_get</name><argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><literal type="string">"REPLAYGAIN_ALBUM_GAIN"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ap</name> <operator>=</operator> <call><name>av_dict_get</name><argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><literal type="string">"REPLAYGAIN_ALBUM_PEAK"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>ff_replaygain_export_raw</name><argument_list>(<argument><expr><name>st</name></expr></argument>,

<argument><expr><call><name>parse_value</name><argument_list>(<argument><expr><ternary><condition><expr><name>tg</name></expr> ?</condition><then> <expr><name><name>tg</name><operator>-&gt;</operator><name>value</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>, <argument><expr><name>INT32_MIN</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>parse_value</name><argument_list>(<argument><expr><ternary><condition><expr><name>tp</name></expr> ?</condition><then> <expr><name><name>tp</name><operator>-&gt;</operator><name>value</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>parse_value</name><argument_list>(<argument><expr><ternary><condition><expr><name>ag</name></expr> ?</condition><then> <expr><name><name>ag</name><operator>-&gt;</operator><name>value</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>, <argument><expr><name>INT32_MIN</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>parse_value</name><argument_list>(<argument><expr><ternary><condition><expr><name>ap</name></expr> ?</condition><then> <expr><name><name>ap</name><operator>-&gt;</operator><name>value</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

</unit>
