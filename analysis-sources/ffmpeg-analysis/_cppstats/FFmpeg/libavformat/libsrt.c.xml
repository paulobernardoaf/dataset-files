<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavformat\libsrt.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;srt/srt.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/parseutils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/time.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avformat.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"network.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"os_support.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"url.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SRT_LIVE_DEFAULT_PAYLOAD_SIZE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRT_LIVE_DEFAULT_PAYLOAD_SIZE</name></cpp:macro> <cpp:value>1316</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SRT_LIVE_MAX_PAYLOAD_SIZE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRT_LIVE_MAX_PAYLOAD_SIZE</name></cpp:macro> <cpp:value>1456</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<enum>enum <name>SRTMode</name> <block>{

<decl><name>SRT_MODE_CALLER</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>SRT_MODE_LISTENER</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,

<decl><name>SRT_MODE_RENDEZVOUS</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>

}</block>;</enum>

<typedef>typedef <type><struct>struct <name>SRTContext</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>eid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>rw_timeout</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>listen_timeout</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>recv_buffer_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>send_buffer_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>maxbw</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pbkeylen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>passphrase</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SRT_VERSION_VALUE</name> <operator>&gt;=</operator> <literal type="number">0x010302</literal></expr></cpp:if>

<decl_stmt><decl><type><name>int</name></type> <name>enforced_encryption</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>kmrefreshrate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>kmpreannounce</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>int</name></type> <name>mss</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ffs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ipttl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>iptos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>inputbw</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>oheadbw</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>latency</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tlpktdrop</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nakreport</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>connect_timeout</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>payload_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>rcvlatency</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>peerlatency</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>SRTMode</name></name></type> <name>mode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sndbuf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rcvbuf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>lossmaxttl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>minversion</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>streamid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>smoother</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>messageapi</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SRT_TRANSTYPE</name></type> <name>transtype</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>linger</name></decl>;</decl_stmt>

}</block></struct></type> <name>SRTContext</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D</name></cpp:macro> <cpp:value>AV_OPT_FLAG_DECODING_PARAM</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>E</name></cpp:macro> <cpp:value>AV_OPT_FLAG_ENCODING_PARAM</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(SRTContext, x)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>libsrt_options</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"timeout"</literal></expr>, <expr><literal type="string">"Timeout of socket I/O operations"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>rw_timeout</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT64</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>INT64_MAX</name></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>D</name><operator>|</operator><name>E</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"listen_timeout"</literal></expr>, <expr><literal type="string">"Connection awaiting timeout"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>listen_timeout</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT64</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>INT64_MAX</name></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>D</name><operator>|</operator><name>E</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"send_buffer_size"</literal></expr>, <expr><literal type="string">"Socket send buffer size (in bytes)"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>send_buffer_size</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>D</name><operator>|</operator><name>E</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"recv_buffer_size"</literal></expr>, <expr><literal type="string">"Socket receive buffer size (in bytes)"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>recv_buffer_size</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>D</name><operator>|</operator><name>E</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"pkt_size"</literal></expr>, <expr><literal type="string">"Maximum SRT packet size"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>payload_size</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>SRT_LIVE_MAX_PAYLOAD_SIZE</name></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>D</name><operator>|</operator><name>E</name></expr>, <expr><literal type="string">"payload_size"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"payload_size"</literal></expr>, <expr><literal type="string">"Maximum SRT packet size"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>payload_size</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>SRT_LIVE_MAX_PAYLOAD_SIZE</name></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>D</name><operator>|</operator><name>E</name></expr>, <expr><literal type="string">"payload_size"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"ts_size"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>SRT_LIVE_DEFAULT_PAYLOAD_SIZE</name></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>D</name><operator>|</operator><name>E</name></expr>, <expr><literal type="string">"payload_size"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"max_size"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>SRT_LIVE_MAX_PAYLOAD_SIZE</name></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>D</name><operator>|</operator><name>E</name></expr>, <expr><literal type="string">"payload_size"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"maxbw"</literal></expr>, <expr><literal type="string">"Maximum bandwidth (bytes per second) that the connection can use"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>maxbw</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT64</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>INT64_MAX</name></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>D</name><operator>|</operator><name>E</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"pbkeylen"</literal></expr>, <expr><literal type="string">"Crypto key len in bytes {16,24,32} Default: 16 (128-bit)"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>pbkeylen</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>D</name><operator>|</operator><name>E</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"passphrase"</literal></expr>, <expr><literal type="string">"Crypto PBKDF2 Passphrase size[0,10..64] 0:disable crypto"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>passphrase</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{ <expr><operator>.</operator><name>str</name> <operator>=</operator> <name>NULL</name></expr> }</block></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>D</name><operator>|</operator><name>E</name></expr> }</block></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SRT_VERSION_VALUE</name> <operator>&gt;=</operator> <literal type="number">0x010302</literal></expr></cpp:if>

<expr><block>{ <expr><literal type="string">"enforced_encryption"</literal></expr>, <expr><literal type="string">"Enforces that both connection parties have the same passphrase set"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>enforced_encryption</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>D</name><operator>|</operator><name>E</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"kmrefreshrate"</literal></expr>, <expr><literal type="string">"The number of packets to be transmitted after which the encryption key is switched to a new key"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>kmrefreshrate</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>D</name><operator>|</operator><name>E</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"kmpreannounce"</literal></expr>, <expr><literal type="string">"The interval between when a new encryption key is sent and when switchover occurs"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>kmpreannounce</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>D</name><operator>|</operator><name>E</name></expr> }</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{ <expr><literal type="string">"mss"</literal></expr>, <expr><literal type="string">"The Maximum Segment Size"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>mss</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1500</literal></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>D</name><operator>|</operator><name>E</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"ffs"</literal></expr>, <expr><literal type="string">"Flight flag size (window size) (in bytes)"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>ffs</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>D</name><operator>|</operator><name>E</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"ipttl"</literal></expr>, <expr><literal type="string">"IP Time To Live"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>ipttl</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>D</name><operator>|</operator><name>E</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"iptos"</literal></expr>, <expr><literal type="string">"IP Type of Service"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>iptos</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>D</name><operator>|</operator><name>E</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"inputbw"</literal></expr>, <expr><literal type="string">"Estimated input stream rate"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>inputbw</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT64</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>INT64_MAX</name></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>D</name><operator>|</operator><name>E</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"oheadbw"</literal></expr>, <expr><literal type="string">"MaxBW ceiling based on % over input stream rate"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>oheadbw</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">100</literal></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>D</name><operator>|</operator><name>E</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"latency"</literal></expr>, <expr><literal type="string">"receiver delay to absorb bursts of missed packet retransmissions"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>latency</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT64</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>INT64_MAX</name></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>D</name><operator>|</operator><name>E</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"tsbpddelay"</literal></expr>, <expr><literal type="string">"deprecated, same effect as latency option"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>latency</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT64</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>INT64_MAX</name></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>D</name><operator>|</operator><name>E</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"rcvlatency"</literal></expr>, <expr><literal type="string">"receive latency"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>rcvlatency</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT64</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>INT64_MAX</name></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>D</name><operator>|</operator><name>E</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"peerlatency"</literal></expr>, <expr><literal type="string">"peer latency"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>peerlatency</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT64</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>INT64_MAX</name></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>D</name><operator>|</operator><name>E</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"tlpktdrop"</literal></expr>, <expr><literal type="string">"Enable receiver pkt drop"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>tlpktdrop</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>D</name><operator>|</operator><name>E</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"nakreport"</literal></expr>, <expr><literal type="string">"Enable receiver to send periodic NAK reports"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>nakreport</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>D</name><operator>|</operator><name>E</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"connect_timeout"</literal></expr>, <expr><literal type="string">"Connect timeout. Caller default: 3000, rendezvous (x 10)"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>connect_timeout</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT64</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>INT64_MAX</name></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>D</name><operator>|</operator><name>E</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"mode"</literal></expr>, <expr><literal type="string">"Connection mode (caller, listener, rendezvous)"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>SRT_MODE_CALLER</name></expr> }</block></expr>, <expr><name>SRT_MODE_CALLER</name></expr>, <expr><name>SRT_MODE_RENDEZVOUS</name></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>D</name><operator>|</operator><name>E</name></expr>, <expr><literal type="string">"mode"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"caller"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>SRT_MODE_CALLER</name></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>D</name><operator>|</operator><name>E</name></expr>, <expr><literal type="string">"mode"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"listener"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>SRT_MODE_LISTENER</name></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>D</name><operator>|</operator><name>E</name></expr>, <expr><literal type="string">"mode"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"rendezvous"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>SRT_MODE_RENDEZVOUS</name></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>D</name><operator>|</operator><name>E</name></expr>, <expr><literal type="string">"mode"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"sndbuf"</literal></expr>, <expr><literal type="string">"Send buffer size (in bytes)"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>sndbuf</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>D</name><operator>|</operator><name>E</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"rcvbuf"</literal></expr>, <expr><literal type="string">"Receive buffer size (in bytes)"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>rcvbuf</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>D</name><operator>|</operator><name>E</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"lossmaxttl"</literal></expr>, <expr><literal type="string">"Maximum possible packet reorder tolerance"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>lossmaxttl</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>D</name><operator>|</operator><name>E</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"minversion"</literal></expr>, <expr><literal type="string">"The minimum SRT version that is required from the peer"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>minversion</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>D</name><operator>|</operator><name>E</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"streamid"</literal></expr>, <expr><literal type="string">"A string of up to 512 characters that an Initiator can pass to a Responder"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>streamid</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{ <expr><operator>.</operator><name>str</name> <operator>=</operator> <name>NULL</name></expr> }</block></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>D</name><operator>|</operator><name>E</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"smoother"</literal></expr>, <expr><literal type="string">"The type of Smoother used for the transmission for that socket"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>smoother</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{ <expr><operator>.</operator><name>str</name> <operator>=</operator> <name>NULL</name></expr> }</block></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>D</name><operator>|</operator><name>E</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"messageapi"</literal></expr>, <expr><literal type="string">"Enable message API"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>messageapi</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>D</name><operator>|</operator><name>E</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"transtype"</literal></expr>, <expr><literal type="string">"The transmission type for the socket"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>transtype</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>SRTT_INVALID</name></expr> }</block></expr>, <expr><name>SRTT_LIVE</name></expr>, <expr><name>SRTT_INVALID</name></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>D</name><operator>|</operator><name>E</name></expr>, <expr><literal type="string">"transtype"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"live"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>SRTT_LIVE</name></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>D</name><operator>|</operator><name>E</name></expr>, <expr><literal type="string">"transtype"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"file"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>SRTT_FILE</name></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>D</name><operator>|</operator><name>E</name></expr>, <expr><literal type="string">"transtype"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"linger"</literal></expr>, <expr><literal type="string">"Number of seconds that the socket waits for unsent data when closing"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>linger</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>D</name><operator>|</operator><name>E</name></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>libsrt_neterrno</name><parameter_list>(<parameter><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>os_errno</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>srt_getlasterror</name><argument_list>(<argument><expr><operator>&amp;</operator><name>os_errno</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <name>SRT_EASYNCRCV</name> <operator>||</operator> <name>err</name> <operator>==</operator> <name>SRT_EASYNCSND</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><call><name>srt_getlasterror_str</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><name>os_errno</name></expr> ?</condition><then> <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>os_errno</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>AVERROR_UNKNOWN</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>libsrt_socket_nonblock</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>socket</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>enable</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>blocking</name> <init>= <expr><ternary><condition><expr><name>enable</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>srt_setsockopt</name><argument_list>(<argument><expr><name>socket</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SRTO_SNDSYN</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>blocking</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>blocking</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>srt_setsockopt</name><argument_list>(<argument><expr><name>socket</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SRTO_RCVSYN</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>blocking</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>blocking</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>libsrt_network_wait_fd</name><parameter_list>(<parameter><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>eid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>write</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>len</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>errlen</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>modes</name> <init>= <expr><name>SRT_EPOLL_ERR</name> <operator>|</operator> <operator>(</operator><ternary><condition><expr><name>write</name></expr> ?</condition><then> <expr><name>SRT_EPOLL_OUT</name></expr> </then><else>: <expr><name>SRT_EPOLL_IN</name></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SRTSOCKET</name></type> <name><name>ready</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SRTSOCKET</name></type> <name><name>error</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>srt_epoll_add_usock</name><argument_list>(<argument><expr><name>eid</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>modes</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>libsrt_neterrno</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>write</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>srt_epoll_wait</name><argument_list>(<argument><expr><name>eid</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>errlen</name></expr></argument>, <argument><expr><name>ready</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name>POLLING_TIME</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>srt_epoll_wait</name><argument_list>(<argument><expr><name>eid</name></expr></argument>, <argument><expr><name>ready</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>errlen</name></expr></argument>, <argument><expr><name>POLLING_TIME</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>srt_getlasterror</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SRT_ETIMEOUT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>libsrt_neterrno</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <ternary><condition><expr><name>errlen</name></expr> ?</condition><then> <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>srt_epoll_remove_usock</name><argument_list>(<argument><expr><name>eid</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>libsrt_neterrno</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>libsrt_network_wait_fd_timeout</name><parameter_list>(<parameter><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>eid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>write</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>timeout</name></decl></parameter>, <parameter><decl><type><name>AVIOInterruptCB</name> <modifier>*</modifier></type><name>int_cb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>wait_start</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>ff_check_interrupt</name><argument_list>(<argument><expr><name>int_cb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_EXIT</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>libsrt_network_wait_fd</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>eid</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>write</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>timeout</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>wait_start</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>wait_start</name> <operator>=</operator> <call><name>av_gettime_relative</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>av_gettime_relative</name><argument_list>()</argument_list></call> <operator>-</operator> <name>wait_start</name> <operator>&gt;</operator> <name>timeout</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ETIMEDOUT</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>libsrt_listen</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>eid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>socklen_t</name></type> <name>addrlen</name></decl></parameter>, <parameter><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>timeout</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>reuse</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>srt_setsockopt</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>SRTO_REUSEADDR</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>reuse</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>reuse</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"setsockopt(SRTO_REUSEADDR) failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>srt_bind</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>addrlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>libsrt_neterrno</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>srt_listen</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>libsrt_neterrno</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>libsrt_network_wait_fd_timeout</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>eid</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>timeout</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>interrupt_callback</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>srt_accept</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>libsrt_neterrno</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>libsrt_socket_nonblock</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"libsrt_socket_nonblock failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>libsrt_listen_connect</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>eid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>socklen_t</name></type> <name>addrlen</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>timeout</name></decl></parameter>, <parameter><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>will_try_next</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>srt_connect</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>addrlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>libsrt_neterrno</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>libsrt_network_wait_fd_timeout</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>eid</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>timeout</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>interrupt_callback</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>will_try_next</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,

<argument><expr><literal type="string">"Connection to %s failed (%s), trying next address\n"</literal></expr></argument>,

<argument><expr><name><name>h</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>, <argument><expr><call><name>av_err2str</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Connection to %s failed: %s\n"</literal></expr></argument>,

<argument><expr><name><name>h</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>, <argument><expr><call><name>av_err2str</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>libsrt_setsockopt</name><parameter_list>(<parameter><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>SRT_SOCKOPT</name></type> <name>optname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>optnamestr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name>optval</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>optlen</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>srt_setsockopt</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>optname</name></expr></argument>, <argument><expr><name>optval</name></expr></argument>, <argument><expr><name>optlen</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"failed to set option %s on socket: %s\n"</literal></expr></argument>, <argument><expr><name>optnamestr</name></expr></argument>, <argument><expr><call><name>srt_getlasterror_str</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>libsrt_getsockopt</name><parameter_list>(<parameter><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>SRT_SOCKOPT</name></type> <name>optname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>optnamestr</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>optval</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type> <name>optlen</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>srt_getsockopt</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>optname</name></expr></argument>, <argument><expr><name>optval</name></expr></argument>, <argument><expr><name>optlen</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"failed to get option %s on socket: %s\n"</literal></expr></argument>, <argument><expr><name>optnamestr</name></expr></argument>, <argument><expr><call><name>srt_getlasterror_str</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>libsrt_set_options_post</name><parameter_list>(<parameter><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>SRTContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>inputbw</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>libsrt_setsockopt</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>SRTO_INPUTBW</name></expr></argument>, <argument><expr><literal type="string">"SRTO_INPUTBW"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>inputbw</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>inputbw</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>

<operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>oheadbw</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>libsrt_setsockopt</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>SRTO_OHEADBW</name></expr></argument>, <argument><expr><literal type="string">"SRTO_OHEADBW"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>oheadbw</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>oheadbw</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>libsrt_set_options_pre</name><parameter_list>(<parameter><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>SRTContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>yes</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>latency</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>latency</name></name> <operator>/</operator> <literal type="number">1000</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rcvlatency</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>rcvlatency</name></name> <operator>/</operator> <literal type="number">1000</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>peerlatency</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>peerlatency</name></name> <operator>/</operator> <literal type="number">1000</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>connect_timeout</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>connect_timeout</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>SRT_MODE_RENDEZVOUS</name> <operator>&amp;&amp;</operator> <call><name>libsrt_setsockopt</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>SRTO_RENDEZVOUS</name></expr></argument>, <argument><expr><literal type="string">"SRTO_RENDEZVOUS"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>yes</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>yes</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>

<operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>transtype</name></name> <operator>!=</operator> <name>SRTT_INVALID</name> <operator>&amp;&amp;</operator> <call><name>libsrt_setsockopt</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>SRTO_TRANSTYPE</name></expr></argument>, <argument><expr><literal type="string">"SRTO_TRANSTYPE"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>transtype</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>transtype</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>

<operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>maxbw</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>libsrt_setsockopt</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>SRTO_MAXBW</name></expr></argument>, <argument><expr><literal type="string">"SRTO_MAXBW"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>maxbw</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>maxbw</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>

<operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>pbkeylen</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>libsrt_setsockopt</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>SRTO_PBKEYLEN</name></expr></argument>, <argument><expr><literal type="string">"SRTO_PBKEYLEN"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pbkeylen</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pbkeylen</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>

<operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>passphrase</name></name> <operator>&amp;&amp;</operator> <call><name>libsrt_setsockopt</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>SRTO_PASSPHRASE</name></expr></argument>, <argument><expr><literal type="string">"SRTO_PASSPHRASE"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>passphrase</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>passphrase</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SRT_VERSION_VALUE</name> <operator>&gt;=</operator> <literal type="number">0x010302</literal></expr></cpp:if>

<operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>enforced_encryption</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>libsrt_setsockopt</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>SRTO_STRICTENC</name></expr></argument>, <argument><expr><literal type="string">"SRTO_STRICTENC"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>enforced_encryption</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>enforced_encryption</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>

<operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>kmrefreshrate</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>libsrt_setsockopt</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>SRTO_KMREFRESHRATE</name></expr></argument>, <argument><expr><literal type="string">"SRTO_KMREFRESHRATE"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>kmrefreshrate</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>kmrefreshrate</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>

<operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>kmpreannounce</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>libsrt_setsockopt</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>SRTO_KMPREANNOUNCE</name></expr></argument>, <argument><expr><literal type="string">"SRTO_KMPREANNOUNCE"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>kmpreannounce</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>kmpreannounce</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>mss</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>libsrt_setsockopt</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>SRTO_MSS</name></expr></argument>, <argument><expr><literal type="string">"SRTO_MSS"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>mss</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mss</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>

<operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>ffs</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>libsrt_setsockopt</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>SRTO_FC</name></expr></argument>, <argument><expr><literal type="string">"SRTO_FC"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>ffs</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>ffs</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>

<operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>ipttl</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>libsrt_setsockopt</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>SRTO_IPTTL</name></expr></argument>, <argument><expr><literal type="string">"SRTO_IPTTL"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>ipttl</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>ipttl</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>

<operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>iptos</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>libsrt_setsockopt</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>SRTO_IPTOS</name></expr></argument>, <argument><expr><literal type="string">"SRTO_IPTOS"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>iptos</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>iptos</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>

<operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>latency</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>libsrt_setsockopt</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>SRTO_LATENCY</name></expr></argument>, <argument><expr><literal type="string">"SRTO_LATENCY"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>latency</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>latency</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>

<operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>rcvlatency</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>libsrt_setsockopt</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>SRTO_RCVLATENCY</name></expr></argument>, <argument><expr><literal type="string">"SRTO_RCVLATENCY"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>rcvlatency</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>rcvlatency</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>

<operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>peerlatency</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>libsrt_setsockopt</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>SRTO_PEERLATENCY</name></expr></argument>, <argument><expr><literal type="string">"SRTO_PEERLATENCY"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>peerlatency</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>peerlatency</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>

<operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>tlpktdrop</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>libsrt_setsockopt</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>SRTO_TLPKTDROP</name></expr></argument>, <argument><expr><literal type="string">"SRTO_TLPKDROP"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>tlpktdrop</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>tlpktdrop</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>

<operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>nakreport</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>libsrt_setsockopt</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>SRTO_NAKREPORT</name></expr></argument>, <argument><expr><literal type="string">"SRTO_NAKREPORT"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>nakreport</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>nakreport</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>

<operator>(</operator><name>connect_timeout</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>libsrt_setsockopt</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>SRTO_CONNTIMEO</name></expr></argument>, <argument><expr><literal type="string">"SRTO_CONNTIMEO"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>connect_timeout</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>connect_timeout</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&lt;</operator><literal type="number">0</literal> <operator>)</operator> <operator>||</operator>

<operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>sndbuf</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>libsrt_setsockopt</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>SRTO_SNDBUF</name></expr></argument>, <argument><expr><literal type="string">"SRTO_SNDBUF"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>sndbuf</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sndbuf</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>

<operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>rcvbuf</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>libsrt_setsockopt</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>SRTO_RCVBUF</name></expr></argument>, <argument><expr><literal type="string">"SRTO_RCVBUF"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>rcvbuf</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>rcvbuf</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>

<operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>lossmaxttl</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>libsrt_setsockopt</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>SRTO_LOSSMAXTTL</name></expr></argument>, <argument><expr><literal type="string">"SRTO_LOSSMAXTTL"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>lossmaxttl</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>lossmaxttl</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>

<operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>minversion</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>libsrt_setsockopt</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>SRTO_MINVERSION</name></expr></argument>, <argument><expr><literal type="string">"SRTO_MINVERSION"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>minversion</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>minversion</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>

<operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>streamid</name></name> <operator>&amp;&amp;</operator> <call><name>libsrt_setsockopt</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>SRTO_STREAMID</name></expr></argument>, <argument><expr><literal type="string">"SRTO_STREAMID"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>streamid</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>streamid</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>

<operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>smoother</name></name> <operator>&amp;&amp;</operator> <call><name>libsrt_setsockopt</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>SRTO_SMOOTHER</name></expr></argument>, <argument><expr><literal type="string">"SRTO_SMOOTHER"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>smoother</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>smoother</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>

<operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>messageapi</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>libsrt_setsockopt</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>SRTO_MESSAGEAPI</name></expr></argument>, <argument><expr><literal type="string">"SRTO_MESSAGEAPI"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>messageapi</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>messageapi</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>

<operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>payload_size</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>libsrt_setsockopt</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>SRTO_PAYLOADSIZE</name></expr></argument>, <argument><expr><literal type="string">"SRTO_PAYLOADSIZE"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>payload_size</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>payload_size</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>

<operator>(</operator><operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AVIO_FLAG_WRITE</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>libsrt_setsockopt</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>SRTO_SENDER</name></expr></argument>, <argument><expr><literal type="string">"SRTO_SENDER"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>yes</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>yes</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>linger</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>linger</name></name></type> <name>lin</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>lin</name><operator>.</operator><name>l_linger</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>linger</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lin</name><operator>.</operator><name>l_onoff</name></name> <operator>=</operator> <ternary><condition><expr><name><name>lin</name><operator>.</operator><name>l_linger</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>libsrt_setsockopt</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>SRTO_LINGER</name></expr></argument>, <argument><expr><literal type="string">"SRTO_LINGER"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>lin</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lin</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>libsrt_setup</name><parameter_list>(<parameter><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>uri</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name></type> <name>hints</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ai</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cur_ai</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>port</name></decl>, <decl><type ref="prev"/><name>fd</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SRTContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>hostname</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>proto</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>path</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>portstr</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>open_timeout</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>eid</name></decl>;</decl_stmt>

<expr_stmt><expr><name>eid</name> <operator>=</operator> <call><name>srt_epoll_create</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>eid</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>libsrt_neterrno</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>eid</name></name> <operator>=</operator> <name>eid</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_url_split</name><argument_list>(<argument><expr><name>proto</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>proto</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>hostname</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hostname</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><operator>&amp;</operator><name>port</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>proto</name></expr></argument>, <argument><expr><literal type="string">"srt"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>port</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>port</name> <operator>&gt;=</operator> <literal type="number">65536</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Port missing in uri\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><literal type="char">'?'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>av_find_info_tag</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"timeout"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rw_timeout</name></name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_find_info_tag</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"listen_timeout"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>listen_timeout</name></name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>rw_timeout</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>open_timeout</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>rw_timeout</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>rw_timeout</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_family</name></name> <operator>=</operator> <name>AF_UNSPEC</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_socktype</name></name> <operator>=</operator> <name>SOCK_DGRAM</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>portstr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>portstr</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>SRT_MODE_LISTENER</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_flags</name></name> <operator>|=</operator> <name>AI_PASSIVE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>getaddrinfo</name><argument_list>(<argument><expr><ternary><condition><expr><name><name>hostname</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> ?</condition><then> <expr><name>hostname</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>, <argument><expr><name>portstr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Failed to resolve hostname %s: %s\n"</literal></expr></argument>,

<argument><expr><name>hostname</name></expr></argument>, <argument><expr><call><name>gai_strerror</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cur_ai</name> <operator>=</operator> <name>ai</name></expr>;</expr_stmt>

<label><name>restart</name>:</label>

<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>srt_socket</name><argument_list>(<argument><expr><name><name>cur_ai</name><operator>-&gt;</operator><name>ai_family</name></name></expr></argument>, <argument><expr><name><name>cur_ai</name><operator>-&gt;</operator><name>ai_socktype</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>libsrt_neterrno</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>libsrt_set_options_pre</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>recv_buffer_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>srt_setsockopt</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>SRTO_UDP_RCVBUF</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>recv_buffer_size</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>recv_buffer_size</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>send_buffer_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>srt_setsockopt</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>SRTO_UDP_SNDBUF</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>send_buffer_size</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>send_buffer_size</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>libsrt_socket_nonblock</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"libsrt_socket_nonblock failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>SRT_MODE_LISTENER</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>libsrt_listen</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>eid</name></name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name><name>cur_ai</name><operator>-&gt;</operator><name>ai_addr</name></name></expr></argument>, <argument><expr><name><name>cur_ai</name><operator>-&gt;</operator><name>ai_addrlen</name></name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>listen_timeout</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail1</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>fd</name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>SRT_MODE_RENDEZVOUS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>srt_bind</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name><name>cur_ai</name><operator>-&gt;</operator><name>ai_addr</name></name></expr></argument>, <argument><expr><name><name>cur_ai</name><operator>-&gt;</operator><name>ai_addrlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail1</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>libsrt_listen_connect</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>eid</name></name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name><name>cur_ai</name><operator>-&gt;</operator><name>ai_addr</name></name></expr></argument>, <argument><expr><name><name>cur_ai</name><operator>-&gt;</operator><name>ai_addrlen</name></name></expr></argument>,

<argument><expr><name>open_timeout</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><operator>!</operator><operator>!</operator><name><name>cur_ai</name><operator>-&gt;</operator><name>ai_next</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>AVERROR_EXIT</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail1</name>;</goto></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>libsrt_set_options_post</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>AVIO_FLAG_WRITE</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>packet_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>optlen</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>packet_size</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>libsrt_getsockopt</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>SRTO_PAYLOADSIZE</name></expr></argument>, <argument><expr><literal type="string">"SRTO_PAYLOADSIZE"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>packet_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>optlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail1</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>packet_size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>max_packet_size</name></name> <operator>=</operator> <name>packet_size</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>is_streamed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <name>fd</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>freeaddrinfo</name><argument_list>(<argument><expr><name>ai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>fail</name>:</label>

<if_stmt><if>if <condition>(<expr><name><name>cur_ai</name><operator>-&gt;</operator><name>ai_next</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cur_ai</name> <operator>=</operator> <name><name>cur_ai</name><operator>-&gt;</operator><name>ai_next</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>srt_close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<goto>goto <name>restart</name>;</goto>

</block_content>}</block></if></if_stmt>

<label><name>fail1</name>:</label>

<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>srt_close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>freeaddrinfo</name><argument_list>(<argument><expr><name>ai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>libsrt_open</name><parameter_list>(<parameter><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>uri</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>SRTContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>srt_startup</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>AVERROR_UNKNOWN</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><literal type="char">'?'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>av_find_info_tag</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"maxbw"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>maxbw</name></name> <operator>=</operator> <call><name>strtoll</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_find_info_tag</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"pbkeylen"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pbkeylen</name></name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_find_info_tag</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"passphrase"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>passphrase</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>passphrase</name></name> <operator>=</operator> <call><name>av_strndup</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SRT_VERSION_VALUE</name> <operator>&gt;=</operator> <literal type="number">0x010302</literal></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><call><name>av_find_info_tag</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"enforced_encryption"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>enforced_encryption</name></name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_find_info_tag</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"kmrefreshrate"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>kmrefreshrate</name></name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_find_info_tag</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"kmpreannounce"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>kmpreannounce</name></name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><call><name>av_find_info_tag</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"mss"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mss</name></name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_find_info_tag</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"ffs"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ffs</name></name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_find_info_tag</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"ipttl"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ipttl</name></name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_find_info_tag</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"iptos"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>iptos</name></name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_find_info_tag</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"inputbw"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>inputbw</name></name> <operator>=</operator> <call><name>strtoll</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_find_info_tag</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"oheadbw"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>oheadbw</name></name> <operator>=</operator> <call><name>strtoll</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_find_info_tag</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"latency"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>latency</name></name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_find_info_tag</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"tsbpddelay"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>latency</name></name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_find_info_tag</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"rcvlatency"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rcvlatency</name></name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_find_info_tag</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"peerlatency"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>peerlatency</name></name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_find_info_tag</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"tlpktdrop"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>tlpktdrop</name></name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_find_info_tag</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"nakreport"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nakreport</name></name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_find_info_tag</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"connect_timeout"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>connect_timeout</name></name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_find_info_tag</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"payload_size"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>||</operator>

<call><name>av_find_info_tag</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"pkt_size"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>payload_size</name></name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_find_info_tag</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"mode"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"caller"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name>SRT_MODE_CALLER</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"listener"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name>SRT_MODE_LISTENER</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"rendezvous"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name>SRT_MODE_RENDEZVOUS</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_find_info_tag</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"sndbuf"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sndbuf</name></name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_find_info_tag</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"rcvbuf"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rcvbuf</name></name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_find_info_tag</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"lossmaxttl"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>lossmaxttl</name></name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_find_info_tag</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"minversion"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>minversion</name></name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_find_info_tag</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"streamid"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>streamid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>streamid</name></name> <operator>=</operator> <call><name>av_strdup</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>streamid</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>err</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_find_info_tag</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"smoother"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>smoother</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>smoother</name></name> <operator>=</operator> <call><name>av_strdup</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>smoother</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>err</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_find_info_tag</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"messageapi"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>messageapi</name></name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_find_info_tag</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"transtype"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"live"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>transtype</name></name> <operator>=</operator> <name>SRTT_LIVE</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"file"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>transtype</name></name> <operator>=</operator> <name>SRTT_FILE</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>err</name>;</goto>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_find_info_tag</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"linger"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>linger</name></name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>libsrt_setup</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>

<label><name>err</name>:</label>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>smoother</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>streamid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>libsrt_read</name><parameter_list>(<parameter><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>SRTContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AVIO_FLAG_NONBLOCK</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>libsrt_network_wait_fd_timeout</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>eid</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>rw_timeout</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>interrupt_callback</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>srt_recvmsg</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>libsrt_neterrno</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>libsrt_write</name><parameter_list>(<parameter><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>SRTContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AVIO_FLAG_NONBLOCK</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>libsrt_network_wait_fd_timeout</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>eid</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>rw_timeout</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>interrupt_callback</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>srt_sendmsg</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>libsrt_neterrno</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>libsrt_close</name><parameter_list>(<parameter><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>SRTContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>srt_close</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>srt_epoll_release</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>eid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>srt_cleanup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>libsrt_get_file_handle</name><parameter_list>(<parameter><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>SRTContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<return>return <expr><name><name>s</name><operator>-&gt;</operator><name>fd</name></name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>libsrt_class</name> <init>= <expr><block>{

<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"libsrt"</literal></expr>,

<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,

<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>libsrt_options</name></expr>,

<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>URLProtocol</name></type> <name>ff_libsrt_protocol</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"srt"</literal></expr>,

<expr><operator>.</operator><name>url_open</name> <operator>=</operator> <name>libsrt_open</name></expr>,

<expr><operator>.</operator><name>url_read</name> <operator>=</operator> <name>libsrt_read</name></expr>,

<expr><operator>.</operator><name>url_write</name> <operator>=</operator> <name>libsrt_write</name></expr>,

<expr><operator>.</operator><name>url_close</name> <operator>=</operator> <name>libsrt_close</name></expr>,

<expr><operator>.</operator><name>url_get_file_handle</name> <operator>=</operator> <name>libsrt_get_file_handle</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SRTContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>URL_PROTOCOL_FLAG_NETWORK</name></expr>,

<expr><operator>.</operator><name>priv_data_class</name> <operator>=</operator> <operator>&amp;</operator><name>libsrt_class</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
