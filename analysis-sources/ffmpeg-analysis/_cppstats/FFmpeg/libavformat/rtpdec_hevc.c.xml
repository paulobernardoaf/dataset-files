<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavformat\rtpdec_hevc.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avstring.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/base64.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/get_bits.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avformat.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rtpdec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rtpdec_formats.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RTP_HEVC_PAYLOAD_HEADER_SIZE</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RTP_HEVC_FU_HEADER_SIZE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RTP_HEVC_DONL_FIELD_SIZE</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RTP_HEVC_DOND_FIELD_SIZE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RTP_HEVC_AP_NALU_LENGTH_FIELD_SIZE</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEVC_SPECIFIED_NAL_UNIT_TYPES</name></cpp:macro> <cpp:value>48</cpp:value></cpp:define>

<struct>struct <name>PayloadContext</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>using_donl_field</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>profile_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>sps</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pps</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>vps</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>sei</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sps_size</name></decl>, <decl><type ref="prev"/><name>pps_size</name></decl>, <decl><type ref="prev"/><name>vps_size</name></decl>, <decl><type ref="prev"/><name>sei_size</name></decl>;</decl_stmt>

}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>start_sequence</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>hevc_sdp_parse_fmtp_config</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,

<parameter><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>,

<parameter><decl><type><name>PayloadContext</name> <modifier>*</modifier></type><name>hevc_data</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>attr</name></expr></argument>, <argument><expr><literal type="string">"profile-id"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>hevc_data</name><operator>-&gt;</operator><name>profile_id</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"SDP: found profile-id: %d\n"</literal></expr></argument>, <argument><expr><name><name>hevc_data</name><operator>-&gt;</operator><name>profile_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>attr</name></expr></argument>, <argument><expr><literal type="string">"sprop-vps"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>attr</name></expr></argument>, <argument><expr><literal type="string">"sprop-sps"</literal></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>attr</name></expr></argument>, <argument><expr><literal type="string">"sprop-pps"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>attr</name></expr></argument>, <argument><expr><literal type="string">"sprop-sei"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>data_ptr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>size_ptr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>attr</name></expr></argument>, <argument><expr><literal type="string">"sprop-vps"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>data_ptr</name> <operator>=</operator> <operator>&amp;</operator><name><name>hevc_data</name><operator>-&gt;</operator><name>vps</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>size_ptr</name> <operator>=</operator> <operator>&amp;</operator><name><name>hevc_data</name><operator>-&gt;</operator><name>vps_size</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>attr</name></expr></argument>, <argument><expr><literal type="string">"sprop-sps"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>data_ptr</name> <operator>=</operator> <operator>&amp;</operator><name><name>hevc_data</name><operator>-&gt;</operator><name>sps</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>size_ptr</name> <operator>=</operator> <operator>&amp;</operator><name><name>hevc_data</name><operator>-&gt;</operator><name>sps_size</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>attr</name></expr></argument>, <argument><expr><literal type="string">"sprop-pps"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>data_ptr</name> <operator>=</operator> <operator>&amp;</operator><name><name>hevc_data</name><operator>-&gt;</operator><name>pps</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>size_ptr</name> <operator>=</operator> <operator>&amp;</operator><name><name>hevc_data</name><operator>-&gt;</operator><name>pps_size</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>attr</name></expr></argument>, <argument><expr><literal type="string">"sprop-sei"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>data_ptr</name> <operator>=</operator> <operator>&amp;</operator><name><name>hevc_data</name><operator>-&gt;</operator><name>sei</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>size_ptr</name> <operator>=</operator> <operator>&amp;</operator><name><name>hevc_data</name><operator>-&gt;</operator><name>sei_size</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>ff_h264_parse_sprop_parameter_sets</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>data_ptr</name></expr></argument>,

<argument><expr><name>size_ptr</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>attr</name></expr></argument>, <argument><expr><literal type="string">"sprop-max-don-diff"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>atoi</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>hevc_data</name><operator>-&gt;</operator><name>using_donl_field</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"Found sprop-max-don-diff in SDP, DON field usage is: %d\n"</literal></expr></argument>,

<argument><expr><name><name>hevc_data</name><operator>-&gt;</operator><name>using_donl_field</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>attr</name></expr></argument>, <argument><expr><literal type="string">"sprop-depack-buf-nalus"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>atoi</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>hevc_data</name><operator>-&gt;</operator><name>using_donl_field</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"Found sprop-depack-buf-nalus in SDP, DON field usage is: %d\n"</literal></expr></argument>,

<argument><expr><name><name>hevc_data</name><operator>-&gt;</operator><name>using_donl_field</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>hevc_parse_sdp_line</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>st_index</name></decl></parameter>,

<parameter><decl><type><name>PayloadContext</name> <modifier>*</modifier></type><name>hevc_data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>current_stream</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodecParameters</name> <modifier>*</modifier></type><name>par</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sdp_line_ptr</name> <init>= <expr><name>line</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>st_index</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>current_stream</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>st_index</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>par</name> <operator>=</operator> <name><name>current_stream</name><operator>-&gt;</operator><name>codecpar</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_strstart</name><argument_list>(<argument><expr><name>sdp_line_ptr</name></expr></argument>, <argument><expr><literal type="string">"framesize:"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>sdp_line_ptr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ff_h264_parse_framesize</name><argument_list>(<argument><expr><name>par</name></expr></argument>, <argument><expr><name>sdp_line_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>av_strstart</name><argument_list>(<argument><expr><name>sdp_line_ptr</name></expr></argument>, <argument><expr><literal type="string">"fmtp:"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>sdp_line_ptr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>ff_parse_fmtp</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>current_stream</name></expr></argument>, <argument><expr><name>hevc_data</name></expr></argument>, <argument><expr><name>sdp_line_ptr</name></expr></argument>,

<argument><expr><name>hevc_sdp_parse_fmtp_config</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hevc_data</name><operator>-&gt;</operator><name>vps_size</name></name> <operator>||</operator> <name><name>hevc_data</name><operator>-&gt;</operator><name>sps_size</name></name> <operator>||</operator>

<name><name>hevc_data</name><operator>-&gt;</operator><name>pps_size</name></name> <operator>||</operator> <name><name>hevc_data</name><operator>-&gt;</operator><name>sei_size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>par</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>=</operator> <name><name>hevc_data</name><operator>-&gt;</operator><name>vps_size</name></name> <operator>+</operator> <name><name>hevc_data</name><operator>-&gt;</operator><name>sps_size</name></name> <operator>+</operator>

<name><name>hevc_data</name><operator>-&gt;</operator><name>pps_size</name></name> <operator>+</operator> <name><name>hevc_data</name><operator>-&gt;</operator><name>sei_size</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_alloc_extradata</name><argument_list>(<argument><expr><name>par</name></expr></argument>, <argument><expr><name><name>par</name><operator>-&gt;</operator><name>extradata_size</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>par</name><operator>-&gt;</operator><name>extradata</name></name> <operator>+</operator> <name>pos</name></expr></argument>, <argument><expr><name><name>hevc_data</name><operator>-&gt;</operator><name>vps</name></name></expr></argument>, <argument><expr><name><name>hevc_data</name><operator>-&gt;</operator><name>vps_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pos</name> <operator>+=</operator> <name><name>hevc_data</name><operator>-&gt;</operator><name>vps_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>par</name><operator>-&gt;</operator><name>extradata</name></name> <operator>+</operator> <name>pos</name></expr></argument>, <argument><expr><name><name>hevc_data</name><operator>-&gt;</operator><name>sps</name></name></expr></argument>, <argument><expr><name><name>hevc_data</name><operator>-&gt;</operator><name>sps_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pos</name> <operator>+=</operator> <name><name>hevc_data</name><operator>-&gt;</operator><name>sps_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>par</name><operator>-&gt;</operator><name>extradata</name></name> <operator>+</operator> <name>pos</name></expr></argument>, <argument><expr><name><name>hevc_data</name><operator>-&gt;</operator><name>pps</name></name></expr></argument>, <argument><expr><name><name>hevc_data</name><operator>-&gt;</operator><name>pps_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pos</name> <operator>+=</operator> <name><name>hevc_data</name><operator>-&gt;</operator><name>pps_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>par</name><operator>-&gt;</operator><name>extradata</name></name> <operator>+</operator> <name>pos</name></expr></argument>, <argument><expr><name><name>hevc_data</name><operator>-&gt;</operator><name>sei</name></name></expr></argument>, <argument><expr><name><name>hevc_data</name><operator>-&gt;</operator><name>sei_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hevc_data</name><operator>-&gt;</operator><name>vps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hevc_data</name><operator>-&gt;</operator><name>sps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hevc_data</name><operator>-&gt;</operator><name>pps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hevc_data</name><operator>-&gt;</operator><name>sei</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hevc_data</name><operator>-&gt;</operator><name>vps_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hevc_data</name><operator>-&gt;</operator><name>sps_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hevc_data</name><operator>-&gt;</operator><name>pps_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hevc_data</name><operator>-&gt;</operator><name>sei_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>hevc_handle_packet</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>PayloadContext</name> <modifier>*</modifier></type><name>rtp_hevc_ctx</name></decl></parameter>,

<parameter><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>timestamp</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>seq</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>rtp_pl</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tid</name></decl>, <decl><type ref="prev"/><name>lid</name></decl>, <decl><type ref="prev"/><name>nal_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>first_fragment</name></decl>, <decl><type ref="prev"/><name>last_fragment</name></decl>, <decl><type ref="prev"/><name>fu_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>new_nal_header</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <name>RTP_HEVC_PAYLOAD_HEADER_SIZE</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Too short RTP/HEVC packet, got %d bytes\n"</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>nal_type</name> <operator>=</operator> <operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>lid</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x20</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1f</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>tid</name> <operator>=</operator> <name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x07</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>lid</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avpriv_report_missing_feature</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"Multi-layer HEVC coding"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tid</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Illegal temporal ID in RTP/HEVC packet\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>nal_type</name> <operator>&gt;</operator> <literal type="number">50</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unsupported (HEVC) NAL type (%d)\n"</literal></expr></argument>, <argument><expr><name>nal_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name>nal_type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">32</literal></expr>:</case>

<case>case <expr><literal type="number">33</literal></expr>:</case>

<case>case <expr><literal type="number">34</literal></expr>:</case>

<case>case <expr><literal type="number">39</literal></expr>:</case>

<default>default:</default>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name>av_new_packet</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>start_sequence</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>start_sequence</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>start_sequence</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>start_sequence</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">48</literal></expr>:</case>

<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>RTP_HEVC_PAYLOAD_HEADER_SIZE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>RTP_HEVC_PAYLOAD_HEADER_SIZE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rtp_hevc_ctx</name><operator>-&gt;</operator><name>using_donl_field</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>RTP_HEVC_DONL_FIELD_SIZE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>RTP_HEVC_DONL_FIELD_SIZE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>ff_h264_handle_aggregated_packet</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rtp_hevc_ctx</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>rtp_hevc_ctx</name><operator>-&gt;</operator><name>using_donl_field</name></name></expr> ?</condition><then>

<expr><name>RTP_HEVC_DOND_FIELD_SIZE</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">49</literal></expr>:</case>

<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>RTP_HEVC_PAYLOAD_HEADER_SIZE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>RTP_HEVC_PAYLOAD_HEADER_SIZE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>first_fragment</name> <operator>=</operator> <name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>last_fragment</name> <operator>=</operator> <name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x40</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>fu_type</name> <operator>=</operator> <name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>RTP_HEVC_FU_HEADER_SIZE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>RTP_HEVC_FU_HEADER_SIZE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rtp_hevc_ctx</name><operator>-&gt;</operator><name>using_donl_field</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>RTP_HEVC_DONL_FIELD_SIZE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>RTP_HEVC_DONL_FIELD_SIZE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">" FU type %d with %d bytes\n"</literal></expr></argument>, <argument><expr><name>fu_type</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Too short RTP/HEVC packet, got %d bytes of NAL unit type %d\n"</literal></expr></argument>,

<argument><expr><name>len</name></expr></argument>, <argument><expr><name>nal_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>first_fragment</name> <operator>&amp;&amp;</operator> <name>last_fragment</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Illegal combination of S and E bit in RTP/HEVC packet\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>new_nal_header</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>rtp_pl</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x81</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>fu_type</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>new_nal_header</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>rtp_pl</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>ff_h264_handle_frag_packet</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>first_fragment</name></expr></argument>,

<argument><expr><name>new_nal_header</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>new_nal_header</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">50</literal></expr>:</case>

<expr_stmt><expr><call><name>avpriv_report_missing_feature</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"PACI packets for RTP/HEVC"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <name>AVERROR_PATCHWELCOME</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>stream_index</name></name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>index</name></name></expr>;</expr_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>RTPDynamicProtocolHandler</name></type> <name>ff_hevc_dynamic_handler</name> <init>= <expr><block>{

<expr><operator>.</operator><name>enc_name</name> <operator>=</operator> <literal type="string">"H265"</literal></expr>,

<expr><operator>.</operator><name>codec_type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>codec_id</name> <operator>=</operator> <name>AV_CODEC_ID_HEVC</name></expr>,

<expr><operator>.</operator><name>need_parsing</name> <operator>=</operator> <name>AVSTREAM_PARSE_FULL</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>PayloadContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>parse_sdp_a_line</name> <operator>=</operator> <name>hevc_parse_sdp_line</name></expr>,

<expr><operator>.</operator><name>parse_packet</name> <operator>=</operator> <name>hevc_handle_packet</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
