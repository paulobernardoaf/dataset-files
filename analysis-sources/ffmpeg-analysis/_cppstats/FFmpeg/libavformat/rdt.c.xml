<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavformat\rdt.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avformat.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avstring.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rtpdec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rdt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/base64.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/md5.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rm.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avio_internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/get_bits.h"</cpp:file></cpp:include>

<struct>struct <name>RDTDemuxContext</name> <block>{

<decl_stmt><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>ic</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier><modifier>*</modifier></type><name>streams</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n_streams</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>dynamic_protocol_context</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DynamicPayloadPacketHandlerProc</name></type> <name>parse_packet</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>prev_timestamp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>prev_set_id</name></decl>, <decl><type ref="prev"/><name>prev_stream_id</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><name>RDTDemuxContext</name> <modifier>*</modifier></type>

<name>ff_rdt_parse_open</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>ic</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>first_stream_of_set_idx</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>priv_data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>RTPDynamicProtocolHandler</name> <modifier>*</modifier></type><name>handler</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>RDTDemuxContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>RDTDemuxContext</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>s</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ic</name></name> <operator>=</operator> <name>ic</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>streams</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>ic</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>first_stream_of_set_idx</name></expr>]</index></name></expr>;</expr_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>n_streams</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name>first_stream_of_set_idx</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>n_streams</name></name> <operator>&lt;</operator> <name><name>ic</name><operator>-&gt;</operator><name>nb_streams</name></name> <operator>&amp;&amp;</operator>

<name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>n_streams</name></name></expr>]</index></name><operator>-&gt;</operator><name>id</name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>id</name></expr>)</condition>;</do>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>prev_set_id</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>prev_stream_id</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>prev_timestamp</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>parse_packet</name></name> <operator>=</operator> <ternary><condition><expr><name>handler</name></expr> ?</condition><then> <expr><name><name>handler</name><operator>-&gt;</operator><name>parse_packet</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dynamic_protocol_context</name></name> <operator>=</operator> <name>priv_data</name></expr>;</expr_stmt>

<return>return <expr><name>s</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>ff_rdt_parse_close</name><parameter_list>(<parameter><decl><type><name>RDTDemuxContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<struct>struct <name>PayloadContext</name> <block>{

<decl_stmt><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>rmctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nb_rmst</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RMStream</name> <modifier>*</modifier><modifier>*</modifier></type><name>rmst</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>mlti_data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>mlti_data_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><name>RTP_MAX_PACKET_LENGTH</name> <operator>+</operator> <name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>audio_pkt_cnt</name></decl>;</decl_stmt> 

}</block>;</struct>

<function><type><name>void</name></type>

<name>ff_rdt_calc_response_and_checksum</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name><name>response</name><index>[<expr><literal type="number">41</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name><name>chksum</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>challenge</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ch_len</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name>challenge</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>zres</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>,

<decl><type ref="prev"/><name><name>buf</name><index>[<expr><literal type="number">64</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xa1</literal></expr>, <expr><literal type="number">0xe9</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x9d</literal></expr>, <expr><literal type="number">0x0e</literal></expr>, <expr><literal type="number">0x6b</literal></expr>, <expr><literal type="number">0x3b</literal></expr>, <expr><literal type="number">0x59</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XOR_TABLE_SIZE</name></cpp:macro> <cpp:value>37</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>xor_table</name><index>[<expr><name>XOR_TABLE_SIZE</name></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0x74</literal></expr>, <expr><literal type="number">0xd0</literal></expr>, <expr><literal type="number">0x0d</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x53</literal></expr>,

<expr><literal type="number">0xc0</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0x70</literal></expr>,

<expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0x66</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x72</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x09</literal></expr>,

<expr><literal type="number">0x63</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x71</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x70</literal></expr>, <expr><literal type="number">0x02</literal></expr>,

<expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x57</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0x54</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ch_len</name> <operator>==</operator> <literal type="number">40</literal></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>ch_len</name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>ch_len</name> <operator>&gt;</operator> <literal type="number">56</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ch_len</name> <operator>=</operator> <literal type="number">56</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>challenge</name></expr></argument>, <argument><expr><name>ch_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>XOR_TABLE_SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">8</literal> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>^=</operator> <name><name>xor_table</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>av_md5_sum</name><argument_list>(<argument><expr><name>zres</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_data_to_hex</name><argument_list>(<argument><expr><name>response</name></expr></argument>, <argument><expr><name>zres</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name>response</name> <operator>+</operator> <literal type="number">32</literal></expr></argument>, <argument><expr><literal type="string">"01d0a8e3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>chksum</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>response</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>chksum</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>rdt_load_mdpr</name> <parameter_list>(<parameter><decl><type><name>PayloadContext</name> <modifier>*</modifier></type><name>rdt</name></decl></parameter>, <parameter><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rule_nr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVIOContext</name></type> <name>pb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>tag</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>rdt</name><operator>-&gt;</operator><name>mlti_data</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ffio_init_context</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><name><name>rdt</name><operator>-&gt;</operator><name>mlti_data</name></name></expr></argument>, <argument><expr><name><name>rdt</name><operator>-&gt;</operator><name>mlti_data_size</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tag</name> <operator>=</operator> <call><name>avio_rl32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tag</name> <operator>==</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'M'</literal></expr></argument>, <argument><expr><literal type="char">'L'</literal></expr></argument>, <argument><expr><literal type="char">'T'</literal></expr></argument>, <argument><expr><literal type="char">'I'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>num</name></decl>, <decl><type ref="prev"/><name>chunk_nr</name></decl>;</decl_stmt>

<expr_stmt><expr><name>num</name> <operator>=</operator> <call><name>avio_rb16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rule_nr</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>rule_nr</name> <operator>&gt;=</operator> <name>num</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><name>rule_nr</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>chunk_nr</name> <operator>=</operator> <call><name>avio_rb16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><operator>(</operator><name>num</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>rule_nr</name><operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>num</name> <operator>=</operator> <call><name>avio_rb16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>chunk_nr</name> <operator>&gt;=</operator> <name>num</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name>chunk_nr</name><operator>--</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>avio_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><call><name>avio_rb32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>avio_rb32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>size</name> <operator>=</operator> <name><name>rdt</name><operator>-&gt;</operator><name>mlti_data_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ff_rm_read_mdpr_codecdata</name><argument_list>(<argument><expr><name><name>rdt</name><operator>-&gt;</operator><name>rmctx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><name>st</name></expr></argument>, <argument><expr><name><name>rdt</name><operator>-&gt;</operator><name>rmst</name><index>[<expr><name><name>st</name><operator>-&gt;</operator><name>index</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>ff_rdt_parse_header</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pset_id</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pseq_no</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pstream_id</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pis_keyframe</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>ptimestamp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>GetBitContext</name></type> <name>gb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>consumed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>set_id</name></decl>, <decl><type ref="prev"/><name>seq_no</name></decl>, <decl><type ref="prev"/><name>stream_id</name></decl>, <decl><type ref="prev"/><name>is_keyframe</name></decl>,

<decl><type ref="prev"/><name>len_included</name></decl>, <decl><type ref="prev"/><name>need_reliable</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>timestamp</name></decl>;</decl_stmt>

<while>while <condition>(<expr><name>len</name> <operator>&gt;=</operator> <literal type="number">5</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xFF</literal></expr> )</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>pkt_len</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>pkt_len</name> <operator>=</operator> <call><name>AV_RB16</name><argument_list>(<argument><expr><name>buf</name><operator>+</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>pkt_len</name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>pkt_len</name></expr>;</expr_stmt>

<expr_stmt><expr><name>consumed</name> <operator>+=</operator> <name>pkt_len</name></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>init_get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len_included</name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>need_reliable</name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>set_id</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>seq_no</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len_included</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>stream_id</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>is_keyframe</name> <operator>=</operator> <operator>!</operator><call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>timestamp</name> <operator>=</operator> <call><name>get_bits_long</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>set_id</name> <operator>==</operator> <literal type="number">0x1f</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>set_id</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>need_reliable</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>stream_id</name> <operator>==</operator> <literal type="number">0x1f</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>stream_id</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pset_id</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>pset_id</name> <operator>=</operator> <name>set_id</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pseq_no</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>pseq_no</name> <operator>=</operator> <name>seq_no</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pstream_id</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>pstream_id</name> <operator>=</operator> <name>stream_id</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pis_keyframe</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>pis_keyframe</name> <operator>=</operator> <name>is_keyframe</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ptimestamp</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>ptimestamp</name> <operator>=</operator> <name>timestamp</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>consumed</name> <operator>+</operator> <operator>(</operator><call><name>get_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>rdt_parse_packet</name> <parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>PayloadContext</name> <modifier>*</modifier></type><name>rdt</name></decl></parameter>, <parameter><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name></decl></parameter>,

<parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>timestamp</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>rtp_seq</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>seq</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>res</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVIOContext</name></type> <name>pb</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rdt</name><operator>-&gt;</operator><name>audio_pkt_cnt</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>pos</name></decl>, <decl><type ref="prev"/><name>rmflags</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ffio_init_context</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rmflags</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>RTP_FLAG_KEY</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>ff_rm_parse_packet</name> <argument_list>(<argument><expr><name><name>rdt</name><operator>-&gt;</operator><name>rmctx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><name>st</name></expr></argument>, <argument><expr><name><name>rdt</name><operator>-&gt;</operator><name>rmst</name><index>[<expr><name><name>st</name><operator>-&gt;</operator><name>index</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>seq</name></expr></argument>, <argument><expr><name>rmflags</name></expr></argument>, <argument><expr><operator>*</operator><name>timestamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_AAC</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>rdt</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>pos</name></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rdt</name><operator>-&gt;</operator><name>rmctx</name><operator>-&gt;</operator><name>pb</name></name> <operator>=</operator> <call><name>avio_alloc_context</name> <argument_list>(<argument><expr><name><name>rdt</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <name>pos</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<goto>goto <name>get_cache</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<label><name>get_cache</name>:</label>

<expr_stmt><expr><name><name>rdt</name><operator>-&gt;</operator><name>audio_pkt_cnt</name></name> <operator>=</operator>

<call><name>ff_rm_retrieve_cache</name> <argument_list>(<argument><expr><name><name>rdt</name><operator>-&gt;</operator><name>rmctx</name></name></expr></argument>, <argument><expr><name><name>rdt</name><operator>-&gt;</operator><name>rmctx</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>,

<argument><expr><name>st</name></expr></argument>, <argument><expr><name><name>rdt</name><operator>-&gt;</operator><name>rmst</name><index>[<expr><name><name>st</name><operator>-&gt;</operator><name>index</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rdt</name><operator>-&gt;</operator><name>audio_pkt_cnt</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_AAC</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>avio_context_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rdt</name><operator>-&gt;</operator><name>rmctx</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>stream_index</name></name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>index</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <operator>*</operator><name>timestamp</name></expr>;</expr_stmt>

<return>return <expr><name><name>rdt</name><operator>-&gt;</operator><name>audio_pkt_cnt</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>ff_rdt_parse_packet</name><parameter_list>(<parameter><decl><type><name>RDTDemuxContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>bufptr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><ternary><condition><expr><name>bufptr</name></expr> ?</condition><then> <expr><operator>*</operator><name>bufptr</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>seq_no</name></decl>, <decl><type ref="prev"/><name>flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>stream_id</name></decl>, <decl><type ref="prev"/><name>set_id</name></decl>, <decl><type ref="prev"/><name>is_keyframe</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>timestamp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rv</name><init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>parse_packet</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>prev_stream_id</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>timestamp</name><operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>rv</name><operator>=</operator> <call><name><name>s</name><operator>-&gt;</operator><name>parse_packet</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>ic</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>dynamic_protocol_context</name></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>prev_stream_id</name></name></expr>]</index></name></expr></argument>,

<argument><expr><name>pkt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>timestamp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>rv</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">12</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>ff_rdt_parse_header</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>set_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>seq_no</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stream_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>is_keyframe</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>timestamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rv</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>rv</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>is_keyframe</name> <operator>&amp;&amp;</operator>

<operator>(</operator><name>set_id</name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>prev_set_id</name></name> <operator>||</operator> <name>timestamp</name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>prev_timestamp</name></name> <operator>||</operator>

<name>stream_id</name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>prev_stream_id</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>RTP_FLAG_KEY</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>prev_set_id</name></name> <operator>=</operator> <name>set_id</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>prev_timestamp</name></name> <operator>=</operator> <name>timestamp</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>prev_stream_id</name></name> <operator>=</operator> <name>stream_id</name></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>rv</name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>rv</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>prev_stream_id</name></name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>n_streams</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>prev_stream_id</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name><name>s</name><operator>-&gt;</operator><name>parse_packet</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>ic</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>dynamic_protocol_context</name></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>prev_stream_id</name></name></expr>]</index></name></expr></argument>,

<argument><expr><name>pkt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>timestamp</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>rv</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>ff_rdt_subscribe_rule</name> <parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>stream_nr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rule_nr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>av_strlcatf</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="string">"stream=%d;rule=%d,stream=%d;rule=%d"</literal></expr></argument>,

<argument><expr><name>stream_nr</name></expr></argument>, <argument><expr><name>rule_nr</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>stream_nr</name></expr></argument>, <argument><expr><name>rule_nr</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type>

<name>rdt_parse_b64buf</name> <parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>target_len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>target</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\"'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>target_len</name> <operator>=</operator> <name>len</name> <operator>*</operator> <literal type="number">3</literal> <operator>/</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>target</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><operator>*</operator><name>target_len</name> <operator>+</operator> <name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>target</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_base64_decode</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><operator>*</operator><name>target_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>target</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>rdt_parse_sdp_line</name> <parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>st_index</name></decl></parameter>,

<parameter><decl><type><name>PayloadContext</name> <modifier>*</modifier></type><name>rdt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>stream</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>st_index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>line</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_strstart</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"OpaqueData:buffer;"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>rdt</name><operator>-&gt;</operator><name>mlti_data</name></name> <operator>=</operator> <call><name>rdt_parse_b64buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rdt</name><operator>-&gt;</operator><name>mlti_data_size</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>av_strstart</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"StartTime:integer;"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>first_dts</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>av_strstart</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"ASMRuleBook:string;"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>first</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>n</name></expr>]</index></name><operator>-&gt;</operator><name>id</name> <operator>==</operator> <name><name>stream</name><operator>-&gt;</operator><name>id</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>n</name></expr>]</index></name><operator>-&gt;</operator><name>index</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>err</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>first</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>first</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rdt</name><operator>-&gt;</operator><name>nb_rmst</name></name> <operator>&lt;</operator> <name>count</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>av_reallocp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rdt</name><operator>-&gt;</operator><name>rmst</name></name></expr></argument>,

<argument><expr><name>count</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>rdt</name><operator>-&gt;</operator><name>rmst</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>rdt</name><operator>-&gt;</operator><name>nb_rmst</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>rdt</name><operator>-&gt;</operator><name>rmst</name></name> <operator>+</operator> <name><name>rdt</name><operator>-&gt;</operator><name>nb_rmst</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><operator>(</operator><name>count</name> <operator>-</operator> <name><name>rdt</name><operator>-&gt;</operator><name>nb_rmst</name></name><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>rdt</name><operator>-&gt;</operator><name>rmst</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rdt</name><operator>-&gt;</operator><name>nb_rmst</name></name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>rdt</name><operator>-&gt;</operator><name>rmst</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>n</name></expr>]</index></name><operator>-&gt;</operator><name>index</name></expr>]</index></name> <operator>=</operator> <call><name>ff_rm_alloc_rmstream</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>rdt</name><operator>-&gt;</operator><name>rmst</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>n</name></expr>]</index></name><operator>-&gt;</operator><name>index</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>rdt_load_mdpr</name><argument_list>(<argument><expr><name>rdt</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>n</name> <operator>-</operator> <name>first</name><operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>real_parse_asm_rule</name><parameter_list>(<parameter><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<do>do <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>sscanf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">" %*1[Aa]verage%*1[Bb]andwidth=%"</literal><name>SCNd64</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>bit_rate</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>p</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <name>p</name> <operator>&gt;</operator> <name>end</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>end</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name>p</name> <operator>&lt;</operator> <name>end</name></expr>)</condition>;</do>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>AVStream</name> <modifier>*</modifier></type>

<name>add_dstream</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>orig_st</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>st</name> <operator>=</operator> <call><name>avformat_new_stream</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name><name>orig_st</name><operator>-&gt;</operator><name>id</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>=</operator> <name><name>orig_st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>first_dts</name></name> <operator>=</operator> <name><name>orig_st</name><operator>-&gt;</operator><name>first_dts</name></name></expr>;</expr_stmt>

<return>return <expr><name>st</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>real_parse_asm_rulebook</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>orig_st</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n_rules</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>odd</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\"'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>end</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">';'</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>odd</name> <operator>&amp;&amp;</operator> <name>end</name> <operator>!=</operator> <name>p</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>n_rules</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>st</name> <operator>=</operator> <call><name>add_dstream</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>orig_st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>st</name> <operator>=</operator> <name>orig_st</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>st</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>real_parse_asm_rule</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>n_rules</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>end</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>odd</name> <operator>^=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>ff_real_parse_sdp_a_line</name> <parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stream_index</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>line</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_strstart</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"ASMRuleBook:string;"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>real_parse_asm_rulebook</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>stream_index</name></expr>]</index></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>rdt_init</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>st_index</name></decl></parameter>, <parameter><decl><type><name>PayloadContext</name> <modifier>*</modifier></type><name>rdt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rdt</name><operator>-&gt;</operator><name>rmctx</name></name> <operator>=</operator> <call><name>avformat_alloc_context</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>rdt</name><operator>-&gt;</operator><name>rmctx</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_copy_whiteblacklists</name><argument_list>(<argument><expr><name><name>rdt</name><operator>-&gt;</operator><name>rmctx</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>avformat_open_input</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rdt</name><operator>-&gt;</operator><name>rmctx</name></name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ff_rdt_demuxer</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>rdt_close_context</name> <parameter_list>(<parameter><decl><type><name>PayloadContext</name> <modifier>*</modifier></type><name>rdt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>rdt</name><operator>-&gt;</operator><name>nb_rmst</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>rdt</name><operator>-&gt;</operator><name>rmst</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ff_rm_free_rmstream</name><argument_list>(<argument><expr><name><name>rdt</name><operator>-&gt;</operator><name>rmst</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rdt</name><operator>-&gt;</operator><name>rmst</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name><name>rdt</name><operator>-&gt;</operator><name>rmctx</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>avformat_close_input</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rdt</name><operator>-&gt;</operator><name>rmctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rdt</name><operator>-&gt;</operator><name>mlti_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rdt</name><operator>-&gt;</operator><name>rmst</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RDT_HANDLER</name><parameter_list>(<parameter><type><name>n</name></type></parameter>, <parameter><type><name>s</name></type></parameter>, <parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RTPDynamicProtocolHandler ff_rdt_ ##n ##_handler = { .enc_name = s, .codec_type = t, .codec_id = AV_CODEC_ID_NONE, .priv_data_size = sizeof(PayloadContext), .init = rdt_init, .parse_sdp_a_line = rdt_parse_sdp_line, .close = rdt_close_context, .parse_packet = rdt_parse_packet }</cpp:value></cpp:define>

<expr_stmt><expr><call><name>RDT_HANDLER</name><argument_list>(<argument><expr><name>live_video</name></expr></argument>, <argument><expr><literal type="string">"x-pn-multirate-realvideo-live"</literal></expr></argument>, <argument><expr><name>AVMEDIA_TYPE_VIDEO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RDT_HANDLER</name><argument_list>(<argument><expr><name>live_audio</name></expr></argument>, <argument><expr><literal type="string">"x-pn-multirate-realaudio-live"</literal></expr></argument>, <argument><expr><name>AVMEDIA_TYPE_AUDIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RDT_HANDLER</name><argument_list>(<argument><expr><name>video</name></expr></argument>, <argument><expr><literal type="string">"x-pn-realvideo"</literal></expr></argument>, <argument><expr><name>AVMEDIA_TYPE_VIDEO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RDT_HANDLER</name><argument_list>(<argument><expr><name>audio</name></expr></argument>, <argument><expr><literal type="string">"x-pn-realaudio"</literal></expr></argument>, <argument><expr><name>AVMEDIA_TYPE_AUDIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</unit>
