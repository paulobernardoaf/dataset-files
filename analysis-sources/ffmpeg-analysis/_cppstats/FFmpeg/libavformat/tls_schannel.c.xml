<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavformat\tls_schannel.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avformat.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"network.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"os_support.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"url.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tls.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SECURITY_WIN32</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;security.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;schnlsp.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCHANNEL_INITIAL_BUFFER_SIZE</name></cpp:macro> <cpp:value>4096</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCHANNEL_FREE_BUFFER_SIZE</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SECBUFFER_ALERT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SECBUFFER_ALERT</name></cpp:macro> <cpp:value>17</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><struct>struct <name>TLSContext</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TLSShared</name></type> <name>tls_shared</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CredHandle</name></type> <name>cred_handle</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TimeStamp</name></type> <name>cred_timestamp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CtxtHandle</name></type> <name>ctxt_handle</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TimeStamp</name></type> <name>ctxt_timestamp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ULONG</name></type> <name>request_flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ULONG</name></type> <name>context_flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>enc_buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>enc_buf_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>enc_buf_offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dec_buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dec_buf_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dec_buf_offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SecPkgContext_StreamSizes</name></type> <name>sizes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>connected</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>connection_closed</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sspi_close_notify</name></decl>;</decl_stmt>

}</block></struct></type> <name>TLSContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>init_sec_buffer</name><parameter_list>(<parameter><decl><type><name>SecBuffer</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>type</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>buffer</name><operator>-&gt;</operator><name>cbBuffer</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buffer</name><operator>-&gt;</operator><name>BufferType</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buffer</name><operator>-&gt;</operator><name>pvBuffer</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>init_sec_buffer_desc</name><parameter_list>(<parameter><decl><type><name>SecBufferDesc</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>SecBuffer</name> <modifier>*</modifier></type><name>buffers</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>buffer_count</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>ulVersion</name></name> <operator>=</operator> <name>SECBUFFER_VERSION</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>pBuffers</name></name> <operator>=</operator> <name>buffers</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>cBuffers</name></name> <operator>=</operator> <name>buffer_count</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>tls_shutdown_client</name><parameter_list>(<parameter><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TLSContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TLSShared</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>tls_shared</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>connected</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>SecBufferDesc</name></type> <name>BuffDesc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SecBuffer</name></type> <name>Buffer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SECURITY_STATUS</name></type> <name>sspi_ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SecBuffer</name></type> <name>outbuf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SecBufferDesc</name></type> <name>outbuf_desc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dwshut</name> <init>= <expr><name>SCHANNEL_SHUTDOWN</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>init_sec_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>Buffer</name></expr></argument>, <argument><expr><name>SECBUFFER_TOKEN</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dwshut</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dwshut</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_sec_buffer_desc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>BuffDesc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Buffer</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sspi_ret</name> <operator>=</operator> <call><name>ApplyControlToken</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>ctxt_handle</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>BuffDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sspi_ret</name> <operator>!=</operator> <name>SEC_E_OK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"ApplyControlToken failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>init_sec_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>outbuf</name></expr></argument>, <argument><expr><name>SECBUFFER_EMPTY</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_sec_buffer_desc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>outbuf_desc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>outbuf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sspi_ret</name> <operator>=</operator> <call><name>InitializeSecurityContext</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>cred_handle</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>ctxt_handle</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>host</name></name></expr></argument>,

<argument><expr><name><name>c</name><operator>-&gt;</operator><name>request_flags</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>ctxt_handle</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>outbuf_desc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>context_flags</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>ctxt_timestamp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sspi_ret</name> <operator>==</operator> <name>SEC_E_OK</name> <operator>||</operator> <name>sspi_ret</name> <operator>==</operator> <name>SEC_I_CONTEXT_EXPIRED</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ffurl_write</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>tcp</name></name></expr></argument>, <argument><expr><name><name>outbuf</name><operator>.</operator><name>pvBuffer</name></name></expr></argument>, <argument><expr><name><name>outbuf</name><operator>.</operator><name>cbBuffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FreeContextBuffer</name><argument_list>(<argument><expr><name><name>outbuf</name><operator>.</operator><name>pvBuffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>ret</name> <operator>!=</operator> <name><name>outbuf</name><operator>.</operator><name>cbBuffer</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to send close message\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>connected</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>tls_close</name><parameter_list>(<parameter><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TLSContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>tls_shutdown_client</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DeleteSecurityContext</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>ctxt_handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FreeCredentialsHandle</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>cred_handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>enc_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>enc_buf_size</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>enc_buf_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>dec_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>dec_buf_size</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>dec_buf_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>tls_shared</name><operator>.</operator><name>tcp</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ffurl_close</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>tls_shared</name><operator>.</operator><name>tcp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>tls_client_handshake_loop</name><parameter_list>(<parameter><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>initial</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TLSContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TLSShared</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>tls_shared</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SECURITY_STATUS</name></type> <name>sspi_ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SecBuffer</name></type> <name><name>outbuf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SecBufferDesc</name></type> <name>outbuf_desc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SecBuffer</name></type> <name><name>inbuf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SecBufferDesc</name></type> <name>inbuf_desc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>read_data</name> <init>= <expr><name>initial</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>enc_buf</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>enc_buf_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_reallocp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>enc_buf</name></name></expr></argument>, <argument><expr><name>SCHANNEL_INITIAL_BUFFER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>enc_buf_size</name></name> <operator>=</operator> <name>SCHANNEL_INITIAL_BUFFER_SIZE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>dec_buf</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>dec_buf_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_reallocp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>dec_buf</name></name></expr></argument>, <argument><expr><name>SCHANNEL_INITIAL_BUFFER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>dec_buf_size</name></name> <operator>=</operator> <name>SCHANNEL_INITIAL_BUFFER_SIZE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>enc_buf_size</name></name> <operator>-</operator> <name><name>c</name><operator>-&gt;</operator><name>enc_buf_offset</name></name> <operator>&lt;</operator> <name>SCHANNEL_FREE_BUFFER_SIZE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>enc_buf_size</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>enc_buf_offset</name></name> <operator>+</operator> <name>SCHANNEL_FREE_BUFFER_SIZE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_reallocp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>enc_buf</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>enc_buf_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>enc_buf_size</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>enc_buf_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>read_data</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ffurl_read</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>tls_shared</name><operator>.</operator><name>tcp</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>enc_buf</name></name> <operator>+</operator> <name><name>c</name><operator>-&gt;</operator><name>enc_buf_offset</name></name></expr></argument>,

<argument><expr><name><name>c</name><operator>-&gt;</operator><name>enc_buf_size</name></name> <operator>-</operator> <name><name>c</name><operator>-&gt;</operator><name>enc_buf_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to read handshake response\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>enc_buf_offset</name></name> <operator>+=</operator> <name>ret</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>init_sec_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>inbuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>SECBUFFER_TOKEN</name></expr></argument>, <argument><expr><call><name>av_malloc</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>enc_buf_offset</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>enc_buf_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_sec_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>inbuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>SECBUFFER_EMPTY</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_sec_buffer_desc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>inbuf_desc</name></expr></argument>, <argument><expr><name>inbuf</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>inbuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pvBuffer</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to allocate input buffer\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>inbuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pvBuffer</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>enc_buf</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>enc_buf_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_sec_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>outbuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>SECBUFFER_TOKEN</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_sec_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>outbuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>SECBUFFER_ALERT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_sec_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>outbuf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>SECBUFFER_EMPTY</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_sec_buffer_desc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>outbuf_desc</name></expr></argument>, <argument><expr><name>outbuf</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sspi_ret</name> <operator>=</operator> <call><name>InitializeSecurityContext</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>cred_handle</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>ctxt_handle</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>host</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>request_flags</name></name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>inbuf_desc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>outbuf_desc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>context_flags</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>ctxt_timestamp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>inbuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pvBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sspi_ret</name> <operator>==</operator> <name>SEC_E_INCOMPLETE_MESSAGE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Received incomplete handshake, need more data\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>read_data</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sspi_ret</name> <operator>==</operator> <name>SEC_I_INCOMPLETE_CREDENTIALS</name> <operator>&amp;&amp;</operator>

<operator>!</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>request_flags</name></name> <operator>&amp;</operator> <name>ISC_REQ_USE_SUPPLIED_CREDS</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"Client certificate has been requested, ignoring\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>request_flags</name></name> <operator>|=</operator> <name>ISC_REQ_USE_SUPPLIED_CREDS</name></expr>;</expr_stmt>

<expr_stmt><expr><name>read_data</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sspi_ret</name> <operator>==</operator> <name>SEC_I_CONTINUE_NEEDED</name> <operator>||</operator> <name>sspi_ret</name> <operator>==</operator> <name>SEC_E_OK</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>outbuf</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>BufferType</name> <operator>==</operator> <name>SECBUFFER_TOKEN</name> <operator>&amp;&amp;</operator> <name><name>outbuf</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>cbBuffer</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ffurl_write</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>tls_shared</name><operator>.</operator><name>tcp</name></name></expr></argument>, <argument><expr><name><name>outbuf</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pvBuffer</name></expr></argument>, <argument><expr><name><name>outbuf</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>cbBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>ret</name> <operator>!=</operator> <name><name>outbuf</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>cbBuffer</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"Failed to send handshake data\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>outbuf</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pvBuffer</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>FreeContextBuffer</name><argument_list>(<argument><expr><name><name>outbuf</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pvBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>outbuf</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pvBuffer</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>sspi_ret</name> <operator>==</operator> <name>SEC_E_WRONG_PRINCIPAL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"SNI or certificate check failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Creating security context failed (0x%lx)\n"</literal></expr></argument>, <argument><expr><name>sspi_ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_UNKNOWN</name></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>inbuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>BufferType</name> <operator>==</operator> <name>SECBUFFER_EXTRA</name> <operator>&amp;&amp;</operator> <name><name>inbuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>cbBuffer</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>enc_buf_offset</name></name> <operator>&gt;</operator> <name><name>inbuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>cbBuffer</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>enc_buf</name></name></expr></argument>, <argument><expr><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>enc_buf</name></name> <operator>+</operator> <name><name>c</name><operator>-&gt;</operator><name>enc_buf_offset</name></name><operator>)</operator> <operator>-</operator> <name><name>inbuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>cbBuffer</name></expr></argument>,

<argument><expr><name><name>inbuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>cbBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>enc_buf_offset</name></name> <operator>=</operator> <name><name>inbuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>cbBuffer</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sspi_ret</name> <operator>==</operator> <name>SEC_I_CONTINUE_NEEDED</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>read_data</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>enc_buf_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sspi_ret</name> <operator>==</operator> <name>SEC_I_CONTINUE_NEEDED</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>read_data</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></while>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>fail</name>:</label>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>outbuf</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pvBuffer</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>FreeContextBuffer</name><argument_list>(<argument><expr><name><name>outbuf</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pvBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>outbuf</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pvBuffer</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>tls_client_handshake</name><parameter_list>(<parameter><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TLSContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TLSShared</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>tls_shared</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SecBuffer</name></type> <name>outbuf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SecBufferDesc</name></type> <name>outbuf_desc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SECURITY_STATUS</name></type> <name>sspi_ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>init_sec_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>outbuf</name></expr></argument>, <argument><expr><name>SECBUFFER_EMPTY</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_sec_buffer_desc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>outbuf_desc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>outbuf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>request_flags</name></name> <operator>=</operator> <name>ISC_REQ_SEQUENCE_DETECT</name> <operator>|</operator> <name>ISC_REQ_REPLAY_DETECT</name> <operator>|</operator>

<name>ISC_REQ_CONFIDENTIALITY</name> <operator>|</operator> <name>ISC_REQ_ALLOCATE_MEMORY</name> <operator>|</operator>

<name>ISC_REQ_STREAM</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sspi_ret</name> <operator>=</operator> <call><name>InitializeSecurityContext</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>cred_handle</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>host</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>request_flags</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>ctxt_handle</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>outbuf_desc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>context_flags</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>ctxt_timestamp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sspi_ret</name> <operator>!=</operator> <name>SEC_I_CONTINUE_NEEDED</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unable to create initial security context (0x%lx)\n"</literal></expr></argument>, <argument><expr><name>sspi_ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_UNKNOWN</name></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ffurl_write</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>tcp</name></name></expr></argument>, <argument><expr><name><name>outbuf</name><operator>.</operator><name>pvBuffer</name></name></expr></argument>, <argument><expr><name><name>outbuf</name><operator>.</operator><name>cbBuffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FreeContextBuffer</name><argument_list>(<argument><expr><name><name>outbuf</name><operator>.</operator><name>pvBuffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>ret</name> <operator>!=</operator> <name><name>outbuf</name><operator>.</operator><name>cbBuffer</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to send initial handshake data\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>tls_client_handshake_loop</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>DeleteSecurityContext</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>ctxt_handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>tls_open</name><parameter_list>(<parameter><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>uri</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>AVDictionary</name> <modifier>*</modifier><modifier>*</modifier></type><name>options</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TLSContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TLSShared</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>tls_shared</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SECURITY_STATUS</name></type> <name>sspi_ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SCHANNEL_CRED</name></type> <name>schannel_cred</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_tls_open_underlying</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>listen</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"TLS Listen Sockets with SChannel is not implemented.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>schannel_cred</name><operator>.</operator><name>dwVersion</name></name> <operator>=</operator> <name>SCHANNEL_CRED_VERSION</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>verify</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>schannel_cred</name><operator>.</operator><name>dwFlags</name></name> <operator>=</operator> <name>SCH_CRED_AUTO_CRED_VALIDATION</name> <operator>|</operator>

<name>SCH_CRED_REVOCATION_CHECK_CHAIN</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>schannel_cred</name><operator>.</operator><name>dwFlags</name></name> <operator>=</operator> <name>SCH_CRED_MANUAL_CRED_VALIDATION</name> <operator>|</operator>

<name>SCH_CRED_IGNORE_NO_REVOCATION_CHECK</name> <operator>|</operator>

<name>SCH_CRED_IGNORE_REVOCATION_OFFLINE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>sspi_ret</name> <operator>=</operator> <call><name>AcquireCredentialsHandle</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>TCHAR</name> <operator>*</operator><operator>)</operator><name>UNISP_NAME</name></expr></argument>, <argument><expr><name>SECPKG_CRED_OUTBOUND</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>schannel_cred</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>cred_handle</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>cred_timestamp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sspi_ret</name> <operator>!=</operator> <name>SEC_E_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unable to acquire security credentials (0x%lx)\n"</literal></expr></argument>, <argument><expr><name>sspi_ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_UNKNOWN</name></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tls_client_handshake</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>connected</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>tls_close</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>tls_read</name><parameter_list>(<parameter><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TLSContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TLSShared</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>tls_shared</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SECURITY_STATUS</name></type> <name>sspi_ret</name> <init>= <expr><name>SEC_E_OK</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SecBuffer</name></type> <name><name>inbuf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SecBufferDesc</name></type> <name>inbuf_desc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>min_enc_buf_size</name> <init>= <expr><name>len</name> <operator>+</operator> <name>SCHANNEL_FREE_BUFFER_SIZE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;=</operator> <name><name>c</name><operator>-&gt;</operator><name>dec_buf_offset</name></name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>cleanup</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>sspi_close_notify</name></name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>cleanup</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>connection_closed</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>size</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>enc_buf_size</name></name> <operator>-</operator> <name><name>c</name><operator>-&gt;</operator><name>enc_buf_offset</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <name>SCHANNEL_FREE_BUFFER_SIZE</name> <operator>||</operator> <name><name>c</name><operator>-&gt;</operator><name>enc_buf_size</name></name> <operator>&lt;</operator> <name>min_enc_buf_size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>enc_buf_size</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>enc_buf_offset</name></name> <operator>+</operator> <name>SCHANNEL_FREE_BUFFER_SIZE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>enc_buf_size</name></name> <operator>&lt;</operator> <name>min_enc_buf_size</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>enc_buf_size</name></name> <operator>=</operator> <name>min_enc_buf_size</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_reallocp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>enc_buf</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>enc_buf_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>enc_buf_size</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>enc_buf_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ffurl_read</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>tcp</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>enc_buf</name></name> <operator>+</operator> <name><name>c</name><operator>-&gt;</operator><name>enc_buf_offset</name></name></expr></argument>,

<argument><expr><name><name>c</name><operator>-&gt;</operator><name>enc_buf_size</name></name> <operator>-</operator> <name><name>c</name><operator>-&gt;</operator><name>enc_buf_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>AVERROR_EOF</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>connection_closed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unable to read from socket\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>enc_buf_offset</name></name> <operator>+=</operator> <name>ret</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>enc_buf_offset</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>sspi_ret</name> <operator>==</operator> <name>SEC_E_OK</name> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>dec_buf_offset</name></name> <operator>&lt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>init_sec_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>inbuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>SECBUFFER_DATA</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>enc_buf</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>enc_buf_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_sec_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>inbuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>SECBUFFER_EMPTY</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_sec_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>inbuf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>SECBUFFER_EMPTY</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_sec_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>inbuf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>SECBUFFER_EMPTY</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_sec_buffer_desc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>inbuf_desc</name></expr></argument>, <argument><expr><name>inbuf</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sspi_ret</name> <operator>=</operator> <call><name>DecryptMessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>ctxt_handle</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>inbuf_desc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sspi_ret</name> <operator>==</operator> <name>SEC_E_OK</name> <operator>||</operator> <name>sspi_ret</name> <operator>==</operator> <name>SEC_I_RENEGOTIATE</name> <operator>||</operator>

<name>sspi_ret</name> <operator>==</operator> <name>SEC_I_CONTEXT_EXPIRED</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>inbuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>BufferType</name> <operator>==</operator> <name>SECBUFFER_DATA</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>size</name> <operator>=</operator> <ternary><condition><expr><name><name>inbuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>cbBuffer</name> <operator>&gt;</operator> <name>SCHANNEL_FREE_BUFFER_SIZE</name></expr> ?</condition><then>

<expr><name><name>inbuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>cbBuffer</name></expr> </then><else>: <expr><name>SCHANNEL_FREE_BUFFER_SIZE</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>dec_buf_size</name></name> <operator>-</operator> <name><name>c</name><operator>-&gt;</operator><name>dec_buf_offset</name></name> <operator>&lt;</operator> <name>size</name> <operator>||</operator> <name><name>c</name><operator>-&gt;</operator><name>dec_buf_size</name></name> <operator>&lt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>dec_buf_size</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>dec_buf_offset</name></name> <operator>+</operator> <name>size</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>dec_buf_size</name></name> <operator>&lt;</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>dec_buf_size</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_reallocp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>dec_buf</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>dec_buf_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>dec_buf_size</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>dec_buf_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <name><name>inbuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>cbBuffer</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>dec_buf</name></name> <operator>+</operator> <name><name>c</name><operator>-&gt;</operator><name>dec_buf_offset</name></name></expr></argument>, <argument><expr><name><name>inbuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pvBuffer</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>dec_buf_offset</name></name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>inbuf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>BufferType</name> <operator>==</operator> <name>SECBUFFER_EXTRA</name> <operator>&amp;&amp;</operator> <name><name>inbuf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>cbBuffer</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>enc_buf_offset</name></name> <operator>&gt;</operator> <name><name>inbuf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>cbBuffer</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>enc_buf</name></name></expr></argument>, <argument><expr><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>enc_buf</name></name> <operator>+</operator> <name><name>c</name><operator>-&gt;</operator><name>enc_buf_offset</name></name><operator>)</operator> <operator>-</operator> <name><name>inbuf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>cbBuffer</name></expr></argument>,

<argument><expr><name><name>inbuf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>cbBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>enc_buf_offset</name></name> <operator>=</operator> <name><name>inbuf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>cbBuffer</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>enc_buf_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sspi_ret</name> <operator>==</operator> <name>SEC_I_RENEGOTIATE</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>enc_buf_offset</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Cannot renegotiate, encrypted data buffer not empty\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_UNKNOWN</name></expr>;</expr_stmt>

<goto>goto <name>cleanup</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"Re-negotiating security context\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tls_client_handshake_loop</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<goto>goto <name>cleanup</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>sspi_ret</name> <operator>=</operator> <name>SEC_E_OK</name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>sspi_ret</name> <operator>==</operator> <name>SEC_I_CONTEXT_EXPIRED</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>sspi_close_notify</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>connection_closed</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>connection_closed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"Server closed the connection\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<goto>goto <name>cleanup</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>sspi_ret</name> <operator>==</operator> <name>SEC_E_INCOMPLETE_MESSAGE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>cleanup</name>;</goto>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unable to decrypt message (error 0x%x)\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>sspi_ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>cleanup</name>;</goto>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>cleanup</name>:</label>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>dec_buf_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>dec_buf</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>dec_buf</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>dec_buf</name></name> <operator>+</operator> <name>size</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>dec_buf_offset</name></name> <operator>-</operator> <name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>dec_buf_offset</name></name> <operator>-=</operator> <name>size</name></expr>;</expr_stmt>

<return>return <expr><name>size</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>connection_closed</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><ternary><condition><expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>ret</name></expr> </then><else>: <expr><name>AVERROR_EOF</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>tls_write</name><parameter_list>(<parameter><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TLSContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TLSShared</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>tls_shared</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SECURITY_STATUS</name></type> <name>sspi_ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>data_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SecBuffer</name></type> <name><name>outbuf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SecBufferDesc</name></type> <name>outbuf_desc</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>sizes</name><operator>.</operator><name>cbMaximumMessage</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>sspi_ret</name> <operator>=</operator> <call><name>QueryContextAttributes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>ctxt_handle</name></name></expr></argument>, <argument><expr><name>SECPKG_ATTR_STREAM_SIZES</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>sizes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sspi_ret</name> <operator>!=</operator> <name>SEC_E_OK</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_UNKNOWN</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>sizes</name><operator>.</operator><name>cbMaximumMessage</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>data_size</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>sizes</name><operator>.</operator><name>cbHeader</name></name> <operator>+</operator> <name>len</name> <operator>+</operator> <name><name>c</name><operator>-&gt;</operator><name>sizes</name><operator>.</operator><name>cbTrailer</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name>data_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>data</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>init_sec_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>outbuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>SECBUFFER_STREAM_HEADER</name></expr></argument>,

<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>sizes</name><operator>.</operator><name>cbHeader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_sec_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>outbuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>SECBUFFER_DATA</name></expr></argument>,

<argument><expr><name>data</name> <operator>+</operator> <name><name>c</name><operator>-&gt;</operator><name>sizes</name><operator>.</operator><name>cbHeader</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_sec_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>outbuf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>SECBUFFER_STREAM_TRAILER</name></expr></argument>,

<argument><expr><name>data</name> <operator>+</operator> <name><name>c</name><operator>-&gt;</operator><name>sizes</name><operator>.</operator><name>cbHeader</name></name> <operator>+</operator> <name>len</name></expr></argument>,

<argument><expr><name><name>c</name><operator>-&gt;</operator><name>sizes</name><operator>.</operator><name>cbTrailer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_sec_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>outbuf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>SECBUFFER_EMPTY</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_sec_buffer_desc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>outbuf_desc</name></expr></argument>, <argument><expr><name>outbuf</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>outbuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pvBuffer</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sspi_ret</name> <operator>=</operator> <call><name>EncryptMessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>ctxt_handle</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>outbuf_desc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sspi_ret</name> <operator>==</operator> <name>SEC_E_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>outbuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>cbBuffer</name> <operator>+</operator> <name><name>outbuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>cbBuffer</name> <operator>+</operator> <name><name>outbuf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>cbBuffer</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ffurl_write</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>tcp</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>ret</name> <operator>!=</operator> <name>len</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Writing encrypted data to socket failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>done</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Encrypting data failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sspi_ret</name> <operator>==</operator> <name>SEC_E_INSUFFICIENT_MEMORY</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<goto>goto <name>done</name>;</goto>

</block_content>}</block></else></if_stmt>

<label><name>done</name>:</label>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>ret</name></expr> </then><else>: <expr><name><name>outbuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>cbBuffer</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>tls_get_file_handle</name><parameter_list>(<parameter><decl><type><name>URLContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TLSContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>ffurl_get_file_handle</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>tls_shared</name><operator>.</operator><name>tcp</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>options</name><index>[]</index></name> <init>= <expr><block>{

<expr><call><name>TLS_COMMON_OPTIONS</name><argument_list>(<argument><expr><name>TLSContext</name></expr></argument>, <argument><expr><name>tls_shared</name></expr></argument>)</argument_list></call></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>tls_class</name> <init>= <expr><block>{

<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"tls"</literal></expr>,

<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,

<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>options</name></expr>,

<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>URLProtocol</name></type> <name>ff_tls_protocol</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"tls"</literal></expr>,

<expr><operator>.</operator><name>url_open2</name> <operator>=</operator> <name>tls_open</name></expr>,

<expr><operator>.</operator><name>url_read</name> <operator>=</operator> <name>tls_read</name></expr>,

<expr><operator>.</operator><name>url_write</name> <operator>=</operator> <name>tls_write</name></expr>,

<expr><operator>.</operator><name>url_close</name> <operator>=</operator> <name>tls_close</name></expr>,

<expr><operator>.</operator><name>url_get_file_handle</name> <operator>=</operator> <name>tls_get_file_handle</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TLSContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>URL_PROTOCOL_FLAG_NETWORK</name></expr>,

<expr><operator>.</operator><name>priv_data_class</name> <operator>=</operator> <operator>&amp;</operator><name>tls_class</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
