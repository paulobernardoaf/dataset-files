<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavformat\aiffenc.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intfloat.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avformat.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"aiff.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avio_internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"isom.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"id3v2.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>AIFFOutputContext</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>form</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>frames</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>ssnd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>audio_stream_idx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVPacketList</name> <modifier>*</modifier></type><name>pict_list</name></decl>, <modifier>*</modifier><name>pict_list_end</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>write_id3v2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>id3v2_version</name></decl>;</decl_stmt>

}</block></struct></type> <name>AIFFOutputContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>put_id3v2_tags</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AIFFOutputContext</name> <modifier>*</modifier></type><name>aiff</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>pos</name></decl>, <decl><type ref="prev"/><name>end</name></decl>, <decl><type ref="prev"/><name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ID3v2EncContext</name></type> <name>id3v2</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVPacketList</name> <modifier>*</modifier></type><name>pict_list</name> <init>= <expr><name><name>aiff</name><operator>-&gt;</operator><name>pict_list</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>metadata</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>aiff</name><operator>-&gt;</operator><name>pict_list</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>avio_wl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'I'</literal></expr></argument>, <argument><expr><literal type="char">'D'</literal></expr></argument>, <argument><expr><literal type="char">'3'</literal></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_id3v2_start</name><argument_list>(<argument><expr><operator>&amp;</operator><name>id3v2</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>aiff</name><operator>-&gt;</operator><name>id3v2_version</name></name></expr></argument>, <argument><expr><name>ID3v2_DEFAULT_MAGIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_id3v2_write_metadata</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>id3v2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>pict_list</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_id3v2_write_apic</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>id3v2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pict_list</name><operator>-&gt;</operator><name>pkt</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pict_list</name> <operator>=</operator> <name><name>pict_list</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>ff_id3v2_finish</name><argument_list>(<argument><expr><operator>&amp;</operator><name>id3v2</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>metadata_header_padding</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>end</name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <name>end</name> <operator>-</operator> <name>pos</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pos</name> <operator>-</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>put_meta</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVDictionaryEntry</name> <modifier>*</modifier></type><name>tag</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>tag</name> <operator>=</operator> <call><name>av_dict_get</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>tag</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>avio_wl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><call><name>FFALIGN</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>tag</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>aiff_write_header</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AIFFOutputContext</name> <modifier>*</modifier></type><name>aiff</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodecParameters</name> <modifier>*</modifier></type><name>par</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>sample_rate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>aifc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>aiff</name><operator>-&gt;</operator><name>audio_stream_idx</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>aiff</name><operator>-&gt;</operator><name>audio_stream_idx</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>aiff</name><operator>-&gt;</operator><name>audio_stream_idx</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>!=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"AIFF allows only one audio stream and a picture.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>aiff</name><operator>-&gt;</operator><name>audio_stream_idx</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"No audio stream present.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>par</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name><name>aiff</name><operator>-&gt;</operator><name>audio_stream_idx</name></name></expr>]</index></name><operator>-&gt;</operator><name>codecpar</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>par</name><operator>-&gt;</operator><name>codec_tag</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>par</name><operator>-&gt;</operator><name>codec_tag</name></name> <operator>!=</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'N'</literal></expr></argument>,<argument><expr><literal type="char">'O'</literal></expr></argument>,<argument><expr><literal type="char">'N'</literal></expr></argument>,<argument><expr><literal type="char">'E'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>aifc</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"FORM"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>aiff</name><operator>-&gt;</operator><name>form</name></name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><ternary><condition><expr><name>aifc</name></expr> ?</condition><then> <expr><literal type="string">"AIFC"</literal></expr> </then><else>: <expr><literal type="string">"AIFF"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>aifc</name></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>par</name><operator>-&gt;</operator><name>block_align</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"block align not set\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"FVER"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0xA2805140</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>par</name><operator>-&gt;</operator><name>channels</name></name> <operator>&gt;</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>par</name><operator>-&gt;</operator><name>channel_layout</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"CHAN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_mov_write_chan</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>par</name><operator>-&gt;</operator><name>channel_layout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>put_meta</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"title"</literal></expr></argument>, <argument><expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'N'</literal></expr></argument>, <argument><expr><literal type="char">'A'</literal></expr></argument>, <argument><expr><literal type="char">'M'</literal></expr></argument>, <argument><expr><literal type="char">'E'</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_meta</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"author"</literal></expr></argument>, <argument><expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'A'</literal></expr></argument>, <argument><expr><literal type="char">'U'</literal></expr></argument>, <argument><expr><literal type="char">'T'</literal></expr></argument>, <argument><expr><literal type="char">'H'</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_meta</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"copyright"</literal></expr></argument>, <argument><expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'('</literal></expr></argument>, <argument><expr><literal type="char">'c'</literal></expr></argument>, <argument><expr><literal type="char">')'</literal></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_meta</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"comment"</literal></expr></argument>, <argument><expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'A'</literal></expr></argument>, <argument><expr><literal type="char">'N'</literal></expr></argument>, <argument><expr><literal type="char">'N'</literal></expr></argument>, <argument><expr><literal type="char">'O'</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"COMM"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><ternary><condition><expr><name>aifc</name></expr> ?</condition><then> <expr><literal type="number">24</literal></expr> </then><else>: <expr><literal type="number">18</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>par</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>aiff</name><operator>-&gt;</operator><name>frames</name></name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>par</name><operator>-&gt;</operator><name>bits_per_coded_sample</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>par</name><operator>-&gt;</operator><name>bits_per_coded_sample</name></name> <operator>=</operator> <call><name>av_get_bits_per_sample</name><argument_list>(<argument><expr><name><name>par</name><operator>-&gt;</operator><name>codec_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>par</name><operator>-&gt;</operator><name>bits_per_coded_sample</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"could not compute bits per sample\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>par</name><operator>-&gt;</operator><name>block_align</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>par</name><operator>-&gt;</operator><name>block_align</name></name> <operator>=</operator> <operator>(</operator><name><name>par</name><operator>-&gt;</operator><name>bits_per_coded_sample</name></name> <operator>*</operator> <name><name>par</name><operator>-&gt;</operator><name>channels</name></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>par</name><operator>-&gt;</operator><name>bits_per_coded_sample</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>sample_rate</name> <operator>=</operator> <call><name>av_double2int</name><argument_list>(<argument><expr><name><name>par</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>(</operator><name>sample_rate</name> <operator>&gt;&gt;</operator> <literal type="number">52</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><literal type="number">16383</literal> <operator>-</operator> <literal type="number">1023</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">63</literal> <operator>|</operator> <name>sample_rate</name> <operator>&lt;&lt;</operator> <literal type="number">11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>aifc</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avio_wl32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>par</name><operator>-&gt;</operator><name>codec_tag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb16</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><operator>(</operator><name><name>par</name><operator>-&gt;</operator><name>codec_tag</name></name> <operator>==</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'Q'</literal></expr></argument>,<argument><expr><literal type="char">'D'</literal></expr></argument>,<argument><expr><literal type="char">'M'</literal></expr></argument>,<argument><expr><literal type="char">'2'</literal></expr></argument>)</argument_list></call>

<operator>||</operator> <name><name>par</name><operator>-&gt;</operator><name>codec_tag</name></name> <operator>==</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'Q'</literal></expr></argument>,<argument><expr><literal type="char">'c'</literal></expr></argument>,<argument><expr><literal type="char">'l'</literal></expr></argument>,<argument><expr><literal type="char">'p'</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>par</name><operator>-&gt;</operator><name>extradata_size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"wave"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>par</name><operator>-&gt;</operator><name>extradata_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>par</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>, <argument><expr><name><name>par</name><operator>-&gt;</operator><name>extradata_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ffio_wfourcc</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="string">"SSND"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>aiff</name><operator>-&gt;</operator><name>ssnd</name></name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>avpriv_set_pts_info</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name><name>aiff</name><operator>-&gt;</operator><name>audio_stream_idx</name></name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name><name>aiff</name><operator>-&gt;</operator><name>audio_stream_idx</name></name></expr>]</index></name><operator>-&gt;</operator><name><name>codecpar</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>aiff_write_packet</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AIFFOutputContext</name> <modifier>*</modifier></type><name>aiff</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>stream_index</name></name> <operator>==</operator> <name><name>aiff</name><operator>-&gt;</operator><name>audio_stream_idx</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name><name>pkt</name><operator>-&gt;</operator><name>stream_index</name></name></expr>]</index></name><operator>-&gt;</operator><name><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>!=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name><name>pkt</name><operator>-&gt;</operator><name>stream_index</name></name></expr>]</index></name><operator>-&gt;</operator><name>nb_frames</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Got more than one picture in stream %d,"</literal>

<literal type="string">" ignoring.\n"</literal></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>stream_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name><name>pkt</name><operator>-&gt;</operator><name>stream_index</name></name></expr>]</index></name><operator>-&gt;</operator><name>nb_frames</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>ff_packet_list_put</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>aiff</name><operator>-&gt;</operator><name>pict_list</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>aiff</name><operator>-&gt;</operator><name>pict_list_end</name></name></expr></argument>,

<argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>FF_PACKETLIST_FLAG_REF_PACKET</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>aiff_write_trailer</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AIFFOutputContext</name> <modifier>*</modifier></type><name>aiff</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodecParameters</name> <modifier>*</modifier></type><name>par</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name><name>aiff</name><operator>-&gt;</operator><name>audio_stream_idx</name></name></expr>]</index></name><operator>-&gt;</operator><name>codecpar</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>file_size</name></decl>, <decl><type ref="prev"/><name>end_size</name></decl>;</decl_stmt>

<expr_stmt><expr><name>end_size</name> <operator>=</operator> <name>file_size</name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>file_size</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avio_w8</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>end_size</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>pb</name><operator>-&gt;</operator><name>seekable</name></name> <operator>&amp;</operator> <name>AVIO_SEEKABLE_NORMAL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>aiff</name><operator>-&gt;</operator><name>frames</name></name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>(</operator><name>file_size</name> <operator>-</operator> <name><name>aiff</name><operator>-&gt;</operator><name>ssnd</name></name> <operator>-</operator> <literal type="number">12</literal><operator>)</operator> <operator>/</operator> <name><name>par</name><operator>-&gt;</operator><name>block_align</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>aiff</name><operator>-&gt;</operator><name>ssnd</name></name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>file_size</name> <operator>-</operator> <name><name>aiff</name><operator>-&gt;</operator><name>ssnd</name></name> <operator>-</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>end_size</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>aiff</name><operator>-&gt;</operator><name>write_id3v2</name></name></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>put_id3v2_tags</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>aiff</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>file_size</name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>aiff</name><operator>-&gt;</operator><name>form</name></name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>file_size</name> <operator>-</operator> <name><name>aiff</name><operator>-&gt;</operator><name>form</name></name> <operator>-</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>aiff_deinit</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AIFFOutputContext</name> <modifier>*</modifier></type><name>aiff</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_packet_list_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>aiff</name><operator>-&gt;</operator><name>pict_list</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>aiff</name><operator>-&gt;</operator><name>pict_list_end</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(AIFFOutputContext, x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC</name></cpp:macro> <cpp:value>AV_OPT_FLAG_ENCODING_PARAM</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>options</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"write_id3v2"</literal></expr>, <expr><literal type="string">"Enable ID3 tags writing."</literal></expr>,

<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>write_id3v2</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>ENC</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"id3v2_version"</literal></expr>, <expr><literal type="string">"Select ID3v2 version to write. Currently 3 and 4 are supported."</literal></expr>,

<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>id3v2_version</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">4</literal></expr>}</block></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><name>ENC</name></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>aiff_muxer_class</name> <init>= <expr><block>{

<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"AIFF muxer"</literal></expr>,

<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,

<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>options</name></expr>,

<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVOutputFormat</name></type> <name>ff_aiff_muxer</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"aiff"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Audio IFF"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>mime_type</name> <operator>=</operator> <literal type="string">"audio/aiff"</literal></expr>,

<expr><operator>.</operator><name>extensions</name> <operator>=</operator> <literal type="string">"aif,aiff,afc,aifc"</literal></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>AIFFOutputContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>audio_codec</name> <operator>=</operator> <name>AV_CODEC_ID_PCM_S16BE</name></expr>,

<expr><operator>.</operator><name>video_codec</name> <operator>=</operator> <name>AV_CODEC_ID_PNG</name></expr>,

<expr><operator>.</operator><name>write_header</name> <operator>=</operator> <name>aiff_write_header</name></expr>,

<expr><operator>.</operator><name>write_packet</name> <operator>=</operator> <name>aiff_write_packet</name></expr>,

<expr><operator>.</operator><name>write_trailer</name> <operator>=</operator> <name>aiff_write_trailer</name></expr>,

<expr><operator>.</operator><name>deinit</name> <operator>=</operator> <name>aiff_deinit</name></expr>,

<expr><operator>.</operator><name>codec_tag</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>AVCodecTag</name><operator>*</operator> <specifier>const</specifier> <index>[]</index><operator>)</operator><block>{ <expr><name>ff_codec_aiff_tags</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>aiff_muxer_class</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
