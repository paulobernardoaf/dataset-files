<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavformat\argo_asf.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avformat.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASF_TAG</name></cpp:macro> <cpp:value>MKTAG('A', 'S', 'F', '\0')</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASF_FILE_HEADER_SIZE</name></cpp:macro> <cpp:value>24</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASF_CHUNK_HEADER_SIZE</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>ArgoASFFileHeader</name> <block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name>magic</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint16_t</name></type> <name>version_major</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint16_t</name></type> <name>version_minor</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>num_chunks</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>chunk_offset</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int8_t</name></type> <name><name>name</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt> 

}</block></struct></type> <name>ArgoASFFileHeader</name>;</typedef>

<typedef>typedef <type><struct>struct <name>ArgoASFChunkHeader</name> <block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name>num_blocks</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>num_samples</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>unk1</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint16_t</name></type> <name>sample_rate</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint16_t</name></type> <name>unk2</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>flags</name></decl>;</decl_stmt> 

}</block></struct></type> <name>ArgoASFChunkHeader</name>;</typedef>

<enum>enum <block>{

<decl><name>ASF_CF_BITS_PER_SAMPLE</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl>, 

<decl><name>ASF_CF_STEREO</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>, 

<decl><name>ASF_CF_ALWAYS1_1</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr></init></decl>, 

<decl><name>ASF_CF_ALWAYS1_2</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator></expr></init></decl>, 

<decl><name>ASF_CF_ALWAYS1</name> <init>= <expr><name>ASF_CF_ALWAYS1_1</name> <operator>|</operator> <name>ASF_CF_ALWAYS1_2</name></expr></init></decl>,

<decl><name>ASF_CF_ALWAYS0</name> <init>= <expr><operator>~</operator><operator>(</operator><name>ASF_CF_BITS_PER_SAMPLE</name> <operator>|</operator> <name>ASF_CF_STEREO</name> <operator>|</operator> <name>ASF_CF_ALWAYS1</name><operator>)</operator></expr></init></decl>

}</block>;</enum>

<typedef>typedef <type><struct>struct <name>ArgoASFDemuxContext</name> <block>{

<decl_stmt><decl><type><name>ArgoASFFileHeader</name></type> <name>fhdr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ArgoASFChunkHeader</name></type> <name>ckhdr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>blocks_read</name></decl>;</decl_stmt>

}</block></struct></type> <name>ArgoASFDemuxContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>argo_asf_parse_file_header</name><parameter_list>(<parameter><decl><type><name>ArgoASFFileHeader</name> <modifier>*</modifier></type><name>hdr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>magic</name></name> <operator>=</operator> <call><name>AV_RL32</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>version_major</name></name> <operator>=</operator> <call><name>AV_RL16</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>version_minor</name></name> <operator>=</operator> <call><name>AV_RL16</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>num_chunks</name></name> <operator>=</operator> <call><name>AV_RL32</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>chunk_offset</name></name> <operator>=</operator> <call><name>AV_RL32</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>name</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>AV_RL8</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">16</literal> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>argo_asf_parse_chunk_header</name><parameter_list>(<parameter><decl><type><name>ArgoASFChunkHeader</name> <modifier>*</modifier></type><name>hdr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>num_blocks</name></name> <operator>=</operator> <call><name>AV_RL32</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>num_samples</name></name> <operator>=</operator> <call><name>AV_RL32</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>unk1</name></name> <operator>=</operator> <call><name>AV_RL32</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>=</operator> <call><name>AV_RL16</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>unk2</name></name> <operator>=</operator> <call><name>AV_RL16</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <call><name>AV_RL32</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>argo_asf_is_known_version</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ArgoASFFileHeader</name> <modifier>*</modifier></type><name>hdr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name><name>hdr</name><operator>-&gt;</operator><name>version_major</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>hdr</name><operator>-&gt;</operator><name>version_minor</name></name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator> <operator>||</operator>

<operator>(</operator><name><name>hdr</name><operator>-&gt;</operator><name>version_major</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>hdr</name><operator>-&gt;</operator><name>version_minor</name></name> <operator>==</operator> <literal type="number">2</literal><operator>)</operator> <operator>||</operator>

<operator>(</operator><name><name>hdr</name><operator>-&gt;</operator><name>version_major</name></name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>hdr</name><operator>-&gt;</operator><name>version_minor</name></name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>argo_asf_probe</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVProbeData</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ArgoASFFileHeader</name></type> <name>hdr</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>AVPROBE_PADDING_SIZE</name> <operator>&gt;=</operator> <name>ASF_FILE_HEADER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>argo_asf_parse_file_header</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hdr</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hdr</name><operator>.</operator><name>magic</name></name> <operator>!=</operator> <name>ASF_TAG</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>argo_asf_is_known_version</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hdr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVPROBE_SCORE_EXTENSION</name> <operator>/</operator> <literal type="number">2</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>AVPROBE_SCORE_EXTENSION</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>argo_asf_read_header</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ArgoASFDemuxContext</name> <modifier>*</modifier></type><name>asf</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>buf</name><index>[<expr><call><name>FFMAX</name><argument_list>(<argument><expr><name>ASF_FILE_HEADER_SIZE</name></expr></argument>, <argument><expr><name>ASF_CHUNK_HEADER_SIZE</name></expr></argument>)</argument_list></call></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>st</name> <operator>=</operator> <call><name>avformat_new_stream</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>avio_read</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>ASF_FILE_HEADER_SIZE</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>ASF_FILE_HEADER_SIZE</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>argo_asf_parse_file_header</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>asf</name><operator>-&gt;</operator><name>fhdr</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>argo_asf_is_known_version</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>asf</name><operator>-&gt;</operator><name>fhdr</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avpriv_request_sample</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"Version %hu.%hu"</literal></expr></argument>,

<argument><expr><name><name>asf</name><operator>-&gt;</operator><name>fhdr</name><operator>.</operator><name>version_major</name></name></expr></argument>, <argument><expr><name><name>asf</name><operator>-&gt;</operator><name>fhdr</name><operator>.</operator><name>version_minor</name></name></expr></argument>

)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>asf</name><operator>-&gt;</operator><name>fhdr</name><operator>.</operator><name>num_chunks</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>asf</name><operator>-&gt;</operator><name>fhdr</name><operator>.</operator><name>num_chunks</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avpriv_request_sample</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"&gt;1 chunk"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>asf</name><operator>-&gt;</operator><name>fhdr</name><operator>.</operator><name>chunk_offset</name></name> <operator>&lt;</operator> <name>ASF_FILE_HEADER_SIZE</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>avio_skip</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>asf</name><operator>-&gt;</operator><name>fhdr</name><operator>.</operator><name>chunk_offset</name></name> <operator>-</operator> <name>ASF_FILE_HEADER_SIZE</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>avio_read</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>ASF_CHUNK_HEADER_SIZE</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>ASF_CHUNK_HEADER_SIZE</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>argo_asf_parse_chunk_header</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>asf</name><operator>-&gt;</operator><name>ckhdr</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>asf</name><operator>-&gt;</operator><name>ckhdr</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>ASF_CF_ALWAYS1</name><operator>)</operator> <operator>!=</operator> <name>ASF_CF_ALWAYS1</name> <operator>||</operator> <operator>(</operator><name><name>asf</name><operator>-&gt;</operator><name>ckhdr</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>ASF_CF_ALWAYS0</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avpriv_request_sample</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"Nonstandard flags (0x%08X)"</literal></expr></argument>, <argument><expr><name><name>asf</name><operator>-&gt;</operator><name>ckhdr</name><operator>.</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>=</operator> <name>AV_CODEC_ID_ADPCM_ARGO</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>AV_SAMPLE_FMT_S16P</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>asf</name><operator>-&gt;</operator><name>ckhdr</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>ASF_CF_STEREO</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>channel_layout</name></name> <operator>=</operator> <name>AV_CH_LAYOUT_STEREO</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>channel_layout</name></name> <operator>=</operator> <name>AV_CH_LAYOUT_MONO</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>=</operator> <name><name>asf</name><operator>-&gt;</operator><name>ckhdr</name><operator>.</operator><name>sample_rate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>bits_per_coded_sample</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>asf</name><operator>-&gt;</operator><name>ckhdr</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>ASF_CF_BITS_PER_SAMPLE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name> <operator>!=</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avpriv_request_sample</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"Non 16-bit samples"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>channels</name></name> <operator>+</operator>

<operator>(</operator><name><name>asf</name><operator>-&gt;</operator><name>ckhdr</name><operator>.</operator><name>num_samples</name></name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator>

<name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>block_align</name></name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>frame_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>channels</name></name> <operator>*</operator>

<name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>*</operator>

<name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>bits_per_coded_sample</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avpriv_set_pts_info</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>start_time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>duration</name></name> <operator>=</operator> <name><name>asf</name><operator>-&gt;</operator><name>ckhdr</name><operator>.</operator><name>num_blocks</name></name> <operator>*</operator> <name><name>asf</name><operator>-&gt;</operator><name>ckhdr</name><operator>.</operator><name>num_samples</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>nb_frames</name></name> <operator>=</operator> <name><name>asf</name><operator>-&gt;</operator><name>ckhdr</name><operator>.</operator><name>num_blocks</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>argo_asf_read_packet</name><parameter_list>(<parameter><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ArgoASFDemuxContext</name> <modifier>*</modifier></type><name>asf</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>streams</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>asf</name><operator>-&gt;</operator><name>blocks_read</name></name> <operator>&gt;=</operator> <name><name>asf</name><operator>-&gt;</operator><name>ckhdr</name><operator>.</operator><name>num_blocks</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_EOF</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_get_packet</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>frame_size</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>ret</name> <operator>!=</operator> <name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>frame_size</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>stream_index</name></name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>index</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>duration</name></name> <operator>=</operator> <name><name>asf</name><operator>-&gt;</operator><name>ckhdr</name><operator>.</operator><name>num_samples</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name><name>asf</name><operator>-&gt;</operator><name>blocks_read</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name>AVInputFormat</name></type> <name>ff_argo_asf_demuxer</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"argo_asf"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Argonaut Games ASF"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ArgoASFDemuxContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>read_probe</name> <operator>=</operator> <name>argo_asf_probe</name></expr>,

<expr><operator>.</operator><name>read_header</name> <operator>=</operator> <name>argo_asf_read_header</name></expr>,

<expr><operator>.</operator><name>read_packet</name> <operator>=</operator> <name>argo_asf_read_packet</name></expr>

}</block></expr></init></decl>;</decl_stmt>

</unit>
