<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\doc\examples\avio_list_dir.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libavcodec/avcodec.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libavformat/avformat.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libavformat/avio.h&gt;</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>type_string</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AVIO_ENTRY_DIRECTORY</name></expr>:</case>

<return>return <expr><literal type="string">"&lt;DIR&gt;"</literal></expr>;</return>

<case>case <expr><name>AVIO_ENTRY_FILE</name></expr>:</case>

<return>return <expr><literal type="string">"&lt;FILE&gt;"</literal></expr>;</return>

<case>case <expr><name>AVIO_ENTRY_BLOCK_DEVICE</name></expr>:</case>

<return>return <expr><literal type="string">"&lt;BLOCK DEVICE&gt;"</literal></expr>;</return>

<case>case <expr><name>AVIO_ENTRY_CHARACTER_DEVICE</name></expr>:</case>

<return>return <expr><literal type="string">"&lt;CHARACTER DEVICE&gt;"</literal></expr>;</return>

<case>case <expr><name>AVIO_ENTRY_NAMED_PIPE</name></expr>:</case>

<return>return <expr><literal type="string">"&lt;PIPE&gt;"</literal></expr>;</return>

<case>case <expr><name>AVIO_ENTRY_SYMBOLIC_LINK</name></expr>:</case>

<return>return <expr><literal type="string">"&lt;LINK&gt;"</literal></expr>;</return>

<case>case <expr><name>AVIO_ENTRY_SOCKET</name></expr>:</case>

<return>return <expr><literal type="string">"&lt;SOCKET&gt;"</literal></expr>;</return>

<case>case <expr><name>AVIO_ENTRY_SERVER</name></expr>:</case>

<return>return <expr><literal type="string">"&lt;SERVER&gt;"</literal></expr>;</return>

<case>case <expr><name>AVIO_ENTRY_SHARE</name></expr>:</case>

<return>return <expr><literal type="string">"&lt;SHARE&gt;"</literal></expr>;</return>

<case>case <expr><name>AVIO_ENTRY_WORKGROUP</name></expr>:</case>

<return>return <expr><literal type="string">"&lt;WORKGROUP&gt;"</literal></expr>;</return>

<case>case <expr><name>AVIO_ENTRY_UNKNOWN</name></expr>:</case>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

<return>return <expr><literal type="string">"&lt;UNKNOWN&gt;"</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>list_op</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>input_dir</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVIODirEntry</name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVIODirContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cnt</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>filemode</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>uid_and_gid</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>avio_open_dir</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>input_dir</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Cannot open directory: %s.\n"</literal></expr></argument>, <argument><expr><call><name>av_err2str</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>avio_read_dir</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>entry</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Cannot list directory: %s.\n"</literal></expr></argument>, <argument><expr><call><name>av_err2str</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>entry</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>filemode</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>filemode</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"???"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>filemode</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"%3"</literal><name>PRIo64</name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>filemode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>uid_and_gid</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="string">"%"</literal><name>PRId64</name><literal type="string">"(%"</literal><name>PRId64</name><literal type="string">")"</literal></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>user_id</name></name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>group_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cnt</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"%-9s %12s %30s %10s %s %16s %16s %16s\n"</literal></expr></argument>,

<argument><expr><literal type="string">"TYPE"</literal></expr></argument>, <argument><expr><literal type="string">"SIZE"</literal></expr></argument>, <argument><expr><literal type="string">"NAME"</literal></expr></argument>, <argument><expr><literal type="string">"UID(GID)"</literal></expr></argument>, <argument><expr><literal type="string">"UGO"</literal></expr></argument>, <argument><expr><literal type="string">"MODIFIED"</literal></expr></argument>,

<argument><expr><literal type="string">"ACCESSED"</literal></expr></argument>, <argument><expr><literal type="string">"STATUS_CHANGED"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"%-9s %12"</literal><name>PRId64</name><literal type="string">" %30s %10s %s %16"</literal><name>PRId64</name><literal type="string">" %16"</literal><name>PRId64</name><literal type="string">" %16"</literal><name>PRId64</name><literal type="string">"\n"</literal></expr></argument>,

<argument><expr><call><name>type_string</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>size</name></name></expr></argument>,

<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,

<argument><expr><name>uid_and_gid</name></expr></argument>,

<argument><expr><name>filemode</name></expr></argument>,

<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>modification_timestamp</name></name></expr></argument>,

<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>access_timestamp</name></name></expr></argument>,

<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>status_change_timestamp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avio_free_directory_entry</name><argument_list>(<argument><expr><operator>&amp;</operator><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for><empty_stmt>;</empty_stmt>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>avio_close_dir</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>usage</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>program_name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"usage: %s input_dir\n"</literal>

<literal type="string">"API example program to show how to list files in directory "</literal>

<literal type="string">"accessed through AVIOContext.\n"</literal></expr></argument>, <argument><expr><name>program_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_log_set_level</name><argument_list>(<argument><expr><name>AV_LOG_DEBUG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>usage</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>avformat_network_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>list_op</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avformat_network_deinit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

</unit>
