<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\fftools\ffmpeg_videotoolbox.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_UTGETOSTYPEFROMSTRING</name></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;CoreServices/CoreServices.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/videotoolbox.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/imgutils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ffmpeg.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>VTContext</name> <block>{

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>tmp_frame</name></decl>;</decl_stmt>

}</block></struct></type> <name>VTContext</name>;</typedef>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>videotoolbox_pixfmt</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>videotoolbox_retrieve_data</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>InputStream</name> <modifier>*</modifier></type><name>ist</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>opaque</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VTContext</name> <modifier>*</modifier></type><name>vt</name> <init>= <expr><name><name>ist</name><operator>-&gt;</operator><name>hwaccel_ctx</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CVPixelBufferRef</name></type> <name>pixbuf</name> <init>= <expr><operator>(</operator><name>CVPixelBufferRef</name><operator>)</operator><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OSType</name></type> <name>pixel_format</name> <init>= <expr><call><name>CVPixelBufferGetPixelFormatType</name><argument_list>(<argument><expr><name>pixbuf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CVReturn</name></type> <name>err</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>linesize</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>planes</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_frame_unref</name><argument_list>(<argument><expr><name><name>vt</name><operator>-&gt;</operator><name>tmp_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>pixel_format</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>kCVPixelFormatType_420YpCbCr8Planar</name></expr>:</case> <expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>tmp_frame</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUV420P</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>kCVPixelFormatType_422YpCbCr8</name></expr>:</case> <expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>tmp_frame</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>AV_PIX_FMT_UYVY422</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>kCVPixelFormatType_32BGRA</name></expr>:</case> <expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>tmp_frame</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>AV_PIX_FMT_BGRA</name></expr>;</expr_stmt> <break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>kCFCoreFoundationVersionNumber10_7</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>kCVPixelFormatType_420YpCbCr8BiPlanarVideoRange</name></expr>:</case>

<case>case <expr><name>kCVPixelFormatType_420YpCbCr8BiPlanarFullRange</name></expr>:</case> <expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>tmp_frame</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>AV_PIX_FMT_NV12</name></expr>;</expr_stmt> <break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_KCVPIXELFORMATTYPE_420YPCBCR10BIPLANARVIDEORANGE</name></expr></cpp:if>

<case>case <expr><name>kCVPixelFormatType_420YpCbCr10BiPlanarVideoRange</name></expr>:</case>

<case>case <expr><name>kCVPixelFormatType_420YpCbCr10BiPlanarFullRange</name></expr>:</case> <expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>tmp_frame</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>AV_PIX_FMT_P010</name></expr>;</expr_stmt> <break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<default>default:</default>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"%s: Unsupported pixel format: %s\n"</literal></expr></argument>,

<argument><expr><call><name>av_fourcc2str</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>codec_tag</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>videotoolbox_pixfmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>tmp_frame</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>tmp_frame</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_frame_get_buffer</name><argument_list>(<argument><expr><name><name>vt</name><operator>-&gt;</operator><name>tmp_frame</name></name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>CVPixelBufferLockBaseAddress</name><argument_list>(<argument><expr><name>pixbuf</name></expr></argument>, <argument><expr><name>kCVPixelBufferLock_ReadOnly</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>kCVReturnSuccess</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error locking the pixel buffer.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_UNKNOWN</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>CVPixelBufferIsPlanar</name><argument_list>(<argument><expr><name>pixbuf</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>planes</name> <operator>=</operator> <call><name>CVPixelBufferGetPlaneCount</name><argument_list>(<argument><expr><name>pixbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>planes</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>CVPixelBufferGetBaseAddressOfPlane</name><argument_list>(<argument><expr><name>pixbuf</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>CVPixelBufferGetBytesPerRowOfPlane</name><argument_list>(<argument><expr><name>pixbuf</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>CVPixelBufferGetBaseAddress</name><argument_list>(<argument><expr><name>pixbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>CVPixelBufferGetBytesPerRow</name><argument_list>(<argument><expr><name>pixbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>av_image_copy</name><argument_list>(<argument><expr><name><name>vt</name><operator>-&gt;</operator><name>tmp_frame</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>vt</name><operator>-&gt;</operator><name>tmp_frame</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>,

<argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>data</name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><name><name>vt</name><operator>-&gt;</operator><name>tmp_frame</name><operator>-&gt;</operator><name>format</name></name></expr></argument>,

<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_frame_copy_props</name><argument_list>(<argument><expr><name><name>vt</name><operator>-&gt;</operator><name>tmp_frame</name></name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CVPixelBufferUnlockBaseAddress</name><argument_list>(<argument><expr><name>pixbuf</name></expr></argument>, <argument><expr><name>kCVPixelBufferLock_ReadOnly</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_frame_unref</name><argument_list>(<argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_move_ref</name><argument_list>(<argument><expr><name>frame</name></expr></argument>, <argument><expr><name><name>vt</name><operator>-&gt;</operator><name>tmp_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>videotoolbox_uninit</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>InputStream</name> <modifier>*</modifier></type><name>ist</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>opaque</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VTContext</name> <modifier>*</modifier></type><name>vt</name> <init>= <expr><name><name>ist</name><operator>-&gt;</operator><name>hwaccel_ctx</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ist</name><operator>-&gt;</operator><name>hwaccel_uninit</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ist</name><operator>-&gt;</operator><name>hwaccel_retrieve_data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vt</name><operator>-&gt;</operator><name>tmp_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_videotoolbox_default_free</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ist</name><operator>-&gt;</operator><name>hwaccel_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>videotoolbox_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>InputStream</name> <modifier>*</modifier></type><name>ist</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>opaque</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>loglevel</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>ist</name><operator>-&gt;</operator><name>hwaccel_id</name></name> <operator>==</operator> <name>HWACCEL_AUTO</name><operator>)</operator></expr> ?</condition><then> <expr><name>AV_LOG_VERBOSE</name></expr> </then><else>: <expr><name>AV_LOG_ERROR</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VTContext</name> <modifier>*</modifier></type><name>vt</name></decl>;</decl_stmt>

<expr_stmt><expr><name>vt</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>vt</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>vt</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ist</name><operator>-&gt;</operator><name>hwaccel_ctx</name></name> <operator>=</operator> <name>vt</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ist</name><operator>-&gt;</operator><name>hwaccel_uninit</name></name> <operator>=</operator> <name>videotoolbox_uninit</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ist</name><operator>-&gt;</operator><name>hwaccel_retrieve_data</name></name> <operator>=</operator> <name>videotoolbox_retrieve_data</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vt</name><operator>-&gt;</operator><name>tmp_frame</name></name> <operator>=</operator> <call><name>av_frame_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>vt</name><operator>-&gt;</operator><name>tmp_frame</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>videotoolbox_pixfmt</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_videotoolbox_default_init</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>AVVideotoolboxContext</name> <modifier>*</modifier></type><name>vtctx</name> <init>= <expr><call><name>av_videotoolbox_alloc_context</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CFStringRef</name></type> <name>pixfmt_str</name> <init>= <expr><call><name>CFStringCreateWithCString</name><argument_list>(<argument><expr><name>kCFAllocatorDefault</name></expr></argument>,

<argument><expr><name>videotoolbox_pixfmt</name></expr></argument>,

<argument><expr><name>kCFStringEncodingUTF8</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_UTGETOSTYPEFROMSTRING</name></expr></cpp:if>

<expr_stmt><expr><name><name>vtctx</name><operator>-&gt;</operator><name>cv_pix_fmt_type</name></name> <operator>=</operator> <call><name>UTGetOSTypeFromString</name><argument_list>(<argument><expr><name>pixfmt_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>loglevel</name></expr></argument>, <argument><expr><literal type="string">"UTGetOSTypeFromString() is not available "</literal>

<literal type="string">"on this platform, %s pixel format can not be honored from "</literal>

<literal type="string">"the command line\n"</literal></expr></argument>, <argument><expr><name>videotoolbox_pixfmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_videotoolbox_default_init2</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>vtctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>pixfmt_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>loglevel</name></expr></argument>, <argument><expr><literal type="string">"Error creating Videotoolbox decoder.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>videotoolbox_uninit</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

</unit>
